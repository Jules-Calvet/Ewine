
BLE_Ewine_V03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd80  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ed4  0800dec0  0800dec0  0001dec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fd94  0800fd94  0001fd94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fd9c  0800fd9c  0001fd9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fda0  0800fda0  0001fda0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000008  0800fda4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  20000098  0800fe34  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  2000091c  080106b7  0002091c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000954  080106ec  00020954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001c44  20000968  080106fd  00020968  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200025ac  080106fd  000225ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020965  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   00036022  00000000  00000000  00020995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007823  00000000  00000000  000569b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002c28  00000000  00000000  0005e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000028d8  00000000  00000000  00060e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003140d  00000000  00000000  000636e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00036a19  00000000  00000000  00094aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fee9f  00000000  00000000  000cb506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001ca3a5  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c150  00000000  00000000  001ca3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000968 	.word	0x20000968
 800015c:	00000000 	.word	0x00000000
 8000160:	0800dea8 	.word	0x0800dea8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000096c 	.word	0x2000096c
 800017c:	0800dea8 	.word	0x0800dea8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b974 	b.w	8000ccc <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	468e      	mov	lr, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14d      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	4694      	mov	ip, r2
 8000a0e:	d969      	bls.n	8000ae4 <__udivmoddi4+0xe8>
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b152      	cbz	r2, 8000a2c <__udivmoddi4+0x30>
 8000a16:	fa01 f302 	lsl.w	r3, r1, r2
 8000a1a:	f1c2 0120 	rsb	r1, r2, #32
 8000a1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a26:	ea41 0e03 	orr.w	lr, r1, r3
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	0c21      	lsrs	r1, r4, #16
 8000a32:	fbbe f6f8 	udiv	r6, lr, r8
 8000a36:	fa1f f78c 	uxth.w	r7, ip
 8000a3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a42:	fb06 f107 	mul.w	r1, r6, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a52:	f080 811f 	bcs.w	8000c94 <__udivmoddi4+0x298>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 811c 	bls.w	8000c94 <__udivmoddi4+0x298>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3310 	mls	r3, r8, r0, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb00 f707 	mul.w	r7, r0, r7
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x92>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a80:	f080 810a 	bcs.w	8000c98 <__udivmoddi4+0x29c>
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	f240 8107 	bls.w	8000c98 <__udivmoddi4+0x29c>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a92:	1be4      	subs	r4, r4, r7
 8000a94:	2600      	movs	r6, #0
 8000a96:	b11d      	cbz	r5, 8000aa0 <__udivmoddi4+0xa4>
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d909      	bls.n	8000abe <__udivmoddi4+0xc2>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	f000 80ef 	beq.w	8000c8e <__udivmoddi4+0x292>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	fab3 f683 	clz	r6, r3
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d14a      	bne.n	8000b5c <__udivmoddi4+0x160>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xd4>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 80f9 	bhi.w	8000cc2 <__udivmoddi4+0x2c6>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	469e      	mov	lr, r3
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d0e0      	beq.n	8000aa0 <__udivmoddi4+0xa4>
 8000ade:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ae2:	e7dd      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000ae4:	b902      	cbnz	r2, 8000ae8 <__udivmoddi4+0xec>
 8000ae6:	deff      	udf	#255	; 0xff
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	f040 8092 	bne.w	8000c16 <__udivmoddi4+0x21a>
 8000af2:	eba1 010c 	sub.w	r1, r1, ip
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f fe8c 	uxth.w	lr, ip
 8000afe:	2601      	movs	r6, #1
 8000b00:	0c20      	lsrs	r0, r4, #16
 8000b02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b06:	fb07 1113 	mls	r1, r7, r3, r1
 8000b0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0e:	fb0e f003 	mul.w	r0, lr, r3
 8000b12:	4288      	cmp	r0, r1
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x12c>
 8000b16:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x12a>
 8000b20:	4288      	cmp	r0, r1
 8000b22:	f200 80cb 	bhi.w	8000cbc <__udivmoddi4+0x2c0>
 8000b26:	4643      	mov	r3, r8
 8000b28:	1a09      	subs	r1, r1, r0
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b30:	fb07 1110 	mls	r1, r7, r0, r1
 8000b34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b38:	fb0e fe00 	mul.w	lr, lr, r0
 8000b3c:	45a6      	cmp	lr, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x156>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x154>
 8000b4a:	45a6      	cmp	lr, r4
 8000b4c:	f200 80bb 	bhi.w	8000cc6 <__udivmoddi4+0x2ca>
 8000b50:	4608      	mov	r0, r1
 8000b52:	eba4 040e 	sub.w	r4, r4, lr
 8000b56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x9a>
 8000b5c:	f1c6 0720 	rsb	r7, r6, #32
 8000b60:	40b3      	lsls	r3, r6
 8000b62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b72:	431c      	orrs	r4, r3
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b82:	0c20      	lsrs	r0, r4, #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fb09 1118 	mls	r1, r9, r8, r1
 8000b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b90:	fb08 f00e 	mul.w	r0, r8, lr
 8000b94:	4288      	cmp	r0, r1
 8000b96:	fa02 f206 	lsl.w	r2, r2, r6
 8000b9a:	d90b      	bls.n	8000bb4 <__udivmoddi4+0x1b8>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba4:	f080 8088 	bcs.w	8000cb8 <__udivmoddi4+0x2bc>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f240 8085 	bls.w	8000cb8 <__udivmoddi4+0x2bc>
 8000bae:	f1a8 0802 	sub.w	r8, r8, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1a09      	subs	r1, r1, r0
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc8:	458e      	cmp	lr, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x1e2>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd4:	d26c      	bcs.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bd6:	458e      	cmp	lr, r1
 8000bd8:	d96a      	bls.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be2:	fba0 9402 	umull	r9, r4, r0, r2
 8000be6:	eba1 010e 	sub.w	r1, r1, lr
 8000bea:	42a1      	cmp	r1, r4
 8000bec:	46c8      	mov	r8, r9
 8000bee:	46a6      	mov	lr, r4
 8000bf0:	d356      	bcc.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bf2:	d053      	beq.n	8000c9c <__udivmoddi4+0x2a0>
 8000bf4:	b15d      	cbz	r5, 8000c0e <__udivmoddi4+0x212>
 8000bf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000bfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000c02:	fa22 f306 	lsr.w	r3, r2, r6
 8000c06:	40f1      	lsrs	r1, r6
 8000c08:	431f      	orrs	r7, r3
 8000c0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c0e:	2600      	movs	r6, #0
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	40d8      	lsrs	r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa21 f303 	lsr.w	r3, r1, r3
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4301      	orrs	r1, r0
 8000c28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2c:	fa1f fe8c 	uxth.w	lr, ip
 8000c30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c34:	fb07 3610 	mls	r6, r7, r0, r3
 8000c38:	0c0b      	lsrs	r3, r1, #16
 8000c3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c42:	429e      	cmp	r6, r3
 8000c44:	fa04 f402 	lsl.w	r4, r4, r2
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x260>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c52:	d22f      	bcs.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c54:	429e      	cmp	r6, r3
 8000c56:	d92d      	bls.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	b289      	uxth	r1, r1
 8000c60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c64:	fb07 3316 	mls	r3, r7, r6, r3
 8000c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x28a>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c7c:	d216      	bcs.n	8000cac <__udivmoddi4+0x2b0>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d914      	bls.n	8000cac <__udivmoddi4+0x2b0>
 8000c82:	3e02      	subs	r6, #2
 8000c84:	4461      	add	r1, ip
 8000c86:	1ac9      	subs	r1, r1, r3
 8000c88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c8c:	e738      	b.n	8000b00 <__udivmoddi4+0x104>
 8000c8e:	462e      	mov	r6, r5
 8000c90:	4628      	mov	r0, r5
 8000c92:	e705      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000c94:	4606      	mov	r6, r0
 8000c96:	e6e3      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c98:	4618      	mov	r0, r3
 8000c9a:	e6f8      	b.n	8000a8e <__udivmoddi4+0x92>
 8000c9c:	454b      	cmp	r3, r9
 8000c9e:	d2a9      	bcs.n	8000bf4 <__udivmoddi4+0x1f8>
 8000ca0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e7a3      	b.n	8000bf4 <__udivmoddi4+0x1f8>
 8000cac:	4646      	mov	r6, r8
 8000cae:	e7ea      	b.n	8000c86 <__udivmoddi4+0x28a>
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	e794      	b.n	8000bde <__udivmoddi4+0x1e2>
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	e7d1      	b.n	8000c5c <__udivmoddi4+0x260>
 8000cb8:	46d0      	mov	r8, sl
 8000cba:	e77b      	b.n	8000bb4 <__udivmoddi4+0x1b8>
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	e732      	b.n	8000b28 <__udivmoddi4+0x12c>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e709      	b.n	8000ada <__udivmoddi4+0xde>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e742      	b.n	8000b52 <__udivmoddi4+0x156>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <APPD_EnableCPU2+0x34>)
 8000cd8:	1d3c      	adds	r4, r7, #4
 8000cda:	461d      	mov	r5, r3
 8000cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce4:	c403      	stmia	r4!, {r0, r1}
 8000ce6:	8022      	strh	r2, [r4, #0]
 8000ce8:	3402      	adds	r4, #2
 8000cea:	0c13      	lsrs	r3, r2, #16
 8000cec:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000cee:	f009 fbf3 	bl	800a4d8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f008 fe8e 	bl	8009a16 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000cfa:	bf00      	nop
}
 8000cfc:	3720      	adds	r7, #32
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bdb0      	pop	{r4, r5, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	0800dec0 	.word	0x0800dec0

08000d08 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d16:	f023 0207 	bic.w	r2, r3, #7
 8000d1a:	4905      	ldr	r1, [pc, #20]	; (8000d30 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	58000400 	.word	0x58000400

08000d34 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d3e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d42:	4905      	ldr	r1, [pc, #20]	; (8000d58 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	58000800 	.word	0x58000800

08000d5c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000d6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d76:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d82:	4313      	orrs	r3, r2
 8000d84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	cafecafe 	.word	0xcafecafe

08000d98 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	608b      	str	r3, [r1, #8]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e18:	d101      	bne.n	8000e1e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e3e:	d101      	bne.n	8000e44 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e74:	68fb      	ldr	r3, [r7, #12]
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <LL_DBGMCU_GetDeviceID+0x18>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e0042000 	.word	0xe0042000

08000ea0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <LL_DBGMCU_GetRevisionID+0x18>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	0c1b      	lsrs	r3, r3, #16
 8000eaa:	b29b      	uxth	r3, r3
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e0042000 	.word	0xe0042000

08000ebc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	605a      	str	r2, [r3, #4]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	605a      	str	r2, [r3, #4]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	615a      	str	r2, [r3, #20]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	615a      	str	r2, [r3, #20]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	609a      	str	r2, [r3, #8]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	619a      	str	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <LL_LPM_EnableSleep+0x1c>)
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <LL_LPM_EnableSleep+0x1c>)
 8000f8a:	f023 0304 	bic.w	r3, r3, #4
 8000f8e:	6113      	str	r3, [r2, #16]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	22ca      	movs	r2, #202	; 0xca
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2253      	movs	r2, #83	; 0x53
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f023 0207 	bic.w	r2, r3, #7
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <MX_APPE_Config+0x18>)
 8001006:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800100a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800100c:	f000 f824 	bl	8001058 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001010:	f000 f864 	bl	80010dc <Config_HSE>

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}
 8001018:	58004000 	.word	0x58004000

0800101c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001020:	f000 f870 	bl	8001104 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001024:	f000 f888 	bl	8001138 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001028:	4903      	ldr	r1, [pc, #12]	; (8001038 <MX_APPE_Init+0x1c>)
 800102a:	2000      	movs	r0, #0
 800102c:	f000 fff4 	bl	8002018 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001030:	f000 f890 	bl	8001154 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001034:	bf00      	nop
}
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000a68 	.word	0x20000a68

0800103c <Init_Smps>:

void Init_Smps(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001040:	bf00      	nop
}
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <Init_Exti>:

void Init_Exti(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800104e:	2050      	movs	r0, #80	; 0x50
 8001050:	f7ff fe70 	bl	8000d34 <LL_EXTI_EnableIT_32_63>

  return;
 8001054:	bf00      	nop
}
 8001056:	bd80      	pop	{r7, pc}

08001058 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 800105c:	f000 f804 	bl	8001068 <Reset_BackupDomain>

  Reset_IPCC();
 8001060:	f000 f81a 	bl	8001098 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001064:	bf00      	nop
}
 8001066:	bd80      	pop	{r7, pc}

08001068 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800106c:	f7ff feca 	bl	8000e04 <LL_RCC_IsActiveFlag_PINRST>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00d      	beq.n	8001092 <Reset_BackupDomain+0x2a>
 8001076:	f7ff fed8 	bl	8000e2a <LL_RCC_IsActiveFlag_SFTRST>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d108      	bne.n	8001092 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001080:	f003 f95a 	bl	8004338 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001084:	f003 f958 	bl	8004338 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001088:	f7ff fe9a 	bl	8000dc0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800108c:	f7ff fea9 	bl	8000de2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001090:	bf00      	nop
 8001092:	bf00      	nop
}
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800109c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010a0:	f7ff fed6 	bl	8000e50 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80010a4:	213f      	movs	r1, #63	; 0x3f
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <Reset_IPCC+0x40>)
 80010a8:	f7ff ff4e 	bl	8000f48 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80010ac:	213f      	movs	r1, #63	; 0x3f
 80010ae:	480a      	ldr	r0, [pc, #40]	; (80010d8 <Reset_IPCC+0x40>)
 80010b0:	f7ff ff58 	bl	8000f64 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80010b4:	213f      	movs	r1, #63	; 0x3f
 80010b6:	4808      	ldr	r0, [pc, #32]	; (80010d8 <Reset_IPCC+0x40>)
 80010b8:	f7ff ff00 	bl	8000ebc <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80010bc:	213f      	movs	r1, #63	; 0x3f
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <Reset_IPCC+0x40>)
 80010c0:	f7ff ff1f 	bl	8000f02 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80010c4:	213f      	movs	r1, #63	; 0x3f
 80010c6:	4804      	ldr	r0, [pc, #16]	; (80010d8 <Reset_IPCC+0x40>)
 80010c8:	f7ff ff0a 	bl	8000ee0 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80010cc:	213f      	movs	r1, #63	; 0x3f
 80010ce:	4802      	ldr	r0, [pc, #8]	; (80010d8 <Reset_IPCC+0x40>)
 80010d0:	f7ff ff29 	bl	8000f26 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80010d4:	bf00      	nop
}
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	58000c00 	.word	0x58000c00

080010dc <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f009 faac 	bl	800a640 <OTP_Read>
 80010e8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	799b      	ldrb	r3, [r3, #6]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fe31 	bl	8000d5c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
}
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <System_Init>:

static void System_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  Init_Smps();
 8001108:	f7ff ff98 	bl	800103c <Init_Smps>

  Init_Exti();
 800110c:	f7ff ff9d 	bl	800104a <Init_Exti>

  Init_Rtc();
 8001110:	f000 f802 	bl	8001118 <Init_Rtc>

  return;
 8001114:	bf00      	nop
}
 8001116:	bd80      	pop	{r7, pc}

08001118 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <Init_Rtc+0x1c>)
 800111e:	f7ff ff4c 	bl	8000fba <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001122:	2100      	movs	r1, #0
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <Init_Rtc+0x1c>)
 8001126:	f7ff ff58 	bl	8000fda <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800112a:	4802      	ldr	r0, [pc, #8]	; (8001134 <Init_Rtc+0x1c>)
 800112c:	f7ff ff38 	bl	8000fa0 <LL_RTC_EnableWriteProtection>

  return;
 8001130:	bf00      	nop
}
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40002800 	.word	0x40002800

08001138 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800113c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001140:	f7ff fe2a 	bl	8000d98 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001144:	f00b f962 	bl	800c40c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001148:	2004      	movs	r0, #4
 800114a:	f7ff fddd 	bl	8000d08 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800114e:	bf00      	nop
}
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800115a:	f009 f807 	bl	800a16c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800115e:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <appe_Tl_Init+0x50>)
 8001160:	2100      	movs	r1, #0
 8001162:	2008      	movs	r0, #8
 8001164:	f00b fa90 	bl	800c688 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <appe_Tl_Init+0x54>)
 800116a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <appe_Tl_Init+0x58>)
 800116e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	480e      	ldr	r0, [pc, #56]	; (80011b0 <appe_Tl_Init+0x5c>)
 8001176:	f008 febf 	bl	8009ef8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <appe_Tl_Init+0x60>)
 800117c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <appe_Tl_Init+0x64>)
 8001180:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <appe_Tl_Init+0x68>)
 8001184:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001186:	f240 533c 	movw	r3, #1340	; 0x53c
 800118a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4618      	mov	r0, r3
 8001192:	f009 f92d 	bl	800a3f0 <TL_MM_Init>

  TL_Enable();
 8001196:	f008 ffe3 	bl	800a160 <TL_Enable>

  return;
 800119a:	bf00      	nop
}
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	08009f31 	.word	0x08009f31
 80011a8:	200005e8 	.word	0x200005e8
 80011ac:	080011c1 	.word	0x080011c1
 80011b0:	080011d9 	.word	0x080011d9
 80011b4:	20000800 	.word	0x20000800
 80011b8:	200006f4 	.word	0x200006f4
 80011bc:	200000ac 	.word	0x200000ac

080011c0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80011ca:	bf00      	nop
}
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	330b      	adds	r3, #11
 80011e6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	f200 80d0 	bhi.w	8001398 <APPE_SysUserEvtRx+0x1c0>
 80011f8:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <APPE_SysUserEvtRx+0x28>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001221 	.word	0x08001221
 8001204:	080012b3 	.word	0x080012b3
 8001208:	080012d5 	.word	0x080012d5
 800120c:	08001399 	.word	0x08001399
 8001210:	08001319 	.word	0x08001319
 8001214:	0800133d 	.word	0x0800133d
 8001218:	08001359 	.word	0x08001359
 800121c:	0800137d 	.word	0x0800137d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4618      	mov	r0, r3
 8001226:	f008 fc23 	bl	8009a70 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800122a:	485e      	ldr	r0, [pc, #376]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800122c:	f009 f9e0 	bl	800a5f0 <DbgTraceGetFileName>
 8001230:	4601      	mov	r1, r0
 8001232:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001236:	4a5c      	ldr	r2, [pc, #368]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 8001238:	485c      	ldr	r0, [pc, #368]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 800123a:	f00b fc8f 	bl	800cb5c <iprintf>
 800123e:	7b3b      	ldrb	r3, [r7, #12]
 8001240:	4619      	mov	r1, r3
 8001242:	7b7b      	ldrb	r3, [r7, #13]
 8001244:	461a      	mov	r2, r3
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	4859      	ldr	r0, [pc, #356]	; (80013b0 <APPE_SysUserEvtRx+0x1d8>)
 800124a:	f00b fc87 	bl	800cb5c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800124e:	4855      	ldr	r0, [pc, #340]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 8001250:	f009 f9ce 	bl	800a5f0 <DbgTraceGetFileName>
 8001254:	4601      	mov	r1, r0
 8001256:	f240 1369 	movw	r3, #361	; 0x169
 800125a:	4a53      	ldr	r2, [pc, #332]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 800125c:	4853      	ldr	r0, [pc, #332]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 800125e:	f00b fc7d 	bl	800cb5c <iprintf>
 8001262:	7c3b      	ldrb	r3, [r7, #16]
 8001264:	4619      	mov	r1, r3
 8001266:	4853      	ldr	r0, [pc, #332]	; (80013b4 <APPE_SysUserEvtRx+0x1dc>)
 8001268:	f00b fc78 	bl	800cb5c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800126c:	484d      	ldr	r0, [pc, #308]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800126e:	f009 f9bf 	bl	800a5f0 <DbgTraceGetFileName>
 8001272:	4601      	mov	r1, r0
 8001274:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 8001278:	4a4b      	ldr	r2, [pc, #300]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 800127a:	484c      	ldr	r0, [pc, #304]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 800127c:	f00b fc6e 	bl	800cb5c <iprintf>
 8001280:	7dbb      	ldrb	r3, [r7, #22]
 8001282:	4619      	mov	r1, r3
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	461a      	mov	r2, r3
 8001288:	7e3b      	ldrb	r3, [r7, #24]
 800128a:	484b      	ldr	r0, [pc, #300]	; (80013b8 <APPE_SysUserEvtRx+0x1e0>)
 800128c:	f00b fc66 	bl	800cb5c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001290:	4844      	ldr	r0, [pc, #272]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 8001292:	f009 f9ad 	bl	800a5f0 <DbgTraceGetFileName>
 8001296:	4601      	mov	r1, r0
 8001298:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800129c:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 800129e:	4843      	ldr	r0, [pc, #268]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 80012a0:	f00b fc5c 	bl	800cb5c <iprintf>
 80012a4:	4845      	ldr	r0, [pc, #276]	; (80013bc <APPE_SysUserEvtRx+0x1e4>)
 80012a6:	f00b fc59 	bl	800cb5c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f8e0 	bl	8001470 <APPE_SysEvtReadyProcessing>
    break;
 80012b0:	e073      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012b2:	483c      	ldr	r0, [pc, #240]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 80012b4:	f009 f99c 	bl	800a5f0 <DbgTraceGetFileName>
 80012b8:	4601      	mov	r1, r0
 80012ba:	f240 1371 	movw	r3, #369	; 0x171
 80012be:	4a3a      	ldr	r2, [pc, #232]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 80012c0:	483a      	ldr	r0, [pc, #232]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 80012c2:	f00b fc4b 	bl	800cb5c <iprintf>
 80012c6:	483e      	ldr	r0, [pc, #248]	; (80013c0 <APPE_SysUserEvtRx+0x1e8>)
 80012c8:	f00b fc48 	bl	800cb5c <iprintf>
    APPE_SysEvtError(pPayload);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f885 	bl	80013dc <APPE_SysEvtError>
    break;
 80012d2:	e062      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80012d4:	4833      	ldr	r0, [pc, #204]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 80012d6:	f009 f98b 	bl	800a5f0 <DbgTraceGetFileName>
 80012da:	4601      	mov	r1, r0
 80012dc:	f44f 73bb 	mov.w	r3, #374	; 0x176
 80012e0:	4a31      	ldr	r2, [pc, #196]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 80012e2:	4832      	ldr	r0, [pc, #200]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 80012e4:	f00b fc3a 	bl	800cb5c <iprintf>
 80012e8:	4836      	ldr	r0, [pc, #216]	; (80013c4 <APPE_SysUserEvtRx+0x1ec>)
 80012ea:	f00b fcd3 	bl	800cc94 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80012ee:	482d      	ldr	r0, [pc, #180]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 80012f0:	f009 f97e 	bl	800a5f0 <DbgTraceGetFileName>
 80012f4:	4601      	mov	r1, r0
 80012f6:	f240 1377 	movw	r3, #375	; 0x177
 80012fa:	4a2b      	ldr	r2, [pc, #172]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 80012fc:	482b      	ldr	r0, [pc, #172]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 80012fe:	f00b fc2d 	bl	800cb5c <iprintf>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3302      	adds	r3, #2
 8001306:	6819      	ldr	r1, [r3, #0]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	3302      	adds	r3, #2
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	461a      	mov	r2, r3
 8001310:	482d      	ldr	r0, [pc, #180]	; (80013c8 <APPE_SysUserEvtRx+0x1f0>)
 8001312:	f00b fc23 	bl	800cb5c <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001316:	e040      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001318:	4822      	ldr	r0, [pc, #136]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800131a:	f009 f969 	bl	800a5f0 <DbgTraceGetFileName>
 800131e:	4601      	mov	r1, r0
 8001320:	f240 137d 	movw	r3, #381	; 0x17d
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 8001326:	4821      	ldr	r0, [pc, #132]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 8001328:	f00b fc18 	bl	800cb5c <iprintf>
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	3302      	adds	r3, #2
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4619      	mov	r1, r3
 8001334:	4825      	ldr	r0, [pc, #148]	; (80013cc <APPE_SysUserEvtRx+0x1f4>)
 8001336:	f00b fc11 	bl	800cb5c <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800133a:	e02e      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800133c:	4819      	ldr	r0, [pc, #100]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800133e:	f009 f957 	bl	800a5f0 <DbgTraceGetFileName>
 8001342:	4601      	mov	r1, r0
 8001344:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8001348:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 800134a:	4818      	ldr	r0, [pc, #96]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 800134c:	f00b fc06 	bl	800cb5c <iprintf>
 8001350:	481f      	ldr	r0, [pc, #124]	; (80013d0 <APPE_SysUserEvtRx+0x1f8>)
 8001352:	f00b fc03 	bl	800cb5c <iprintf>
    break;
 8001356:	e020      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800135a:	f009 f949 	bl	800a5f0 <DbgTraceGetFileName>
 800135e:	4601      	mov	r1, r0
 8001360:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8001364:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 8001366:	4811      	ldr	r0, [pc, #68]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 8001368:	f00b fbf8 	bl	800cb5c <iprintf>
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	3302      	adds	r3, #2
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	4817      	ldr	r0, [pc, #92]	; (80013d4 <APPE_SysUserEvtRx+0x1fc>)
 8001376:	f00b fbf1 	bl	800cb5c <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 800137a:	e00e      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800137e:	f009 f937 	bl	800a5f0 <DbgTraceGetFileName>
 8001382:	4601      	mov	r1, r0
 8001384:	f240 138b 	movw	r3, #395	; 0x18b
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 800138c:	f00b fbe6 	bl	800cb5c <iprintf>
 8001390:	4811      	ldr	r0, [pc, #68]	; (80013d8 <APPE_SysUserEvtRx+0x200>)
 8001392:	f00b fbe3 	bl	800cb5c <iprintf>
    break;
 8001396:	e000      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001398:	bf00      	nop
  }

  return;
 800139a:	bf00      	nop
}
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	0800dedc 	.word	0x0800dedc
 80013a8:	0800fb0c 	.word	0x0800fb0c
 80013ac:	0800def4 	.word	0x0800def4
 80013b0:	0800df08 	.word	0x0800df08
 80013b4:	0800df2c 	.word	0x0800df2c
 80013b8:	0800df48 	.word	0x0800df48
 80013bc:	0800df60 	.word	0x0800df60
 80013c0:	0800df80 	.word	0x0800df80
 80013c4:	0800dfa4 	.word	0x0800dfa4
 80013c8:	0800dff4 	.word	0x0800dff4
 80013cc:	0800e01c 	.word	0x0800e01c
 80013d0:	0800e058 	.word	0x0800e058
 80013d4:	0800e07c 	.word	0x0800e07c
 80013d8:	0800e0b8 	.word	0x0800e0b8

080013dc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	330b      	adds	r3, #11
 80013ea:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3302      	adds	r3, #2
 80013f0:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80013f2:	4819      	ldr	r0, [pc, #100]	; (8001458 <APPE_SysEvtError+0x7c>)
 80013f4:	f009 f8fc 	bl	800a5f0 <DbgTraceGetFileName>
 80013f8:	4601      	mov	r1, r0
 80013fa:	f240 13a3 	movw	r3, #419	; 0x1a3
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <APPE_SysEvtError+0x80>)
 8001400:	4817      	ldr	r0, [pc, #92]	; (8001460 <APPE_SysEvtError+0x84>)
 8001402:	f00b fbab 	bl	800cb5c <iprintf>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	4815      	ldr	r0, [pc, #84]	; (8001464 <APPE_SysEvtError+0x88>)
 800140e:	f00b fba5 	bl	800cb5c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10d      	bne.n	8001436 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800141a:	480f      	ldr	r0, [pc, #60]	; (8001458 <APPE_SysEvtError+0x7c>)
 800141c:	f009 f8e8 	bl	800a5f0 <DbgTraceGetFileName>
 8001420:	4601      	mov	r1, r0
 8001422:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <APPE_SysEvtError+0x80>)
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <APPE_SysEvtError+0x84>)
 800142a:	f00b fb97 	bl	800cb5c <iprintf>
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <APPE_SysEvtError+0x8c>)
 8001430:	f00b fc30 	bl	800cc94 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001434:	e00d      	b.n	8001452 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <APPE_SysEvtError+0x7c>)
 8001438:	f009 f8da 	bl	800a5f0 <DbgTraceGetFileName>
 800143c:	4601      	mov	r1, r0
 800143e:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 8001442:	4a06      	ldr	r2, [pc, #24]	; (800145c <APPE_SysEvtError+0x80>)
 8001444:	4806      	ldr	r0, [pc, #24]	; (8001460 <APPE_SysEvtError+0x84>)
 8001446:	f00b fb89 	bl	800cb5c <iprintf>
 800144a:	4808      	ldr	r0, [pc, #32]	; (800146c <APPE_SysEvtError+0x90>)
 800144c:	f00b fc22 	bl	800cc94 <puts>
  return;
 8001450:	bf00      	nop
}
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	0800dedc 	.word	0x0800dedc
 800145c:	0800fb20 	.word	0x0800fb20
 8001460:	0800def4 	.word	0x0800def4
 8001464:	0800e0dc 	.word	0x0800e0dc
 8001468:	0800e10c 	.word	0x0800e10c
 800146c:	0800e148 	.word	0x0800e148

08001470 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	330b      	adds	r3, #11
 8001494:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3302      	adds	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d146      	bne.n	8001532 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80014a4:	4836      	ldr	r0, [pc, #216]	; (8001580 <APPE_SysEvtReadyProcessing+0x110>)
 80014a6:	f009 f8a3 	bl	800a5f0 <DbgTraceGetFileName>
 80014aa:	4601      	mov	r1, r0
 80014ac:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80014b0:	4a34      	ldr	r2, [pc, #208]	; (8001584 <APPE_SysEvtReadyProcessing+0x114>)
 80014b2:	4835      	ldr	r0, [pc, #212]	; (8001588 <APPE_SysEvtReadyProcessing+0x118>)
 80014b4:	f00b fb52 	bl	800cb5c <iprintf>
 80014b8:	4834      	ldr	r0, [pc, #208]	; (800158c <APPE_SysEvtReadyProcessing+0x11c>)
 80014ba:	f00b fbeb 	bl	800cc94 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80014be:	f7ff fc07 	bl	8000cd0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80014c2:	230f      	movs	r3, #15
 80014c4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80014c6:	237f      	movs	r3, #127	; 0x7f
 80014c8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80014ca:	f7ff fce9 	bl	8000ea0 <LL_DBGMCU_GetRevisionID>
 80014ce:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80014d0:	482b      	ldr	r0, [pc, #172]	; (8001580 <APPE_SysEvtReadyProcessing+0x110>)
 80014d2:	f009 f88d 	bl	800a5f0 <DbgTraceGetFileName>
 80014d6:	4601      	mov	r1, r0
 80014d8:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 80014dc:	4a29      	ldr	r2, [pc, #164]	; (8001584 <APPE_SysEvtReadyProcessing+0x114>)
 80014de:	482a      	ldr	r0, [pc, #168]	; (8001588 <APPE_SysEvtReadyProcessing+0x118>)
 80014e0:	f00b fb3c 	bl	800cb5c <iprintf>
 80014e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014e6:	482a      	ldr	r0, [pc, #168]	; (8001590 <APPE_SysEvtReadyProcessing+0x120>)
 80014e8:	f00b fb38 	bl	800cb5c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80014f2:	f7ff fcc7 	bl	8000e84 <LL_DBGMCU_GetDeviceID>
 80014f6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80014f8:	4821      	ldr	r0, [pc, #132]	; (8001580 <APPE_SysEvtReadyProcessing+0x110>)
 80014fa:	f009 f879 	bl	800a5f0 <DbgTraceGetFileName>
 80014fe:	4601      	mov	r1, r0
 8001500:	f240 13df 	movw	r3, #479	; 0x1df
 8001504:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <APPE_SysEvtReadyProcessing+0x114>)
 8001506:	4820      	ldr	r0, [pc, #128]	; (8001588 <APPE_SysEvtReadyProcessing+0x118>)
 8001508:	f00b fb28 	bl	800cb5c <iprintf>
 800150c:	6a39      	ldr	r1, [r7, #32]
 800150e:	4821      	ldr	r0, [pc, #132]	; (8001594 <APPE_SysEvtReadyProcessing+0x124>)
 8001510:	f00b fb24 	bl	800cb5c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	b29b      	uxth	r3, r3
 8001518:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4618      	mov	r0, r3
 8001520:	f008 fa90 	bl	8009a44 <SHCI_C2_Config>

    APP_BLE_Init();
 8001524:	f009 f996 	bl	800a854 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001528:	2100      	movs	r1, #0
 800152a:	2001      	movs	r0, #1
 800152c:	f00a ff80 	bl	800c430 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001530:	e022      	b.n	8001578 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d110      	bne.n	800155c <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800153a:	4811      	ldr	r0, [pc, #68]	; (8001580 <APPE_SysEvtReadyProcessing+0x110>)
 800153c:	f009 f858 	bl	800a5f0 <DbgTraceGetFileName>
 8001540:	4601      	mov	r1, r0
 8001542:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <APPE_SysEvtReadyProcessing+0x114>)
 8001548:	480f      	ldr	r0, [pc, #60]	; (8001588 <APPE_SysEvtReadyProcessing+0x118>)
 800154a:	f00b fb07 	bl	800cb5c <iprintf>
 800154e:	4812      	ldr	r0, [pc, #72]	; (8001598 <APPE_SysEvtReadyProcessing+0x128>)
 8001550:	f00b fb04 	bl	800cb5c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
  return;
 800155a:	e00d      	b.n	8001578 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800155c:	4808      	ldr	r0, [pc, #32]	; (8001580 <APPE_SysEvtReadyProcessing+0x110>)
 800155e:	f009 f847 	bl	800a5f0 <DbgTraceGetFileName>
 8001562:	4601      	mov	r1, r0
 8001564:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <APPE_SysEvtReadyProcessing+0x114>)
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <APPE_SysEvtReadyProcessing+0x118>)
 800156c:	f00b faf6 	bl	800cb5c <iprintf>
 8001570:	480a      	ldr	r0, [pc, #40]	; (800159c <APPE_SysEvtReadyProcessing+0x12c>)
 8001572:	f00b faf3 	bl	800cb5c <iprintf>
  return;
 8001576:	bf00      	nop
}
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	0800dedc 	.word	0x0800dedc
 8001584:	0800fb34 	.word	0x0800fb34
 8001588:	0800def4 	.word	0x0800def4
 800158c:	0800e180 	.word	0x0800e180
 8001590:	0800e19c 	.word	0x0800e19c
 8001594:	0800e1c0 	.word	0x0800e1c0
 8001598:	0800e1e0 	.word	0x0800e1e0
 800159c:	0800e214 	.word	0x0800e214

080015a0 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f001 fe62 	bl	8003270 <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d00a      	beq.n	80015d0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80015ba:	f001 fe71 	bl	80032a0 <HAL_GetTickFreq>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c8:	e002      	b.n	80015d0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80015ca:	f7ff fcd9 	bl	8000f80 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80015ce:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80015d0:	f001 fe4e 	bl	8003270 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8f4      	bhi.n	80015ca <HAL_Delay+0x2a>
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015ee:	f04f 30ff 	mov.w	r0, #4294967295
 80015f2:	f00a ff4d 	bl	800c490 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}

080015fa <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80015fe:	bf00      	nop
}
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001612:	f04f 30ff 	mov.w	r0, #4294967295
 8001616:	f00a ff3b 	bl	800c490 <UTIL_SEQ_Run>

  return;
 800161a:	bf00      	nop
}
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800162a:	2100      	movs	r1, #0
 800162c:	2008      	movs	r0, #8
 800162e:	f00b f84d 	bl	800c6cc <UTIL_SEQ_SetTask>
  return;
 8001632:	bf00      	nop
}
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001642:	2002      	movs	r0, #2
 8001644:	f00b f8ae 	bl	800c7a4 <UTIL_SEQ_SetEvt>
  return;
 8001648:	bf00      	nop
}
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001658:	2002      	movs	r0, #2
 800165a:	f00b f8c3 	bl	800c7e4 <UTIL_SEQ_WaitEvt>
  return;
 800165e:	bf00      	nop
}
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <LL_AHB1_GRP1_EnableClock>:
{
 8001666:	b480      	push	{r7}
 8001668:	b085      	sub	sp, #20
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4313      	orrs	r3, r2
 800167c:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800167e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4013      	ands	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800169c:	2004      	movs	r0, #4
 800169e:	f7ff ffe2 	bl	8001666 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff ffdf 	bl	8001666 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a8:	2001      	movs	r0, #1
 80016aa:	f7ff ffdc 	bl	8001666 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200b      	movs	r0, #11
 80016b4:	f001 ff3b 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f001 ff52 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	203a      	movs	r0, #58	; 0x3a
 80016c4:	f001 ff33 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80016c8:	203a      	movs	r0, #58	; 0x3a
 80016ca:	f001 ff4a 	bl	8003562 <HAL_NVIC_EnableIRQ>

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <LL_AHB2_GRP1_EnableClock>:
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4013      	ands	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001718:	2004      	movs	r0, #4
 800171a:	f7ff ffda 	bl	80016d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff ffd7 	bl	80016d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	2002      	movs	r0, #2
 8001726:	f7ff ffd4 	bl	80016d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172a:	2008      	movs	r0, #8
 800172c:	f7ff ffd1 	bl	80016d2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_RST_GPIO_Port, ESP32_RST_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2108      	movs	r1, #8
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f002 fbfa 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	2123      	movs	r1, #35	; 0x23
 8001740:	4828      	ldr	r0, [pc, #160]	; (80017e4 <MX_GPIO_Init+0xe0>)
 8001742:	f002 fbf5 	bl	8003f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_RST_Pin;
 8001746:	2308      	movs	r3, #8
 8001748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ESP32_RST_GPIO_Port, &GPIO_InitStruct);
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175e:	f002 fa77 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001762:	2310      	movs	r3, #16
 8001764:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001766:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800176a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176c:	2301      	movs	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	4619      	mov	r1, r3
 8001774:	481c      	ldr	r0, [pc, #112]	; (80017e8 <MX_GPIO_Init+0xe4>)
 8001776:	f002 fa6b 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800177a:	2323      	movs	r3, #35	; 0x23
 800177c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4815      	ldr	r0, [pc, #84]	; (80017e4 <MX_GPIO_Init+0xe0>)
 8001790:	f002 fa5e 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001794:	2303      	movs	r3, #3
 8001796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001798:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800179c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179e:	2301      	movs	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4811      	ldr	r0, [pc, #68]	; (80017ec <MX_GPIO_Init+0xe8>)
 80017a8:	f002 fa52 	bl	8003c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2006      	movs	r0, #6
 80017b2:	f001 febc 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017b6:	2006      	movs	r0, #6
 80017b8:	f001 fed3 	bl	8003562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	2007      	movs	r0, #7
 80017c2:	f001 feb4 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017c6:	2007      	movs	r0, #7
 80017c8:	f001 fecb 	bl	8003562 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	200a      	movs	r0, #10
 80017d2:	f001 feac 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017d6:	200a      	movs	r0, #10
 80017d8:	f001 fec3 	bl	8003562 <HAL_NVIC_EnableIRQ>

}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	48000400 	.word	0x48000400
 80017e8:	48000800 	.word	0x48000800
 80017ec:	48000c00 	.word	0x48000c00

080017f0 <LL_EXTI_EnableIT_0_31>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <LL_EXTI_EnableIT_0_31+0x24>)
 80017fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017fe:	4905      	ldr	r1, [pc, #20]	; (8001814 <LL_EXTI_EnableIT_0_31+0x24>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4313      	orrs	r3, r2
 8001804:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	58000800 	.word	0x58000800

08001818 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4904      	ldr	r1, [pc, #16]	; (8001838 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]

}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	58000800 	.word	0x58000800

0800183c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <ReadRtcSsrValue+0x3c>)
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	b29b      	uxth	r3, r3
 8001848:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <ReadRtcSsrValue+0x3c>)
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	b29b      	uxth	r3, r3
 8001850:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001852:	e005      	b.n	8001860 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <ReadRtcSsrValue+0x3c>)
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	b29b      	uxth	r3, r3
 800185e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d1f5      	bne.n	8001854 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001868:	683b      	ldr	r3, [r7, #0]
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40002800 	.word	0x40002800

0800187c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800188c:	79ba      	ldrb	r2, [r7, #6]
 800188e:	491d      	ldr	r1, [pc, #116]	; (8001904 <LinkTimerAfter+0x88>)
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	3315      	adds	r3, #21
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d009      	beq.n	80018ba <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	4916      	ldr	r1, [pc, #88]	; (8001904 <LinkTimerAfter+0x88>)
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	3314      	adds	r3, #20
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80018ba:	79fa      	ldrb	r2, [r7, #7]
 80018bc:	4911      	ldr	r1, [pc, #68]	; (8001904 <LinkTimerAfter+0x88>)
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	440b      	add	r3, r1
 80018c8:	3315      	adds	r3, #21
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80018ce:	79fa      	ldrb	r2, [r7, #7]
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <LinkTimerAfter+0x88>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	3314      	adds	r3, #20
 80018de:	79ba      	ldrb	r2, [r7, #6]
 80018e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80018e2:	79ba      	ldrb	r2, [r7, #6]
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <LinkTimerAfter+0x88>)
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	3315      	adds	r3, #21
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	701a      	strb	r2, [r3, #0]

  return;
 80018f6:	bf00      	nop
}
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000984 	.word	0x20000984

08001908 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	460a      	mov	r2, r1
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	4613      	mov	r3, r2
 8001916:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001918:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <LinkTimerBefore+0xb8>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	79ba      	ldrb	r2, [r7, #6]
 8001920:	429a      	cmp	r2, r3
 8001922:	d032      	beq.n	800198a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001924:	79ba      	ldrb	r2, [r7, #6]
 8001926:	4927      	ldr	r1, [pc, #156]	; (80019c4 <LinkTimerBefore+0xbc>)
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	3314      	adds	r3, #20
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	4922      	ldr	r1, [pc, #136]	; (80019c4 <LinkTimerBefore+0xbc>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3315      	adds	r3, #21
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800194c:	79fa      	ldrb	r2, [r7, #7]
 800194e:	491d      	ldr	r1, [pc, #116]	; (80019c4 <LinkTimerBefore+0xbc>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3315      	adds	r3, #21
 800195c:	79ba      	ldrb	r2, [r7, #6]
 800195e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001960:	79fa      	ldrb	r2, [r7, #7]
 8001962:	4918      	ldr	r1, [pc, #96]	; (80019c4 <LinkTimerBefore+0xbc>)
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	3314      	adds	r3, #20
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001974:	79ba      	ldrb	r2, [r7, #6]
 8001976:	4913      	ldr	r1, [pc, #76]	; (80019c4 <LinkTimerBefore+0xbc>)
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	3314      	adds	r3, #20
 8001984:	79fa      	ldrb	r2, [r7, #7]
 8001986:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001988:	e014      	b.n	80019b4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800198a:	79fa      	ldrb	r2, [r7, #7]
 800198c:	490d      	ldr	r1, [pc, #52]	; (80019c4 <LinkTimerBefore+0xbc>)
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	3315      	adds	r3, #21
 800199a:	79ba      	ldrb	r2, [r7, #6]
 800199c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800199e:	79ba      	ldrb	r2, [r7, #6]
 80019a0:	4908      	ldr	r1, [pc, #32]	; (80019c4 <LinkTimerBefore+0xbc>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	3314      	adds	r3, #20
 80019ae:	79fa      	ldrb	r2, [r7, #7]
 80019b0:	701a      	strb	r2, [r3, #0]
  return;
 80019b2:	bf00      	nop
}
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000a14 	.word	0x20000a14
 80019c4:	20000984 	.word	0x20000984

080019c8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019d2:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <linkTimer+0x144>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b06      	cmp	r3, #6
 80019da:	d118      	bne.n	8001a0e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80019dc:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <linkTimer+0x144>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b4b      	ldr	r3, [pc, #300]	; (8001b10 <linkTimer+0x148>)
 80019e4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80019e6:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <linkTimer+0x144>)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80019ec:	79fa      	ldrb	r2, [r7, #7]
 80019ee:	4949      	ldr	r1, [pc, #292]	; (8001b14 <linkTimer+0x14c>)
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	3315      	adds	r3, #21
 80019fc:	2206      	movs	r2, #6
 80019fe:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a00:	4b45      	ldr	r3, [pc, #276]	; (8001b18 <linkTimer+0x150>)
 8001a02:	f04f 32ff 	mov.w	r2, #4294967295
 8001a06:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	81fb      	strh	r3, [r7, #14]
 8001a0c:	e078      	b.n	8001b00 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001a0e:	f000 f909 	bl	8001c24 <ReturnTimeElapsed>
 8001a12:	4603      	mov	r3, r0
 8001a14:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001a16:	79fa      	ldrb	r2, [r7, #7]
 8001a18:	493e      	ldr	r1, [pc, #248]	; (8001b14 <linkTimer+0x14c>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	3308      	adds	r3, #8
 8001a26:	6819      	ldr	r1, [r3, #0]
 8001a28:	89fb      	ldrh	r3, [r7, #14]
 8001a2a:	79fa      	ldrb	r2, [r7, #7]
 8001a2c:	4419      	add	r1, r3
 8001a2e:	4839      	ldr	r0, [pc, #228]	; (8001b14 <linkTimer+0x14c>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4403      	add	r3, r0
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001a3e:	79fa      	ldrb	r2, [r7, #7]
 8001a40:	4934      	ldr	r1, [pc, #208]	; (8001b14 <linkTimer+0x14c>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <linkTimer+0x144>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4a2e      	ldr	r2, [pc, #184]	; (8001b14 <linkTimer+0x14c>)
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	440b      	add	r3, r1
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	3308      	adds	r3, #8
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d337      	bcc.n	8001ae0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <linkTimer+0x144>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001a76:	7b7a      	ldrb	r2, [r7, #13]
 8001a78:	4926      	ldr	r1, [pc, #152]	; (8001b14 <linkTimer+0x14c>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	3315      	adds	r3, #21
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a8a:	e013      	b.n	8001ab4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001a8c:	7b7a      	ldrb	r2, [r7, #13]
 8001a8e:	4921      	ldr	r1, [pc, #132]	; (8001b14 <linkTimer+0x14c>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	3315      	adds	r3, #21
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001aa0:	7b7a      	ldrb	r2, [r7, #13]
 8001aa2:	491c      	ldr	r1, [pc, #112]	; (8001b14 <linkTimer+0x14c>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	3315      	adds	r3, #21
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ab4:	7b3b      	ldrb	r3, [r7, #12]
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d00b      	beq.n	8001ad2 <linkTimer+0x10a>
 8001aba:	7b3a      	ldrb	r2, [r7, #12]
 8001abc:	4915      	ldr	r1, [pc, #84]	; (8001b14 <linkTimer+0x14c>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3308      	adds	r3, #8
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d2dc      	bcs.n	8001a8c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001ad2:	7b7a      	ldrb	r2, [r7, #13]
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fecf 	bl	800187c <LinkTimerAfter>
 8001ade:	e00f      	b.n	8001b00 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <linkTimer+0x144>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff0c 	bl	8001908 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <linkTimer+0x144>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <linkTimer+0x148>)
 8001af8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <linkTimer+0x144>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001b00:	89fb      	ldrh	r3, [r7, #14]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000a14 	.word	0x20000a14
 8001b10:	20000a15 	.word	0x20000a15
 8001b14:	20000984 	.word	0x20000984
 8001b18:	20000a18 	.word	0x20000a18

08001b1c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	460a      	mov	r2, r1
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001b2c:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <UnlinkTimer+0xf8>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d111      	bne.n	8001b5c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <UnlinkTimer+0xf8>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <UnlinkTimer+0xfc>)
 8001b40:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001b42:	79fa      	ldrb	r2, [r7, #7]
 8001b44:	4935      	ldr	r1, [pc, #212]	; (8001c1c <UnlinkTimer+0x100>)
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	440b      	add	r3, r1
 8001b50:	3315      	adds	r3, #21
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <UnlinkTimer+0xf8>)
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	e03e      	b.n	8001bda <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001b5c:	79fa      	ldrb	r2, [r7, #7]
 8001b5e:	492f      	ldr	r1, [pc, #188]	; (8001c1c <UnlinkTimer+0x100>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	3314      	adds	r3, #20
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001b70:	79fa      	ldrb	r2, [r7, #7]
 8001b72:	492a      	ldr	r1, [pc, #168]	; (8001c1c <UnlinkTimer+0x100>)
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3315      	adds	r3, #21
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001b84:	79f9      	ldrb	r1, [r7, #7]
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	4824      	ldr	r0, [pc, #144]	; (8001c1c <UnlinkTimer+0x100>)
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	440b      	add	r3, r1
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4403      	add	r3, r0
 8001b94:	3315      	adds	r3, #21
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2d8      	uxtb	r0, r3
 8001b9a:	4920      	ldr	r1, [pc, #128]	; (8001c1c <UnlinkTimer+0x100>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3315      	adds	r3, #21
 8001ba8:	4602      	mov	r2, r0
 8001baa:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d013      	beq.n	8001bda <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001bb2:	79f9      	ldrb	r1, [r7, #7]
 8001bb4:	7bba      	ldrb	r2, [r7, #14]
 8001bb6:	4819      	ldr	r0, [pc, #100]	; (8001c1c <UnlinkTimer+0x100>)
 8001bb8:	460b      	mov	r3, r1
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	440b      	add	r3, r1
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4403      	add	r3, r0
 8001bc2:	3314      	adds	r3, #20
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b2d8      	uxtb	r0, r3
 8001bc8:	4914      	ldr	r1, [pc, #80]	; (8001c1c <UnlinkTimer+0x100>)
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3314      	adds	r3, #20
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	490f      	ldr	r1, [pc, #60]	; (8001c1c <UnlinkTimer+0x100>)
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	330c      	adds	r3, #12
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <UnlinkTimer+0xf8>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b06      	cmp	r3, #6
 8001bf6:	d107      	bne.n	8001c08 <UnlinkTimer+0xec>
 8001bf8:	79bb      	ldrb	r3, [r7, #6]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d104      	bne.n	8001c08 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <UnlinkTimer+0x104>)
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	601a      	str	r2, [r3, #0]
  }

  return;
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
}
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	20000a14 	.word	0x20000a14
 8001c18:	20000a15 	.word	0x20000a15
 8001c1c:	20000984 	.word	0x20000984
 8001c20:	20000a18 	.word	0x20000a18

08001c24 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <ReturnTimeElapsed+0x70>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c32:	d026      	beq.n	8001c82 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001c34:	f7ff fe02 	bl	800183c <ReadRtcSsrValue>
 8001c38:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <ReturnTimeElapsed+0x70>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d805      	bhi.n	8001c50 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <ReturnTimeElapsed+0x70>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	e00a      	b.n	8001c66 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <ReturnTimeElapsed+0x74>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <ReturnTimeElapsed+0x70>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <ReturnTimeElapsed+0x78>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <ReturnTimeElapsed+0x7c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	40d3      	lsrs	r3, r2
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	e001      	b.n	8001c86 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	b29b      	uxth	r3, r3
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000a18 	.word	0x20000a18
 8001c98:	20000a20 	.word	0x20000a20
 8001c9c:	20000a1e 	.word	0x20000a1e
 8001ca0:	20000a1d 	.word	0x20000a1d

08001ca4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d108      	bne.n	8001cc6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001cb4:	f7ff fdc2 	bl	800183c <ReadRtcSsrValue>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <RestartWakeupCounter+0x9c>)
 8001cbc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f001 fc77 	bl	80035b2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001cc4:	e039      	b.n	8001d3a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d803      	bhi.n	8001cd4 <RestartWakeupCounter+0x30>
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <RestartWakeupCounter+0xa0>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d002      	beq.n	8001cda <RestartWakeupCounter+0x36>
      Value -= 1;
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001cda:	bf00      	nop
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <RestartWakeupCounter+0xa4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f8      	beq.n	8001cdc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <RestartWakeupCounter+0xa4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <RestartWakeupCounter+0xa4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001cfa:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <RestartWakeupCounter+0xa8>)
 8001cfe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d02:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d04:	2003      	movs	r0, #3
 8001d06:	f001 fc62 	bl	80035ce <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <RestartWakeupCounter+0xac>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	041b      	lsls	r3, r3, #16
 8001d12:	88fa      	ldrh	r2, [r7, #6]
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <RestartWakeupCounter+0xac>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d1a:	f7ff fd8f 	bl	800183c <ReadRtcSsrValue>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <RestartWakeupCounter+0x9c>)
 8001d22:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <RestartWakeupCounter+0xa4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <RestartWakeupCounter+0xa4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d32:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001d34:	f3af 8000 	nop.w
  return ;
 8001d38:	bf00      	nop
}
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000a18 	.word	0x20000a18
 8001d44:	20000a1d 	.word	0x20000a1d
 8001d48:	20000a68 	.word	0x20000a68
 8001d4c:	58000800 	.word	0x58000800
 8001d50:	40002800 	.word	0x40002800

08001d54 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d5a:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <RescheduleTimerList+0x11c>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d66:	d107      	bne.n	8001d78 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d68:	bf00      	nop
 8001d6a:	4b42      	ldr	r3, [pc, #264]	; (8001e74 <RescheduleTimerList+0x120>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f8      	bne.n	8001d6a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001d78:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <RescheduleTimerList+0x120>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <RescheduleTimerList+0x120>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d86:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001d88:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <RescheduleTimerList+0x124>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	493a      	ldr	r1, [pc, #232]	; (8001e7c <RescheduleTimerList+0x128>)
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3308      	adds	r3, #8
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001da2:	f7ff ff3f 	bl	8001c24 <ReturnTimeElapsed>
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d205      	bcs.n	8001dbe <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <RescheduleTimerList+0x12c>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e04d      	b.n	8001e5a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4a30      	ldr	r2, [pc, #192]	; (8001e84 <RescheduleTimerList+0x130>)
 8001dc2:	8812      	ldrh	r2, [r2, #0]
 8001dc4:	b292      	uxth	r2, r2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d906      	bls.n	8001dde <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <RescheduleTimerList+0x130>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <RescheduleTimerList+0x12c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e03d      	b.n	8001e5a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <RescheduleTimerList+0x12c>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001dee:	e034      	b.n	8001e5a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	4922      	ldr	r1, [pc, #136]	; (8001e7c <RescheduleTimerList+0x128>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3308      	adds	r3, #8
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d20a      	bcs.n	8001e1e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	491c      	ldr	r1, [pc, #112]	; (8001e7c <RescheduleTimerList+0x128>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	3308      	adds	r3, #8
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e013      	b.n	8001e46 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	4916      	ldr	r1, [pc, #88]	; (8001e7c <RescheduleTimerList+0x128>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3308      	adds	r3, #8
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	1ac9      	subs	r1, r1, r3
 8001e36:	4811      	ldr	r0, [pc, #68]	; (8001e7c <RescheduleTimerList+0x128>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4403      	add	r3, r0
 8001e42:	3308      	adds	r3, #8
 8001e44:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <RescheduleTimerList+0x128>)
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	3315      	adds	r3, #21
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d1c7      	bne.n	8001df0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001e60:	89bb      	ldrh	r3, [r7, #12]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff1e 	bl	8001ca4 <RestartWakeupCounter>

  return ;
 8001e68:	bf00      	nop
}
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40002800 	.word	0x40002800
 8001e74:	20000a68 	.word	0x20000a68
 8001e78:	20000a14 	.word	0x20000a14
 8001e7c:	20000984 	.word	0x20000984
 8001e80:	20000a1c 	.word	0x20000a1c
 8001e84:	20000a22 	.word	0x20000a22

08001e88 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e92:	617b      	str	r3, [r7, #20]
  return(result);
 8001e94:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e9c:	4b59      	ldr	r3, [pc, #356]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	22ca      	movs	r2, #202	; 0xca
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
 8001ea4:	4b57      	ldr	r3, [pc, #348]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2253      	movs	r2, #83	; 0x53
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001eac:	4b55      	ldr	r3, [pc, #340]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	4b54      	ldr	r3, [pc, #336]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eba:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001ebc:	4b52      	ldr	r3, [pc, #328]	; (8002008 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001ec4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ec8:	4950      	ldr	r1, [pc, #320]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	330c      	adds	r3, #12
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d16e      	bne.n	8001fbc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001ede:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ee2:	494a      	ldr	r1, [pc, #296]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001ef2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ef6:	4945      	ldr	r1, [pc, #276]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	3310      	adds	r3, #16
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001f08:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04c      	beq.n	8001fac <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001f12:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f16:	493d      	ldr	r1, [pc, #244]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	330d      	adds	r3, #13
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d124      	bne.n	8001f76 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f30:	2101      	movs	r1, #1
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fdf2 	bl	8001b1c <UnlinkTimer>
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f383 8810 	msr	PRIMASK, r3
}
 8001f42:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001f44:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f48:	4930      	ldr	r1, [pc, #192]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3304      	adds	r3, #4
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f9b8 	bl	80022d4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	22ca      	movs	r2, #202	; 0xca
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2253      	movs	r2, #83	; 0x53
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24
 8001f74:	e012      	b.n	8001f9c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f383 8810 	msr	PRIMASK, r3
}
 8001f80:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001f82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f920 	bl	80021cc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	22ca      	movs	r2, #202	; 0xca
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2253      	movs	r2, #83	; 0x53
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001f9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	69b8      	ldr	r0, [r7, #24]
 8001fa6:	f000 fa1b 	bl	80023e0 <HW_TS_RTC_Int_AppNot>
 8001faa:	e022      	b.n	8001ff2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001fac:	f7ff fed2 	bl	8001d54 <RescheduleTimerList>
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f383 8810 	msr	PRIMASK, r3
}
 8001fba:	e01a      	b.n	8001ff2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001fbc:	bf00      	nop
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f8      	beq.n	8001fbe <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001fdc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001fe0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f383 8810 	msr	PRIMASK, r3
}
 8001ff0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001ffa:	bf00      	nop
}
 8001ffc:	3728      	adds	r7, #40	; 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000a68 	.word	0x20000a68
 8002008:	20000a14 	.word	0x20000a14
 800200c:	20000984 	.word	0x20000984
 8002010:	20000a1c 	.word	0x20000a1c
 8002014:	58000800 	.word	0x58000800

08002018 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002024:	4b5e      	ldr	r3, [pc, #376]	; (80021a0 <HW_TS_Init+0x188>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	22ca      	movs	r2, #202	; 0xca
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
 800202c:	4b5c      	ldr	r3, [pc, #368]	; (80021a0 <HW_TS_Init+0x188>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2253      	movs	r2, #83	; 0x53
 8002032:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002034:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HW_TS_Init+0x18c>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <HW_TS_Init+0x18c>)
 800203a:	f043 0320 	orr.w	r3, r3, #32
 800203e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002040:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <HW_TS_Init+0x18c>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f1c3 0304 	rsb	r3, r3, #4
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b55      	ldr	r3, [pc, #340]	; (80021a8 <HW_TS_Init+0x190>)
 8002054:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HW_TS_Init+0x18c>)
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800205e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002062:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	fa92 f2a2 	rbit	r2, r2
 800206a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	2a00      	cmp	r2, #0
 8002074:	d101      	bne.n	800207a <HW_TS_Init+0x62>
  {
    return 32U;
 8002076:	2220      	movs	r2, #32
 8002078:	e003      	b.n	8002082 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	40d3      	lsrs	r3, r2
 8002084:	b2db      	uxtb	r3, r3
 8002086:	3301      	adds	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b48      	ldr	r3, [pc, #288]	; (80021ac <HW_TS_Init+0x194>)
 800208c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800208e:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <HW_TS_Init+0x18c>)
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	b29b      	uxth	r3, r3
 8002094:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002098:	b29b      	uxth	r3, r3
 800209a:	3301      	adds	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <HW_TS_Init+0x198>)
 80020a0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80020a2:	4b43      	ldr	r3, [pc, #268]	; (80021b0 <HW_TS_Init+0x198>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	4a40      	ldr	r2, [pc, #256]	; (80021ac <HW_TS_Init+0x194>)
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	fb02 f303 	mul.w	r3, r2, r3
 80020b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020b4:	4a3c      	ldr	r2, [pc, #240]	; (80021a8 <HW_TS_Init+0x190>)
 80020b6:	7812      	ldrb	r2, [r2, #0]
 80020b8:	40d3      	lsrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d904      	bls.n	80020d0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HW_TS_Init+0x19c>)
 80020c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020cc:	801a      	strh	r2, [r3, #0]
 80020ce:	e003      	b.n	80020d8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <HW_TS_Init+0x19c>)
 80020d6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020dc:	f7ff fb9c 	bl	8001818 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020e4:	f7ff fb84 	bl	80017f0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d13d      	bne.n	800216a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80020ee:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HW_TS_Init+0x1a0>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HW_TS_Init+0x1a4>)
 80020f6:	f04f 32ff 	mov.w	r2, #4294967295
 80020fa:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	77fb      	strb	r3, [r7, #31]
 8002100:	e00c      	b.n	800211c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002102:	7ffa      	ldrb	r2, [r7, #31]
 8002104:	492e      	ldr	r1, [pc, #184]	; (80021c0 <HW_TS_Init+0x1a8>)
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	330c      	adds	r3, #12
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002116:	7ffb      	ldrb	r3, [r7, #31]
 8002118:	3301      	adds	r3, #1
 800211a:	77fb      	strb	r3, [r7, #31]
 800211c:	7ffb      	ldrb	r3, [r7, #31]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d9ef      	bls.n	8002102 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002122:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <HW_TS_Init+0x1ac>)
 8002124:	2206      	movs	r2, #6
 8002126:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HW_TS_Init+0x188>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HW_TS_Init+0x188>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002136:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HW_TS_Init+0x188>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HW_TS_Init+0x188>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002148:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HW_TS_Init+0x1b0>)
 800214c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002150:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002152:	2003      	movs	r0, #3
 8002154:	f001 fa3b 	bl	80035ce <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HW_TS_Init+0x188>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HW_TS_Init+0x188>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e009      	b.n	800217e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <HW_TS_Init+0x188>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002178:	2003      	movs	r0, #3
 800217a:	f001 fa1a 	bl	80035b2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HW_TS_Init+0x188>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	22ff      	movs	r2, #255	; 0xff
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002186:	2200      	movs	r2, #0
 8002188:	2103      	movs	r1, #3
 800218a:	2003      	movs	r0, #3
 800218c:	f001 f9cf 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002190:	2003      	movs	r0, #3
 8002192:	f001 f9e6 	bl	8003562 <HAL_NVIC_EnableIRQ>

  return;
 8002196:	bf00      	nop
}
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000a68 	.word	0x20000a68
 80021a4:	40002800 	.word	0x40002800
 80021a8:	20000a1d 	.word	0x20000a1d
 80021ac:	20000a1e 	.word	0x20000a1e
 80021b0:	20000a20 	.word	0x20000a20
 80021b4:	20000a22 	.word	0x20000a22
 80021b8:	20000a1c 	.word	0x20000a1c
 80021bc:	20000a18 	.word	0x20000a18
 80021c0:	20000984 	.word	0x20000984
 80021c4:	20000a14 	.word	0x20000a14
 80021c8:	58000800 	.word	0x58000800

080021cc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d6:	f3ef 8310 	mrs	r3, PRIMASK
 80021da:	60fb      	str	r3, [r7, #12]
  return(result);
 80021dc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021e0:	b672      	cpsid	i
}
 80021e2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021e4:	2003      	movs	r0, #3
 80021e6:	f001 f9ca 	bl	800357e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HW_TS_Stop+0xf0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	22ca      	movs	r2, #202	; 0xca
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HW_TS_Stop+0xf0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2253      	movs	r2, #83	; 0x53
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80021fa:	79fa      	ldrb	r2, [r7, #7]
 80021fc:	4930      	ldr	r1, [pc, #192]	; (80022c0 <HW_TS_Stop+0xf4>)
 80021fe:	4613      	mov	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	330c      	adds	r3, #12
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d142      	bne.n	8002298 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fc80 	bl	8001b1c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800221c:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HW_TS_Stop+0xf8>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	2b06      	cmp	r3, #6
 8002226:	d12f      	bne.n	8002288 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HW_TS_Stop+0xfc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002234:	d107      	bne.n	8002246 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002236:	bf00      	nop
 8002238:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HW_TS_Stop+0xf0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f8      	bne.n	8002238 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HW_TS_Stop+0xf0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HW_TS_Stop+0xf0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002254:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002256:	bf00      	nop
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HW_TS_Stop+0xf0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f8      	beq.n	8002258 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HW_TS_Stop+0xf0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HW_TS_Stop+0xf0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002276:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HW_TS_Stop+0x100>)
 800227a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800227e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002280:	2003      	movs	r0, #3
 8002282:	f001 f9a4 	bl	80035ce <HAL_NVIC_ClearPendingIRQ>
 8002286:	e007      	b.n	8002298 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HW_TS_Stop+0x104>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	7cfa      	ldrb	r2, [r7, #19]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002294:	f7ff fd5e 	bl	8001d54 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HW_TS_Stop+0xf0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	22ff      	movs	r2, #255	; 0xff
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022a0:	2003      	movs	r0, #3
 80022a2:	f001 f95e 	bl	8003562 <HAL_NVIC_EnableIRQ>
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f383 8810 	msr	PRIMASK, r3
}
 80022b0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80022b2:	bf00      	nop
}
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000a68 	.word	0x20000a68
 80022c0:	20000984 	.word	0x20000984
 80022c4:	20000a14 	.word	0x20000a14
 80022c8:	40002800 	.word	0x40002800
 80022cc:	58000800 	.word	0x58000800
 80022d0:	20000a15 	.word	0x20000a15

080022d4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80022e0:	79fa      	ldrb	r2, [r7, #7]
 80022e2:	493b      	ldr	r1, [pc, #236]	; (80023d0 <HW_TS_Start+0xfc>)
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	330c      	adds	r3, #12
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d103      	bne.n	8002300 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff66 	bl	80021cc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002300:	f3ef 8310 	mrs	r3, PRIMASK
 8002304:	60fb      	str	r3, [r7, #12]
  return(result);
 8002306:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002308:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800230a:	b672      	cpsid	i
}
 800230c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800230e:	2003      	movs	r0, #3
 8002310:	f001 f935 	bl	800357e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HW_TS_Start+0x100>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	22ca      	movs	r2, #202	; 0xca
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HW_TS_Start+0x100>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2253      	movs	r2, #83	; 0x53
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002324:	79fa      	ldrb	r2, [r7, #7]
 8002326:	492a      	ldr	r1, [pc, #168]	; (80023d0 <HW_TS_Start+0xfc>)
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	330c      	adds	r3, #12
 8002334:	2202      	movs	r2, #2
 8002336:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002338:	79fa      	ldrb	r2, [r7, #7]
 800233a:	4925      	ldr	r1, [pc, #148]	; (80023d0 <HW_TS_Start+0xfc>)
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3308      	adds	r3, #8
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800234c:	79fa      	ldrb	r2, [r7, #7]
 800234e:	4920      	ldr	r1, [pc, #128]	; (80023d0 <HW_TS_Start+0xfc>)
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	3304      	adds	r3, #4
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fb30 	bl	80019c8 <linkTimer>
 8002368:	4603      	mov	r3, r0
 800236a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HW_TS_Start+0x104>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <HW_TS_Start+0x108>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	7c7a      	ldrb	r2, [r7, #17]
 800237a:	429a      	cmp	r2, r3
 800237c:	d002      	beq.n	8002384 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800237e:	f7ff fce9 	bl	8001d54 <RescheduleTimerList>
 8002382:	e013      	b.n	80023ac <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002384:	79fa      	ldrb	r2, [r7, #7]
 8002386:	4912      	ldr	r1, [pc, #72]	; (80023d0 <HW_TS_Start+0xfc>)
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	3308      	adds	r3, #8
 8002394:	6819      	ldr	r1, [r3, #0]
 8002396:	8a7b      	ldrh	r3, [r7, #18]
 8002398:	79fa      	ldrb	r2, [r7, #7]
 800239a:	1ac9      	subs	r1, r1, r3
 800239c:	480c      	ldr	r0, [pc, #48]	; (80023d0 <HW_TS_Start+0xfc>)
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4403      	add	r3, r0
 80023a8:	3308      	adds	r3, #8
 80023aa:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HW_TS_Start+0x100>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	22ff      	movs	r2, #255	; 0xff
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023b4:	2003      	movs	r0, #3
 80023b6:	f001 f8d4 	bl	8003562 <HAL_NVIC_EnableIRQ>
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f383 8810 	msr	PRIMASK, r3
}
 80023c4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023c6:	bf00      	nop
}
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000984 	.word	0x20000984
 80023d4:	20000a68 	.word	0x20000a68
 80023d8:	20000a14 	.word	0x20000a14
 80023dc:	20000a15 	.word	0x20000a15

080023e0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	460b      	mov	r3, r1
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4798      	blx	r3

  return;
 80023f2:	bf00      	nop
}
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_UART_RxCpltCallback+0x34>)
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_UART_RxCpltCallback+0x38>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_UART_RxCpltCallback+0x38>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4798      	blx	r3
            }
            break;
 800241e:	e001      	b.n	8002424 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002420:	bf00      	nop
 8002422:	e000      	b.n	8002426 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002424:	bf00      	nop
    }

    return;
 8002426:	bf00      	nop
}
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40013800 	.word	0x40013800
 8002434:	20000a24 	.word	0x20000a24

08002438 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_UART_TxCpltCallback+0x34>)
 8002448:	429a      	cmp	r2, r3
 800244a:	d107      	bne.n	800245c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_UART_TxCpltCallback+0x38>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_UART_TxCpltCallback+0x38>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4798      	blx	r3
            }
            break;
 800245a:	e001      	b.n	8002460 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800245c:	bf00      	nop
 800245e:	e000      	b.n	8002462 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002460:	bf00      	nop
    }

    return;
 8002462:	bf00      	nop
}
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40013800 	.word	0x40013800
 8002470:	20000a28 	.word	0x20000a28

08002474 <LL_AHB3_GRP1_EnableClock>:
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4313      	orrs	r3, r2
 800248a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002490:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002498:	68fb      	ldr	r3, [r7, #12]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_IPCC_Init+0x20>)
 80024ae:	4a07      	ldr	r2, [pc, #28]	; (80024cc <MX_IPCC_Init+0x24>)
 80024b0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_IPCC_Init+0x20>)
 80024b4:	f001 fdb6 	bl	8004024 <HAL_IPCC_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80024be:	f000 f94d 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000a2c 	.word	0x20000a2c
 80024cc:	58000c00 	.word	0x58000c00

080024d0 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <HAL_IPCC_MspInit+0x44>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d113      	bne.n	800250a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80024e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80024e6:	f7ff ffc5 	bl	8002474 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	202c      	movs	r0, #44	; 0x2c
 80024f0:	f001 f81d 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80024f4:	202c      	movs	r0, #44	; 0x2c
 80024f6:	f001 f834 	bl	8003562 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	202d      	movs	r0, #45	; 0x2d
 8002500:	f001 f815 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002504:	202d      	movs	r0, #45	; 0x2d
 8002506:	f001 f82c 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	58000c00 	.word	0x58000c00

08002518 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002524:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002534:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002538:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002540:	e000      	b.n	8002544 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002542:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002544:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f9      	beq.n	8002542 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800254e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_RCC_LSE_SetDriveCapability>:
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f023 0218 	bic.w	r2, r3, #24
 800257a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e009      	b.n	80025b8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ffb3 	bl	8002518 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf1      	blt.n	80025a4 <_write+0x12>
	}
	return len;
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025d0:	f000 fde0 	bl	8003194 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80025d4:	f7fe fd14 	bl	8001000 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025d8:	f000 f828 	bl	800262c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80025dc:	f000 f89e 	bl	800271c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80025e0:	f7ff ff62 	bl	80024a8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025e4:	f7ff f88e 	bl	8001704 <MX_GPIO_Init>
  MX_DMA_Init();
 80025e8:	f7ff f856 	bl	8001698 <MX_DMA_Init>
  MX_RTC_Init();
 80025ec:	f000 f8ec 	bl	80027c8 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80025f0:	f000 fbc2 	bl	8002d78 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80025f4:	f000 fd16 	bl	8003024 <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 80025f8:	f000 fb62 	bl	8002cc0 <MX_LPUART1_UART_Init>
  MX_RF_Init();
 80025fc:	f000 f8b3 	bl	8002766 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8002600:	2200      	movs	r2, #0
 8002602:	2102      	movs	r1, #2
 8002604:	4808      	ldr	r0, [pc, #32]	; (8002628 <main+0x5c>)
 8002606:	f001 fc93 	bl	8003f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	2101      	movs	r1, #1
 800260e:	4806      	ldr	r0, [pc, #24]	; (8002628 <main+0x5c>)
 8002610:	f001 fc8e 	bl	8003f30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	2120      	movs	r1, #32
 8002618:	4803      	ldr	r0, [pc, #12]	; (8002628 <main+0x5c>)
 800261a:	f001 fc89 	bl	8003f30 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800261e:	f7fe fcfd 	bl	800101c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002622:	f7fe ffe2 	bl	80015ea <MX_APPE_Process>
 8002626:	e7fc      	b.n	8002622 <main+0x56>
 8002628:	48000400 	.word	0x48000400

0800262c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b09a      	sub	sp, #104	; 0x68
 8002630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002632:	f107 0320 	add.w	r3, r7, #32
 8002636:	2248      	movs	r2, #72	; 0x48
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f00a f9a6 	bl	800c98c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	615a      	str	r2, [r3, #20]
 8002650:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800265c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002660:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f023 0303 	bic.w	r3, r3, #3
 800266c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002676:	f001 fe5f 	bl	8004338 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800267a:	2010      	movs	r0, #16
 800267c:	f7ff ff73 	bl	8002566 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <SystemClock_Config+0xec>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002688:	4a23      	ldr	r2, [pc, #140]	; (8002718 <SystemClock_Config+0xec>)
 800268a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b21      	ldr	r3, [pc, #132]	; (8002718 <SystemClock_Config+0xec>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800269c:	232f      	movs	r3, #47	; 0x2f
 800269e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026a6:	2301      	movs	r3, #1
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026b0:	2301      	movs	r3, #1
 80026b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026b4:	2340      	movs	r3, #64	; 0x40
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80026b8:	2300      	movs	r3, #0
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80026bc:	2360      	movs	r3, #96	; 0x60
 80026be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80026c0:	2305      	movs	r3, #5
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 f9c7 	bl	8004a60 <HAL_RCC_OscConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80026d8:	f000 f840 	bl	800275c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80026dc:	236f      	movs	r3, #111	; 0x6f
 80026de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80026e0:	2302      	movs	r3, #2
 80026e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 fd23 	bl	8005148 <HAL_RCC_ClockConfig>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002708:	f000 f828 	bl	800275c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800270c:	f003 fade 	bl	8005ccc <HAL_RCCEx_EnableMSIPLLMode>
}
 8002710:	bf00      	nop
 8002712:	3768      	adds	r7, #104	; 0x68
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	58000400 	.word	0x58000400

0800271c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b094      	sub	sp, #80	; 0x50
 8002720:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002722:	463b      	mov	r3, r7
 8002724:	2250      	movs	r2, #80	; 0x50
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f00a f92f 	bl	800c98c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800272e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002732:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002734:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002738:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800273a:	2300      	movs	r3, #0
 800273c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800273e:	2300      	movs	r3, #0
 8002740:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002742:	463b      	mov	r3, r7
 8002744:	4618      	mov	r0, r3
 8002746:	f003 f94b 	bl	80059e0 <HAL_RCCEx_PeriphCLKConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002750:	f000 f804 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002754:	bf00      	nop
 8002756:	3750      	adds	r7, #80	; 0x50
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002760:	b672      	cpsid	i
}
 8002762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002764:	e7fe      	b.n	8002764 <Error_Handler+0x8>

08002766 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <LL_RCC_EnableRTC>:
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4013      	ands	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027cc:	4b16      	ldr	r3, [pc, #88]	; (8002828 <MX_RTC_Init+0x60>)
 80027ce:	4a17      	ldr	r2, [pc, #92]	; (800282c <MX_RTC_Init+0x64>)
 80027d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <MX_RTC_Init+0x60>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <MX_RTC_Init+0x60>)
 80027da:	220f      	movs	r2, #15
 80027dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <MX_RTC_Init+0x60>)
 80027e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80027e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <MX_RTC_Init+0x60>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_RTC_Init+0x60>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <MX_RTC_Init+0x60>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <MX_RTC_Init+0x60>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027fe:	480a      	ldr	r0, [pc, #40]	; (8002828 <MX_RTC_Init+0x60>)
 8002800:	f003 fb7c 	bl	8005efc <HAL_RTC_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800280a:	f7ff ffa7 	bl	800275c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800280e:	2200      	movs	r2, #0
 8002810:	2100      	movs	r1, #0
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_RTC_Init+0x60>)
 8002814:	f003 fc72 	bl	80060fc <HAL_RTCEx_SetWakeUpTimer_IT>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800281e:	f7ff ff9d 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000a68 	.word	0x20000a68
 800282c:	40002800 	.word	0x40002800

08002830 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b096      	sub	sp, #88	; 0x58
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002838:	f107 0308 	add.w	r3, r7, #8
 800283c:	2250      	movs	r2, #80	; 0x50
 800283e:	2100      	movs	r1, #0
 8002840:	4618      	mov	r0, r3
 8002842:	f00a f8a3 	bl	800c98c <memset>
  if(rtcHandle->Instance==RTC)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_RTC_MspInit+0x64>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d11d      	bne.n	800288c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002854:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800285a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800285c:	f107 0308 	add.w	r3, r7, #8
 8002860:	4618      	mov	r0, r3
 8002862:	f003 f8bd 	bl	80059e0 <HAL_RCCEx_PeriphCLKConfig>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800286c:	f7ff ff76 	bl	800275c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002870:	f7ff ff80 	bl	8002774 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002874:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002878:	f7ff ff8d 	bl	8002796 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	2003      	movs	r0, #3
 8002882:	f000 fe54 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002886:	2003      	movs	r0, #3
 8002888:	f000 fe6b 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800288c:	bf00      	nop
 800288e:	3758      	adds	r7, #88	; 0x58
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40002800 	.word	0x40002800

08002898 <LL_AHB3_GRP1_EnableClock>:
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4013      	ands	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028bc:	68fb      	ldr	r3, [r7, #12]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80028ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028d2:	f7ff ffe1 	bl	8002898 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2100      	movs	r1, #0
 80028da:	202e      	movs	r0, #46	; 0x2e
 80028dc:	f000 fe27 	bl	800352e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80028e0:	202e      	movs	r0, #46	; 0x2e
 80028e2:	f000 fe3e 	bl	8003562 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}

080028ea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028ee:	e7fe      	b.n	80028ee <NMI_Handler+0x4>

080028f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f4:	e7fe      	b.n	80028f4 <HardFault_Handler+0x4>

080028f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028fa:	e7fe      	b.n	80028fa <MemManage_Handler+0x4>

080028fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002900:	e7fe      	b.n	8002900 <BusFault_Handler+0x4>

08002902 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002906:	e7fe      	b.n	8002906 <UsageFault_Handler+0x4>

08002908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002936:	f000 fc87 	bl	8003248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}

0800293e <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002942:	f7ff faa1 	bl	8001e88 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}

0800294a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 800294e:	2001      	movs	r0, #1
 8002950:	f001 fb20 	bl	8003f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}

08002958 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 800295c:	2002      	movs	r0, #2
 800295e:	f001 fb19 	bl	8003f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}

08002966 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800296a:	2010      	movs	r0, #16
 800296c:	f001 fb12 	bl	8003f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002978:	4802      	ldr	r0, [pc, #8]	; (8002984 <DMA1_Channel1_IRQHandler+0x10>)
 800297a:	f001 f818 	bl	80039ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000bb8 	.word	0x20000bb8

08002988 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	607b      	str	r3, [r7, #4]
	uint32_t temp;
	tmp_flag = __HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_IDLE);
 8002992:	4b27      	ldr	r3, [pc, #156]	; (8002a30 <LPUART1_IRQHandler+0xa8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b10      	cmp	r3, #16
 800299e:	bf0c      	ite	eq
 80029a0:	2301      	moveq	r3, #1
 80029a2:	2300      	movne	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET)) {
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d039      	beq.n	8002a22 <LPUART1_IRQHandler+0x9a>
		__HAL_UART_CLEAR_IDLEFLAG(&hlpuart1);
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <LPUART1_IRQHandler+0xa8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2210      	movs	r2, #16
 80029b4:	621a      	str	r2, [r3, #32]
		temp = hlpuart1.Instance->ISR;
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <LPUART1_IRQHandler+0xa8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	603b      	str	r3, [r7, #0]
		temp = hlpuart1.Instance->RDR;
 80029be:	4b1c      	ldr	r3, [pc, #112]	; (8002a30 <LPUART1_IRQHandler+0xa8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	603b      	str	r3, [r7, #0]
		//HAL_UART_DMAStop(&hlpuart1);
		temp = hlpuart1.hdmarx->Instance->CNDTR;
 80029c6:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <LPUART1_IRQHandler+0xa8>)
 80029c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	603b      	str	r3, [r7, #0]
		// reset index dma buffer to 1024 (countdown)
		__HAL_DMA_DISABLE(hlpuart1.hdmarx);
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <LPUART1_IRQHandler+0xa8>)
 80029d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <LPUART1_IRQHandler+0xa8>)
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0201 	bic.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
		hlpuart1.hdmarx->Instance->CNDTR = UART_ESP32_MAX_RECVLEN;
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <LPUART1_IRQHandler+0xa8>)
 80029ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029f6:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(hlpuart1.hdmarx);
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <LPUART1_IRQHandler+0xa8>)
 80029fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <LPUART1_IRQHandler+0xa8>)
 8002a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
		UART_ESP32_RxLen = UART_ESP32_MAX_RECVLEN - temp;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	425b      	negs	r3, r3
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <LPUART1_IRQHandler+0xac>)
 8002a1a:	701a      	strb	r2, [r3, #0]
		UART_ESP32_RecvEndFlag = 1;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <LPUART1_IRQHandler+0xb0>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002a22:	4803      	ldr	r0, [pc, #12]	; (8002a30 <LPUART1_IRQHandler+0xa8>)
 8002a24:	f003 fd70 	bl	8006508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000a90 	.word	0x20000a90
 8002a34:	20001fb4 	.word	0x20001fb4
 8002a38:	20001fb5 	.word	0x20001fb5

08002a3c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002a40:	f009 fba0 	bl	800c184 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002a4c:	f009 fbd2 	bl	800c1f4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002a58:	f001 fac0 	bl	8003fdc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002a64:	4802      	ldr	r0, [pc, #8]	; (8002a70 <DMA2_Channel4_IRQHandler+0x10>)
 8002a66:	f000 ffa2 	bl	80039ae <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000c18 	.word	0x20000c18

08002a74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e00a      	b.n	8002a9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a86:	f3af 8000 	nop.w
 8002a8a:	4601      	mov	r1, r0
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	60ba      	str	r2, [r7, #8]
 8002a92:	b2ca      	uxtb	r2, r1
 8002a94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	dbf0      	blt.n	8002a86 <_read+0x12>
  }

  return len;
 8002aa4:	687b      	ldr	r3, [r7, #4]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <_close>:
  }
  return len;
}

int _close(int file)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ad6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <_isatty>:

int _isatty(int file)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002aee:	2301      	movs	r3, #1
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b20:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <_sbrk+0x5c>)
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <_sbrk+0x60>)
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b2c:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <_sbrk+0x64>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <_sbrk+0x64>)
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <_sbrk+0x68>)
 8002b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <_sbrk+0x64>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d207      	bcs.n	8002b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b48:	f009 fee0 	bl	800c90c <__errno>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	220c      	movs	r2, #12
 8002b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
 8002b56:	e009      	b.n	8002b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <_sbrk+0x64>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	4a05      	ldr	r2, [pc, #20]	; (8002b7c <_sbrk+0x64>)
 8002b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20030000 	.word	0x20030000
 8002b78:	00000400 	.word	0x00000400
 8002b7c:	20000a8c 	.word	0x20000a8c
 8002b80:	200025b0 	.word	0x200025b0

08002b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002b88:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <SystemInit+0x98>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <SystemInit+0x98>)
 8002b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002bb0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bbc:	4b18      	ldr	r3, [pc, #96]	; (8002c20 <SystemInit+0x9c>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bce:	f023 0305 	bic.w	r3, r3, #5
 8002bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bee:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <SystemInit+0xa0>)
 8002bf0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <SystemInit+0xa0>)
 8002bf8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00
 8002c20:	faf6fefb 	.word	0xfaf6fefb
 8002c24:	22041000 	.word	0x22041000

08002c28 <LL_AHB2_GRP1_EnableClock>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b085      	sub	sp, #20
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4013      	ands	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
	...

08002cc0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002cc4:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002cc6:	4a2a      	ldr	r2, [pc, #168]	; (8002d70 <MX_LPUART1_UART_Init+0xb0>)
 8002cc8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002cca:	4b28      	ldr	r3, [pc, #160]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cd0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd2:	4b26      	ldr	r3, [pc, #152]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002ce4:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002d08:	4818      	ldr	r0, [pc, #96]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002d0a:	f003 fad3 	bl	80062b4 <HAL_UART_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d14:	f7ff fd22 	bl	800275c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d18:	2100      	movs	r1, #0
 8002d1a:	4814      	ldr	r0, [pc, #80]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002d1c:	f004 fdee 	bl	80078fc <HAL_UARTEx_SetTxFifoThreshold>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d26:	f7ff fd19 	bl	800275c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	480f      	ldr	r0, [pc, #60]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002d2e:	f004 fe23 	bl	8007978 <HAL_UARTEx_SetRxFifoThreshold>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d38:	f7ff fd10 	bl	800275c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d3c:	480b      	ldr	r0, [pc, #44]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002d3e:	f004 fda4 	bl	800788a <HAL_UARTEx_DisableFifoMode>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d48:	f7ff fd08 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_IDLE);
 8002d4c:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0210 	orr.w	r2, r2, #16
 8002d5a:	601a      	str	r2, [r3, #0]
      	HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 8002d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d60:	4904      	ldr	r1, [pc, #16]	; (8002d74 <MX_LPUART1_UART_Init+0xb4>)
 8002d62:	4802      	ldr	r0, [pc, #8]	; (8002d6c <MX_LPUART1_UART_Init+0xac>)
 8002d64:	f003 fb84 	bl	8006470 <HAL_UART_Receive_DMA>
  /* USER CODE END LPUART1_Init 2 */

}
 8002d68:	bf00      	nop
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000a90 	.word	0x20000a90
 8002d70:	40008000 	.word	0x40008000
 8002d74:	200017b4 	.word	0x200017b4

08002d78 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d7c:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002d7e:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <MX_USART1_UART_Init+0x98>)
 8002d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d90:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002d9e:	220c      	movs	r2, #12
 8002da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da2:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002da8:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002daa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002db6:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dc2:	4812      	ldr	r0, [pc, #72]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002dc4:	f003 fa76 	bl	80062b4 <HAL_UART_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002dce:	f7ff fcc5 	bl	800275c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	480d      	ldr	r0, [pc, #52]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002dd6:	f004 fd91 	bl	80078fc <HAL_UARTEx_SetTxFifoThreshold>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002de0:	f7ff fcbc 	bl	800275c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002de4:	2100      	movs	r1, #0
 8002de6:	4809      	ldr	r0, [pc, #36]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002de8:	f004 fdc6 	bl	8007978 <HAL_UARTEx_SetRxFifoThreshold>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002df2:	f7ff fcb3 	bl	800275c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002df6:	4805      	ldr	r0, [pc, #20]	; (8002e0c <MX_USART1_UART_Init+0x94>)
 8002df8:	f004 fd47 	bl	800788a <HAL_UARTEx_DisableFifoMode>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002e02:	f7ff fcab 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000b24 	.word	0x20000b24
 8002e10:	40013800 	.word	0x40013800

08002e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b09c      	sub	sp, #112	; 0x70
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e2c:	f107 030c 	add.w	r3, r7, #12
 8002e30:	2250      	movs	r2, #80	; 0x50
 8002e32:	2100      	movs	r1, #0
 8002e34:	4618      	mov	r0, r3
 8002e36:	f009 fda9 	bl	800c98c <memset>
  if(uartHandle->Instance==LPUART1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <HAL_UART_MspInit+0x18c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d156      	bne.n	8002ef2 <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e44:	2302      	movs	r3, #2
 8002e46:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 fdc5 	bl	80059e0 <HAL_RCCEx_PeriphCLKConfig>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e5c:	f7ff fc7e 	bl	800275c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7ff fefa 	bl	8002c5a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e66:	2004      	movs	r0, #4
 8002e68:	f7ff fede 	bl	8002c28 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ESP32_RX_Pin|ESP32_TX_Pin;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e70:	2302      	movs	r3, #2
 8002e72:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e84:	4619      	mov	r1, r3
 8002e86:	4847      	ldr	r0, [pc, #284]	; (8002fa4 <HAL_UART_MspInit+0x190>)
 8002e88:	f000 fee2 	bl	8003c50 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002e8c:	4b46      	ldr	r3, [pc, #280]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002e8e:	4a47      	ldr	r2, [pc, #284]	; (8002fac <HAL_UART_MspInit+0x198>)
 8002e90:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002e92:	4b45      	ldr	r3, [pc, #276]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002e94:	2210      	movs	r2, #16
 8002e96:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e98:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e9e:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ea4:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eaa:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eb0:	4b3d      	ldr	r3, [pc, #244]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002eb6:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ebc:	4b3a      	ldr	r3, [pc, #232]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002ec2:	4839      	ldr	r0, [pc, #228]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002ec4:	f000 fb92 	bl	80035ec <HAL_DMA_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8002ece:	f7ff fc45 	bl	800275c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a34      	ldr	r2, [pc, #208]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002ed6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002eda:	4a33      	ldr	r2, [pc, #204]	; (8002fa8 <HAL_UART_MspInit+0x194>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2025      	movs	r0, #37	; 0x25
 8002ee6:	f000 fb22 	bl	800352e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002eea:	2025      	movs	r0, #37	; 0x25
 8002eec:	f000 fb39 	bl	8003562 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ef0:	e052      	b.n	8002f98 <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==USART1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2e      	ldr	r2, [pc, #184]	; (8002fb0 <HAL_UART_MspInit+0x19c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d14d      	bne.n	8002f98 <HAL_UART_MspInit+0x184>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002efc:	2301      	movs	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f00:	2300      	movs	r3, #0
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f002 fd69 	bl	80059e0 <HAL_RCCEx_PeriphCLKConfig>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8002f14:	f7ff fc22 	bl	800275c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f1c:	f7ff feb6 	bl	8002c8c <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f20:	2002      	movs	r0, #2
 8002f22:	f7ff fe81 	bl	8002c28 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002f26:	23c0      	movs	r3, #192	; 0xc0
 8002f28:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f32:	2300      	movs	r3, #0
 8002f34:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f36:	2307      	movs	r3, #7
 8002f38:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f3e:	4619      	mov	r1, r3
 8002f40:	481c      	ldr	r0, [pc, #112]	; (8002fb4 <HAL_UART_MspInit+0x1a0>)
 8002f42:	f000 fe85 	bl	8003c50 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f48:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <HAL_UART_MspInit+0x1a8>)
 8002f4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f4e:	220f      	movs	r2, #15
 8002f50:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f54:	2210      	movs	r2, #16
 8002f56:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f60:	2280      	movs	r2, #128	; 0x80
 8002f62:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f7c:	480e      	ldr	r0, [pc, #56]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f7e:	f000 fb35 	bl	80035ec <HAL_DMA_Init>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_UART_MspInit+0x178>
      Error_Handler();
 8002f88:	f7ff fbe8 	bl	800275c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a0a      	ldr	r2, [pc, #40]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f90:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f92:	4a09      	ldr	r2, [pc, #36]	; (8002fb8 <HAL_UART_MspInit+0x1a4>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002f98:	bf00      	nop
 8002f9a:	3770      	adds	r7, #112	; 0x70
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40008000 	.word	0x40008000
 8002fa4:	48000800 	.word	0x48000800
 8002fa8:	20000bb8 	.word	0x20000bb8
 8002fac:	40020008 	.word	0x40020008
 8002fb0:	40013800 	.word	0x40013800
 8002fb4:	48000400 	.word	0x48000400
 8002fb8:	20000c18 	.word	0x20000c18
 8002fbc:	40020444 	.word	0x40020444

08002fc0 <LL_AHB2_GRP1_EnableClock>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr

08002ff2 <LL_APB1_GRP1_EnableClock>:
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b085      	sub	sp, #20
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4313      	orrs	r3, r2
 8003008:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800300a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4013      	ands	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003016:	68fb      	ldr	r3, [r7, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003028:	4b10      	ldr	r3, [pc, #64]	; (800306c <MX_USB_PCD_Init+0x48>)
 800302a:	4a11      	ldr	r2, [pc, #68]	; (8003070 <MX_USB_PCD_Init+0x4c>)
 800302c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800302e:	4b0f      	ldr	r3, [pc, #60]	; (800306c <MX_USB_PCD_Init+0x48>)
 8003030:	2208      	movs	r2, #8
 8003032:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <MX_USB_PCD_Init+0x48>)
 8003036:	2202      	movs	r2, #2
 8003038:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800303a:	4b0c      	ldr	r3, [pc, #48]	; (800306c <MX_USB_PCD_Init+0x48>)
 800303c:	2202      	movs	r2, #2
 800303e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <MX_USB_PCD_Init+0x48>)
 8003042:	2200      	movs	r2, #0
 8003044:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <MX_USB_PCD_Init+0x48>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800304c:	4b07      	ldr	r3, [pc, #28]	; (800306c <MX_USB_PCD_Init+0x48>)
 800304e:	2200      	movs	r2, #0
 8003050:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <MX_USB_PCD_Init+0x48>)
 8003054:	2200      	movs	r2, #0
 8003056:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003058:	4804      	ldr	r0, [pc, #16]	; (800306c <MX_USB_PCD_Init+0x48>)
 800305a:	f001 f869 	bl	8004130 <HAL_PCD_Init>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003064:	f7ff fb7a 	bl	800275c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000c78 	.word	0x20000c78
 8003070:	40006800 	.word	0x40006800

08003074 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b09c      	sub	sp, #112	; 0x70
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800308c:	f107 030c 	add.w	r3, r7, #12
 8003090:	2250      	movs	r2, #80	; 0x50
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f009 fc79 	bl	800c98c <memset>
  if(pcdHandle->Instance==USB)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a1f      	ldr	r2, [pc, #124]	; (800311c <HAL_PCD_MspInit+0xa8>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d136      	bne.n	8003112 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80030a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80030aa:	2318      	movs	r3, #24
 80030ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80030ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80030b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80030ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80030be:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80030c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80030c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030ca:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030cc:	f107 030c 	add.w	r3, r7, #12
 80030d0:	4618      	mov	r0, r3
 80030d2:	f002 fc85 	bl	80059e0 <HAL_RCCEx_PeriphCLKConfig>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80030dc:	f7ff fb3e 	bl	800275c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7ff ff6d 	bl	8002fc0 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80030e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80030ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f4:	2300      	movs	r3, #0
 80030f6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80030f8:	230a      	movs	r3, #10
 80030fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003100:	4619      	mov	r1, r3
 8003102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003106:	f000 fda3 	bl	8003c50 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800310a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800310e:	f7ff ff70 	bl	8002ff2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003112:	bf00      	nop
 8003114:	3770      	adds	r7, #112	; 0x70
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40006800 	.word	0x40006800

08003120 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003120:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003122:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003124:	3304      	adds	r3, #4

08003126 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003126:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003128:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800312a:	d3f9      	bcc.n	8003120 <CopyDataInit>
  bx lr
 800312c:	4770      	bx	lr

0800312e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800312e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003130:	3004      	adds	r0, #4

08003132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003132:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003134:	d3fb      	bcc.n	800312e <FillZerobss>
  bx lr
 8003136:	4770      	bx	lr

08003138 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003138:	480c      	ldr	r0, [pc, #48]	; (800316c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800313a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800313c:	f7ff fd22 	bl	8002b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003140:	480b      	ldr	r0, [pc, #44]	; (8003170 <LoopForever+0x6>)
 8003142:	490c      	ldr	r1, [pc, #48]	; (8003174 <LoopForever+0xa>)
 8003144:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <LoopForever+0xe>)
 8003146:	2300      	movs	r3, #0
 8003148:	f7ff ffed 	bl	8003126 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800314c:	480b      	ldr	r0, [pc, #44]	; (800317c <LoopForever+0x12>)
 800314e:	490c      	ldr	r1, [pc, #48]	; (8003180 <LoopForever+0x16>)
 8003150:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <LoopForever+0x1a>)
 8003152:	2300      	movs	r3, #0
 8003154:	f7ff ffe7 	bl	8003126 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003158:	480b      	ldr	r0, [pc, #44]	; (8003188 <LoopForever+0x1e>)
 800315a:	490c      	ldr	r1, [pc, #48]	; (800318c <LoopForever+0x22>)
 800315c:	2300      	movs	r3, #0
 800315e:	f7ff ffe8 	bl	8003132 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003162:	f009 fbd9 	bl	800c918 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003166:	f7ff fa31 	bl	80025cc <main>

0800316a <LoopForever>:

LoopForever:
  b LoopForever
 800316a:	e7fe      	b.n	800316a <LoopForever>
  ldr   r0, =_estack
 800316c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003170:	20000008 	.word	0x20000008
 8003174:	20000098 	.word	0x20000098
 8003178:	0800fda4 	.word	0x0800fda4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800317c:	200301e3 	.word	0x200301e3
 8003180:	200301e3 	.word	0x200301e3
 8003184:	080106fd 	.word	0x080106fd
  INIT_BSS _sbss, _ebss
 8003188:	20000968 	.word	0x20000968
 800318c:	200025ac 	.word	0x200025ac

08003190 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003190:	e7fe      	b.n	8003190 <ADC1_IRQHandler>
	...

08003194 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800319e:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <HAL_Init+0x3c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <HAL_Init+0x3c>)
 80031a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031aa:	2003      	movs	r0, #3
 80031ac:	f000 f9b4 	bl	8003518 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031b0:	2000      	movs	r0, #0
 80031b2:	f000 f80f 	bl	80031d4 <HAL_InitTick>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	71fb      	strb	r3, [r7, #7]
 80031c0:	e001      	b.n	80031c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031c2:	f7ff fb82 	bl	80028ca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031c6:	79fb      	ldrb	r3, [r7, #7]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	58004000 	.word	0x58004000

080031d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80031e0:	4b17      	ldr	r3, [pc, #92]	; (8003240 <HAL_InitTick+0x6c>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d024      	beq.n	8003232 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031e8:	f002 f95a 	bl	80054a0 <HAL_RCC_GetHCLKFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <HAL_InitTick+0x6c>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4619      	mov	r1, r3
 80031f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	4618      	mov	r0, r3
 8003202:	f000 f9ca 	bl	800359a <HAL_SYSTICK_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10f      	bne.n	800322c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	d809      	bhi.n	8003226 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003212:	2200      	movs	r2, #0
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	f04f 30ff 	mov.w	r0, #4294967295
 800321a:	f000 f988 	bl	800352e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800321e:	4a09      	ldr	r2, [pc, #36]	; (8003244 <HAL_InitTick+0x70>)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e007      	b.n	8003236 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	73fb      	strb	r3, [r7, #15]
 800322a:	e004      	b.n	8003236 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	e001      	b.n	8003236 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003236:	7bfb      	ldrb	r3, [r7, #15]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000010 	.word	0x20000010
 8003244:	2000000c 	.word	0x2000000c

08003248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <HAL_IncTick+0x20>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	4b06      	ldr	r3, [pc, #24]	; (800326c <HAL_IncTick+0x24>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4413      	add	r3, r2
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <HAL_IncTick+0x24>)
 800325a:	6013      	str	r3, [r2, #0]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20000010 	.word	0x20000010
 800326c:	20000f6c 	.word	0x20000f6c

08003270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_GetTick+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000f6c 	.word	0x20000f6c

08003288 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_GetTickPrio+0x14>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	2000000c 	.word	0x2000000c

080032a0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <HAL_GetTickFreq+0x14>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000010 	.word	0x20000010

080032b8 <__NVIC_SetPriorityGrouping>:
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d4:	4013      	ands	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ea:	4a04      	ldr	r2, [pc, #16]	; (80032fc <__NVIC_SetPriorityGrouping+0x44>)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	60d3      	str	r3, [r2, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000ed00 	.word	0xe000ed00

08003300 <__NVIC_GetPriorityGrouping>:
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <__NVIC_GetPriorityGrouping+0x18>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	0a1b      	lsrs	r3, r3, #8
 800330a:	f003 0307 	and.w	r3, r3, #7
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_EnableIRQ>:
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0b      	blt.n	8003346 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4907      	ldr	r1, [pc, #28]	; (8003354 <__NVIC_EnableIRQ+0x38>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003346:	bf00      	nop
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_DisableIRQ>:
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	2b00      	cmp	r3, #0
 8003368:	db12      	blt.n	8003390 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	490a      	ldr	r1, [pc, #40]	; (800339c <__NVIC_DisableIRQ+0x44>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2001      	movs	r0, #1
 800337a:	fa00 f202 	lsl.w	r2, r0, r2
 800337e:	3320      	adds	r3, #32
 8003380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003384:	f3bf 8f4f 	dsb	sy
}
 8003388:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800338a:	f3bf 8f6f 	isb	sy
}
 800338e:	bf00      	nop
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000e100 	.word	0xe000e100

080033a0 <__NVIC_SetPendingIRQ>:
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db0c      	blt.n	80033cc <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4907      	ldr	r1, [pc, #28]	; (80033d8 <__NVIC_SetPendingIRQ+0x38>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	3340      	adds	r3, #64	; 0x40
 80033c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	e000e100 	.word	0xe000e100

080033dc <__NVIC_ClearPendingIRQ>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db0c      	blt.n	8003408 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	4907      	ldr	r1, [pc, #28]	; (8003414 <__NVIC_ClearPendingIRQ+0x38>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2001      	movs	r0, #1
 80033fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003402:	3360      	adds	r3, #96	; 0x60
 8003404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000e100 	.word	0xe000e100

08003418 <__NVIC_SetPriority>:
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	6039      	str	r1, [r7, #0]
 8003422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	2b00      	cmp	r3, #0
 800342a:	db0a      	blt.n	8003442 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	490c      	ldr	r1, [pc, #48]	; (8003464 <__NVIC_SetPriority+0x4c>)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	0112      	lsls	r2, r2, #4
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	440b      	add	r3, r1
 800343c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003440:	e00a      	b.n	8003458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <__NVIC_SetPriority+0x50>)
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	3b04      	subs	r3, #4
 8003450:	0112      	lsls	r2, r2, #4
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	440b      	add	r3, r1
 8003456:	761a      	strb	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000e100 	.word	0xe000e100
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <NVIC_EncodePriority>:
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f1c3 0307 	rsb	r3, r3, #7
 8003486:	2b04      	cmp	r3, #4
 8003488:	bf28      	it	cs
 800348a:	2304      	movcs	r3, #4
 800348c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3304      	adds	r3, #4
 8003492:	2b06      	cmp	r3, #6
 8003494:	d902      	bls.n	800349c <NVIC_EncodePriority+0x30>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3b03      	subs	r3, #3
 800349a:	e000      	b.n	800349e <NVIC_EncodePriority+0x32>
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	401a      	ands	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b4:	f04f 31ff 	mov.w	r1, #4294967295
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	43d9      	mvns	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	4313      	orrs	r3, r2
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
	...

080034d4 <SysTick_Config>:
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034e4:	d301      	bcc.n	80034ea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80034e6:	2301      	movs	r3, #1
 80034e8:	e00f      	b.n	800350a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ea:	4a0a      	ldr	r2, [pc, #40]	; (8003514 <SysTick_Config+0x40>)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034f2:	210f      	movs	r1, #15
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	f7ff ff8e 	bl	8003418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <SysTick_Config+0x40>)
 80034fe:	2200      	movs	r2, #0
 8003500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <SysTick_Config+0x40>)
 8003504:	2207      	movs	r2, #7
 8003506:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	e000e010 	.word	0xe000e010

08003518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fec9 	bl	80032b8 <__NVIC_SetPriorityGrouping>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
 800353a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800353c:	f7ff fee0 	bl	8003300 <__NVIC_GetPriorityGrouping>
 8003540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff90 	bl	800346c <NVIC_EncodePriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff5f 	bl	8003418 <__NVIC_SetPriority>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fed3 	bl	800331c <__NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	4603      	mov	r3, r0
 8003586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fee3 	bl	8003358 <__NVIC_DisableIRQ>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ff96 	bl	80034d4 <SysTick_Config>
 80035a8:	4603      	mov	r3, r0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80035bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff feed 	bl	80033a0 <__NVIC_SetPendingIRQ>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80035d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fefd 	bl	80033dc <__NVIC_ClearPendingIRQ>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e08e      	b.n	800371c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	461a      	mov	r2, r3
 8003604:	4b47      	ldr	r3, [pc, #284]	; (8003724 <HAL_DMA_Init+0x138>)
 8003606:	429a      	cmp	r2, r3
 8003608:	d80f      	bhi.n	800362a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	4b45      	ldr	r3, [pc, #276]	; (8003728 <HAL_DMA_Init+0x13c>)
 8003612:	4413      	add	r3, r2
 8003614:	4a45      	ldr	r2, [pc, #276]	; (800372c <HAL_DMA_Init+0x140>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	009a      	lsls	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a42      	ldr	r2, [pc, #264]	; (8003730 <HAL_DMA_Init+0x144>)
 8003626:	641a      	str	r2, [r3, #64]	; 0x40
 8003628:	e00e      	b.n	8003648 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	4b40      	ldr	r3, [pc, #256]	; (8003734 <HAL_DMA_Init+0x148>)
 8003632:	4413      	add	r3, r2
 8003634:	4a3d      	ldr	r2, [pc, #244]	; (800372c <HAL_DMA_Init+0x140>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	009a      	lsls	r2, r3, #2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a3c      	ldr	r2, [pc, #240]	; (8003738 <HAL_DMA_Init+0x14c>)
 8003646:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800366c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003678:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003684:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4313      	orrs	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 fa74 	bl	8003b88 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a8:	d102      	bne.n	80036b0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80036bc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036c6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d010      	beq.n	80036f2 <HAL_DMA_Init+0x106>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d80c      	bhi.n	80036f2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fa93 	bl	8003c04 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	e008      	b.n	8003704 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40020407 	.word	0x40020407
 8003728:	bffdfff8 	.word	0xbffdfff8
 800372c:	cccccccd 	.word	0xcccccccd
 8003730:	40020000 	.word	0x40020000
 8003734:	bffdfbf8 	.word	0xbffdfbf8
 8003738:	40020400 	.word	0x40020400

0800373c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_DMA_Start_IT+0x20>
 8003758:	2302      	movs	r3, #2
 800375a:	e066      	b.n	800382a <HAL_DMA_Start_IT+0xee>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	d155      	bne.n	800381c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f9b9 	bl	8003b0c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 020e 	orr.w	r2, r2, #14
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e00f      	b.n	80037d4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0204 	bic.w	r2, r2, #4
 80037c2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 020a 	orr.w	r2, r2, #10
 80037d2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003808:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0201 	orr.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	e005      	b.n	8003828 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003824:	2302      	movs	r3, #2
 8003826:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003828:	7dfb      	ldrb	r3, [r7, #23]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e04f      	b.n	80038e4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d008      	beq.n	8003862 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2204      	movs	r2, #4
 8003854:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e040      	b.n	80038e4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 020e 	bic.w	r2, r2, #14
 8003870:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003880:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0201 	bic.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f003 021c 	and.w	r2, r3, #28
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2101      	movs	r1, #1
 80038a0:	fa01 f202 	lsl.w	r2, r1, r2
 80038a4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038ae:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00c      	beq.n	80038d2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038d0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d005      	beq.n	8003914 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2204      	movs	r2, #4
 800390c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	73fb      	strb	r3, [r7, #15]
 8003912:	e047      	b.n	80039a4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 020e 	bic.w	r2, r2, #14
 8003922:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003942:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	f003 021c 	and.w	r2, r3, #28
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f202 	lsl.w	r2, r1, r2
 8003956:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003960:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00c      	beq.n	8003984 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003978:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003982:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
    }
  }
  return status;
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f003 031c 	and.w	r3, r3, #28
 80039ce:	2204      	movs	r2, #4
 80039d0:	409a      	lsls	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d026      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x7a>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d021      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d107      	bne.n	8003a02 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0204 	bic.w	r2, r2, #4
 8003a00:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a06:	f003 021c 	and.w	r2, r3, #28
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	2104      	movs	r1, #4
 8003a10:	fa01 f202 	lsl.w	r2, r1, r2
 8003a14:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d071      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a26:	e06c      	b.n	8003b02 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	f003 031c 	and.w	r3, r3, #28
 8003a30:	2202      	movs	r2, #2
 8003a32:	409a      	lsls	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d02e      	beq.n	8003a9a <HAL_DMA_IRQHandler+0xec>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d029      	beq.n	8003a9a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10b      	bne.n	8003a6c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 020a 	bic.w	r2, r2, #10
 8003a62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a70:	f003 021c 	and.w	r2, r3, #28
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a78:	2102      	movs	r1, #2
 8003a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d038      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a98:	e033      	b.n	8003b02 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	f003 031c 	and.w	r3, r3, #28
 8003aa2:	2208      	movs	r2, #8
 8003aa4:	409a      	lsls	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d02a      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x156>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d025      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 020e 	bic.w	r2, r2, #14
 8003ac6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003acc:	f003 021c 	and.w	r2, r3, #28
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8003ada:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b02:	bf00      	nop
 8003b04:	bf00      	nop
}
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b22:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b34:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	f003 021c 	and.w	r2, r3, #28
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2101      	movs	r1, #1
 8003b44:	fa01 f202 	lsl.w	r2, r1, r2
 8003b48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d108      	bne.n	8003b6c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b6a:	e007      	b.n	8003b7c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	60da      	str	r2, [r3, #12]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b17      	ldr	r3, [pc, #92]	; (8003bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d80a      	bhi.n	8003bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	089b      	lsrs	r3, r3, #2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ba8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6493      	str	r3, [r2, #72]	; 0x48
 8003bb0:	e007      	b.n	8003bc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	089b      	lsrs	r3, r3, #2
 8003bb8:	009a      	lsls	r2, r3, #2
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bbc:	4413      	add	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	3b08      	subs	r3, #8
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bd8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2201      	movs	r2, #1
 8003be2:	409a      	lsls	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	40020407 	.word	0x40020407
 8003bf8:	4002081c 	.word	0x4002081c
 8003bfc:	cccccccd 	.word	0xcccccccd
 8003c00:	40020880 	.word	0x40020880

08003c04 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c14:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c1a:	4413      	add	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	461a      	mov	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003c28:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	2201      	movs	r2, #1
 8003c34:	409a      	lsls	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	1000823f 	.word	0x1000823f
 8003c4c:	40020940 	.word	0x40020940

08003c50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5e:	e14c      	b.n	8003efa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	2101      	movs	r1, #1
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 813e 	beq.w	8003ef4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d005      	beq.n	8003c90 <HAL_GPIO_Init+0x40>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 0303 	and.w	r3, r3, #3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d130      	bne.n	8003cf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	091b      	lsrs	r3, r3, #4
 8003cdc:	f003 0201 	and.w	r2, r3, #1
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d017      	beq.n	8003d2e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	2203      	movs	r2, #3
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4013      	ands	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d123      	bne.n	8003d82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	08da      	lsrs	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3208      	adds	r2, #8
 8003d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	220f      	movs	r2, #15
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	08da      	lsrs	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3208      	adds	r2, #8
 8003d7c:	6939      	ldr	r1, [r7, #16]
 8003d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4013      	ands	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	f003 0203 	and.w	r2, r3, #3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 8098 	beq.w	8003ef4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003dc4:	4a54      	ldr	r2, [pc, #336]	; (8003f18 <HAL_GPIO_Init+0x2c8>)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	3302      	adds	r3, #2
 8003dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 0303 	and.w	r3, r3, #3
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	220f      	movs	r2, #15
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dee:	d019      	beq.n	8003e24 <HAL_GPIO_Init+0x1d4>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a4a      	ldr	r2, [pc, #296]	; (8003f1c <HAL_GPIO_Init+0x2cc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <HAL_GPIO_Init+0x1d0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a49      	ldr	r2, [pc, #292]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00d      	beq.n	8003e1c <HAL_GPIO_Init+0x1cc>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a48      	ldr	r2, [pc, #288]	; (8003f24 <HAL_GPIO_Init+0x2d4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <HAL_GPIO_Init+0x1c8>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a47      	ldr	r2, [pc, #284]	; (8003f28 <HAL_GPIO_Init+0x2d8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <HAL_GPIO_Init+0x1c4>
 8003e10:	2304      	movs	r3, #4
 8003e12:	e008      	b.n	8003e26 <HAL_GPIO_Init+0x1d6>
 8003e14:	2307      	movs	r3, #7
 8003e16:	e006      	b.n	8003e26 <HAL_GPIO_Init+0x1d6>
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e004      	b.n	8003e26 <HAL_GPIO_Init+0x1d6>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e002      	b.n	8003e26 <HAL_GPIO_Init+0x1d6>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <HAL_GPIO_Init+0x1d6>
 8003e24:	2300      	movs	r3, #0
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	f002 0203 	and.w	r2, r2, #3
 8003e2c:	0092      	lsls	r2, r2, #2
 8003e2e:	4093      	lsls	r3, r2
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e36:	4938      	ldr	r1, [pc, #224]	; (8003f18 <HAL_GPIO_Init+0x2c8>)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	089b      	lsrs	r3, r3, #2
 8003e3c:	3302      	adds	r3, #2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e44:	4b39      	ldr	r3, [pc, #228]	; (8003f2c <HAL_GPIO_Init+0x2dc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4013      	ands	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e68:	4a30      	ldr	r2, [pc, #192]	; (8003f2c <HAL_GPIO_Init+0x2dc>)
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	; (8003f2c <HAL_GPIO_Init+0x2dc>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43db      	mvns	r3, r3
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e92:	4a26      	ldr	r2, [pc, #152]	; (8003f2c <HAL_GPIO_Init+0x2dc>)
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e98:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <HAL_GPIO_Init+0x2dc>)
 8003e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ebe:	4a1b      	ldr	r2, [pc, #108]	; (8003f2c <HAL_GPIO_Init+0x2dc>)
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003ec6:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <HAL_GPIO_Init+0x2dc>)
 8003ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003eec:	4a0f      	ldr	r2, [pc, #60]	; (8003f2c <HAL_GPIO_Init+0x2dc>)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f47f aeab 	bne.w	8003c60 <HAL_GPIO_Init+0x10>
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	bf00      	nop
 8003f0e:	371c      	adds	r7, #28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	48000400 	.word	0x48000400
 8003f20:	48000800 	.word	0x48000800
 8003f24:	48000c00 	.word	0x48000c00
 8003f28:	48001000 	.word	0x48001000
 8003f2c:	58000800 	.word	0x58000800

08003f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	807b      	strh	r3, [r7, #2]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f40:	787b      	ldrb	r3, [r7, #1]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f4c:	e002      	b.n	8003f54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f4e:	887a      	ldrh	r2, [r7, #2]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f72:	887a      	ldrh	r2, [r7, #2]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4013      	ands	r3, r2
 8003f78:	041a      	lsls	r2, r3, #16
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	43d9      	mvns	r1, r3
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	400b      	ands	r3, r1
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	619a      	str	r2, [r3, #24]
}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d006      	beq.n	8003fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003faa:	4a05      	ldr	r2, [pc, #20]	; (8003fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f806 	bl	8003fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	58000800 	.word	0x58000800

08003fc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
	...

08003fdc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <HAL_HSEM_IRQHandler+0x30>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003fe8:	4b08      	ldr	r3, [pc, #32]	; (800400c <HAL_HSEM_IRQHandler+0x30>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	4906      	ldr	r1, [pc, #24]	; (800400c <HAL_HSEM_IRQHandler+0x30>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003ff6:	4a05      	ldr	r2, [pc, #20]	; (800400c <HAL_HSEM_IRQHandler+0x30>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f807 	bl	8004010 <HAL_HSEM_FreeCallback>
}
 8004002:	bf00      	nop
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	58001500 	.word	0x58001500

08004010 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01e      	beq.n	8004074 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004036:	4b13      	ldr	r3, [pc, #76]	; (8004084 <HAL_IPCC_Init+0x60>)
 8004038:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d102      	bne.n	800404c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fe fa42 	bl	80024d0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800404c:	68b8      	ldr	r0, [r7, #8]
 800404e:	f000 f85b 	bl	8004108 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f82c 	bl	80040bc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004072:	e001      	b.n	8004078 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004078:	7bfb      	ldrb	r3, [r7, #15]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	58000c00 	.word	0x58000c00

08004088 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	4613      	mov	r3, r2
 8004094:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	4613      	mov	r3, r2
 80040ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	e00f      	b.n	80040ea <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	4a0b      	ldr	r2, [pc, #44]	; (8004100 <IPCC_SetDefaultCallbacks+0x44>)
 80040d4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	3306      	adds	r3, #6
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	4a08      	ldr	r2, [pc, #32]	; (8004104 <IPCC_SetDefaultCallbacks+0x48>)
 80040e2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3301      	adds	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b05      	cmp	r3, #5
 80040ee:	d9ec      	bls.n	80040ca <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	08004089 	.word	0x08004089
 8004104:	080040a3 	.word	0x080040a3

08004108 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800411c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	223f      	movs	r2, #63	; 0x3f
 8004122:	609a      	str	r2, [r3, #8]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004132:	b08b      	sub	sp, #44	; 0x2c
 8004134:	af06      	add	r7, sp, #24
 8004136:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e0cb      	b.n	80042da <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d106      	bne.n	800415c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fe ff8c 	bl	8003074 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2203      	movs	r2, #3
 8004160:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f003 fc91 	bl	8007a90 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800416e:	2300      	movs	r3, #0
 8004170:	73fb      	strb	r3, [r7, #15]
 8004172:	e040      	b.n	80041f6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	440b      	add	r3, r1
 8004184:	3301      	adds	r3, #1
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	4613      	mov	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4413      	add	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	440b      	add	r3, r1
 800419a:	7bfa      	ldrb	r2, [r7, #15]
 800419c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	440b      	add	r3, r1
 80041ae:	3303      	adds	r3, #3
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041b4:	7bfa      	ldrb	r2, [r7, #15]
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	4613      	mov	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	4413      	add	r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	440b      	add	r3, r1
 80041c2:	3338      	adds	r3, #56	; 0x38
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041c8:	7bfa      	ldrb	r2, [r7, #15]
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	440b      	add	r3, r1
 80041d6:	333c      	adds	r3, #60	; 0x3c
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041dc:	7bfa      	ldrb	r2, [r7, #15]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	440b      	add	r3, r1
 80041ea:	3340      	adds	r3, #64	; 0x40
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	3301      	adds	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d3b9      	bcc.n	8004174 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004200:	2300      	movs	r3, #0
 8004202:	73fb      	strb	r3, [r7, #15]
 8004204:	e044      	b.n	8004290 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	440b      	add	r3, r1
 8004214:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004218:	2200      	movs	r2, #0
 800421a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	440b      	add	r3, r1
 800422a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4413      	add	r3, r2
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	440b      	add	r3, r1
 8004240:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004244:	2200      	movs	r2, #0
 8004246:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	440b      	add	r3, r1
 8004256:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800425e:	7bfa      	ldrb	r2, [r7, #15]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	440b      	add	r3, r1
 800426c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	440b      	add	r3, r1
 8004282:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004286:	2200      	movs	r2, #0
 8004288:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	3301      	adds	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	429a      	cmp	r2, r3
 8004298:	d3b5      	bcc.n	8004206 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	687e      	ldr	r6, [r7, #4]
 80042a2:	466d      	mov	r5, sp
 80042a4:	f106 0410 	add.w	r4, r6, #16
 80042a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	602b      	str	r3, [r5, #0]
 80042b0:	1d33      	adds	r3, r6, #4
 80042b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042b4:	6838      	ldr	r0, [r7, #0]
 80042b6:	f003 fc06 	bl	8007ac6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f805 	bl	80042e2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042e2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004306:	b29b      	uxth	r3, r3
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800431a:	b29b      	uxth	r3, r3
 800431c:	f043 0302 	orr.w	r3, r3, #2
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
	...

08004338 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a04      	ldr	r2, [pc, #16]	; (8004354 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004346:	6013      	str	r3, [r2, #0]
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	58000400 	.word	0x58000400

08004358 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <HAL_PWREx_GetVoltageRange+0x18>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004364:	4618      	mov	r0, r3
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	58000400 	.word	0x58000400

08004374 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004386:	d101      	bne.n	800438c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_RCC_HSE_Enable>:
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <LL_RCC_HSE_Disable>:
{
 80043b6:	b480      	push	{r7}
 80043b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80043ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_RCC_HSE_IsReady>:
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e6:	d101      	bne.n	80043ec <LL_RCC_HSE_IsReady+0x18>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <LL_RCC_HSE_IsReady+0x1a>
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_RCC_HSI_Enable>:
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80043fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800440a:	6013      	str	r3, [r2, #0]
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <LL_RCC_HSI_Disable>:
{
 8004416:	b480      	push	{r7}
 8004418:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004428:	6013      	str	r3, [r2, #0]
}
 800442a:	bf00      	nop
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_RCC_HSI_IsReady>:
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004446:	d101      	bne.n	800444c <LL_RCC_HSI_IsReady+0x18>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <LL_RCC_HSI_IsReady+0x1a>
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	061b      	lsls	r3, r3, #24
 800446e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004472:	4313      	orrs	r3, r2
 8004474:	604b      	str	r3, [r1, #4]
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <LL_RCC_HSI48_Enable>:
{
 8004482:	b480      	push	{r7}
 8004484:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800448e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800449a:	bf00      	nop
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <LL_RCC_HSI48_Disable>:
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80044a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <LL_RCC_HSI48_IsReady>:
{
 80044c6:	b480      	push	{r7}
 80044c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80044ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d101      	bne.n	80044de <LL_RCC_HSI48_IsReady+0x18>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <LL_RCC_HSI48_IsReady+0x1a>
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <LL_RCC_LSE_Enable>:
{
 80044ea:	b480      	push	{r7}
 80044ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004502:	bf00      	nop
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <LL_RCC_LSE_Disable>:
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <LL_RCC_LSE_EnableBypass>:
{
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004546:	bf00      	nop
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <LL_RCC_LSE_DisableBypass>:
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004560:	f023 0304 	bic.w	r3, r3, #4
 8004564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <LL_RCC_LSE_IsReady>:
{
 8004572:	b480      	push	{r7}
 8004574:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800457a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b02      	cmp	r3, #2
 8004584:	d101      	bne.n	800458a <LL_RCC_LSE_IsReady+0x18>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <LL_RCC_LSE_IsReady+0x1a>
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <LL_RCC_LSI1_Enable>:
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800459a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800459e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <LL_RCC_LSI1_Disable>:
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80045bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80045d0:	bf00      	nop
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <LL_RCC_LSI1_IsReady>:
{
 80045da:	b480      	push	{r7}
 80045dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80045de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d101      	bne.n	80045f2 <LL_RCC_LSI1_IsReady+0x18>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <LL_RCC_LSI1_IsReady+0x1a>
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <LL_RCC_LSI2_Enable>:
{
 80045fe:	b480      	push	{r7}
 8004600:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800460a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460e:	f043 0304 	orr.w	r3, r3, #4
 8004612:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004616:	bf00      	nop
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_RCC_LSI2_Disable>:
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004630:	f023 0304 	bic.w	r3, r3, #4
 8004634:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_RCC_LSI2_IsReady>:
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800464a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b08      	cmp	r3, #8
 8004654:	d101      	bne.n	800465a <LL_RCC_LSI2_IsReady+0x18>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <LL_RCC_LSI2_IsReady+0x1a>
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <LL_RCC_LSI2_SetTrimming>:
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800466e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004676:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_RCC_MSI_Enable>:
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6013      	str	r3, [r2, #0]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <LL_RCC_MSI_Disable>:
{
 80046b2:	b480      	push	{r7}
 80046b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80046b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6013      	str	r3, [r2, #0]
}
 80046c6:	bf00      	nop
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <LL_RCC_MSI_IsReady>:
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80046d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d101      	bne.n	80046e6 <LL_RCC_MSI_IsReady+0x16>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <LL_RCC_MSI_IsReady+0x18>
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <LL_RCC_MSI_SetRange>:
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80046fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4313      	orrs	r3, r2
 800470c:	600b      	str	r3, [r1, #0]
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <LL_RCC_MSI_GetRange>:
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800472a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2bb0      	cmp	r3, #176	; 0xb0
 8004730:	d901      	bls.n	8004736 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004732:	23b0      	movs	r3, #176	; 0xb0
 8004734:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004736:	687b      	ldr	r3, [r7, #4]
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800474c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	021b      	lsls	r3, r3, #8
 800475a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800475e:	4313      	orrs	r3, r2
 8004760:	604b      	str	r3, [r1, #4]
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <LL_RCC_SetSysClkSource>:
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 0203 	bic.w	r2, r3, #3
 8004780:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <LL_RCC_GetSysClkSource>:
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 030c 	and.w	r3, r3, #12
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_RCC_SetAHBPrescaler>:
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80047b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80047de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_RCC_SetAHB4Prescaler>:
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800480a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004812:	f023 020f 	bic.w	r2, r3, #15
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_RCC_SetAPB1Prescaler>:
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004842:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4313      	orrs	r3, r2
 800484a:	608b      	str	r3, [r1, #8]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <LL_RCC_SetAPB2Prescaler>:
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800486a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4313      	orrs	r3, r2
 8004872:	608b      	str	r3, [r1, #8]
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_RCC_GetAHBPrescaler>:
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800488e:	4618      	mov	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <LL_RCC_GetAHB4Prescaler>:
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800489c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LL_RCC_GetAPB1Prescaler>:
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80048b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_RCC_GetAPB2Prescaler>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80048da:	4618      	mov	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_RCC_PLL_Enable>:
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f6:	6013      	str	r3, [r2, #0]
}
 80048f8:	bf00      	nop
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <LL_RCC_PLL_Disable>:
{
 8004902:	b480      	push	{r7}
 8004904:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004910:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004914:	6013      	str	r3, [r2, #0]
}
 8004916:	bf00      	nop
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_RCC_PLL_IsReady>:
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004932:	d101      	bne.n	8004938 <LL_RCC_PLL_IsReady+0x18>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <LL_RCC_PLL_IsReady+0x1a>
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <LL_RCC_PLL_GetN>:
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	0a1b      	lsrs	r3, r3, #8
 8004950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <LL_RCC_PLL_GetR>:
{
 800495e:	b480      	push	{r7}
 8004960:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <LL_RCC_PLL_GetDivider>:
{
 8004976:	b480      	push	{r7}
 8004978:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800497a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004984:	4618      	mov	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <LL_RCC_PLL_GetMainSource>:
{
 800498e:	b480      	push	{r7}
 8004990:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0303 	and.w	r3, r3, #3
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <LL_RCC_IsActiveFlag_HPRE>:
{
 80049a6:	b480      	push	{r7}
 80049a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80049aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d101      	bne.n	80049be <LL_RCC_IsActiveFlag_HPRE+0x18>
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80049ca:	b480      	push	{r7}
 80049cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80049ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049de:	d101      	bne.n	80049e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80049f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a04:	d101      	bne.n	8004a0a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004a16:	b480      	push	{r7}
 8004a18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a28:	d101      	bne.n	8004a2e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a4c:	d101      	bne.n	8004a52 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a60:	b590      	push	{r4, r7, lr}
 8004a62:	b08d      	sub	sp, #52	; 0x34
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e363      	b.n	800513a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 808d 	beq.w	8004b9a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a80:	f7ff fe89 	bl	8004796 <LL_RCC_GetSysClkSource>
 8004a84:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a86:	f7ff ff82 	bl	800498e <LL_RCC_PLL_GetMainSource>
 8004a8a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d005      	beq.n	8004a9e <HAL_RCC_OscConfig+0x3e>
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	2b0c      	cmp	r3, #12
 8004a96:	d147      	bne.n	8004b28 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d144      	bne.n	8004b28 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e347      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004aae:	f7ff fe34 	bl	800471a <LL_RCC_MSI_GetRange>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	d914      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fd2f 	bl	8005520 <RCC_SetFlashLatencyFromMSIRange>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e336      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fe0e 	bl	80046f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fe32 	bl	8004744 <LL_RCC_MSI_SetCalibTrimming>
 8004ae0:	e013      	b.n	8004b0a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fe03 	bl	80046f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff fe27 	bl	8004744 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fd10 	bl	8005520 <RCC_SetFlashLatencyFromMSIRange>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e317      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b0a:	f000 fcc9 	bl	80054a0 <HAL_RCC_GetHCLKFreq>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4aa4      	ldr	r2, [pc, #656]	; (8004da4 <HAL_RCC_OscConfig+0x344>)
 8004b12:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b14:	4ba4      	ldr	r3, [pc, #656]	; (8004da8 <HAL_RCC_OscConfig+0x348>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe fb5b 	bl	80031d4 <HAL_InitTick>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d039      	beq.n	8004b98 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e308      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01e      	beq.n	8004b6e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b30:	f7ff fdb0 	bl	8004694 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b34:	f7fe fb9c 	bl	8003270 <HAL_GetTick>
 8004b38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b3c:	f7fe fb98 	bl	8003270 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e2f5      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b4e:	f7ff fdbf 	bl	80046d0 <LL_RCC_MSI_IsReady>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0f1      	beq.n	8004b3c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fdc8 	bl	80046f2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff fdec 	bl	8004744 <LL_RCC_MSI_SetCalibTrimming>
 8004b6c:	e015      	b.n	8004b9a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b6e:	f7ff fda0 	bl	80046b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b72:	f7fe fb7d 	bl	8003270 <HAL_GetTick>
 8004b76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b7a:	f7fe fb79 	bl	8003270 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e2d6      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004b8c:	f7ff fda0 	bl	80046d0 <LL_RCC_MSI_IsReady>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f1      	bne.n	8004b7a <HAL_RCC_OscConfig+0x11a>
 8004b96:	e000      	b.n	8004b9a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004b98:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d047      	beq.n	8004c36 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ba6:	f7ff fdf6 	bl	8004796 <LL_RCC_GetSysClkSource>
 8004baa:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bac:	f7ff feef 	bl	800498e <LL_RCC_PLL_GetMainSource>
 8004bb0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_OscConfig+0x164>
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	2b0c      	cmp	r3, #12
 8004bbc:	d108      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d134      	bne.n	8004c36 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e2b4      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd8:	d102      	bne.n	8004be0 <HAL_RCC_OscConfig+0x180>
 8004bda:	f7ff fbdd 	bl	8004398 <LL_RCC_HSE_Enable>
 8004bde:	e001      	b.n	8004be4 <HAL_RCC_OscConfig+0x184>
 8004be0:	f7ff fbe9 	bl	80043b6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d012      	beq.n	8004c12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bec:	f7fe fb40 	bl	8003270 <HAL_GetTick>
 8004bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7fe fb3c 	bl	8003270 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	; 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e299      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004c06:	f7ff fbe5 	bl	80043d4 <LL_RCC_HSE_IsReady>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f1      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x194>
 8004c10:	e011      	b.n	8004c36 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c12:	f7fe fb2d 	bl	8003270 <HAL_GetTick>
 8004c16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c1a:	f7fe fb29 	bl	8003270 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b64      	cmp	r3, #100	; 0x64
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e286      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004c2c:	f7ff fbd2 	bl	80043d4 <LL_RCC_HSE_IsReady>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1f1      	bne.n	8004c1a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04c      	beq.n	8004cdc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c42:	f7ff fda8 	bl	8004796 <LL_RCC_GetSysClkSource>
 8004c46:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c48:	f7ff fea1 	bl	800498e <LL_RCC_PLL_GetMainSource>
 8004c4c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d005      	beq.n	8004c60 <HAL_RCC_OscConfig+0x200>
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b0c      	cmp	r3, #12
 8004c58:	d10e      	bne.n	8004c78 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d10b      	bne.n	8004c78 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e266      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff fbf1 	bl	8004458 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004c76:	e031      	b.n	8004cdc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d019      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c80:	f7ff fbba 	bl	80043f8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c84:	f7fe faf4 	bl	8003270 <HAL_GetTick>
 8004c88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8c:	f7fe faf0 	bl	8003270 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e24d      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004c9e:	f7ff fbc9 	bl	8004434 <LL_RCC_HSI_IsReady>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0f1      	beq.n	8004c8c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fbd3 	bl	8004458 <LL_RCC_HSI_SetCalibTrimming>
 8004cb2:	e013      	b.n	8004cdc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb4:	f7ff fbaf 	bl	8004416 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb8:	f7fe fada 	bl	8003270 <HAL_GetTick>
 8004cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc0:	f7fe fad6 	bl	8003270 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e233      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004cd2:	f7ff fbaf 	bl	8004434 <LL_RCC_HSI_IsReady>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f1      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80a3 	beq.w	8004e3c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d076      	beq.n	8004dec <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d046      	beq.n	8004d98 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004d0a:	f7ff fc66 	bl	80045da <LL_RCC_LSI1_IsReady>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d113      	bne.n	8004d3c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004d14:	f7ff fc3f 	bl	8004596 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d18:	f7fe faaa 	bl	8003270 <HAL_GetTick>
 8004d1c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d20:	f7fe faa6 	bl	8003270 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e203      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004d32:	f7ff fc52 	bl	80045da <LL_RCC_LSI1_IsReady>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f1      	beq.n	8004d20 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004d3c:	f7ff fc5f 	bl	80045fe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fe fa96 	bl	8003270 <HAL_GetTick>
 8004d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d48:	f7fe fa92 	bl	8003270 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e1ef      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004d5a:	f7ff fc72 	bl	8004642 <LL_RCC_LSI2_IsReady>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d0f1      	beq.n	8004d48 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fc7c 	bl	8004666 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004d6e:	f7ff fc23 	bl	80045b8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d72:	f7fe fa7d 	bl	8003270 <HAL_GetTick>
 8004d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d7a:	f7fe fa79 	bl	8003270 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e1d6      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004d8c:	f7ff fc25 	bl	80045da <LL_RCC_LSI1_IsReady>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f1      	bne.n	8004d7a <HAL_RCC_OscConfig+0x31a>
 8004d96:	e051      	b.n	8004e3c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004d98:	f7ff fbfd 	bl	8004596 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fe fa68 	bl	8003270 <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004da2:	e00c      	b.n	8004dbe <HAL_RCC_OscConfig+0x35e>
 8004da4:	20000008 	.word	0x20000008
 8004da8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004dac:	f7fe fa60 	bl	8003270 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e1bd      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004dbe:	f7ff fc0c 	bl	80045da <LL_RCC_LSI1_IsReady>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f1      	beq.n	8004dac <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004dc8:	f7ff fc2a 	bl	8004620 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004dce:	f7fe fa4f 	bl	8003270 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e1ac      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004de0:	f7ff fc2f 	bl	8004642 <LL_RCC_LSI2_IsReady>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f1      	bne.n	8004dce <HAL_RCC_OscConfig+0x36e>
 8004dea:	e027      	b.n	8004e3c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004dec:	f7ff fc18 	bl	8004620 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fe fa3e 	bl	8003270 <HAL_GetTick>
 8004df4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004df8:	f7fe fa3a 	bl	8003270 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e197      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004e0a:	f7ff fc1a 	bl	8004642 <LL_RCC_LSI2_IsReady>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f1      	bne.n	8004df8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004e14:	f7ff fbd0 	bl	80045b8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e18:	f7fe fa2a 	bl	8003270 <HAL_GetTick>
 8004e1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e20:	f7fe fa26 	bl	8003270 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e183      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004e32:	f7ff fbd2 	bl	80045da <LL_RCC_LSI1_IsReady>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1f1      	bne.n	8004e20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d05b      	beq.n	8004f00 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e48:	4ba7      	ldr	r3, [pc, #668]	; (80050e8 <HAL_RCC_OscConfig+0x688>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d114      	bne.n	8004e7e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004e54:	f7ff fa70 	bl	8004338 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e58:	f7fe fa0a 	bl	8003270 <HAL_GetTick>
 8004e5c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e60:	f7fe fa06 	bl	8003270 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e163      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e72:	4b9d      	ldr	r3, [pc, #628]	; (80050e8 <HAL_RCC_OscConfig+0x688>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d102      	bne.n	8004e8c <HAL_RCC_OscConfig+0x42c>
 8004e86:	f7ff fb30 	bl	80044ea <LL_RCC_LSE_Enable>
 8004e8a:	e00c      	b.n	8004ea6 <HAL_RCC_OscConfig+0x446>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	d104      	bne.n	8004e9e <HAL_RCC_OscConfig+0x43e>
 8004e94:	f7ff fb4b 	bl	800452e <LL_RCC_LSE_EnableBypass>
 8004e98:	f7ff fb27 	bl	80044ea <LL_RCC_LSE_Enable>
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCC_OscConfig+0x446>
 8004e9e:	f7ff fb35 	bl	800450c <LL_RCC_LSE_Disable>
 8004ea2:	f7ff fb55 	bl	8004550 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d014      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eae:	f7fe f9df 	bl	8003270 <HAL_GetTick>
 8004eb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb6:	f7fe f9db 	bl	8003270 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e136      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ecc:	f7ff fb51 	bl	8004572 <LL_RCC_LSE_IsReady>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0ef      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x456>
 8004ed6:	e013      	b.n	8004f00 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed8:	f7fe f9ca 	bl	8003270 <HAL_GetTick>
 8004edc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ede:	e00a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee0:	f7fe f9c6 	bl	8003270 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e121      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ef6:	f7ff fb3c 	bl	8004572 <LL_RCC_LSE_IsReady>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ef      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d02c      	beq.n	8004f66 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d014      	beq.n	8004f3e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f14:	f7ff fab5 	bl	8004482 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f18:	f7fe f9aa 	bl	8003270 <HAL_GetTick>
 8004f1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f20:	f7fe f9a6 	bl	8003270 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e103      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004f32:	f7ff fac8 	bl	80044c6 <LL_RCC_HSI48_IsReady>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0f1      	beq.n	8004f20 <HAL_RCC_OscConfig+0x4c0>
 8004f3c:	e013      	b.n	8004f66 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f3e:	f7ff fab1 	bl	80044a4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f42:	f7fe f995 	bl	8003270 <HAL_GetTick>
 8004f46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f4a:	f7fe f991 	bl	8003270 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e0ee      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004f5c:	f7ff fab3 	bl	80044c6 <LL_RCC_HSI48_IsReady>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f1      	bne.n	8004f4a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80e4 	beq.w	8005138 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f70:	f7ff fc11 	bl	8004796 <LL_RCC_GetSysClkSource>
 8004f74:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	f040 80b4 	bne.w	80050f0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f003 0203 	and.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d123      	bne.n	8004fde <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d11c      	bne.n	8004fde <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	0a1b      	lsrs	r3, r3, #8
 8004fa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d114      	bne.n	8004fde <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d10d      	bne.n	8004fde <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d106      	bne.n	8004fde <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d05d      	beq.n	800509a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b0c      	cmp	r3, #12
 8004fe2:	d058      	beq.n	8005096 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e0a1      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ff6:	f7ff fc84 	bl	8004902 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ffa:	f7fe f939 	bl	8003270 <HAL_GetTick>
 8004ffe:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005002:	f7fe f935 	bl	8003270 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e092      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1ef      	bne.n	8005002 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	4b30      	ldr	r3, [pc, #192]	; (80050ec <HAL_RCC_OscConfig+0x68c>)
 800502a:	4013      	ands	r3, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800503a:	0212      	lsls	r2, r2, #8
 800503c:	4311      	orrs	r1, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005042:	4311      	orrs	r1, r2
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005048:	4311      	orrs	r1, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800504e:	430a      	orrs	r2, r1
 8005050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005054:	4313      	orrs	r3, r2
 8005056:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005058:	f7ff fc44 	bl	80048e4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800506c:	f7fe f900 	bl	8003270 <HAL_GetTick>
 8005070:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005074:	f7fe f8fc 	bl	8003270 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e059      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ef      	beq.n	8005074 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005094:	e050      	b.n	8005138 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e04f      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800509a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d147      	bne.n	8005138 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050a8:	f7ff fc1c 	bl	80048e4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050bc:	f7fe f8d8 	bl	8003270 <HAL_GetTick>
 80050c0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fe f8d4 	bl	8003270 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e031      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0ef      	beq.n	80050c4 <HAL_RCC_OscConfig+0x664>
 80050e4:	e028      	b.n	8005138 <HAL_RCC_OscConfig+0x6d8>
 80050e6:	bf00      	nop
 80050e8:	58000400 	.word	0x58000400
 80050ec:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	2b0c      	cmp	r3, #12
 80050f4:	d01e      	beq.n	8005134 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050f6:	f7ff fc04 	bl	8004902 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fe f8b9 	bl	8003270 <HAL_GetTick>
 80050fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005102:	f7fe f8b5 	bl	8003270 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e012      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1ef      	bne.n	8005102 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <HAL_RCC_OscConfig+0x6e4>)
 800512e:	4013      	ands	r3, r2
 8005130:	60cb      	str	r3, [r1, #12]
 8005132:	e001      	b.n	8005138 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3734      	adds	r7, #52	; 0x34
 800513e:	46bd      	mov	sp, r7
 8005140:	bd90      	pop	{r4, r7, pc}
 8005142:	bf00      	nop
 8005144:	eefefffc 	.word	0xeefefffc

08005148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e12d      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800515c:	4b98      	ldr	r3, [pc, #608]	; (80053c0 <HAL_RCC_ClockConfig+0x278>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d91b      	bls.n	80051a2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516a:	4b95      	ldr	r3, [pc, #596]	; (80053c0 <HAL_RCC_ClockConfig+0x278>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 0207 	bic.w	r2, r3, #7
 8005172:	4993      	ldr	r1, [pc, #588]	; (80053c0 <HAL_RCC_ClockConfig+0x278>)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800517a:	f7fe f879 	bl	8003270 <HAL_GetTick>
 800517e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005180:	e008      	b.n	8005194 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005182:	f7fe f875 	bl	8003270 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e111      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005194:	4b8a      	ldr	r3, [pc, #552]	; (80053c0 <HAL_RCC_ClockConfig+0x278>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	683a      	ldr	r2, [r7, #0]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d1ef      	bne.n	8005182 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d016      	beq.n	80051dc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff fafb 	bl	80047ae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051b8:	f7fe f85a 	bl	8003270 <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051c0:	f7fe f856 	bl	8003270 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e0f2      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80051d2:	f7ff fbe8 	bl	80049a6 <LL_RCC_IsActiveFlag_HPRE>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f1      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d016      	beq.n	8005216 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff faf2 	bl	80047d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051f2:	f7fe f83d 	bl	8003270 <HAL_GetTick>
 80051f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80051f8:	e008      	b.n	800520c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051fa:	f7fe f839 	bl	8003270 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e0d5      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800520c:	f7ff fbdd 	bl	80049ca <LL_RCC_IsActiveFlag_C2HPRE>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f1      	beq.n	80051fa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d016      	beq.n	8005250 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff faeb 	bl	8004802 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800522c:	f7fe f820 	bl	8003270 <HAL_GetTick>
 8005230:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005232:	e008      	b.n	8005246 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005234:	f7fe f81c 	bl	8003270 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b02      	cmp	r3, #2
 8005240:	d901      	bls.n	8005246 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e0b8      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005246:	f7ff fbd3 	bl	80049f0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f1      	beq.n	8005234 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0304 	and.w	r3, r3, #4
 8005258:	2b00      	cmp	r3, #0
 800525a:	d016      	beq.n	800528a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fae5 	bl	8004830 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005266:	f7fe f803 	bl	8003270 <HAL_GetTick>
 800526a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800526c:	e008      	b.n	8005280 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800526e:	f7fd ffff 	bl	8003270 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e09b      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005280:	f7ff fbc9 	bl	8004a16 <LL_RCC_IsActiveFlag_PPRE1>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0f1      	beq.n	800526e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d017      	beq.n	80052c6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fadb 	bl	8004858 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052a2:	f7fd ffe5 	bl	8003270 <HAL_GetTick>
 80052a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052aa:	f7fd ffe1 	bl	8003270 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e07d      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80052bc:	f7ff fbbd 	bl	8004a3a <LL_RCC_IsActiveFlag_PPRE2>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f1      	beq.n	80052aa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d043      	beq.n	800535a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d106      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80052da:	f7ff f87b 	bl	80043d4 <LL_RCC_HSE_IsReady>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d11e      	bne.n	8005322 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e067      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d106      	bne.n	80052fe <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80052f0:	f7ff fb16 	bl	8004920 <LL_RCC_PLL_IsReady>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d113      	bne.n	8005322 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e05c      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005306:	f7ff f9e3 	bl	80046d0 <LL_RCC_MSI_IsReady>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d108      	bne.n	8005322 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e051      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005314:	f7ff f88e 	bl	8004434 <LL_RCC_HSI_IsReady>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e04a      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fa21 	bl	800476e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800532c:	f7fd ffa0 	bl	8003270 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005332:	e00a      	b.n	800534a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005334:	f7fd ff9c 	bl	8003270 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e036      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534a:	f7ff fa24 	bl	8004796 <LL_RCC_GetSysClkSource>
 800534e:	4602      	mov	r2, r0
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	429a      	cmp	r2, r3
 8005358:	d1ec      	bne.n	8005334 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800535a:	4b19      	ldr	r3, [pc, #100]	; (80053c0 <HAL_RCC_ClockConfig+0x278>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d21b      	bcs.n	80053a0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005368:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <HAL_RCC_ClockConfig+0x278>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f023 0207 	bic.w	r2, r3, #7
 8005370:	4913      	ldr	r1, [pc, #76]	; (80053c0 <HAL_RCC_ClockConfig+0x278>)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	4313      	orrs	r3, r2
 8005376:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005378:	f7fd ff7a 	bl	8003270 <HAL_GetTick>
 800537c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	e008      	b.n	8005392 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005380:	f7fd ff76 	bl	8003270 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e012      	b.n	80053b8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005392:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_ClockConfig+0x278>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d1ef      	bne.n	8005380 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053a0:	f000 f87e 	bl	80054a0 <HAL_RCC_GetHCLKFreq>
 80053a4:	4603      	mov	r3, r0
 80053a6:	4a07      	ldr	r2, [pc, #28]	; (80053c4 <HAL_RCC_ClockConfig+0x27c>)
 80053a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80053aa:	f7fd ff6d 	bl	8003288 <HAL_GetTickPrio>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fd ff0f 	bl	80031d4 <HAL_InitTick>
 80053b6:	4603      	mov	r3, r0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	58004000 	.word	0x58004000
 80053c4:	20000008 	.word	0x20000008

080053c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ce:	f7ff f9e2 	bl	8004796 <LL_RCC_GetSysClkSource>
 80053d2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80053da:	f7ff f99e 	bl	800471a <LL_RCC_MSI_GetRange>
 80053de:	4603      	mov	r3, r0
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	4a2b      	ldr	r2, [pc, #172]	; (8005494 <HAL_RCC_GetSysClockFreq+0xcc>)
 80053e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e04b      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d102      	bne.n	80053fc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053f6:	4b28      	ldr	r3, [pc, #160]	; (8005498 <HAL_RCC_GetSysClockFreq+0xd0>)
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	e045      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b08      	cmp	r3, #8
 8005400:	d10a      	bne.n	8005418 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005402:	f7fe ffb7 	bl	8004374 <LL_RCC_HSE_IsEnabledDiv2>
 8005406:	4603      	mov	r3, r0
 8005408:	2b01      	cmp	r3, #1
 800540a:	d102      	bne.n	8005412 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800540c:	4b22      	ldr	r3, [pc, #136]	; (8005498 <HAL_RCC_GetSysClockFreq+0xd0>)
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	e03a      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005412:	4b22      	ldr	r3, [pc, #136]	; (800549c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	e037      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005418:	f7ff fab9 	bl	800498e <LL_RCC_PLL_GetMainSource>
 800541c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d003      	beq.n	800542c <HAL_RCC_GetSysClockFreq+0x64>
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d003      	beq.n	8005432 <HAL_RCC_GetSysClockFreq+0x6a>
 800542a:	e00d      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800542c:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <HAL_RCC_GetSysClockFreq+0xd0>)
 800542e:	60bb      	str	r3, [r7, #8]
        break;
 8005430:	e015      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005432:	f7fe ff9f 	bl	8004374 <LL_RCC_HSE_IsEnabledDiv2>
 8005436:	4603      	mov	r3, r0
 8005438:	2b01      	cmp	r3, #1
 800543a:	d102      	bne.n	8005442 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800543c:	4b16      	ldr	r3, [pc, #88]	; (8005498 <HAL_RCC_GetSysClockFreq+0xd0>)
 800543e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005440:	e00d      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005442:	4b16      	ldr	r3, [pc, #88]	; (800549c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005444:	60bb      	str	r3, [r7, #8]
        break;
 8005446:	e00a      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005448:	f7ff f967 	bl	800471a <LL_RCC_MSI_GetRange>
 800544c:	4603      	mov	r3, r0
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	4a0f      	ldr	r2, [pc, #60]	; (8005494 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800545a:	60bb      	str	r3, [r7, #8]
        break;
 800545c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800545e:	f7ff fa71 	bl	8004944 <LL_RCC_PLL_GetN>
 8005462:	4602      	mov	r2, r0
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	fb03 f402 	mul.w	r4, r3, r2
 800546a:	f7ff fa84 	bl	8004976 <LL_RCC_PLL_GetDivider>
 800546e:	4603      	mov	r3, r0
 8005470:	091b      	lsrs	r3, r3, #4
 8005472:	3301      	adds	r3, #1
 8005474:	fbb4 f4f3 	udiv	r4, r4, r3
 8005478:	f7ff fa71 	bl	800495e <LL_RCC_PLL_GetR>
 800547c:	4603      	mov	r3, r0
 800547e:	0f5b      	lsrs	r3, r3, #29
 8005480:	3301      	adds	r3, #1
 8005482:	fbb4 f3f3 	udiv	r3, r4, r3
 8005486:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005488:	68fb      	ldr	r3, [r7, #12]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	bd90      	pop	{r4, r7, pc}
 8005492:	bf00      	nop
 8005494:	0800fbb0 	.word	0x0800fbb0
 8005498:	00f42400 	.word	0x00f42400
 800549c:	01e84800 	.word	0x01e84800

080054a0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a0:	b598      	push	{r3, r4, r7, lr}
 80054a2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80054a4:	f7ff ff90 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 80054a8:	4604      	mov	r4, r0
 80054aa:	f7ff f9e9 	bl	8004880 <LL_RCC_GetAHBPrescaler>
 80054ae:	4603      	mov	r3, r0
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	4a03      	ldr	r2, [pc, #12]	; (80054c4 <HAL_RCC_GetHCLKFreq+0x24>)
 80054b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054bc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd98      	pop	{r3, r4, r7, pc}
 80054c4:	0800fb50 	.word	0x0800fb50

080054c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054c8:	b598      	push	{r3, r4, r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80054cc:	f7ff ffe8 	bl	80054a0 <HAL_RCC_GetHCLKFreq>
 80054d0:	4604      	mov	r4, r0
 80054d2:	f7ff f9ef 	bl	80048b4 <LL_RCC_GetAPB1Prescaler>
 80054d6:	4603      	mov	r3, r0
 80054d8:	0a1b      	lsrs	r3, r3, #8
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	4a04      	ldr	r2, [pc, #16]	; (80054f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd98      	pop	{r3, r4, r7, pc}
 80054f0:	0800fb90 	.word	0x0800fb90

080054f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054f4:	b598      	push	{r3, r4, r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80054f8:	f7ff ffd2 	bl	80054a0 <HAL_RCC_GetHCLKFreq>
 80054fc:	4604      	mov	r4, r0
 80054fe:	f7ff f9e5 	bl	80048cc <LL_RCC_GetAPB2Prescaler>
 8005502:	4603      	mov	r3, r0
 8005504:	0adb      	lsrs	r3, r3, #11
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	4a04      	ldr	r2, [pc, #16]	; (800551c <HAL_RCC_GetPCLK2Freq+0x28>)
 800550c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005510:	f003 031f 	and.w	r3, r3, #31
 8005514:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005518:	4618      	mov	r0, r3
 800551a:	bd98      	pop	{r3, r4, r7, pc}
 800551c:	0800fb90 	.word	0x0800fb90

08005520 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005520:	b590      	push	{r4, r7, lr}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2bb0      	cmp	r3, #176	; 0xb0
 800552c:	d903      	bls.n	8005536 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800552e:	4b15      	ldr	r3, [pc, #84]	; (8005584 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	e007      	b.n	8005546 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	4a11      	ldr	r2, [pc, #68]	; (8005584 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005544:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005546:	f7ff f9a7 	bl	8004898 <LL_RCC_GetAHB4Prescaler>
 800554a:	4603      	mov	r3, r0
 800554c:	091b      	lsrs	r3, r3, #4
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	4a0d      	ldr	r2, [pc, #52]	; (8005588 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	fbb2 f3f3 	udiv	r3, r2, r3
 800555e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4a0a      	ldr	r2, [pc, #40]	; (800558c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005564:	fba2 2303 	umull	r2, r3, r2, r3
 8005568:	0c9c      	lsrs	r4, r3, #18
 800556a:	f7fe fef5 	bl	8004358 <HAL_PWREx_GetVoltageRange>
 800556e:	4603      	mov	r3, r0
 8005570:	4619      	mov	r1, r3
 8005572:	4620      	mov	r0, r4
 8005574:	f000 f80c 	bl	8005590 <RCC_SetFlashLatency>
 8005578:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800557a:	4618      	mov	r0, r3
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bd90      	pop	{r4, r7, pc}
 8005582:	bf00      	nop
 8005584:	0800fbb0 	.word	0x0800fbb0
 8005588:	0800fb50 	.word	0x0800fb50
 800558c:	431bde83 	.word	0x431bde83

08005590 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005590:	b590      	push	{r4, r7, lr}
 8005592:	b093      	sub	sp, #76	; 0x4c
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800559a:	4b37      	ldr	r3, [pc, #220]	; (8005678 <RCC_SetFlashLatency+0xe8>)
 800559c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80055a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80055a6:	4a35      	ldr	r2, [pc, #212]	; (800567c <RCC_SetFlashLatency+0xec>)
 80055a8:	f107 031c 	add.w	r3, r7, #28
 80055ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80055ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80055b2:	4b33      	ldr	r3, [pc, #204]	; (8005680 <RCC_SetFlashLatency+0xf0>)
 80055b4:	f107 040c 	add.w	r4, r7, #12
 80055b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80055be:	2300      	movs	r3, #0
 80055c0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c8:	d11a      	bne.n	8005600 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80055ca:	2300      	movs	r3, #0
 80055cc:	643b      	str	r3, [r7, #64]	; 0x40
 80055ce:	e013      	b.n	80055f8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80055d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	3348      	adds	r3, #72	; 0x48
 80055d6:	443b      	add	r3, r7
 80055d8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d807      	bhi.n	80055f2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80055e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	3348      	adds	r3, #72	; 0x48
 80055e8:	443b      	add	r3, r7
 80055ea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80055ee:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80055f0:	e020      	b.n	8005634 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80055f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f4:	3301      	adds	r3, #1
 80055f6:	643b      	str	r3, [r7, #64]	; 0x40
 80055f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d9e8      	bls.n	80055d0 <RCC_SetFlashLatency+0x40>
 80055fe:	e019      	b.n	8005634 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005600:	2300      	movs	r3, #0
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005604:	e013      	b.n	800562e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	3348      	adds	r3, #72	; 0x48
 800560c:	443b      	add	r3, r7
 800560e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	429a      	cmp	r2, r3
 8005616:	d807      	bhi.n	8005628 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	3348      	adds	r3, #72	; 0x48
 800561e:	443b      	add	r3, r7
 8005620:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005624:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005626:	e005      	b.n	8005634 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562a:	3301      	adds	r3, #1
 800562c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800562e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005630:	2b02      	cmp	r3, #2
 8005632:	d9e8      	bls.n	8005606 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005634:	4b13      	ldr	r3, [pc, #76]	; (8005684 <RCC_SetFlashLatency+0xf4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f023 0207 	bic.w	r2, r3, #7
 800563c:	4911      	ldr	r1, [pc, #68]	; (8005684 <RCC_SetFlashLatency+0xf4>)
 800563e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005640:	4313      	orrs	r3, r2
 8005642:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005644:	f7fd fe14 	bl	8003270 <HAL_GetTick>
 8005648:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800564a:	e008      	b.n	800565e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800564c:	f7fd fe10 	bl	8003270 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e007      	b.n	800566e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800565e:	4b09      	ldr	r3, [pc, #36]	; (8005684 <RCC_SetFlashLatency+0xf4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005668:	429a      	cmp	r2, r3
 800566a:	d1ef      	bne.n	800564c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	374c      	adds	r7, #76	; 0x4c
 8005672:	46bd      	mov	sp, r7
 8005674:	bd90      	pop	{r4, r7, pc}
 8005676:	bf00      	nop
 8005678:	0800e248 	.word	0x0800e248
 800567c:	0800e258 	.word	0x0800e258
 8005680:	0800e264 	.word	0x0800e264
 8005684:	58004000 	.word	0x58004000

08005688 <LL_RCC_LSE_IsEnabled>:
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800568c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005694:	f003 0301 	and.w	r3, r3, #1
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <LL_RCC_LSE_IsEnabled+0x18>
 800569c:	2301      	movs	r3, #1
 800569e:	e000      	b.n	80056a2 <LL_RCC_LSE_IsEnabled+0x1a>
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <LL_RCC_LSE_IsReady>:
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80056b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d101      	bne.n	80056c4 <LL_RCC_LSE_IsReady+0x18>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <LL_RCC_LSE_IsReady+0x1a>
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <LL_RCC_MSI_EnablePLLMode>:
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80056d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056de:	f043 0304 	orr.w	r3, r3, #4
 80056e2:	6013      	str	r3, [r2, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <LL_RCC_SetRFWKPClockSource>:
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80056f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005702:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <LL_RCC_SetSMPSClockSource>:
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f023 0203 	bic.w	r2, r3, #3
 800572c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4313      	orrs	r3, r2
 8005734:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <LL_RCC_SetSMPSPrescaler>:
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800574a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005754:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4313      	orrs	r3, r2
 800575c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <LL_RCC_SetUSARTClockSource>:
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	f023 0203 	bic.w	r2, r3, #3
 800577e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <LL_RCC_SetLPUARTClockSource>:
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <LL_RCC_SetI2CClockSource>:
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80057ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80057da:	43db      	mvns	r3, r3
 80057dc:	401a      	ands	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80057e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ea:	4313      	orrs	r3, r2
 80057ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <LL_RCC_SetLPTIMClockSource>:
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005808:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	0c1b      	lsrs	r3, r3, #16
 8005810:	041b      	lsls	r3, r3, #16
 8005812:	43db      	mvns	r3, r3
 8005814:	401a      	ands	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <LL_RCC_SetSAIClockSource>:
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005840:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005844:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <LL_RCC_SetRNGClockSource>:
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005870:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <LL_RCC_SetCLK48ClockSource>:
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005898:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800589c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <LL_RCC_SetUSBClockSource>:
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff ffe3 	bl	8005888 <LL_RCC_SetCLK48ClockSource>
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <LL_RCC_SetADCClockSource>:
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80058d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <LL_RCC_SetRTCClockSource>:
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80058fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800590a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <LL_RCC_GetRTCClockSource>:
{
 8005922:	b480      	push	{r7}
 8005924:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005932:	4618      	mov	r0, r3
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <LL_RCC_ForceBackupDomainReset>:
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800594c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005954:	bf00      	nop
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <LL_RCC_ReleaseBackupDomainReset>:
{
 800595e:	b480      	push	{r7}
 8005960:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800596e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005976:	bf00      	nop
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <LL_RCC_PLLSAI1_Enable>:
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800598e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005992:	6013      	str	r3, [r2, #0]
}
 8005994:	bf00      	nop
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <LL_RCC_PLLSAI1_Disable>:
{
 800599e:	b480      	push	{r7}
 80059a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80059a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059b0:	6013      	str	r3, [r2, #0]
}
 80059b2:	bf00      	nop
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <LL_RCC_PLLSAI1_IsReady>:
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80059c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ce:	d101      	bne.n	80059d4 <LL_RCC_PLLSAI1_IsReady+0x18>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80059e8:	2300      	movs	r3, #0
 80059ea:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80059ec:	2300      	movs	r3, #0
 80059ee:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d034      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a04:	d021      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005a06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005a0a:	d81b      	bhi.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a10:	d01d      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005a12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a16:	d815      	bhi.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00b      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005a1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a20:	d110      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a30:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a32:	e00d      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 f94d 	bl	8005cd8 <RCCEx_PLLSAI1_ConfigNP>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a42:	e005      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	77fb      	strb	r3, [r7, #31]
        break;
 8005a48:	e002      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005a4a:	bf00      	nop
 8005a4c:	e000      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a50:	7ffb      	ldrb	r3, [r7, #31]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d105      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fee8 	bl	8005830 <LL_RCC_SetSAIClockSource>
 8005a60:	e001      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a62:	7ffb      	ldrb	r3, [r7, #31]
 8005a64:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d046      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005a72:	f7ff ff56 	bl	8005922 <LL_RCC_GetRTCClockSource>
 8005a76:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d03c      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a82:	f7fe fc59 	bl	8004338 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d105      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff ff30 	bl	80058f6 <LL_RCC_SetRTCClockSource>
 8005a96:	e02e      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005aa2:	f7ff ff4b 	bl	800593c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005aa6:	f7ff ff5a 	bl	800595e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005ac2:	f7ff fde1 	bl	8005688 <LL_RCC_LSE_IsEnabled>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d114      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005acc:	f7fd fbd0 	bl	8003270 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ad2:	e00b      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad4:	f7fd fbcc 	bl	8003270 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d902      	bls.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	77fb      	strb	r3, [r7, #31]
              break;
 8005aea:	e004      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005aec:	f7ff fdde 	bl	80056ac <LL_RCC_LSE_IsReady>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d1ee      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005af6:	7ffb      	ldrb	r3, [r7, #31]
 8005af8:	77bb      	strb	r3, [r7, #30]
 8005afa:	e001      	b.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afc:	7ffb      	ldrb	r3, [r7, #31]
 8005afe:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7ff fe2a 	bl	800576a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d004      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fe35 	bl	8005796 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d004      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff fe5d 	bl	80057fc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff fe52 	bl	80057fc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff fe2a 	bl	80057c2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d004      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff fe1f 	bl	80057c2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d022      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fe8d 	bl	80058b4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ba2:	d107      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bb2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bbc:	d10b      	bne.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 f8e3 	bl	8005d8e <RCCEx_PLLSAI1_ConfigNQ>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005bcc:	7ffb      	ldrb	r3, [r7, #31]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005bd2:	7ffb      	ldrb	r3, [r7, #31]
 8005bd4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d02b      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bea:	d008      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bf4:	d003      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d105      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff fe2a 	bl	800585c <LL_RCC_SetRNGClockSource>
 8005c08:	e00a      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	2000      	movs	r0, #0
 8005c16:	f7ff fe21 	bl	800585c <LL_RCC_SetRNGClockSource>
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f7ff fe34 	bl	8005888 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005c28:	d107      	bne.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c38:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d022      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff fe3d 	bl	80058ca <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c58:	d107      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c68:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c72:	d10b      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 f8e3 	bl	8005e44 <RCCEx_PLLSAI1_ConfigNR>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005c82:	7ffb      	ldrb	r3, [r7, #31]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005c88:	7ffb      	ldrb	r3, [r7, #31]
 8005c8a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d004      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff fd26 	bl	80056ee <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff fd45 	bl	8005742 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fd2c 	bl	800571a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005cc2:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005cd0:	f7ff fcfe 	bl	80056d0 <LL_RCC_MSI_EnablePLLMode>
}
 8005cd4:	bf00      	nop
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005ce4:	f7ff fe5b 	bl	800599e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ce8:	f7fd fac2 	bl	8003270 <HAL_GetTick>
 8005cec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005cee:	e009      	b.n	8005d04 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cf0:	f7fd fabe 	bl	8003270 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d902      	bls.n	8005d04 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	73fb      	strb	r3, [r7, #15]
      break;
 8005d02:	e004      	b.n	8005d0e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d04:	f7ff fe5a 	bl	80059bc <LL_RCC_PLLSAI1_IsReady>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d137      	bne.n	8005d84 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005d42:	f7ff fe1d 	bl	8005980 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d46:	f7fd fa93 	bl	8003270 <HAL_GetTick>
 8005d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d4c:	e009      	b.n	8005d62 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d4e:	f7fd fa8f 	bl	8003270 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d902      	bls.n	8005d62 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	73fb      	strb	r3, [r7, #15]
        break;
 8005d60:	e004      	b.n	8005d6c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d62:	f7ff fe2b 	bl	80059bc <LL_RCC_PLLSAI1_IsReady>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d1f0      	bne.n	8005d4e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d108      	bne.n	8005d84 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d80:	4313      	orrs	r3, r2
 8005d82:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b084      	sub	sp, #16
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005d9a:	f7ff fe00 	bl	800599e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d9e:	f7fd fa67 	bl	8003270 <HAL_GetTick>
 8005da2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005da4:	e009      	b.n	8005dba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005da6:	f7fd fa63 	bl	8003270 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d902      	bls.n	8005dba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	73fb      	strb	r3, [r7, #15]
      break;
 8005db8:	e004      	b.n	8005dc4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005dba:	f7ff fdff 	bl	80059bc <LL_RCC_PLLSAI1_IsReady>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1f0      	bne.n	8005da6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d137      	bne.n	8005e3a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	021b      	lsls	r3, r3, #8
 8005dda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dde:	4313      	orrs	r3, r2
 8005de0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005df4:	4313      	orrs	r3, r2
 8005df6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005df8:	f7ff fdc2 	bl	8005980 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dfc:	f7fd fa38 	bl	8003270 <HAL_GetTick>
 8005e00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e02:	e009      	b.n	8005e18 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e04:	f7fd fa34 	bl	8003270 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d902      	bls.n	8005e18 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	73fb      	strb	r3, [r7, #15]
        break;
 8005e16:	e004      	b.n	8005e22 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e18:	f7ff fdd0 	bl	80059bc <LL_RCC_PLLSAI1_IsReady>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d1f0      	bne.n	8005e04 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005e22:	7bfb      	ldrb	r3, [r7, #15]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d108      	bne.n	8005e3a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2c:	691a      	ldr	r2, [r3, #16]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e36:	4313      	orrs	r3, r2
 8005e38:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e50:	f7ff fda5 	bl	800599e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e54:	f7fd fa0c 	bl	8003270 <HAL_GetTick>
 8005e58:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e5a:	e009      	b.n	8005e70 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e5c:	f7fd fa08 	bl	8003270 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d902      	bls.n	8005e70 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6e:	e004      	b.n	8005e7a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e70:	f7ff fda4 	bl	80059bc <LL_RCC_PLLSAI1_IsReady>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1f0      	bne.n	8005e5c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d137      	bne.n	8005ef0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	021b      	lsls	r3, r3, #8
 8005e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e94:	4313      	orrs	r3, r2
 8005e96:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005eae:	f7ff fd67 	bl	8005980 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eb2:	f7fd f9dd 	bl	8003270 <HAL_GetTick>
 8005eb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005eb8:	e009      	b.n	8005ece <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eba:	f7fd f9d9 	bl	8003270 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d902      	bls.n	8005ece <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	73fb      	strb	r3, [r7, #15]
        break;
 8005ecc:	e004      	b.n	8005ed8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ece:	f7ff fd75 	bl	80059bc <LL_RCC_PLLSAI1_IsReady>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d1f0      	bne.n	8005eba <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d108      	bne.n	8005ef0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eec:	4313      	orrs	r3, r2
 8005eee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e09f      	b.n	800604e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7fc fc84 	bl	8002830 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005f30:	4b49      	ldr	r3, [pc, #292]	; (8006058 <HAL_RTC_Init+0x15c>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b10      	cmp	r3, #16
 8005f3a:	d07e      	beq.n	800603a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	22ca      	movs	r2, #202	; 0xca
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2253      	movs	r2, #83	; 0x53
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f8ab 	bl	80060a8 <RTC_EnterInitMode>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00a      	beq.n	8005f6e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	22ff      	movs	r2, #255	; 0xff
 8005f5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2204      	movs	r2, #4
 8005f64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
 8005f6c:	e067      	b.n	800603e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f80:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6899      	ldr	r1, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	431a      	orrs	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	68d2      	ldr	r2, [r2, #12]
 8005fa8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6919      	ldr	r1, [r3, #16]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	041a      	lsls	r2, r3, #16
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fcc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0203 	bic.w	r2, r2, #3
 8005fdc:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	d113      	bne.n	800602c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f829 	bl	800605c <HAL_RTC_WaitForSynchro>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00d      	beq.n	800602c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	22ff      	movs	r2, #255	; 0xff
 8006016:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2204      	movs	r2, #4
 800601c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e010      	b.n	800604e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	22ff      	movs	r2, #255	; 0xff
 8006032:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	73fb      	strb	r3, [r7, #15]
 8006038:	e001      	b.n	800603e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800603e:	7bfb      	ldrb	r3, [r7, #15]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d103      	bne.n	800604c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	40002800 	.word	0x40002800

0800605c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006072:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006074:	f7fd f8fc 	bl	8003270 <HAL_GetTick>
 8006078:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800607a:	e009      	b.n	8006090 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800607c:	f7fd f8f8 	bl	8003270 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800608a:	d901      	bls.n	8006090 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e007      	b.n	80060a0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0ee      	beq.n	800607c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d119      	bne.n	80060f2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f04f 32ff 	mov.w	r2, #4294967295
 80060c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80060c8:	f7fd f8d2 	bl	8003270 <HAL_GetTick>
 80060cc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80060ce:	e009      	b.n	80060e4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80060d0:	f7fd f8ce 	bl	8003270 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060de:	d901      	bls.n	80060e4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e007      	b.n	80060f4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0ee      	beq.n	80060d0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006112:	2302      	movs	r3, #2
 8006114:	e0a8      	b.n	8006268 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2202      	movs	r2, #2
 8006122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	22ca      	movs	r2, #202	; 0xca
 800612c:	625a      	str	r2, [r3, #36]	; 0x24
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2253      	movs	r2, #83	; 0x53
 8006134:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006140:	2b00      	cmp	r3, #0
 8006142:	d020      	beq.n	8006186 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006144:	f7fd f894 	bl	8003270 <HAL_GetTick>
 8006148:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800614a:	e015      	b.n	8006178 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800614c:	f7fd f890 	bl	8003270 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800615a:	d90d      	bls.n	8006178 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	22ff      	movs	r2, #255	; 0xff
 8006162:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2203      	movs	r2, #3
 8006168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e077      	b.n	8006268 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e2      	bne.n	800614c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006194:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80061a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80061a8:	f7fd f862 	bl	8003270 <HAL_GetTick>
 80061ac:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80061ae:	e015      	b.n	80061dc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80061b0:	f7fd f85e 	bl	8003270 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061be:	d90d      	bls.n	80061dc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	22ff      	movs	r2, #255	; 0xff
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2203      	movs	r2, #3
 80061cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e045      	b.n	8006268 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0304 	and.w	r3, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0e2      	beq.n	80061b0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68ba      	ldr	r2, [r7, #8]
 80061f0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0207 	bic.w	r2, r2, #7
 8006200:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6899      	ldr	r1, [r3, #8]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	430a      	orrs	r2, r1
 8006210:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006212:	4b17      	ldr	r3, [pc, #92]	; (8006270 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006218:	4a15      	ldr	r2, [pc, #84]	; (8006270 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800621a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800621e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006222:	4b13      	ldr	r3, [pc, #76]	; (8006270 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a12      	ldr	r2, [pc, #72]	; (8006270 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006228:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800622c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800623c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800624c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	22ff      	movs	r2, #255	; 0xff
 8006254:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	58000800 	.word	0x58000800

08006274 <LL_RCC_GetUSARTClockSource>:
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800627c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006280:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4013      	ands	r3, r2
}
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <LL_RCC_GetLPUARTClockSource>:
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800629c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4013      	ands	r3, r2
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e042      	b.n	800634c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7fc fd9b 	bl	8002e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2224      	movs	r2, #36	; 0x24
 80062e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0201 	bic.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fc4a 	bl	8006b90 <UART_SetConfig>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e022      	b.n	800634c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fe66 	bl	8006fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006322:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006332:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 feed 	bl	8007124 <UART_CheckIdleState>
 800634a:	4603      	mov	r3, r0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08a      	sub	sp, #40	; 0x28
 8006358:	af02      	add	r7, sp, #8
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	4613      	mov	r3, r2
 8006362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636a:	2b20      	cmp	r3, #32
 800636c:	d17b      	bne.n	8006466 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <HAL_UART_Transmit+0x26>
 8006374:	88fb      	ldrh	r3, [r7, #6]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e074      	b.n	8006468 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2221      	movs	r2, #33	; 0x21
 800638a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800638e:	f7fc ff6f 	bl	8003270 <HAL_GetTick>
 8006392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	88fa      	ldrh	r2, [r7, #6]
 8006398:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	88fa      	ldrh	r2, [r7, #6]
 80063a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ac:	d108      	bne.n	80063c0 <HAL_UART_Transmit+0x6c>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	e003      	b.n	80063c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063c8:	e030      	b.n	800642c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	9300      	str	r3, [sp, #0]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	2200      	movs	r2, #0
 80063d2:	2180      	movs	r1, #128	; 0x80
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 ff4f 	bl	8007278 <UART_WaitOnFlagUntilTimeout>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e03d      	b.n	8006468 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006400:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	3302      	adds	r3, #2
 8006406:	61bb      	str	r3, [r7, #24]
 8006408:	e007      	b.n	800641a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	781a      	ldrb	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	3301      	adds	r3, #1
 8006418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006432:	b29b      	uxth	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1c8      	bne.n	80063ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2200      	movs	r2, #0
 8006440:	2140      	movs	r1, #64	; 0x40
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 ff18 	bl	8007278 <UART_WaitOnFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2220      	movs	r2, #32
 8006452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e006      	b.n	8006468 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e000      	b.n	8006468 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006466:	2302      	movs	r3, #2
  }
}
 8006468:	4618      	mov	r0, r3
 800646a:	3720      	adds	r7, #32
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	; 0x28
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	4613      	mov	r3, r2
 800647c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006484:	2b20      	cmp	r3, #32
 8006486:	d137      	bne.n	80064f8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_UART_Receive_DMA+0x24>
 800648e:	88fb      	ldrh	r3, [r7, #6]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e030      	b.n	80064fa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a18      	ldr	r2, [pc, #96]	; (8006504 <HAL_UART_Receive_DMA+0x94>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d01f      	beq.n	80064e8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d018      	beq.n	80064e8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	e853 3f00 	ldrex	r3, [r3]
 80064c2:	613b      	str	r3, [r7, #16]
   return(result);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	623b      	str	r3, [r7, #32]
 80064d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	69f9      	ldr	r1, [r7, #28]
 80064da:	6a3a      	ldr	r2, [r7, #32]
 80064dc:	e841 2300 	strex	r3, r2, [r1]
 80064e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d1e6      	bne.n	80064b6 <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	461a      	mov	r2, r3
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 ff2a 	bl	8007348 <UART_Start_Receive_DMA>
 80064f4:	4603      	mov	r3, r0
 80064f6:	e000      	b.n	80064fa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3728      	adds	r7, #40	; 0x28
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40008000 	.word	0x40008000

08006508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b0ba      	sub	sp, #232	; 0xe8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800652e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006532:	f640 030f 	movw	r3, #2063	; 0x80f
 8006536:	4013      	ands	r3, r2
 8006538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800653c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d11b      	bne.n	800657c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	d015      	beq.n	800657c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b00      	cmp	r3, #0
 800655a:	d105      	bne.n	8006568 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800655c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d009      	beq.n	800657c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 82e3 	beq.w	8006b38 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
      }
      return;
 800657a:	e2dd      	b.n	8006b38 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800657c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8123 	beq.w	80067cc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006586:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800658a:	4b8d      	ldr	r3, [pc, #564]	; (80067c0 <HAL_UART_IRQHandler+0x2b8>)
 800658c:	4013      	ands	r3, r2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006592:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006596:	4b8b      	ldr	r3, [pc, #556]	; (80067c4 <HAL_UART_IRQHandler+0x2bc>)
 8006598:	4013      	ands	r3, r2
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8116 	beq.w	80067cc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d011      	beq.n	80065d0 <HAL_UART_IRQHandler+0xc8>
 80065ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2201      	movs	r2, #1
 80065be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c6:	f043 0201 	orr.w	r2, r3, #1
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d011      	beq.n	8006600 <HAL_UART_IRQHandler+0xf8>
 80065dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2202      	movs	r2, #2
 80065ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f6:	f043 0204 	orr.w	r2, r3, #4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d011      	beq.n	8006630 <HAL_UART_IRQHandler+0x128>
 800660c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2204      	movs	r2, #4
 800661e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006626:	f043 0202 	orr.w	r2, r3, #2
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b00      	cmp	r3, #0
 800663a:	d017      	beq.n	800666c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800663c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d105      	bne.n	8006654 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006648:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800664c:	4b5c      	ldr	r3, [pc, #368]	; (80067c0 <HAL_UART_IRQHandler+0x2b8>)
 800664e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00b      	beq.n	800666c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2208      	movs	r2, #8
 800665a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006662:	f043 0208 	orr.w	r2, r3, #8
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800666c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006674:	2b00      	cmp	r3, #0
 8006676:	d012      	beq.n	800669e <HAL_UART_IRQHandler+0x196>
 8006678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800667c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00c      	beq.n	800669e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800668c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006694:	f043 0220 	orr.w	r2, r3, #32
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8249 	beq.w	8006b3c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d013      	beq.n	80066de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	d005      	beq.n	8006702 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d054      	beq.n	80067ac <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 ff07 	bl	8007516 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	d146      	bne.n	80067a4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3308      	adds	r3, #8
 800671c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800672c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800674e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800675a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1d9      	bne.n	8006716 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006768:	2b00      	cmp	r3, #0
 800676a:	d017      	beq.n	800679c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006772:	4a15      	ldr	r2, [pc, #84]	; (80067c8 <HAL_UART_IRQHandler+0x2c0>)
 8006774:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800677c:	4618      	mov	r0, r3
 800677e:	f7fd f8b7 	bl	80038f0 <HAL_DMA_Abort_IT>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d019      	beq.n	80067bc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006796:	4610      	mov	r0, r2
 8006798:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800679a:	e00f      	b.n	80067bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f9e1 	bl	8006b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a2:	e00b      	b.n	80067bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f9dd 	bl	8006b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067aa:	e007      	b.n	80067bc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f9d9 	bl	8006b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80067ba:	e1bf      	b.n	8006b3c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067bc:	bf00      	nop
    return;
 80067be:	e1bd      	b.n	8006b3c <HAL_UART_IRQHandler+0x634>
 80067c0:	10000001 	.word	0x10000001
 80067c4:	04000120 	.word	0x04000120
 80067c8:	080077cd 	.word	0x080077cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	f040 8153 	bne.w	8006a7c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067da:	f003 0310 	and.w	r3, r3, #16
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f000 814c 	beq.w	8006a7c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 8145 	beq.w	8006a7c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2210      	movs	r2, #16
 80067f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b40      	cmp	r3, #64	; 0x40
 8006806:	f040 80bb 	bne.w	8006980 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006818:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 818f 	beq.w	8006b40 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006828:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800682c:	429a      	cmp	r2, r3
 800682e:	f080 8187 	bcs.w	8006b40 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006838:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0320 	and.w	r3, r3, #32
 800684a:	2b00      	cmp	r3, #0
 800684c:	f040 8087 	bne.w	800695e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800686c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800687a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800687e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006886:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1da      	bne.n	8006850 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3308      	adds	r3, #8
 80068ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e1      	bne.n	800689a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3308      	adds	r3, #8
 80068dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3308      	adds	r3, #8
 80068f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e3      	bne.n	80068d6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800692a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692c:	f023 0310 	bic.w	r3, r3, #16
 8006930:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800693e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006940:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006942:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800694c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e4      	bne.n	800691c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006958:	4618      	mov	r0, r3
 800695a:	f7fc ff6a 	bl	8003832 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2202      	movs	r2, #2
 8006962:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006970:	b29b      	uxth	r3, r3
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	b29b      	uxth	r3, r3
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f8fd 	bl	8006b78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800697e:	e0df      	b.n	8006b40 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800698c:	b29b      	uxth	r3, r3
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 80d1 	beq.w	8006b44 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80069a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 80cc 	beq.w	8006b44 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069ce:	647b      	str	r3, [r7, #68]	; 0x44
 80069d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e4      	bne.n	80069ac <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3308      	adds	r3, #8
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	623b      	str	r3, [r7, #32]
   return(result);
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069f8:	f023 0301 	bic.w	r3, r3, #1
 80069fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3308      	adds	r3, #8
 8006a06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a0a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e1      	bne.n	80069e2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0310 	bic.w	r3, r3, #16
 8006a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	69b9      	ldr	r1, [r7, #24]
 8006a5a:	69fa      	ldr	r2, [r7, #28]
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	617b      	str	r3, [r7, #20]
   return(result);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e4      	bne.n	8006a32 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a72:	4619      	mov	r1, r3
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f87f 	bl	8006b78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a7a:	e063      	b.n	8006b44 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00e      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x59e>
 8006a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 fed5 	bl	800784e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aa4:	e051      	b.n	8006b4a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d014      	beq.n	8006adc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d105      	bne.n	8006aca <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d008      	beq.n	8006adc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d03a      	beq.n	8006b48 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
    }
    return;
 8006ada:	e035      	b.n	8006b48 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d009      	beq.n	8006afc <HAL_UART_IRQHandler+0x5f4>
 8006ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fe7f 	bl	80077f8 <UART_EndTransmit_IT>
    return;
 8006afa:	e026      	b.n	8006b4a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d009      	beq.n	8006b1c <HAL_UART_IRQHandler+0x614>
 8006b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 feae 	bl	8007876 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b1a:	e016      	b.n	8006b4a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d010      	beq.n	8006b4a <HAL_UART_IRQHandler+0x642>
 8006b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	da0c      	bge.n	8006b4a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fe96 	bl	8007862 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b36:	e008      	b.n	8006b4a <HAL_UART_IRQHandler+0x642>
      return;
 8006b38:	bf00      	nop
 8006b3a:	e006      	b.n	8006b4a <HAL_UART_IRQHandler+0x642>
    return;
 8006b3c:	bf00      	nop
 8006b3e:	e004      	b.n	8006b4a <HAL_UART_IRQHandler+0x642>
      return;
 8006b40:	bf00      	nop
 8006b42:	e002      	b.n	8006b4a <HAL_UART_IRQHandler+0x642>
      return;
 8006b44:	bf00      	nop
 8006b46:	e000      	b.n	8006b4a <HAL_UART_IRQHandler+0x642>
    return;
 8006b48:	bf00      	nop
  }
}
 8006b4a:	37e8      	adds	r7, #232	; 0xe8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	460b      	mov	r3, r1
 8006b82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b94:	b08c      	sub	sp, #48	; 0x30
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4baf      	ldr	r3, [pc, #700]	; (8006e7c <UART_SetConfig+0x2ec>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	6812      	ldr	r2, [r2, #0]
 8006bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4aa4      	ldr	r2, [pc, #656]	; (8006e80 <UART_SetConfig+0x2f0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d004      	beq.n	8006bfc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	6812      	ldr	r2, [r2, #0]
 8006c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c10:	430b      	orrs	r3, r1
 8006c12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	f023 010f 	bic.w	r1, r3, #15
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	430a      	orrs	r2, r1
 8006c28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a95      	ldr	r2, [pc, #596]	; (8006e84 <UART_SetConfig+0x2f4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d125      	bne.n	8006c80 <UART_SetConfig+0xf0>
 8006c34:	2003      	movs	r0, #3
 8006c36:	f7ff fb1d 	bl	8006274 <LL_RCC_GetUSARTClockSource>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b03      	cmp	r3, #3
 8006c3e:	d81b      	bhi.n	8006c78 <UART_SetConfig+0xe8>
 8006c40:	a201      	add	r2, pc, #4	; (adr r2, 8006c48 <UART_SetConfig+0xb8>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c59 	.word	0x08006c59
 8006c4c:	08006c69 	.word	0x08006c69
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c71 	.word	0x08006c71
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5e:	e042      	b.n	8006ce6 <UART_SetConfig+0x156>
 8006c60:	2302      	movs	r3, #2
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c66:	e03e      	b.n	8006ce6 <UART_SetConfig+0x156>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6e:	e03a      	b.n	8006ce6 <UART_SetConfig+0x156>
 8006c70:	2308      	movs	r3, #8
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c76:	e036      	b.n	8006ce6 <UART_SetConfig+0x156>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7e:	e032      	b.n	8006ce6 <UART_SetConfig+0x156>
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a7e      	ldr	r2, [pc, #504]	; (8006e80 <UART_SetConfig+0x2f0>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d12a      	bne.n	8006ce0 <UART_SetConfig+0x150>
 8006c8a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006c8e:	f7ff fb01 	bl	8006294 <LL_RCC_GetLPUARTClockSource>
 8006c92:	4603      	mov	r3, r0
 8006c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c98:	d01a      	beq.n	8006cd0 <UART_SetConfig+0x140>
 8006c9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c9e:	d81b      	bhi.n	8006cd8 <UART_SetConfig+0x148>
 8006ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca4:	d00c      	beq.n	8006cc0 <UART_SetConfig+0x130>
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006caa:	d815      	bhi.n	8006cd8 <UART_SetConfig+0x148>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <UART_SetConfig+0x128>
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb4:	d008      	beq.n	8006cc8 <UART_SetConfig+0x138>
 8006cb6:	e00f      	b.n	8006cd8 <UART_SetConfig+0x148>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cbe:	e012      	b.n	8006ce6 <UART_SetConfig+0x156>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc6:	e00e      	b.n	8006ce6 <UART_SetConfig+0x156>
 8006cc8:	2304      	movs	r3, #4
 8006cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cce:	e00a      	b.n	8006ce6 <UART_SetConfig+0x156>
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd6:	e006      	b.n	8006ce6 <UART_SetConfig+0x156>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cde:	e002      	b.n	8006ce6 <UART_SetConfig+0x156>
 8006ce0:	2310      	movs	r3, #16
 8006ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a65      	ldr	r2, [pc, #404]	; (8006e80 <UART_SetConfig+0x2f0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	f040 8097 	bne.w	8006e20 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d823      	bhi.n	8006d42 <UART_SetConfig+0x1b2>
 8006cfa:	a201      	add	r2, pc, #4	; (adr r2, 8006d00 <UART_SetConfig+0x170>)
 8006cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d00:	08006d25 	.word	0x08006d25
 8006d04:	08006d43 	.word	0x08006d43
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d43 	.word	0x08006d43
 8006d10:	08006d33 	.word	0x08006d33
 8006d14:	08006d43 	.word	0x08006d43
 8006d18:	08006d43 	.word	0x08006d43
 8006d1c:	08006d43 	.word	0x08006d43
 8006d20:	08006d3b 	.word	0x08006d3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d24:	f7fe fbd0 	bl	80054c8 <HAL_RCC_GetPCLK1Freq>
 8006d28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d2a:	e010      	b.n	8006d4e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d2c:	4b56      	ldr	r3, [pc, #344]	; (8006e88 <UART_SetConfig+0x2f8>)
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d30:	e00d      	b.n	8006d4e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d32:	f7fe fb49 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8006d36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d38:	e009      	b.n	8006d4e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d40:	e005      	b.n	8006d4e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 812b 	beq.w	8006fac <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	4a4c      	ldr	r2, [pc, #304]	; (8006e8c <UART_SetConfig+0x2fc>)
 8006d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d60:	461a      	mov	r2, r3
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	4413      	add	r3, r2
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d305      	bcc.n	8006d86 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d903      	bls.n	8006d8e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d8c:	e10e      	b.n	8006fac <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	2200      	movs	r2, #0
 8006d92:	60bb      	str	r3, [r7, #8]
 8006d94:	60fa      	str	r2, [r7, #12]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	4a3c      	ldr	r2, [pc, #240]	; (8006e8c <UART_SetConfig+0x2fc>)
 8006d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2200      	movs	r2, #0
 8006da4:	603b      	str	r3, [r7, #0]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006db0:	f7f9 fe0c 	bl	80009cc <__aeabi_uldivmod>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4610      	mov	r0, r2
 8006dba:	4619      	mov	r1, r3
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	020b      	lsls	r3, r1, #8
 8006dc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dca:	0202      	lsls	r2, r0, #8
 8006dcc:	6979      	ldr	r1, [r7, #20]
 8006dce:	6849      	ldr	r1, [r1, #4]
 8006dd0:	0849      	lsrs	r1, r1, #1
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	eb12 0804 	adds.w	r8, r2, r4
 8006ddc:	eb43 0905 	adc.w	r9, r3, r5
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	469a      	mov	sl, r3
 8006de8:	4693      	mov	fp, r2
 8006dea:	4652      	mov	r2, sl
 8006dec:	465b      	mov	r3, fp
 8006dee:	4640      	mov	r0, r8
 8006df0:	4649      	mov	r1, r9
 8006df2:	f7f9 fdeb 	bl	80009cc <__aeabi_uldivmod>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e04:	d308      	bcc.n	8006e18 <UART_SetConfig+0x288>
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e0c:	d204      	bcs.n	8006e18 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6a3a      	ldr	r2, [r7, #32]
 8006e14:	60da      	str	r2, [r3, #12]
 8006e16:	e0c9      	b.n	8006fac <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e1e:	e0c5      	b.n	8006fac <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e28:	d16d      	bne.n	8006f06 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006e2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	2b07      	cmp	r3, #7
 8006e32:	d82d      	bhi.n	8006e90 <UART_SetConfig+0x300>
 8006e34:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <UART_SetConfig+0x2ac>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e5d 	.word	0x08006e5d
 8006e40:	08006e65 	.word	0x08006e65
 8006e44:	08006e91 	.word	0x08006e91
 8006e48:	08006e6b 	.word	0x08006e6b
 8006e4c:	08006e91 	.word	0x08006e91
 8006e50:	08006e91 	.word	0x08006e91
 8006e54:	08006e91 	.word	0x08006e91
 8006e58:	08006e73 	.word	0x08006e73
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e5c:	f7fe fb4a 	bl	80054f4 <HAL_RCC_GetPCLK2Freq>
 8006e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e62:	e01b      	b.n	8006e9c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e64:	4b08      	ldr	r3, [pc, #32]	; (8006e88 <UART_SetConfig+0x2f8>)
 8006e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e68:	e018      	b.n	8006e9c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6a:	f7fe faad 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8006e6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e70:	e014      	b.n	8006e9c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e78:	e010      	b.n	8006e9c <UART_SetConfig+0x30c>
 8006e7a:	bf00      	nop
 8006e7c:	cfff69f3 	.word	0xcfff69f3
 8006e80:	40008000 	.word	0x40008000
 8006e84:	40013800 	.word	0x40013800
 8006e88:	00f42400 	.word	0x00f42400
 8006e8c:	0800fbf0 	.word	0x0800fbf0
      default:
        pclk = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 8084 	beq.w	8006fac <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea8:	4a4b      	ldr	r2, [pc, #300]	; (8006fd8 <UART_SetConfig+0x448>)
 8006eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eb6:	005a      	lsls	r2, r3, #1
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	441a      	add	r2, r3
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	2b0f      	cmp	r3, #15
 8006ece:	d916      	bls.n	8006efe <UART_SetConfig+0x36e>
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed6:	d212      	bcs.n	8006efe <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f023 030f 	bic.w	r3, r3, #15
 8006ee0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	8bfb      	ldrh	r3, [r7, #30]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	8bfa      	ldrh	r2, [r7, #30]
 8006efa:	60da      	str	r2, [r3, #12]
 8006efc:	e056      	b.n	8006fac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f04:	e052      	b.n	8006fac <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	2b07      	cmp	r3, #7
 8006f0e:	d822      	bhi.n	8006f56 <UART_SetConfig+0x3c6>
 8006f10:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <UART_SetConfig+0x388>)
 8006f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f16:	bf00      	nop
 8006f18:	08006f39 	.word	0x08006f39
 8006f1c:	08006f41 	.word	0x08006f41
 8006f20:	08006f57 	.word	0x08006f57
 8006f24:	08006f47 	.word	0x08006f47
 8006f28:	08006f57 	.word	0x08006f57
 8006f2c:	08006f57 	.word	0x08006f57
 8006f30:	08006f57 	.word	0x08006f57
 8006f34:	08006f4f 	.word	0x08006f4f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f38:	f7fe fadc 	bl	80054f4 <HAL_RCC_GetPCLK2Freq>
 8006f3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f3e:	e010      	b.n	8006f62 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f40:	4b26      	ldr	r3, [pc, #152]	; (8006fdc <UART_SetConfig+0x44c>)
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f44:	e00d      	b.n	8006f62 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f46:	f7fe fa3f 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8006f4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f4c:	e009      	b.n	8006f62 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f54:	e005      	b.n	8006f62 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f60:	bf00      	nop
    }

    if (pclk != 0U)
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d021      	beq.n	8006fac <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	4a1a      	ldr	r2, [pc, #104]	; (8006fd8 <UART_SetConfig+0x448>)
 8006f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f72:	461a      	mov	r2, r3
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	441a      	add	r2, r3
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	2b0f      	cmp	r3, #15
 8006f90:	d909      	bls.n	8006fa6 <UART_SetConfig+0x416>
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f98:	d205      	bcs.n	8006fa6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	60da      	str	r2, [r3, #12]
 8006fa4:	e002      	b.n	8006fac <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006fc8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3730      	adds	r7, #48	; 0x30
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fd6:	bf00      	nop
 8006fd8:	0800fbf0 	.word	0x0800fbf0
 8006fdc:	00f42400 	.word	0x00f42400

08006fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01a      	beq.n	80070f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070de:	d10a      	bne.n	80070f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	605a      	str	r2, [r3, #4]
  }
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b098      	sub	sp, #96	; 0x60
 8007128:	af02      	add	r7, sp, #8
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007134:	f7fc f89c 	bl	8003270 <HAL_GetTick>
 8007138:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0308 	and.w	r3, r3, #8
 8007144:	2b08      	cmp	r3, #8
 8007146:	d12f      	bne.n	80071a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007150:	2200      	movs	r2, #0
 8007152:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f88e 	bl	8007278 <UART_WaitOnFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d022      	beq.n	80071a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	e853 3f00 	ldrex	r3, [r3]
 800716e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007176:	653b      	str	r3, [r7, #80]	; 0x50
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	461a      	mov	r2, r3
 800717e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007180:	647b      	str	r3, [r7, #68]	; 0x44
 8007182:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800718e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e6      	bne.n	8007162 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2220      	movs	r2, #32
 8007198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e063      	b.n	8007270 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0304 	and.w	r3, r3, #4
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d149      	bne.n	800724a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071be:	2200      	movs	r2, #0
 80071c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f857 	bl	8007278 <UART_WaitOnFlagUntilTimeout>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d03c      	beq.n	800724a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	623b      	str	r3, [r7, #32]
   return(result);
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071ee:	633b      	str	r3, [r7, #48]	; 0x30
 80071f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e6      	bne.n	80071d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	60fb      	str	r3, [r7, #12]
   return(result);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f023 0301 	bic.w	r3, r3, #1
 8007218:	64bb      	str	r3, [r7, #72]	; 0x48
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007222:	61fa      	str	r2, [r7, #28]
 8007224:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007226:	69b9      	ldr	r1, [r7, #24]
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	617b      	str	r3, [r7, #20]
   return(result);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e5      	bne.n	8007202 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2220      	movs	r2, #32
 800723a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e012      	b.n	8007270 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2220      	movs	r2, #32
 800724e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3758      	adds	r7, #88	; 0x58
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	4613      	mov	r3, r2
 8007286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007288:	e049      	b.n	800731e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007290:	d045      	beq.n	800731e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007292:	f7fb ffed 	bl	8003270 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d302      	bcc.n	80072a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e048      	b.n	800733e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 0304 	and.w	r3, r3, #4
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d031      	beq.n	800731e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d110      	bne.n	80072ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2208      	movs	r2, #8
 80072ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f920 	bl	8007516 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2208      	movs	r2, #8
 80072da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e029      	b.n	800733e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f8:	d111      	bne.n	800731e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007302:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 f906 	bl	8007516 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2220      	movs	r2, #32
 800730e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e00f      	b.n	800733e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4013      	ands	r3, r2
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	429a      	cmp	r2, r3
 800732c:	bf0c      	ite	eq
 800732e:	2301      	moveq	r3, #1
 8007330:	2300      	movne	r3, #0
 8007332:	b2db      	uxtb	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	429a      	cmp	r2, r3
 800733a:	d0a6      	beq.n	800728a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b096      	sub	sp, #88	; 0x58
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	4613      	mov	r3, r2
 8007354:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	88fa      	ldrh	r2, [r7, #6]
 8007360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2222      	movs	r2, #34	; 0x22
 8007370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800737a:	2b00      	cmp	r3, #0
 800737c:	d02d      	beq.n	80073da <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007384:	4a40      	ldr	r2, [pc, #256]	; (8007488 <UART_Start_Receive_DMA+0x140>)
 8007386:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800738e:	4a3f      	ldr	r2, [pc, #252]	; (800748c <UART_Start_Receive_DMA+0x144>)
 8007390:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007398:	4a3d      	ldr	r2, [pc, #244]	; (8007490 <UART_Start_Receive_DMA+0x148>)
 800739a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073a2:	2200      	movs	r2, #0
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3324      	adds	r3, #36	; 0x24
 80073b2:	4619      	mov	r1, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b8:	461a      	mov	r2, r3
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	f7fc f9be 	bl	800373c <HAL_DMA_Start_IT>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d009      	beq.n	80073da <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2210      	movs	r2, #16
 80073ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e051      	b.n	800747e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d018      	beq.n	8007414 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ea:	e853 3f00 	ldrex	r3, [r3]
 80073ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f6:	657b      	str	r3, [r7, #84]	; 0x54
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	461a      	mov	r2, r3
 80073fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007400:	64bb      	str	r3, [r7, #72]	; 0x48
 8007402:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007404:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007406:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007408:	e841 2300 	strex	r3, r2, [r1]
 800740c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800740e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d1e6      	bne.n	80073e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3308      	adds	r3, #8
 800741a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	f043 0301 	orr.w	r3, r3, #1
 800742a:	653b      	str	r3, [r7, #80]	; 0x50
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3308      	adds	r3, #8
 8007432:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007434:	637a      	str	r2, [r7, #52]	; 0x34
 8007436:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800743a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e5      	bne.n	8007414 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3308      	adds	r3, #8
 800744e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	613b      	str	r3, [r7, #16]
   return(result);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800745e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007468:	623a      	str	r2, [r7, #32]
 800746a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	69f9      	ldr	r1, [r7, #28]
 800746e:	6a3a      	ldr	r2, [r7, #32]
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	61bb      	str	r3, [r7, #24]
   return(result);
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e5      	bne.n	8007448 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3758      	adds	r7, #88	; 0x58
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	080075e3 	.word	0x080075e3
 800748c:	0800770f 	.word	0x0800770f
 8007490:	0800774d 	.word	0x0800774d

08007494 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007494:	b480      	push	{r7}
 8007496:	b08f      	sub	sp, #60	; 0x3c
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074b0:	637b      	str	r3, [r7, #52]	; 0x34
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	461a      	mov	r2, r3
 80074b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074bc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c2:	e841 2300 	strex	r3, r2, [r1]
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1e6      	bne.n	800749c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3308      	adds	r3, #8
 80074d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80074e4:	633b      	str	r3, [r7, #48]	; 0x30
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ee:	61ba      	str	r2, [r7, #24]
 80074f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	613b      	str	r3, [r7, #16]
   return(result);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e5      	bne.n	80074ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800750a:	bf00      	nop
 800750c:	373c      	adds	r7, #60	; 0x3c
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007516:	b480      	push	{r7}
 8007518:	b095      	sub	sp, #84	; 0x54
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753c:	643b      	str	r3, [r7, #64]	; 0x40
 800753e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800754a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e6      	bne.n	800751e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	3308      	adds	r3, #8
 8007556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	e853 3f00 	ldrex	r3, [r3]
 800755e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007566:	f023 0301 	bic.w	r3, r3, #1
 800756a:	64bb      	str	r3, [r7, #72]	; 0x48
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3308      	adds	r3, #8
 8007572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007574:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800757a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800757c:	e841 2300 	strex	r3, r2, [r1]
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1e3      	bne.n	8007550 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800758c:	2b01      	cmp	r3, #1
 800758e:	d118      	bne.n	80075c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	60bb      	str	r3, [r7, #8]
   return(result);
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f023 0310 	bic.w	r3, r3, #16
 80075a4:	647b      	str	r3, [r7, #68]	; 0x44
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ae:	61bb      	str	r3, [r7, #24]
 80075b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b2:	6979      	ldr	r1, [r7, #20]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	613b      	str	r3, [r7, #16]
   return(result);
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e6      	bne.n	8007590 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80075d6:	bf00      	nop
 80075d8:	3754      	adds	r7, #84	; 0x54
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b09c      	sub	sp, #112	; 0x70
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d171      	bne.n	80076e2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80075fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007600:	2200      	movs	r2, #0
 8007602:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800761a:	66bb      	str	r3, [r7, #104]	; 0x68
 800761c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	461a      	mov	r2, r3
 8007622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007624:	65bb      	str	r3, [r7, #88]	; 0x58
 8007626:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800762a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800762c:	e841 2300 	strex	r3, r2, [r1]
 8007630:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1e6      	bne.n	8007606 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3308      	adds	r3, #8
 800763e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800764a:	f023 0301 	bic.w	r3, r3, #1
 800764e:	667b      	str	r3, [r7, #100]	; 0x64
 8007650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3308      	adds	r3, #8
 8007656:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007658:	647a      	str	r2, [r7, #68]	; 0x44
 800765a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800765e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e5      	bne.n	8007638 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800766c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	623b      	str	r3, [r7, #32]
   return(result);
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007682:	663b      	str	r3, [r7, #96]	; 0x60
 8007684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800768c:	633a      	str	r2, [r7, #48]	; 0x30
 800768e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e5      	bne.n	800766c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a2:	2220      	movs	r2, #32
 80076a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d118      	bne.n	80076e2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f023 0310 	bic.w	r3, r3, #16
 80076c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	69b9      	ldr	r1, [r7, #24]
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	617b      	str	r3, [r7, #20]
   return(result);
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e6      	bne.n	80076b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e4:	2200      	movs	r2, #0
 80076e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d107      	bne.n	8007700 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076f6:	4619      	mov	r1, r3
 80076f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80076fa:	f7ff fa3d 	bl	8006b78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076fe:	e002      	b.n	8007706 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007700:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007702:	f7fa fe7b 	bl	80023fc <HAL_UART_RxCpltCallback>
}
 8007706:	bf00      	nop
 8007708:	3770      	adds	r7, #112	; 0x70
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2201      	movs	r2, #1
 8007720:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007726:	2b01      	cmp	r3, #1
 8007728:	d109      	bne.n	800773e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007730:	085b      	lsrs	r3, r3, #1
 8007732:	b29b      	uxth	r3, r3
 8007734:	4619      	mov	r1, r3
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7ff fa1e 	bl	8006b78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800773c:	e002      	b.n	8007744 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800773e:	68f8      	ldr	r0, [r7, #12]
 8007740:	f7ff fa06 	bl	8006b50 <HAL_UART_RxHalfCpltCallback>
}
 8007744:	bf00      	nop
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007758:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007760:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007768:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007774:	2b80      	cmp	r3, #128	; 0x80
 8007776:	d109      	bne.n	800778c <UART_DMAError+0x40>
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b21      	cmp	r3, #33	; 0x21
 800777c:	d106      	bne.n	800778c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2200      	movs	r2, #0
 8007782:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007786:	6978      	ldr	r0, [r7, #20]
 8007788:	f7ff fe84 	bl	8007494 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007796:	2b40      	cmp	r3, #64	; 0x40
 8007798:	d109      	bne.n	80077ae <UART_DMAError+0x62>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b22      	cmp	r3, #34	; 0x22
 800779e:	d106      	bne.n	80077ae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80077a8:	6978      	ldr	r0, [r7, #20]
 80077aa:	f7ff feb4 	bl	8007516 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b4:	f043 0210 	orr.w	r2, r3, #16
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077be:	6978      	ldr	r0, [r7, #20]
 80077c0:	f7ff f9d0 	bl	8006b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077c4:	bf00      	nop
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7ff f9ba 	bl	8006b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077f0:	bf00      	nop
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	60bb      	str	r3, [r7, #8]
   return(result);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007814:	61fb      	str	r3, [r7, #28]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	69fb      	ldr	r3, [r7, #28]
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6979      	ldr	r1, [r7, #20]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	613b      	str	r3, [r7, #16]
   return(result);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e6      	bne.n	8007800 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fa fdf9 	bl	8002438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007846:	bf00      	nop
 8007848:	3720      	adds	r7, #32
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800788a:	b480      	push	{r7}
 800788c:	b085      	sub	sp, #20
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007898:	2b01      	cmp	r3, #1
 800789a:	d101      	bne.n	80078a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800789c:	2302      	movs	r3, #2
 800789e:	e027      	b.n	80078f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2224      	movs	r2, #36	; 0x24
 80078ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0201 	bic.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80078ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007910:	2302      	movs	r3, #2
 8007912:	e02d      	b.n	8007970 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2224      	movs	r2, #36	; 0x24
 8007920:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0201 	bic.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f84f 	bl	80079f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800798c:	2302      	movs	r3, #2
 800798e:	e02d      	b.n	80079ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2224      	movs	r2, #36	; 0x24
 800799c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 0201 	bic.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f811 	bl	80079f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2220      	movs	r2, #32
 80079de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d108      	bne.n	8007a16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a14:	e031      	b.n	8007a7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a16:	2308      	movs	r3, #8
 8007a18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a1a:	2308      	movs	r3, #8
 8007a1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	0e5b      	lsrs	r3, r3, #25
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	f003 0307 	and.w	r3, r3, #7
 8007a2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	0f5b      	lsrs	r3, r3, #29
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	7b3a      	ldrb	r2, [r7, #12]
 8007a42:	4911      	ldr	r1, [pc, #68]	; (8007a88 <UARTEx_SetNbDataToProcess+0x94>)
 8007a44:	5c8a      	ldrb	r2, [r1, r2]
 8007a46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a4a:	7b3a      	ldrb	r2, [r7, #12]
 8007a4c:	490f      	ldr	r1, [pc, #60]	; (8007a8c <UARTEx_SetNbDataToProcess+0x98>)
 8007a4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	7b7a      	ldrb	r2, [r7, #13]
 8007a60:	4909      	ldr	r1, [pc, #36]	; (8007a88 <UARTEx_SetNbDataToProcess+0x94>)
 8007a62:	5c8a      	ldrb	r2, [r1, r2]
 8007a64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a68:	7b7a      	ldrb	r2, [r7, #13]
 8007a6a:	4908      	ldr	r1, [pc, #32]	; (8007a8c <UARTEx_SetNbDataToProcess+0x98>)
 8007a6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a7a:	bf00      	nop
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	0800fc08 	.word	0x0800fc08
 8007a8c:	0800fc10 	.word	0x0800fc10

08007a90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a98:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007a9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	43db      	mvns	r3, r3
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	4013      	ands	r3, r2
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	f107 0014 	add.w	r0, r7, #20
 8007ad4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	b004      	add	sp, #16
 8007b06:	4770      	bx	lr

08007b08 <init_done>:
#include "stdio.h"

void init_done();

void init_done()
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++)
 8007b0e:	2300      	movs	r3, #0
 8007b10:	607b      	str	r3, [r7, #4]
 8007b12:	e017      	b.n	8007b44 <init_done+0x3c>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8007b14:	2120      	movs	r1, #32
 8007b16:	4816      	ldr	r0, [pc, #88]	; (8007b70 <init_done+0x68>)
 8007b18:	f7fc fa22 	bl	8003f60 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8007b1c:	20c8      	movs	r0, #200	; 0xc8
 8007b1e:	f7f9 fd3f 	bl	80015a0 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8007b22:	2101      	movs	r1, #1
 8007b24:	4812      	ldr	r0, [pc, #72]	; (8007b70 <init_done+0x68>)
 8007b26:	f7fc fa1b 	bl	8003f60 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8007b2a:	20c8      	movs	r0, #200	; 0xc8
 8007b2c:	f7f9 fd38 	bl	80015a0 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007b30:	2102      	movs	r1, #2
 8007b32:	480f      	ldr	r0, [pc, #60]	; (8007b70 <init_done+0x68>)
 8007b34:	f7fc fa14 	bl	8003f60 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8007b38:	20c8      	movs	r0, #200	; 0xc8
 8007b3a:	f7f9 fd31 	bl	80015a0 <HAL_Delay>
	for(int i=0; i<3; i++)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3301      	adds	r3, #1
 8007b42:	607b      	str	r3, [r7, #4]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	dde4      	ble.n	8007b14 <init_done+0xc>
	}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2120      	movs	r1, #32
 8007b4e:	4808      	ldr	r0, [pc, #32]	; (8007b70 <init_done+0x68>)
 8007b50:	f7fc f9ee 	bl	8003f30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8007b54:	2200      	movs	r2, #0
 8007b56:	2101      	movs	r1, #1
 8007b58:	4805      	ldr	r0, [pc, #20]	; (8007b70 <init_done+0x68>)
 8007b5a:	f7fc f9e9 	bl	8003f30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8007b5e:	2200      	movs	r2, #0
 8007b60:	2102      	movs	r1, #2
 8007b62:	4803      	ldr	r0, [pc, #12]	; (8007b70 <init_done+0x68>)
 8007b64:	f7fc f9e4 	bl	8003f30 <HAL_GPIO_WritePin>
}
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	48000400 	.word	0x48000400

08007b74 <wifi_init>:

void wifi_init(){
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
	if (esp8266_SetupIP() != _SUCCEED) {
 8007b78:	f000 f9f8 	bl	8007f6c <esp8266_SetupIP>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d006      	beq.n	8007b90 <wifi_init+0x1c>
	  printf("esp8266_SetupIP failed - RESTART and configure WIFI source\n");
 8007b82:	4808      	ldr	r0, [pc, #32]	; (8007ba4 <wifi_init+0x30>)
 8007b84:	f005 f886 	bl	800cc94 <puts>
	  {
		  printf("esp8266_SetupConnect_BrokerMQTT failed - RESTART and configure MQTT\n");
	  }
	  init_done();
  }
}
 8007b88:	e009      	b.n	8007b9e <wifi_init+0x2a>
		  printf("esp8266_SetupConnect_BrokerMQTT failed - RESTART and configure MQTT\n");
 8007b8a:	4807      	ldr	r0, [pc, #28]	; (8007ba8 <wifi_init+0x34>)
 8007b8c:	f005 f882 	bl	800cc94 <puts>
	  while(esp8266_SetupConnect_BrokerMQTT() != _SUCCEED_MQTT)
 8007b90:	f000 fcae 	bl	80084f0 <esp8266_SetupConnect_BrokerMQTT>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d1f7      	bne.n	8007b8a <wifi_init+0x16>
	  init_done();
 8007b9a:	f7ff ffb5 	bl	8007b08 <init_done>
}
 8007b9e:	bf00      	nop
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	0800e274 	.word	0x0800e274
 8007ba8:	0800e2b0 	.word	0x0800e2b0

08007bac <uart_esp32_transmit>:
uint8_t UART_ESP32_TxBUF[UART_ESP32_MAX_SENDLEN];
uint8_t UART_ESP32_RxBUF[UART_ESP32_MAX_RECVLEN];
volatile uint8_t UART_ESP32_RxLen = 0;
volatile uint8_t UART_ESP32_RecvEndFlag = 0;

void uart_esp32_transmit(char *fmt, ...) {
 8007bac:	b40f      	push	{r0, r1, r2, r3}
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 8007bb4:	f107 0314 	add.w	r3, r7, #20
 8007bb8:	603b      	str	r3, [r7, #0]
	vsprintf((char*) UART_ESP32_TxBUF, fmt, ap);
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	6939      	ldr	r1, [r7, #16]
 8007bbe:	4822      	ldr	r0, [pc, #136]	; (8007c48 <uart_esp32_transmit+0x9c>)
 8007bc0:	f005 f924 	bl	800ce0c <vsiprintf>
	va_end(ap);

	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	80fb      	strh	r3, [r7, #6]
 8007bc8:	e019      	b.n	8007bfe <uart_esp32_transmit+0x52>
		j = i + 1;
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	80bb      	strh	r3, [r7, #4]
		if (UART_ESP32_TxBUF[i] == '\00') {
 8007bd0:	88fb      	ldrh	r3, [r7, #6]
 8007bd2:	4a1d      	ldr	r2, [pc, #116]	; (8007c48 <uart_esp32_transmit+0x9c>)
 8007bd4:	5cd3      	ldrb	r3, [r2, r3]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10e      	bne.n	8007bf8 <uart_esp32_transmit+0x4c>
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 8007bda:	e009      	b.n	8007bf0 <uart_esp32_transmit+0x44>
				UART_ESP32_TxBUF[j - 1] = UART_ESP32_TxBUF[j];
 8007bdc:	88ba      	ldrh	r2, [r7, #4]
 8007bde:	88bb      	ldrh	r3, [r7, #4]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	4919      	ldr	r1, [pc, #100]	; (8007c48 <uart_esp32_transmit+0x9c>)
 8007be4:	5c89      	ldrb	r1, [r1, r2]
 8007be6:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <uart_esp32_transmit+0x9c>)
 8007be8:	54d1      	strb	r1, [r2, r3]
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 8007bea:	88bb      	ldrh	r3, [r7, #4]
 8007bec:	3301      	adds	r3, #1
 8007bee:	80bb      	strh	r3, [r7, #4]
 8007bf0:	88bb      	ldrh	r3, [r7, #4]
 8007bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf6:	d3f1      	bcc.n	8007bdc <uart_esp32_transmit+0x30>
	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	80fb      	strh	r3, [r7, #6]
 8007bfe:	88fb      	ldrh	r3, [r7, #6]
 8007c00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c04:	d3e1      	bcc.n	8007bca <uart_esp32_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) UART_ESP32_TxBUF);
 8007c06:	4810      	ldr	r0, [pc, #64]	; (8007c48 <uart_esp32_transmit+0x9c>)
 8007c08:	f7f8 faba 	bl	8000180 <strlen>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&hlpuart1, UART_ESP32_TxBUF, i, 100);
 8007c10:	88fa      	ldrh	r2, [r7, #6]
 8007c12:	2364      	movs	r3, #100	; 0x64
 8007c14:	490c      	ldr	r1, [pc, #48]	; (8007c48 <uart_esp32_transmit+0x9c>)
 8007c16:	480d      	ldr	r0, [pc, #52]	; (8007c4c <uart_esp32_transmit+0xa0>)
 8007c18:	f7fe fb9c 	bl	8006354 <HAL_UART_Transmit>

	memset(UART_ESP32_TxBUF, 0, UART_ESP32_MAX_SENDLEN);
 8007c1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c20:	2100      	movs	r1, #0
 8007c22:	4809      	ldr	r0, [pc, #36]	; (8007c48 <uart_esp32_transmit+0x9c>)
 8007c24:	f004 feb2 	bl	800c98c <memset>
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 8007c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	4808      	ldr	r0, [pc, #32]	; (8007c50 <uart_esp32_transmit+0xa4>)
 8007c30:	f004 feac 	bl	800c98c <memset>
	UART_ESP32_RecvEndFlag = 0;
 8007c34:	4b07      	ldr	r3, [pc, #28]	; (8007c54 <uart_esp32_transmit+0xa8>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	701a      	strb	r2, [r3, #0]
}
 8007c3a:	bf00      	nop
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c44:	b004      	add	sp, #16
 8007c46:	4770      	bx	lr
 8007c48:	20000fb4 	.word	0x20000fb4
 8007c4c:	20000a90 	.word	0x20000a90
 8007c50:	200017b4 	.word	0x200017b4
 8007c54:	20001fb5 	.word	0x20001fb5

08007c58 <esp8266_CheckRespond>:

WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	printf("(DBG:) recv:\r\n%s\r\n", UART_ESP32_RxBUF);
 8007c60:	4910      	ldr	r1, [pc, #64]	; (8007ca4 <esp8266_CheckRespond+0x4c>)
 8007c62:	4811      	ldr	r0, [pc, #68]	; (8007ca8 <esp8266_CheckRespond+0x50>)
 8007c64:	f004 ff7a 	bl	800cb5c <iprintf>
	if (strstr((const char*) UART_ESP32_RxBUF, (const char*) str) != NULL) {
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	480e      	ldr	r0, [pc, #56]	; (8007ca4 <esp8266_CheckRespond+0x4c>)
 8007c6c:	f005 f8a1 	bl	800cdb2 <strstr>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <esp8266_CheckRespond+0x34>
		printf("(DBG:) Match succeed\r\n");
 8007c76:	480d      	ldr	r0, [pc, #52]	; (8007cac <esp8266_CheckRespond+0x54>)
 8007c78:	f005 f80c 	bl	800cc94 <puts>
		memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 8007c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c80:	2100      	movs	r1, #0
 8007c82:	4808      	ldr	r0, [pc, #32]	; (8007ca4 <esp8266_CheckRespond+0x4c>)
 8007c84:	f004 fe82 	bl	800c98c <memset>
		return _MATCHOK;
 8007c88:	2304      	movs	r3, #4
 8007c8a:	e006      	b.n	8007c9a <esp8266_CheckRespond+0x42>
	}

	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 8007c8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c90:	2100      	movs	r1, #0
 8007c92:	4804      	ldr	r0, [pc, #16]	; (8007ca4 <esp8266_CheckRespond+0x4c>)
 8007c94:	f004 fe7a 	bl	800c98c <memset>
	return _MATCHERROR;
 8007c98:	2303      	movs	r3, #3
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200017b4 	.word	0x200017b4
 8007ca8:	0800e2f4 	.word	0x0800e2f4
 8007cac:	0800e308 	.word	0x0800e308

08007cb0 <esp8266_TransmitCmd>:

WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b086      	sub	sp, #24
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	74fb      	strb	r3, [r7, #19]
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 8007cc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4826      	ldr	r0, [pc, #152]	; (8007d68 <esp8266_TransmitCmd+0xb8>)
 8007cce:	f004 fe5d 	bl	800c98c <memset>
	printf("\r\n(DBG:) Try to send cmd: %s\r\n", cmd);
 8007cd2:	68f9      	ldr	r1, [r7, #12]
 8007cd4:	4825      	ldr	r0, [pc, #148]	; (8007d6c <esp8266_TransmitCmd+0xbc>)
 8007cd6:	f004 ff41 	bl	800cb5c <iprintf>
	if (newline == 0)
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d104      	bne.n	8007cea <esp8266_TransmitCmd+0x3a>
		uart_esp32_transmit("%s", cmd);      // transmit cmd to usart2
 8007ce0:	68f9      	ldr	r1, [r7, #12]
 8007ce2:	4823      	ldr	r0, [pc, #140]	; (8007d70 <esp8266_TransmitCmd+0xc0>)
 8007ce4:	f7ff ff62 	bl	8007bac <uart_esp32_transmit>
 8007ce8:	e01e      	b.n	8007d28 <esp8266_TransmitCmd+0x78>
	else
		uart_esp32_transmit("%s\r\n", cmd); // transmit cmd to usart2
 8007cea:	68f9      	ldr	r1, [r7, #12]
 8007cec:	4821      	ldr	r0, [pc, #132]	; (8007d74 <esp8266_TransmitCmd+0xc4>)
 8007cee:	f7ff ff5d 	bl	8007bac <uart_esp32_transmit>

	while (timeout--) {
 8007cf2:	e019      	b.n	8007d28 <esp8266_TransmitCmd+0x78>
		// finish dma receive
		if (UART_ESP32_RecvEndFlag == 1) {
 8007cf4:	4b20      	ldr	r3, [pc, #128]	; (8007d78 <esp8266_TransmitCmd+0xc8>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d111      	bne.n	8007d22 <esp8266_TransmitCmd+0x72>
			check = esp8266_CheckRespond(ack);
 8007cfe:	68b8      	ldr	r0, [r7, #8]
 8007d00:	f7ff ffaa 	bl	8007c58 <esp8266_CheckRespond>
 8007d04:	4603      	mov	r3, r0
 8007d06:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
			}

			UART_ESP32_RxLen = 0;
 8007d08:	4b1c      	ldr	r3, [pc, #112]	; (8007d7c <esp8266_TransmitCmd+0xcc>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 8007d0e:	4b1a      	ldr	r3, [pc, #104]	; (8007d78 <esp8266_TransmitCmd+0xc8>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 8007d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d18:	4913      	ldr	r1, [pc, #76]	; (8007d68 <esp8266_TransmitCmd+0xb8>)
 8007d1a:	4819      	ldr	r0, [pc, #100]	; (8007d80 <esp8266_TransmitCmd+0xd0>)
 8007d1c:	f7fe fba8 	bl	8006470 <HAL_UART_Receive_DMA>

			break;
 8007d20:	e007      	b.n	8007d32 <esp8266_TransmitCmd+0x82>
		}
		HAL_Delay(1);
 8007d22:	2001      	movs	r0, #1
 8007d24:	f7f9 fc3c 	bl	80015a0 <HAL_Delay>
	while (timeout--) {
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	1e5a      	subs	r2, r3, #1
 8007d2c:	617a      	str	r2, [r7, #20]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e0      	bne.n	8007cf4 <esp8266_TransmitCmd+0x44>
	}

	if (check == _MATCHERROR) {
 8007d32:	7cfb      	ldrb	r3, [r7, #19]
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d104      	bne.n	8007d42 <esp8266_TransmitCmd+0x92>
		printf("\r\n(DBG:) Cmd match failed\r\n");
 8007d38:	4812      	ldr	r0, [pc, #72]	; (8007d84 <esp8266_TransmitCmd+0xd4>)
 8007d3a:	f004 ffab 	bl	800cc94 <puts>
		return check;
 8007d3e:	7cfb      	ldrb	r3, [r7, #19]
 8007d40:	e00e      	b.n	8007d60 <esp8266_TransmitCmd+0xb0>
	}
	if (timeout <= 0) {
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dc07      	bgt.n	8007d58 <esp8266_TransmitCmd+0xa8>
		printf("(DBG:) Finish waiting\r\n");
 8007d48:	480f      	ldr	r0, [pc, #60]	; (8007d88 <esp8266_TransmitCmd+0xd8>)
 8007d4a:	f004 ffa3 	bl	800cc94 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 8007d4e:	480f      	ldr	r0, [pc, #60]	; (8007d8c <esp8266_TransmitCmd+0xdc>)
 8007d50:	f004 ffa0 	bl	800cc94 <puts>
		return _TIMEOUT;
 8007d54:	2302      	movs	r3, #2
 8007d56:	e003      	b.n	8007d60 <esp8266_TransmitCmd+0xb0>
	}
	printf("(DBG:) Succeed\r\n");
 8007d58:	480d      	ldr	r0, [pc, #52]	; (8007d90 <esp8266_TransmitCmd+0xe0>)
 8007d5a:	f004 ff9b 	bl	800cc94 <puts>
	return _SUCCEED;
 8007d5e:	2301      	movs	r3, #1
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	200017b4 	.word	0x200017b4
 8007d6c:	0800e320 	.word	0x0800e320
 8007d70:	0800e340 	.word	0x0800e340
 8007d74:	0800e344 	.word	0x0800e344
 8007d78:	20001fb5 	.word	0x20001fb5
 8007d7c:	20001fb4 	.word	0x20001fb4
 8007d80:	20000a90 	.word	0x20000a90
 8007d84:	0800e34c 	.word	0x0800e34c
 8007d88:	0800e368 	.word	0x0800e368
 8007d8c:	0800e380 	.word	0x0800e380
 8007d90:	0800e394 	.word	0x0800e394

08007d94 <esp8266_HardwareReset>:

WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms) {
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 8007da0:	2200      	movs	r2, #0
 8007da2:	2108      	movs	r1, #8
 8007da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007da8:	f7fc f8c2 	bl	8003f30 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8007dac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007db0:	f7f9 fbf6 	bl	80015a0 <HAL_Delay>
	WIFI_RST_Disable();
 8007db4:	2201      	movs	r2, #1
 8007db6:	2108      	movs	r1, #8
 8007db8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dbc:	f7fc f8b8 	bl	8003f30 <HAL_GPIO_WritePin>
	while (timeout--) {
 8007dc0:	e01b      	b.n	8007dfa <esp8266_HardwareReset+0x66>
		if (UART_ESP32_RecvEndFlag == 1) {
 8007dc2:	4b18      	ldr	r3, [pc, #96]	; (8007e24 <esp8266_HardwareReset+0x90>)
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d113      	bne.n	8007df4 <esp8266_HardwareReset+0x60>

			printf("(DBG:) Hardware Reset OK!\r\n");
 8007dcc:	4816      	ldr	r0, [pc, #88]	; (8007e28 <esp8266_HardwareReset+0x94>)
 8007dce:	f004 ff61 	bl	800cc94 <puts>
			HAL_Delay(100);
 8007dd2:	2064      	movs	r0, #100	; 0x64
 8007dd4:	f7f9 fbe4 	bl	80015a0 <HAL_Delay>

			UART_ESP32_RxLen = 0;
 8007dd8:	4b14      	ldr	r3, [pc, #80]	; (8007e2c <esp8266_HardwareReset+0x98>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 8007dde:	4b11      	ldr	r3, [pc, #68]	; (8007e24 <esp8266_HardwareReset+0x90>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 8007de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007de8:	4911      	ldr	r1, [pc, #68]	; (8007e30 <esp8266_HardwareReset+0x9c>)
 8007dea:	4812      	ldr	r0, [pc, #72]	; (8007e34 <esp8266_HardwareReset+0xa0>)
 8007dec:	f7fe fb40 	bl	8006470 <HAL_UART_Receive_DMA>

			return _SUCCEED;
 8007df0:	2301      	movs	r3, #1
 8007df2:	e013      	b.n	8007e1c <esp8266_HardwareReset+0x88>
		}
		HAL_Delay(1);
 8007df4:	2001      	movs	r0, #1
 8007df6:	f7f9 fbd3 	bl	80015a0 <HAL_Delay>
	while (timeout--) {
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	1e5a      	subs	r2, r3, #1
 8007dfe:	60fa      	str	r2, [r7, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1de      	bne.n	8007dc2 <esp8266_HardwareReset+0x2e>
	}
	if (timeout <= 0) {
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	dc07      	bgt.n	8007e1a <esp8266_HardwareReset+0x86>
		printf("(DBG:) Finish waiting\r\n");
 8007e0a:	480b      	ldr	r0, [pc, #44]	; (8007e38 <esp8266_HardwareReset+0xa4>)
 8007e0c:	f004 ff42 	bl	800cc94 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 8007e10:	480a      	ldr	r0, [pc, #40]	; (8007e3c <esp8266_HardwareReset+0xa8>)
 8007e12:	f004 ff3f 	bl	800cc94 <puts>
		return _TIMEOUT;
 8007e16:	2302      	movs	r3, #2
 8007e18:	e000      	b.n	8007e1c <esp8266_HardwareReset+0x88>
	}

	return _UNKNOWN_ERROR;
 8007e1a:	23ff      	movs	r3, #255	; 0xff
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20001fb5 	.word	0x20001fb5
 8007e28:	0800e3a4 	.word	0x0800e3a4
 8007e2c:	20001fb4 	.word	0x20001fb4
 8007e30:	200017b4 	.word	0x200017b4
 8007e34:	20000a90 	.word	0x20000a90
 8007e38:	0800e368 	.word	0x0800e368
 8007e3c:	0800e380 	.word	0x0800e380

08007e40 <esp8266_ConnectAP>:

WIFI_StateTypeDef esp8266_ConnectAP() {
 8007e40:	b590      	push	{r4, r7, lr}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0

	memset(AP_SSID, 0, sizeof(char)*30);
 8007e46:	221e      	movs	r2, #30
 8007e48:	2100      	movs	r1, #0
 8007e4a:	483d      	ldr	r0, [pc, #244]	; (8007f40 <esp8266_ConnectAP+0x100>)
 8007e4c:	f004 fd9e 	bl	800c98c <memset>
	for(int i = 0 ; i < strlen(ssid) ; i++){
 8007e50:	2300      	movs	r3, #0
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	e00b      	b.n	8007e6e <esp8266_ConnectAP+0x2e>
		AP_SSID[i] = ssid[i];
 8007e56:	4a3b      	ldr	r2, [pc, #236]	; (8007f44 <esp8266_ConnectAP+0x104>)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	7819      	ldrb	r1, [r3, #0]
 8007e5e:	4a38      	ldr	r2, [pc, #224]	; (8007f40 <esp8266_ConnectAP+0x100>)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	460a      	mov	r2, r1
 8007e66:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < strlen(ssid) ; i++){
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	4835      	ldr	r0, [pc, #212]	; (8007f44 <esp8266_ConnectAP+0x104>)
 8007e70:	f7f8 f986 	bl	8000180 <strlen>
 8007e74:	4602      	mov	r2, r0
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d8ec      	bhi.n	8007e56 <esp8266_ConnectAP+0x16>
	}
	printf("(DBG:)  ap_ssid : %s \n",AP_SSID);
 8007e7c:	4930      	ldr	r1, [pc, #192]	; (8007f40 <esp8266_ConnectAP+0x100>)
 8007e7e:	4832      	ldr	r0, [pc, #200]	; (8007f48 <esp8266_ConnectAP+0x108>)
 8007e80:	f004 fe6c 	bl	800cb5c <iprintf>
	printf("(DBG:)  ble_ssid : %s \n",ssid);
 8007e84:	492f      	ldr	r1, [pc, #188]	; (8007f44 <esp8266_ConnectAP+0x104>)
 8007e86:	4831      	ldr	r0, [pc, #196]	; (8007f4c <esp8266_ConnectAP+0x10c>)
 8007e88:	f004 fe68 	bl	800cb5c <iprintf>
	memset(AP_PSWD, 0, sizeof(char)*30);
 8007e8c:	221e      	movs	r2, #30
 8007e8e:	2100      	movs	r1, #0
 8007e90:	482f      	ldr	r0, [pc, #188]	; (8007f50 <esp8266_ConnectAP+0x110>)
 8007e92:	f004 fd7b 	bl	800c98c <memset>
	for(int i = 0 ; i < strlen(password) ; i++){
 8007e96:	2300      	movs	r3, #0
 8007e98:	60bb      	str	r3, [r7, #8]
 8007e9a:	e00b      	b.n	8007eb4 <esp8266_ConnectAP+0x74>
		AP_PSWD[i] = password[i];
 8007e9c:	4a2d      	ldr	r2, [pc, #180]	; (8007f54 <esp8266_ConnectAP+0x114>)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	7819      	ldrb	r1, [r3, #0]
 8007ea4:	4a2a      	ldr	r2, [pc, #168]	; (8007f50 <esp8266_ConnectAP+0x110>)
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	460a      	mov	r2, r1
 8007eac:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < strlen(password) ; i++){
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	60bb      	str	r3, [r7, #8]
 8007eb4:	4827      	ldr	r0, [pc, #156]	; (8007f54 <esp8266_ConnectAP+0x114>)
 8007eb6:	f7f8 f963 	bl	8000180 <strlen>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d8ec      	bhi.n	8007e9c <esp8266_ConnectAP+0x5c>
	}
	printf("(DBG:)  ap_pswd : %s \n",AP_PSWD);
 8007ec2:	4923      	ldr	r1, [pc, #140]	; (8007f50 <esp8266_ConnectAP+0x110>)
 8007ec4:	4824      	ldr	r0, [pc, #144]	; (8007f58 <esp8266_ConnectAP+0x118>)
 8007ec6:	f004 fe49 	bl	800cb5c <iprintf>
	printf("(DBG:)  ble_pswd : %s \n",password);
 8007eca:	4922      	ldr	r1, [pc, #136]	; (8007f54 <esp8266_ConnectAP+0x114>)
 8007ecc:	4823      	ldr	r0, [pc, #140]	; (8007f5c <esp8266_ConnectAP+0x11c>)
 8007ece:	f004 fe45 	bl	800cb5c <iprintf>

	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 8007ed2:	481b      	ldr	r0, [pc, #108]	; (8007f40 <esp8266_ConnectAP+0x100>)
 8007ed4:	f7f8 f954 	bl	8000180 <strlen>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	b29c      	uxth	r4, r3
 8007edc:	481c      	ldr	r0, [pc, #112]	; (8007f50 <esp8266_ConnectAP+0x110>)
 8007ede:	f7f8 f94f 	bl	8000180 <strlen>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	4423      	add	r3, r4
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	331e      	adds	r3, #30
 8007eec:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8007eee:	88fb      	ldrh	r3, [r7, #6]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f004 fd35 	bl	800c960 <malloc>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 8007efa:	88fb      	ldrh	r3, [r7, #6]
 8007efc:	461a      	mov	r2, r3
 8007efe:	2100      	movs	r1, #0
 8007f00:	6838      	ldr	r0, [r7, #0]
 8007f02:	f004 fd43 	bl	800c98c <memset>
	sprintf((char*) cmd, "AT+CWJAP=\"%s\",\"%s\"", AP_SSID, AP_PSWD);
 8007f06:	4b12      	ldr	r3, [pc, #72]	; (8007f50 <esp8266_ConnectAP+0x110>)
 8007f08:	4a0d      	ldr	r2, [pc, #52]	; (8007f40 <esp8266_ConnectAP+0x100>)
 8007f0a:	4915      	ldr	r1, [pc, #84]	; (8007f60 <esp8266_ConnectAP+0x120>)
 8007f0c:	6838      	ldr	r0, [r7, #0]
 8007f0e:	f004 fed9 	bl	800ccc4 <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI CONNECTED", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
 8007f12:	2301      	movs	r3, #1
 8007f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f18:	4912      	ldr	r1, [pc, #72]	; (8007f64 <esp8266_ConnectAP+0x124>)
 8007f1a:	6838      	ldr	r0, [r7, #0]
 8007f1c:	f7ff fec8 	bl	8007cb0 <esp8266_TransmitCmd>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d103      	bne.n	8007f2e <esp8266_ConnectAP+0xee>
		wifi_state = _ONLINE;
 8007f26:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <esp8266_ConnectAP+0x128>)
 8007f28:	2205      	movs	r2, #5
 8007f2a:	701a      	strb	r2, [r3, #0]
 8007f2c:	e002      	b.n	8007f34 <esp8266_ConnectAP+0xf4>
	else
		wifi_state = _OFFLINE;
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	; (8007f68 <esp8266_ConnectAP+0x128>)
 8007f30:	2206      	movs	r2, #6
 8007f32:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 8007f34:	4b0c      	ldr	r3, [pc, #48]	; (8007f68 <esp8266_ConnectAP+0x128>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3714      	adds	r7, #20
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd90      	pop	{r4, r7, pc}
 8007f40:	20000f74 	.word	0x20000f74
 8007f44:	20002498 	.word	0x20002498
 8007f48:	0800e3c0 	.word	0x0800e3c0
 8007f4c:	0800e3d8 	.word	0x0800e3d8
 8007f50:	20000f94 	.word	0x20000f94
 8007f54:	200024b8 	.word	0x200024b8
 8007f58:	0800e3f0 	.word	0x0800e3f0
 8007f5c:	0800e408 	.word	0x0800e408
 8007f60:	0800e420 	.word	0x0800e420
 8007f64:	0800e434 	.word	0x0800e434
 8007f68:	20000011 	.word	0x20000011

08007f6c <esp8266_SetupIP>:
	return _SUCCEED;
}

// +BCH
WIFI_StateTypeDef esp8266_SetupIP()
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	71fb      	strb	r3, [r7, #7]

	/* Reset esp8266 */
	printf("(DBG:) Trying to reset esp8266\r\n");
 8007f76:	48a8      	ldr	r0, [pc, #672]	; (8008218 <esp8266_SetupIP+0x2ac>)
 8007f78:	f004 fe8c 	bl	800cc94 <puts>
	wifi_config_step++;
 8007f7c:	4ba7      	ldr	r3, [pc, #668]	; (800821c <esp8266_SetupIP+0x2b0>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	3301      	adds	r3, #1
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	4ba5      	ldr	r3, [pc, #660]	; (800821c <esp8266_SetupIP+0x2b0>)
 8007f86:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 8007f88:	e019      	b.n	8007fbe <esp8266_SetupIP+0x52>
		retry_count++;
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8007f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f94:	f7f9 fb04 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d90f      	bls.n	8007fbe <esp8266_SetupIP+0x52>
			printf("(DBG:) Reset failed\r\n");
 8007f9e:	48a0      	ldr	r0, [pc, #640]	; (8008220 <esp8266_SetupIP+0x2b4>)
 8007fa0:	f004 fe78 	bl	800cc94 <puts>
			retry_count = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 8007fa8:	4b9e      	ldr	r3, [pc, #632]	; (8008224 <esp8266_SetupIP+0x2b8>)
 8007faa:	22ee      	movs	r2, #238	; 0xee
 8007fac:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 8007fae:	4b9b      	ldr	r3, [pc, #620]	; (800821c <esp8266_SetupIP+0x2b0>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	4b99      	ldr	r3, [pc, #612]	; (800821c <esp8266_SetupIP+0x2b0>)
 8007fb8:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e1e1      	b.n	8008382 <esp8266_SetupIP+0x416>
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 8007fbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007fc2:	f7ff fee7 	bl	8007d94 <esp8266_HardwareReset>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d1de      	bne.n	8007f8a <esp8266_SetupIP+0x1e>
		}
	}

	HAL_Delay(2000);		// wait 2 seconds
 8007fcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007fd0:	f7f9 fae6 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	71fb      	strb	r3, [r7, #7]

	/* Close echo */
	printf("(DBG:) Trying to close echo\r\n");
 8007fd8:	4893      	ldr	r0, [pc, #588]	; (8008228 <esp8266_SetupIP+0x2bc>)
 8007fda:	f004 fe5b 	bl	800cc94 <puts>
	wifi_config_step++;
 8007fde:	4b8f      	ldr	r3, [pc, #572]	; (800821c <esp8266_SetupIP+0x2b0>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	4b8d      	ldr	r3, [pc, #564]	; (800821c <esp8266_SetupIP+0x2b0>)
 8007fe8:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 8007fea:	e016      	b.n	800801a <esp8266_SetupIP+0xae>
			!= _SUCCEED) {
		retry_count++;
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8007ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ff6:	f7f9 fad3 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d90c      	bls.n	800801a <esp8266_SetupIP+0xae>
			printf("(DBG:) Close echo failed\r\n");
 8008000:	488a      	ldr	r0, [pc, #552]	; (800822c <esp8266_SetupIP+0x2c0>)
 8008002:	f004 fe47 	bl	800cc94 <puts>
			retry_count = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800800a:	4b84      	ldr	r3, [pc, #528]	; (800821c <esp8266_SetupIP+0x2b0>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	3b01      	subs	r3, #1
 8008010:	b2da      	uxtb	r2, r3
 8008012:	4b82      	ldr	r3, [pc, #520]	; (800821c <esp8266_SetupIP+0x2b0>)
 8008014:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8008016:	2300      	movs	r3, #0
 8008018:	e1b3      	b.n	8008382 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 800801a:	2301      	movs	r3, #1
 800801c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008020:	4983      	ldr	r1, [pc, #524]	; (8008230 <esp8266_SetupIP+0x2c4>)
 8008022:	4884      	ldr	r0, [pc, #528]	; (8008234 <esp8266_SetupIP+0x2c8>)
 8008024:	f7ff fe44 	bl	8007cb0 <esp8266_TransmitCmd>
 8008028:	4603      	mov	r3, r0
 800802a:	2b01      	cmp	r3, #1
 800802c:	d1de      	bne.n	8007fec <esp8266_SetupIP+0x80>
		}
	}

	HAL_Delay(100);
 800802e:	2064      	movs	r0, #100	; 0x64
 8008030:	f7f9 fab6 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8008034:	2300      	movs	r3, #0
 8008036:	71fb      	strb	r3, [r7, #7]

	/* Set wifi mode 0:AP 1:STA 2:AP+STA */
	printf("(DBG:) Trying to set Wifi mode\r\n");
 8008038:	487f      	ldr	r0, [pc, #508]	; (8008238 <esp8266_SetupIP+0x2cc>)
 800803a:	f004 fe2b 	bl	800cc94 <puts>
	wifi_config_step++;
 800803e:	4b77      	ldr	r3, [pc, #476]	; (800821c <esp8266_SetupIP+0x2b0>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	3301      	adds	r3, #1
 8008044:	b2da      	uxtb	r2, r3
 8008046:	4b75      	ldr	r3, [pc, #468]	; (800821c <esp8266_SetupIP+0x2b0>)
 8008048:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 800804a:	e016      	b.n	800807a <esp8266_SetupIP+0x10e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	3301      	adds	r3, #1
 8008050:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8008052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008056:	f7f9 faa3 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800805a:	79fb      	ldrb	r3, [r7, #7]
 800805c:	2b03      	cmp	r3, #3
 800805e:	d90c      	bls.n	800807a <esp8266_SetupIP+0x10e>
			printf("(DBG:) Set Wifi mode failed\r\n");
 8008060:	4876      	ldr	r0, [pc, #472]	; (800823c <esp8266_SetupIP+0x2d0>)
 8008062:	f004 fe17 	bl	800cc94 <puts>
			retry_count = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800806a:	4b6c      	ldr	r3, [pc, #432]	; (800821c <esp8266_SetupIP+0x2b0>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	3b01      	subs	r3, #1
 8008070:	b2da      	uxtb	r2, r3
 8008072:	4b6a      	ldr	r3, [pc, #424]	; (800821c <esp8266_SetupIP+0x2b0>)
 8008074:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8008076:	2300      	movs	r3, #0
 8008078:	e183      	b.n	8008382 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 800807a:	2301      	movs	r3, #1
 800807c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008080:	496b      	ldr	r1, [pc, #428]	; (8008230 <esp8266_SetupIP+0x2c4>)
 8008082:	486f      	ldr	r0, [pc, #444]	; (8008240 <esp8266_SetupIP+0x2d4>)
 8008084:	f7ff fe14 	bl	8007cb0 <esp8266_TransmitCmd>
 8008088:	4603      	mov	r3, r0
 800808a:	2b01      	cmp	r3, #1
 800808c:	d1de      	bne.n	800804c <esp8266_SetupIP+0xe0>
		}
	}

	HAL_Delay(100);
 800808e:	2064      	movs	r0, #100	; 0x64
 8008090:	f7f9 fa86 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8008094:	2300      	movs	r3, #0
 8008096:	71fb      	strb	r3, [r7, #7]

	/* Disable auto connect */
	printf("(DBG:) Trying to close auto connect\r\n");
 8008098:	486a      	ldr	r0, [pc, #424]	; (8008244 <esp8266_SetupIP+0x2d8>)
 800809a:	f004 fdfb 	bl	800cc94 <puts>
	wifi_config_step++;
 800809e:	4b5f      	ldr	r3, [pc, #380]	; (800821c <esp8266_SetupIP+0x2b0>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	4b5d      	ldr	r3, [pc, #372]	; (800821c <esp8266_SetupIP+0x2b0>)
 80080a8:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 80080aa:	e016      	b.n	80080da <esp8266_SetupIP+0x16e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 80080ac:	79fb      	ldrb	r3, [r7, #7]
 80080ae:	3301      	adds	r3, #1
 80080b0:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80080b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080b6:	f7f9 fa73 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80080ba:	79fb      	ldrb	r3, [r7, #7]
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d90c      	bls.n	80080da <esp8266_SetupIP+0x16e>
			printf("(DBG:) Close auto connect failed\r\n");
 80080c0:	4861      	ldr	r0, [pc, #388]	; (8008248 <esp8266_SetupIP+0x2dc>)
 80080c2:	f004 fde7 	bl	800cc94 <puts>
			retry_count = 0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80080ca:	4b54      	ldr	r3, [pc, #336]	; (800821c <esp8266_SetupIP+0x2b0>)
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	4b52      	ldr	r3, [pc, #328]	; (800821c <esp8266_SetupIP+0x2b0>)
 80080d4:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80080d6:	2300      	movs	r3, #0
 80080d8:	e153      	b.n	8008382 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 80080da:	2301      	movs	r3, #1
 80080dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80080e0:	4953      	ldr	r1, [pc, #332]	; (8008230 <esp8266_SetupIP+0x2c4>)
 80080e2:	485a      	ldr	r0, [pc, #360]	; (800824c <esp8266_SetupIP+0x2e0>)
 80080e4:	f7ff fde4 	bl	8007cb0 <esp8266_TransmitCmd>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d1de      	bne.n	80080ac <esp8266_SetupIP+0x140>
		}
	}

	HAL_Delay(100);
 80080ee:	2064      	movs	r0, #100	; 0x64
 80080f0:	f7f9 fa56 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 80080f4:	2300      	movs	r3, #0
 80080f6:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	printf("(DBG:) Trying to connect to AP\r\n");
 80080f8:	4855      	ldr	r0, [pc, #340]	; (8008250 <esp8266_SetupIP+0x2e4>)
 80080fa:	f004 fdcb 	bl	800cc94 <puts>
	wifi_config_step++;
 80080fe:	4b47      	ldr	r3, [pc, #284]	; (800821c <esp8266_SetupIP+0x2b0>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	3301      	adds	r3, #1
 8008104:	b2da      	uxtb	r2, r3
 8008106:	4b45      	ldr	r3, [pc, #276]	; (800821c <esp8266_SetupIP+0x2b0>)
 8008108:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 800810a:	e016      	b.n	800813a <esp8266_SetupIP+0x1ce>
		retry_count++;
 800810c:	79fb      	ldrb	r3, [r7, #7]
 800810e:	3301      	adds	r3, #1
 8008110:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8008112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008116:	f7f9 fa43 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800811a:	79fb      	ldrb	r3, [r7, #7]
 800811c:	2b03      	cmp	r3, #3
 800811e:	d90c      	bls.n	800813a <esp8266_SetupIP+0x1ce>
			printf("(DBG:) Connect to AP failed\r\n");
 8008120:	484c      	ldr	r0, [pc, #304]	; (8008254 <esp8266_SetupIP+0x2e8>)
 8008122:	f004 fdb7 	bl	800cc94 <puts>
			retry_count = 0;
 8008126:	2300      	movs	r3, #0
 8008128:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800812a:	4b3c      	ldr	r3, [pc, #240]	; (800821c <esp8266_SetupIP+0x2b0>)
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	3b01      	subs	r3, #1
 8008130:	b2da      	uxtb	r2, r3
 8008132:	4b3a      	ldr	r3, [pc, #232]	; (800821c <esp8266_SetupIP+0x2b0>)
 8008134:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8008136:	2300      	movs	r3, #0
 8008138:	e123      	b.n	8008382 <esp8266_SetupIP+0x416>
	while (esp8266_ConnectAP() != _ONLINE) {
 800813a:	f7ff fe81 	bl	8007e40 <esp8266_ConnectAP>
 800813e:	4603      	mov	r3, r0
 8008140:	2b05      	cmp	r3, #5
 8008142:	d1e3      	bne.n	800810c <esp8266_SetupIP+0x1a0>
		}
	}

	HAL_Delay(100);
 8008144:	2064      	movs	r0, #100	; 0x64
 8008146:	f7f9 fa2b 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800814a:	2300      	movs	r3, #0
 800814c:	71fb      	strb	r3, [r7, #7]

	/* Try to get AP info */
	if (wifi_state == _ONLINE) {
 800814e:	4b42      	ldr	r3, [pc, #264]	; (8008258 <esp8266_SetupIP+0x2ec>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	2b05      	cmp	r3, #5
 8008154:	d123      	bne.n	800819e <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 8008156:	e018      	b.n	800818a <esp8266_SetupIP+0x21e>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 8008158:	79fb      	ldrb	r3, [r7, #7]
 800815a:	3301      	adds	r3, #1
 800815c:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 800815e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008162:	f7f9 fa1d 	bl	80015a0 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 8008166:	79fb      	ldrb	r3, [r7, #7]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d90e      	bls.n	800818a <esp8266_SetupIP+0x21e>
				printf("(DBG:) Get AP msg failed\r\n");
 800816c:	483b      	ldr	r0, [pc, #236]	; (800825c <esp8266_SetupIP+0x2f0>)
 800816e:	f004 fd91 	bl	800cc94 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 8008172:	483b      	ldr	r0, [pc, #236]	; (8008260 <esp8266_SetupIP+0x2f4>)
 8008174:	f004 fcf2 	bl	800cb5c <iprintf>
				retry_count = 0;
 8008178:	2300      	movs	r3, #0
 800817a:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 800817c:	4b27      	ldr	r3, [pc, #156]	; (800821c <esp8266_SetupIP+0x2b0>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	3b01      	subs	r3, #1
 8008182:	b2da      	uxtb	r2, r3
 8008184:	4b25      	ldr	r3, [pc, #148]	; (800821c <esp8266_SetupIP+0x2b0>)
 8008186:	701a      	strb	r2, [r3, #0]
				break;
 8008188:	e009      	b.n	800819e <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 800818a:	2301      	movs	r3, #1
 800818c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008190:	4927      	ldr	r1, [pc, #156]	; (8008230 <esp8266_SetupIP+0x2c4>)
 8008192:	4834      	ldr	r0, [pc, #208]	; (8008264 <esp8266_SetupIP+0x2f8>)
 8008194:	f7ff fd8c 	bl	8007cb0 <esp8266_TransmitCmd>
 8008198:	4603      	mov	r3, r0
 800819a:	2b01      	cmp	r3, #1
 800819c:	d1dc      	bne.n	8008158 <esp8266_SetupIP+0x1ec>
			}
		}
	}

	HAL_Delay(100);
 800819e:	2064      	movs	r0, #100	; 0x64
 80081a0:	f7f9 f9fe 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 80081a4:	2300      	movs	r3, #0
 80081a6:	71fb      	strb	r3, [r7, #7]

	/* Try to get IP info */
	if (wifi_state == _ONLINE) {
 80081a8:	4b2b      	ldr	r3, [pc, #172]	; (8008258 <esp8266_SetupIP+0x2ec>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b05      	cmp	r3, #5
 80081ae:	d123      	bne.n	80081f8 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 80081b0:	e018      	b.n	80081e4 <esp8266_SetupIP+0x278>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	3301      	adds	r3, #1
 80081b6:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 80081b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081bc:	f7f9 f9f0 	bl	80015a0 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d90e      	bls.n	80081e4 <esp8266_SetupIP+0x278>
				printf("(DBG:) Get IP info failed\r\n");
 80081c6:	4828      	ldr	r0, [pc, #160]	; (8008268 <esp8266_SetupIP+0x2fc>)
 80081c8:	f004 fd64 	bl	800cc94 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 80081cc:	4824      	ldr	r0, [pc, #144]	; (8008260 <esp8266_SetupIP+0x2f4>)
 80081ce:	f004 fcc5 	bl	800cb5c <iprintf>
				retry_count = 0;
 80081d2:	2300      	movs	r3, #0
 80081d4:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 80081d6:	4b11      	ldr	r3, [pc, #68]	; (800821c <esp8266_SetupIP+0x2b0>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	3b01      	subs	r3, #1
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	4b0f      	ldr	r3, [pc, #60]	; (800821c <esp8266_SetupIP+0x2b0>)
 80081e0:	701a      	strb	r2, [r3, #0]
				break;
 80081e2:	e009      	b.n	80081f8 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 80081e4:	2301      	movs	r3, #1
 80081e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081ea:	4911      	ldr	r1, [pc, #68]	; (8008230 <esp8266_SetupIP+0x2c4>)
 80081ec:	481f      	ldr	r0, [pc, #124]	; (800826c <esp8266_SetupIP+0x300>)
 80081ee:	f7ff fd5f 	bl	8007cb0 <esp8266_TransmitCmd>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d1dc      	bne.n	80081b2 <esp8266_SetupIP+0x246>
			}
		}
	}

	HAL_Delay(100);
 80081f8:	2064      	movs	r0, #100	; 0x64
 80081fa:	f7f9 f9d1 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 80081fe:	2300      	movs	r3, #0
 8008200:	71fb      	strb	r3, [r7, #7]

	/* Set DHCP */
	printf("(DBG:) Trying to set DHCP mode\r\n");
 8008202:	481b      	ldr	r0, [pc, #108]	; (8008270 <esp8266_SetupIP+0x304>)
 8008204:	f004 fd46 	bl	800cc94 <puts>
	wifi_config_step++;
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <esp8266_SetupIP+0x2b0>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	3301      	adds	r3, #1
 800820e:	b2da      	uxtb	r2, r3
 8008210:	4b02      	ldr	r3, [pc, #8]	; (800821c <esp8266_SetupIP+0x2b0>)
 8008212:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 8008214:	e045      	b.n	80082a2 <esp8266_SetupIP+0x336>
 8008216:	bf00      	nop
 8008218:	0800e484 	.word	0x0800e484
 800821c:	20000f70 	.word	0x20000f70
 8008220:	0800e4a4 	.word	0x0800e4a4
 8008224:	20000012 	.word	0x20000012
 8008228:	0800e4f0 	.word	0x0800e4f0
 800822c:	0800e510 	.word	0x0800e510
 8008230:	0800e52c 	.word	0x0800e52c
 8008234:	0800e530 	.word	0x0800e530
 8008238:	0800e538 	.word	0x0800e538
 800823c:	0800e558 	.word	0x0800e558
 8008240:	0800e578 	.word	0x0800e578
 8008244:	0800e584 	.word	0x0800e584
 8008248:	0800e5ac 	.word	0x0800e5ac
 800824c:	0800e5d0 	.word	0x0800e5d0
 8008250:	0800e5e0 	.word	0x0800e5e0
 8008254:	0800e600 	.word	0x0800e600
 8008258:	20000011 	.word	0x20000011
 800825c:	0800e620 	.word	0x0800e620
 8008260:	0800e63c 	.word	0x0800e63c
 8008264:	0800e674 	.word	0x0800e674
 8008268:	0800e680 	.word	0x0800e680
 800826c:	0800e69c 	.word	0x0800e69c
 8008270:	0800e6a8 	.word	0x0800e6a8
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8008274:	79fb      	ldrb	r3, [r7, #7]
 8008276:	3301      	adds	r3, #1
 8008278:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800827a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800827e:	f7f9 f98f 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	2b03      	cmp	r3, #3
 8008286:	d90c      	bls.n	80082a2 <esp8266_SetupIP+0x336>
			printf("(DBG:) Set DHCP model failed\r\n");
 8008288:	4840      	ldr	r0, [pc, #256]	; (800838c <esp8266_SetupIP+0x420>)
 800828a:	f004 fd03 	bl	800cc94 <puts>
			retry_count = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8008292:	4b3f      	ldr	r3, [pc, #252]	; (8008390 <esp8266_SetupIP+0x424>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	3b01      	subs	r3, #1
 8008298:	b2da      	uxtb	r2, r3
 800829a:	4b3d      	ldr	r3, [pc, #244]	; (8008390 <esp8266_SetupIP+0x424>)
 800829c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800829e:	2300      	movs	r3, #0
 80082a0:	e06f      	b.n	8008382 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 80082a2:	2301      	movs	r3, #1
 80082a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082a8:	493a      	ldr	r1, [pc, #232]	; (8008394 <esp8266_SetupIP+0x428>)
 80082aa:	483b      	ldr	r0, [pc, #236]	; (8008398 <esp8266_SetupIP+0x42c>)
 80082ac:	f7ff fd00 	bl	8007cb0 <esp8266_TransmitCmd>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d1de      	bne.n	8008274 <esp8266_SetupIP+0x308>
		}
	}

	HAL_Delay(100);
 80082b6:	2064      	movs	r0, #100	; 0x64
 80082b8:	f7f9 f972 	bl	80015a0 <HAL_Delay>
	retry_count = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	71fb      	strb	r3, [r7, #7]

	/* Set single connection */
	printf("(DBG:) Trying to set single connection\r\n");
 80082c0:	4836      	ldr	r0, [pc, #216]	; (800839c <esp8266_SetupIP+0x430>)
 80082c2:	f004 fce7 	bl	800cc94 <puts>
	wifi_config_step++;
 80082c6:	4b32      	ldr	r3, [pc, #200]	; (8008390 <esp8266_SetupIP+0x424>)
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	3301      	adds	r3, #1
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	4b30      	ldr	r3, [pc, #192]	; (8008390 <esp8266_SetupIP+0x424>)
 80082d0:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 80082d2:	e016      	b.n	8008302 <esp8266_SetupIP+0x396>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	3301      	adds	r3, #1
 80082d8:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80082da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082de:	f7f9 f95f 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d90c      	bls.n	8008302 <esp8266_SetupIP+0x396>
			printf("(DBG:) Set single connection model failed\r\n");
 80082e8:	482d      	ldr	r0, [pc, #180]	; (80083a0 <esp8266_SetupIP+0x434>)
 80082ea:	f004 fcd3 	bl	800cc94 <puts>
			retry_count = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80082f2:	4b27      	ldr	r3, [pc, #156]	; (8008390 <esp8266_SetupIP+0x424>)
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	4b25      	ldr	r3, [pc, #148]	; (8008390 <esp8266_SetupIP+0x424>)
 80082fc:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80082fe:	2300      	movs	r3, #0
 8008300:	e03f      	b.n	8008382 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 8008302:	2301      	movs	r3, #1
 8008304:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008308:	4922      	ldr	r1, [pc, #136]	; (8008394 <esp8266_SetupIP+0x428>)
 800830a:	4826      	ldr	r0, [pc, #152]	; (80083a4 <esp8266_SetupIP+0x438>)
 800830c:	f7ff fcd0 	bl	8007cb0 <esp8266_TransmitCmd>
 8008310:	4603      	mov	r3, r0
 8008312:	2b01      	cmp	r3, #1
 8008314:	d1de      	bne.n	80082d4 <esp8266_SetupIP+0x368>
		}
	}

	HAL_Delay(100);
 8008316:	2064      	movs	r0, #100	; 0x64
 8008318:	f7f9 f942 	bl	80015a0 <HAL_Delay>
	retry_count = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	71fb      	strb	r3, [r7, #7]

	/* Set transparent transmission */
	printf("(DBG:) Trying to set transparent transmission mode\r\n");
 8008320:	4821      	ldr	r0, [pc, #132]	; (80083a8 <esp8266_SetupIP+0x43c>)
 8008322:	f004 fcb7 	bl	800cc94 <puts>
	wifi_config_step++;
 8008326:	4b1a      	ldr	r3, [pc, #104]	; (8008390 <esp8266_SetupIP+0x424>)
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	3301      	adds	r3, #1
 800832c:	b2da      	uxtb	r2, r3
 800832e:	4b18      	ldr	r3, [pc, #96]	; (8008390 <esp8266_SetupIP+0x424>)
 8008330:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 8008332:	e016      	b.n	8008362 <esp8266_SetupIP+0x3f6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8008334:	79fb      	ldrb	r3, [r7, #7]
 8008336:	3301      	adds	r3, #1
 8008338:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800833a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800833e:	f7f9 f92f 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8008342:	79fb      	ldrb	r3, [r7, #7]
 8008344:	2b03      	cmp	r3, #3
 8008346:	d90c      	bls.n	8008362 <esp8266_SetupIP+0x3f6>
			printf("(DBG:) Set transparent transmission mode failed\r\n");
 8008348:	4818      	ldr	r0, [pc, #96]	; (80083ac <esp8266_SetupIP+0x440>)
 800834a:	f004 fca3 	bl	800cc94 <puts>
			retry_count = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8008352:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <esp8266_SetupIP+0x424>)
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	3b01      	subs	r3, #1
 8008358:	b2da      	uxtb	r2, r3
 800835a:	4b0d      	ldr	r3, [pc, #52]	; (8008390 <esp8266_SetupIP+0x424>)
 800835c:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800835e:	2300      	movs	r3, #0
 8008360:	e00f      	b.n	8008382 <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 8008362:	2301      	movs	r3, #1
 8008364:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008368:	490a      	ldr	r1, [pc, #40]	; (8008394 <esp8266_SetupIP+0x428>)
 800836a:	4811      	ldr	r0, [pc, #68]	; (80083b0 <esp8266_SetupIP+0x444>)
 800836c:	f7ff fca0 	bl	8007cb0 <esp8266_TransmitCmd>
 8008370:	4603      	mov	r3, r0
 8008372:	2b01      	cmp	r3, #1
 8008374:	d1de      	bne.n	8008334 <esp8266_SetupIP+0x3c8>
		}
	}

	HAL_Delay(100);
 8008376:	2064      	movs	r0, #100	; 0x64
 8008378:	f7f9 f912 	bl	80015a0 <HAL_Delay>
	retry_count = 0;
 800837c:	2300      	movs	r3, #0
 800837e:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED;
 8008380:	2301      	movs	r3, #1

}
 8008382:	4618      	mov	r0, r3
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	0800e6c8 	.word	0x0800e6c8
 8008390:	20000f70 	.word	0x20000f70
 8008394:	0800e52c 	.word	0x0800e52c
 8008398:	0800e6e8 	.word	0x0800e6e8
 800839c:	0800e6f8 	.word	0x0800e6f8
 80083a0:	0800e720 	.word	0x0800e720
 80083a4:	0800e74c 	.word	0x0800e74c
 80083a8:	0800e758 	.word	0x0800e758
 80083ac:	0800e78c 	.word	0x0800e78c
 80083b0:	0800e7c0 	.word	0x0800e7c0

080083b4 <esp8266_ConfigAccessBroker>:

static MQTT_StateTypeDef esp8266_ConfigAccessBroker()
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b086      	sub	sp, #24
 80083b8:	af02      	add	r7, sp, #8
	int retry_count = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(MQTT_CLIENTID) + strlen(MQTT_USERNAME) + strlen(MQTT_PASSWORD) + 40;
 80083be:	232d      	movs	r3, #45	; 0x2d
 80083c0:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 80083c2:	897b      	ldrh	r3, [r7, #10]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f004 facb 	bl	800c960 <malloc>
 80083ca:	4603      	mov	r3, r0
 80083cc:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 80083ce:	897b      	ldrh	r3, [r7, #10]
 80083d0:	461a      	mov	r2, r3
 80083d2:	2100      	movs	r1, #0
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f004 fad9 	bl	800c98c <memset>
	sprintf((char*) cmd, "AT+MQTTUSERCFG=0,1,\"%s\",\"%s\",\"%s\",0,0,\"\"", MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWORD);
 80083da:	4b19      	ldr	r3, [pc, #100]	; (8008440 <esp8266_ConfigAccessBroker+0x8c>)
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	4b18      	ldr	r3, [pc, #96]	; (8008440 <esp8266_ConfigAccessBroker+0x8c>)
 80083e0:	4a18      	ldr	r2, [pc, #96]	; (8008444 <esp8266_ConfigAccessBroker+0x90>)
 80083e2:	4919      	ldr	r1, [pc, #100]	; (8008448 <esp8266_ConfigAccessBroker+0x94>)
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f004 fc6d 	bl	800ccc4 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 80083ea:	e011      	b.n	8008410 <esp8266_ConfigAccessBroker+0x5c>
	{
		retry_count++;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3301      	adds	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 80083f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083f6:	f7f9 f8d3 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	dd07      	ble.n	8008410 <esp8266_ConfigAccessBroker+0x5c>
			printf("(DBG:) esp8266_ConfigAccessBroker() failed\r\n");
 8008400:	4812      	ldr	r0, [pc, #72]	; (800844c <esp8266_ConfigAccessBroker+0x98>)
 8008402:	f004 fc47 	bl	800cc94 <puts>
			retry_count = 0;
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]
			mqtt_state = _CONFIG_ERROR_MQTT;
 800840a:	4b11      	ldr	r3, [pc, #68]	; (8008450 <esp8266_ConfigAccessBroker+0x9c>)
 800840c:	2204      	movs	r2, #4
 800840e:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8008410:	2301      	movs	r3, #1
 8008412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008416:	490f      	ldr	r1, [pc, #60]	; (8008454 <esp8266_ConfigAccessBroker+0xa0>)
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff fc49 	bl	8007cb0 <esp8266_TransmitCmd>
 800841e:	4603      	mov	r3, r0
 8008420:	2b01      	cmp	r3, #1
 8008422:	d1e3      	bne.n	80083ec <esp8266_ConfigAccessBroker+0x38>
		}
	}

	mqtt_state = _CONFIG_OK_MQTT;
 8008424:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <esp8266_ConfigAccessBroker+0x9c>)
 8008426:	2205      	movs	r2, #5
 8008428:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800842a:	2064      	movs	r0, #100	; 0x64
 800842c:	f7f9 f8b8 	bl	80015a0 <HAL_Delay>
	retry_count = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]

	return mqtt_state;
 8008434:	4b06      	ldr	r3, [pc, #24]	; (8008450 <esp8266_ConfigAccessBroker+0x9c>)
 8008436:	781b      	ldrb	r3, [r3, #0]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	0800e84c 	.word	0x0800e84c
 8008444:	0800e850 	.word	0x0800e850
 8008448:	0800e858 	.word	0x0800e858
 800844c:	0800e884 	.word	0x0800e884
 8008450:	20000013 	.word	0x20000013
 8008454:	0800e52c 	.word	0x0800e52c

08008458 <esp8266_ConnectBroker>:

	return mqtt_state;
}

static MQTT_StateTypeDef esp8266_ConnectBroker()
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
	int retry_count = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 25;
 8008462:	232e      	movs	r3, #46	; 0x2e
 8008464:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8008466:	897b      	ldrh	r3, [r7, #10]
 8008468:	4618      	mov	r0, r3
 800846a:	f004 fa79 	bl	800c960 <malloc>
 800846e:	4603      	mov	r3, r0
 8008470:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 8008472:	897b      	ldrh	r3, [r7, #10]
 8008474:	461a      	mov	r2, r3
 8008476:	2100      	movs	r1, #0
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f004 fa87 	bl	800c98c <memset>
	sprintf((char*) cmd, "AT+MQTTCONN=0,\"%s\",%s,0", IpServer, ServerPort);
 800847e:	4b16      	ldr	r3, [pc, #88]	; (80084d8 <esp8266_ConnectBroker+0x80>)
 8008480:	4a16      	ldr	r2, [pc, #88]	; (80084dc <esp8266_ConnectBroker+0x84>)
 8008482:	4917      	ldr	r1, [pc, #92]	; (80084e0 <esp8266_ConnectBroker+0x88>)
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f004 fc1d 	bl	800ccc4 <siprintf>

	//if (esp8266_TransmitCmd(cmd, (uint8_t*)"\r\nready\r\n", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800848a:	e011      	b.n	80084b0 <esp8266_ConnectBroker+0x58>
	{
		retry_count++;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3301      	adds	r3, #1
 8008490:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 8008492:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008496:	f7f9 f883 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b03      	cmp	r3, #3
 800849e:	dd07      	ble.n	80084b0 <esp8266_ConnectBroker+0x58>
			printf("(DBG:) esp8266_ConnectBroker() failed\r\n");
 80084a0:	4810      	ldr	r0, [pc, #64]	; (80084e4 <esp8266_ConnectBroker+0x8c>)
 80084a2:	f004 fbf7 	bl	800cc94 <puts>
			retry_count = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]
			mqtt_state = _UNCONNECTED_MQTT;
 80084aa:	4b0f      	ldr	r3, [pc, #60]	; (80084e8 <esp8266_ConnectBroker+0x90>)
 80084ac:	2206      	movs	r2, #6
 80084ae:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 80084b0:	2301      	movs	r3, #1
 80084b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084b6:	490d      	ldr	r1, [pc, #52]	; (80084ec <esp8266_ConnectBroker+0x94>)
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff fbf9 	bl	8007cb0 <esp8266_TransmitCmd>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d1e3      	bne.n	800848c <esp8266_ConnectBroker+0x34>
		}
	}

	mqtt_state = _CONNECTED_MQTT;
 80084c4:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <esp8266_ConnectBroker+0x90>)
 80084c6:	2207      	movs	r2, #7
 80084c8:	701a      	strb	r2, [r3, #0]

	return mqtt_state;
 80084ca:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <esp8266_ConnectBroker+0x90>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	0800e444 	.word	0x0800e444
 80084dc:	0800e44c 	.word	0x0800e44c
 80084e0:	0800e8d8 	.word	0x0800e8d8
 80084e4:	0800e8f0 	.word	0x0800e8f0
 80084e8:	20000013 	.word	0x20000013
 80084ec:	0800e52c 	.word	0x0800e52c

080084f0 <esp8266_SetupConnect_BrokerMQTT>:

MQTT_StateTypeDef esp8266_SetupConnect_BrokerMQTT()
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker configuration esp8266 */
	printf("(DBG:) Trying to configure MQTT access broker esp8266\r\n");
 80084fa:	482d      	ldr	r0, [pc, #180]	; (80085b0 <esp8266_SetupConnect_BrokerMQTT+0xc0>)
 80084fc:	f004 fbca 	bl	800cc94 <puts>
	mqtt_config_step++;
 8008500:	4b2c      	ldr	r3, [pc, #176]	; (80085b4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	3301      	adds	r3, #1
 8008506:	b2da      	uxtb	r2, r3
 8008508:	4b2a      	ldr	r3, [pc, #168]	; (80085b4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800850a:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 800850c:	e016      	b.n	800853c <esp8266_SetupConnect_BrokerMQTT+0x4c>
		retry_count++;
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	3301      	adds	r3, #1
 8008512:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 8008514:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008518:	f7f9 f842 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800851c:	79fb      	ldrb	r3, [r7, #7]
 800851e:	2b03      	cmp	r3, #3
 8008520:	d90c      	bls.n	800853c <esp8266_SetupConnect_BrokerMQTT+0x4c>
			printf("(DBG:) Configure MQTT access broker failed\r\n");
 8008522:	4825      	ldr	r0, [pc, #148]	; (80085b8 <esp8266_SetupConnect_BrokerMQTT+0xc8>)
 8008524:	f004 fbb6 	bl	800cc94 <puts>
			retry_count = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 800852c:	4b21      	ldr	r3, [pc, #132]	; (80085b4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	3b01      	subs	r3, #1
 8008532:	b2da      	uxtb	r2, r3
 8008534:	4b1f      	ldr	r3, [pc, #124]	; (80085b4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8008536:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 8008538:	2300      	movs	r3, #0
 800853a:	e035      	b.n	80085a8 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 800853c:	f7ff ff3a 	bl	80083b4 <esp8266_ConfigAccessBroker>
 8008540:	4603      	mov	r3, r0
 8008542:	2b05      	cmp	r3, #5
 8008544:	d1e3      	bne.n	800850e <esp8266_SetupConnect_BrokerMQTT+0x1e>
		}
	}

	HAL_Delay(100);
 8008546:	2064      	movs	r0, #100	; 0x64
 8008548:	f7f9 f82a 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800854c:	2300      	movs	r3, #0
 800854e:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker connection esp8266 */
	printf("(DBG:) Trying to connect to MQTT broker esp8266\r\n");
 8008550:	481a      	ldr	r0, [pc, #104]	; (80085bc <esp8266_SetupConnect_BrokerMQTT+0xcc>)
 8008552:	f004 fb9f 	bl	800cc94 <puts>
	mqtt_config_step++;
 8008556:	4b17      	ldr	r3, [pc, #92]	; (80085b4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	3301      	adds	r3, #1
 800855c:	b2da      	uxtb	r2, r3
 800855e:	4b15      	ldr	r3, [pc, #84]	; (80085b4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8008560:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 8008562:	e016      	b.n	8008592 <esp8266_SetupConnect_BrokerMQTT+0xa2>
		retry_count++;
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	3301      	adds	r3, #1
 8008568:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 800856a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800856e:	f7f9 f817 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	2b03      	cmp	r3, #3
 8008576:	d90c      	bls.n	8008592 <esp8266_SetupConnect_BrokerMQTT+0xa2>
			printf("(DBG:) connection MQTT broker failed\r\n");
 8008578:	4811      	ldr	r0, [pc, #68]	; (80085c0 <esp8266_SetupConnect_BrokerMQTT+0xd0>)
 800857a:	f004 fb8b 	bl	800cc94 <puts>
			retry_count = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 8008582:	4b0c      	ldr	r3, [pc, #48]	; (80085b4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	3b01      	subs	r3, #1
 8008588:	b2da      	uxtb	r2, r3
 800858a:	4b0a      	ldr	r3, [pc, #40]	; (80085b4 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800858c:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 800858e:	2300      	movs	r3, #0
 8008590:	e00a      	b.n	80085a8 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 8008592:	f7ff ff61 	bl	8008458 <esp8266_ConnectBroker>
 8008596:	4603      	mov	r3, r0
 8008598:	2b06      	cmp	r3, #6
 800859a:	d9e3      	bls.n	8008564 <esp8266_SetupConnect_BrokerMQTT+0x74>
		}
	}

	HAL_Delay(100);
 800859c:	2064      	movs	r0, #100	; 0x64
 800859e:	f7f8 ffff 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 80085a2:	2300      	movs	r3, #0
 80085a4:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED_MQTT;
 80085a6:	2301      	movs	r3, #1
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	0800e918 	.word	0x0800e918
 80085b4:	20000f71 	.word	0x20000f71
 80085b8:	0800e950 	.word	0x0800e950
 80085bc:	0800e97c 	.word	0x0800e97c
 80085c0:	0800e9b0 	.word	0x0800e9b0

080085c4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085ce:	f107 0308 	add.w	r3, r7, #8
 80085d2:	2218      	movs	r2, #24
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 f8d8 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 80085dc:	233f      	movs	r3, #63	; 0x3f
 80085de:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80085e0:	2381      	movs	r3, #129	; 0x81
 80085e2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80085e4:	1dfb      	adds	r3, r7, #7
 80085e6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80085e8:	2301      	movs	r3, #1
 80085ea:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085ec:	f107 0308 	add.w	r3, r7, #8
 80085f0:	2100      	movs	r1, #0
 80085f2:	4618      	mov	r0, r3
 80085f4:	f001 fb54 	bl	8009ca0 <hci_send_req>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	da01      	bge.n	8008602 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80085fe:	23ff      	movs	r3, #255	; 0xff
 8008600:	e000      	b.n	8008604 <aci_gap_set_non_discoverable+0x40>
  return status;
 8008602:	79fb      	ldrb	r3, [r7, #7]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3720      	adds	r7, #32
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800860c:	b5b0      	push	{r4, r5, r7, lr}
 800860e:	b0ce      	sub	sp, #312	; 0x138
 8008610:	af00      	add	r7, sp, #0
 8008612:	4605      	mov	r5, r0
 8008614:	460c      	mov	r4, r1
 8008616:	4610      	mov	r0, r2
 8008618:	4619      	mov	r1, r3
 800861a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800861e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008622:	462a      	mov	r2, r5
 8008624:	701a      	strb	r2, [r3, #0]
 8008626:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800862a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800862e:	4622      	mov	r2, r4
 8008630:	801a      	strh	r2, [r3, #0]
 8008632:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008636:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800863a:	4602      	mov	r2, r0
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008642:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008646:	460a      	mov	r2, r1
 8008648:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800864a:	f107 0310 	add.w	r3, r7, #16
 800864e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008652:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008656:	3308      	adds	r3, #8
 8008658:	f107 0210 	add.w	r2, r7, #16
 800865c:	4413      	add	r3, r2
 800865e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008662:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008666:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800866a:	4413      	add	r3, r2
 800866c:	3309      	adds	r3, #9
 800866e:	f107 0210 	add.w	r2, r7, #16
 8008672:	4413      	add	r3, r2
 8008674:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008678:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800867c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008680:	2200      	movs	r2, #0
 8008682:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800868a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800868e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008692:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008696:	7812      	ldrb	r2, [r2, #0]
 8008698:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800869a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800869e:	3301      	adds	r3, #1
 80086a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80086a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086a8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80086ac:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80086b0:	8812      	ldrh	r2, [r2, #0]
 80086b2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80086b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086ba:	3302      	adds	r3, #2
 80086bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80086c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086c4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80086c8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80086cc:	8812      	ldrh	r2, [r2, #0]
 80086ce:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80086d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086d6:	3302      	adds	r3, #2
 80086d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80086dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086e0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80086e4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80086e8:	7812      	ldrb	r2, [r2, #0]
 80086ea:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80086ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086f0:	3301      	adds	r3, #1
 80086f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80086f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086fa:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80086fe:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008700:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008704:	3301      	adds	r3, #1
 8008706:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800870a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800870e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008712:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008714:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008718:	3301      	adds	r3, #1
 800871a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800871e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008722:	3308      	adds	r3, #8
 8008724:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008728:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800872c:	4618      	mov	r0, r3
 800872e:	f001 f81d 	bl	800976c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008732:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008736:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800873a:	4413      	add	r3, r2
 800873c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008740:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008744:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008748:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800874a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800874e:	3301      	adds	r3, #1
 8008750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008754:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008758:	3301      	adds	r3, #1
 800875a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800875e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008762:	4618      	mov	r0, r3
 8008764:	f001 f802 	bl	800976c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008768:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800876c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008770:	4413      	add	r3, r2
 8008772:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8008776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800877a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800877e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008780:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008784:	3302      	adds	r3, #2
 8008786:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800878a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800878e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008792:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008794:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008798:	3302      	adds	r3, #2
 800879a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800879e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087a2:	2218      	movs	r2, #24
 80087a4:	2100      	movs	r1, #0
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fff0 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 80087ac:	233f      	movs	r3, #63	; 0x3f
 80087ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80087b2:	2383      	movs	r3, #131	; 0x83
 80087b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80087b8:	f107 0310 	add.w	r3, r7, #16
 80087bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80087c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80087c8:	f107 030f 	add.w	r3, r7, #15
 80087cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80087d0:	2301      	movs	r3, #1
 80087d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087da:	2100      	movs	r1, #0
 80087dc:	4618      	mov	r0, r3
 80087de:	f001 fa5f 	bl	8009ca0 <hci_send_req>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	da01      	bge.n	80087ec <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80087e8:	23ff      	movs	r3, #255	; 0xff
 80087ea:	e004      	b.n	80087f6 <aci_gap_set_discoverable+0x1ea>
  return status;
 80087ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80087f0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80087f4:	781b      	ldrb	r3, [r3, #0]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bdb0      	pop	{r4, r5, r7, pc}

08008800 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b0cc      	sub	sp, #304	; 0x130
 8008804:	af00      	add	r7, sp, #0
 8008806:	4602      	mov	r2, r0
 8008808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008810:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008812:	f107 0310 	add.w	r3, r7, #16
 8008816:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800881a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800881e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008822:	2200      	movs	r2, #0
 8008824:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008826:	2300      	movs	r3, #0
 8008828:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800882c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008830:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008834:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008838:	7812      	ldrb	r2, [r2, #0]
 800883a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800883c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008840:	3301      	adds	r3, #1
 8008842:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800884a:	2218      	movs	r2, #24
 800884c:	2100      	movs	r1, #0
 800884e:	4618      	mov	r0, r3
 8008850:	f000 ff9c 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008854:	233f      	movs	r3, #63	; 0x3f
 8008856:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800885a:	2385      	movs	r3, #133	; 0x85
 800885c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008860:	f107 0310 	add.w	r3, r7, #16
 8008864:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008868:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800886c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008870:	f107 030f 	add.w	r3, r7, #15
 8008874:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008878:	2301      	movs	r3, #1
 800887a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800887e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008882:	2100      	movs	r1, #0
 8008884:	4618      	mov	r0, r3
 8008886:	f001 fa0b 	bl	8009ca0 <hci_send_req>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	da01      	bge.n	8008894 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008890:	23ff      	movs	r3, #255	; 0xff
 8008892:	e004      	b.n	800889e <aci_gap_set_io_capability+0x9e>
  return status;
 8008894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008898:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800889c:	781b      	ldrb	r3, [r3, #0]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80088a8:	b5b0      	push	{r4, r5, r7, lr}
 80088aa:	b0cc      	sub	sp, #304	; 0x130
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4605      	mov	r5, r0
 80088b0:	460c      	mov	r4, r1
 80088b2:	4610      	mov	r0, r2
 80088b4:	4619      	mov	r1, r3
 80088b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ba:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80088be:	462a      	mov	r2, r5
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80088ca:	4622      	mov	r2, r4
 80088cc:	701a      	strb	r2, [r3, #0]
 80088ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80088d6:	4602      	mov	r2, r0
 80088d8:	701a      	strb	r2, [r3, #0]
 80088da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088e2:	460a      	mov	r2, r1
 80088e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80088e6:	f107 0310 	add.w	r3, r7, #16
 80088ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80088ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80088f6:	2200      	movs	r2, #0
 80088f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80088fa:	2300      	movs	r3, #0
 80088fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008904:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008908:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800890c:	7812      	ldrb	r2, [r2, #0]
 800890e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008910:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008914:	3301      	adds	r3, #1
 8008916:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800891a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800891e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008922:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008926:	7812      	ldrb	r2, [r2, #0]
 8008928:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800892a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800892e:	3301      	adds	r3, #1
 8008930:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008938:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800893c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008940:	7812      	ldrb	r2, [r2, #0]
 8008942:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008944:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008948:	3301      	adds	r3, #1
 800894a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800894e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008952:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008956:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800895a:	7812      	ldrb	r2, [r2, #0]
 800895c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800895e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008962:	3301      	adds	r3, #1
 8008964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008970:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008972:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008976:	3301      	adds	r3, #1
 8008978:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800897c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008980:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008984:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008986:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800898a:	3301      	adds	r3, #1
 800898c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008994:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008998:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800899a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800899e:	3301      	adds	r3, #1
 80089a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80089a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80089ac:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80089b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089b4:	3304      	adds	r3, #4
 80089b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80089ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089be:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80089c2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80089c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089c8:	3301      	adds	r3, #1
 80089ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089d2:	2218      	movs	r2, #24
 80089d4:	2100      	movs	r1, #0
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fed8 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 80089dc:	233f      	movs	r3, #63	; 0x3f
 80089de:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80089e2:	2386      	movs	r3, #134	; 0x86
 80089e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80089e8:	f107 0310 	add.w	r3, r7, #16
 80089ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089f8:	f107 030f 	add.w	r3, r7, #15
 80089fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008a00:	2301      	movs	r3, #1
 8008a02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 f947 	bl	8009ca0 <hci_send_req>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	da01      	bge.n	8008a1c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008a18:	23ff      	movs	r3, #255	; 0xff
 8008a1a:	e004      	b.n	8008a26 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a20:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a24:	781b      	ldrb	r3, [r3, #0]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bdb0      	pop	{r4, r5, r7, pc}

08008a30 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b0cc      	sub	sp, #304	; 0x130
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4602      	mov	r2, r0
 8008a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a40:	6019      	str	r1, [r3, #0]
 8008a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a46:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008a4a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008a4c:	f107 0310 	add.w	r3, r7, #16
 8008a50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a58:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a6e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008a72:	8812      	ldrh	r2, [r2, #0]
 8008a74:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a7a:	3302      	adds	r3, #2
 8008a7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8008a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a88:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008a8c:	6812      	ldr	r2, [r2, #0]
 8008a8e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a96:	3304      	adds	r3, #4
 8008a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008aa0:	2218      	movs	r2, #24
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f000 fe71 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008aaa:	233f      	movs	r3, #63	; 0x3f
 8008aac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008ab0:	2388      	movs	r3, #136	; 0x88
 8008ab2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ab6:	f107 0310 	add.w	r3, r7, #16
 8008aba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ac2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ac6:	f107 030f 	add.w	r3, r7, #15
 8008aca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ad4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ad8:	2100      	movs	r1, #0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f001 f8e0 	bl	8009ca0 <hci_send_req>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	da01      	bge.n	8008aea <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8008ae6:	23ff      	movs	r3, #255	; 0xff
 8008ae8:	e004      	b.n	8008af4 <aci_gap_pass_key_resp+0xc4>
  return status;
 8008aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aee:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008af2:	781b      	ldrb	r3, [r3, #0]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008afe:	b590      	push	{r4, r7, lr}
 8008b00:	b0cd      	sub	sp, #308	; 0x134
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	4604      	mov	r4, r0
 8008b06:	4608      	mov	r0, r1
 8008b08:	4611      	mov	r1, r2
 8008b0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b0e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b18:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	701a      	strb	r2, [r3, #0]
 8008b20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b24:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008b28:	4602      	mov	r2, r0
 8008b2a:	701a      	strb	r2, [r3, #0]
 8008b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b30:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008b34:	460a      	mov	r2, r1
 8008b36:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008b38:	f107 0310 	add.w	r3, r7, #16
 8008b3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008b40:	f107 0308 	add.w	r3, r7, #8
 8008b44:	2207      	movs	r2, #7
 8008b46:	2100      	movs	r1, #0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f000 fe1f 	bl	800978c <Osal_MemSet>
  int index_input = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b5c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008b60:	7812      	ldrb	r2, [r2, #0]
 8008b62:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b68:	3301      	adds	r3, #1
 8008b6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008b6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b76:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008b7a:	7812      	ldrb	r2, [r2, #0]
 8008b7c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008b7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b82:	3301      	adds	r3, #1
 8008b84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b90:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008b94:	7812      	ldrb	r2, [r2, #0]
 8008b96:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008b98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ba2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ba6:	2218      	movs	r2, #24
 8008ba8:	2100      	movs	r1, #0
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fdee 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008bb0:	233f      	movs	r3, #63	; 0x3f
 8008bb2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008bb6:	238a      	movs	r3, #138	; 0x8a
 8008bb8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008bbc:	f107 0310 	add.w	r3, r7, #16
 8008bc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008bc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008bcc:	f107 0308 	add.w	r3, r7, #8
 8008bd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008bd4:	2307      	movs	r3, #7
 8008bd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008bde:	2100      	movs	r1, #0
 8008be0:	4618      	mov	r0, r3
 8008be2:	f001 f85d 	bl	8009ca0 <hci_send_req>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	da01      	bge.n	8008bf0 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008bec:	23ff      	movs	r3, #255	; 0xff
 8008bee:	e02e      	b.n	8008c4e <aci_gap_init+0x150>
  if ( resp.Status )
 8008bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d005      	beq.n	8008c0a <aci_gap_init+0x10c>
    return resp.Status;
 8008bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c02:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	e021      	b.n	8008c4e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008c12:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c28:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008c2c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008c36:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008c40:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008c4a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd90      	pop	{r4, r7, pc}

08008c58 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b0cc      	sub	sp, #304	; 0x130
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4602      	mov	r2, r0
 8008c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c68:	6019      	str	r1, [r3, #0]
 8008c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008c72:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008c74:	f107 0310 	add.w	r3, r7, #16
 8008c78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c80:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c84:	2200      	movs	r2, #0
 8008c86:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c96:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008c9a:	7812      	ldrb	r2, [r2, #0]
 8008c9c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cac:	1c58      	adds	r0, r3, #1
 8008cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008cb6:	781a      	ldrb	r2, [r3, #0]
 8008cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cc0:	6819      	ldr	r1, [r3, #0]
 8008cc2:	f000 fd53 	bl	800976c <Osal_MemCpy>
  index_input += AdvDataLen;
 8008cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cde:	2218      	movs	r2, #24
 8008ce0:	2100      	movs	r1, #0
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fd52 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ce8:	233f      	movs	r3, #63	; 0x3f
 8008cea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008cee:	238e      	movs	r3, #142	; 0x8e
 8008cf0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008cf4:	f107 0310 	add.w	r3, r7, #16
 8008cf8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008cfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d04:	f107 030f 	add.w	r3, r7, #15
 8008d08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d16:	2100      	movs	r1, #0
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 ffc1 	bl	8009ca0 <hci_send_req>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	da01      	bge.n	8008d28 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008d24:	23ff      	movs	r3, #255	; 0xff
 8008d26:	e004      	b.n	8008d32 <aci_gap_update_adv_data+0xda>
  return status;
 8008d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d2c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d30:	781b      	ldrb	r3, [r3, #0]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b088      	sub	sp, #32
 8008d40:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008d42:	2300      	movs	r3, #0
 8008d44:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d46:	f107 0308 	add.w	r3, r7, #8
 8008d4a:	2218      	movs	r2, #24
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fd1c 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d54:	233f      	movs	r3, #63	; 0x3f
 8008d56:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008d58:	2392      	movs	r3, #146	; 0x92
 8008d5a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008d5c:	1dfb      	adds	r3, r7, #7
 8008d5e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008d60:	2301      	movs	r3, #1
 8008d62:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d64:	f107 0308 	add.w	r3, r7, #8
 8008d68:	2100      	movs	r1, #0
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 ff98 	bl	8009ca0 <hci_send_req>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	da01      	bge.n	8008d7a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008d76:	23ff      	movs	r3, #255	; 0xff
 8008d78:	e000      	b.n	8008d7c <aci_gap_configure_whitelist+0x40>
  return status;
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3720      	adds	r7, #32
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b0cc      	sub	sp, #304	; 0x130
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d90:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008d94:	801a      	strh	r2, [r3, #0]
 8008d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d9a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008d9e:	460a      	mov	r2, r1
 8008da0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008da2:	f107 0310 	add.w	r3, r7, #16
 8008da6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008db2:	2200      	movs	r2, #0
 8008db4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008dc4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008dc8:	8812      	ldrh	r2, [r2, #0]
 8008dca:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008dde:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dea:	3301      	adds	r3, #1
 8008dec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008df0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008df4:	2218      	movs	r2, #24
 8008df6:	2100      	movs	r1, #0
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 fcc7 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008dfe:	233f      	movs	r3, #63	; 0x3f
 8008e00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008e04:	23a5      	movs	r3, #165	; 0xa5
 8008e06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e0a:	f107 0310 	add.w	r3, r7, #16
 8008e0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008e1a:	f107 030f 	add.w	r3, r7, #15
 8008e1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008e22:	2301      	movs	r3, #1
 8008e24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 ff36 	bl	8009ca0 <hci_send_req>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	da01      	bge.n	8008e3e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008e3a:	23ff      	movs	r3, #255	; 0xff
 8008e3c:	e004      	b.n	8008e48 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008e46:	781b      	ldrb	r3, [r3, #0]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b088      	sub	sp, #32
 8008e56:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e5c:	f107 0308 	add.w	r3, r7, #8
 8008e60:	2218      	movs	r2, #24
 8008e62:	2100      	movs	r1, #0
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 fc91 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e6a:	233f      	movs	r3, #63	; 0x3f
 8008e6c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008e6e:	f240 1301 	movw	r3, #257	; 0x101
 8008e72:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008e74:	1dfb      	adds	r3, r7, #7
 8008e76:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e7c:	f107 0308 	add.w	r3, r7, #8
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 ff0c 	bl	8009ca0 <hci_send_req>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	da01      	bge.n	8008e92 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008e8e:	23ff      	movs	r3, #255	; 0xff
 8008e90:	e000      	b.n	8008e94 <aci_gatt_init+0x42>
  return status;
 8008e92:	79fb      	ldrb	r3, [r7, #7]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3720      	adds	r7, #32
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008e9c:	b590      	push	{r4, r7, lr}
 8008e9e:	b0cf      	sub	sp, #316	; 0x13c
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008ea8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008eac:	6001      	str	r1, [r0, #0]
 8008eae:	4610      	mov	r0, r2
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008eb6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008eba:	4622      	mov	r2, r4
 8008ebc:	701a      	strb	r2, [r3, #0]
 8008ebe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ec2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ece:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008ed2:	460a      	mov	r2, r1
 8008ed4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008ed6:	f107 0310 	add.w	r3, r7, #16
 8008eda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008ede:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ee2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d00a      	beq.n	8008f02 <aci_gatt_add_service+0x66>
 8008eec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ef0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d101      	bne.n	8008efe <aci_gatt_add_service+0x62>
 8008efa:	2311      	movs	r3, #17
 8008efc:	e002      	b.n	8008f04 <aci_gatt_add_service+0x68>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e000      	b.n	8008f04 <aci_gatt_add_service+0x68>
 8008f02:	2303      	movs	r3, #3
 8008f04:	f107 0210 	add.w	r2, r7, #16
 8008f08:	4413      	add	r3, r2
 8008f0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008f0e:	f107 030c 	add.w	r3, r7, #12
 8008f12:	2203      	movs	r2, #3
 8008f14:	2100      	movs	r1, #0
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 fc38 	bl	800978c <Osal_MemSet>
  int index_input = 0;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008f22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f26:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008f2a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008f2e:	7812      	ldrb	r2, [r2, #0]
 8008f30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008f32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f36:	3301      	adds	r3, #1
 8008f38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008f3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f40:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d002      	beq.n	8008f50 <aci_gatt_add_service+0xb4>
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d004      	beq.n	8008f58 <aci_gatt_add_service+0xbc>
 8008f4e:	e007      	b.n	8008f60 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008f50:	2302      	movs	r3, #2
 8008f52:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008f56:	e005      	b.n	8008f64 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008f58:	2310      	movs	r3, #16
 8008f5a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008f5e:	e001      	b.n	8008f64 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008f60:	2397      	movs	r3, #151	; 0x97
 8008f62:	e06c      	b.n	800903e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008f64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f68:	1c58      	adds	r0, r3, #1
 8008f6a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008f6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008f76:	6819      	ldr	r1, [r3, #0]
 8008f78:	f000 fbf8 	bl	800976c <Osal_MemCpy>
    index_input += size;
 8008f7c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008f80:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008f84:	4413      	add	r3, r2
 8008f86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f8e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008f92:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008f96:	7812      	ldrb	r2, [r2, #0]
 8008f98:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fa8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008fac:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008fb0:	7812      	ldrb	r2, [r2, #0]
 8008fb2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fb8:	3301      	adds	r3, #1
 8008fba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008fbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fc2:	2218      	movs	r2, #24
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fbe0 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008fcc:	233f      	movs	r3, #63	; 0x3f
 8008fce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008fd2:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008fd6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008fda:	f107 0310 	add.w	r3, r7, #16
 8008fde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008fe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fe6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ff8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fe4e 	bl	8009ca0 <hci_send_req>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	da01      	bge.n	800900e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800900a:	23ff      	movs	r3, #255	; 0xff
 800900c:	e017      	b.n	800903e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800900e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009012:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d005      	beq.n	8009028 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800901c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	e00a      	b.n	800903e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009028:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800902c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009030:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009034:	b29a      	uxth	r2, r3
 8009036:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800903a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009044:	46bd      	mov	sp, r7
 8009046:	bd90      	pop	{r4, r7, pc}

08009048 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009048:	b590      	push	{r4, r7, lr}
 800904a:	b0d1      	sub	sp, #324	; 0x144
 800904c:	af00      	add	r7, sp, #0
 800904e:	4604      	mov	r4, r0
 8009050:	4608      	mov	r0, r1
 8009052:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009056:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800905a:	600a      	str	r2, [r1, #0]
 800905c:	4619      	mov	r1, r3
 800905e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009062:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009066:	4622      	mov	r2, r4
 8009068:	801a      	strh	r2, [r3, #0]
 800906a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800906e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009072:	4602      	mov	r2, r0
 8009074:	701a      	strb	r2, [r3, #0]
 8009076:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800907a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800907e:	460a      	mov	r2, r1
 8009080:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009082:	f107 0318 	add.w	r3, r7, #24
 8009086:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800908a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800908e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d00a      	beq.n	80090ae <aci_gatt_add_char+0x66>
 8009098:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800909c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d101      	bne.n	80090aa <aci_gatt_add_char+0x62>
 80090a6:	2313      	movs	r3, #19
 80090a8:	e002      	b.n	80090b0 <aci_gatt_add_char+0x68>
 80090aa:	2303      	movs	r3, #3
 80090ac:	e000      	b.n	80090b0 <aci_gatt_add_char+0x68>
 80090ae:	2305      	movs	r3, #5
 80090b0:	f107 0218 	add.w	r2, r7, #24
 80090b4:	4413      	add	r3, r2
 80090b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80090ba:	f107 0314 	add.w	r3, r7, #20
 80090be:	2203      	movs	r2, #3
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fb62 	bl	800978c <Osal_MemSet>
  int index_input = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80090ce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80090d2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80090d6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80090da:	8812      	ldrh	r2, [r2, #0]
 80090dc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80090de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090e2:	3302      	adds	r3, #2
 80090e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80090e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80090ec:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80090f0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80090f4:	7812      	ldrb	r2, [r2, #0]
 80090f6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80090f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090fc:	3301      	adds	r3, #1
 80090fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009102:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009106:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d002      	beq.n	8009116 <aci_gatt_add_char+0xce>
 8009110:	2b02      	cmp	r3, #2
 8009112:	d004      	beq.n	800911e <aci_gatt_add_char+0xd6>
 8009114:	e007      	b.n	8009126 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009116:	2302      	movs	r3, #2
 8009118:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800911c:	e005      	b.n	800912a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800911e:	2310      	movs	r3, #16
 8009120:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009124:	e001      	b.n	800912a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009126:	2397      	movs	r3, #151	; 0x97
 8009128:	e091      	b.n	800924e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800912a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800912e:	1cd8      	adds	r0, r3, #3
 8009130:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009134:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009138:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800913c:	6819      	ldr	r1, [r3, #0]
 800913e:	f000 fb15 	bl	800976c <Osal_MemCpy>
    index_input += size;
 8009142:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009146:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800914a:	4413      	add	r3, r2
 800914c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009150:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009154:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009158:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800915c:	8812      	ldrh	r2, [r2, #0]
 800915e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009160:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009164:	3302      	adds	r3, #2
 8009166:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800916a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800916e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009172:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009174:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009178:	3301      	adds	r3, #1
 800917a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800917e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009182:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009186:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009188:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800918c:	3301      	adds	r3, #1
 800918e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009192:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009196:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800919a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800919c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091a0:	3301      	adds	r3, #1
 80091a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80091a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091aa:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80091ae:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80091b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091b4:	3301      	adds	r3, #1
 80091b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80091ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091be:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80091c2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80091c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091c8:	3301      	adds	r3, #1
 80091ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091ce:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80091d2:	2218      	movs	r2, #24
 80091d4:	2100      	movs	r1, #0
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 fad8 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 80091dc:	233f      	movs	r3, #63	; 0x3f
 80091de:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80091e2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80091e6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80091ea:	f107 0318 	add.w	r3, r7, #24
 80091ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80091f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80091fa:	f107 0314 	add.w	r3, r7, #20
 80091fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009202:	2303      	movs	r3, #3
 8009204:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009208:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800920c:	2100      	movs	r1, #0
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fd46 	bl	8009ca0 <hci_send_req>
 8009214:	4603      	mov	r3, r0
 8009216:	2b00      	cmp	r3, #0
 8009218:	da01      	bge.n	800921e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800921a:	23ff      	movs	r3, #255	; 0xff
 800921c:	e017      	b.n	800924e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800921e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d005      	beq.n	8009238 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800922c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	e00a      	b.n	800924e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009238:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800923c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009240:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009244:	b29a      	uxth	r2, r3
 8009246:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800924a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009254:	46bd      	mov	sp, r7
 8009256:	bd90      	pop	{r4, r7, pc}

08009258 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009258:	b5b0      	push	{r4, r5, r7, lr}
 800925a:	b0cc      	sub	sp, #304	; 0x130
 800925c:	af00      	add	r7, sp, #0
 800925e:	4605      	mov	r5, r0
 8009260:	460c      	mov	r4, r1
 8009262:	4610      	mov	r0, r2
 8009264:	4619      	mov	r1, r3
 8009266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800926a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800926e:	462a      	mov	r2, r5
 8009270:	801a      	strh	r2, [r3, #0]
 8009272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009276:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800927a:	4622      	mov	r2, r4
 800927c:	801a      	strh	r2, [r3, #0]
 800927e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009282:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009286:	4602      	mov	r2, r0
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800928e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009292:	460a      	mov	r2, r1
 8009294:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009296:	f107 0310 	add.w	r3, r7, #16
 800929a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800929e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092a6:	2200      	movs	r2, #0
 80092a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80092b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092b8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80092bc:	8812      	ldrh	r2, [r2, #0]
 80092be:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80092c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092c4:	3302      	adds	r3, #2
 80092c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80092ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092d2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80092d6:	8812      	ldrh	r2, [r2, #0]
 80092d8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80092da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092de:	3302      	adds	r3, #2
 80092e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80092e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092ec:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80092f0:	7812      	ldrb	r2, [r2, #0]
 80092f2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80092f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092f8:	3301      	adds	r3, #1
 80092fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80092fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009302:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009306:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800930a:	7812      	ldrb	r2, [r2, #0]
 800930c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800930e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009312:	3301      	adds	r3, #1
 8009314:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800931c:	1d98      	adds	r0, r3, #6
 800931e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009322:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	461a      	mov	r2, r3
 800932a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800932e:	f000 fa1d 	bl	800976c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009336:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009340:	4413      	add	r3, r2
 8009342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800934a:	2218      	movs	r2, #24
 800934c:	2100      	movs	r1, #0
 800934e:	4618      	mov	r0, r3
 8009350:	f000 fa1c 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009354:	233f      	movs	r3, #63	; 0x3f
 8009356:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800935a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800935e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009362:	f107 0310 	add.w	r3, r7, #16
 8009366:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800936a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800936e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009372:	f107 030f 	add.w	r3, r7, #15
 8009376:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800937a:	2301      	movs	r3, #1
 800937c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009380:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009384:	2100      	movs	r1, #0
 8009386:	4618      	mov	r0, r3
 8009388:	f000 fc8a 	bl	8009ca0 <hci_send_req>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	da01      	bge.n	8009396 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009392:	23ff      	movs	r3, #255	; 0xff
 8009394:	e004      	b.n	80093a0 <aci_gatt_update_char_value+0x148>
  return status;
 8009396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800939a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800939e:	781b      	ldrb	r3, [r3, #0]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bdb0      	pop	{r4, r5, r7, pc}

080093aa <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b0cc      	sub	sp, #304	; 0x130
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093be:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80093c2:	4602      	mov	r2, r0
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80093ce:	460a      	mov	r2, r1
 80093d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80093d2:	f107 0310 	add.w	r3, r7, #16
 80093d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80093da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80093e2:	2200      	movs	r2, #0
 80093e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80093ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093f4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80093f8:	7812      	ldrb	r2, [r2, #0]
 80093fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80093fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009400:	3301      	adds	r3, #1
 8009402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800940a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800940e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009412:	7812      	ldrb	r2, [r2, #0]
 8009414:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800941a:	3301      	adds	r3, #1
 800941c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009424:	1c98      	adds	r0, r3, #2
 8009426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800942a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800942e:	781a      	ldrb	r2, [r3, #0]
 8009430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009434:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009438:	6819      	ldr	r1, [r3, #0]
 800943a:	f000 f997 	bl	800976c <Osal_MemCpy>
  index_input += Length;
 800943e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009442:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800944c:	4413      	add	r3, r2
 800944e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009452:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009456:	2218      	movs	r2, #24
 8009458:	2100      	movs	r1, #0
 800945a:	4618      	mov	r0, r3
 800945c:	f000 f996 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009460:	233f      	movs	r3, #63	; 0x3f
 8009462:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009466:	230c      	movs	r3, #12
 8009468:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800946c:	f107 0310 	add.w	r3, r7, #16
 8009470:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009474:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009478:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800947c:	f107 030f 	add.w	r3, r7, #15
 8009480:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009484:	2301      	movs	r3, #1
 8009486:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800948a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800948e:	2100      	movs	r1, #0
 8009490:	4618      	mov	r0, r3
 8009492:	f000 fc05 	bl	8009ca0 <hci_send_req>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	da01      	bge.n	80094a0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800949c:	23ff      	movs	r3, #255	; 0xff
 800949e:	e004      	b.n	80094aa <aci_hal_write_config_data+0x100>
  return status;
 80094a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094a8:	781b      	ldrb	r3, [r3, #0]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b0cc      	sub	sp, #304	; 0x130
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	4602      	mov	r2, r0
 80094bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80094c4:	701a      	strb	r2, [r3, #0]
 80094c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80094ce:	460a      	mov	r2, r1
 80094d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80094d2:	f107 0310 	add.w	r3, r7, #16
 80094d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80094da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094e2:	2200      	movs	r2, #0
 80094e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80094ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094f4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80094f8:	7812      	ldrb	r2, [r2, #0]
 80094fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80094fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009500:	3301      	adds	r3, #1
 8009502:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800950a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800950e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009512:	7812      	ldrb	r2, [r2, #0]
 8009514:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009516:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800951a:	3301      	adds	r3, #1
 800951c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009520:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009524:	2218      	movs	r2, #24
 8009526:	2100      	movs	r1, #0
 8009528:	4618      	mov	r0, r3
 800952a:	f000 f92f 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 800952e:	233f      	movs	r3, #63	; 0x3f
 8009530:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009534:	230f      	movs	r3, #15
 8009536:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800953a:	f107 0310 	add.w	r3, r7, #16
 800953e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009546:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800954a:	f107 030f 	add.w	r3, r7, #15
 800954e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009552:	2301      	movs	r3, #1
 8009554:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009558:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800955c:	2100      	movs	r1, #0
 800955e:	4618      	mov	r0, r3
 8009560:	f000 fb9e 	bl	8009ca0 <hci_send_req>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	da01      	bge.n	800956e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800956a:	23ff      	movs	r3, #255	; 0xff
 800956c:	e004      	b.n	8009578 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800956e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009572:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009576:	781b      	ldrb	r3, [r3, #0]
}
 8009578:	4618      	mov	r0, r3
 800957a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b0cc      	sub	sp, #304	; 0x130
 8009586:	af00      	add	r7, sp, #0
 8009588:	4602      	mov	r2, r0
 800958a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800958e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009592:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009594:	f107 0310 	add.w	r3, r7, #16
 8009598:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800959c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095a4:	2200      	movs	r2, #0
 80095a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80095ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095b6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80095ba:	8812      	ldrh	r2, [r2, #0]
 80095bc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80095be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095c2:	3302      	adds	r3, #2
 80095c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095cc:	2218      	movs	r2, #24
 80095ce:	2100      	movs	r1, #0
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 f8db 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x3f;
 80095d6:	233f      	movs	r3, #63	; 0x3f
 80095d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80095dc:	2318      	movs	r3, #24
 80095de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80095e2:	f107 0310 	add.w	r3, r7, #16
 80095e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80095ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80095f2:	f107 030f 	add.w	r3, r7, #15
 80095f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80095fa:	2301      	movs	r3, #1
 80095fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009600:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009604:	2100      	movs	r1, #0
 8009606:	4618      	mov	r0, r3
 8009608:	f000 fb4a 	bl	8009ca0 <hci_send_req>
 800960c:	4603      	mov	r3, r0
 800960e:	2b00      	cmp	r3, #0
 8009610:	da01      	bge.n	8009616 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009612:	23ff      	movs	r3, #255	; 0xff
 8009614:	e004      	b.n	8009620 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800961a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800961e:	781b      	ldrb	r3, [r3, #0]
}
 8009620:	4618      	mov	r0, r3
 8009622:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b088      	sub	sp, #32
 800962e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009634:	f107 0308 	add.w	r3, r7, #8
 8009638:	2218      	movs	r2, #24
 800963a:	2100      	movs	r1, #0
 800963c:	4618      	mov	r0, r3
 800963e:	f000 f8a5 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x03;
 8009642:	2303      	movs	r3, #3
 8009644:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009646:	2303      	movs	r3, #3
 8009648:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800964a:	1dfb      	adds	r3, r7, #7
 800964c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800964e:	2301      	movs	r3, #1
 8009650:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009652:	f107 0308 	add.w	r3, r7, #8
 8009656:	2100      	movs	r1, #0
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fb21 	bl	8009ca0 <hci_send_req>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	da01      	bge.n	8009668 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009664:	23ff      	movs	r3, #255	; 0xff
 8009666:	e000      	b.n	800966a <hci_reset+0x40>
  return status;
 8009668:	79fb      	ldrb	r3, [r7, #7]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3720      	adds	r7, #32
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009672:	b590      	push	{r4, r7, lr}
 8009674:	b0cd      	sub	sp, #308	; 0x134
 8009676:	af00      	add	r7, sp, #0
 8009678:	4604      	mov	r4, r0
 800967a:	4608      	mov	r0, r1
 800967c:	4611      	mov	r1, r2
 800967e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009682:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009686:	4622      	mov	r2, r4
 8009688:	701a      	strb	r2, [r3, #0]
 800968a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800968e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009692:	4602      	mov	r2, r0
 8009694:	701a      	strb	r2, [r3, #0]
 8009696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800969a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800969e:	460a      	mov	r2, r1
 80096a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80096a2:	f107 0310 	add.w	r3, r7, #16
 80096a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80096aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096b2:	2200      	movs	r2, #0
 80096b4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80096bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096c4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80096c8:	7812      	ldrb	r2, [r2, #0]
 80096ca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80096cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096d0:	3301      	adds	r3, #1
 80096d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80096d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096de:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80096e2:	7812      	ldrb	r2, [r2, #0]
 80096e4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80096e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096ea:	3301      	adds	r3, #1
 80096ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80096f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096f8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80096fc:	7812      	ldrb	r2, [r2, #0]
 80096fe:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009700:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009704:	3301      	adds	r3, #1
 8009706:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800970a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800970e:	2218      	movs	r2, #24
 8009710:	2100      	movs	r1, #0
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f83a 	bl	800978c <Osal_MemSet>
  rq.ogf = 0x08;
 8009718:	2308      	movs	r3, #8
 800971a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800971e:	2331      	movs	r3, #49	; 0x31
 8009720:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009724:	f107 0310 	add.w	r3, r7, #16
 8009728:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800972c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009730:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009734:	f107 030f 	add.w	r3, r7, #15
 8009738:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800973c:	2301      	movs	r3, #1
 800973e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009742:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009746:	2100      	movs	r1, #0
 8009748:	4618      	mov	r0, r3
 800974a:	f000 faa9 	bl	8009ca0 <hci_send_req>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	da01      	bge.n	8009758 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009754:	23ff      	movs	r3, #255	; 0xff
 8009756:	e004      	b.n	8009762 <hci_le_set_default_phy+0xf0>
  return status;
 8009758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800975c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009760:	781b      	ldrb	r3, [r3, #0]
}
 8009762:	4618      	mov	r0, r3
 8009764:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009768:	46bd      	mov	sp, r7
 800976a:	bd90      	pop	{r4, r7, pc}

0800976c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	68b9      	ldr	r1, [r7, #8]
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f003 f8f7 	bl	800c970 <memcpy>
 8009782:	4603      	mov	r3, r0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f003 f8f5 	bl	800c98c <memset>
 80097a2:	4603      	mov	r3, r0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
  return;
 80097b0:	bf00      	nop
}
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80097ba:	b480      	push	{r7}
 80097bc:	af00      	add	r7, sp, #0
  return;
 80097be:	bf00      	nop
}
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80097c8:	b480      	push	{r7}
 80097ca:	af00      	add	r7, sp, #0
  return;
 80097cc:	bf00      	nop
}
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80097d6:	b480      	push	{r7}
 80097d8:	af00      	add	r7, sp, #0
  return;
 80097da:	bf00      	nop
}
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
  return;
 80097e8:	bf00      	nop
}
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80097f2:	b480      	push	{r7}
 80097f4:	af00      	add	r7, sp, #0
  return;
 80097f6:	bf00      	nop
}
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009800:	b480      	push	{r7}
 8009802:	af00      	add	r7, sp, #0
  return;
 8009804:	bf00      	nop
}
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800980e:	b480      	push	{r7}
 8009810:	af00      	add	r7, sp, #0
  return;
 8009812:	bf00      	nop
}
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800981c:	b480      	push	{r7}
 800981e:	af00      	add	r7, sp, #0
  return;
 8009820:	bf00      	nop
}
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800982a:	b480      	push	{r7}
 800982c:	af00      	add	r7, sp, #0
  return;
 800982e:	bf00      	nop
}
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009838:	b480      	push	{r7}
 800983a:	af00      	add	r7, sp, #0
  return;
 800983c:	bf00      	nop
}
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009846:	b480      	push	{r7}
 8009848:	af00      	add	r7, sp, #0
  return;
 800984a:	bf00      	nop
}
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009854:	b480      	push	{r7}
 8009856:	af00      	add	r7, sp, #0
  return;
 8009858:	bf00      	nop
}
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009862:	b480      	push	{r7}
 8009864:	af00      	add	r7, sp, #0
  return;
 8009866:	bf00      	nop
}
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009870:	b480      	push	{r7}
 8009872:	af00      	add	r7, sp, #0
  return;
 8009874:	bf00      	nop
}
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr

0800987e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800987e:	b480      	push	{r7}
 8009880:	af00      	add	r7, sp, #0
  return;
 8009882:	bf00      	nop
}
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  return;
 8009890:	bf00      	nop
}
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
	...

0800989c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80098a0:	4b04      	ldr	r3, [pc, #16]	; (80098b4 <SVCCTL_Init+0x18>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80098a6:	4b04      	ldr	r3, [pc, #16]	; (80098b8 <SVCCTL_Init+0x1c>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80098ac:	f000 f806 	bl	80098bc <SVCCTL_SvcInit>

  return;
 80098b0:	bf00      	nop
}
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	2000091c 	.word	0x2000091c
 80098b8:	2000093c 	.word	0x2000093c

080098bc <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
  BAS_Init();
 80098c0:	f7ff ff74 	bl	80097ac <BAS_Init>

  BLS_Init();
 80098c4:	f7ff ff79 	bl	80097ba <BLS_Init>

  CRS_STM_Init();
 80098c8:	f7ff ff7e 	bl	80097c8 <CRS_STM_Init>

  DIS_Init();
 80098cc:	f7ff ff83 	bl	80097d6 <DIS_Init>

  EDS_STM_Init();
 80098d0:	f7ff ff88 	bl	80097e4 <EDS_STM_Init>

  HIDS_Init();
 80098d4:	f7ff ff8d 	bl	80097f2 <HIDS_Init>

  HRS_Init();
 80098d8:	f7ff ff92 	bl	8009800 <HRS_Init>

  HTS_Init();
 80098dc:	f7ff ff97 	bl	800980e <HTS_Init>

  IAS_Init();
 80098e0:	f7ff ff9c 	bl	800981c <IAS_Init>

  LLS_Init();
 80098e4:	f7ff ffa1 	bl	800982a <LLS_Init>

  TPS_Init();
 80098e8:	f7ff ffa6 	bl	8009838 <TPS_Init>

  MOTENV_STM_Init();
 80098ec:	f7ff ffab 	bl	8009846 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80098f0:	f7ff ffb0 	bl	8009854 <P2PS_STM_Init>

  ZDD_STM_Init();
 80098f4:	f7ff ffb5 	bl	8009862 <ZDD_STM_Init>

  OTAS_STM_Init();
 80098f8:	f7ff ffba 	bl	8009870 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80098fc:	f7ff ffc6 	bl	800988c <BVOPUS_STM_Init>

  MESH_Init();
 8009900:	f7ff ffbd 	bl	800987e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009904:	f002 f8ea 	bl	800badc <SVCCTL_InitCustomSvc>
  
  return;
 8009908:	bf00      	nop
}
 800990a:	bd80      	pop	{r7, pc}

0800990c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009914:	4b09      	ldr	r3, [pc, #36]	; (800993c <SVCCTL_RegisterSvcHandler+0x30>)
 8009916:	7f1b      	ldrb	r3, [r3, #28]
 8009918:	4619      	mov	r1, r3
 800991a:	4a08      	ldr	r2, [pc, #32]	; (800993c <SVCCTL_RegisterSvcHandler+0x30>)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009922:	4b06      	ldr	r3, [pc, #24]	; (800993c <SVCCTL_RegisterSvcHandler+0x30>)
 8009924:	7f1b      	ldrb	r3, [r3, #28]
 8009926:	3301      	adds	r3, #1
 8009928:	b2da      	uxtb	r2, r3
 800992a:	4b04      	ldr	r3, [pc, #16]	; (800993c <SVCCTL_RegisterSvcHandler+0x30>)
 800992c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800992e:	bf00      	nop
}
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	2000091c 	.word	0x2000091c

08009940 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3301      	adds	r3, #1
 800994c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800994e:	2300      	movs	r3, #0
 8009950:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	2bff      	cmp	r3, #255	; 0xff
 8009958:	d125      	bne.n	80099a6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	3302      	adds	r3, #2
 800995e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	b29b      	uxth	r3, r3
 8009966:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800996a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800996e:	d118      	bne.n	80099a2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009970:	2300      	movs	r3, #0
 8009972:	757b      	strb	r3, [r7, #21]
 8009974:	e00d      	b.n	8009992 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009976:	7d7b      	ldrb	r3, [r7, #21]
 8009978:	4a1a      	ldr	r2, [pc, #104]	; (80099e4 <SVCCTL_UserEvtRx+0xa4>)
 800997a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	4798      	blx	r3
 8009982:	4603      	mov	r3, r0
 8009984:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d108      	bne.n	800999e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800998c:	7d7b      	ldrb	r3, [r7, #21]
 800998e:	3301      	adds	r3, #1
 8009990:	757b      	strb	r3, [r7, #21]
 8009992:	4b14      	ldr	r3, [pc, #80]	; (80099e4 <SVCCTL_UserEvtRx+0xa4>)
 8009994:	7f1b      	ldrb	r3, [r3, #28]
 8009996:	7d7a      	ldrb	r2, [r7, #21]
 8009998:	429a      	cmp	r2, r3
 800999a:	d3ec      	bcc.n	8009976 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800999c:	e002      	b.n	80099a4 <SVCCTL_UserEvtRx+0x64>
              break;
 800999e:	bf00      	nop
          break;
 80099a0:	e000      	b.n	80099a4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80099a2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80099a4:	e000      	b.n	80099a8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80099a6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d00f      	beq.n	80099ce <SVCCTL_UserEvtRx+0x8e>
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	dc10      	bgt.n	80099d4 <SVCCTL_UserEvtRx+0x94>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d002      	beq.n	80099bc <SVCCTL_UserEvtRx+0x7c>
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d006      	beq.n	80099c8 <SVCCTL_UserEvtRx+0x88>
 80099ba:	e00b      	b.n	80099d4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fff1 	bl	800a9a4 <SVCCTL_App_Notification>
 80099c2:	4603      	mov	r3, r0
 80099c4:	75bb      	strb	r3, [r7, #22]
      break;
 80099c6:	e008      	b.n	80099da <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80099c8:	2301      	movs	r3, #1
 80099ca:	75bb      	strb	r3, [r7, #22]
      break;
 80099cc:	e005      	b.n	80099da <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80099ce:	2300      	movs	r3, #0
 80099d0:	75bb      	strb	r3, [r7, #22]
      break;
 80099d2:	e002      	b.n	80099da <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80099d4:	2301      	movs	r3, #1
 80099d6:	75bb      	strb	r3, [r7, #22]
      break;
 80099d8:	bf00      	nop
  }

  return (return_status);
 80099da:	7dbb      	ldrb	r3, [r7, #22]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	2000091c 	.word	0x2000091c

080099e8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80099f0:	f107 030c 	add.w	r3, r7, #12
 80099f4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	212e      	movs	r1, #46	; 0x2e
 8009a00:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009a04:	f000 fae2 	bl	8009fcc <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	330b      	adds	r3, #11
 8009a0c:	78db      	ldrb	r3, [r3, #3]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3720      	adds	r7, #32
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b088      	sub	sp, #32
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009a1e:	f107 030c 	add.w	r3, r7, #12
 8009a22:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	210f      	movs	r1, #15
 8009a2e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009a32:	f000 facb 	bl	8009fcc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	330b      	adds	r3, #11
 8009a3a:	78db      	ldrb	r3, [r3, #3]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3720      	adds	r7, #32
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b088      	sub	sp, #32
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009a4c:	f107 030c 	add.w	r3, r7, #12
 8009a50:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	2110      	movs	r1, #16
 8009a58:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009a5c:	f000 fab6 	bl	8009fcc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	330b      	adds	r3, #11
 8009a64:	78db      	ldrb	r3, [r3, #3]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3720      	adds	r7, #32
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b08b      	sub	sp, #44	; 0x2c
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009a90:	2300      	movs	r3, #0
 8009a92:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009a98:	4b4a      	ldr	r3, [pc, #296]	; (8009bc4 <SHCI_GetWirelessFwInfo+0x154>)
 8009a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009aa0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009aaa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a44      	ldr	r2, [pc, #272]	; (8009bc8 <SHCI_GetWirelessFwInfo+0x158>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d10f      	bne.n	8009adc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	691b      	ldr	r3, [r3, #16]
 8009ad8:	617b      	str	r3, [r7, #20]
 8009ada:	e01a      	b.n	8009b12 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009ae4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009ae8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	0e1b      	lsrs	r3, r3, #24
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1e:	0c1b      	lsrs	r3, r3, #16
 8009b20:	b2da      	uxtb	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	0a1b      	lsrs	r3, r3, #8
 8009b2a:	b2da      	uxtb	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	091b      	lsrs	r3, r3, #4
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	f003 030f 	and.w	r3, r3, #15
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	f003 030f 	and.w	r3, r3, #15
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	0e1b      	lsrs	r3, r3, #24
 8009b52:	b2da      	uxtb	r2, r3
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	0c1b      	lsrs	r3, r3, #16
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	0a1b      	lsrs	r3, r3, #8
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	b2da      	uxtb	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009b7c:	69bb      	ldr	r3, [r7, #24]
 8009b7e:	0e1b      	lsrs	r3, r3, #24
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	0c1b      	lsrs	r3, r3, #16
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	0a1b      	lsrs	r3, r3, #8
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	0e1b      	lsrs	r3, r3, #24
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	0c1b      	lsrs	r3, r3, #16
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	372c      	adds	r7, #44	; 0x2c
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	58004000 	.word	0x58004000
 8009bc8:	a94656b9 	.word	0xa94656b9

08009bcc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	4a08      	ldr	r2, [pc, #32]	; (8009bfc <hci_init+0x30>)
 8009bdc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009bde:	4a08      	ldr	r2, [pc, #32]	; (8009c00 <hci_init+0x34>)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009be4:	4806      	ldr	r0, [pc, #24]	; (8009c00 <hci_init+0x34>)
 8009be6:	f000 f973 	bl	8009ed0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 f8d4 	bl	8009d9c <TlInit>

  return;
 8009bf4:	bf00      	nop
}
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20001fe0 	.word	0x20001fe0
 8009c00:	20001fb8 	.word	0x20001fb8

08009c04 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009c0a:	4822      	ldr	r0, [pc, #136]	; (8009c94 <hci_user_evt_proc+0x90>)
 8009c0c:	f000 fd50 	bl	800a6b0 <LST_is_empty>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d12b      	bne.n	8009c6e <hci_user_evt_proc+0x6a>
 8009c16:	4b20      	ldr	r3, [pc, #128]	; (8009c98 <hci_user_evt_proc+0x94>)
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d027      	beq.n	8009c6e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009c1e:	f107 030c 	add.w	r3, r7, #12
 8009c22:	4619      	mov	r1, r3
 8009c24:	481b      	ldr	r0, [pc, #108]	; (8009c94 <hci_user_evt_proc+0x90>)
 8009c26:	f000 fdd2 	bl	800a7ce <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009c2a:	4b1c      	ldr	r3, [pc, #112]	; (8009c9c <hci_user_evt_proc+0x98>)
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00c      	beq.n	8009c4c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009c36:	2301      	movs	r3, #1
 8009c38:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009c3a:	4b18      	ldr	r3, [pc, #96]	; (8009c9c <hci_user_evt_proc+0x98>)
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	1d3a      	adds	r2, r7, #4
 8009c40:	4610      	mov	r0, r2
 8009c42:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009c44:	793a      	ldrb	r2, [r7, #4]
 8009c46:	4b14      	ldr	r3, [pc, #80]	; (8009c98 <hci_user_evt_proc+0x94>)
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	e002      	b.n	8009c52 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009c4c:	4b12      	ldr	r3, [pc, #72]	; (8009c98 <hci_user_evt_proc+0x94>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009c52:	4b11      	ldr	r3, [pc, #68]	; (8009c98 <hci_user_evt_proc+0x94>)
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d004      	beq.n	8009c64 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f000 fc03 	bl	800a468 <TL_MM_EvtDone>
 8009c62:	e004      	b.n	8009c6e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4619      	mov	r1, r3
 8009c68:	480a      	ldr	r0, [pc, #40]	; (8009c94 <hci_user_evt_proc+0x90>)
 8009c6a:	f000 fd43 	bl	800a6f4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009c6e:	4809      	ldr	r0, [pc, #36]	; (8009c94 <hci_user_evt_proc+0x90>)
 8009c70:	f000 fd1e 	bl	800a6b0 <LST_is_empty>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d107      	bne.n	8009c8a <hci_user_evt_proc+0x86>
 8009c7a:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <hci_user_evt_proc+0x94>)
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009c82:	4804      	ldr	r0, [pc, #16]	; (8009c94 <hci_user_evt_proc+0x90>)
 8009c84:	f001 fcee 	bl	800b664 <hci_notify_asynch_evt>
  }


  return;
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
}
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	20000944 	.word	0x20000944
 8009c98:	20000950 	.word	0x20000950
 8009c9c:	20001fb8 	.word	0x20001fb8

08009ca0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b088      	sub	sp, #32
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	460b      	mov	r3, r1
 8009caa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009cac:	2000      	movs	r0, #0
 8009cae:	f000 f8cb 	bl	8009e48 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	885b      	ldrh	r3, [r3, #2]
 8009cba:	b21b      	sxth	r3, r3
 8009cbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cc0:	b21a      	sxth	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	029b      	lsls	r3, r3, #10
 8009cc8:	b21b      	sxth	r3, r3
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	b21b      	sxth	r3, r3
 8009cce:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	b2d9      	uxtb	r1, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	689a      	ldr	r2, [r3, #8]
 8009cda:	8bbb      	ldrh	r3, [r7, #28]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 f88d 	bl	8009dfc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009ce2:	e04e      	b.n	8009d82 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009ce4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009ce8:	f001 fcd3 	bl	800b692 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009cec:	e043      	b.n	8009d76 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009cee:	f107 030c 	add.w	r3, r7, #12
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4828      	ldr	r0, [pc, #160]	; (8009d98 <hci_send_req+0xf8>)
 8009cf6:	f000 fd6a 	bl	800a7ce <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	7a5b      	ldrb	r3, [r3, #9]
 8009cfe:	2b0f      	cmp	r3, #15
 8009d00:	d114      	bne.n	8009d2c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	330b      	adds	r3, #11
 8009d06:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	885b      	ldrh	r3, [r3, #2]
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	8bba      	ldrh	r2, [r7, #28]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d104      	bne.n	8009d1e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	691b      	ldr	r3, [r3, #16]
 8009d18:	693a      	ldr	r2, [r7, #16]
 8009d1a:	7812      	ldrb	r2, [r2, #0]
 8009d1c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	785b      	ldrb	r3, [r3, #1]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d027      	beq.n	8009d76 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009d26:	2301      	movs	r3, #1
 8009d28:	77fb      	strb	r3, [r7, #31]
 8009d2a:	e024      	b.n	8009d76 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	330b      	adds	r3, #11
 8009d30:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	8bba      	ldrh	r2, [r7, #28]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d114      	bne.n	8009d6a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	7a9b      	ldrb	r3, [r3, #10]
 8009d44:	3b03      	subs	r3, #3
 8009d46:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	695a      	ldr	r2, [r3, #20]
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	bfa8      	it	ge
 8009d52:	461a      	movge	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6918      	ldr	r0, [r3, #16]
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	1cd9      	adds	r1, r3, #3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	461a      	mov	r2, r3
 8009d66:	f002 fe03 	bl	800c970 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009d72:	2301      	movs	r3, #1
 8009d74:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009d76:	4808      	ldr	r0, [pc, #32]	; (8009d98 <hci_send_req+0xf8>)
 8009d78:	f000 fc9a 	bl	800a6b0 <LST_is_empty>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d0b5      	beq.n	8009cee <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009d82:	7ffb      	ldrb	r3, [r7, #31]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0ad      	beq.n	8009ce4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009d88:	2001      	movs	r0, #1
 8009d8a:	f000 f85d 	bl	8009e48 <NotifyCmdStatus>

  return 0;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3720      	adds	r7, #32
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	20001fd8 	.word	0x20001fd8

08009d9c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009da4:	480f      	ldr	r0, [pc, #60]	; (8009de4 <TlInit+0x48>)
 8009da6:	f000 fc73 	bl	800a690 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009daa:	4a0f      	ldr	r2, [pc, #60]	; (8009de8 <TlInit+0x4c>)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009db0:	480e      	ldr	r0, [pc, #56]	; (8009dec <TlInit+0x50>)
 8009db2:	f000 fc6d 	bl	800a690 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009db6:	4b0e      	ldr	r3, [pc, #56]	; (8009df0 <TlInit+0x54>)
 8009db8:	2201      	movs	r2, #1
 8009dba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009dbc:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <TlInit+0x58>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009dc8:	4b0b      	ldr	r3, [pc, #44]	; (8009df8 <TlInit+0x5c>)
 8009dca:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009dcc:	4b09      	ldr	r3, [pc, #36]	; (8009df4 <TlInit+0x58>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f107 0208 	add.w	r2, r7, #8
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4798      	blx	r3
  }

  return;
 8009dd8:	bf00      	nop
 8009dda:	bf00      	nop
}
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	20001fd8 	.word	0x20001fd8
 8009de8:	2000094c 	.word	0x2000094c
 8009dec:	20000944 	.word	0x20000944
 8009df0:	20000950 	.word	0x20000950
 8009df4:	20001fb8 	.word	0x20001fb8
 8009df8:	08009e89 	.word	0x08009e89

08009dfc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	603a      	str	r2, [r7, #0]
 8009e06:	80fb      	strh	r3, [r7, #6]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009e0c:	4b0c      	ldr	r3, [pc, #48]	; (8009e40 <SendCmd+0x44>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	88fa      	ldrh	r2, [r7, #6]
 8009e12:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009e16:	4b0a      	ldr	r3, [pc, #40]	; (8009e40 <SendCmd+0x44>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	797a      	ldrb	r2, [r7, #5]
 8009e1c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009e1e:	4b08      	ldr	r3, [pc, #32]	; (8009e40 <SendCmd+0x44>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	330c      	adds	r3, #12
 8009e24:	797a      	ldrb	r2, [r7, #5]
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f002 fda1 	bl	800c970 <memcpy>

  hciContext.io.Send(0,0);
 8009e2e:	4b05      	ldr	r3, [pc, #20]	; (8009e44 <SendCmd+0x48>)
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	2100      	movs	r1, #0
 8009e34:	2000      	movs	r0, #0
 8009e36:	4798      	blx	r3

  return;
 8009e38:	bf00      	nop
}
 8009e3a:	3708      	adds	r7, #8
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	2000094c 	.word	0x2000094c
 8009e44:	20001fb8 	.word	0x20001fb8

08009e48 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4603      	mov	r3, r0
 8009e50:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009e52:	79fb      	ldrb	r3, [r7, #7]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d108      	bne.n	8009e6a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009e58:	4b0a      	ldr	r3, [pc, #40]	; (8009e84 <NotifyCmdStatus+0x3c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00d      	beq.n	8009e7c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009e60:	4b08      	ldr	r3, [pc, #32]	; (8009e84 <NotifyCmdStatus+0x3c>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	2000      	movs	r0, #0
 8009e66:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009e68:	e008      	b.n	8009e7c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009e6a:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <NotifyCmdStatus+0x3c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009e72:	4b04      	ldr	r3, [pc, #16]	; (8009e84 <NotifyCmdStatus+0x3c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2001      	movs	r0, #1
 8009e78:	4798      	blx	r3
  return;
 8009e7a:	bf00      	nop
 8009e7c:	bf00      	nop
}
 8009e7e:	3708      	adds	r7, #8
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	20001fe0 	.word	0x20001fe0

08009e88 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	7a5b      	ldrb	r3, [r3, #9]
 8009e94:	2b0f      	cmp	r3, #15
 8009e96:	d003      	beq.n	8009ea0 <TlEvtReceived+0x18>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	7a5b      	ldrb	r3, [r3, #9]
 8009e9c:	2b0e      	cmp	r3, #14
 8009e9e:	d107      	bne.n	8009eb0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009ea0:	6879      	ldr	r1, [r7, #4]
 8009ea2:	4809      	ldr	r0, [pc, #36]	; (8009ec8 <TlEvtReceived+0x40>)
 8009ea4:	f000 fc4c 	bl	800a740 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	f001 fbe7 	bl	800b67c <hci_cmd_resp_release>
 8009eae:	e006      	b.n	8009ebe <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009eb0:	6879      	ldr	r1, [r7, #4]
 8009eb2:	4806      	ldr	r0, [pc, #24]	; (8009ecc <TlEvtReceived+0x44>)
 8009eb4:	f000 fc44 	bl	800a740 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009eb8:	4804      	ldr	r0, [pc, #16]	; (8009ecc <TlEvtReceived+0x44>)
 8009eba:	f001 fbd3 	bl	800b664 <hci_notify_asynch_evt>
  }

  return;
 8009ebe:	bf00      	nop
}
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20001fd8 	.word	0x20001fd8
 8009ecc:	20000944 	.word	0x20000944

08009ed0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a05      	ldr	r2, [pc, #20]	; (8009ef0 <hci_register_io_bus+0x20>)
 8009edc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a04      	ldr	r2, [pc, #16]	; (8009ef4 <hci_register_io_bus+0x24>)
 8009ee2:	611a      	str	r2, [r3, #16]

  return;
 8009ee4:	bf00      	nop
}
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	0800a1e1 	.word	0x0800a1e1
 8009ef4:	0800a249 	.word	0x0800a249

08009ef8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	4a08      	ldr	r2, [pc, #32]	; (8009f28 <shci_init+0x30>)
 8009f08:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009f0a:	4a08      	ldr	r2, [pc, #32]	; (8009f2c <shci_init+0x34>)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009f10:	4806      	ldr	r0, [pc, #24]	; (8009f2c <shci_init+0x34>)
 8009f12:	f000 f911 	bl	800a138 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 f894 	bl	800a048 <TlInit>

  return;
 8009f20:	bf00      	nop
}
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	20002004 	.word	0x20002004
 8009f2c:	20001fe4 	.word	0x20001fe4

08009f30 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009f36:	4822      	ldr	r0, [pc, #136]	; (8009fc0 <shci_user_evt_proc+0x90>)
 8009f38:	f000 fbba 	bl	800a6b0 <LST_is_empty>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d12b      	bne.n	8009f9a <shci_user_evt_proc+0x6a>
 8009f42:	4b20      	ldr	r3, [pc, #128]	; (8009fc4 <shci_user_evt_proc+0x94>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d027      	beq.n	8009f9a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009f4a:	f107 030c 	add.w	r3, r7, #12
 8009f4e:	4619      	mov	r1, r3
 8009f50:	481b      	ldr	r0, [pc, #108]	; (8009fc0 <shci_user_evt_proc+0x90>)
 8009f52:	f000 fc3c 	bl	800a7ce <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009f56:	4b1c      	ldr	r3, [pc, #112]	; (8009fc8 <shci_user_evt_proc+0x98>)
 8009f58:	69db      	ldr	r3, [r3, #28]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00c      	beq.n	8009f78 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009f62:	2301      	movs	r3, #1
 8009f64:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009f66:	4b18      	ldr	r3, [pc, #96]	; (8009fc8 <shci_user_evt_proc+0x98>)
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	1d3a      	adds	r2, r7, #4
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009f70:	793a      	ldrb	r2, [r7, #4]
 8009f72:	4b14      	ldr	r3, [pc, #80]	; (8009fc4 <shci_user_evt_proc+0x94>)
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	e002      	b.n	8009f7e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009f78:	4b12      	ldr	r3, [pc, #72]	; (8009fc4 <shci_user_evt_proc+0x94>)
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009f7e:	4b11      	ldr	r3, [pc, #68]	; (8009fc4 <shci_user_evt_proc+0x94>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d004      	beq.n	8009f90 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f000 fa6d 	bl	800a468 <TL_MM_EvtDone>
 8009f8e:	e004      	b.n	8009f9a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4619      	mov	r1, r3
 8009f94:	480a      	ldr	r0, [pc, #40]	; (8009fc0 <shci_user_evt_proc+0x90>)
 8009f96:	f000 fbad 	bl	800a6f4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009f9a:	4809      	ldr	r0, [pc, #36]	; (8009fc0 <shci_user_evt_proc+0x90>)
 8009f9c:	f000 fb88 	bl	800a6b0 <LST_is_empty>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d107      	bne.n	8009fb6 <shci_user_evt_proc+0x86>
 8009fa6:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <shci_user_evt_proc+0x94>)
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d003      	beq.n	8009fb6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009fae:	4804      	ldr	r0, [pc, #16]	; (8009fc0 <shci_user_evt_proc+0x90>)
 8009fb0:	f7f7 fb37 	bl	8001622 <shci_notify_asynch_evt>
  }


  return;
 8009fb4:	bf00      	nop
 8009fb6:	bf00      	nop
}
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000954 	.word	0x20000954
 8009fc4:	20000964 	.word	0x20000964
 8009fc8:	20001fe4 	.word	0x20001fe4

08009fcc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60ba      	str	r2, [r7, #8]
 8009fd4:	607b      	str	r3, [r7, #4]
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	81fb      	strh	r3, [r7, #14]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009fde:	2000      	movs	r0, #0
 8009fe0:	f000 f864 	bl	800a0ac <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009fe4:	4b16      	ldr	r3, [pc, #88]	; (800a040 <shci_send+0x74>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	89fa      	ldrh	r2, [r7, #14]
 8009fea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009fee:	4b14      	ldr	r3, [pc, #80]	; (800a040 <shci_send+0x74>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	7b7a      	ldrb	r2, [r7, #13]
 8009ff4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009ff6:	4b12      	ldr	r3, [pc, #72]	; (800a040 <shci_send+0x74>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	330c      	adds	r3, #12
 8009ffc:	7b7a      	ldrb	r2, [r7, #13]
 8009ffe:	68b9      	ldr	r1, [r7, #8]
 800a000:	4618      	mov	r0, r3
 800a002:	f002 fcb5 	bl	800c970 <memcpy>

  shciContext.io.Send(0,0);
 800a006:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <shci_send+0x78>)
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	2100      	movs	r1, #0
 800a00c:	2000      	movs	r0, #0
 800a00e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a010:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a014:	f7f7 fb1c 	bl	8001650 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f103 0008 	add.w	r0, r3, #8
 800a01e:	4b08      	ldr	r3, [pc, #32]	; (800a040 <shci_send+0x74>)
 800a020:	6819      	ldr	r1, [r3, #0]
 800a022:	4b07      	ldr	r3, [pc, #28]	; (800a040 <shci_send+0x74>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	789b      	ldrb	r3, [r3, #2]
 800a028:	3303      	adds	r3, #3
 800a02a:	461a      	mov	r2, r3
 800a02c:	f002 fca0 	bl	800c970 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a030:	2001      	movs	r0, #1
 800a032:	f000 f83b 	bl	800a0ac <Cmd_SetStatus>

  return;
 800a036:	bf00      	nop
}
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	20000960 	.word	0x20000960
 800a044:	20001fe4 	.word	0x20001fe4

0800a048 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a050:	4a10      	ldr	r2, [pc, #64]	; (800a094 <TlInit+0x4c>)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a056:	4810      	ldr	r0, [pc, #64]	; (800a098 <TlInit+0x50>)
 800a058:	f000 fb1a 	bl	800a690 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a05c:	2001      	movs	r0, #1
 800a05e:	f000 f825 	bl	800a0ac <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a062:	4b0e      	ldr	r3, [pc, #56]	; (800a09c <TlInit+0x54>)
 800a064:	2201      	movs	r2, #1
 800a066:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a068:	4b0d      	ldr	r3, [pc, #52]	; (800a0a0 <TlInit+0x58>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00c      	beq.n	800a08a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a074:	4b0b      	ldr	r3, [pc, #44]	; (800a0a4 <TlInit+0x5c>)
 800a076:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a078:	4b0b      	ldr	r3, [pc, #44]	; (800a0a8 <TlInit+0x60>)
 800a07a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a07c:	4b08      	ldr	r3, [pc, #32]	; (800a0a0 <TlInit+0x58>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f107 020c 	add.w	r2, r7, #12
 800a084:	4610      	mov	r0, r2
 800a086:	4798      	blx	r3
  }

  return;
 800a088:	bf00      	nop
 800a08a:	bf00      	nop
}
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	20000960 	.word	0x20000960
 800a098:	20000954 	.word	0x20000954
 800a09c:	20000964 	.word	0x20000964
 800a0a0:	20001fe4 	.word	0x20001fe4
 800a0a4:	0800a0fd 	.word	0x0800a0fd
 800a0a8:	0800a115 	.word	0x0800a115

0800a0ac <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d10b      	bne.n	800a0d4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a0bc:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <Cmd_SetStatus+0x48>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d003      	beq.n	800a0cc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a0c4:	4b0b      	ldr	r3, [pc, #44]	; (800a0f4 <Cmd_SetStatus+0x48>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a0cc:	4b0a      	ldr	r3, [pc, #40]	; (800a0f8 <Cmd_SetStatus+0x4c>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a0d2:	e00b      	b.n	800a0ec <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a0d4:	4b08      	ldr	r3, [pc, #32]	; (800a0f8 <Cmd_SetStatus+0x4c>)
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a0da:	4b06      	ldr	r3, [pc, #24]	; (800a0f4 <Cmd_SetStatus+0x48>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d004      	beq.n	800a0ec <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a0e2:	4b04      	ldr	r3, [pc, #16]	; (800a0f4 <Cmd_SetStatus+0x48>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	4798      	blx	r3
  return;
 800a0ea:	bf00      	nop
 800a0ec:	bf00      	nop
}
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20002004 	.word	0x20002004
 800a0f8:	2000095c 	.word	0x2000095c

0800a0fc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b082      	sub	sp, #8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a104:	2000      	movs	r0, #0
 800a106:	f7f7 fa98 	bl	800163a <shci_cmd_resp_release>

  return;
 800a10a:	bf00      	nop
}
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a11c:	6879      	ldr	r1, [r7, #4]
 800a11e:	4805      	ldr	r0, [pc, #20]	; (800a134 <TlUserEvtReceived+0x20>)
 800a120:	f000 fb0e 	bl	800a740 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a124:	4803      	ldr	r0, [pc, #12]	; (800a134 <TlUserEvtReceived+0x20>)
 800a126:	f7f7 fa7c 	bl	8001622 <shci_notify_asynch_evt>

  return;
 800a12a:	bf00      	nop
}
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	20000954 	.word	0x20000954

0800a138 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a05      	ldr	r2, [pc, #20]	; (800a158 <shci_register_io_bus+0x20>)
 800a144:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a04      	ldr	r2, [pc, #16]	; (800a15c <shci_register_io_bus+0x24>)
 800a14a:	611a      	str	r2, [r3, #16]

  return;
 800a14c:	bf00      	nop
}
 800a14e:	370c      	adds	r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a156:	4770      	bx	lr
 800a158:	0800a2f5 	.word	0x0800a2f5
 800a15c:	0800a349 	.word	0x0800a349

0800a160 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a164:	f002 f880 	bl	800c268 <HW_IPCC_Enable>

  return;
 800a168:	bf00      	nop
}
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <TL_Init>:


void TL_Init( void )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a170:	4b10      	ldr	r3, [pc, #64]	; (800a1b4 <TL_Init+0x48>)
 800a172:	4a11      	ldr	r2, [pc, #68]	; (800a1b8 <TL_Init+0x4c>)
 800a174:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a176:	4b0f      	ldr	r3, [pc, #60]	; (800a1b4 <TL_Init+0x48>)
 800a178:	4a10      	ldr	r2, [pc, #64]	; (800a1bc <TL_Init+0x50>)
 800a17a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a17c:	4b0d      	ldr	r3, [pc, #52]	; (800a1b4 <TL_Init+0x48>)
 800a17e:	4a10      	ldr	r2, [pc, #64]	; (800a1c0 <TL_Init+0x54>)
 800a180:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a182:	4b0c      	ldr	r3, [pc, #48]	; (800a1b4 <TL_Init+0x48>)
 800a184:	4a0f      	ldr	r2, [pc, #60]	; (800a1c4 <TL_Init+0x58>)
 800a186:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a188:	4b0a      	ldr	r3, [pc, #40]	; (800a1b4 <TL_Init+0x48>)
 800a18a:	4a0f      	ldr	r2, [pc, #60]	; (800a1c8 <TL_Init+0x5c>)
 800a18c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a18e:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <TL_Init+0x48>)
 800a190:	4a0e      	ldr	r2, [pc, #56]	; (800a1cc <TL_Init+0x60>)
 800a192:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a194:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <TL_Init+0x48>)
 800a196:	4a0e      	ldr	r2, [pc, #56]	; (800a1d0 <TL_Init+0x64>)
 800a198:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a19a:	4b06      	ldr	r3, [pc, #24]	; (800a1b4 <TL_Init+0x48>)
 800a19c:	4a0d      	ldr	r2, [pc, #52]	; (800a1d4 <TL_Init+0x68>)
 800a19e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a1a0:	4b04      	ldr	r3, [pc, #16]	; (800a1b4 <TL_Init+0x48>)
 800a1a2:	4a0d      	ldr	r2, [pc, #52]	; (800a1d8 <TL_Init+0x6c>)
 800a1a4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a1a6:	4b03      	ldr	r3, [pc, #12]	; (800a1b4 <TL_Init+0x48>)
 800a1a8:	4a0c      	ldr	r2, [pc, #48]	; (800a1dc <TL_Init+0x70>)
 800a1aa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a1ac:	f002 f870 	bl	800c290 <HW_IPCC_Init>

  return;
 800a1b0:	bf00      	nop
}
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	20030000 	.word	0x20030000
 800a1b8:	20030028 	.word	0x20030028
 800a1bc:	20030048 	.word	0x20030048
 800a1c0:	20030058 	.word	0x20030058
 800a1c4:	20030068 	.word	0x20030068
 800a1c8:	20030070 	.word	0x20030070
 800a1cc:	20030078 	.word	0x20030078
 800a1d0:	20030080 	.word	0x20030080
 800a1d4:	2003009c 	.word	0x2003009c
 800a1d8:	200300a0 	.word	0x200300a0
 800a1dc:	200300ac 	.word	0x200300ac

0800a1e0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a1ec:	4811      	ldr	r0, [pc, #68]	; (800a234 <TL_BLE_Init+0x54>)
 800a1ee:	f000 fa4f 	bl	800a690 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a1f2:	4b11      	ldr	r3, [pc, #68]	; (800a238 <TL_BLE_Init+0x58>)
 800a1f4:	685b      	ldr	r3, [r3, #4]
 800a1f6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	689a      	ldr	r2, [r3, #8]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	68da      	ldr	r2, [r3, #12]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	4a0c      	ldr	r2, [pc, #48]	; (800a23c <TL_BLE_Init+0x5c>)
 800a20c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	4a08      	ldr	r2, [pc, #32]	; (800a234 <TL_BLE_Init+0x54>)
 800a212:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a214:	f002 f852 	bl	800c2bc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a08      	ldr	r2, [pc, #32]	; (800a240 <TL_BLE_Init+0x60>)
 800a21e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	4a07      	ldr	r2, [pc, #28]	; (800a244 <TL_BLE_Init+0x64>)
 800a226:	6013      	str	r3, [r2, #0]

  return 0;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	200300c8 	.word	0x200300c8
 800a238:	20030000 	.word	0x20030000
 800a23c:	2000090c 	.word	0x2000090c
 800a240:	20002010 	.word	0x20002010
 800a244:	20002014 	.word	0x20002014

0800a248 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a254:	4b09      	ldr	r3, [pc, #36]	; (800a27c <TL_BLE_SendCmd+0x34>)
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2201      	movs	r2, #1
 800a25c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a25e:	4b07      	ldr	r3, [pc, #28]	; (800a27c <TL_BLE_SendCmd+0x34>)
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4619      	mov	r1, r3
 800a266:	2001      	movs	r0, #1
 800a268:	f000 f96c 	bl	800a544 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a26c:	f002 f830 	bl	800c2d0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20030000 	.word	0x20030000

0800a280 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a286:	e01c      	b.n	800a2c2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a288:	1d3b      	adds	r3, r7, #4
 800a28a:	4619      	mov	r1, r3
 800a28c:	4812      	ldr	r0, [pc, #72]	; (800a2d8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a28e:	f000 fa9e 	bl	800a7ce <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	7a5b      	ldrb	r3, [r3, #9]
 800a296:	2b0f      	cmp	r3, #15
 800a298:	d003      	beq.n	800a2a2 <HW_IPCC_BLE_RxEvtNot+0x22>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	7a5b      	ldrb	r3, [r3, #9]
 800a29e:	2b0e      	cmp	r3, #14
 800a2a0:	d105      	bne.n	800a2ae <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4619      	mov	r1, r3
 800a2a6:	2002      	movs	r0, #2
 800a2a8:	f000 f94c 	bl	800a544 <OutputDbgTrace>
 800a2ac:	e004      	b.n	800a2b8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	2003      	movs	r0, #3
 800a2b4:	f000 f946 	bl	800a544 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a2b8:	4b08      	ldr	r3, [pc, #32]	; (800a2dc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	4610      	mov	r0, r2
 800a2c0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a2c2:	4805      	ldr	r0, [pc, #20]	; (800a2d8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a2c4:	f000 f9f4 	bl	800a6b0 <LST_is_empty>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0dc      	beq.n	800a288 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a2ce:	bf00      	nop
}
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	200300c8 	.word	0x200300c8
 800a2dc:	20002010 	.word	0x20002010

0800a2e0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a2e4:	4b02      	ldr	r3, [pc, #8]	; (800a2f0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4798      	blx	r3

  return;
 800a2ea:	bf00      	nop
}
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20002014 	.word	0x20002014

0800a2f4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a300:	480d      	ldr	r0, [pc, #52]	; (800a338 <TL_SYS_Init+0x44>)
 800a302:	f000 f9c5 	bl	800a690 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a306:	4b0d      	ldr	r3, [pc, #52]	; (800a33c <TL_SYS_Init+0x48>)
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	689a      	ldr	r2, [r3, #8]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	4a08      	ldr	r2, [pc, #32]	; (800a338 <TL_SYS_Init+0x44>)
 800a318:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a31a:	f001 fffb 	bl	800c314 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a07      	ldr	r2, [pc, #28]	; (800a340 <TL_SYS_Init+0x4c>)
 800a324:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	4a06      	ldr	r2, [pc, #24]	; (800a344 <TL_SYS_Init+0x50>)
 800a32c:	6013      	str	r3, [r2, #0]

  return 0;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3710      	adds	r7, #16
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	200300d0 	.word	0x200300d0
 800a33c:	20030000 	.word	0x20030000
 800a340:	20002018 	.word	0x20002018
 800a344:	2000201c 	.word	0x2000201c

0800a348 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	460b      	mov	r3, r1
 800a352:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a354:	4b09      	ldr	r3, [pc, #36]	; (800a37c <TL_SYS_SendCmd+0x34>)
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2210      	movs	r2, #16
 800a35c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a35e:	4b07      	ldr	r3, [pc, #28]	; (800a37c <TL_SYS_SendCmd+0x34>)
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4619      	mov	r1, r3
 800a366:	2004      	movs	r0, #4
 800a368:	f000 f8ec 	bl	800a544 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a36c:	f001 ffdc 	bl	800c328 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	20030000 	.word	0x20030000

0800a380 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a384:	4b07      	ldr	r3, [pc, #28]	; (800a3a4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4619      	mov	r1, r3
 800a38c:	2005      	movs	r0, #5
 800a38e:	f000 f8d9 	bl	800a544 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a392:	4b05      	ldr	r3, [pc, #20]	; (800a3a8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a03      	ldr	r2, [pc, #12]	; (800a3a4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a398:	68d2      	ldr	r2, [r2, #12]
 800a39a:	6812      	ldr	r2, [r2, #0]
 800a39c:	4610      	mov	r0, r2
 800a39e:	4798      	blx	r3

  return;
 800a3a0:	bf00      	nop
}
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	20030000 	.word	0x20030000
 800a3a8:	20002018 	.word	0x20002018

0800a3ac <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a3b2:	e00e      	b.n	800a3d2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a3b4:	1d3b      	adds	r3, r7, #4
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	480b      	ldr	r0, [pc, #44]	; (800a3e8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a3ba:	f000 fa08 	bl	800a7ce <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	2006      	movs	r0, #6
 800a3c4:	f000 f8be 	bl	800a544 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a3c8:	4b08      	ldr	r3, [pc, #32]	; (800a3ec <HW_IPCC_SYS_EvtNot+0x40>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	4610      	mov	r0, r2
 800a3d0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a3d2:	4805      	ldr	r0, [pc, #20]	; (800a3e8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a3d4:	f000 f96c 	bl	800a6b0 <LST_is_empty>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d0ea      	beq.n	800a3b4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a3de:	bf00      	nop
}
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	200300d0 	.word	0x200300d0
 800a3ec:	2000201c 	.word	0x2000201c

0800a3f0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a3f8:	4817      	ldr	r0, [pc, #92]	; (800a458 <TL_MM_Init+0x68>)
 800a3fa:	f000 f949 	bl	800a690 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a3fe:	4817      	ldr	r0, [pc, #92]	; (800a45c <TL_MM_Init+0x6c>)
 800a400:	f000 f946 	bl	800a690 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a404:	4b16      	ldr	r3, [pc, #88]	; (800a460 <TL_MM_Init+0x70>)
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	4a16      	ldr	r2, [pc, #88]	; (800a464 <TL_MM_Init+0x74>)
 800a40a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a40c:	4b15      	ldr	r3, [pc, #84]	; (800a464 <TL_MM_Init+0x74>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	6892      	ldr	r2, [r2, #8]
 800a414:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a416:	4b13      	ldr	r3, [pc, #76]	; (800a464 <TL_MM_Init+0x74>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	687a      	ldr	r2, [r7, #4]
 800a41c:	68d2      	ldr	r2, [r2, #12]
 800a41e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a420:	4b10      	ldr	r3, [pc, #64]	; (800a464 <TL_MM_Init+0x74>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a0c      	ldr	r2, [pc, #48]	; (800a458 <TL_MM_Init+0x68>)
 800a426:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a428:	4b0e      	ldr	r3, [pc, #56]	; (800a464 <TL_MM_Init+0x74>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	6812      	ldr	r2, [r2, #0]
 800a430:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a432:	4b0c      	ldr	r3, [pc, #48]	; (800a464 <TL_MM_Init+0x74>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	6852      	ldr	r2, [r2, #4]
 800a43a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a43c:	4b09      	ldr	r3, [pc, #36]	; (800a464 <TL_MM_Init+0x74>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	6912      	ldr	r2, [r2, #16]
 800a444:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a446:	4b07      	ldr	r3, [pc, #28]	; (800a464 <TL_MM_Init+0x74>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	6952      	ldr	r2, [r2, #20]
 800a44e:	619a      	str	r2, [r3, #24]

  return;
 800a450:	bf00      	nop
}
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	200300b8 	.word	0x200300b8
 800a45c:	20002008 	.word	0x20002008
 800a460:	20030000 	.word	0x20030000
 800a464:	20002020 	.word	0x20002020

0800a468 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	4807      	ldr	r0, [pc, #28]	; (800a490 <TL_MM_EvtDone+0x28>)
 800a474:	f000 f964 	bl	800a740 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a478:	6879      	ldr	r1, [r7, #4]
 800a47a:	2000      	movs	r0, #0
 800a47c:	f000 f862 	bl	800a544 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a480:	4804      	ldr	r0, [pc, #16]	; (800a494 <TL_MM_EvtDone+0x2c>)
 800a482:	f001 ff77 	bl	800c374 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a486:	bf00      	nop
}
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	20002008 	.word	0x20002008
 800a494:	0800a499 	.word	0x0800a499

0800a498 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a49e:	e00c      	b.n	800a4ba <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a4a0:	1d3b      	adds	r3, r7, #4
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	480a      	ldr	r0, [pc, #40]	; (800a4d0 <SendFreeBuf+0x38>)
 800a4a6:	f000 f992 	bl	800a7ce <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a4aa:	4b0a      	ldr	r3, [pc, #40]	; (800a4d4 <SendFreeBuf+0x3c>)
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	f000 f943 	bl	800a740 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a4ba:	4805      	ldr	r0, [pc, #20]	; (800a4d0 <SendFreeBuf+0x38>)
 800a4bc:	f000 f8f8 	bl	800a6b0 <LST_is_empty>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0ec      	beq.n	800a4a0 <SendFreeBuf+0x8>
  }

  return;
 800a4c6:	bf00      	nop
}
 800a4c8:	3708      	adds	r7, #8
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	20002008 	.word	0x20002008
 800a4d4:	20030000 	.word	0x20030000

0800a4d8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a4dc:	4805      	ldr	r0, [pc, #20]	; (800a4f4 <TL_TRACES_Init+0x1c>)
 800a4de:	f000 f8d7 	bl	800a690 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a4e2:	4b05      	ldr	r3, [pc, #20]	; (800a4f8 <TL_TRACES_Init+0x20>)
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	4a03      	ldr	r2, [pc, #12]	; (800a4f4 <TL_TRACES_Init+0x1c>)
 800a4e8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a4ea:	f001 ff79 	bl	800c3e0 <HW_IPCC_TRACES_Init>

  return;
 800a4ee:	bf00      	nop
}
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	200300c0 	.word	0x200300c0
 800a4f8:	20030000 	.word	0x20030000

0800a4fc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b082      	sub	sp, #8
 800a500:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a502:	e008      	b.n	800a516 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a504:	1d3b      	adds	r3, r7, #4
 800a506:	4619      	mov	r1, r3
 800a508:	4808      	ldr	r0, [pc, #32]	; (800a52c <HW_IPCC_TRACES_EvtNot+0x30>)
 800a50a:	f000 f960 	bl	800a7ce <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4618      	mov	r0, r3
 800a512:	f000 f80d 	bl	800a530 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a516:	4805      	ldr	r0, [pc, #20]	; (800a52c <HW_IPCC_TRACES_EvtNot+0x30>)
 800a518:	f000 f8ca 	bl	800a6b0 <LST_is_empty>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0f0      	beq.n	800a504 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a522:	bf00      	nop
}
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	200300c0 	.word	0x200300c0

0800a530 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a538:	bf00      	nop
 800a53a:	370c      	adds	r7, #12
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	6039      	str	r1, [r7, #0]
 800a54e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	2b06      	cmp	r3, #6
 800a554:	d845      	bhi.n	800a5e2 <OutputDbgTrace+0x9e>
 800a556:	a201      	add	r2, pc, #4	; (adr r2, 800a55c <OutputDbgTrace+0x18>)
 800a558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55c:	0800a579 	.word	0x0800a579
 800a560:	0800a59d 	.word	0x0800a59d
 800a564:	0800a5a3 	.word	0x0800a5a3
 800a568:	0800a5b7 	.word	0x0800a5b7
 800a56c:	0800a5c3 	.word	0x0800a5c3
 800a570:	0800a5c9 	.word	0x0800a5c9
 800a574:	0800a5d7 	.word	0x0800a5d7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	7a5b      	ldrb	r3, [r3, #9]
 800a580:	2bff      	cmp	r3, #255	; 0xff
 800a582:	d005      	beq.n	800a590 <OutputDbgTrace+0x4c>
 800a584:	2bff      	cmp	r3, #255	; 0xff
 800a586:	dc05      	bgt.n	800a594 <OutputDbgTrace+0x50>
 800a588:	2b0e      	cmp	r3, #14
 800a58a:	d005      	beq.n	800a598 <OutputDbgTrace+0x54>
 800a58c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a58e:	e001      	b.n	800a594 <OutputDbgTrace+0x50>
          break;
 800a590:	bf00      	nop
 800a592:	e027      	b.n	800a5e4 <OutputDbgTrace+0xa0>
          break;
 800a594:	bf00      	nop
 800a596:	e025      	b.n	800a5e4 <OutputDbgTrace+0xa0>
          break;
 800a598:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a59a:	e023      	b.n	800a5e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a5a0:	e020      	b.n	800a5e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	7a5b      	ldrb	r3, [r3, #9]
 800a5aa:	2b0e      	cmp	r3, #14
 800a5ac:	d001      	beq.n	800a5b2 <OutputDbgTrace+0x6e>
 800a5ae:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a5b0:	e000      	b.n	800a5b4 <OutputDbgTrace+0x70>
          break;
 800a5b2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a5b4:	e016      	b.n	800a5e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	7a5b      	ldrb	r3, [r3, #9]
 800a5be:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a5c0:	e010      	b.n	800a5e4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a5c6:	e00d      	b.n	800a5e4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	7a5b      	ldrb	r3, [r3, #9]
 800a5d0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a5d2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a5d4:	e006      	b.n	800a5e4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	7a5b      	ldrb	r3, [r3, #9]
 800a5de:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a5e0:	e000      	b.n	800a5e4 <OutputDbgTrace+0xa0>

    default:
      break;
 800a5e2:	bf00      	nop
  }

  return;
 800a5e4:	bf00      	nop
}
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800a5fc:	215c      	movs	r1, #92	; 0x5c
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f002 fbc3 	bl	800cd8a <strrchr>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d007      	beq.n	800a61a <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800a60a:	215c      	movs	r1, #92	; 0x5c
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f002 fbbc 	bl	800cd8a <strrchr>
 800a612:	4603      	mov	r3, r0
 800a614:	3301      	adds	r3, #1
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	e00d      	b.n	800a636 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800a61a:	212f      	movs	r1, #47	; 0x2f
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f002 fbb4 	bl	800cd8a <strrchr>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d006      	beq.n	800a636 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800a628:	212f      	movs	r1, #47	; 0x2f
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f002 fbad 	bl	800cd8a <strrchr>
 800a630:	4603      	mov	r3, r0
 800a632:	3301      	adds	r3, #1
 800a634:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a636:	68fb      	ldr	r3, [r7, #12]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800a64a:	4b0f      	ldr	r3, [pc, #60]	; (800a688 <OTP_Read+0x48>)
 800a64c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a64e:	e002      	b.n	800a656 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3b08      	subs	r3, #8
 800a654:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3307      	adds	r3, #7
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	79fa      	ldrb	r2, [r7, #7]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d003      	beq.n	800a66a <OTP_Read+0x2a>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4a09      	ldr	r2, [pc, #36]	; (800a68c <OTP_Read+0x4c>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d1f2      	bne.n	800a650 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	3307      	adds	r3, #7
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	79fa      	ldrb	r2, [r7, #7]
 800a672:	429a      	cmp	r2, r3
 800a674:	d001      	beq.n	800a67a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800a676:	2300      	movs	r3, #0
 800a678:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800a67a:	68fb      	ldr	r3, [r7, #12]
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	1fff73f8 	.word	0x1fff73f8
 800a68c:	1fff7000 	.word	0x1fff7000

0800a690 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	605a      	str	r2, [r3, #4]
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6b8:	f3ef 8310 	mrs	r3, PRIMASK
 800a6bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6be:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a6c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6c2:	b672      	cpsid	i
}
 800a6c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d102      	bne.n	800a6d6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	75fb      	strb	r3, [r7, #23]
 800a6d4:	e001      	b.n	800a6da <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	75fb      	strb	r3, [r7, #23]
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	f383 8810 	msr	PRIMASK, r3
}
 800a6e4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	371c      	adds	r7, #28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6fe:	f3ef 8310 	mrs	r3, PRIMASK
 800a702:	60fb      	str	r3, [r7, #12]
  return(result);
 800a704:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a706:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a708:	b672      	cpsid	i
}
 800a70a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	605a      	str	r2, [r3, #4]
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	f383 8810 	msr	PRIMASK, r3
}
 800a732:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a734:	bf00      	nop
 800a736:	371c      	adds	r7, #28
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a740:	b480      	push	{r7}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a74a:	f3ef 8310 	mrs	r3, PRIMASK
 800a74e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a750:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a752:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a754:	b672      	cpsid	i
}
 800a756:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f383 8810 	msr	PRIMASK, r3
}
 800a77e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a780:	bf00      	nop
 800a782:	371c      	adds	r7, #28
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b087      	sub	sp, #28
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a794:	f3ef 8310 	mrs	r3, PRIMASK
 800a798:	60fb      	str	r3, [r7, #12]
  return(result);
 800a79a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a79c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a79e:	b672      	cpsid	i
}
 800a7a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	6812      	ldr	r2, [r2, #0]
 800a7aa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	6852      	ldr	r2, [r2, #4]
 800a7b4:	605a      	str	r2, [r3, #4]
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	f383 8810 	msr	PRIMASK, r3
}
 800a7c0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a7c2:	bf00      	nop
 800a7c4:	371c      	adds	r7, #28
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b086      	sub	sp, #24
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a7dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7de:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a7e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7e2:	b672      	cpsid	i
}
 800a7e4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681a      	ldr	r2, [r3, #0]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff ffca 	bl	800a78c <LST_remove_node>
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	f383 8810 	msr	PRIMASK, r3
}
 800a802:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a804:	bf00      	nop
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800a80c:	b480      	push	{r7}
 800a80e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800a810:	4b03      	ldr	r3, [pc, #12]	; (800a820 <LL_FLASH_GetUDN+0x14>)
 800a812:	681b      	ldr	r3, [r3, #0]
}
 800a814:	4618      	mov	r0, r3
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	1fff7580 	.word	0x1fff7580

0800a824 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800a824:	b480      	push	{r7}
 800a826:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800a828:	4b03      	ldr	r3, [pc, #12]	; (800a838 <LL_FLASH_GetDeviceID+0x14>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	b2db      	uxtb	r3, r3
}
 800a82e:	4618      	mov	r0, r3
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr
 800a838:	1fff7584 	.word	0x1fff7584

0800a83c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800a83c:	b480      	push	{r7}
 800a83e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800a840:	4b03      	ldr	r3, [pc, #12]	; (800a850 <LL_FLASH_GetSTCompanyID+0x14>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	0a1b      	lsrs	r3, r3, #8
}
 800a846:	4618      	mov	r0, r3
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	1fff7584 	.word	0x1fff7584

0800a854 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800a854:	b5b0      	push	{r4, r5, r7, lr}
 800a856:	b090      	sub	sp, #64	; 0x40
 800a858:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800a85a:	2392      	movs	r3, #146	; 0x92
 800a85c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800a860:	4b45      	ldr	r3, [pc, #276]	; (800a978 <APP_BLE_Init+0x124>)
 800a862:	1d3c      	adds	r4, r7, #4
 800a864:	461d      	mov	r5, r3
 800a866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a86a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a86c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a86e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a870:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a872:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a876:	c403      	stmia	r4!, {r0, r1}
 800a878:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800a87a:	f000 fb37 	bl	800aeec <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800a87e:	2101      	movs	r1, #1
 800a880:	2002      	movs	r0, #2
 800a882:	f001 fdd5 	bl	800c430 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800a886:	4a3d      	ldr	r2, [pc, #244]	; (800a97c <APP_BLE_Init+0x128>)
 800a888:	2100      	movs	r1, #0
 800a88a:	2002      	movs	r0, #2
 800a88c:	f001 fefc 	bl	800c688 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800a890:	1d3b      	adds	r3, r7, #4
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff f8a8 	bl	80099e8 <SHCI_C2_BLE_Init>
 800a898:	4603      	mov	r3, r0
 800a89a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800a89e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d012      	beq.n	800a8cc <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800a8a6:	4836      	ldr	r0, [pc, #216]	; (800a980 <APP_BLE_Init+0x12c>)
 800a8a8:	f7ff fea2 	bl	800a5f0 <DbgTraceGetFileName>
 800a8ac:	4601      	mov	r1, r0
 800a8ae:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800a8b2:	4a34      	ldr	r2, [pc, #208]	; (800a984 <APP_BLE_Init+0x130>)
 800a8b4:	4834      	ldr	r0, [pc, #208]	; (800a988 <APP_BLE_Init+0x134>)
 800a8b6:	f002 f951 	bl	800cb5c <iprintf>
 800a8ba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4832      	ldr	r0, [pc, #200]	; (800a98c <APP_BLE_Init+0x138>)
 800a8c2:	f002 f94b 	bl	800cb5c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800a8c6:	f7f7 ff49 	bl	800275c <Error_Handler>
 800a8ca:	e00c      	b.n	800a8e6 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800a8cc:	482c      	ldr	r0, [pc, #176]	; (800a980 <APP_BLE_Init+0x12c>)
 800a8ce:	f7ff fe8f 	bl	800a5f0 <DbgTraceGetFileName>
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800a8d8:	4a2a      	ldr	r2, [pc, #168]	; (800a984 <APP_BLE_Init+0x130>)
 800a8da:	482b      	ldr	r0, [pc, #172]	; (800a988 <APP_BLE_Init+0x134>)
 800a8dc:	f002 f93e 	bl	800cb5c <iprintf>
 800a8e0:	482b      	ldr	r0, [pc, #172]	; (800a990 <APP_BLE_Init+0x13c>)
 800a8e2:	f002 f93b 	bl	800cb5c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800a8e6:	f000 fb17 	bl	800af18 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800a8ea:	f7fe ffd7 	bl	800989c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a8ee:	4b29      	ldr	r3, [pc, #164]	; (800a994 <APP_BLE_Init+0x140>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800a8f6:	4b27      	ldr	r3, [pc, #156]	; (800a994 <APP_BLE_Init+0x140>)
 800a8f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8fc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800a8fe:	4a26      	ldr	r2, [pc, #152]	; (800a998 <APP_BLE_Init+0x144>)
 800a900:	2100      	movs	r1, #0
 800a902:	2001      	movs	r0, #1
 800a904:	f001 fec0 	bl	800c688 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800a908:	2006      	movs	r0, #6
 800a90a:	f7fe fe3a 	bl	8009582 <aci_hal_set_radio_activity_mask>
 800a90e:	4603      	mov	r3, r0
 800a910:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800a914:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d010      	beq.n	800a93e <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800a91c:	4818      	ldr	r0, [pc, #96]	; (800a980 <APP_BLE_Init+0x12c>)
 800a91e:	f7ff fe67 	bl	800a5f0 <DbgTraceGetFileName>
 800a922:	4601      	mov	r1, r0
 800a924:	f44f 73b9 	mov.w	r3, #370	; 0x172
 800a928:	4a16      	ldr	r2, [pc, #88]	; (800a984 <APP_BLE_Init+0x130>)
 800a92a:	4817      	ldr	r0, [pc, #92]	; (800a988 <APP_BLE_Init+0x134>)
 800a92c:	f002 f916 	bl	800cb5c <iprintf>
 800a930:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a934:	4619      	mov	r1, r3
 800a936:	4819      	ldr	r0, [pc, #100]	; (800a99c <APP_BLE_Init+0x148>)
 800a938:	f002 f910 	bl	800cb5c <iprintf>
 800a93c:	e00c      	b.n	800a958 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800a93e:	4810      	ldr	r0, [pc, #64]	; (800a980 <APP_BLE_Init+0x12c>)
 800a940:	f7ff fe56 	bl	800a5f0 <DbgTraceGetFileName>
 800a944:	4601      	mov	r1, r0
 800a946:	f44f 73bb 	mov.w	r3, #374	; 0x176
 800a94a:	4a0e      	ldr	r2, [pc, #56]	; (800a984 <APP_BLE_Init+0x130>)
 800a94c:	480e      	ldr	r0, [pc, #56]	; (800a988 <APP_BLE_Init+0x134>)
 800a94e:	f002 f905 	bl	800cb5c <iprintf>
 800a952:	4813      	ldr	r0, [pc, #76]	; (800a9a0 <APP_BLE_Init+0x14c>)
 800a954:	f002 f902 	bl	800cb5c <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800a958:	f000 ffc6 	bl	800b8e8 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800a95c:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <APP_BLE_Init+0x140>)
 800a95e:	2200      	movs	r2, #0
 800a960:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800a962:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <APP_BLE_Init+0x140>)
 800a964:	2200      	movs	r2, #0
 800a966:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800a968:	2001      	movs	r0, #1
 800a96a:	f000 fd69 	bl	800b440 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800a96e:	bf00      	nop
}
 800a970:	3740      	adds	r7, #64	; 0x40
 800a972:	46bd      	mov	sp, r7
 800a974:	bdb0      	pop	{r4, r5, r7, pc}
 800a976:	bf00      	nop
 800a978:	0800eae4 	.word	0x0800eae4
 800a97c:	08009c05 	.word	0x08009c05
 800a980:	0800e9d8 	.word	0x0800e9d8
 800a984:	0800fc40 	.word	0x0800fc40
 800a988:	0800e9f4 	.word	0x0800e9f4
 800a98c:	0800ea08 	.word	0x0800ea08
 800a990:	0800ea40 	.word	0x0800ea40
 800a994:	2000202c 	.word	0x2000202c
 800a998:	0800b5c5 	.word	0x0800b5c5
 800a99c:	0800ea68 	.word	0x0800ea68
 800a9a0:	0800eaac 	.word	0x0800eaac

0800a9a4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800a9a4:	b5b0      	push	{r4, r5, r7, lr}
 800a9a6:	b08e      	sub	sp, #56	; 0x38
 800a9a8:	af04      	add	r7, sp, #16
 800a9aa:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800a9ac:	2392      	movs	r3, #146	; 0x92
 800a9ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	2bff      	cmp	r3, #255	; 0xff
 800a9be:	f000 811d 	beq.w	800abfc <SVCCTL_App_Notification+0x258>
 800a9c2:	2bff      	cmp	r3, #255	; 0xff
 800a9c4:	f300 8269 	bgt.w	800ae9a <SVCCTL_App_Notification+0x4f6>
 800a9c8:	2b05      	cmp	r3, #5
 800a9ca:	d002      	beq.n	800a9d2 <SVCCTL_App_Notification+0x2e>
 800a9cc:	2b3e      	cmp	r3, #62	; 0x3e
 800a9ce:	d042      	beq.n	800aa56 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800a9d0:	e263      	b.n	800ae9a <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	3302      	adds	r3, #2
 800a9d6:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	4bb1      	ldr	r3, [pc, #708]	; (800aca8 <SVCCTL_App_Notification+0x304>)
 800a9e2:	8adb      	ldrh	r3, [r3, #22]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d128      	bne.n	800aa3a <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800a9e8:	4baf      	ldr	r3, [pc, #700]	; (800aca8 <SVCCTL_App_Notification+0x304>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800a9ee:	4bae      	ldr	r3, [pc, #696]	; (800aca8 <SVCCTL_App_Notification+0x304>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800a9f6:	48ad      	ldr	r0, [pc, #692]	; (800acac <SVCCTL_App_Notification+0x308>)
 800a9f8:	f7ff fdfa 	bl	800a5f0 <DbgTraceGetFileName>
 800a9fc:	4601      	mov	r1, r0
 800a9fe:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 800aa02:	4aab      	ldr	r2, [pc, #684]	; (800acb0 <SVCCTL_App_Notification+0x30c>)
 800aa04:	48ab      	ldr	r0, [pc, #684]	; (800acb4 <SVCCTL_App_Notification+0x310>)
 800aa06:	f002 f8a9 	bl	800cb5c <iprintf>
 800aa0a:	48ab      	ldr	r0, [pc, #684]	; (800acb8 <SVCCTL_App_Notification+0x314>)
 800aa0c:	f002 f942 	bl	800cc94 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800aa10:	48a6      	ldr	r0, [pc, #664]	; (800acac <SVCCTL_App_Notification+0x308>)
 800aa12:	f7ff fded 	bl	800a5f0 <DbgTraceGetFileName>
 800aa16:	4601      	mov	r1, r0
 800aa18:	f240 13bb 	movw	r3, #443	; 0x1bb
 800aa1c:	4aa4      	ldr	r2, [pc, #656]	; (800acb0 <SVCCTL_App_Notification+0x30c>)
 800aa1e:	48a5      	ldr	r0, [pc, #660]	; (800acb4 <SVCCTL_App_Notification+0x310>)
 800aa20:	f002 f89c 	bl	800cb5c <iprintf>
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	78db      	ldrb	r3, [r3, #3]
 800aa32:	461a      	mov	r2, r3
 800aa34:	48a1      	ldr	r0, [pc, #644]	; (800acbc <SVCCTL_App_Notification+0x318>)
 800aa36:	f002 f891 	bl	800cb5c <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800aa3a:	2001      	movs	r0, #1
 800aa3c:	f000 fd00 	bl	800b440 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800aa40:	4b9f      	ldr	r3, [pc, #636]	; (800acc0 <SVCCTL_App_Notification+0x31c>)
 800aa42:	2201      	movs	r2, #1
 800aa44:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800aa46:	4b98      	ldr	r3, [pc, #608]	; (800aca8 <SVCCTL_App_Notification+0x304>)
 800aa48:	8ada      	ldrh	r2, [r3, #22]
 800aa4a:	4b9d      	ldr	r3, [pc, #628]	; (800acc0 <SVCCTL_App_Notification+0x31c>)
 800aa4c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800aa4e:	489c      	ldr	r0, [pc, #624]	; (800acc0 <SVCCTL_App_Notification+0x31c>)
 800aa50:	f000 ff36 	bl	800b8c0 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800aa54:	e224      	b.n	800aea0 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	3302      	adds	r3, #2
 800aa5a:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d042      	beq.n	800aaea <SVCCTL_App_Notification+0x146>
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	f040 80c7 	bne.w	800abf8 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800aa70:	488e      	ldr	r0, [pc, #568]	; (800acac <SVCCTL_App_Notification+0x308>)
 800aa72:	f7ff fdbd 	bl	800a5f0 <DbgTraceGetFileName>
 800aa76:	4601      	mov	r1, r0
 800aa78:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800aa7c:	4a8c      	ldr	r2, [pc, #560]	; (800acb0 <SVCCTL_App_Notification+0x30c>)
 800aa7e:	488d      	ldr	r0, [pc, #564]	; (800acb4 <SVCCTL_App_Notification+0x310>)
 800aa80:	f002 f86c 	bl	800cb5c <iprintf>
 800aa84:	488f      	ldr	r0, [pc, #572]	; (800acc4 <SVCCTL_App_Notification+0x320>)
 800aa86:	f002 f905 	bl	800cc94 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800aa8a:	4888      	ldr	r0, [pc, #544]	; (800acac <SVCCTL_App_Notification+0x308>)
 800aa8c:	f7ff fdb0 	bl	800a5f0 <DbgTraceGetFileName>
 800aa90:	4601      	mov	r1, r0
 800aa92:	f240 13e3 	movw	r3, #483	; 0x1e3
 800aa96:	4a86      	ldr	r2, [pc, #536]	; (800acb0 <SVCCTL_App_Notification+0x30c>)
 800aa98:	4886      	ldr	r0, [pc, #536]	; (800acb4 <SVCCTL_App_Notification+0x310>)
 800aa9a:	f002 f85f 	bl	800cb5c <iprintf>
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7f5 fd14 	bl	80004d4 <__aeabi_i2d>
 800aaac:	f04f 0200 	mov.w	r2, #0
 800aab0:	4b85      	ldr	r3, [pc, #532]	; (800acc8 <SVCCTL_App_Notification+0x324>)
 800aab2:	f7f5 fd79 	bl	80005a8 <__aeabi_dmul>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	4610      	mov	r0, r2
 800aabc:	4619      	mov	r1, r3
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	461c      	mov	r4, r3
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800aace:	b29b      	uxth	r3, r3
 800aad0:	461a      	mov	r2, r3
 800aad2:	4613      	mov	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4413      	add	r3, r2
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	9301      	str	r3, [sp, #4]
 800aadc:	9400      	str	r4, [sp, #0]
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	487a      	ldr	r0, [pc, #488]	; (800accc <SVCCTL_App_Notification+0x328>)
 800aae4:	f002 f83a 	bl	800cb5c <iprintf>
          break;
 800aae8:	e087      	b.n	800abfa <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	3301      	adds	r3, #1
 800aaee:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800aaf0:	486e      	ldr	r0, [pc, #440]	; (800acac <SVCCTL_App_Notification+0x308>)
 800aaf2:	f7ff fd7d 	bl	800a5f0 <DbgTraceGetFileName>
 800aaf6:	4601      	mov	r1, r0
 800aaf8:	f240 13f5 	movw	r3, #501	; 0x1f5
 800aafc:	4a6c      	ldr	r2, [pc, #432]	; (800acb0 <SVCCTL_App_Notification+0x30c>)
 800aafe:	486d      	ldr	r0, [pc, #436]	; (800acb4 <SVCCTL_App_Notification+0x310>)
 800ab00:	f002 f82c 	bl	800cb5c <iprintf>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4870      	ldr	r0, [pc, #448]	; (800acd0 <SVCCTL_App_Notification+0x32c>)
 800ab10:	f002 f824 	bl	800cb5c <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ab14:	4865      	ldr	r0, [pc, #404]	; (800acac <SVCCTL_App_Notification+0x308>)
 800ab16:	f7ff fd6b 	bl	800a5f0 <DbgTraceGetFileName>
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 800ab20:	4a63      	ldr	r2, [pc, #396]	; (800acb0 <SVCCTL_App_Notification+0x30c>)
 800ab22:	4864      	ldr	r0, [pc, #400]	; (800acb4 <SVCCTL_App_Notification+0x310>)
 800ab24:	f002 f81a 	bl	800cb5c <iprintf>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	7a9b      	ldrb	r3, [r3, #10]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	7a5b      	ldrb	r3, [r3, #9]
 800ab32:	461c      	mov	r4, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	7a1b      	ldrb	r3, [r3, #8]
 800ab38:	461d      	mov	r5, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	79db      	ldrb	r3, [r3, #7]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	799b      	ldrb	r3, [r3, #6]
 800ab44:	4619      	mov	r1, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	795b      	ldrb	r3, [r3, #5]
 800ab4a:	9302      	str	r3, [sp, #8]
 800ab4c:	9101      	str	r1, [sp, #4]
 800ab4e:	9200      	str	r2, [sp, #0]
 800ab50:	462b      	mov	r3, r5
 800ab52:	4622      	mov	r2, r4
 800ab54:	4601      	mov	r1, r0
 800ab56:	485f      	ldr	r0, [pc, #380]	; (800acd4 <SVCCTL_App_Notification+0x330>)
 800ab58:	f002 f800 	bl	800cb5c <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ab5c:	4853      	ldr	r0, [pc, #332]	; (800acac <SVCCTL_App_Notification+0x308>)
 800ab5e:	f7ff fd47 	bl	800a5f0 <DbgTraceGetFileName>
 800ab62:	4601      	mov	r1, r0
 800ab64:	f240 13fd 	movw	r3, #509	; 0x1fd
 800ab68:	4a51      	ldr	r2, [pc, #324]	; (800acb0 <SVCCTL_App_Notification+0x30c>)
 800ab6a:	4852      	ldr	r0, [pc, #328]	; (800acb4 <SVCCTL_App_Notification+0x310>)
 800ab6c:	f001 fff6 	bl	800cb5c <iprintf>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7f5 fcab 	bl	80004d4 <__aeabi_i2d>
 800ab7e:	f04f 0200 	mov.w	r2, #0
 800ab82:	4b51      	ldr	r3, [pc, #324]	; (800acc8 <SVCCTL_App_Notification+0x324>)
 800ab84:	f7f5 fd10 	bl	80005a8 <__aeabi_dmul>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4619      	mov	r1, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	461c      	mov	r4, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	461a      	mov	r2, r3
 800aba4:	4613      	mov	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4413      	add	r3, r2
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	9301      	str	r3, [sp, #4]
 800abae:	9400      	str	r4, [sp, #0]
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	4845      	ldr	r0, [pc, #276]	; (800accc <SVCCTL_App_Notification+0x328>)
 800abb6:	f001 ffd1 	bl	800cb5c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800abba:	4b3b      	ldr	r3, [pc, #236]	; (800aca8 <SVCCTL_App_Notification+0x304>)
 800abbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abc0:	2b04      	cmp	r3, #4
 800abc2:	d104      	bne.n	800abce <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800abc4:	4b38      	ldr	r3, [pc, #224]	; (800aca8 <SVCCTL_App_Notification+0x304>)
 800abc6:	2206      	movs	r2, #6
 800abc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800abcc:	e003      	b.n	800abd6 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800abce:	4b36      	ldr	r3, [pc, #216]	; (800aca8 <SVCCTL_App_Notification+0x304>)
 800abd0:	2205      	movs	r2, #5
 800abd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800abdc:	b29a      	uxth	r2, r3
 800abde:	4b32      	ldr	r3, [pc, #200]	; (800aca8 <SVCCTL_App_Notification+0x304>)
 800abe0:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800abe2:	4b37      	ldr	r3, [pc, #220]	; (800acc0 <SVCCTL_App_Notification+0x31c>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800abe8:	4b2f      	ldr	r3, [pc, #188]	; (800aca8 <SVCCTL_App_Notification+0x304>)
 800abea:	8ada      	ldrh	r2, [r3, #22]
 800abec:	4b34      	ldr	r3, [pc, #208]	; (800acc0 <SVCCTL_App_Notification+0x31c>)
 800abee:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800abf0:	4833      	ldr	r0, [pc, #204]	; (800acc0 <SVCCTL_App_Notification+0x31c>)
 800abf2:	f000 fe65 	bl	800b8c0 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800abf6:	e000      	b.n	800abfa <SVCCTL_App_Notification+0x256>
          break;
 800abf8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800abfa:	e151      	b.n	800aea0 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	3302      	adds	r3, #2
 800ac00:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800ac02:	69fb      	ldr	r3, [r7, #28]
 800ac04:	881b      	ldrh	r3, [r3, #0]
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac0c:	f000 8141 	beq.w	800ae92 <SVCCTL_App_Notification+0x4ee>
 800ac10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac14:	f300 8143 	bgt.w	800ae9e <SVCCTL_App_Notification+0x4fa>
 800ac18:	2b04      	cmp	r3, #4
 800ac1a:	f000 813c 	beq.w	800ae96 <SVCCTL_App_Notification+0x4f2>
 800ac1e:	2b04      	cmp	r3, #4
 800ac20:	f2c0 813d 	blt.w	800ae9e <SVCCTL_App_Notification+0x4fa>
 800ac24:	f240 420a 	movw	r2, #1034	; 0x40a
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	f300 8138 	bgt.w	800ae9e <SVCCTL_App_Notification+0x4fa>
 800ac2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac32:	f340 8134 	ble.w	800ae9e <SVCCTL_App_Notification+0x4fa>
 800ac36:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800ac3a:	2b09      	cmp	r3, #9
 800ac3c:	f200 812f 	bhi.w	800ae9e <SVCCTL_App_Notification+0x4fa>
 800ac40:	a201      	add	r2, pc, #4	; (adr r2, 800ac48 <SVCCTL_App_Notification+0x2a4>)
 800ac42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac46:	bf00      	nop
 800ac48:	0800ae0d 	.word	0x0800ae0d
 800ac4c:	0800ace1 	.word	0x0800ace1
 800ac50:	0800ae9f 	.word	0x0800ae9f
 800ac54:	0800ae9f 	.word	0x0800ae9f
 800ac58:	0800ae9f 	.word	0x0800ae9f
 800ac5c:	0800ae9f 	.word	0x0800ae9f
 800ac60:	0800ac71 	.word	0x0800ac71
 800ac64:	0800ae9f 	.word	0x0800ae9f
 800ac68:	0800ad53 	.word	0x0800ad53
 800ac6c:	0800ac8d 	.word	0x0800ac8d
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800ac70:	480e      	ldr	r0, [pc, #56]	; (800acac <SVCCTL_App_Notification+0x308>)
 800ac72:	f7ff fcbd 	bl	800a5f0 <DbgTraceGetFileName>
 800ac76:	4601      	mov	r1, r0
 800ac78:	f240 233f 	movw	r3, #575	; 0x23f
 800ac7c:	4a0c      	ldr	r2, [pc, #48]	; (800acb0 <SVCCTL_App_Notification+0x30c>)
 800ac7e:	480d      	ldr	r0, [pc, #52]	; (800acb4 <SVCCTL_App_Notification+0x310>)
 800ac80:	f001 ff6c 	bl	800cb5c <iprintf>
 800ac84:	4814      	ldr	r0, [pc, #80]	; (800acd8 <SVCCTL_App_Notification+0x334>)
 800ac86:	f001 ff69 	bl	800cb5c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800ac8a:	e105      	b.n	800ae98 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800ac8c:	4807      	ldr	r0, [pc, #28]	; (800acac <SVCCTL_App_Notification+0x308>)
 800ac8e:	f7ff fcaf 	bl	800a5f0 <DbgTraceGetFileName>
 800ac92:	4601      	mov	r1, r0
 800ac94:	f240 234f 	movw	r3, #591	; 0x24f
 800ac98:	4a05      	ldr	r2, [pc, #20]	; (800acb0 <SVCCTL_App_Notification+0x30c>)
 800ac9a:	4806      	ldr	r0, [pc, #24]	; (800acb4 <SVCCTL_App_Notification+0x310>)
 800ac9c:	f001 ff5e 	bl	800cb5c <iprintf>
 800aca0:	480e      	ldr	r0, [pc, #56]	; (800acdc <SVCCTL_App_Notification+0x338>)
 800aca2:	f001 fff7 	bl	800cc94 <puts>
          break;
 800aca6:	e0f7      	b.n	800ae98 <SVCCTL_App_Notification+0x4f4>
 800aca8:	2000202c 	.word	0x2000202c
 800acac:	0800e9d8 	.word	0x0800e9d8
 800acb0:	0800fc50 	.word	0x0800fc50
 800acb4:	0800e9f4 	.word	0x0800e9f4
 800acb8:	0800eb20 	.word	0x0800eb20
 800acbc:	0800eb4c 	.word	0x0800eb4c
 800acc0:	200020b0 	.word	0x200020b0
 800acc4:	0800eb88 	.word	0x0800eb88
 800acc8:	3ff40000 	.word	0x3ff40000
 800accc:	0800ebbc 	.word	0x0800ebbc
 800acd0:	0800ec28 	.word	0x0800ec28
 800acd4:	0800ec70 	.word	0x0800ec70
 800acd8:	0800ecc0 	.word	0x0800ecc0
 800acdc:	0800ece8 	.word	0x0800ece8
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800ace0:	4872      	ldr	r0, [pc, #456]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800ace2:	f7ff fc85 	bl	800a5f0 <DbgTraceGetFileName>
 800ace6:	4601      	mov	r1, r0
 800ace8:	f240 2356 	movw	r3, #598	; 0x256
 800acec:	4a70      	ldr	r2, [pc, #448]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800acee:	4871      	ldr	r0, [pc, #452]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800acf0:	f001 ff34 	bl	800cb5c <iprintf>
 800acf4:	4870      	ldr	r0, [pc, #448]	; (800aeb8 <SVCCTL_App_Notification+0x514>)
 800acf6:	f001 ffcd 	bl	800cc94 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800acfa:	4b70      	ldr	r3, [pc, #448]	; (800aebc <SVCCTL_App_Notification+0x518>)
 800acfc:	8adb      	ldrh	r3, [r3, #22]
 800acfe:	4970      	ldr	r1, [pc, #448]	; (800aec0 <SVCCTL_App_Notification+0x51c>)
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fd fe95 	bl	8008a30 <aci_gap_pass_key_resp>
 800ad06:	4603      	mov	r3, r0
 800ad08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800ad0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d010      	beq.n	800ad36 <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800ad14:	4865      	ldr	r0, [pc, #404]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800ad16:	f7ff fc6b 	bl	800a5f0 <DbgTraceGetFileName>
 800ad1a:	4601      	mov	r1, r0
 800ad1c:	f240 235b 	movw	r3, #603	; 0x25b
 800ad20:	4a63      	ldr	r2, [pc, #396]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800ad22:	4864      	ldr	r0, [pc, #400]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800ad24:	f001 ff1a 	bl	800cb5c <iprintf>
 800ad28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4865      	ldr	r0, [pc, #404]	; (800aec4 <SVCCTL_App_Notification+0x520>)
 800ad30:	f001 ff14 	bl	800cb5c <iprintf>
          break;
 800ad34:	e0b0      	b.n	800ae98 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800ad36:	485d      	ldr	r0, [pc, #372]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800ad38:	f7ff fc5a 	bl	800a5f0 <DbgTraceGetFileName>
 800ad3c:	4601      	mov	r1, r0
 800ad3e:	f240 235f 	movw	r3, #607	; 0x25f
 800ad42:	4a5b      	ldr	r2, [pc, #364]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800ad44:	485b      	ldr	r0, [pc, #364]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800ad46:	f001 ff09 	bl	800cb5c <iprintf>
 800ad4a:	485f      	ldr	r0, [pc, #380]	; (800aec8 <SVCCTL_App_Notification+0x524>)
 800ad4c:	f001 ffa2 	bl	800cc94 <puts>
          break;
 800ad50:	e0a2      	b.n	800ae98 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800ad52:	4856      	ldr	r0, [pc, #344]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800ad54:	f7ff fc4c 	bl	800a5f0 <DbgTraceGetFileName>
 800ad58:	4601      	mov	r1, r0
 800ad5a:	f240 2367 	movw	r3, #615	; 0x267
 800ad5e:	4a54      	ldr	r2, [pc, #336]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800ad60:	4854      	ldr	r0, [pc, #336]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800ad62:	f001 fefb 	bl	800cb5c <iprintf>
 800ad66:	4859      	ldr	r0, [pc, #356]	; (800aecc <SVCCTL_App_Notification+0x528>)
 800ad68:	f001 ff94 	bl	800cc94 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800ad6c:	484f      	ldr	r0, [pc, #316]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800ad6e:	f7ff fc3f 	bl	800a5f0 <DbgTraceGetFileName>
 800ad72:	4601      	mov	r1, r0
 800ad74:	f44f 731a 	mov.w	r3, #616	; 0x268
 800ad78:	4a4d      	ldr	r2, [pc, #308]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800ad7a:	484e      	ldr	r0, [pc, #312]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800ad7c:	f001 feee 	bl	800cb5c <iprintf>
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	3302      	adds	r3, #2
 800ad84:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4851      	ldr	r0, [pc, #324]	; (800aed0 <SVCCTL_App_Notification+0x52c>)
 800ad8c:	f001 fee6 	bl	800cb5c <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800ad90:	4846      	ldr	r0, [pc, #280]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800ad92:	f7ff fc2d 	bl	800a5f0 <DbgTraceGetFileName>
 800ad96:	4601      	mov	r1, r0
 800ad98:	f240 236a 	movw	r3, #618	; 0x26a
 800ad9c:	4a44      	ldr	r2, [pc, #272]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800ad9e:	4845      	ldr	r0, [pc, #276]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800ada0:	f001 fedc 	bl	800cb5c <iprintf>
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	3302      	adds	r3, #2
 800ada8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800adac:	4619      	mov	r1, r3
 800adae:	4849      	ldr	r0, [pc, #292]	; (800aed4 <SVCCTL_App_Notification+0x530>)
 800adb0:	f001 fed4 	bl	800cb5c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800adb4:	4b41      	ldr	r3, [pc, #260]	; (800aebc <SVCCTL_App_Notification+0x518>)
 800adb6:	8adb      	ldrh	r3, [r3, #22]
 800adb8:	2101      	movs	r1, #1
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fd ffe2 	bl	8008d84 <aci_gap_numeric_comparison_value_confirm_yesno>
 800adc0:	4603      	mov	r3, r0
 800adc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800adc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d010      	beq.n	800adf0 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800adce:	4837      	ldr	r0, [pc, #220]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800add0:	f7ff fc0e 	bl	800a5f0 <DbgTraceGetFileName>
 800add4:	4601      	mov	r1, r0
 800add6:	f240 236f 	movw	r3, #623	; 0x26f
 800adda:	4a35      	ldr	r2, [pc, #212]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800addc:	4835      	ldr	r0, [pc, #212]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800adde:	f001 febd 	bl	800cb5c <iprintf>
 800ade2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ade6:	4619      	mov	r1, r3
 800ade8:	483b      	ldr	r0, [pc, #236]	; (800aed8 <SVCCTL_App_Notification+0x534>)
 800adea:	f001 feb7 	bl	800cb5c <iprintf>
          break;
 800adee:	e053      	b.n	800ae98 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800adf0:	482e      	ldr	r0, [pc, #184]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800adf2:	f7ff fbfd 	bl	800a5f0 <DbgTraceGetFileName>
 800adf6:	4601      	mov	r1, r0
 800adf8:	f240 2373 	movw	r3, #627	; 0x273
 800adfc:	4a2c      	ldr	r2, [pc, #176]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800adfe:	482d      	ldr	r0, [pc, #180]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800ae00:	f001 feac 	bl	800cb5c <iprintf>
 800ae04:	4835      	ldr	r0, [pc, #212]	; (800aedc <SVCCTL_App_Notification+0x538>)
 800ae06:	f001 ff45 	bl	800cc94 <puts>
          break;
 800ae0a:	e045      	b.n	800ae98 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	3302      	adds	r3, #2
 800ae10:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800ae12:	4826      	ldr	r0, [pc, #152]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800ae14:	f7ff fbec 	bl	800a5f0 <DbgTraceGetFileName>
 800ae18:	4601      	mov	r1, r0
 800ae1a:	f240 237d 	movw	r3, #637	; 0x27d
 800ae1e:	4a24      	ldr	r2, [pc, #144]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800ae20:	4824      	ldr	r0, [pc, #144]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800ae22:	f001 fe9b 	bl	800cb5c <iprintf>
 800ae26:	482e      	ldr	r0, [pc, #184]	; (800aee0 <SVCCTL_App_Notification+0x53c>)
 800ae28:	f001 ff34 	bl	800cc94 <puts>
          if (p_pairing_complete->Status != 0)
 800ae2c:	69bb      	ldr	r3, [r7, #24]
 800ae2e:	789b      	ldrb	r3, [r3, #2]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d013      	beq.n	800ae5c <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800ae34:	481d      	ldr	r0, [pc, #116]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800ae36:	f7ff fbdb 	bl	800a5f0 <DbgTraceGetFileName>
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	f44f 7320 	mov.w	r3, #640	; 0x280
 800ae40:	4a1b      	ldr	r2, [pc, #108]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800ae42:	481c      	ldr	r0, [pc, #112]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800ae44:	f001 fe8a 	bl	800cb5c <iprintf>
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	789b      	ldrb	r3, [r3, #2]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	78db      	ldrb	r3, [r3, #3]
 800ae52:	461a      	mov	r2, r3
 800ae54:	4823      	ldr	r0, [pc, #140]	; (800aee4 <SVCCTL_App_Notification+0x540>)
 800ae56:	f001 fe81 	bl	800cb5c <iprintf>
 800ae5a:	e00c      	b.n	800ae76 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800ae5c:	4813      	ldr	r0, [pc, #76]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800ae5e:	f7ff fbc7 	bl	800a5f0 <DbgTraceGetFileName>
 800ae62:	4601      	mov	r1, r0
 800ae64:	f44f 7321 	mov.w	r3, #644	; 0x284
 800ae68:	4a11      	ldr	r2, [pc, #68]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800ae6a:	4812      	ldr	r0, [pc, #72]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800ae6c:	f001 fe76 	bl	800cb5c <iprintf>
 800ae70:	481d      	ldr	r0, [pc, #116]	; (800aee8 <SVCCTL_App_Notification+0x544>)
 800ae72:	f001 ff0f 	bl	800cc94 <puts>
          APP_DBG_MSG("\n");
 800ae76:	480d      	ldr	r0, [pc, #52]	; (800aeac <SVCCTL_App_Notification+0x508>)
 800ae78:	f7ff fbba 	bl	800a5f0 <DbgTraceGetFileName>
 800ae7c:	4601      	mov	r1, r0
 800ae7e:	f240 2386 	movw	r3, #646	; 0x286
 800ae82:	4a0b      	ldr	r2, [pc, #44]	; (800aeb0 <SVCCTL_App_Notification+0x50c>)
 800ae84:	480b      	ldr	r0, [pc, #44]	; (800aeb4 <SVCCTL_App_Notification+0x510>)
 800ae86:	f001 fe69 	bl	800cb5c <iprintf>
 800ae8a:	200a      	movs	r0, #10
 800ae8c:	f001 fe7e 	bl	800cb8c <putchar>
          break;
 800ae90:	e002      	b.n	800ae98 <SVCCTL_App_Notification+0x4f4>
          break;
 800ae92:	bf00      	nop
 800ae94:	e003      	b.n	800ae9e <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800ae96:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ae98:	e001      	b.n	800ae9e <SVCCTL_App_Notification+0x4fa>
      break;
 800ae9a:	bf00      	nop
 800ae9c:	e000      	b.n	800aea0 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ae9e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800aea0:	2301      	movs	r3, #1
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3728      	adds	r7, #40	; 0x28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bdb0      	pop	{r4, r5, r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	0800e9d8 	.word	0x0800e9d8
 800aeb0:	0800fc50 	.word	0x0800fc50
 800aeb4:	0800e9f4 	.word	0x0800e9f4
 800aeb8:	0800ed18 	.word	0x0800ed18
 800aebc:	2000202c 	.word	0x2000202c
 800aec0:	0001b207 	.word	0x0001b207
 800aec4:	0800ed40 	.word	0x0800ed40
 800aec8:	0800ed74 	.word	0x0800ed74
 800aecc:	0800ed9c 	.word	0x0800ed9c
 800aed0:	0800edd0 	.word	0x0800edd0
 800aed4:	0800edec 	.word	0x0800edec
 800aed8:	0800ee04 	.word	0x0800ee04
 800aedc:	0800ee54 	.word	0x0800ee54
 800aee0:	0800ee9c 	.word	0x0800ee9c
 800aee4:	0800eec8 	.word	0x0800eec8
 800aee8:	0800ef04 	.word	0x0800ef04

0800aeec <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800aef2:	4b06      	ldr	r3, [pc, #24]	; (800af0c <Ble_Tl_Init+0x20>)
 800aef4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800aef6:	4b06      	ldr	r3, [pc, #24]	; (800af10 <Ble_Tl_Init+0x24>)
 800aef8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800aefa:	463b      	mov	r3, r7
 800aefc:	4619      	mov	r1, r3
 800aefe:	4805      	ldr	r0, [pc, #20]	; (800af14 <Ble_Tl_Init+0x28>)
 800af00:	f7fe fe64 	bl	8009bcc <hci_init>

  return;
 800af04:	bf00      	nop
}
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	200300d8 	.word	0x200300d8
 800af10:	0800b6e1 	.word	0x0800b6e1
 800af14:	0800b6a9 	.word	0x0800b6a9

0800af18 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800af18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af1a:	b08d      	sub	sp, #52	; 0x34
 800af1c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800af1e:	2300      	movs	r3, #0
 800af20:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800af22:	2392      	movs	r3, #146	; 0x92
 800af24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800af26:	48a3      	ldr	r0, [pc, #652]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800af28:	f7ff fb62 	bl	800a5f0 <DbgTraceGetFileName>
 800af2c:	4601      	mov	r1, r0
 800af2e:	f240 23c6 	movw	r3, #710	; 0x2c6
 800af32:	4aa1      	ldr	r2, [pc, #644]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800af34:	48a1      	ldr	r0, [pc, #644]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800af36:	f001 fe11 	bl	800cb5c <iprintf>
 800af3a:	48a1      	ldr	r0, [pc, #644]	; (800b1c0 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800af3c:	f001 feaa 	bl	800cc94 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800af40:	f7fe fb73 	bl	800962a <hci_reset>
 800af44:	4603      	mov	r3, r0
 800af46:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800af48:	7dfb      	ldrb	r3, [r7, #23]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00f      	beq.n	800af6e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800af4e:	4899      	ldr	r0, [pc, #612]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800af50:	f7ff fb4e 	bl	800a5f0 <DbgTraceGetFileName>
 800af54:	4601      	mov	r1, r0
 800af56:	f240 23cf 	movw	r3, #719	; 0x2cf
 800af5a:	4a97      	ldr	r2, [pc, #604]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800af5c:	4897      	ldr	r0, [pc, #604]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800af5e:	f001 fdfd 	bl	800cb5c <iprintf>
 800af62:	7dfb      	ldrb	r3, [r7, #23]
 800af64:	4619      	mov	r1, r3
 800af66:	4897      	ldr	r0, [pc, #604]	; (800b1c4 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800af68:	f001 fdf8 	bl	800cb5c <iprintf>
 800af6c:	e00c      	b.n	800af88 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800af6e:	4891      	ldr	r0, [pc, #580]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800af70:	f7ff fb3e 	bl	800a5f0 <DbgTraceGetFileName>
 800af74:	4601      	mov	r1, r0
 800af76:	f240 23d3 	movw	r3, #723	; 0x2d3
 800af7a:	4a8f      	ldr	r2, [pc, #572]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800af7c:	488f      	ldr	r0, [pc, #572]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800af7e:	f001 fded 	bl	800cb5c <iprintf>
 800af82:	4891      	ldr	r0, [pc, #580]	; (800b1c8 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800af84:	f001 fe86 	bl	800cc94 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800af88:	f000 fad8 	bl	800b53c <BleGetBdAddress>
 800af8c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	2106      	movs	r1, #6
 800af92:	2000      	movs	r0, #0
 800af94:	f7fe fa09 	bl	80093aa <aci_hal_write_config_data>
 800af98:	4603      	mov	r3, r0
 800af9a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00f      	beq.n	800afc2 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800afa2:	4884      	ldr	r0, [pc, #528]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800afa4:	f7ff fb24 	bl	800a5f0 <DbgTraceGetFileName>
 800afa8:	4601      	mov	r1, r0
 800afaa:	f240 23dd 	movw	r3, #733	; 0x2dd
 800afae:	4a82      	ldr	r2, [pc, #520]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800afb0:	4882      	ldr	r0, [pc, #520]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800afb2:	f001 fdd3 	bl	800cb5c <iprintf>
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
 800afb8:	4619      	mov	r1, r3
 800afba:	4884      	ldr	r0, [pc, #528]	; (800b1cc <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800afbc:	f001 fdce 	bl	800cb5c <iprintf>
 800afc0:	e035      	b.n	800b02e <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800afc2:	487c      	ldr	r0, [pc, #496]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800afc4:	f7ff fb14 	bl	800a5f0 <DbgTraceGetFileName>
 800afc8:	4601      	mov	r1, r0
 800afca:	f240 23e1 	movw	r3, #737	; 0x2e1
 800afce:	4a7a      	ldr	r2, [pc, #488]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800afd0:	487a      	ldr	r0, [pc, #488]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800afd2:	f001 fdc3 	bl	800cb5c <iprintf>
 800afd6:	487e      	ldr	r0, [pc, #504]	; (800b1d0 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800afd8:	f001 fe5c 	bl	800cc94 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800afdc:	4875      	ldr	r0, [pc, #468]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800afde:	f7ff fb07 	bl	800a5f0 <DbgTraceGetFileName>
 800afe2:	4601      	mov	r1, r0
 800afe4:	f240 23e2 	movw	r3, #738	; 0x2e2
 800afe8:	4a73      	ldr	r2, [pc, #460]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800afea:	4874      	ldr	r0, [pc, #464]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800afec:	f001 fdb6 	bl	800cb5c <iprintf>
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	3305      	adds	r3, #5
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	4618      	mov	r0, r3
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	3304      	adds	r3, #4
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	461c      	mov	r4, r3
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	3303      	adds	r3, #3
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	461d      	mov	r5, r3
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	3302      	adds	r3, #2
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	3301      	adds	r3, #1
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	4619      	mov	r1, r3
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	9302      	str	r3, [sp, #8]
 800b01e:	9101      	str	r1, [sp, #4]
 800b020:	9200      	str	r2, [sp, #0]
 800b022:	462b      	mov	r3, r5
 800b024:	4622      	mov	r2, r4
 800b026:	4601      	mov	r1, r0
 800b028:	486a      	ldr	r0, [pc, #424]	; (800b1d4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800b02a:	f001 fd97 	bl	800cb5c <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b02e:	4a6a      	ldr	r2, [pc, #424]	; (800b1d8 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800b030:	2110      	movs	r1, #16
 800b032:	2018      	movs	r0, #24
 800b034:	f7fe f9b9 	bl	80093aa <aci_hal_write_config_data>
 800b038:	4603      	mov	r3, r0
 800b03a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b03c:	7dfb      	ldrb	r3, [r7, #23]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00f      	beq.n	800b062 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800b042:	485c      	ldr	r0, [pc, #368]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b044:	f7ff fad4 	bl	800a5f0 <DbgTraceGetFileName>
 800b048:	4601      	mov	r1, r0
 800b04a:	f44f 734b 	mov.w	r3, #812	; 0x32c
 800b04e:	4a5a      	ldr	r2, [pc, #360]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b050:	485a      	ldr	r0, [pc, #360]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b052:	f001 fd83 	bl	800cb5c <iprintf>
 800b056:	7dfb      	ldrb	r3, [r7, #23]
 800b058:	4619      	mov	r1, r3
 800b05a:	4860      	ldr	r0, [pc, #384]	; (800b1dc <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800b05c:	f001 fd7e 	bl	800cb5c <iprintf>
 800b060:	e00c      	b.n	800b07c <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800b062:	4854      	ldr	r0, [pc, #336]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b064:	f7ff fac4 	bl	800a5f0 <DbgTraceGetFileName>
 800b068:	4601      	mov	r1, r0
 800b06a:	f44f 734c 	mov.w	r3, #816	; 0x330
 800b06e:	4a52      	ldr	r2, [pc, #328]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b070:	4852      	ldr	r0, [pc, #328]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b072:	f001 fd73 	bl	800cb5c <iprintf>
 800b076:	485a      	ldr	r0, [pc, #360]	; (800b1e0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800b078:	f001 fe0c 	bl	800cc94 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b07c:	4a59      	ldr	r2, [pc, #356]	; (800b1e4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b07e:	2110      	movs	r1, #16
 800b080:	2008      	movs	r0, #8
 800b082:	f7fe f992 	bl	80093aa <aci_hal_write_config_data>
 800b086:	4603      	mov	r3, r0
 800b088:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d00f      	beq.n	800b0b0 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800b090:	4848      	ldr	r0, [pc, #288]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b092:	f7ff faad 	bl	800a5f0 <DbgTraceGetFileName>
 800b096:	4601      	mov	r1, r0
 800b098:	f240 3339 	movw	r3, #825	; 0x339
 800b09c:	4a46      	ldr	r2, [pc, #280]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b09e:	4847      	ldr	r0, [pc, #284]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b0a0:	f001 fd5c 	bl	800cb5c <iprintf>
 800b0a4:	7dfb      	ldrb	r3, [r7, #23]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	484f      	ldr	r0, [pc, #316]	; (800b1e8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800b0aa:	f001 fd57 	bl	800cb5c <iprintf>
 800b0ae:	e00c      	b.n	800b0ca <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800b0b0:	4840      	ldr	r0, [pc, #256]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b0b2:	f7ff fa9d 	bl	800a5f0 <DbgTraceGetFileName>
 800b0b6:	4601      	mov	r1, r0
 800b0b8:	f240 333d 	movw	r3, #829	; 0x33d
 800b0bc:	4a3e      	ldr	r2, [pc, #248]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b0be:	483f      	ldr	r0, [pc, #252]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b0c0:	f001 fd4c 	bl	800cb5c <iprintf>
 800b0c4:	4849      	ldr	r0, [pc, #292]	; (800b1ec <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800b0c6:	f001 fde5 	bl	800cc94 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b0ca:	2118      	movs	r1, #24
 800b0cc:	2001      	movs	r0, #1
 800b0ce:	f7fe f9f1 	bl	80094b4 <aci_hal_set_tx_power_level>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b0d6:	7dfb      	ldrb	r3, [r7, #23]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00f      	beq.n	800b0fc <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800b0dc:	4835      	ldr	r0, [pc, #212]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b0de:	f7ff fa87 	bl	800a5f0 <DbgTraceGetFileName>
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	f240 3346 	movw	r3, #838	; 0x346
 800b0e8:	4a33      	ldr	r2, [pc, #204]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b0ea:	4834      	ldr	r0, [pc, #208]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b0ec:	f001 fd36 	bl	800cb5c <iprintf>
 800b0f0:	7dfb      	ldrb	r3, [r7, #23]
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	483e      	ldr	r0, [pc, #248]	; (800b1f0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800b0f6:	f001 fd31 	bl	800cb5c <iprintf>
 800b0fa:	e00c      	b.n	800b116 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800b0fc:	482d      	ldr	r0, [pc, #180]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b0fe:	f7ff fa77 	bl	800a5f0 <DbgTraceGetFileName>
 800b102:	4601      	mov	r1, r0
 800b104:	f240 334a 	movw	r3, #842	; 0x34a
 800b108:	4a2b      	ldr	r2, [pc, #172]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b10a:	482c      	ldr	r0, [pc, #176]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b10c:	f001 fd26 	bl	800cb5c <iprintf>
 800b110:	4838      	ldr	r0, [pc, #224]	; (800b1f4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800b112:	f001 fdbf 	bl	800cc94 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b116:	f7fd fe9c 	bl	8008e52 <aci_gatt_init>
 800b11a:	4603      	mov	r3, r0
 800b11c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b11e:	7dfb      	ldrb	r3, [r7, #23]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00f      	beq.n	800b144 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800b124:	4823      	ldr	r0, [pc, #140]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b126:	f7ff fa63 	bl	800a5f0 <DbgTraceGetFileName>
 800b12a:	4601      	mov	r1, r0
 800b12c:	f240 3353 	movw	r3, #851	; 0x353
 800b130:	4a21      	ldr	r2, [pc, #132]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b132:	4822      	ldr	r0, [pc, #136]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b134:	f001 fd12 	bl	800cb5c <iprintf>
 800b138:	7dfb      	ldrb	r3, [r7, #23]
 800b13a:	4619      	mov	r1, r3
 800b13c:	482e      	ldr	r0, [pc, #184]	; (800b1f8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800b13e:	f001 fd0d 	bl	800cb5c <iprintf>
 800b142:	e00c      	b.n	800b15e <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800b144:	481b      	ldr	r0, [pc, #108]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b146:	f7ff fa53 	bl	800a5f0 <DbgTraceGetFileName>
 800b14a:	4601      	mov	r1, r0
 800b14c:	f240 3357 	movw	r3, #855	; 0x357
 800b150:	4a19      	ldr	r2, [pc, #100]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b152:	481a      	ldr	r0, [pc, #104]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b154:	f001 fd02 	bl	800cb5c <iprintf>
 800b158:	4828      	ldr	r0, [pc, #160]	; (800b1fc <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800b15a:	f001 fd9b 	bl	800cc94 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b15e:	2300      	movs	r3, #0
 800b160:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	f043 0301 	orr.w	r3, r3, #1
 800b168:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d069      	beq.n	800b244 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b170:	4b23      	ldr	r3, [pc, #140]	; (800b200 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800b172:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b174:	1dba      	adds	r2, r7, #6
 800b176:	7bf8      	ldrb	r0, [r7, #15]
 800b178:	1cbb      	adds	r3, r7, #2
 800b17a:	9301      	str	r3, [sp, #4]
 800b17c:	1d3b      	adds	r3, r7, #4
 800b17e:	9300      	str	r3, [sp, #0]
 800b180:	4613      	mov	r3, r2
 800b182:	2205      	movs	r2, #5
 800b184:	2100      	movs	r1, #0
 800b186:	f7fd fcba 	bl	8008afe <aci_gap_init>
 800b18a:	4603      	mov	r3, r0
 800b18c:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d039      	beq.n	800b208 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800b194:	4807      	ldr	r0, [pc, #28]	; (800b1b4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b196:	f7ff fa2b 	bl	800a5f0 <DbgTraceGetFileName>
 800b19a:	4601      	mov	r1, r0
 800b19c:	f240 3377 	movw	r3, #887	; 0x377
 800b1a0:	4a05      	ldr	r2, [pc, #20]	; (800b1b8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b1a2:	4806      	ldr	r0, [pc, #24]	; (800b1bc <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b1a4:	f001 fcda 	bl	800cb5c <iprintf>
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	4815      	ldr	r0, [pc, #84]	; (800b204 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800b1ae:	f001 fcd5 	bl	800cb5c <iprintf>
 800b1b2:	e036      	b.n	800b222 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800b1b4:	0800e9d8 	.word	0x0800e9d8
 800b1b8:	0800fc68 	.word	0x0800fc68
 800b1bc:	0800e9f4 	.word	0x0800e9f4
 800b1c0:	0800ef1c 	.word	0x0800ef1c
 800b1c4:	0800ef48 	.word	0x0800ef48
 800b1c8:	0800ef78 	.word	0x0800ef78
 800b1cc:	0800ef98 	.word	0x0800ef98
 800b1d0:	0800eff4 	.word	0x0800eff4
 800b1d4:	0800f040 	.word	0x0800f040
 800b1d8:	0800fc20 	.word	0x0800fc20
 800b1dc:	0800f07c 	.word	0x0800f07c
 800b1e0:	0800f0d4 	.word	0x0800f0d4
 800b1e4:	0800fc30 	.word	0x0800fc30
 800b1e8:	0800f11c 	.word	0x0800f11c
 800b1ec:	0800f174 	.word	0x0800f174
 800b1f0:	0800f1bc 	.word	0x0800f1bc
 800b1f4:	0800f1fc 	.word	0x0800f1fc
 800b1f8:	0800f22c 	.word	0x0800f22c
 800b1fc:	0800f260 	.word	0x0800f260
 800b200:	0800f284 	.word	0x0800f284
 800b204:	0800f28c 	.word	0x0800f28c
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800b208:	487e      	ldr	r0, [pc, #504]	; (800b404 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b20a:	f7ff f9f1 	bl	800a5f0 <DbgTraceGetFileName>
 800b20e:	4601      	mov	r1, r0
 800b210:	f240 337b 	movw	r3, #891	; 0x37b
 800b214:	4a7c      	ldr	r2, [pc, #496]	; (800b408 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b216:	487d      	ldr	r0, [pc, #500]	; (800b40c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b218:	f001 fca0 	bl	800cb5c <iprintf>
 800b21c:	487c      	ldr	r0, [pc, #496]	; (800b410 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800b21e:	f001 fd39 	bl	800cc94 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b222:	88fc      	ldrh	r4, [r7, #6]
 800b224:	88bd      	ldrh	r5, [r7, #4]
 800b226:	68b8      	ldr	r0, [r7, #8]
 800b228:	f7f4 ffaa 	bl	8000180 <strlen>
 800b22c:	4603      	mov	r3, r0
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	4613      	mov	r3, r2
 800b236:	2200      	movs	r2, #0
 800b238:	4629      	mov	r1, r5
 800b23a:	4620      	mov	r0, r4
 800b23c:	f7fe f80c 	bl	8009258 <aci_gatt_update_char_value>
 800b240:	4603      	mov	r3, r0
 800b242:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b244:	88f8      	ldrh	r0, [r7, #6]
 800b246:	8879      	ldrh	r1, [r7, #2]
 800b248:	463b      	mov	r3, r7
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	2302      	movs	r3, #2
 800b24e:	2200      	movs	r2, #0
 800b250:	f7fe f802 	bl	8009258 <aci_gatt_update_char_value>
 800b254:	4603      	mov	r3, r0
 800b256:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b258:	2202      	movs	r2, #2
 800b25a:	2102      	movs	r1, #2
 800b25c:	2000      	movs	r0, #0
 800b25e:	f7fe fa08 	bl	8009672 <hci_le_set_default_phy>
 800b262:	4603      	mov	r3, r0
 800b264:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00f      	beq.n	800b28c <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800b26c:	4865      	ldr	r0, [pc, #404]	; (800b404 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b26e:	f7ff f9bf 	bl	800a5f0 <DbgTraceGetFileName>
 800b272:	4601      	mov	r1, r0
 800b274:	f240 339d 	movw	r3, #925	; 0x39d
 800b278:	4a63      	ldr	r2, [pc, #396]	; (800b408 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b27a:	4864      	ldr	r0, [pc, #400]	; (800b40c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b27c:	f001 fc6e 	bl	800cb5c <iprintf>
 800b280:	7dfb      	ldrb	r3, [r7, #23]
 800b282:	4619      	mov	r1, r3
 800b284:	4863      	ldr	r0, [pc, #396]	; (800b414 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800b286:	f001 fc69 	bl	800cb5c <iprintf>
 800b28a:	e00c      	b.n	800b2a6 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800b28c:	485d      	ldr	r0, [pc, #372]	; (800b404 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b28e:	f7ff f9af 	bl	800a5f0 <DbgTraceGetFileName>
 800b292:	4601      	mov	r1, r0
 800b294:	f240 33a1 	movw	r3, #929	; 0x3a1
 800b298:	4a5b      	ldr	r2, [pc, #364]	; (800b408 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b29a:	485c      	ldr	r0, [pc, #368]	; (800b40c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b29c:	f001 fc5e 	bl	800cb5c <iprintf>
 800b2a0:	485d      	ldr	r0, [pc, #372]	; (800b418 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800b2a2:	f001 fcf7 	bl	800cc94 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b2a6:	4b5d      	ldr	r3, [pc, #372]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b2a8:	2201      	movs	r2, #1
 800b2aa:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b2ac:	4b5b      	ldr	r3, [pc, #364]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7fd faa5 	bl	8008800 <aci_gap_set_io_capability>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00f      	beq.n	800b2e0 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800b2c0:	4850      	ldr	r0, [pc, #320]	; (800b404 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b2c2:	f7ff f995 	bl	800a5f0 <DbgTraceGetFileName>
 800b2c6:	4601      	mov	r1, r0
 800b2c8:	f240 33ab 	movw	r3, #939	; 0x3ab
 800b2cc:	4a4e      	ldr	r2, [pc, #312]	; (800b408 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b2ce:	484f      	ldr	r0, [pc, #316]	; (800b40c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b2d0:	f001 fc44 	bl	800cb5c <iprintf>
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4851      	ldr	r0, [pc, #324]	; (800b420 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800b2da:	f001 fc3f 	bl	800cb5c <iprintf>
 800b2de:	e00c      	b.n	800b2fa <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800b2e0:	4848      	ldr	r0, [pc, #288]	; (800b404 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b2e2:	f7ff f985 	bl	800a5f0 <DbgTraceGetFileName>
 800b2e6:	4601      	mov	r1, r0
 800b2e8:	f240 33af 	movw	r3, #943	; 0x3af
 800b2ec:	4a46      	ldr	r2, [pc, #280]	; (800b408 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b2ee:	4847      	ldr	r0, [pc, #284]	; (800b40c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b2f0:	f001 fc34 	bl	800cb5c <iprintf>
 800b2f4:	484b      	ldr	r0, [pc, #300]	; (800b424 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800b2f6:	f001 fccd 	bl	800cc94 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b2fa:	4b48      	ldr	r3, [pc, #288]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b300:	4b46      	ldr	r3, [pc, #280]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b302:	2208      	movs	r2, #8
 800b304:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b306:	4b45      	ldr	r3, [pc, #276]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b308:	2210      	movs	r2, #16
 800b30a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b30c:	4b43      	ldr	r3, [pc, #268]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b30e:	2200      	movs	r2, #0
 800b310:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b312:	4b42      	ldr	r3, [pc, #264]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b314:	4a44      	ldr	r2, [pc, #272]	; (800b428 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800b316:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b318:	4b40      	ldr	r3, [pc, #256]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b31e:	4b3f      	ldr	r3, [pc, #252]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b320:	789c      	ldrb	r4, [r3, #2]
 800b322:	4b3e      	ldr	r3, [pc, #248]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b324:	785d      	ldrb	r5, [r3, #1]
 800b326:	4b3d      	ldr	r3, [pc, #244]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b328:	791b      	ldrb	r3, [r3, #4]
 800b32a:	4a3c      	ldr	r2, [pc, #240]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b32c:	7952      	ldrb	r2, [r2, #5]
 800b32e:	493b      	ldr	r1, [pc, #236]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b330:	78c9      	ldrb	r1, [r1, #3]
 800b332:	483a      	ldr	r0, [pc, #232]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b334:	6880      	ldr	r0, [r0, #8]
 800b336:	2600      	movs	r6, #0
 800b338:	9604      	str	r6, [sp, #16]
 800b33a:	9003      	str	r0, [sp, #12]
 800b33c:	9102      	str	r1, [sp, #8]
 800b33e:	9201      	str	r2, [sp, #4]
 800b340:	9300      	str	r3, [sp, #0]
 800b342:	2300      	movs	r3, #0
 800b344:	2201      	movs	r2, #1
 800b346:	4629      	mov	r1, r5
 800b348:	4620      	mov	r0, r4
 800b34a:	f7fd faad 	bl	80088a8 <aci_gap_set_authentication_requirement>
 800b34e:	4603      	mov	r3, r0
 800b350:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00f      	beq.n	800b378 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800b358:	482a      	ldr	r0, [pc, #168]	; (800b404 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b35a:	f7ff f949 	bl	800a5f0 <DbgTraceGetFileName>
 800b35e:	4601      	mov	r1, r0
 800b360:	f240 33ca 	movw	r3, #970	; 0x3ca
 800b364:	4a28      	ldr	r2, [pc, #160]	; (800b408 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b366:	4829      	ldr	r0, [pc, #164]	; (800b40c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b368:	f001 fbf8 	bl	800cb5c <iprintf>
 800b36c:	7dfb      	ldrb	r3, [r7, #23]
 800b36e:	4619      	mov	r1, r3
 800b370:	482e      	ldr	r0, [pc, #184]	; (800b42c <Ble_Hci_Gap_Gatt_Init+0x514>)
 800b372:	f001 fbf3 	bl	800cb5c <iprintf>
 800b376:	e00c      	b.n	800b392 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800b378:	4822      	ldr	r0, [pc, #136]	; (800b404 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b37a:	f7ff f939 	bl	800a5f0 <DbgTraceGetFileName>
 800b37e:	4601      	mov	r1, r0
 800b380:	f240 33ce 	movw	r3, #974	; 0x3ce
 800b384:	4a20      	ldr	r2, [pc, #128]	; (800b408 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b386:	4821      	ldr	r0, [pc, #132]	; (800b40c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b388:	f001 fbe8 	bl	800cb5c <iprintf>
 800b38c:	4828      	ldr	r0, [pc, #160]	; (800b430 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800b38e:	f001 fc81 	bl	800cc94 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b392:	4b22      	ldr	r3, [pc, #136]	; (800b41c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b394:	789b      	ldrb	r3, [r3, #2]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d023      	beq.n	800b3e2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800b39a:	f7fd fccf 	bl	8008d3c <aci_gap_configure_whitelist>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800b3a2:	7dfb      	ldrb	r3, [r7, #23]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00f      	beq.n	800b3c8 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800b3a8:	4816      	ldr	r0, [pc, #88]	; (800b404 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b3aa:	f7ff f921 	bl	800a5f0 <DbgTraceGetFileName>
 800b3ae:	4601      	mov	r1, r0
 800b3b0:	f240 33d9 	movw	r3, #985	; 0x3d9
 800b3b4:	4a14      	ldr	r2, [pc, #80]	; (800b408 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b3b6:	4815      	ldr	r0, [pc, #84]	; (800b40c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b3b8:	f001 fbd0 	bl	800cb5c <iprintf>
 800b3bc:	7dfb      	ldrb	r3, [r7, #23]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	481c      	ldr	r0, [pc, #112]	; (800b434 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800b3c2:	f001 fbcb 	bl	800cb5c <iprintf>
 800b3c6:	e00c      	b.n	800b3e2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800b3c8:	480e      	ldr	r0, [pc, #56]	; (800b404 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b3ca:	f7ff f911 	bl	800a5f0 <DbgTraceGetFileName>
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	f240 33dd 	movw	r3, #989	; 0x3dd
 800b3d4:	4a0c      	ldr	r2, [pc, #48]	; (800b408 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b3d6:	480d      	ldr	r0, [pc, #52]	; (800b40c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b3d8:	f001 fbc0 	bl	800cb5c <iprintf>
 800b3dc:	4816      	ldr	r0, [pc, #88]	; (800b438 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800b3de:	f001 fc59 	bl	800cc94 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800b3e2:	4808      	ldr	r0, [pc, #32]	; (800b404 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b3e4:	f7ff f904 	bl	800a5f0 <DbgTraceGetFileName>
 800b3e8:	4601      	mov	r1, r0
 800b3ea:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800b3ee:	4a06      	ldr	r2, [pc, #24]	; (800b408 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b3f0:	4806      	ldr	r0, [pc, #24]	; (800b40c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b3f2:	f001 fbb3 	bl	800cb5c <iprintf>
 800b3f6:	4811      	ldr	r0, [pc, #68]	; (800b43c <Ble_Hci_Gap_Gatt_Init+0x524>)
 800b3f8:	f001 fbb0 	bl	800cb5c <iprintf>
}
 800b3fc:	bf00      	nop
 800b3fe:	371c      	adds	r7, #28
 800b400:	46bd      	mov	sp, r7
 800b402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b404:	0800e9d8 	.word	0x0800e9d8
 800b408:	0800fc68 	.word	0x0800fc68
 800b40c:	0800e9f4 	.word	0x0800e9f4
 800b410:	0800f2bc 	.word	0x0800f2bc
 800b414:	0800f2dc 	.word	0x0800f2dc
 800b418:	0800f318 	.word	0x0800f318
 800b41c:	2000202c 	.word	0x2000202c
 800b420:	0800f344 	.word	0x0800f344
 800b424:	0800f384 	.word	0x0800f384
 800b428:	0001b207 	.word	0x0001b207
 800b42c:	0800f3b4 	.word	0x0800f3b4
 800b430:	0800f400 	.word	0x0800f400
 800b434:	0800f43c 	.word	0x0800f43c
 800b438:	0800f47c 	.word	0x0800f47c
 800b43c:	0800f4ac 	.word	0x0800f4ac

0800b440 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08c      	sub	sp, #48	; 0x30
 800b444:	af08      	add	r7, sp, #32
 800b446:	4603      	mov	r3, r0
 800b448:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b44a:	2392      	movs	r3, #146	; 0x92
 800b44c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b44e:	4a32      	ldr	r2, [pc, #200]	; (800b518 <Adv_Request+0xd8>)
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b456:	2300      	movs	r3, #0
 800b458:	9306      	str	r3, [sp, #24]
 800b45a:	2300      	movs	r3, #0
 800b45c:	9305      	str	r3, [sp, #20]
 800b45e:	2300      	movs	r3, #0
 800b460:	9304      	str	r3, [sp, #16]
 800b462:	2300      	movs	r3, #0
 800b464:	9303      	str	r3, [sp, #12]
 800b466:	2300      	movs	r3, #0
 800b468:	9302      	str	r3, [sp, #8]
 800b46a:	2300      	movs	r3, #0
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	2300      	movs	r3, #0
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	2300      	movs	r3, #0
 800b474:	22a0      	movs	r2, #160	; 0xa0
 800b476:	2180      	movs	r1, #128	; 0x80
 800b478:	2000      	movs	r0, #0
 800b47a:	f7fd f8c7 	bl	800860c <aci_gap_set_discoverable>
 800b47e:	4603      	mov	r3, r0
 800b480:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800b482:	7bfb      	ldrb	r3, [r7, #15]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00f      	beq.n	800b4a8 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800b488:	4824      	ldr	r0, [pc, #144]	; (800b51c <Adv_Request+0xdc>)
 800b48a:	f7ff f8b1 	bl	800a5f0 <DbgTraceGetFileName>
 800b48e:	4601      	mov	r1, r0
 800b490:	f240 33f6 	movw	r3, #1014	; 0x3f6
 800b494:	4a22      	ldr	r2, [pc, #136]	; (800b520 <Adv_Request+0xe0>)
 800b496:	4823      	ldr	r0, [pc, #140]	; (800b524 <Adv_Request+0xe4>)
 800b498:	f001 fb60 	bl	800cb5c <iprintf>
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	4619      	mov	r1, r3
 800b4a0:	4821      	ldr	r0, [pc, #132]	; (800b528 <Adv_Request+0xe8>)
 800b4a2:	f001 fb5b 	bl	800cb5c <iprintf>
 800b4a6:	e00c      	b.n	800b4c2 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800b4a8:	481c      	ldr	r0, [pc, #112]	; (800b51c <Adv_Request+0xdc>)
 800b4aa:	f7ff f8a1 	bl	800a5f0 <DbgTraceGetFileName>
 800b4ae:	4601      	mov	r1, r0
 800b4b0:	f240 33fa 	movw	r3, #1018	; 0x3fa
 800b4b4:	4a1a      	ldr	r2, [pc, #104]	; (800b520 <Adv_Request+0xe0>)
 800b4b6:	481b      	ldr	r0, [pc, #108]	; (800b524 <Adv_Request+0xe4>)
 800b4b8:	f001 fb50 	bl	800cb5c <iprintf>
 800b4bc:	481b      	ldr	r0, [pc, #108]	; (800b52c <Adv_Request+0xec>)
 800b4be:	f001 fbe9 	bl	800cc94 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b4c2:	491b      	ldr	r1, [pc, #108]	; (800b530 <Adv_Request+0xf0>)
 800b4c4:	2015      	movs	r0, #21
 800b4c6:	f7fd fbc7 	bl	8008c58 <aci_gap_update_adv_data>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00f      	beq.n	800b4f4 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800b4d4:	4811      	ldr	r0, [pc, #68]	; (800b51c <Adv_Request+0xdc>)
 800b4d6:	f7ff f88b 	bl	800a5f0 <DbgTraceGetFileName>
 800b4da:	4601      	mov	r1, r0
 800b4dc:	f240 4301 	movw	r3, #1025	; 0x401
 800b4e0:	4a0f      	ldr	r2, [pc, #60]	; (800b520 <Adv_Request+0xe0>)
 800b4e2:	4810      	ldr	r0, [pc, #64]	; (800b524 <Adv_Request+0xe4>)
 800b4e4:	f001 fb3a 	bl	800cb5c <iprintf>
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4811      	ldr	r0, [pc, #68]	; (800b534 <Adv_Request+0xf4>)
 800b4ee:	f001 fb35 	bl	800cb5c <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b4f2:	e00d      	b.n	800b510 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800b4f4:	4809      	ldr	r0, [pc, #36]	; (800b51c <Adv_Request+0xdc>)
 800b4f6:	f7ff f87b 	bl	800a5f0 <DbgTraceGetFileName>
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	f240 4305 	movw	r3, #1029	; 0x405
 800b500:	4a07      	ldr	r2, [pc, #28]	; (800b520 <Adv_Request+0xe0>)
 800b502:	4808      	ldr	r0, [pc, #32]	; (800b524 <Adv_Request+0xe4>)
 800b504:	f001 fb2a 	bl	800cb5c <iprintf>
 800b508:	480b      	ldr	r0, [pc, #44]	; (800b538 <Adv_Request+0xf8>)
 800b50a:	f001 fb27 	bl	800cb5c <iprintf>
  return;
 800b50e:	bf00      	nop
}
 800b510:	3710      	adds	r7, #16
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	2000202c 	.word	0x2000202c
 800b51c:	0800e9d8 	.word	0x0800e9d8
 800b520:	0800fc80 	.word	0x0800fc80
 800b524:	0800e9f4 	.word	0x0800e9f4
 800b528:	0800f4d8 	.word	0x0800f4d8
 800b52c:	0800f510 	.word	0x0800f510
 800b530:	20000014 	.word	0x20000014
 800b534:	0800f538 	.word	0x0800f538
 800b538:	0800f56c 	.word	0x0800f56c

0800b53c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b542:	f7ff f963 	bl	800a80c <LL_FLASH_GetUDN>
 800b546:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54e:	d023      	beq.n	800b598 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b550:	f7ff f974 	bl	800a83c <LL_FLASH_GetSTCompanyID>
 800b554:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b556:	f7ff f965 	bl	800a824 <LL_FLASH_GetDeviceID>
 800b55a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	b2da      	uxtb	r2, r3
 800b560:	4b16      	ldr	r3, [pc, #88]	; (800b5bc <BleGetBdAddress+0x80>)
 800b562:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	0a1b      	lsrs	r3, r3, #8
 800b568:	b2da      	uxtb	r2, r3
 800b56a:	4b14      	ldr	r3, [pc, #80]	; (800b5bc <BleGetBdAddress+0x80>)
 800b56c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	b2da      	uxtb	r2, r3
 800b572:	4b12      	ldr	r3, [pc, #72]	; (800b5bc <BleGetBdAddress+0x80>)
 800b574:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	4b10      	ldr	r3, [pc, #64]	; (800b5bc <BleGetBdAddress+0x80>)
 800b57c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	0a1b      	lsrs	r3, r3, #8
 800b582:	b2da      	uxtb	r2, r3
 800b584:	4b0d      	ldr	r3, [pc, #52]	; (800b5bc <BleGetBdAddress+0x80>)
 800b586:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	0c1b      	lsrs	r3, r3, #16
 800b58c:	b2da      	uxtb	r2, r3
 800b58e:	4b0b      	ldr	r3, [pc, #44]	; (800b5bc <BleGetBdAddress+0x80>)
 800b590:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b592:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <BleGetBdAddress+0x80>)
 800b594:	617b      	str	r3, [r7, #20]
 800b596:	e00b      	b.n	800b5b0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b598:	2000      	movs	r0, #0
 800b59a:	f7ff f851 	bl	800a640 <OTP_Read>
 800b59e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	e001      	b.n	800b5b0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b5ac:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <BleGetBdAddress+0x84>)
 800b5ae:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b5b0:	697b      	ldr	r3, [r7, #20]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3718      	adds	r7, #24
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	20002024 	.word	0x20002024
 800b5c0:	0800fc18 	.word	0x0800fc18

0800b5c4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b5ca:	4b1f      	ldr	r3, [pc, #124]	; (800b648 <Adv_Cancel+0x84>)
 800b5cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5d0:	2b05      	cmp	r3, #5
 800b5d2:	d035      	beq.n	800b640 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b5d4:	2392      	movs	r3, #146	; 0x92
 800b5d6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b5d8:	f7fc fff4 	bl	80085c4 <aci_gap_set_non_discoverable>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b5e0:	4b19      	ldr	r3, [pc, #100]	; (800b648 <Adv_Cancel+0x84>)
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d00d      	beq.n	800b60a <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800b5ee:	4817      	ldr	r0, [pc, #92]	; (800b64c <Adv_Cancel+0x88>)
 800b5f0:	f7fe fffe 	bl	800a5f0 <DbgTraceGetFileName>
 800b5f4:	4601      	mov	r1, r0
 800b5f6:	f240 4353 	movw	r3, #1107	; 0x453
 800b5fa:	4a15      	ldr	r2, [pc, #84]	; (800b650 <Adv_Cancel+0x8c>)
 800b5fc:	4815      	ldr	r0, [pc, #84]	; (800b654 <Adv_Cancel+0x90>)
 800b5fe:	f001 faad 	bl	800cb5c <iprintf>
 800b602:	4815      	ldr	r0, [pc, #84]	; (800b658 <Adv_Cancel+0x94>)
 800b604:	f001 faaa 	bl	800cb5c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b608:	e01a      	b.n	800b640 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800b60a:	4810      	ldr	r0, [pc, #64]	; (800b64c <Adv_Cancel+0x88>)
 800b60c:	f7fe fff0 	bl	800a5f0 <DbgTraceGetFileName>
 800b610:	4601      	mov	r1, r0
 800b612:	f240 4357 	movw	r3, #1111	; 0x457
 800b616:	4a0e      	ldr	r2, [pc, #56]	; (800b650 <Adv_Cancel+0x8c>)
 800b618:	480e      	ldr	r0, [pc, #56]	; (800b654 <Adv_Cancel+0x90>)
 800b61a:	f001 fa9f 	bl	800cb5c <iprintf>
 800b61e:	480f      	ldr	r0, [pc, #60]	; (800b65c <Adv_Cancel+0x98>)
 800b620:	f001 fa9c 	bl	800cb5c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800b624:	4809      	ldr	r0, [pc, #36]	; (800b64c <Adv_Cancel+0x88>)
 800b626:	f7fe ffe3 	bl	800a5f0 <DbgTraceGetFileName>
 800b62a:	4601      	mov	r1, r0
 800b62c:	f44f 638b 	mov.w	r3, #1112	; 0x458
 800b630:	4a07      	ldr	r2, [pc, #28]	; (800b650 <Adv_Cancel+0x8c>)
 800b632:	4808      	ldr	r0, [pc, #32]	; (800b654 <Adv_Cancel+0x90>)
 800b634:	f001 fa92 	bl	800cb5c <iprintf>
 800b638:	4809      	ldr	r0, [pc, #36]	; (800b660 <Adv_Cancel+0x9c>)
 800b63a:	f001 fa8f 	bl	800cb5c <iprintf>
  return;
 800b63e:	bf00      	nop
 800b640:	bf00      	nop
}
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	2000202c 	.word	0x2000202c
 800b64c:	0800e9d8 	.word	0x0800e9d8
 800b650:	0800fc8c 	.word	0x0800fc8c
 800b654:	0800e9f4 	.word	0x0800e9f4
 800b658:	0800f594 	.word	0x0800f594
 800b65c:	0800f5b8 	.word	0x0800f5b8
 800b660:	0800f5c0 	.word	0x0800f5c0

0800b664 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b66c:	2100      	movs	r1, #0
 800b66e:	2002      	movs	r0, #2
 800b670:	f001 f82c 	bl	800c6cc <UTIL_SEQ_SetTask>

  return;
 800b674:	bf00      	nop
}
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b684:	2001      	movs	r0, #1
 800b686:	f001 f88d 	bl	800c7a4 <UTIL_SEQ_SetEvt>

  return;
 800b68a:	bf00      	nop
}
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b082      	sub	sp, #8
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b69a:	2001      	movs	r0, #1
 800b69c:	f001 f8a2 	bl	800c7e4 <UTIL_SEQ_WaitEvt>

  return;
 800b6a0:	bf00      	nop
}
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	3308      	adds	r3, #8
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fe f940 	bl	8009940 <SVCCTL_UserEvtRx>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b6c4:	7afb      	ldrb	r3, [r7, #11]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d003      	beq.n	800b6d2 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b6d0:	e003      	b.n	800b6da <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	701a      	strb	r2, [r3, #0]
  return;
 800b6d8:	bf00      	nop
}
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800b6ea:	79fb      	ldrb	r3, [r7, #7]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <BLE_StatusNot+0x16>
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d006      	beq.n	800b702 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800b6f4:	e00b      	b.n	800b70e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b6f6:	2307      	movs	r3, #7
 800b6f8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b6fa:	68f8      	ldr	r0, [r7, #12]
 800b6fc:	f001 f812 	bl	800c724 <UTIL_SEQ_PauseTask>
      break;
 800b700:	e005      	b.n	800b70e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b702:	2307      	movs	r3, #7
 800b704:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f001 f82c 	bl	800c764 <UTIL_SEQ_ResumeTask>
      break;
 800b70c:	bf00      	nop
  }

  return;
 800b70e:	bf00      	nop
}
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
	...

0800b718 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800b718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b71c:	b088      	sub	sp, #32
 800b71e:	af00      	add	r7, sp, #0
 800b720:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	int i = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	61fb      	str	r3, [r7, #28]
	int j = 0;
 800b726:	2300      	movs	r3, #0
 800b728:	61bb      	str	r3, [r7, #24]
	memset(UpdateCharData, 0, sizeof(uint8_t) * 247);
 800b72a:	22f7      	movs	r2, #247	; 0xf7
 800b72c:	2100      	movs	r1, #0
 800b72e:	485c      	ldr	r0, [pc, #368]	; (800b8a0 <Custom_STM_App_Notification+0x188>)
 800b730:	f001 f92c 	bl	800c98c <memset>
	// copy data update buffer +BCH
	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6859      	ldr	r1, [r3, #4]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	7a1b      	ldrb	r3, [r3, #8]
 800b73c:	461a      	mov	r2, r3
 800b73e:	4858      	ldr	r0, [pc, #352]	; (800b8a0 <Custom_STM_App_Notification+0x188>)
 800b740:	f001 f916 	bl	800c970 <memcpy>
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b05      	cmp	r3, #5
 800b74a:	f200 80a3 	bhi.w	800b894 <Custom_STM_App_Notification+0x17c>
 800b74e:	a201      	add	r2, pc, #4	; (adr r2, 800b754 <Custom_STM_App_Notification+0x3c>)
 800b750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b754:	0800b895 	.word	0x0800b895
 800b758:	0800b76d 	.word	0x0800b76d
 800b75c:	0800b895 	.word	0x0800b895
 800b760:	0800b7f5 	.word	0x0800b7f5
 800b764:	0800b881 	.word	0x0800b881
 800b768:	0800b88d 	.word	0x0800b88d
      break;

    case CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT */

    	memset(Custom_App_Context.ssid, 0x00, sizeof(uint64_t)*30);
 800b76c:	22f0      	movs	r2, #240	; 0xf0
 800b76e:	2100      	movs	r1, #0
 800b770:	484c      	ldr	r0, [pc, #304]	; (800b8a4 <Custom_STM_App_Notification+0x18c>)
 800b772:	f001 f90b 	bl	800c98c <memset>
    	while(UpdateCharData[i] != 0x00) {
 800b776:	e013      	b.n	800b7a0 <Custom_STM_App_Notification+0x88>
    		Custom_App_Context.ssid[i] = (uint64_t)UpdateCharData[i];
 800b778:	4a49      	ldr	r2, [pc, #292]	; (800b8a0 <Custom_STM_App_Notification+0x188>)
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	4413      	add	r3, r2
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	b2db      	uxtb	r3, r3
 800b782:	2200      	movs	r2, #0
 800b784:	603b      	str	r3, [r7, #0]
 800b786:	607a      	str	r2, [r7, #4]
 800b788:	4a47      	ldr	r2, [pc, #284]	; (800b8a8 <Custom_STM_App_Notification+0x190>)
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	3301      	adds	r3, #1
 800b78e:	00db      	lsls	r3, r3, #3
 800b790:	4413      	add	r3, r2
 800b792:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b796:	e9c3 1200 	strd	r1, r2, [r3]
    		i++;
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	3301      	adds	r3, #1
 800b79e:	61fb      	str	r3, [r7, #28]
    	while(UpdateCharData[i] != 0x00) {
 800b7a0:	4a3f      	ldr	r2, [pc, #252]	; (800b8a0 <Custom_STM_App_Notification+0x188>)
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1e5      	bne.n	800b778 <Custom_STM_App_Notification+0x60>
    	}
    	memset(ssid, NULL, sizeof(char)*30);
 800b7ac:	221e      	movs	r2, #30
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	483e      	ldr	r0, [pc, #248]	; (800b8ac <Custom_STM_App_Notification+0x194>)
 800b7b2:	f001 f8eb 	bl	800c98c <memset>
    	for(int pos=0;pos<i; pos++) {
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	617b      	str	r3, [r7, #20]
 800b7ba:	e00f      	b.n	800b7dc <Custom_STM_App_Notification+0xc4>
    		ssid[pos] = (char)Custom_App_Context.ssid[pos];
 800b7bc:	4a3a      	ldr	r2, [pc, #232]	; (800b8a8 <Custom_STM_App_Notification+0x190>)
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	00db      	lsls	r3, r3, #3
 800b7c4:	4413      	add	r3, r2
 800b7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ca:	b2d1      	uxtb	r1, r2
 800b7cc:	4a37      	ldr	r2, [pc, #220]	; (800b8ac <Custom_STM_App_Notification+0x194>)
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	460a      	mov	r2, r1
 800b7d4:	701a      	strb	r2, [r3, #0]
    	for(int pos=0;pos<i; pos++) {
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	617b      	str	r3, [r7, #20]
 800b7dc:	697a      	ldr	r2, [r7, #20]
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	dbeb      	blt.n	800b7bc <Custom_STM_App_Notification+0xa4>
    	}
    	dataSsid = (uint64_t)ssid;
 800b7e4:	4b31      	ldr	r3, [pc, #196]	; (800b8ac <Custom_STM_App_Notification+0x194>)
 800b7e6:	17da      	asrs	r2, r3, #31
 800b7e8:	469a      	mov	sl, r3
 800b7ea:	4693      	mov	fp, r2
 800b7ec:	4b30      	ldr	r3, [pc, #192]	; (800b8b0 <Custom_STM_App_Notification+0x198>)
 800b7ee:	e9c3 ab00 	strd	sl, fp, [r3]
//			   /* Error detected. Switch on LED1*/
//			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
//			 }

      /* USER CODE END CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT */
      break;
 800b7f2:	e050      	b.n	800b896 <Custom_STM_App_Notification+0x17e>
      /* USER CODE END CUSTOM_STM_GPASS_READ_EVT */
      break;

    case CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT */
		memset(Custom_App_Context.password, 0x00, sizeof(uint64_t)*30);
 800b7f4:	22f0      	movs	r2, #240	; 0xf0
 800b7f6:	2100      	movs	r1, #0
 800b7f8:	482e      	ldr	r0, [pc, #184]	; (800b8b4 <Custom_STM_App_Notification+0x19c>)
 800b7fa:	f001 f8c7 	bl	800c98c <memset>
		while(UpdateCharData[j] != 0x00) {
 800b7fe:	e011      	b.n	800b824 <Custom_STM_App_Notification+0x10c>
			Custom_App_Context.password[j] = (uint64_t)UpdateCharData[j];
 800b800:	4a27      	ldr	r2, [pc, #156]	; (800b8a0 <Custom_STM_App_Notification+0x188>)
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	4413      	add	r3, r2
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	2200      	movs	r2, #0
 800b80c:	4698      	mov	r8, r3
 800b80e:	4691      	mov	r9, r2
 800b810:	4a25      	ldr	r2, [pc, #148]	; (800b8a8 <Custom_STM_App_Notification+0x190>)
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	331f      	adds	r3, #31
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	4413      	add	r3, r2
 800b81a:	e9c3 8900 	strd	r8, r9, [r3]
			j++;
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	3301      	adds	r3, #1
 800b822:	61bb      	str	r3, [r7, #24]
		while(UpdateCharData[j] != 0x00) {
 800b824:	4a1e      	ldr	r2, [pc, #120]	; (800b8a0 <Custom_STM_App_Notification+0x188>)
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	4413      	add	r3, r2
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d1e7      	bne.n	800b800 <Custom_STM_App_Notification+0xe8>
		}
		memset(password, NULL, sizeof(char)*30);
 800b830:	221e      	movs	r2, #30
 800b832:	2100      	movs	r1, #0
 800b834:	4820      	ldr	r0, [pc, #128]	; (800b8b8 <Custom_STM_App_Notification+0x1a0>)
 800b836:	f001 f8a9 	bl	800c98c <memset>
		for(int pos=0;pos<j; pos++) {
 800b83a:	2300      	movs	r3, #0
 800b83c:	613b      	str	r3, [r7, #16]
 800b83e:	e00f      	b.n	800b860 <Custom_STM_App_Notification+0x148>
			password[pos] = (char)Custom_App_Context.password[pos];
 800b840:	4a19      	ldr	r2, [pc, #100]	; (800b8a8 <Custom_STM_App_Notification+0x190>)
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	331f      	adds	r3, #31
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	4413      	add	r3, r2
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	b2d1      	uxtb	r1, r2
 800b850:	4a19      	ldr	r2, [pc, #100]	; (800b8b8 <Custom_STM_App_Notification+0x1a0>)
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	4413      	add	r3, r2
 800b856:	460a      	mov	r2, r1
 800b858:	701a      	strb	r2, [r3, #0]
		for(int pos=0;pos<j; pos++) {
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	3301      	adds	r3, #1
 800b85e:	613b      	str	r3, [r7, #16]
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	429a      	cmp	r2, r3
 800b866:	dbeb      	blt.n	800b840 <Custom_STM_App_Notification+0x128>
		}
		dataPass = (uint64_t)password;
 800b868:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <Custom_STM_App_Notification+0x1a0>)
 800b86a:	17da      	asrs	r2, r3, #31
 800b86c:	461c      	mov	r4, r3
 800b86e:	4615      	mov	r5, r2
 800b870:	4b12      	ldr	r3, [pc, #72]	; (800b8bc <Custom_STM_App_Notification+0x1a4>)
 800b872:	e9c3 4500 	strd	r4, r5, [r3]
		wifi_init();
 800b876:	f7fc f97d 	bl	8007b74 <wifi_init>
		Custom_Ack_Send_Notification();
 800b87a:	f000 f85b 	bl	800b934 <Custom_Ack_Send_Notification>
//			 {
//			   /* Error detected. Switch on LED1*/
//			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
//			 }
      /* USER CODE END CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT */
      break;
 800b87e:	e00a      	b.n	800b896 <Custom_STM_App_Notification+0x17e>

    case CUSTOM_STM_ACK_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACK_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Ack_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 800b880:	4b09      	ldr	r3, [pc, #36]	; (800b8a8 <Custom_STM_App_Notification+0x190>)
 800b882:	2201      	movs	r2, #1
 800b884:	701a      	strb	r2, [r3, #0]
    	Custom_Ack_Send_Notification();
 800b886:	f000 f855 	bl	800b934 <Custom_Ack_Send_Notification>
      /* USER CODE END CUSTOM_STM_ACK_NOTIFY_ENABLED_EVT */
      break;
 800b88a:	e004      	b.n	800b896 <Custom_STM_App_Notification+0x17e>

    case CUSTOM_STM_ACK_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACK_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Ack_Notification_Status = 0;
 800b88c:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <Custom_STM_App_Notification+0x190>)
 800b88e:	2200      	movs	r2, #0
 800b890:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_ACK_NOTIFY_DISABLED_EVT */
      break;
 800b892:	e000      	b.n	800b896 <Custom_STM_App_Notification+0x17e>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800b894:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800b896:	bf00      	nop
}
 800b898:	3720      	adds	r7, #32
 800b89a:	46bd      	mov	sp, r7
 800b89c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8a0:	200022a8 	.word	0x200022a8
 800b8a4:	200020c0 	.word	0x200020c0
 800b8a8:	200020b8 	.word	0x200020b8
 800b8ac:	20002498 	.word	0x20002498
 800b8b0:	200024d8 	.word	0x200024d8
 800b8b4:	200021b0 	.word	0x200021b0
 800b8b8:	200024b8 	.word	0x200024b8
 800b8bc:	200024e0 	.word	0x200024e0

0800b8c0 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d002      	beq.n	800b8d6 <Custom_APP_Notification+0x16>
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d002      	beq.n	800b8da <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800b8d4:	e002      	b.n	800b8dc <Custom_APP_Notification+0x1c>
      break;
 800b8d6:	bf00      	nop
 800b8d8:	e000      	b.n	800b8dc <Custom_APP_Notification+0x1c>
      break;
 800b8da:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800b8dc:	bf00      	nop
}
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	Custom_App_Context.Ack_Notification_Status = 0;
 800b8ec:	4b05      	ldr	r3, [pc, #20]	; (800b904 <Custom_APP_Init+0x1c>)
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_RegTask(1<<CFG_SEND_WIFI_ACK, UTIL_SEQ_RFU, Custom_Ack_Send_Notification);
 800b8f2:	4a05      	ldr	r2, [pc, #20]	; (800b908 <Custom_APP_Init+0x20>)
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	2004      	movs	r0, #4
 800b8f8:	f000 fec6 	bl	800c688 <UTIL_SEQ_RegTask>
	Custom_Ack_Update_Char();
 800b8fc:	f000 f806 	bl	800b90c <Custom_Ack_Update_Char>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800b900:	bf00      	nop
}
 800b902:	bd80      	pop	{r7, pc}
 800b904:	200020b8 	.word	0x200020b8
 800b908:	0800b935 	.word	0x0800b935

0800b90c <Custom_Ack_Update_Char>:
 *
 *************************************************************/

/* First_service */
void Custom_Ack_Update_Char(void) /* Property Read */
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Ack_UC_1*/

  /* USER CODE END Ack_UC_1*/

  if (updateflag != 0)
 800b916:	79fb      	ldrb	r3, [r7, #7]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d004      	beq.n	800b926 <Custom_Ack_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_ACK, (uint8_t *)UpdateCharData);
 800b91c:	4904      	ldr	r1, [pc, #16]	; (800b930 <Custom_Ack_Update_Char+0x24>)
 800b91e:	2002      	movs	r0, #2
 800b920:	f000 fa5e 	bl	800bde0 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Ack_UC_Last*/

  /* USER CODE END Ack_UC_Last*/
  return;
 800b924:	bf00      	nop
 800b926:	bf00      	nop
}
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	200022a8 	.word	0x200022a8

0800b934 <Custom_Ack_Send_Notification>:

void Custom_Ack_Send_Notification(void) /* Property Notification */
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800b93a:	2300      	movs	r3, #0
 800b93c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Ack_NS_1*/
  if (Custom_App_Context.Ack_Notification_Status == 1)
 800b93e:	4b17      	ldr	r3, [pc, #92]	; (800b99c <Custom_Ack_Send_Notification+0x68>)
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2b01      	cmp	r3, #1
 800b944:	d111      	bne.n	800b96a <Custom_Ack_Send_Notification+0x36>
  {
	  updateflag = 1;
 800b946:	2301      	movs	r3, #1
 800b948:	71fb      	strb	r3, [r7, #7]

	  if(wifi_state == _ONLINE)
 800b94a:	4b15      	ldr	r3, [pc, #84]	; (800b9a0 <Custom_Ack_Send_Notification+0x6c>)
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	2b05      	cmp	r3, #5
 800b950:	d105      	bne.n	800b95e <Custom_Ack_Send_Notification+0x2a>
	  {
		  uint8_t value = 0x01;
 800b952:	2301      	movs	r3, #1
 800b954:	71bb      	strb	r3, [r7, #6]
 800b956:	79ba      	ldrb	r2, [r7, #6]
		  memcpy(&NotifyCharData[0],&value,sizeof(uint8_t));
 800b958:	4b12      	ldr	r3, [pc, #72]	; (800b9a4 <Custom_Ack_Send_Notification+0x70>)
 800b95a:	701a      	strb	r2, [r3, #0]
 800b95c:	e012      	b.n	800b984 <Custom_Ack_Send_Notification+0x50>
	  } else {
		  uint8_t value = 0x00;
 800b95e:	2300      	movs	r3, #0
 800b960:	717b      	strb	r3, [r7, #5]
 800b962:	797a      	ldrb	r2, [r7, #5]
		  memcpy(&NotifyCharData[0],&value,sizeof(uint8_t));
 800b964:	4b0f      	ldr	r3, [pc, #60]	; (800b9a4 <Custom_Ack_Send_Notification+0x70>)
 800b966:	701a      	strb	r2, [r3, #0]
 800b968:	e00c      	b.n	800b984 <Custom_Ack_Send_Notification+0x50>
	  }
  }
  else
  {
	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800b96a:	480f      	ldr	r0, [pc, #60]	; (800b9a8 <Custom_Ack_Send_Notification+0x74>)
 800b96c:	f7fe fe40 	bl	800a5f0 <DbgTraceGetFileName>
 800b970:	4601      	mov	r1, r0
 800b972:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800b976:	4a0d      	ldr	r2, [pc, #52]	; (800b9ac <Custom_Ack_Send_Notification+0x78>)
 800b978:	480d      	ldr	r0, [pc, #52]	; (800b9b0 <Custom_Ack_Send_Notification+0x7c>)
 800b97a:	f001 f8ef 	bl	800cb5c <iprintf>
 800b97e:	480d      	ldr	r0, [pc, #52]	; (800b9b4 <Custom_Ack_Send_Notification+0x80>)
 800b980:	f001 f988 	bl	800cc94 <puts>
  }
  /* USER CODE END Ack_NS_1*/

  if (updateflag != 0)
 800b984:	79fb      	ldrb	r3, [r7, #7]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d004      	beq.n	800b994 <Custom_Ack_Send_Notification+0x60>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_ACK, (uint8_t *)NotifyCharData);
 800b98a:	4906      	ldr	r1, [pc, #24]	; (800b9a4 <Custom_Ack_Send_Notification+0x70>)
 800b98c:	2002      	movs	r0, #2
 800b98e:	f000 fa27 	bl	800bde0 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Ack_NS_Last*/

  /* USER CODE END Ack_NS_Last*/

  return;
 800b992:	bf00      	nop
 800b994:	bf00      	nop
}
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	200020b8 	.word	0x200020b8
 800b9a0:	20000011 	.word	0x20000011
 800b9a4:	200023a0 	.word	0x200023a0
 800b9a8:	0800f5dc 	.word	0x0800f5dc
 800b9ac:	0800fc98 	.word	0x0800fc98
 800b9b0:	0800f5fc 	.word	0x0800f5fc
 800b9b4:	0800f610 	.word	0x0800f610

0800b9b8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08a      	sub	sp, #40	; 0x28
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2bff      	cmp	r3, #255	; 0xff
 800b9d2:	d17a      	bne.n	800baca <Custom_STM_Event_Handler+0x112>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b9d4:	6a3b      	ldr	r3, [r7, #32]
 800b9d6:	3302      	adds	r3, #2
 800b9d8:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	f640 4214 	movw	r2, #3092	; 0xc14
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d06a      	beq.n	800babe <Custom_STM_Event_Handler+0x106>
 800b9e8:	f640 4214 	movw	r2, #3092	; 0xc14
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	dc68      	bgt.n	800bac2 <Custom_STM_Event_Handler+0x10a>
 800b9f0:	f640 4201 	movw	r2, #3073	; 0xc01
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d003      	beq.n	800ba00 <Custom_STM_Event_Handler+0x48>
 800b9f8:	f640 4213 	movw	r2, #3091	; 0xc13
 800b9fc:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800b9fe:	e063      	b.n	800bac8 <Custom_STM_Event_Handler+0x110>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	3302      	adds	r3, #2
 800ba04:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomAckHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	885b      	ldrh	r3, [r3, #2]
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	4b32      	ldr	r3, [pc, #200]	; (800bad8 <Custom_STM_Event_Handler+0x120>)
 800ba10:	88db      	ldrh	r3, [r3, #6]
 800ba12:	3302      	adds	r3, #2
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d119      	bne.n	800ba4c <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	7a1b      	ldrb	r3, [r3, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <Custom_STM_Event_Handler+0x74>
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d008      	beq.n	800ba3c <Custom_STM_Event_Handler+0x84>
              break;
 800ba2a:	e047      	b.n	800babc <Custom_STM_Event_Handler+0x104>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACK_NOTIFY_DISABLED_EVT;
 800ba2c:	2305      	movs	r3, #5
 800ba2e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800ba30:	f107 0308 	add.w	r3, r7, #8
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7ff fe6f 	bl	800b718 <Custom_STM_App_Notification>
                break;
 800ba3a:	e03f      	b.n	800babc <Custom_STM_Event_Handler+0x104>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACK_NOTIFY_ENABLED_EVT;
 800ba3c:	2304      	movs	r3, #4
 800ba3e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800ba40:	f107 0308 	add.w	r3, r7, #8
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7ff fe67 	bl	800b718 <Custom_STM_App_Notification>
                break;
 800ba4a:	e037      	b.n	800babc <Custom_STM_Event_Handler+0x104>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGssidHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800ba4c:	69bb      	ldr	r3, [r7, #24]
 800ba4e:	885b      	ldrh	r3, [r3, #2]
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	461a      	mov	r2, r3
 800ba54:	4b20      	ldr	r3, [pc, #128]	; (800bad8 <Custom_STM_Event_Handler+0x120>)
 800ba56:	885b      	ldrh	r3, [r3, #2]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d112      	bne.n	800ba84 <Custom_STM_Event_Handler+0xcc>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT;
 800ba64:	2301      	movs	r3, #1
 800ba66:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	88db      	ldrh	r3, [r3, #6]
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	3308      	adds	r3, #8
 800ba76:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 800ba78:	f107 0308 	add.w	r3, r7, #8
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7ff fe4b 	bl	800b718 <Custom_STM_App_Notification>
          break;
 800ba82:	e020      	b.n	800bac6 <Custom_STM_Event_Handler+0x10e>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGpassHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	885b      	ldrh	r3, [r3, #2]
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	4b12      	ldr	r3, [pc, #72]	; (800bad8 <Custom_STM_Event_Handler+0x120>)
 800ba8e:	889b      	ldrh	r3, [r3, #4]
 800ba90:	3301      	adds	r3, #1
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d117      	bne.n	800bac6 <Custom_STM_Event_Handler+0x10e>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ba96:	2301      	movs	r3, #1
 800ba98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800baa0:	69bb      	ldr	r3, [r7, #24]
 800baa2:	88db      	ldrh	r3, [r3, #6]
 800baa4:	b29b      	uxth	r3, r3
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	3308      	adds	r3, #8
 800baae:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 800bab0:	f107 0308 	add.w	r3, r7, #8
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7ff fe2f 	bl	800b718 <Custom_STM_App_Notification>
          break;
 800baba:	e004      	b.n	800bac6 <Custom_STM_Event_Handler+0x10e>
 800babc:	e003      	b.n	800bac6 <Custom_STM_Event_Handler+0x10e>
          break;
 800babe:	bf00      	nop
 800bac0:	e004      	b.n	800bacc <Custom_STM_Event_Handler+0x114>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800bac2:	bf00      	nop
 800bac4:	e002      	b.n	800bacc <Custom_STM_Event_Handler+0x114>
          break;
 800bac6:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bac8:	e000      	b.n	800bacc <Custom_STM_Event_Handler+0x114>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800baca:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800bacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800bad0:	4618      	mov	r0, r3
 800bad2:	3728      	adds	r7, #40	; 0x28
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	200024e8 	.word	0x200024e8

0800badc <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b08c      	sub	sp, #48	; 0x30
 800bae0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bae2:	2392      	movs	r3, #146	; 0x92
 800bae4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800bae6:	48ab      	ldr	r0, [pc, #684]	; (800bd94 <SVCCTL_InitCustomSvc+0x2b8>)
 800bae8:	f7fd ff10 	bl	800990c <SVCCTL_RegisterSvcHandler>
   *                                2 for status_connection +
   *                                1 for status_connection configuration descriptor +
   *                              = 8
   */

  COPY_FIRST_SERVICE_UUID(uuid.Char_UUID_128);
 800baec:	238f      	movs	r3, #143	; 0x8f
 800baee:	713b      	strb	r3, [r7, #4]
 800baf0:	23e5      	movs	r3, #229	; 0xe5
 800baf2:	717b      	strb	r3, [r7, #5]
 800baf4:	23b3      	movs	r3, #179	; 0xb3
 800baf6:	71bb      	strb	r3, [r7, #6]
 800baf8:	23d5      	movs	r3, #213	; 0xd5
 800bafa:	71fb      	strb	r3, [r7, #7]
 800bafc:	232e      	movs	r3, #46	; 0x2e
 800bafe:	723b      	strb	r3, [r7, #8]
 800bb00:	237f      	movs	r3, #127	; 0x7f
 800bb02:	727b      	strb	r3, [r7, #9]
 800bb04:	234a      	movs	r3, #74	; 0x4a
 800bb06:	72bb      	strb	r3, [r7, #10]
 800bb08:	2398      	movs	r3, #152	; 0x98
 800bb0a:	72fb      	strb	r3, [r7, #11]
 800bb0c:	232a      	movs	r3, #42	; 0x2a
 800bb0e:	733b      	strb	r3, [r7, #12]
 800bb10:	2348      	movs	r3, #72	; 0x48
 800bb12:	737b      	strb	r3, [r7, #13]
 800bb14:	237a      	movs	r3, #122	; 0x7a
 800bb16:	73bb      	strb	r3, [r7, #14]
 800bb18:	23cc      	movs	r3, #204	; 0xcc
 800bb1a:	73fb      	strb	r3, [r7, #15]
 800bb1c:	23ed      	movs	r3, #237	; 0xed
 800bb1e:	743b      	strb	r3, [r7, #16]
 800bb20:	23fe      	movs	r3, #254	; 0xfe
 800bb22:	747b      	strb	r3, [r7, #17]
 800bb24:	2300      	movs	r3, #0
 800bb26:	74bb      	strb	r3, [r7, #18]
 800bb28:	2300      	movs	r3, #0
 800bb2a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800bb2c:	1d39      	adds	r1, r7, #4
 800bb2e:	4b9a      	ldr	r3, [pc, #616]	; (800bd98 <SVCCTL_InitCustomSvc+0x2bc>)
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	2308      	movs	r3, #8
 800bb34:	2201      	movs	r2, #1
 800bb36:	2002      	movs	r0, #2
 800bb38:	f7fd f9b0 	bl	8008e9c <aci_gatt_add_service>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             8,
                             &(CustomContext.CustomFsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800bb40:	7dfb      	ldrb	r3, [r7, #23]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00f      	beq.n	800bb66 <SVCCTL_InitCustomSvc+0x8a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: fs, error code: 0x%x \n\r", ret);
 800bb46:	4895      	ldr	r0, [pc, #596]	; (800bd9c <SVCCTL_InitCustomSvc+0x2c0>)
 800bb48:	f7fe fd52 	bl	800a5f0 <DbgTraceGetFileName>
 800bb4c:	4601      	mov	r1, r0
 800bb4e:	f240 1335 	movw	r3, #309	; 0x135
 800bb52:	4a93      	ldr	r2, [pc, #588]	; (800bda0 <SVCCTL_InitCustomSvc+0x2c4>)
 800bb54:	4893      	ldr	r0, [pc, #588]	; (800bda4 <SVCCTL_InitCustomSvc+0x2c8>)
 800bb56:	f001 f801 	bl	800cb5c <iprintf>
 800bb5a:	7dfb      	ldrb	r3, [r7, #23]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4892      	ldr	r0, [pc, #584]	; (800bda8 <SVCCTL_InitCustomSvc+0x2cc>)
 800bb60:	f000 fffc 	bl	800cb5c <iprintf>
 800bb64:	e00c      	b.n	800bb80 <SVCCTL_InitCustomSvc+0xa4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: fs \n\r");
 800bb66:	488d      	ldr	r0, [pc, #564]	; (800bd9c <SVCCTL_InitCustomSvc+0x2c0>)
 800bb68:	f7fe fd42 	bl	800a5f0 <DbgTraceGetFileName>
 800bb6c:	4601      	mov	r1, r0
 800bb6e:	f240 1339 	movw	r3, #313	; 0x139
 800bb72:	4a8b      	ldr	r2, [pc, #556]	; (800bda0 <SVCCTL_InitCustomSvc+0x2c4>)
 800bb74:	488b      	ldr	r0, [pc, #556]	; (800bda4 <SVCCTL_InitCustomSvc+0x2c8>)
 800bb76:	f000 fff1 	bl	800cb5c <iprintf>
 800bb7a:	488c      	ldr	r0, [pc, #560]	; (800bdac <SVCCTL_InitCustomSvc+0x2d0>)
 800bb7c:	f000 ffee 	bl	800cb5c <iprintf>
  }

  /**
   *  get_ssid
   */
  COPY_GET_SSID_UUID(uuid.Char_UUID_128);
 800bb80:	2319      	movs	r3, #25
 800bb82:	713b      	strb	r3, [r7, #4]
 800bb84:	23ed      	movs	r3, #237	; 0xed
 800bb86:	717b      	strb	r3, [r7, #5]
 800bb88:	2382      	movs	r3, #130	; 0x82
 800bb8a:	71bb      	strb	r3, [r7, #6]
 800bb8c:	23ae      	movs	r3, #174	; 0xae
 800bb8e:	71fb      	strb	r3, [r7, #7]
 800bb90:	23ed      	movs	r3, #237	; 0xed
 800bb92:	723b      	strb	r3, [r7, #8]
 800bb94:	2321      	movs	r3, #33	; 0x21
 800bb96:	727b      	strb	r3, [r7, #9]
 800bb98:	234c      	movs	r3, #76	; 0x4c
 800bb9a:	72bb      	strb	r3, [r7, #10]
 800bb9c:	239d      	movs	r3, #157	; 0x9d
 800bb9e:	72fb      	strb	r3, [r7, #11]
 800bba0:	2341      	movs	r3, #65	; 0x41
 800bba2:	733b      	strb	r3, [r7, #12]
 800bba4:	2345      	movs	r3, #69	; 0x45
 800bba6:	737b      	strb	r3, [r7, #13]
 800bba8:	2322      	movs	r3, #34	; 0x22
 800bbaa:	73bb      	strb	r3, [r7, #14]
 800bbac:	238e      	movs	r3, #142	; 0x8e
 800bbae:	73fb      	strb	r3, [r7, #15]
 800bbb0:	23cd      	movs	r3, #205	; 0xcd
 800bbb2:	743b      	strb	r3, [r7, #16]
 800bbb4:	23ab      	movs	r3, #171	; 0xab
 800bbb6:	747b      	strb	r3, [r7, #17]
 800bbb8:	2300      	movs	r3, #0
 800bbba:	74bb      	strb	r3, [r7, #18]
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 800bbc0:	4b75      	ldr	r3, [pc, #468]	; (800bd98 <SVCCTL_InitCustomSvc+0x2bc>)
 800bbc2:	8818      	ldrh	r0, [r3, #0]
 800bbc4:	4b7a      	ldr	r3, [pc, #488]	; (800bdb0 <SVCCTL_InitCustomSvc+0x2d4>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	b29b      	uxth	r3, r3
 800bbca:	1d3a      	adds	r2, r7, #4
 800bbcc:	4979      	ldr	r1, [pc, #484]	; (800bdb4 <SVCCTL_InitCustomSvc+0x2d8>)
 800bbce:	9105      	str	r1, [sp, #20]
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	9104      	str	r1, [sp, #16]
 800bbd4:	2110      	movs	r1, #16
 800bbd6:	9103      	str	r1, [sp, #12]
 800bbd8:	2101      	movs	r1, #1
 800bbda:	9102      	str	r1, [sp, #8]
 800bbdc:	2100      	movs	r1, #0
 800bbde:	9101      	str	r1, [sp, #4]
 800bbe0:	2106      	movs	r1, #6
 800bbe2:	9100      	str	r1, [sp, #0]
 800bbe4:	2102      	movs	r1, #2
 800bbe6:	f7fd fa2f 	bl	8009048 <aci_gatt_add_char>
 800bbea:	4603      	mov	r3, r0
 800bbec:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGssidHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00f      	beq.n	800bc14 <SVCCTL_InitCustomSvc+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GSSID, error code: 0x%x \n\r", ret);
 800bbf4:	4869      	ldr	r0, [pc, #420]	; (800bd9c <SVCCTL_InitCustomSvc+0x2c0>)
 800bbf6:	f7fe fcfb 	bl	800a5f0 <DbgTraceGetFileName>
 800bbfa:	4601      	mov	r1, r0
 800bbfc:	f240 134b 	movw	r3, #331	; 0x14b
 800bc00:	4a67      	ldr	r2, [pc, #412]	; (800bda0 <SVCCTL_InitCustomSvc+0x2c4>)
 800bc02:	4868      	ldr	r0, [pc, #416]	; (800bda4 <SVCCTL_InitCustomSvc+0x2c8>)
 800bc04:	f000 ffaa 	bl	800cb5c <iprintf>
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	486a      	ldr	r0, [pc, #424]	; (800bdb8 <SVCCTL_InitCustomSvc+0x2dc>)
 800bc0e:	f000 ffa5 	bl	800cb5c <iprintf>
 800bc12:	e00c      	b.n	800bc2e <SVCCTL_InitCustomSvc+0x152>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GSSID \n\r");
 800bc14:	4861      	ldr	r0, [pc, #388]	; (800bd9c <SVCCTL_InitCustomSvc+0x2c0>)
 800bc16:	f7fe fceb 	bl	800a5f0 <DbgTraceGetFileName>
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	f240 134f 	movw	r3, #335	; 0x14f
 800bc20:	4a5f      	ldr	r2, [pc, #380]	; (800bda0 <SVCCTL_InitCustomSvc+0x2c4>)
 800bc22:	4860      	ldr	r0, [pc, #384]	; (800bda4 <SVCCTL_InitCustomSvc+0x2c8>)
 800bc24:	f000 ff9a 	bl	800cb5c <iprintf>
 800bc28:	4864      	ldr	r0, [pc, #400]	; (800bdbc <SVCCTL_InitCustomSvc+0x2e0>)
 800bc2a:	f000 ff97 	bl	800cb5c <iprintf>
  }
  /**
   *  get_password
   */
  COPY_GET_PASSWORD_UUID(uuid.Char_UUID_128);
 800bc2e:	2319      	movs	r3, #25
 800bc30:	713b      	strb	r3, [r7, #4]
 800bc32:	23ed      	movs	r3, #237	; 0xed
 800bc34:	717b      	strb	r3, [r7, #5]
 800bc36:	2382      	movs	r3, #130	; 0x82
 800bc38:	71bb      	strb	r3, [r7, #6]
 800bc3a:	23ae      	movs	r3, #174	; 0xae
 800bc3c:	71fb      	strb	r3, [r7, #7]
 800bc3e:	23ed      	movs	r3, #237	; 0xed
 800bc40:	723b      	strb	r3, [r7, #8]
 800bc42:	2321      	movs	r3, #33	; 0x21
 800bc44:	727b      	strb	r3, [r7, #9]
 800bc46:	234c      	movs	r3, #76	; 0x4c
 800bc48:	72bb      	strb	r3, [r7, #10]
 800bc4a:	239d      	movs	r3, #157	; 0x9d
 800bc4c:	72fb      	strb	r3, [r7, #11]
 800bc4e:	2341      	movs	r3, #65	; 0x41
 800bc50:	733b      	strb	r3, [r7, #12]
 800bc52:	2345      	movs	r3, #69	; 0x45
 800bc54:	737b      	strb	r3, [r7, #13]
 800bc56:	2322      	movs	r3, #34	; 0x22
 800bc58:	73bb      	strb	r3, [r7, #14]
 800bc5a:	238e      	movs	r3, #142	; 0x8e
 800bc5c:	73fb      	strb	r3, [r7, #15]
 800bc5e:	2334      	movs	r3, #52	; 0x34
 800bc60:	743b      	strb	r3, [r7, #16]
 800bc62:	2312      	movs	r3, #18
 800bc64:	747b      	strb	r3, [r7, #17]
 800bc66:	2300      	movs	r3, #0
 800bc68:	74bb      	strb	r3, [r7, #18]
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 800bc6e:	4b4a      	ldr	r3, [pc, #296]	; (800bd98 <SVCCTL_InitCustomSvc+0x2bc>)
 800bc70:	8818      	ldrh	r0, [r3, #0]
 800bc72:	4b53      	ldr	r3, [pc, #332]	; (800bdc0 <SVCCTL_InitCustomSvc+0x2e4>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	1d3a      	adds	r2, r7, #4
 800bc7a:	4952      	ldr	r1, [pc, #328]	; (800bdc4 <SVCCTL_InitCustomSvc+0x2e8>)
 800bc7c:	9105      	str	r1, [sp, #20]
 800bc7e:	2101      	movs	r1, #1
 800bc80:	9104      	str	r1, [sp, #16]
 800bc82:	2110      	movs	r1, #16
 800bc84:	9103      	str	r1, [sp, #12]
 800bc86:	2101      	movs	r1, #1
 800bc88:	9102      	str	r1, [sp, #8]
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	9101      	str	r1, [sp, #4]
 800bc8e:	2106      	movs	r1, #6
 800bc90:	9100      	str	r1, [sp, #0]
 800bc92:	2102      	movs	r1, #2
 800bc94:	f7fd f9d8 	bl	8009048 <aci_gatt_add_char>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGpassHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800bc9c:	7dfb      	ldrb	r3, [r7, #23]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d00f      	beq.n	800bcc2 <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GPASS, error code: 0x%x \n\r", ret);
 800bca2:	483e      	ldr	r0, [pc, #248]	; (800bd9c <SVCCTL_InitCustomSvc+0x2c0>)
 800bca4:	f7fe fca4 	bl	800a5f0 <DbgTraceGetFileName>
 800bca8:	4601      	mov	r1, r0
 800bcaa:	f44f 73b0 	mov.w	r3, #352	; 0x160
 800bcae:	4a3c      	ldr	r2, [pc, #240]	; (800bda0 <SVCCTL_InitCustomSvc+0x2c4>)
 800bcb0:	483c      	ldr	r0, [pc, #240]	; (800bda4 <SVCCTL_InitCustomSvc+0x2c8>)
 800bcb2:	f000 ff53 	bl	800cb5c <iprintf>
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4843      	ldr	r0, [pc, #268]	; (800bdc8 <SVCCTL_InitCustomSvc+0x2ec>)
 800bcbc:	f000 ff4e 	bl	800cb5c <iprintf>
 800bcc0:	e00c      	b.n	800bcdc <SVCCTL_InitCustomSvc+0x200>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GPASS \n\r");
 800bcc2:	4836      	ldr	r0, [pc, #216]	; (800bd9c <SVCCTL_InitCustomSvc+0x2c0>)
 800bcc4:	f7fe fc94 	bl	800a5f0 <DbgTraceGetFileName>
 800bcc8:	4601      	mov	r1, r0
 800bcca:	f44f 73b2 	mov.w	r3, #356	; 0x164
 800bcce:	4a34      	ldr	r2, [pc, #208]	; (800bda0 <SVCCTL_InitCustomSvc+0x2c4>)
 800bcd0:	4834      	ldr	r0, [pc, #208]	; (800bda4 <SVCCTL_InitCustomSvc+0x2c8>)
 800bcd2:	f000 ff43 	bl	800cb5c <iprintf>
 800bcd6:	483d      	ldr	r0, [pc, #244]	; (800bdcc <SVCCTL_InitCustomSvc+0x2f0>)
 800bcd8:	f000 ff40 	bl	800cb5c <iprintf>
  }
  /**
   *  status_connection
   */
  COPY_STATUS_CONNECTION_UUID(uuid.Char_UUID_128);
 800bcdc:	2319      	movs	r3, #25
 800bcde:	713b      	strb	r3, [r7, #4]
 800bce0:	23ed      	movs	r3, #237	; 0xed
 800bce2:	717b      	strb	r3, [r7, #5]
 800bce4:	2382      	movs	r3, #130	; 0x82
 800bce6:	71bb      	strb	r3, [r7, #6]
 800bce8:	23ae      	movs	r3, #174	; 0xae
 800bcea:	71fb      	strb	r3, [r7, #7]
 800bcec:	23ed      	movs	r3, #237	; 0xed
 800bcee:	723b      	strb	r3, [r7, #8]
 800bcf0:	2321      	movs	r3, #33	; 0x21
 800bcf2:	727b      	strb	r3, [r7, #9]
 800bcf4:	234c      	movs	r3, #76	; 0x4c
 800bcf6:	72bb      	strb	r3, [r7, #10]
 800bcf8:	239d      	movs	r3, #157	; 0x9d
 800bcfa:	72fb      	strb	r3, [r7, #11]
 800bcfc:	2341      	movs	r3, #65	; 0x41
 800bcfe:	733b      	strb	r3, [r7, #12]
 800bd00:	2345      	movs	r3, #69	; 0x45
 800bd02:	737b      	strb	r3, [r7, #13]
 800bd04:	2322      	movs	r3, #34	; 0x22
 800bd06:	73bb      	strb	r3, [r7, #14]
 800bd08:	238e      	movs	r3, #142	; 0x8e
 800bd0a:	73fb      	strb	r3, [r7, #15]
 800bd0c:	23ad      	movs	r3, #173	; 0xad
 800bd0e:	743b      	strb	r3, [r7, #16]
 800bd10:	23de      	movs	r3, #222	; 0xde
 800bd12:	747b      	strb	r3, [r7, #17]
 800bd14:	2300      	movs	r3, #0
 800bd16:	74bb      	strb	r3, [r7, #18]
 800bd18:	2300      	movs	r3, #0
 800bd1a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 800bd1c:	4b1e      	ldr	r3, [pc, #120]	; (800bd98 <SVCCTL_InitCustomSvc+0x2bc>)
 800bd1e:	8818      	ldrh	r0, [r3, #0]
 800bd20:	4b2b      	ldr	r3, [pc, #172]	; (800bdd0 <SVCCTL_InitCustomSvc+0x2f4>)
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	1d3a      	adds	r2, r7, #4
 800bd28:	492a      	ldr	r1, [pc, #168]	; (800bdd4 <SVCCTL_InitCustomSvc+0x2f8>)
 800bd2a:	9105      	str	r1, [sp, #20]
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	9104      	str	r1, [sp, #16]
 800bd30:	2110      	movs	r1, #16
 800bd32:	9103      	str	r1, [sp, #12]
 800bd34:	2101      	movs	r1, #1
 800bd36:	9102      	str	r1, [sp, #8]
 800bd38:	2100      	movs	r1, #0
 800bd3a:	9101      	str	r1, [sp, #4]
 800bd3c:	2110      	movs	r1, #16
 800bd3e:	9100      	str	r1, [sp, #0]
 800bd40:	2102      	movs	r1, #2
 800bd42:	f7fd f981 	bl	8009048 <aci_gatt_add_char>
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAckHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00f      	beq.n	800bd70 <SVCCTL_InitCustomSvc+0x294>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACK, error code: 0x%x \n\r", ret);
 800bd50:	4812      	ldr	r0, [pc, #72]	; (800bd9c <SVCCTL_InitCustomSvc+0x2c0>)
 800bd52:	f7fe fc4d 	bl	800a5f0 <DbgTraceGetFileName>
 800bd56:	4601      	mov	r1, r0
 800bd58:	f240 1375 	movw	r3, #373	; 0x175
 800bd5c:	4a10      	ldr	r2, [pc, #64]	; (800bda0 <SVCCTL_InitCustomSvc+0x2c4>)
 800bd5e:	4811      	ldr	r0, [pc, #68]	; (800bda4 <SVCCTL_InitCustomSvc+0x2c8>)
 800bd60:	f000 fefc 	bl	800cb5c <iprintf>
 800bd64:	7dfb      	ldrb	r3, [r7, #23]
 800bd66:	4619      	mov	r1, r3
 800bd68:	481b      	ldr	r0, [pc, #108]	; (800bdd8 <SVCCTL_InitCustomSvc+0x2fc>)
 800bd6a:	f000 fef7 	bl	800cb5c <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800bd6e:	e00d      	b.n	800bd8c <SVCCTL_InitCustomSvc+0x2b0>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACK \n\r");
 800bd70:	480a      	ldr	r0, [pc, #40]	; (800bd9c <SVCCTL_InitCustomSvc+0x2c0>)
 800bd72:	f7fe fc3d 	bl	800a5f0 <DbgTraceGetFileName>
 800bd76:	4601      	mov	r1, r0
 800bd78:	f240 1379 	movw	r3, #377	; 0x179
 800bd7c:	4a08      	ldr	r2, [pc, #32]	; (800bda0 <SVCCTL_InitCustomSvc+0x2c4>)
 800bd7e:	4809      	ldr	r0, [pc, #36]	; (800bda4 <SVCCTL_InitCustomSvc+0x2c8>)
 800bd80:	f000 feec 	bl	800cb5c <iprintf>
 800bd84:	4815      	ldr	r0, [pc, #84]	; (800bddc <SVCCTL_InitCustomSvc+0x300>)
 800bd86:	f000 fee9 	bl	800cb5c <iprintf>
  return;
 800bd8a:	bf00      	nop
}
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	0800b9b9 	.word	0x0800b9b9
 800bd98:	200024e8 	.word	0x200024e8
 800bd9c:	0800f658 	.word	0x0800f658
 800bda0:	0800fcb8 	.word	0x0800fcb8
 800bda4:	0800f678 	.word	0x0800f678
 800bda8:	0800f68c 	.word	0x0800f68c
 800bdac:	0800f6d0 	.word	0x0800f6d0
 800bdb0:	20000029 	.word	0x20000029
 800bdb4:	200024ea 	.word	0x200024ea
 800bdb8:	0800f700 	.word	0x0800f700
 800bdbc:	0800f744 	.word	0x0800f744
 800bdc0:	2000002a 	.word	0x2000002a
 800bdc4:	200024ec 	.word	0x200024ec
 800bdc8:	0800f778 	.word	0x0800f778
 800bdcc:	0800f7bc 	.word	0x0800f7bc
 800bdd0:	2000002b 	.word	0x2000002b
 800bdd4:	200024ee 	.word	0x200024ee
 800bdd8:	0800f7f0 	.word	0x0800f7f0
 800bddc:	0800f834 	.word	0x0800f834

0800bde0 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af02      	add	r7, sp, #8
 800bde6:	4603      	mov	r3, r0
 800bde8:	6039      	str	r1, [r7, #0]
 800bdea:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bdec:	2392      	movs	r3, #146	; 0x92
 800bdee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d06a      	beq.n	800becc <Custom_STM_App_Update_Char+0xec>
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	f300 8097 	bgt.w	800bf2a <Custom_STM_App_Update_Char+0x14a>
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <Custom_STM_App_Update_Char+0x26>
 800be00:	2b01      	cmp	r3, #1
 800be02:	d034      	beq.n	800be6e <Custom_STM_App_Update_Char+0x8e>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;

    default:
      break;
 800be04:	e091      	b.n	800bf2a <Custom_STM_App_Update_Char+0x14a>
      ret = aci_gatt_update_char_value(CustomContext.CustomFsHdle,
 800be06:	4b4c      	ldr	r3, [pc, #304]	; (800bf38 <Custom_STM_App_Update_Char+0x158>)
 800be08:	8818      	ldrh	r0, [r3, #0]
 800be0a:	4b4b      	ldr	r3, [pc, #300]	; (800bf38 <Custom_STM_App_Update_Char+0x158>)
 800be0c:	8859      	ldrh	r1, [r3, #2]
 800be0e:	4b4b      	ldr	r3, [pc, #300]	; (800bf3c <Custom_STM_App_Update_Char+0x15c>)
 800be10:	781a      	ldrb	r2, [r3, #0]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	9300      	str	r3, [sp, #0]
 800be16:	4613      	mov	r3, r2
 800be18:	2200      	movs	r2, #0
 800be1a:	f7fd fa1d 	bl	8009258 <aci_gatt_update_char_value>
 800be1e:	4603      	mov	r3, r0
 800be20:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800be22:	7bfb      	ldrb	r3, [r7, #15]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00f      	beq.n	800be48 <Custom_STM_App_Update_Char+0x68>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value GSSID command, result : 0x%x \n\r", ret);
 800be28:	4845      	ldr	r0, [pc, #276]	; (800bf40 <Custom_STM_App_Update_Char+0x160>)
 800be2a:	f7fe fbe1 	bl	800a5f0 <DbgTraceGetFileName>
 800be2e:	4601      	mov	r1, r0
 800be30:	f240 139b 	movw	r3, #411	; 0x19b
 800be34:	4a43      	ldr	r2, [pc, #268]	; (800bf44 <Custom_STM_App_Update_Char+0x164>)
 800be36:	4844      	ldr	r0, [pc, #272]	; (800bf48 <Custom_STM_App_Update_Char+0x168>)
 800be38:	f000 fe90 	bl	800cb5c <iprintf>
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
 800be3e:	4619      	mov	r1, r3
 800be40:	4842      	ldr	r0, [pc, #264]	; (800bf4c <Custom_STM_App_Update_Char+0x16c>)
 800be42:	f000 fe8b 	bl	800cb5c <iprintf>
 800be46:	e00c      	b.n	800be62 <Custom_STM_App_Update_Char+0x82>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GSSID command\n\r");
 800be48:	483d      	ldr	r0, [pc, #244]	; (800bf40 <Custom_STM_App_Update_Char+0x160>)
 800be4a:	f7fe fbd1 	bl	800a5f0 <DbgTraceGetFileName>
 800be4e:	4601      	mov	r1, r0
 800be50:	f240 139f 	movw	r3, #415	; 0x19f
 800be54:	4a3b      	ldr	r2, [pc, #236]	; (800bf44 <Custom_STM_App_Update_Char+0x164>)
 800be56:	483c      	ldr	r0, [pc, #240]	; (800bf48 <Custom_STM_App_Update_Char+0x168>)
 800be58:	f000 fe80 	bl	800cb5c <iprintf>
 800be5c:	483c      	ldr	r0, [pc, #240]	; (800bf50 <Custom_STM_App_Update_Char+0x170>)
 800be5e:	f000 fe7d 	bl	800cb5c <iprintf>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 800be62:	2201      	movs	r2, #1
 800be64:	2120      	movs	r1, #32
 800be66:	483b      	ldr	r0, [pc, #236]	; (800bf54 <Custom_STM_App_Update_Char+0x174>)
 800be68:	f7f8 f862 	bl	8003f30 <HAL_GPIO_WritePin>
      break;
 800be6c:	e05e      	b.n	800bf2c <Custom_STM_App_Update_Char+0x14c>
      ret = aci_gatt_update_char_value(CustomContext.CustomFsHdle,
 800be6e:	4b32      	ldr	r3, [pc, #200]	; (800bf38 <Custom_STM_App_Update_Char+0x158>)
 800be70:	8818      	ldrh	r0, [r3, #0]
 800be72:	4b31      	ldr	r3, [pc, #196]	; (800bf38 <Custom_STM_App_Update_Char+0x158>)
 800be74:	8899      	ldrh	r1, [r3, #4]
 800be76:	4b38      	ldr	r3, [pc, #224]	; (800bf58 <Custom_STM_App_Update_Char+0x178>)
 800be78:	781a      	ldrb	r2, [r3, #0]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	4613      	mov	r3, r2
 800be80:	2200      	movs	r2, #0
 800be82:	f7fd f9e9 	bl	8009258 <aci_gatt_update_char_value>
 800be86:	4603      	mov	r3, r0
 800be88:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800be8a:	7bfb      	ldrb	r3, [r7, #15]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00f      	beq.n	800beb0 <Custom_STM_App_Update_Char+0xd0>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value GPASS command, result : 0x%x \n\r", ret);
 800be90:	482b      	ldr	r0, [pc, #172]	; (800bf40 <Custom_STM_App_Update_Char+0x160>)
 800be92:	f7fe fbad 	bl	800a5f0 <DbgTraceGetFileName>
 800be96:	4601      	mov	r1, r0
 800be98:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
 800be9c:	4a29      	ldr	r2, [pc, #164]	; (800bf44 <Custom_STM_App_Update_Char+0x164>)
 800be9e:	482a      	ldr	r0, [pc, #168]	; (800bf48 <Custom_STM_App_Update_Char+0x168>)
 800bea0:	f000 fe5c 	bl	800cb5c <iprintf>
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
 800bea6:	4619      	mov	r1, r3
 800bea8:	482c      	ldr	r0, [pc, #176]	; (800bf5c <Custom_STM_App_Update_Char+0x17c>)
 800beaa:	f000 fe57 	bl	800cb5c <iprintf>
      break;
 800beae:	e03d      	b.n	800bf2c <Custom_STM_App_Update_Char+0x14c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GPASS command\n\r");
 800beb0:	4823      	ldr	r0, [pc, #140]	; (800bf40 <Custom_STM_App_Update_Char+0x160>)
 800beb2:	f7fe fb9d 	bl	800a5f0 <DbgTraceGetFileName>
 800beb6:	4601      	mov	r1, r0
 800beb8:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 800bebc:	4a21      	ldr	r2, [pc, #132]	; (800bf44 <Custom_STM_App_Update_Char+0x164>)
 800bebe:	4822      	ldr	r0, [pc, #136]	; (800bf48 <Custom_STM_App_Update_Char+0x168>)
 800bec0:	f000 fe4c 	bl	800cb5c <iprintf>
 800bec4:	4826      	ldr	r0, [pc, #152]	; (800bf60 <Custom_STM_App_Update_Char+0x180>)
 800bec6:	f000 fe49 	bl	800cb5c <iprintf>
      break;
 800beca:	e02f      	b.n	800bf2c <Custom_STM_App_Update_Char+0x14c>
      ret = aci_gatt_update_char_value(CustomContext.CustomFsHdle,
 800becc:	4b1a      	ldr	r3, [pc, #104]	; (800bf38 <Custom_STM_App_Update_Char+0x158>)
 800bece:	8818      	ldrh	r0, [r3, #0]
 800bed0:	4b19      	ldr	r3, [pc, #100]	; (800bf38 <Custom_STM_App_Update_Char+0x158>)
 800bed2:	88d9      	ldrh	r1, [r3, #6]
 800bed4:	4b23      	ldr	r3, [pc, #140]	; (800bf64 <Custom_STM_App_Update_Char+0x184>)
 800bed6:	781a      	ldrb	r2, [r3, #0]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	4613      	mov	r3, r2
 800bede:	2200      	movs	r2, #0
 800bee0:	f7fd f9ba 	bl	8009258 <aci_gatt_update_char_value>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00f      	beq.n	800bf0e <Custom_STM_App_Update_Char+0x12e>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACK command, result : 0x%x \n\r", ret);
 800beee:	4814      	ldr	r0, [pc, #80]	; (800bf40 <Custom_STM_App_Update_Char+0x160>)
 800bef0:	f7fe fb7e 	bl	800a5f0 <DbgTraceGetFileName>
 800bef4:	4601      	mov	r1, r0
 800bef6:	f240 13c1 	movw	r3, #449	; 0x1c1
 800befa:	4a12      	ldr	r2, [pc, #72]	; (800bf44 <Custom_STM_App_Update_Char+0x164>)
 800befc:	4812      	ldr	r0, [pc, #72]	; (800bf48 <Custom_STM_App_Update_Char+0x168>)
 800befe:	f000 fe2d 	bl	800cb5c <iprintf>
 800bf02:	7bfb      	ldrb	r3, [r7, #15]
 800bf04:	4619      	mov	r1, r3
 800bf06:	4818      	ldr	r0, [pc, #96]	; (800bf68 <Custom_STM_App_Update_Char+0x188>)
 800bf08:	f000 fe28 	bl	800cb5c <iprintf>
      break;
 800bf0c:	e00e      	b.n	800bf2c <Custom_STM_App_Update_Char+0x14c>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACK command\n\r");
 800bf0e:	480c      	ldr	r0, [pc, #48]	; (800bf40 <Custom_STM_App_Update_Char+0x160>)
 800bf10:	f7fe fb6e 	bl	800a5f0 <DbgTraceGetFileName>
 800bf14:	4601      	mov	r1, r0
 800bf16:	f240 13c5 	movw	r3, #453	; 0x1c5
 800bf1a:	4a0a      	ldr	r2, [pc, #40]	; (800bf44 <Custom_STM_App_Update_Char+0x164>)
 800bf1c:	480a      	ldr	r0, [pc, #40]	; (800bf48 <Custom_STM_App_Update_Char+0x168>)
 800bf1e:	f000 fe1d 	bl	800cb5c <iprintf>
 800bf22:	4812      	ldr	r0, [pc, #72]	; (800bf6c <Custom_STM_App_Update_Char+0x18c>)
 800bf24:	f000 fe1a 	bl	800cb5c <iprintf>
      break;
 800bf28:	e000      	b.n	800bf2c <Custom_STM_App_Update_Char+0x14c>
      break;
 800bf2a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800bf2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	200024e8 	.word	0x200024e8
 800bf3c:	20000029 	.word	0x20000029
 800bf40:	0800f658 	.word	0x0800f658
 800bf44:	0800fcd0 	.word	0x0800fcd0
 800bf48:	0800f678 	.word	0x0800f678
 800bf4c:	0800f864 	.word	0x0800f864
 800bf50:	0800f8ac 	.word	0x0800f8ac
 800bf54:	48000400 	.word	0x48000400
 800bf58:	2000002a 	.word	0x2000002a
 800bf5c:	0800f8e4 	.word	0x0800f8e4
 800bf60:	0800f92c 	.word	0x0800f92c
 800bf64:	2000002b 	.word	0x2000002b
 800bf68:	0800f964 	.word	0x0800f964
 800bf6c:	0800f9a8 	.word	0x0800f9a8

0800bf70 <LL_PWR_EnableBootC2>:
{
 800bf70:	b480      	push	{r7}
 800bf72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800bf74:	4b05      	ldr	r3, [pc, #20]	; (800bf8c <LL_PWR_EnableBootC2+0x1c>)
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	4a04      	ldr	r2, [pc, #16]	; (800bf8c <LL_PWR_EnableBootC2+0x1c>)
 800bf7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf7e:	60d3      	str	r3, [r2, #12]
}
 800bf80:	bf00      	nop
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	58000400 	.word	0x58000400

0800bf90 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800bf90:	b480      	push	{r7}
 800bf92:	b083      	sub	sp, #12
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800bf98:	4b06      	ldr	r3, [pc, #24]	; (800bfb4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bf9a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800bf9e:	4905      	ldr	r1, [pc, #20]	; (800bfb4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	58000800 	.word	0x58000800

0800bfb8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800bfc0:	4b05      	ldr	r3, [pc, #20]	; (800bfd8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800bfc2:	6a1a      	ldr	r2, [r3, #32]
 800bfc4:	4904      	ldr	r1, [pc, #16]	; (800bfd8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	620b      	str	r3, [r1, #32]
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	58000800 	.word	0x58000800

0800bfdc <LL_AHB3_GRP1_EnableClock>:
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bfe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bfe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800bff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4013      	ands	r3, r2
 800bffe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c000:	68fb      	ldr	r3, [r7, #12]
}
 800c002:	bf00      	nop
 800c004:	3714      	adds	r7, #20
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr

0800c00e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c00e:	b480      	push	{r7}
 800c010:	b085      	sub	sp, #20
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c01a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c01e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4313      	orrs	r3, r2
 800c026:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c02a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c02e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4013      	ands	r3, r2
 800c036:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c038:	68fb      	ldr	r3, [r7, #12]
}
 800c03a:	bf00      	nop
 800c03c:	3714      	adds	r7, #20
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <LL_C1_IPCC_EnableIT_TXF>:
{
 800c046:	b480      	push	{r7}
 800c048:	b083      	sub	sp, #12
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	601a      	str	r2, [r3, #0]
}
 800c05a:	bf00      	nop
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <LL_C1_IPCC_EnableIT_RXO>:
{
 800c066:	b480      	push	{r7}
 800c068:	b083      	sub	sp, #12
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f043 0201 	orr.w	r2, r3, #1
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	601a      	str	r2, [r3, #0]
}
 800c07a:	bf00      	nop
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800c086:	b480      	push	{r7}
 800c088:	b083      	sub	sp, #12
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	685a      	ldr	r2, [r3, #4]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	041b      	lsls	r3, r3, #16
 800c098:	43db      	mvns	r3, r3
 800c09a:	401a      	ands	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	605a      	str	r2, [r3, #4]
}
 800c0a0:	bf00      	nop
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <LL_C1_IPCC_DisableTransmitChannel>:
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	685a      	ldr	r2, [r3, #4]
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	041b      	lsls	r3, r3, #16
 800c0be:	431a      	orrs	r2, r3
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	605a      	str	r2, [r3, #4]
}
 800c0c4:	bf00      	nop
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	43db      	mvns	r3, r3
 800c0e2:	401a      	ands	r2, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	605a      	str	r2, [r3, #4]
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	609a      	str	r2, [r3, #8]
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <LL_C1_IPCC_SetFlag_CHx>:
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	041a      	lsls	r2, r3, #16
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	609a      	str	r2, [r3, #8]
}
 800c122:	bf00      	nop
 800c124:	370c      	adds	r7, #12
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr

0800c12e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800c12e:	b480      	push	{r7}
 800c130:	b083      	sub	sp, #12
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	68da      	ldr	r2, [r3, #12]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	4013      	ands	r3, r2
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	429a      	cmp	r2, r3
 800c144:	d101      	bne.n	800c14a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c146:	2301      	movs	r3, #1
 800c148:	e000      	b.n	800c14c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c14a:	2300      	movs	r3, #0
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	370c      	adds	r7, #12
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	69da      	ldr	r2, [r3, #28]
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	4013      	ands	r3, r2
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d101      	bne.n	800c174 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c170:	2301      	movs	r3, #1
 800c172:	e000      	b.n	800c176 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
	...

0800c184 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c184:	b580      	push	{r7, lr}
 800c186:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c188:	2102      	movs	r1, #2
 800c18a:	4819      	ldr	r0, [pc, #100]	; (800c1f0 <HW_IPCC_Rx_Handler+0x6c>)
 800c18c:	f7ff ffe4 	bl	800c158 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d009      	beq.n	800c1aa <HW_IPCC_Rx_Handler+0x26>
 800c196:	4b16      	ldr	r3, [pc, #88]	; (800c1f0 <HW_IPCC_Rx_Handler+0x6c>)
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	43db      	mvns	r3, r3
 800c19c:	f003 0302 	and.w	r3, r3, #2
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d002      	beq.n	800c1aa <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800c1a4:	f000 f8da 	bl	800c35c <HW_IPCC_SYS_EvtHandler>
 800c1a8:	e01f      	b.n	800c1ea <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	4810      	ldr	r0, [pc, #64]	; (800c1f0 <HW_IPCC_Rx_Handler+0x6c>)
 800c1ae:	f7ff ffd3 	bl	800c158 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d008      	beq.n	800c1ca <HW_IPCC_Rx_Handler+0x46>
 800c1b8:	4b0d      	ldr	r3, [pc, #52]	; (800c1f0 <HW_IPCC_Rx_Handler+0x6c>)
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	f003 0301 	and.w	r3, r3, #1
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d102      	bne.n	800c1ca <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800c1c4:	f000 f88e 	bl	800c2e4 <HW_IPCC_BLE_EvtHandler>
 800c1c8:	e00f      	b.n	800c1ea <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c1ca:	2108      	movs	r1, #8
 800c1cc:	4808      	ldr	r0, [pc, #32]	; (800c1f0 <HW_IPCC_Rx_Handler+0x6c>)
 800c1ce:	f7ff ffc3 	bl	800c158 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d009      	beq.n	800c1ec <HW_IPCC_Rx_Handler+0x68>
 800c1d8:	4b05      	ldr	r3, [pc, #20]	; (800c1f0 <HW_IPCC_Rx_Handler+0x6c>)
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	43db      	mvns	r3, r3
 800c1de:	f003 0308 	and.w	r3, r3, #8
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c1e6:	f000 f905 	bl	800c3f4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c1ea:	bf00      	nop
 800c1ec:	bf00      	nop
}
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	58000c00 	.word	0x58000c00

0800c1f4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c1f8:	2102      	movs	r1, #2
 800c1fa:	481a      	ldr	r0, [pc, #104]	; (800c264 <HW_IPCC_Tx_Handler+0x70>)
 800c1fc:	f7ff ff97 	bl	800c12e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d109      	bne.n	800c21a <HW_IPCC_Tx_Handler+0x26>
 800c206:	4b17      	ldr	r3, [pc, #92]	; (800c264 <HW_IPCC_Tx_Handler+0x70>)
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	43db      	mvns	r3, r3
 800c20c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c214:	f000 f896 	bl	800c344 <HW_IPCC_SYS_CmdEvtHandler>
 800c218:	e020      	b.n	800c25c <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c21a:	2108      	movs	r1, #8
 800c21c:	4811      	ldr	r0, [pc, #68]	; (800c264 <HW_IPCC_Tx_Handler+0x70>)
 800c21e:	f7ff ff86 	bl	800c12e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d109      	bne.n	800c23c <HW_IPCC_Tx_Handler+0x48>
 800c228:	4b0e      	ldr	r3, [pc, #56]	; (800c264 <HW_IPCC_Tx_Handler+0x70>)
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	43db      	mvns	r3, r3
 800c22e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c232:	2b00      	cmp	r3, #0
 800c234:	d002      	beq.n	800c23c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c236:	f000 f8bf 	bl	800c3b8 <HW_IPCC_MM_FreeBufHandler>
 800c23a:	e00f      	b.n	800c25c <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c23c:	2120      	movs	r1, #32
 800c23e:	4809      	ldr	r0, [pc, #36]	; (800c264 <HW_IPCC_Tx_Handler+0x70>)
 800c240:	f7ff ff75 	bl	800c12e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d109      	bne.n	800c25e <HW_IPCC_Tx_Handler+0x6a>
 800c24a:	4b06      	ldr	r3, [pc, #24]	; (800c264 <HW_IPCC_Tx_Handler+0x70>)
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	43db      	mvns	r3, r3
 800c250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c254:	2b00      	cmp	r3, #0
 800c256:	d002      	beq.n	800c25e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c258:	f000 f850 	bl	800c2fc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c25c:	bf00      	nop
 800c25e:	bf00      	nop
}
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	58000c00 	.word	0x58000c00

0800c268 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c26c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c270:	f7ff fecd 	bl	800c00e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c274:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c278:	f7ff fe9e 	bl	800bfb8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c27c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c280:	f7ff fe86 	bl	800bf90 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c284:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c286:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c288:	f7ff fe72 	bl	800bf70 <LL_PWR_EnableBootC2>

  return;
 800c28c:	bf00      	nop
}
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c294:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c298:	f7ff fea0 	bl	800bfdc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c29c:	4806      	ldr	r0, [pc, #24]	; (800c2b8 <HW_IPCC_Init+0x28>)
 800c29e:	f7ff fee2 	bl	800c066 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c2a2:	4805      	ldr	r0, [pc, #20]	; (800c2b8 <HW_IPCC_Init+0x28>)
 800c2a4:	f7ff fecf 	bl	800c046 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c2a8:	202c      	movs	r0, #44	; 0x2c
 800c2aa:	f7f7 f95a 	bl	8003562 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c2ae:	202d      	movs	r0, #45	; 0x2d
 800c2b0:	f7f7 f957 	bl	8003562 <HAL_NVIC_EnableIRQ>

  return;
 800c2b4:	bf00      	nop
}
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	58000c00 	.word	0x58000c00

0800c2bc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c2c0:	2101      	movs	r1, #1
 800c2c2:	4802      	ldr	r0, [pc, #8]	; (800c2cc <HW_IPCC_BLE_Init+0x10>)
 800c2c4:	f7ff ff04 	bl	800c0d0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c2c8:	bf00      	nop
}
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	58000c00 	.word	0x58000c00

0800c2d0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c2d4:	2101      	movs	r1, #1
 800c2d6:	4802      	ldr	r0, [pc, #8]	; (800c2e0 <HW_IPCC_BLE_SendCmd+0x10>)
 800c2d8:	f7ff ff1a 	bl	800c110 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c2dc:	bf00      	nop
}
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	58000c00 	.word	0x58000c00

0800c2e4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c2e8:	f7fd ffca 	bl	800a280 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	4802      	ldr	r0, [pc, #8]	; (800c2f8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800c2f0:	f7ff ff00 	bl	800c0f4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c2f4:	bf00      	nop
}
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	58000c00 	.word	0x58000c00

0800c2fc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c300:	2120      	movs	r1, #32
 800c302:	4803      	ldr	r0, [pc, #12]	; (800c310 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c304:	f7ff fed2 	bl	800c0ac <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c308:	f7fd ffea 	bl	800a2e0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c30c:	bf00      	nop
}
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	58000c00 	.word	0x58000c00

0800c314 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c318:	2102      	movs	r1, #2
 800c31a:	4802      	ldr	r0, [pc, #8]	; (800c324 <HW_IPCC_SYS_Init+0x10>)
 800c31c:	f7ff fed8 	bl	800c0d0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c320:	bf00      	nop
}
 800c322:	bd80      	pop	{r7, pc}
 800c324:	58000c00 	.word	0x58000c00

0800c328 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c32c:	2102      	movs	r1, #2
 800c32e:	4804      	ldr	r0, [pc, #16]	; (800c340 <HW_IPCC_SYS_SendCmd+0x18>)
 800c330:	f7ff feee 	bl	800c110 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c334:	2102      	movs	r1, #2
 800c336:	4802      	ldr	r0, [pc, #8]	; (800c340 <HW_IPCC_SYS_SendCmd+0x18>)
 800c338:	f7ff fea5 	bl	800c086 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c33c:	bf00      	nop
}
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	58000c00 	.word	0x58000c00

0800c344 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c348:	2102      	movs	r1, #2
 800c34a:	4803      	ldr	r0, [pc, #12]	; (800c358 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c34c:	f7ff feae 	bl	800c0ac <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c350:	f7fe f816 	bl	800a380 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c354:	bf00      	nop
}
 800c356:	bd80      	pop	{r7, pc}
 800c358:	58000c00 	.word	0x58000c00

0800c35c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c360:	f7fe f824 	bl	800a3ac <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c364:	2102      	movs	r1, #2
 800c366:	4802      	ldr	r0, [pc, #8]	; (800c370 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c368:	f7ff fec4 	bl	800c0f4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c36c:	bf00      	nop
}
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	58000c00 	.word	0x58000c00

0800c374 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c37c:	2108      	movs	r1, #8
 800c37e:	480c      	ldr	r0, [pc, #48]	; (800c3b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c380:	f7ff fed5 	bl	800c12e <LL_C1_IPCC_IsActiveFlag_CHx>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d007      	beq.n	800c39a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c38a:	4a0a      	ldr	r2, [pc, #40]	; (800c3b4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c390:	2108      	movs	r1, #8
 800c392:	4807      	ldr	r0, [pc, #28]	; (800c3b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c394:	f7ff fe77 	bl	800c086 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c398:	e006      	b.n	800c3a8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c39e:	2108      	movs	r1, #8
 800c3a0:	4803      	ldr	r0, [pc, #12]	; (800c3b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c3a2:	f7ff feb5 	bl	800c110 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c3a6:	bf00      	nop
}
 800c3a8:	3708      	adds	r7, #8
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	58000c00 	.word	0x58000c00
 800c3b4:	200024f0 	.word	0x200024f0

0800c3b8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c3bc:	2108      	movs	r1, #8
 800c3be:	4806      	ldr	r0, [pc, #24]	; (800c3d8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c3c0:	f7ff fe74 	bl	800c0ac <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c3c4:	4b05      	ldr	r3, [pc, #20]	; (800c3dc <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c3ca:	2108      	movs	r1, #8
 800c3cc:	4802      	ldr	r0, [pc, #8]	; (800c3d8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c3ce:	f7ff fe9f 	bl	800c110 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c3d2:	bf00      	nop
}
 800c3d4:	bd80      	pop	{r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	58000c00 	.word	0x58000c00
 800c3dc:	200024f0 	.word	0x200024f0

0800c3e0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c3e4:	2108      	movs	r1, #8
 800c3e6:	4802      	ldr	r0, [pc, #8]	; (800c3f0 <HW_IPCC_TRACES_Init+0x10>)
 800c3e8:	f7ff fe72 	bl	800c0d0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c3ec:	bf00      	nop
}
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	58000c00 	.word	0x58000c00

0800c3f4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c3f8:	f7fe f880 	bl	800a4fc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c3fc:	2108      	movs	r1, #8
 800c3fe:	4802      	ldr	r0, [pc, #8]	; (800c408 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c400:	f7ff fe78 	bl	800c0f4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c404:	bf00      	nop
}
 800c406:	bd80      	pop	{r7, pc}
 800c408:	58000c00 	.word	0x58000c00

0800c40c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c40c:	b480      	push	{r7}
 800c40e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c410:	4b05      	ldr	r3, [pc, #20]	; (800c428 <UTIL_LPM_Init+0x1c>)
 800c412:	2200      	movs	r2, #0
 800c414:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c416:	4b05      	ldr	r3, [pc, #20]	; (800c42c <UTIL_LPM_Init+0x20>)
 800c418:	2200      	movs	r2, #0
 800c41a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c41c:	bf00      	nop
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	200024f4 	.word	0x200024f4
 800c42c:	200024f8 	.word	0x200024f8

0800c430 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	460b      	mov	r3, r1
 800c43a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c43c:	f3ef 8310 	mrs	r3, PRIMASK
 800c440:	613b      	str	r3, [r7, #16]
  return(result);
 800c442:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c444:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c446:	b672      	cpsid	i
}
 800c448:	bf00      	nop
  
  switch(state)
 800c44a:	78fb      	ldrb	r3, [r7, #3]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d008      	beq.n	800c462 <UTIL_LPM_SetOffMode+0x32>
 800c450:	2b01      	cmp	r3, #1
 800c452:	d10e      	bne.n	800c472 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c454:	4b0d      	ldr	r3, [pc, #52]	; (800c48c <UTIL_LPM_SetOffMode+0x5c>)
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	4a0b      	ldr	r2, [pc, #44]	; (800c48c <UTIL_LPM_SetOffMode+0x5c>)
 800c45e:	6013      	str	r3, [r2, #0]
      break;
 800c460:	e008      	b.n	800c474 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	43da      	mvns	r2, r3
 800c466:	4b09      	ldr	r3, [pc, #36]	; (800c48c <UTIL_LPM_SetOffMode+0x5c>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4013      	ands	r3, r2
 800c46c:	4a07      	ldr	r2, [pc, #28]	; (800c48c <UTIL_LPM_SetOffMode+0x5c>)
 800c46e:	6013      	str	r3, [r2, #0]
      break;
 800c470:	e000      	b.n	800c474 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c472:	bf00      	nop
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f383 8810 	msr	PRIMASK, r3
}
 800c47e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c480:	bf00      	nop
 800c482:	371c      	adds	r7, #28
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr
 800c48c:	200024f8 	.word	0x200024f8

0800c490 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b090      	sub	sp, #64	; 0x40
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c498:	4b73      	ldr	r3, [pc, #460]	; (800c668 <UTIL_SEQ_Run+0x1d8>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c49e:	4b72      	ldr	r3, [pc, #456]	; (800c668 <UTIL_SEQ_Run+0x1d8>)
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	4a70      	ldr	r2, [pc, #448]	; (800c668 <UTIL_SEQ_Run+0x1d8>)
 800c4a8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c4aa:	4b70      	ldr	r3, [pc, #448]	; (800c66c <UTIL_SEQ_Run+0x1dc>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c4b0:	4b6f      	ldr	r3, [pc, #444]	; (800c670 <UTIL_SEQ_Run+0x1e0>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c4b6:	4b6f      	ldr	r3, [pc, #444]	; (800c674 <UTIL_SEQ_Run+0x1e4>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c4bc:	4b6e      	ldr	r3, [pc, #440]	; (800c678 <UTIL_SEQ_Run+0x1e8>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c4c2:	e08d      	b.n	800c5e0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c4c8:	e002      	b.n	800c4d0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c4d0:	4a6a      	ldr	r2, [pc, #424]	; (800c67c <UTIL_SEQ_Run+0x1ec>)
 800c4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4da:	401a      	ands	r2, r3
 800c4dc:	4b62      	ldr	r3, [pc, #392]	; (800c668 <UTIL_SEQ_Run+0x1d8>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d0f1      	beq.n	800c4ca <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c4e6:	4a65      	ldr	r2, [pc, #404]	; (800c67c <UTIL_SEQ_Run+0x1ec>)
 800c4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4ea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f0:	401a      	ands	r2, r3
 800c4f2:	4b5d      	ldr	r3, [pc, #372]	; (800c668 <UTIL_SEQ_Run+0x1d8>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c4fa:	4a60      	ldr	r2, [pc, #384]	; (800c67c <UTIL_SEQ_Run+0x1ec>)
 800c4fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4fe:	00db      	lsls	r3, r3, #3
 800c500:	4413      	add	r3, r2
 800c502:	685a      	ldr	r2, [r3, #4]
 800c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c506:	4013      	ands	r3, r2
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d106      	bne.n	800c51a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c50c:	4a5b      	ldr	r2, [pc, #364]	; (800c67c <UTIL_SEQ_Run+0x1ec>)
 800c50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c510:	00db      	lsls	r3, r3, #3
 800c512:	4413      	add	r3, r2
 800c514:	f04f 32ff 	mov.w	r2, #4294967295
 800c518:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c51a:	4a58      	ldr	r2, [pc, #352]	; (800c67c <UTIL_SEQ_Run+0x1ec>)
 800c51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c51e:	00db      	lsls	r3, r3, #3
 800c520:	4413      	add	r3, r2
 800c522:	685a      	ldr	r2, [r3, #4]
 800c524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c526:	4013      	ands	r3, r2
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 f9b3 	bl	800c894 <SEQ_BitPosition>
 800c52e:	4603      	mov	r3, r0
 800c530:	461a      	mov	r2, r3
 800c532:	4b53      	ldr	r3, [pc, #332]	; (800c680 <UTIL_SEQ_Run+0x1f0>)
 800c534:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c536:	4a51      	ldr	r2, [pc, #324]	; (800c67c <UTIL_SEQ_Run+0x1ec>)
 800c538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c53a:	00db      	lsls	r3, r3, #3
 800c53c:	4413      	add	r3, r2
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	4b4f      	ldr	r3, [pc, #316]	; (800c680 <UTIL_SEQ_Run+0x1f0>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2101      	movs	r1, #1
 800c546:	fa01 f303 	lsl.w	r3, r1, r3
 800c54a:	43db      	mvns	r3, r3
 800c54c:	401a      	ands	r2, r3
 800c54e:	494b      	ldr	r1, [pc, #300]	; (800c67c <UTIL_SEQ_Run+0x1ec>)
 800c550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c552:	00db      	lsls	r3, r3, #3
 800c554:	440b      	add	r3, r1
 800c556:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c558:	f3ef 8310 	mrs	r3, PRIMASK
 800c55c:	61bb      	str	r3, [r7, #24]
  return(result);
 800c55e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c560:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c562:	b672      	cpsid	i
}
 800c564:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c566:	4b46      	ldr	r3, [pc, #280]	; (800c680 <UTIL_SEQ_Run+0x1f0>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2201      	movs	r2, #1
 800c56c:	fa02 f303 	lsl.w	r3, r2, r3
 800c570:	43da      	mvns	r2, r3
 800c572:	4b3e      	ldr	r3, [pc, #248]	; (800c66c <UTIL_SEQ_Run+0x1dc>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4013      	ands	r3, r2
 800c578:	4a3c      	ldr	r2, [pc, #240]	; (800c66c <UTIL_SEQ_Run+0x1dc>)
 800c57a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c57c:	2302      	movs	r3, #2
 800c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c580:	e013      	b.n	800c5aa <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c584:	3b01      	subs	r3, #1
 800c586:	4a3d      	ldr	r2, [pc, #244]	; (800c67c <UTIL_SEQ_Run+0x1ec>)
 800c588:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c58c:	4b3c      	ldr	r3, [pc, #240]	; (800c680 <UTIL_SEQ_Run+0x1f0>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2201      	movs	r2, #1
 800c592:	fa02 f303 	lsl.w	r3, r2, r3
 800c596:	43da      	mvns	r2, r3
 800c598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c59a:	3b01      	subs	r3, #1
 800c59c:	400a      	ands	r2, r1
 800c59e:	4937      	ldr	r1, [pc, #220]	; (800c67c <UTIL_SEQ_Run+0x1ec>)
 800c5a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1e8      	bne.n	800c582 <UTIL_SEQ_Run+0xf2>
 800c5b0:	6a3b      	ldr	r3, [r7, #32]
 800c5b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	f383 8810 	msr	PRIMASK, r3
}
 800c5ba:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c5bc:	4b30      	ldr	r3, [pc, #192]	; (800c680 <UTIL_SEQ_Run+0x1f0>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a30      	ldr	r2, [pc, #192]	; (800c684 <UTIL_SEQ_Run+0x1f4>)
 800c5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5c6:	4798      	blx	r3

    local_taskset = TaskSet;
 800c5c8:	4b28      	ldr	r3, [pc, #160]	; (800c66c <UTIL_SEQ_Run+0x1dc>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c5ce:	4b28      	ldr	r3, [pc, #160]	; (800c670 <UTIL_SEQ_Run+0x1e0>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c5d4:	4b27      	ldr	r3, [pc, #156]	; (800c674 <UTIL_SEQ_Run+0x1e4>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c5da:	4b27      	ldr	r3, [pc, #156]	; (800c678 <UTIL_SEQ_Run+0x1e8>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c5e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	401a      	ands	r2, r3
 800c5e6:	4b20      	ldr	r3, [pc, #128]	; (800c668 <UTIL_SEQ_Run+0x1d8>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d005      	beq.n	800c5fc <UTIL_SEQ_Run+0x16c>
 800c5f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f4:	4013      	ands	r3, r2
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f43f af64 	beq.w	800c4c4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c5fc:	4b20      	ldr	r3, [pc, #128]	; (800c680 <UTIL_SEQ_Run+0x1f0>)
 800c5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c602:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c604:	f000 f938 	bl	800c878 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c608:	f3ef 8310 	mrs	r3, PRIMASK
 800c60c:	613b      	str	r3, [r7, #16]
  return(result);
 800c60e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c612:	b672      	cpsid	i
}
 800c614:	bf00      	nop
  local_taskset = TaskSet;
 800c616:	4b15      	ldr	r3, [pc, #84]	; (800c66c <UTIL_SEQ_Run+0x1dc>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c61c:	4b14      	ldr	r3, [pc, #80]	; (800c670 <UTIL_SEQ_Run+0x1e0>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c622:	4b14      	ldr	r3, [pc, #80]	; (800c674 <UTIL_SEQ_Run+0x1e4>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62c:	401a      	ands	r2, r3
 800c62e:	4b0e      	ldr	r3, [pc, #56]	; (800c668 <UTIL_SEQ_Run+0x1d8>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4013      	ands	r3, r2
 800c634:	2b00      	cmp	r3, #0
 800c636:	d107      	bne.n	800c648 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c638:	4b0f      	ldr	r3, [pc, #60]	; (800c678 <UTIL_SEQ_Run+0x1e8>)
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c63e:	4013      	ands	r3, r2
 800c640:	2b00      	cmp	r3, #0
 800c642:	d101      	bne.n	800c648 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c644:	f7f4 ffd9 	bl	80015fa <UTIL_SEQ_Idle>
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f383 8810 	msr	PRIMASK, r3
}
 800c652:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c654:	f000 f917 	bl	800c886 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c658:	4a03      	ldr	r2, [pc, #12]	; (800c668 <UTIL_SEQ_Run+0x1d8>)
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	6013      	str	r3, [r2, #0]

  return;
 800c65e:	bf00      	nop
}
 800c660:	3740      	adds	r7, #64	; 0x40
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	20000030 	.word	0x20000030
 800c66c:	200024fc 	.word	0x200024fc
 800c670:	20002500 	.word	0x20002500
 800c674:	2000002c 	.word	0x2000002c
 800c678:	20002504 	.word	0x20002504
 800c67c:	2000258c 	.word	0x2000258c
 800c680:	20002508 	.word	0x20002508
 800c684:	2000250c 	.word	0x2000250c

0800c688 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b088      	sub	sp, #32
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c694:	f3ef 8310 	mrs	r3, PRIMASK
 800c698:	617b      	str	r3, [r7, #20]
  return(result);
 800c69a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c69c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c69e:	b672      	cpsid	i
}
 800c6a0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f000 f8f6 	bl	800c894 <SEQ_BitPosition>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4a06      	ldr	r2, [pc, #24]	; (800c6c8 <UTIL_SEQ_RegTask+0x40>)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	f383 8810 	msr	PRIMASK, r3
}
 800c6be:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c6c0:	bf00      	nop
}
 800c6c2:	3720      	adds	r7, #32
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	2000250c 	.word	0x2000250c

0800c6cc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b087      	sub	sp, #28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6d6:	f3ef 8310 	mrs	r3, PRIMASK
 800c6da:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c6de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6e0:	b672      	cpsid	i
}
 800c6e2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c6e4:	4b0d      	ldr	r3, [pc, #52]	; (800c71c <UTIL_SEQ_SetTask+0x50>)
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	4a0b      	ldr	r2, [pc, #44]	; (800c71c <UTIL_SEQ_SetTask+0x50>)
 800c6ee:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c6f0:	4a0b      	ldr	r2, [pc, #44]	; (800c720 <UTIL_SEQ_SetTask+0x54>)
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	4908      	ldr	r1, [pc, #32]	; (800c720 <UTIL_SEQ_SetTask+0x54>)
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	f383 8810 	msr	PRIMASK, r3
}
 800c70e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c710:	bf00      	nop
}
 800c712:	371c      	adds	r7, #28
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr
 800c71c:	200024fc 	.word	0x200024fc
 800c720:	2000258c 	.word	0x2000258c

0800c724 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c724:	b480      	push	{r7}
 800c726:	b087      	sub	sp, #28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c72c:	f3ef 8310 	mrs	r3, PRIMASK
 800c730:	60fb      	str	r3, [r7, #12]
  return(result);
 800c732:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c734:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c736:	b672      	cpsid	i
}
 800c738:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	43da      	mvns	r2, r3
 800c73e:	4b08      	ldr	r3, [pc, #32]	; (800c760 <UTIL_SEQ_PauseTask+0x3c>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	4013      	ands	r3, r2
 800c744:	4a06      	ldr	r2, [pc, #24]	; (800c760 <UTIL_SEQ_PauseTask+0x3c>)
 800c746:	6013      	str	r3, [r2, #0]
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	f383 8810 	msr	PRIMASK, r3
}
 800c752:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c754:	bf00      	nop
}
 800c756:	371c      	adds	r7, #28
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	2000002c 	.word	0x2000002c

0800c764 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c764:	b480      	push	{r7}
 800c766:	b087      	sub	sp, #28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c76c:	f3ef 8310 	mrs	r3, PRIMASK
 800c770:	60fb      	str	r3, [r7, #12]
  return(result);
 800c772:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c774:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c776:	b672      	cpsid	i
}
 800c778:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c77a:	4b09      	ldr	r3, [pc, #36]	; (800c7a0 <UTIL_SEQ_ResumeTask+0x3c>)
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4313      	orrs	r3, r2
 800c782:	4a07      	ldr	r2, [pc, #28]	; (800c7a0 <UTIL_SEQ_ResumeTask+0x3c>)
 800c784:	6013      	str	r3, [r2, #0]
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	f383 8810 	msr	PRIMASK, r3
}
 800c790:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c792:	bf00      	nop
}
 800c794:	371c      	adds	r7, #28
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	2000002c 	.word	0x2000002c

0800c7a4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b087      	sub	sp, #28
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7ac:	f3ef 8310 	mrs	r3, PRIMASK
 800c7b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c7b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c7b6:	b672      	cpsid	i
}
 800c7b8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c7ba:	4b09      	ldr	r3, [pc, #36]	; (800c7e0 <UTIL_SEQ_SetEvt+0x3c>)
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	4a07      	ldr	r2, [pc, #28]	; (800c7e0 <UTIL_SEQ_SetEvt+0x3c>)
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	f383 8810 	msr	PRIMASK, r3
}
 800c7d0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c7d2:	bf00      	nop
}
 800c7d4:	371c      	adds	r7, #28
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	20002500 	.word	0x20002500

0800c7e4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b088      	sub	sp, #32
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c7ec:	4b1f      	ldr	r3, [pc, #124]	; (800c86c <UTIL_SEQ_WaitEvt+0x88>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c7f2:	4b1e      	ldr	r3, [pc, #120]	; (800c86c <UTIL_SEQ_WaitEvt+0x88>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fa:	d102      	bne.n	800c802 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	61fb      	str	r3, [r7, #28]
 800c800:	e005      	b.n	800c80e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c802:	4b1a      	ldr	r3, [pc, #104]	; (800c86c <UTIL_SEQ_WaitEvt+0x88>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2201      	movs	r2, #1
 800c808:	fa02 f303 	lsl.w	r3, r2, r3
 800c80c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c80e:	4b18      	ldr	r3, [pc, #96]	; (800c870 <UTIL_SEQ_WaitEvt+0x8c>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c814:	4a16      	ldr	r2, [pc, #88]	; (800c870 <UTIL_SEQ_WaitEvt+0x8c>)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c81a:	e003      	b.n	800c824 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c81c:	6879      	ldr	r1, [r7, #4]
 800c81e:	69f8      	ldr	r0, [r7, #28]
 800c820:	f7f4 fef2 	bl	8001608 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c824:	4b13      	ldr	r3, [pc, #76]	; (800c874 <UTIL_SEQ_WaitEvt+0x90>)
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4013      	ands	r3, r2
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d0f5      	beq.n	800c81c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c830:	4a0e      	ldr	r2, [pc, #56]	; (800c86c <UTIL_SEQ_WaitEvt+0x88>)
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c836:	f3ef 8310 	mrs	r3, PRIMASK
 800c83a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c83c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c83e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c840:	b672      	cpsid	i
}
 800c842:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	43da      	mvns	r2, r3
 800c848:	4b0a      	ldr	r3, [pc, #40]	; (800c874 <UTIL_SEQ_WaitEvt+0x90>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4013      	ands	r3, r2
 800c84e:	4a09      	ldr	r2, [pc, #36]	; (800c874 <UTIL_SEQ_WaitEvt+0x90>)
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f383 8810 	msr	PRIMASK, r3
}
 800c85c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c85e:	4a04      	ldr	r2, [pc, #16]	; (800c870 <UTIL_SEQ_WaitEvt+0x8c>)
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	6013      	str	r3, [r2, #0]
  return;
 800c864:	bf00      	nop
}
 800c866:	3720      	adds	r7, #32
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	20002508 	.word	0x20002508
 800c870:	20002504 	.word	0x20002504
 800c874:	20002500 	.word	0x20002500

0800c878 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c878:	b480      	push	{r7}
 800c87a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c87c:	bf00      	nop
}
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c886:	b480      	push	{r7}
 800c888:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c88a:	bf00      	nop
}
 800c88c:	46bd      	mov	sp, r7
 800c88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c892:	4770      	bx	lr

0800c894 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c89c:	2300      	movs	r3, #0
 800c89e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	0c1b      	lsrs	r3, r3, #16
 800c8a8:	041b      	lsls	r3, r3, #16
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d104      	bne.n	800c8b8 <SEQ_BitPosition+0x24>
 800c8ae:	2310      	movs	r3, #16
 800c8b0:	73fb      	strb	r3, [r7, #15]
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	041b      	lsls	r3, r3, #16
 800c8b6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d105      	bne.n	800c8ce <SEQ_BitPosition+0x3a>
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
 800c8c4:	3308      	adds	r3, #8
 800c8c6:	73fb      	strb	r3, [r7, #15]
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	021b      	lsls	r3, r3, #8
 800c8cc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d105      	bne.n	800c8e4 <SEQ_BitPosition+0x50>
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	3304      	adds	r3, #4
 800c8dc:	73fb      	strb	r3, [r7, #15]
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	011b      	lsls	r3, r3, #4
 800c8e2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	0f1b      	lsrs	r3, r3, #28
 800c8e8:	4a07      	ldr	r2, [pc, #28]	; (800c908 <SEQ_BitPosition+0x74>)
 800c8ea:	5cd2      	ldrb	r2, [r2, r3]
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c8f2:	7bfb      	ldrb	r3, [r7, #15]
 800c8f4:	f1c3 031f 	rsb	r3, r3, #31
 800c8f8:	b2db      	uxtb	r3, r3
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	0800fcec 	.word	0x0800fcec

0800c90c <__errno>:
 800c90c:	4b01      	ldr	r3, [pc, #4]	; (800c914 <__errno+0x8>)
 800c90e:	6818      	ldr	r0, [r3, #0]
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	20000034 	.word	0x20000034

0800c918 <__libc_init_array>:
 800c918:	b570      	push	{r4, r5, r6, lr}
 800c91a:	4d0d      	ldr	r5, [pc, #52]	; (800c950 <__libc_init_array+0x38>)
 800c91c:	4c0d      	ldr	r4, [pc, #52]	; (800c954 <__libc_init_array+0x3c>)
 800c91e:	1b64      	subs	r4, r4, r5
 800c920:	10a4      	asrs	r4, r4, #2
 800c922:	2600      	movs	r6, #0
 800c924:	42a6      	cmp	r6, r4
 800c926:	d109      	bne.n	800c93c <__libc_init_array+0x24>
 800c928:	4d0b      	ldr	r5, [pc, #44]	; (800c958 <__libc_init_array+0x40>)
 800c92a:	4c0c      	ldr	r4, [pc, #48]	; (800c95c <__libc_init_array+0x44>)
 800c92c:	f001 fabc 	bl	800dea8 <_init>
 800c930:	1b64      	subs	r4, r4, r5
 800c932:	10a4      	asrs	r4, r4, #2
 800c934:	2600      	movs	r6, #0
 800c936:	42a6      	cmp	r6, r4
 800c938:	d105      	bne.n	800c946 <__libc_init_array+0x2e>
 800c93a:	bd70      	pop	{r4, r5, r6, pc}
 800c93c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c940:	4798      	blx	r3
 800c942:	3601      	adds	r6, #1
 800c944:	e7ee      	b.n	800c924 <__libc_init_array+0xc>
 800c946:	f855 3b04 	ldr.w	r3, [r5], #4
 800c94a:	4798      	blx	r3
 800c94c:	3601      	adds	r6, #1
 800c94e:	e7f2      	b.n	800c936 <__libc_init_array+0x1e>
 800c950:	0800fd9c 	.word	0x0800fd9c
 800c954:	0800fd9c 	.word	0x0800fd9c
 800c958:	0800fd9c 	.word	0x0800fd9c
 800c95c:	0800fda0 	.word	0x0800fda0

0800c960 <malloc>:
 800c960:	4b02      	ldr	r3, [pc, #8]	; (800c96c <malloc+0xc>)
 800c962:	4601      	mov	r1, r0
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	f000 b885 	b.w	800ca74 <_malloc_r>
 800c96a:	bf00      	nop
 800c96c:	20000034 	.word	0x20000034

0800c970 <memcpy>:
 800c970:	440a      	add	r2, r1
 800c972:	4291      	cmp	r1, r2
 800c974:	f100 33ff 	add.w	r3, r0, #4294967295
 800c978:	d100      	bne.n	800c97c <memcpy+0xc>
 800c97a:	4770      	bx	lr
 800c97c:	b510      	push	{r4, lr}
 800c97e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c982:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c986:	4291      	cmp	r1, r2
 800c988:	d1f9      	bne.n	800c97e <memcpy+0xe>
 800c98a:	bd10      	pop	{r4, pc}

0800c98c <memset>:
 800c98c:	4402      	add	r2, r0
 800c98e:	4603      	mov	r3, r0
 800c990:	4293      	cmp	r3, r2
 800c992:	d100      	bne.n	800c996 <memset+0xa>
 800c994:	4770      	bx	lr
 800c996:	f803 1b01 	strb.w	r1, [r3], #1
 800c99a:	e7f9      	b.n	800c990 <memset+0x4>

0800c99c <_free_r>:
 800c99c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c99e:	2900      	cmp	r1, #0
 800c9a0:	d044      	beq.n	800ca2c <_free_r+0x90>
 800c9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9a6:	9001      	str	r0, [sp, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f1a1 0404 	sub.w	r4, r1, #4
 800c9ae:	bfb8      	it	lt
 800c9b0:	18e4      	addlt	r4, r4, r3
 800c9b2:	f000 fd49 	bl	800d448 <__malloc_lock>
 800c9b6:	4a1e      	ldr	r2, [pc, #120]	; (800ca30 <_free_r+0x94>)
 800c9b8:	9801      	ldr	r0, [sp, #4]
 800c9ba:	6813      	ldr	r3, [r2, #0]
 800c9bc:	b933      	cbnz	r3, 800c9cc <_free_r+0x30>
 800c9be:	6063      	str	r3, [r4, #4]
 800c9c0:	6014      	str	r4, [r2, #0]
 800c9c2:	b003      	add	sp, #12
 800c9c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9c8:	f000 bd44 	b.w	800d454 <__malloc_unlock>
 800c9cc:	42a3      	cmp	r3, r4
 800c9ce:	d908      	bls.n	800c9e2 <_free_r+0x46>
 800c9d0:	6825      	ldr	r5, [r4, #0]
 800c9d2:	1961      	adds	r1, r4, r5
 800c9d4:	428b      	cmp	r3, r1
 800c9d6:	bf01      	itttt	eq
 800c9d8:	6819      	ldreq	r1, [r3, #0]
 800c9da:	685b      	ldreq	r3, [r3, #4]
 800c9dc:	1949      	addeq	r1, r1, r5
 800c9de:	6021      	streq	r1, [r4, #0]
 800c9e0:	e7ed      	b.n	800c9be <_free_r+0x22>
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	b10b      	cbz	r3, 800c9ec <_free_r+0x50>
 800c9e8:	42a3      	cmp	r3, r4
 800c9ea:	d9fa      	bls.n	800c9e2 <_free_r+0x46>
 800c9ec:	6811      	ldr	r1, [r2, #0]
 800c9ee:	1855      	adds	r5, r2, r1
 800c9f0:	42a5      	cmp	r5, r4
 800c9f2:	d10b      	bne.n	800ca0c <_free_r+0x70>
 800c9f4:	6824      	ldr	r4, [r4, #0]
 800c9f6:	4421      	add	r1, r4
 800c9f8:	1854      	adds	r4, r2, r1
 800c9fa:	42a3      	cmp	r3, r4
 800c9fc:	6011      	str	r1, [r2, #0]
 800c9fe:	d1e0      	bne.n	800c9c2 <_free_r+0x26>
 800ca00:	681c      	ldr	r4, [r3, #0]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	6053      	str	r3, [r2, #4]
 800ca06:	4421      	add	r1, r4
 800ca08:	6011      	str	r1, [r2, #0]
 800ca0a:	e7da      	b.n	800c9c2 <_free_r+0x26>
 800ca0c:	d902      	bls.n	800ca14 <_free_r+0x78>
 800ca0e:	230c      	movs	r3, #12
 800ca10:	6003      	str	r3, [r0, #0]
 800ca12:	e7d6      	b.n	800c9c2 <_free_r+0x26>
 800ca14:	6825      	ldr	r5, [r4, #0]
 800ca16:	1961      	adds	r1, r4, r5
 800ca18:	428b      	cmp	r3, r1
 800ca1a:	bf04      	itt	eq
 800ca1c:	6819      	ldreq	r1, [r3, #0]
 800ca1e:	685b      	ldreq	r3, [r3, #4]
 800ca20:	6063      	str	r3, [r4, #4]
 800ca22:	bf04      	itt	eq
 800ca24:	1949      	addeq	r1, r1, r5
 800ca26:	6021      	streq	r1, [r4, #0]
 800ca28:	6054      	str	r4, [r2, #4]
 800ca2a:	e7ca      	b.n	800c9c2 <_free_r+0x26>
 800ca2c:	b003      	add	sp, #12
 800ca2e:	bd30      	pop	{r4, r5, pc}
 800ca30:	2000259c 	.word	0x2000259c

0800ca34 <sbrk_aligned>:
 800ca34:	b570      	push	{r4, r5, r6, lr}
 800ca36:	4e0e      	ldr	r6, [pc, #56]	; (800ca70 <sbrk_aligned+0x3c>)
 800ca38:	460c      	mov	r4, r1
 800ca3a:	6831      	ldr	r1, [r6, #0]
 800ca3c:	4605      	mov	r5, r0
 800ca3e:	b911      	cbnz	r1, 800ca46 <sbrk_aligned+0x12>
 800ca40:	f000 f930 	bl	800cca4 <_sbrk_r>
 800ca44:	6030      	str	r0, [r6, #0]
 800ca46:	4621      	mov	r1, r4
 800ca48:	4628      	mov	r0, r5
 800ca4a:	f000 f92b 	bl	800cca4 <_sbrk_r>
 800ca4e:	1c43      	adds	r3, r0, #1
 800ca50:	d00a      	beq.n	800ca68 <sbrk_aligned+0x34>
 800ca52:	1cc4      	adds	r4, r0, #3
 800ca54:	f024 0403 	bic.w	r4, r4, #3
 800ca58:	42a0      	cmp	r0, r4
 800ca5a:	d007      	beq.n	800ca6c <sbrk_aligned+0x38>
 800ca5c:	1a21      	subs	r1, r4, r0
 800ca5e:	4628      	mov	r0, r5
 800ca60:	f000 f920 	bl	800cca4 <_sbrk_r>
 800ca64:	3001      	adds	r0, #1
 800ca66:	d101      	bne.n	800ca6c <sbrk_aligned+0x38>
 800ca68:	f04f 34ff 	mov.w	r4, #4294967295
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	bd70      	pop	{r4, r5, r6, pc}
 800ca70:	200025a0 	.word	0x200025a0

0800ca74 <_malloc_r>:
 800ca74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca78:	1ccd      	adds	r5, r1, #3
 800ca7a:	f025 0503 	bic.w	r5, r5, #3
 800ca7e:	3508      	adds	r5, #8
 800ca80:	2d0c      	cmp	r5, #12
 800ca82:	bf38      	it	cc
 800ca84:	250c      	movcc	r5, #12
 800ca86:	2d00      	cmp	r5, #0
 800ca88:	4607      	mov	r7, r0
 800ca8a:	db01      	blt.n	800ca90 <_malloc_r+0x1c>
 800ca8c:	42a9      	cmp	r1, r5
 800ca8e:	d905      	bls.n	800ca9c <_malloc_r+0x28>
 800ca90:	230c      	movs	r3, #12
 800ca92:	603b      	str	r3, [r7, #0]
 800ca94:	2600      	movs	r6, #0
 800ca96:	4630      	mov	r0, r6
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9c:	4e2e      	ldr	r6, [pc, #184]	; (800cb58 <_malloc_r+0xe4>)
 800ca9e:	f000 fcd3 	bl	800d448 <__malloc_lock>
 800caa2:	6833      	ldr	r3, [r6, #0]
 800caa4:	461c      	mov	r4, r3
 800caa6:	bb34      	cbnz	r4, 800caf6 <_malloc_r+0x82>
 800caa8:	4629      	mov	r1, r5
 800caaa:	4638      	mov	r0, r7
 800caac:	f7ff ffc2 	bl	800ca34 <sbrk_aligned>
 800cab0:	1c43      	adds	r3, r0, #1
 800cab2:	4604      	mov	r4, r0
 800cab4:	d14d      	bne.n	800cb52 <_malloc_r+0xde>
 800cab6:	6834      	ldr	r4, [r6, #0]
 800cab8:	4626      	mov	r6, r4
 800caba:	2e00      	cmp	r6, #0
 800cabc:	d140      	bne.n	800cb40 <_malloc_r+0xcc>
 800cabe:	6823      	ldr	r3, [r4, #0]
 800cac0:	4631      	mov	r1, r6
 800cac2:	4638      	mov	r0, r7
 800cac4:	eb04 0803 	add.w	r8, r4, r3
 800cac8:	f000 f8ec 	bl	800cca4 <_sbrk_r>
 800cacc:	4580      	cmp	r8, r0
 800cace:	d13a      	bne.n	800cb46 <_malloc_r+0xd2>
 800cad0:	6821      	ldr	r1, [r4, #0]
 800cad2:	3503      	adds	r5, #3
 800cad4:	1a6d      	subs	r5, r5, r1
 800cad6:	f025 0503 	bic.w	r5, r5, #3
 800cada:	3508      	adds	r5, #8
 800cadc:	2d0c      	cmp	r5, #12
 800cade:	bf38      	it	cc
 800cae0:	250c      	movcc	r5, #12
 800cae2:	4629      	mov	r1, r5
 800cae4:	4638      	mov	r0, r7
 800cae6:	f7ff ffa5 	bl	800ca34 <sbrk_aligned>
 800caea:	3001      	adds	r0, #1
 800caec:	d02b      	beq.n	800cb46 <_malloc_r+0xd2>
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	442b      	add	r3, r5
 800caf2:	6023      	str	r3, [r4, #0]
 800caf4:	e00e      	b.n	800cb14 <_malloc_r+0xa0>
 800caf6:	6822      	ldr	r2, [r4, #0]
 800caf8:	1b52      	subs	r2, r2, r5
 800cafa:	d41e      	bmi.n	800cb3a <_malloc_r+0xc6>
 800cafc:	2a0b      	cmp	r2, #11
 800cafe:	d916      	bls.n	800cb2e <_malloc_r+0xba>
 800cb00:	1961      	adds	r1, r4, r5
 800cb02:	42a3      	cmp	r3, r4
 800cb04:	6025      	str	r5, [r4, #0]
 800cb06:	bf18      	it	ne
 800cb08:	6059      	strne	r1, [r3, #4]
 800cb0a:	6863      	ldr	r3, [r4, #4]
 800cb0c:	bf08      	it	eq
 800cb0e:	6031      	streq	r1, [r6, #0]
 800cb10:	5162      	str	r2, [r4, r5]
 800cb12:	604b      	str	r3, [r1, #4]
 800cb14:	4638      	mov	r0, r7
 800cb16:	f104 060b 	add.w	r6, r4, #11
 800cb1a:	f000 fc9b 	bl	800d454 <__malloc_unlock>
 800cb1e:	f026 0607 	bic.w	r6, r6, #7
 800cb22:	1d23      	adds	r3, r4, #4
 800cb24:	1af2      	subs	r2, r6, r3
 800cb26:	d0b6      	beq.n	800ca96 <_malloc_r+0x22>
 800cb28:	1b9b      	subs	r3, r3, r6
 800cb2a:	50a3      	str	r3, [r4, r2]
 800cb2c:	e7b3      	b.n	800ca96 <_malloc_r+0x22>
 800cb2e:	6862      	ldr	r2, [r4, #4]
 800cb30:	42a3      	cmp	r3, r4
 800cb32:	bf0c      	ite	eq
 800cb34:	6032      	streq	r2, [r6, #0]
 800cb36:	605a      	strne	r2, [r3, #4]
 800cb38:	e7ec      	b.n	800cb14 <_malloc_r+0xa0>
 800cb3a:	4623      	mov	r3, r4
 800cb3c:	6864      	ldr	r4, [r4, #4]
 800cb3e:	e7b2      	b.n	800caa6 <_malloc_r+0x32>
 800cb40:	4634      	mov	r4, r6
 800cb42:	6876      	ldr	r6, [r6, #4]
 800cb44:	e7b9      	b.n	800caba <_malloc_r+0x46>
 800cb46:	230c      	movs	r3, #12
 800cb48:	603b      	str	r3, [r7, #0]
 800cb4a:	4638      	mov	r0, r7
 800cb4c:	f000 fc82 	bl	800d454 <__malloc_unlock>
 800cb50:	e7a1      	b.n	800ca96 <_malloc_r+0x22>
 800cb52:	6025      	str	r5, [r4, #0]
 800cb54:	e7de      	b.n	800cb14 <_malloc_r+0xa0>
 800cb56:	bf00      	nop
 800cb58:	2000259c 	.word	0x2000259c

0800cb5c <iprintf>:
 800cb5c:	b40f      	push	{r0, r1, r2, r3}
 800cb5e:	4b0a      	ldr	r3, [pc, #40]	; (800cb88 <iprintf+0x2c>)
 800cb60:	b513      	push	{r0, r1, r4, lr}
 800cb62:	681c      	ldr	r4, [r3, #0]
 800cb64:	b124      	cbz	r4, 800cb70 <iprintf+0x14>
 800cb66:	69a3      	ldr	r3, [r4, #24]
 800cb68:	b913      	cbnz	r3, 800cb70 <iprintf+0x14>
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f000 fb54 	bl	800d218 <__sinit>
 800cb70:	ab05      	add	r3, sp, #20
 800cb72:	9a04      	ldr	r2, [sp, #16]
 800cb74:	68a1      	ldr	r1, [r4, #8]
 800cb76:	9301      	str	r3, [sp, #4]
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f000 fe25 	bl	800d7c8 <_vfiprintf_r>
 800cb7e:	b002      	add	sp, #8
 800cb80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb84:	b004      	add	sp, #16
 800cb86:	4770      	bx	lr
 800cb88:	20000034 	.word	0x20000034

0800cb8c <putchar>:
 800cb8c:	4b09      	ldr	r3, [pc, #36]	; (800cbb4 <putchar+0x28>)
 800cb8e:	b513      	push	{r0, r1, r4, lr}
 800cb90:	681c      	ldr	r4, [r3, #0]
 800cb92:	4601      	mov	r1, r0
 800cb94:	b134      	cbz	r4, 800cba4 <putchar+0x18>
 800cb96:	69a3      	ldr	r3, [r4, #24]
 800cb98:	b923      	cbnz	r3, 800cba4 <putchar+0x18>
 800cb9a:	9001      	str	r0, [sp, #4]
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f000 fb3b 	bl	800d218 <__sinit>
 800cba2:	9901      	ldr	r1, [sp, #4]
 800cba4:	68a2      	ldr	r2, [r4, #8]
 800cba6:	4620      	mov	r0, r4
 800cba8:	b002      	add	sp, #8
 800cbaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cbae:	f001 b8cf 	b.w	800dd50 <_putc_r>
 800cbb2:	bf00      	nop
 800cbb4:	20000034 	.word	0x20000034

0800cbb8 <_puts_r>:
 800cbb8:	b570      	push	{r4, r5, r6, lr}
 800cbba:	460e      	mov	r6, r1
 800cbbc:	4605      	mov	r5, r0
 800cbbe:	b118      	cbz	r0, 800cbc8 <_puts_r+0x10>
 800cbc0:	6983      	ldr	r3, [r0, #24]
 800cbc2:	b90b      	cbnz	r3, 800cbc8 <_puts_r+0x10>
 800cbc4:	f000 fb28 	bl	800d218 <__sinit>
 800cbc8:	69ab      	ldr	r3, [r5, #24]
 800cbca:	68ac      	ldr	r4, [r5, #8]
 800cbcc:	b913      	cbnz	r3, 800cbd4 <_puts_r+0x1c>
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f000 fb22 	bl	800d218 <__sinit>
 800cbd4:	4b2c      	ldr	r3, [pc, #176]	; (800cc88 <_puts_r+0xd0>)
 800cbd6:	429c      	cmp	r4, r3
 800cbd8:	d120      	bne.n	800cc1c <_puts_r+0x64>
 800cbda:	686c      	ldr	r4, [r5, #4]
 800cbdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbde:	07db      	lsls	r3, r3, #31
 800cbe0:	d405      	bmi.n	800cbee <_puts_r+0x36>
 800cbe2:	89a3      	ldrh	r3, [r4, #12]
 800cbe4:	0598      	lsls	r0, r3, #22
 800cbe6:	d402      	bmi.n	800cbee <_puts_r+0x36>
 800cbe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbea:	f000 fbb3 	bl	800d354 <__retarget_lock_acquire_recursive>
 800cbee:	89a3      	ldrh	r3, [r4, #12]
 800cbf0:	0719      	lsls	r1, r3, #28
 800cbf2:	d51d      	bpl.n	800cc30 <_puts_r+0x78>
 800cbf4:	6923      	ldr	r3, [r4, #16]
 800cbf6:	b1db      	cbz	r3, 800cc30 <_puts_r+0x78>
 800cbf8:	3e01      	subs	r6, #1
 800cbfa:	68a3      	ldr	r3, [r4, #8]
 800cbfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cc00:	3b01      	subs	r3, #1
 800cc02:	60a3      	str	r3, [r4, #8]
 800cc04:	bb39      	cbnz	r1, 800cc56 <_puts_r+0x9e>
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	da38      	bge.n	800cc7c <_puts_r+0xc4>
 800cc0a:	4622      	mov	r2, r4
 800cc0c:	210a      	movs	r1, #10
 800cc0e:	4628      	mov	r0, r5
 800cc10:	f000 f906 	bl	800ce20 <__swbuf_r>
 800cc14:	3001      	adds	r0, #1
 800cc16:	d011      	beq.n	800cc3c <_puts_r+0x84>
 800cc18:	250a      	movs	r5, #10
 800cc1a:	e011      	b.n	800cc40 <_puts_r+0x88>
 800cc1c:	4b1b      	ldr	r3, [pc, #108]	; (800cc8c <_puts_r+0xd4>)
 800cc1e:	429c      	cmp	r4, r3
 800cc20:	d101      	bne.n	800cc26 <_puts_r+0x6e>
 800cc22:	68ac      	ldr	r4, [r5, #8]
 800cc24:	e7da      	b.n	800cbdc <_puts_r+0x24>
 800cc26:	4b1a      	ldr	r3, [pc, #104]	; (800cc90 <_puts_r+0xd8>)
 800cc28:	429c      	cmp	r4, r3
 800cc2a:	bf08      	it	eq
 800cc2c:	68ec      	ldreq	r4, [r5, #12]
 800cc2e:	e7d5      	b.n	800cbdc <_puts_r+0x24>
 800cc30:	4621      	mov	r1, r4
 800cc32:	4628      	mov	r0, r5
 800cc34:	f000 f958 	bl	800cee8 <__swsetup_r>
 800cc38:	2800      	cmp	r0, #0
 800cc3a:	d0dd      	beq.n	800cbf8 <_puts_r+0x40>
 800cc3c:	f04f 35ff 	mov.w	r5, #4294967295
 800cc40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc42:	07da      	lsls	r2, r3, #31
 800cc44:	d405      	bmi.n	800cc52 <_puts_r+0x9a>
 800cc46:	89a3      	ldrh	r3, [r4, #12]
 800cc48:	059b      	lsls	r3, r3, #22
 800cc4a:	d402      	bmi.n	800cc52 <_puts_r+0x9a>
 800cc4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc4e:	f000 fb82 	bl	800d356 <__retarget_lock_release_recursive>
 800cc52:	4628      	mov	r0, r5
 800cc54:	bd70      	pop	{r4, r5, r6, pc}
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	da04      	bge.n	800cc64 <_puts_r+0xac>
 800cc5a:	69a2      	ldr	r2, [r4, #24]
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	dc06      	bgt.n	800cc6e <_puts_r+0xb6>
 800cc60:	290a      	cmp	r1, #10
 800cc62:	d004      	beq.n	800cc6e <_puts_r+0xb6>
 800cc64:	6823      	ldr	r3, [r4, #0]
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	6022      	str	r2, [r4, #0]
 800cc6a:	7019      	strb	r1, [r3, #0]
 800cc6c:	e7c5      	b.n	800cbfa <_puts_r+0x42>
 800cc6e:	4622      	mov	r2, r4
 800cc70:	4628      	mov	r0, r5
 800cc72:	f000 f8d5 	bl	800ce20 <__swbuf_r>
 800cc76:	3001      	adds	r0, #1
 800cc78:	d1bf      	bne.n	800cbfa <_puts_r+0x42>
 800cc7a:	e7df      	b.n	800cc3c <_puts_r+0x84>
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	250a      	movs	r5, #10
 800cc80:	1c5a      	adds	r2, r3, #1
 800cc82:	6022      	str	r2, [r4, #0]
 800cc84:	701d      	strb	r5, [r3, #0]
 800cc86:	e7db      	b.n	800cc40 <_puts_r+0x88>
 800cc88:	0800fd20 	.word	0x0800fd20
 800cc8c:	0800fd40 	.word	0x0800fd40
 800cc90:	0800fd00 	.word	0x0800fd00

0800cc94 <puts>:
 800cc94:	4b02      	ldr	r3, [pc, #8]	; (800cca0 <puts+0xc>)
 800cc96:	4601      	mov	r1, r0
 800cc98:	6818      	ldr	r0, [r3, #0]
 800cc9a:	f7ff bf8d 	b.w	800cbb8 <_puts_r>
 800cc9e:	bf00      	nop
 800cca0:	20000034 	.word	0x20000034

0800cca4 <_sbrk_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d06      	ldr	r5, [pc, #24]	; (800ccc0 <_sbrk_r+0x1c>)
 800cca8:	2300      	movs	r3, #0
 800ccaa:	4604      	mov	r4, r0
 800ccac:	4608      	mov	r0, r1
 800ccae:	602b      	str	r3, [r5, #0]
 800ccb0:	f7f5 ff32 	bl	8002b18 <_sbrk>
 800ccb4:	1c43      	adds	r3, r0, #1
 800ccb6:	d102      	bne.n	800ccbe <_sbrk_r+0x1a>
 800ccb8:	682b      	ldr	r3, [r5, #0]
 800ccba:	b103      	cbz	r3, 800ccbe <_sbrk_r+0x1a>
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	bd38      	pop	{r3, r4, r5, pc}
 800ccc0:	200025a8 	.word	0x200025a8

0800ccc4 <siprintf>:
 800ccc4:	b40e      	push	{r1, r2, r3}
 800ccc6:	b500      	push	{lr}
 800ccc8:	b09c      	sub	sp, #112	; 0x70
 800ccca:	ab1d      	add	r3, sp, #116	; 0x74
 800cccc:	9002      	str	r0, [sp, #8]
 800ccce:	9006      	str	r0, [sp, #24]
 800ccd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ccd4:	4809      	ldr	r0, [pc, #36]	; (800ccfc <siprintf+0x38>)
 800ccd6:	9107      	str	r1, [sp, #28]
 800ccd8:	9104      	str	r1, [sp, #16]
 800ccda:	4909      	ldr	r1, [pc, #36]	; (800cd00 <siprintf+0x3c>)
 800ccdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cce0:	9105      	str	r1, [sp, #20]
 800cce2:	6800      	ldr	r0, [r0, #0]
 800cce4:	9301      	str	r3, [sp, #4]
 800cce6:	a902      	add	r1, sp, #8
 800cce8:	f000 fc44 	bl	800d574 <_svfiprintf_r>
 800ccec:	9b02      	ldr	r3, [sp, #8]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	701a      	strb	r2, [r3, #0]
 800ccf2:	b01c      	add	sp, #112	; 0x70
 800ccf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccf8:	b003      	add	sp, #12
 800ccfa:	4770      	bx	lr
 800ccfc:	20000034 	.word	0x20000034
 800cd00:	ffff0208 	.word	0xffff0208

0800cd04 <__sread>:
 800cd04:	b510      	push	{r4, lr}
 800cd06:	460c      	mov	r4, r1
 800cd08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd0c:	f001 f868 	bl	800dde0 <_read_r>
 800cd10:	2800      	cmp	r0, #0
 800cd12:	bfab      	itete	ge
 800cd14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd16:	89a3      	ldrhlt	r3, [r4, #12]
 800cd18:	181b      	addge	r3, r3, r0
 800cd1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd1e:	bfac      	ite	ge
 800cd20:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd22:	81a3      	strhlt	r3, [r4, #12]
 800cd24:	bd10      	pop	{r4, pc}

0800cd26 <__swrite>:
 800cd26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd2a:	461f      	mov	r7, r3
 800cd2c:	898b      	ldrh	r3, [r1, #12]
 800cd2e:	05db      	lsls	r3, r3, #23
 800cd30:	4605      	mov	r5, r0
 800cd32:	460c      	mov	r4, r1
 800cd34:	4616      	mov	r6, r2
 800cd36:	d505      	bpl.n	800cd44 <__swrite+0x1e>
 800cd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd3c:	2302      	movs	r3, #2
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f000 fb0a 	bl	800d358 <_lseek_r>
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd4e:	81a3      	strh	r3, [r4, #12]
 800cd50:	4632      	mov	r2, r6
 800cd52:	463b      	mov	r3, r7
 800cd54:	4628      	mov	r0, r5
 800cd56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5a:	f000 b8b3 	b.w	800cec4 <_write_r>

0800cd5e <__sseek>:
 800cd5e:	b510      	push	{r4, lr}
 800cd60:	460c      	mov	r4, r1
 800cd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd66:	f000 faf7 	bl	800d358 <_lseek_r>
 800cd6a:	1c43      	adds	r3, r0, #1
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	bf15      	itete	ne
 800cd70:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd7a:	81a3      	strheq	r3, [r4, #12]
 800cd7c:	bf18      	it	ne
 800cd7e:	81a3      	strhne	r3, [r4, #12]
 800cd80:	bd10      	pop	{r4, pc}

0800cd82 <__sclose>:
 800cd82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd86:	f000 b91d 	b.w	800cfc4 <_close_r>

0800cd8a <strrchr>:
 800cd8a:	b538      	push	{r3, r4, r5, lr}
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	460c      	mov	r4, r1
 800cd90:	b969      	cbnz	r1, 800cdae <strrchr+0x24>
 800cd92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd96:	f001 b835 	b.w	800de04 <strchr>
 800cd9a:	1c43      	adds	r3, r0, #1
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4618      	mov	r0, r3
 800cda2:	f001 f82f 	bl	800de04 <strchr>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	d1f7      	bne.n	800cd9a <strrchr+0x10>
 800cdaa:	4628      	mov	r0, r5
 800cdac:	bd38      	pop	{r3, r4, r5, pc}
 800cdae:	2500      	movs	r5, #0
 800cdb0:	e7f5      	b.n	800cd9e <strrchr+0x14>

0800cdb2 <strstr>:
 800cdb2:	780a      	ldrb	r2, [r1, #0]
 800cdb4:	b570      	push	{r4, r5, r6, lr}
 800cdb6:	b96a      	cbnz	r2, 800cdd4 <strstr+0x22>
 800cdb8:	bd70      	pop	{r4, r5, r6, pc}
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d109      	bne.n	800cdd2 <strstr+0x20>
 800cdbe:	460c      	mov	r4, r1
 800cdc0:	4605      	mov	r5, r0
 800cdc2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d0f6      	beq.n	800cdb8 <strstr+0x6>
 800cdca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cdce:	429e      	cmp	r6, r3
 800cdd0:	d0f7      	beq.n	800cdc2 <strstr+0x10>
 800cdd2:	3001      	adds	r0, #1
 800cdd4:	7803      	ldrb	r3, [r0, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d1ef      	bne.n	800cdba <strstr+0x8>
 800cdda:	4618      	mov	r0, r3
 800cddc:	e7ec      	b.n	800cdb8 <strstr+0x6>
	...

0800cde0 <_vsiprintf_r>:
 800cde0:	b500      	push	{lr}
 800cde2:	b09b      	sub	sp, #108	; 0x6c
 800cde4:	9100      	str	r1, [sp, #0]
 800cde6:	9104      	str	r1, [sp, #16]
 800cde8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cdec:	9105      	str	r1, [sp, #20]
 800cdee:	9102      	str	r1, [sp, #8]
 800cdf0:	4905      	ldr	r1, [pc, #20]	; (800ce08 <_vsiprintf_r+0x28>)
 800cdf2:	9103      	str	r1, [sp, #12]
 800cdf4:	4669      	mov	r1, sp
 800cdf6:	f000 fbbd 	bl	800d574 <_svfiprintf_r>
 800cdfa:	9b00      	ldr	r3, [sp, #0]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	701a      	strb	r2, [r3, #0]
 800ce00:	b01b      	add	sp, #108	; 0x6c
 800ce02:	f85d fb04 	ldr.w	pc, [sp], #4
 800ce06:	bf00      	nop
 800ce08:	ffff0208 	.word	0xffff0208

0800ce0c <vsiprintf>:
 800ce0c:	4613      	mov	r3, r2
 800ce0e:	460a      	mov	r2, r1
 800ce10:	4601      	mov	r1, r0
 800ce12:	4802      	ldr	r0, [pc, #8]	; (800ce1c <vsiprintf+0x10>)
 800ce14:	6800      	ldr	r0, [r0, #0]
 800ce16:	f7ff bfe3 	b.w	800cde0 <_vsiprintf_r>
 800ce1a:	bf00      	nop
 800ce1c:	20000034 	.word	0x20000034

0800ce20 <__swbuf_r>:
 800ce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce22:	460e      	mov	r6, r1
 800ce24:	4614      	mov	r4, r2
 800ce26:	4605      	mov	r5, r0
 800ce28:	b118      	cbz	r0, 800ce32 <__swbuf_r+0x12>
 800ce2a:	6983      	ldr	r3, [r0, #24]
 800ce2c:	b90b      	cbnz	r3, 800ce32 <__swbuf_r+0x12>
 800ce2e:	f000 f9f3 	bl	800d218 <__sinit>
 800ce32:	4b21      	ldr	r3, [pc, #132]	; (800ceb8 <__swbuf_r+0x98>)
 800ce34:	429c      	cmp	r4, r3
 800ce36:	d12b      	bne.n	800ce90 <__swbuf_r+0x70>
 800ce38:	686c      	ldr	r4, [r5, #4]
 800ce3a:	69a3      	ldr	r3, [r4, #24]
 800ce3c:	60a3      	str	r3, [r4, #8]
 800ce3e:	89a3      	ldrh	r3, [r4, #12]
 800ce40:	071a      	lsls	r2, r3, #28
 800ce42:	d52f      	bpl.n	800cea4 <__swbuf_r+0x84>
 800ce44:	6923      	ldr	r3, [r4, #16]
 800ce46:	b36b      	cbz	r3, 800cea4 <__swbuf_r+0x84>
 800ce48:	6923      	ldr	r3, [r4, #16]
 800ce4a:	6820      	ldr	r0, [r4, #0]
 800ce4c:	1ac0      	subs	r0, r0, r3
 800ce4e:	6963      	ldr	r3, [r4, #20]
 800ce50:	b2f6      	uxtb	r6, r6
 800ce52:	4283      	cmp	r3, r0
 800ce54:	4637      	mov	r7, r6
 800ce56:	dc04      	bgt.n	800ce62 <__swbuf_r+0x42>
 800ce58:	4621      	mov	r1, r4
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	f000 f948 	bl	800d0f0 <_fflush_r>
 800ce60:	bb30      	cbnz	r0, 800ceb0 <__swbuf_r+0x90>
 800ce62:	68a3      	ldr	r3, [r4, #8]
 800ce64:	3b01      	subs	r3, #1
 800ce66:	60a3      	str	r3, [r4, #8]
 800ce68:	6823      	ldr	r3, [r4, #0]
 800ce6a:	1c5a      	adds	r2, r3, #1
 800ce6c:	6022      	str	r2, [r4, #0]
 800ce6e:	701e      	strb	r6, [r3, #0]
 800ce70:	6963      	ldr	r3, [r4, #20]
 800ce72:	3001      	adds	r0, #1
 800ce74:	4283      	cmp	r3, r0
 800ce76:	d004      	beq.n	800ce82 <__swbuf_r+0x62>
 800ce78:	89a3      	ldrh	r3, [r4, #12]
 800ce7a:	07db      	lsls	r3, r3, #31
 800ce7c:	d506      	bpl.n	800ce8c <__swbuf_r+0x6c>
 800ce7e:	2e0a      	cmp	r6, #10
 800ce80:	d104      	bne.n	800ce8c <__swbuf_r+0x6c>
 800ce82:	4621      	mov	r1, r4
 800ce84:	4628      	mov	r0, r5
 800ce86:	f000 f933 	bl	800d0f0 <_fflush_r>
 800ce8a:	b988      	cbnz	r0, 800ceb0 <__swbuf_r+0x90>
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce90:	4b0a      	ldr	r3, [pc, #40]	; (800cebc <__swbuf_r+0x9c>)
 800ce92:	429c      	cmp	r4, r3
 800ce94:	d101      	bne.n	800ce9a <__swbuf_r+0x7a>
 800ce96:	68ac      	ldr	r4, [r5, #8]
 800ce98:	e7cf      	b.n	800ce3a <__swbuf_r+0x1a>
 800ce9a:	4b09      	ldr	r3, [pc, #36]	; (800cec0 <__swbuf_r+0xa0>)
 800ce9c:	429c      	cmp	r4, r3
 800ce9e:	bf08      	it	eq
 800cea0:	68ec      	ldreq	r4, [r5, #12]
 800cea2:	e7ca      	b.n	800ce3a <__swbuf_r+0x1a>
 800cea4:	4621      	mov	r1, r4
 800cea6:	4628      	mov	r0, r5
 800cea8:	f000 f81e 	bl	800cee8 <__swsetup_r>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d0cb      	beq.n	800ce48 <__swbuf_r+0x28>
 800ceb0:	f04f 37ff 	mov.w	r7, #4294967295
 800ceb4:	e7ea      	b.n	800ce8c <__swbuf_r+0x6c>
 800ceb6:	bf00      	nop
 800ceb8:	0800fd20 	.word	0x0800fd20
 800cebc:	0800fd40 	.word	0x0800fd40
 800cec0:	0800fd00 	.word	0x0800fd00

0800cec4 <_write_r>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4d07      	ldr	r5, [pc, #28]	; (800cee4 <_write_r+0x20>)
 800cec8:	4604      	mov	r4, r0
 800ceca:	4608      	mov	r0, r1
 800cecc:	4611      	mov	r1, r2
 800cece:	2200      	movs	r2, #0
 800ced0:	602a      	str	r2, [r5, #0]
 800ced2:	461a      	mov	r2, r3
 800ced4:	f7f5 fb5d 	bl	8002592 <_write>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d102      	bne.n	800cee2 <_write_r+0x1e>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	b103      	cbz	r3, 800cee2 <_write_r+0x1e>
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	bd38      	pop	{r3, r4, r5, pc}
 800cee4:	200025a8 	.word	0x200025a8

0800cee8 <__swsetup_r>:
 800cee8:	4b32      	ldr	r3, [pc, #200]	; (800cfb4 <__swsetup_r+0xcc>)
 800ceea:	b570      	push	{r4, r5, r6, lr}
 800ceec:	681d      	ldr	r5, [r3, #0]
 800ceee:	4606      	mov	r6, r0
 800cef0:	460c      	mov	r4, r1
 800cef2:	b125      	cbz	r5, 800cefe <__swsetup_r+0x16>
 800cef4:	69ab      	ldr	r3, [r5, #24]
 800cef6:	b913      	cbnz	r3, 800cefe <__swsetup_r+0x16>
 800cef8:	4628      	mov	r0, r5
 800cefa:	f000 f98d 	bl	800d218 <__sinit>
 800cefe:	4b2e      	ldr	r3, [pc, #184]	; (800cfb8 <__swsetup_r+0xd0>)
 800cf00:	429c      	cmp	r4, r3
 800cf02:	d10f      	bne.n	800cf24 <__swsetup_r+0x3c>
 800cf04:	686c      	ldr	r4, [r5, #4]
 800cf06:	89a3      	ldrh	r3, [r4, #12]
 800cf08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf0c:	0719      	lsls	r1, r3, #28
 800cf0e:	d42c      	bmi.n	800cf6a <__swsetup_r+0x82>
 800cf10:	06dd      	lsls	r5, r3, #27
 800cf12:	d411      	bmi.n	800cf38 <__swsetup_r+0x50>
 800cf14:	2309      	movs	r3, #9
 800cf16:	6033      	str	r3, [r6, #0]
 800cf18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf1c:	81a3      	strh	r3, [r4, #12]
 800cf1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf22:	e03e      	b.n	800cfa2 <__swsetup_r+0xba>
 800cf24:	4b25      	ldr	r3, [pc, #148]	; (800cfbc <__swsetup_r+0xd4>)
 800cf26:	429c      	cmp	r4, r3
 800cf28:	d101      	bne.n	800cf2e <__swsetup_r+0x46>
 800cf2a:	68ac      	ldr	r4, [r5, #8]
 800cf2c:	e7eb      	b.n	800cf06 <__swsetup_r+0x1e>
 800cf2e:	4b24      	ldr	r3, [pc, #144]	; (800cfc0 <__swsetup_r+0xd8>)
 800cf30:	429c      	cmp	r4, r3
 800cf32:	bf08      	it	eq
 800cf34:	68ec      	ldreq	r4, [r5, #12]
 800cf36:	e7e6      	b.n	800cf06 <__swsetup_r+0x1e>
 800cf38:	0758      	lsls	r0, r3, #29
 800cf3a:	d512      	bpl.n	800cf62 <__swsetup_r+0x7a>
 800cf3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf3e:	b141      	cbz	r1, 800cf52 <__swsetup_r+0x6a>
 800cf40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf44:	4299      	cmp	r1, r3
 800cf46:	d002      	beq.n	800cf4e <__swsetup_r+0x66>
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f7ff fd27 	bl	800c99c <_free_r>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	6363      	str	r3, [r4, #52]	; 0x34
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf58:	81a3      	strh	r3, [r4, #12]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6063      	str	r3, [r4, #4]
 800cf5e:	6923      	ldr	r3, [r4, #16]
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	f043 0308 	orr.w	r3, r3, #8
 800cf68:	81a3      	strh	r3, [r4, #12]
 800cf6a:	6923      	ldr	r3, [r4, #16]
 800cf6c:	b94b      	cbnz	r3, 800cf82 <__swsetup_r+0x9a>
 800cf6e:	89a3      	ldrh	r3, [r4, #12]
 800cf70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf78:	d003      	beq.n	800cf82 <__swsetup_r+0x9a>
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f000 fa23 	bl	800d3c8 <__smakebuf_r>
 800cf82:	89a0      	ldrh	r0, [r4, #12]
 800cf84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf88:	f010 0301 	ands.w	r3, r0, #1
 800cf8c:	d00a      	beq.n	800cfa4 <__swsetup_r+0xbc>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	60a3      	str	r3, [r4, #8]
 800cf92:	6963      	ldr	r3, [r4, #20]
 800cf94:	425b      	negs	r3, r3
 800cf96:	61a3      	str	r3, [r4, #24]
 800cf98:	6923      	ldr	r3, [r4, #16]
 800cf9a:	b943      	cbnz	r3, 800cfae <__swsetup_r+0xc6>
 800cf9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cfa0:	d1ba      	bne.n	800cf18 <__swsetup_r+0x30>
 800cfa2:	bd70      	pop	{r4, r5, r6, pc}
 800cfa4:	0781      	lsls	r1, r0, #30
 800cfa6:	bf58      	it	pl
 800cfa8:	6963      	ldrpl	r3, [r4, #20]
 800cfaa:	60a3      	str	r3, [r4, #8]
 800cfac:	e7f4      	b.n	800cf98 <__swsetup_r+0xb0>
 800cfae:	2000      	movs	r0, #0
 800cfb0:	e7f7      	b.n	800cfa2 <__swsetup_r+0xba>
 800cfb2:	bf00      	nop
 800cfb4:	20000034 	.word	0x20000034
 800cfb8:	0800fd20 	.word	0x0800fd20
 800cfbc:	0800fd40 	.word	0x0800fd40
 800cfc0:	0800fd00 	.word	0x0800fd00

0800cfc4 <_close_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d06      	ldr	r5, [pc, #24]	; (800cfe0 <_close_r+0x1c>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	f7f5 fd6d 	bl	8002aae <_close>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_close_r+0x1a>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_close_r+0x1a>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	200025a8 	.word	0x200025a8

0800cfe4 <__sflush_r>:
 800cfe4:	898a      	ldrh	r2, [r1, #12]
 800cfe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfea:	4605      	mov	r5, r0
 800cfec:	0710      	lsls	r0, r2, #28
 800cfee:	460c      	mov	r4, r1
 800cff0:	d458      	bmi.n	800d0a4 <__sflush_r+0xc0>
 800cff2:	684b      	ldr	r3, [r1, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	dc05      	bgt.n	800d004 <__sflush_r+0x20>
 800cff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	dc02      	bgt.n	800d004 <__sflush_r+0x20>
 800cffe:	2000      	movs	r0, #0
 800d000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d006:	2e00      	cmp	r6, #0
 800d008:	d0f9      	beq.n	800cffe <__sflush_r+0x1a>
 800d00a:	2300      	movs	r3, #0
 800d00c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d010:	682f      	ldr	r7, [r5, #0]
 800d012:	602b      	str	r3, [r5, #0]
 800d014:	d032      	beq.n	800d07c <__sflush_r+0x98>
 800d016:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d018:	89a3      	ldrh	r3, [r4, #12]
 800d01a:	075a      	lsls	r2, r3, #29
 800d01c:	d505      	bpl.n	800d02a <__sflush_r+0x46>
 800d01e:	6863      	ldr	r3, [r4, #4]
 800d020:	1ac0      	subs	r0, r0, r3
 800d022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d024:	b10b      	cbz	r3, 800d02a <__sflush_r+0x46>
 800d026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d028:	1ac0      	subs	r0, r0, r3
 800d02a:	2300      	movs	r3, #0
 800d02c:	4602      	mov	r2, r0
 800d02e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d030:	6a21      	ldr	r1, [r4, #32]
 800d032:	4628      	mov	r0, r5
 800d034:	47b0      	blx	r6
 800d036:	1c43      	adds	r3, r0, #1
 800d038:	89a3      	ldrh	r3, [r4, #12]
 800d03a:	d106      	bne.n	800d04a <__sflush_r+0x66>
 800d03c:	6829      	ldr	r1, [r5, #0]
 800d03e:	291d      	cmp	r1, #29
 800d040:	d82c      	bhi.n	800d09c <__sflush_r+0xb8>
 800d042:	4a2a      	ldr	r2, [pc, #168]	; (800d0ec <__sflush_r+0x108>)
 800d044:	40ca      	lsrs	r2, r1
 800d046:	07d6      	lsls	r6, r2, #31
 800d048:	d528      	bpl.n	800d09c <__sflush_r+0xb8>
 800d04a:	2200      	movs	r2, #0
 800d04c:	6062      	str	r2, [r4, #4]
 800d04e:	04d9      	lsls	r1, r3, #19
 800d050:	6922      	ldr	r2, [r4, #16]
 800d052:	6022      	str	r2, [r4, #0]
 800d054:	d504      	bpl.n	800d060 <__sflush_r+0x7c>
 800d056:	1c42      	adds	r2, r0, #1
 800d058:	d101      	bne.n	800d05e <__sflush_r+0x7a>
 800d05a:	682b      	ldr	r3, [r5, #0]
 800d05c:	b903      	cbnz	r3, 800d060 <__sflush_r+0x7c>
 800d05e:	6560      	str	r0, [r4, #84]	; 0x54
 800d060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d062:	602f      	str	r7, [r5, #0]
 800d064:	2900      	cmp	r1, #0
 800d066:	d0ca      	beq.n	800cffe <__sflush_r+0x1a>
 800d068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d06c:	4299      	cmp	r1, r3
 800d06e:	d002      	beq.n	800d076 <__sflush_r+0x92>
 800d070:	4628      	mov	r0, r5
 800d072:	f7ff fc93 	bl	800c99c <_free_r>
 800d076:	2000      	movs	r0, #0
 800d078:	6360      	str	r0, [r4, #52]	; 0x34
 800d07a:	e7c1      	b.n	800d000 <__sflush_r+0x1c>
 800d07c:	6a21      	ldr	r1, [r4, #32]
 800d07e:	2301      	movs	r3, #1
 800d080:	4628      	mov	r0, r5
 800d082:	47b0      	blx	r6
 800d084:	1c41      	adds	r1, r0, #1
 800d086:	d1c7      	bne.n	800d018 <__sflush_r+0x34>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d0c4      	beq.n	800d018 <__sflush_r+0x34>
 800d08e:	2b1d      	cmp	r3, #29
 800d090:	d001      	beq.n	800d096 <__sflush_r+0xb2>
 800d092:	2b16      	cmp	r3, #22
 800d094:	d101      	bne.n	800d09a <__sflush_r+0xb6>
 800d096:	602f      	str	r7, [r5, #0]
 800d098:	e7b1      	b.n	800cffe <__sflush_r+0x1a>
 800d09a:	89a3      	ldrh	r3, [r4, #12]
 800d09c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	e7ad      	b.n	800d000 <__sflush_r+0x1c>
 800d0a4:	690f      	ldr	r7, [r1, #16]
 800d0a6:	2f00      	cmp	r7, #0
 800d0a8:	d0a9      	beq.n	800cffe <__sflush_r+0x1a>
 800d0aa:	0793      	lsls	r3, r2, #30
 800d0ac:	680e      	ldr	r6, [r1, #0]
 800d0ae:	bf08      	it	eq
 800d0b0:	694b      	ldreq	r3, [r1, #20]
 800d0b2:	600f      	str	r7, [r1, #0]
 800d0b4:	bf18      	it	ne
 800d0b6:	2300      	movne	r3, #0
 800d0b8:	eba6 0807 	sub.w	r8, r6, r7
 800d0bc:	608b      	str	r3, [r1, #8]
 800d0be:	f1b8 0f00 	cmp.w	r8, #0
 800d0c2:	dd9c      	ble.n	800cffe <__sflush_r+0x1a>
 800d0c4:	6a21      	ldr	r1, [r4, #32]
 800d0c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0c8:	4643      	mov	r3, r8
 800d0ca:	463a      	mov	r2, r7
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	47b0      	blx	r6
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	dc06      	bgt.n	800d0e2 <__sflush_r+0xfe>
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0da:	81a3      	strh	r3, [r4, #12]
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e0:	e78e      	b.n	800d000 <__sflush_r+0x1c>
 800d0e2:	4407      	add	r7, r0
 800d0e4:	eba8 0800 	sub.w	r8, r8, r0
 800d0e8:	e7e9      	b.n	800d0be <__sflush_r+0xda>
 800d0ea:	bf00      	nop
 800d0ec:	20400001 	.word	0x20400001

0800d0f0 <_fflush_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	690b      	ldr	r3, [r1, #16]
 800d0f4:	4605      	mov	r5, r0
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	b913      	cbnz	r3, 800d100 <_fflush_r+0x10>
 800d0fa:	2500      	movs	r5, #0
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	b118      	cbz	r0, 800d10a <_fflush_r+0x1a>
 800d102:	6983      	ldr	r3, [r0, #24]
 800d104:	b90b      	cbnz	r3, 800d10a <_fflush_r+0x1a>
 800d106:	f000 f887 	bl	800d218 <__sinit>
 800d10a:	4b14      	ldr	r3, [pc, #80]	; (800d15c <_fflush_r+0x6c>)
 800d10c:	429c      	cmp	r4, r3
 800d10e:	d11b      	bne.n	800d148 <_fflush_r+0x58>
 800d110:	686c      	ldr	r4, [r5, #4]
 800d112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d0ef      	beq.n	800d0fa <_fflush_r+0xa>
 800d11a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d11c:	07d0      	lsls	r0, r2, #31
 800d11e:	d404      	bmi.n	800d12a <_fflush_r+0x3a>
 800d120:	0599      	lsls	r1, r3, #22
 800d122:	d402      	bmi.n	800d12a <_fflush_r+0x3a>
 800d124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d126:	f000 f915 	bl	800d354 <__retarget_lock_acquire_recursive>
 800d12a:	4628      	mov	r0, r5
 800d12c:	4621      	mov	r1, r4
 800d12e:	f7ff ff59 	bl	800cfe4 <__sflush_r>
 800d132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d134:	07da      	lsls	r2, r3, #31
 800d136:	4605      	mov	r5, r0
 800d138:	d4e0      	bmi.n	800d0fc <_fflush_r+0xc>
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	059b      	lsls	r3, r3, #22
 800d13e:	d4dd      	bmi.n	800d0fc <_fflush_r+0xc>
 800d140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d142:	f000 f908 	bl	800d356 <__retarget_lock_release_recursive>
 800d146:	e7d9      	b.n	800d0fc <_fflush_r+0xc>
 800d148:	4b05      	ldr	r3, [pc, #20]	; (800d160 <_fflush_r+0x70>)
 800d14a:	429c      	cmp	r4, r3
 800d14c:	d101      	bne.n	800d152 <_fflush_r+0x62>
 800d14e:	68ac      	ldr	r4, [r5, #8]
 800d150:	e7df      	b.n	800d112 <_fflush_r+0x22>
 800d152:	4b04      	ldr	r3, [pc, #16]	; (800d164 <_fflush_r+0x74>)
 800d154:	429c      	cmp	r4, r3
 800d156:	bf08      	it	eq
 800d158:	68ec      	ldreq	r4, [r5, #12]
 800d15a:	e7da      	b.n	800d112 <_fflush_r+0x22>
 800d15c:	0800fd20 	.word	0x0800fd20
 800d160:	0800fd40 	.word	0x0800fd40
 800d164:	0800fd00 	.word	0x0800fd00

0800d168 <std>:
 800d168:	2300      	movs	r3, #0
 800d16a:	b510      	push	{r4, lr}
 800d16c:	4604      	mov	r4, r0
 800d16e:	e9c0 3300 	strd	r3, r3, [r0]
 800d172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d176:	6083      	str	r3, [r0, #8]
 800d178:	8181      	strh	r1, [r0, #12]
 800d17a:	6643      	str	r3, [r0, #100]	; 0x64
 800d17c:	81c2      	strh	r2, [r0, #14]
 800d17e:	6183      	str	r3, [r0, #24]
 800d180:	4619      	mov	r1, r3
 800d182:	2208      	movs	r2, #8
 800d184:	305c      	adds	r0, #92	; 0x5c
 800d186:	f7ff fc01 	bl	800c98c <memset>
 800d18a:	4b05      	ldr	r3, [pc, #20]	; (800d1a0 <std+0x38>)
 800d18c:	6263      	str	r3, [r4, #36]	; 0x24
 800d18e:	4b05      	ldr	r3, [pc, #20]	; (800d1a4 <std+0x3c>)
 800d190:	62a3      	str	r3, [r4, #40]	; 0x28
 800d192:	4b05      	ldr	r3, [pc, #20]	; (800d1a8 <std+0x40>)
 800d194:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d196:	4b05      	ldr	r3, [pc, #20]	; (800d1ac <std+0x44>)
 800d198:	6224      	str	r4, [r4, #32]
 800d19a:	6323      	str	r3, [r4, #48]	; 0x30
 800d19c:	bd10      	pop	{r4, pc}
 800d19e:	bf00      	nop
 800d1a0:	0800cd05 	.word	0x0800cd05
 800d1a4:	0800cd27 	.word	0x0800cd27
 800d1a8:	0800cd5f 	.word	0x0800cd5f
 800d1ac:	0800cd83 	.word	0x0800cd83

0800d1b0 <_cleanup_r>:
 800d1b0:	4901      	ldr	r1, [pc, #4]	; (800d1b8 <_cleanup_r+0x8>)
 800d1b2:	f000 b8af 	b.w	800d314 <_fwalk_reent>
 800d1b6:	bf00      	nop
 800d1b8:	0800d0f1 	.word	0x0800d0f1

0800d1bc <__sfmoreglue>:
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	2268      	movs	r2, #104	; 0x68
 800d1c0:	1e4d      	subs	r5, r1, #1
 800d1c2:	4355      	muls	r5, r2
 800d1c4:	460e      	mov	r6, r1
 800d1c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d1ca:	f7ff fc53 	bl	800ca74 <_malloc_r>
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	b140      	cbz	r0, 800d1e4 <__sfmoreglue+0x28>
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	e9c0 1600 	strd	r1, r6, [r0]
 800d1d8:	300c      	adds	r0, #12
 800d1da:	60a0      	str	r0, [r4, #8]
 800d1dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d1e0:	f7ff fbd4 	bl	800c98c <memset>
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	bd70      	pop	{r4, r5, r6, pc}

0800d1e8 <__sfp_lock_acquire>:
 800d1e8:	4801      	ldr	r0, [pc, #4]	; (800d1f0 <__sfp_lock_acquire+0x8>)
 800d1ea:	f000 b8b3 	b.w	800d354 <__retarget_lock_acquire_recursive>
 800d1ee:	bf00      	nop
 800d1f0:	200025a5 	.word	0x200025a5

0800d1f4 <__sfp_lock_release>:
 800d1f4:	4801      	ldr	r0, [pc, #4]	; (800d1fc <__sfp_lock_release+0x8>)
 800d1f6:	f000 b8ae 	b.w	800d356 <__retarget_lock_release_recursive>
 800d1fa:	bf00      	nop
 800d1fc:	200025a5 	.word	0x200025a5

0800d200 <__sinit_lock_acquire>:
 800d200:	4801      	ldr	r0, [pc, #4]	; (800d208 <__sinit_lock_acquire+0x8>)
 800d202:	f000 b8a7 	b.w	800d354 <__retarget_lock_acquire_recursive>
 800d206:	bf00      	nop
 800d208:	200025a6 	.word	0x200025a6

0800d20c <__sinit_lock_release>:
 800d20c:	4801      	ldr	r0, [pc, #4]	; (800d214 <__sinit_lock_release+0x8>)
 800d20e:	f000 b8a2 	b.w	800d356 <__retarget_lock_release_recursive>
 800d212:	bf00      	nop
 800d214:	200025a6 	.word	0x200025a6

0800d218 <__sinit>:
 800d218:	b510      	push	{r4, lr}
 800d21a:	4604      	mov	r4, r0
 800d21c:	f7ff fff0 	bl	800d200 <__sinit_lock_acquire>
 800d220:	69a3      	ldr	r3, [r4, #24]
 800d222:	b11b      	cbz	r3, 800d22c <__sinit+0x14>
 800d224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d228:	f7ff bff0 	b.w	800d20c <__sinit_lock_release>
 800d22c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d230:	6523      	str	r3, [r4, #80]	; 0x50
 800d232:	4b13      	ldr	r3, [pc, #76]	; (800d280 <__sinit+0x68>)
 800d234:	4a13      	ldr	r2, [pc, #76]	; (800d284 <__sinit+0x6c>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	62a2      	str	r2, [r4, #40]	; 0x28
 800d23a:	42a3      	cmp	r3, r4
 800d23c:	bf04      	itt	eq
 800d23e:	2301      	moveq	r3, #1
 800d240:	61a3      	streq	r3, [r4, #24]
 800d242:	4620      	mov	r0, r4
 800d244:	f000 f820 	bl	800d288 <__sfp>
 800d248:	6060      	str	r0, [r4, #4]
 800d24a:	4620      	mov	r0, r4
 800d24c:	f000 f81c 	bl	800d288 <__sfp>
 800d250:	60a0      	str	r0, [r4, #8]
 800d252:	4620      	mov	r0, r4
 800d254:	f000 f818 	bl	800d288 <__sfp>
 800d258:	2200      	movs	r2, #0
 800d25a:	60e0      	str	r0, [r4, #12]
 800d25c:	2104      	movs	r1, #4
 800d25e:	6860      	ldr	r0, [r4, #4]
 800d260:	f7ff ff82 	bl	800d168 <std>
 800d264:	68a0      	ldr	r0, [r4, #8]
 800d266:	2201      	movs	r2, #1
 800d268:	2109      	movs	r1, #9
 800d26a:	f7ff ff7d 	bl	800d168 <std>
 800d26e:	68e0      	ldr	r0, [r4, #12]
 800d270:	2202      	movs	r2, #2
 800d272:	2112      	movs	r1, #18
 800d274:	f7ff ff78 	bl	800d168 <std>
 800d278:	2301      	movs	r3, #1
 800d27a:	61a3      	str	r3, [r4, #24]
 800d27c:	e7d2      	b.n	800d224 <__sinit+0xc>
 800d27e:	bf00      	nop
 800d280:	0800fcfc 	.word	0x0800fcfc
 800d284:	0800d1b1 	.word	0x0800d1b1

0800d288 <__sfp>:
 800d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28a:	4607      	mov	r7, r0
 800d28c:	f7ff ffac 	bl	800d1e8 <__sfp_lock_acquire>
 800d290:	4b1e      	ldr	r3, [pc, #120]	; (800d30c <__sfp+0x84>)
 800d292:	681e      	ldr	r6, [r3, #0]
 800d294:	69b3      	ldr	r3, [r6, #24]
 800d296:	b913      	cbnz	r3, 800d29e <__sfp+0x16>
 800d298:	4630      	mov	r0, r6
 800d29a:	f7ff ffbd 	bl	800d218 <__sinit>
 800d29e:	3648      	adds	r6, #72	; 0x48
 800d2a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	d503      	bpl.n	800d2b0 <__sfp+0x28>
 800d2a8:	6833      	ldr	r3, [r6, #0]
 800d2aa:	b30b      	cbz	r3, 800d2f0 <__sfp+0x68>
 800d2ac:	6836      	ldr	r6, [r6, #0]
 800d2ae:	e7f7      	b.n	800d2a0 <__sfp+0x18>
 800d2b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d2b4:	b9d5      	cbnz	r5, 800d2ec <__sfp+0x64>
 800d2b6:	4b16      	ldr	r3, [pc, #88]	; (800d310 <__sfp+0x88>)
 800d2b8:	60e3      	str	r3, [r4, #12]
 800d2ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d2be:	6665      	str	r5, [r4, #100]	; 0x64
 800d2c0:	f000 f847 	bl	800d352 <__retarget_lock_init_recursive>
 800d2c4:	f7ff ff96 	bl	800d1f4 <__sfp_lock_release>
 800d2c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d2cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d2d0:	6025      	str	r5, [r4, #0]
 800d2d2:	61a5      	str	r5, [r4, #24]
 800d2d4:	2208      	movs	r2, #8
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d2dc:	f7ff fb56 	bl	800c98c <memset>
 800d2e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d2e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2ec:	3468      	adds	r4, #104	; 0x68
 800d2ee:	e7d9      	b.n	800d2a4 <__sfp+0x1c>
 800d2f0:	2104      	movs	r1, #4
 800d2f2:	4638      	mov	r0, r7
 800d2f4:	f7ff ff62 	bl	800d1bc <__sfmoreglue>
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	6030      	str	r0, [r6, #0]
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d1d5      	bne.n	800d2ac <__sfp+0x24>
 800d300:	f7ff ff78 	bl	800d1f4 <__sfp_lock_release>
 800d304:	230c      	movs	r3, #12
 800d306:	603b      	str	r3, [r7, #0]
 800d308:	e7ee      	b.n	800d2e8 <__sfp+0x60>
 800d30a:	bf00      	nop
 800d30c:	0800fcfc 	.word	0x0800fcfc
 800d310:	ffff0001 	.word	0xffff0001

0800d314 <_fwalk_reent>:
 800d314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d318:	4606      	mov	r6, r0
 800d31a:	4688      	mov	r8, r1
 800d31c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d320:	2700      	movs	r7, #0
 800d322:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d326:	f1b9 0901 	subs.w	r9, r9, #1
 800d32a:	d505      	bpl.n	800d338 <_fwalk_reent+0x24>
 800d32c:	6824      	ldr	r4, [r4, #0]
 800d32e:	2c00      	cmp	r4, #0
 800d330:	d1f7      	bne.n	800d322 <_fwalk_reent+0xe>
 800d332:	4638      	mov	r0, r7
 800d334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d338:	89ab      	ldrh	r3, [r5, #12]
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d907      	bls.n	800d34e <_fwalk_reent+0x3a>
 800d33e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d342:	3301      	adds	r3, #1
 800d344:	d003      	beq.n	800d34e <_fwalk_reent+0x3a>
 800d346:	4629      	mov	r1, r5
 800d348:	4630      	mov	r0, r6
 800d34a:	47c0      	blx	r8
 800d34c:	4307      	orrs	r7, r0
 800d34e:	3568      	adds	r5, #104	; 0x68
 800d350:	e7e9      	b.n	800d326 <_fwalk_reent+0x12>

0800d352 <__retarget_lock_init_recursive>:
 800d352:	4770      	bx	lr

0800d354 <__retarget_lock_acquire_recursive>:
 800d354:	4770      	bx	lr

0800d356 <__retarget_lock_release_recursive>:
 800d356:	4770      	bx	lr

0800d358 <_lseek_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4d07      	ldr	r5, [pc, #28]	; (800d378 <_lseek_r+0x20>)
 800d35c:	4604      	mov	r4, r0
 800d35e:	4608      	mov	r0, r1
 800d360:	4611      	mov	r1, r2
 800d362:	2200      	movs	r2, #0
 800d364:	602a      	str	r2, [r5, #0]
 800d366:	461a      	mov	r2, r3
 800d368:	f7f5 fbc8 	bl	8002afc <_lseek>
 800d36c:	1c43      	adds	r3, r0, #1
 800d36e:	d102      	bne.n	800d376 <_lseek_r+0x1e>
 800d370:	682b      	ldr	r3, [r5, #0]
 800d372:	b103      	cbz	r3, 800d376 <_lseek_r+0x1e>
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	bd38      	pop	{r3, r4, r5, pc}
 800d378:	200025a8 	.word	0x200025a8

0800d37c <__swhatbuf_r>:
 800d37c:	b570      	push	{r4, r5, r6, lr}
 800d37e:	460e      	mov	r6, r1
 800d380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d384:	2900      	cmp	r1, #0
 800d386:	b096      	sub	sp, #88	; 0x58
 800d388:	4614      	mov	r4, r2
 800d38a:	461d      	mov	r5, r3
 800d38c:	da08      	bge.n	800d3a0 <__swhatbuf_r+0x24>
 800d38e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d392:	2200      	movs	r2, #0
 800d394:	602a      	str	r2, [r5, #0]
 800d396:	061a      	lsls	r2, r3, #24
 800d398:	d410      	bmi.n	800d3bc <__swhatbuf_r+0x40>
 800d39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d39e:	e00e      	b.n	800d3be <__swhatbuf_r+0x42>
 800d3a0:	466a      	mov	r2, sp
 800d3a2:	f000 fd3d 	bl	800de20 <_fstat_r>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	dbf1      	blt.n	800d38e <__swhatbuf_r+0x12>
 800d3aa:	9a01      	ldr	r2, [sp, #4]
 800d3ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3b4:	425a      	negs	r2, r3
 800d3b6:	415a      	adcs	r2, r3
 800d3b8:	602a      	str	r2, [r5, #0]
 800d3ba:	e7ee      	b.n	800d39a <__swhatbuf_r+0x1e>
 800d3bc:	2340      	movs	r3, #64	; 0x40
 800d3be:	2000      	movs	r0, #0
 800d3c0:	6023      	str	r3, [r4, #0]
 800d3c2:	b016      	add	sp, #88	; 0x58
 800d3c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d3c8 <__smakebuf_r>:
 800d3c8:	898b      	ldrh	r3, [r1, #12]
 800d3ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3cc:	079d      	lsls	r5, r3, #30
 800d3ce:	4606      	mov	r6, r0
 800d3d0:	460c      	mov	r4, r1
 800d3d2:	d507      	bpl.n	800d3e4 <__smakebuf_r+0x1c>
 800d3d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	6123      	str	r3, [r4, #16]
 800d3dc:	2301      	movs	r3, #1
 800d3de:	6163      	str	r3, [r4, #20]
 800d3e0:	b002      	add	sp, #8
 800d3e2:	bd70      	pop	{r4, r5, r6, pc}
 800d3e4:	ab01      	add	r3, sp, #4
 800d3e6:	466a      	mov	r2, sp
 800d3e8:	f7ff ffc8 	bl	800d37c <__swhatbuf_r>
 800d3ec:	9900      	ldr	r1, [sp, #0]
 800d3ee:	4605      	mov	r5, r0
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	f7ff fb3f 	bl	800ca74 <_malloc_r>
 800d3f6:	b948      	cbnz	r0, 800d40c <__smakebuf_r+0x44>
 800d3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3fc:	059a      	lsls	r2, r3, #22
 800d3fe:	d4ef      	bmi.n	800d3e0 <__smakebuf_r+0x18>
 800d400:	f023 0303 	bic.w	r3, r3, #3
 800d404:	f043 0302 	orr.w	r3, r3, #2
 800d408:	81a3      	strh	r3, [r4, #12]
 800d40a:	e7e3      	b.n	800d3d4 <__smakebuf_r+0xc>
 800d40c:	4b0d      	ldr	r3, [pc, #52]	; (800d444 <__smakebuf_r+0x7c>)
 800d40e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d410:	89a3      	ldrh	r3, [r4, #12]
 800d412:	6020      	str	r0, [r4, #0]
 800d414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d418:	81a3      	strh	r3, [r4, #12]
 800d41a:	9b00      	ldr	r3, [sp, #0]
 800d41c:	6163      	str	r3, [r4, #20]
 800d41e:	9b01      	ldr	r3, [sp, #4]
 800d420:	6120      	str	r0, [r4, #16]
 800d422:	b15b      	cbz	r3, 800d43c <__smakebuf_r+0x74>
 800d424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d428:	4630      	mov	r0, r6
 800d42a:	f000 fd0b 	bl	800de44 <_isatty_r>
 800d42e:	b128      	cbz	r0, 800d43c <__smakebuf_r+0x74>
 800d430:	89a3      	ldrh	r3, [r4, #12]
 800d432:	f023 0303 	bic.w	r3, r3, #3
 800d436:	f043 0301 	orr.w	r3, r3, #1
 800d43a:	81a3      	strh	r3, [r4, #12]
 800d43c:	89a0      	ldrh	r0, [r4, #12]
 800d43e:	4305      	orrs	r5, r0
 800d440:	81a5      	strh	r5, [r4, #12]
 800d442:	e7cd      	b.n	800d3e0 <__smakebuf_r+0x18>
 800d444:	0800d1b1 	.word	0x0800d1b1

0800d448 <__malloc_lock>:
 800d448:	4801      	ldr	r0, [pc, #4]	; (800d450 <__malloc_lock+0x8>)
 800d44a:	f7ff bf83 	b.w	800d354 <__retarget_lock_acquire_recursive>
 800d44e:	bf00      	nop
 800d450:	200025a4 	.word	0x200025a4

0800d454 <__malloc_unlock>:
 800d454:	4801      	ldr	r0, [pc, #4]	; (800d45c <__malloc_unlock+0x8>)
 800d456:	f7ff bf7e 	b.w	800d356 <__retarget_lock_release_recursive>
 800d45a:	bf00      	nop
 800d45c:	200025a4 	.word	0x200025a4

0800d460 <_realloc_r>:
 800d460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d464:	4680      	mov	r8, r0
 800d466:	4614      	mov	r4, r2
 800d468:	460e      	mov	r6, r1
 800d46a:	b921      	cbnz	r1, 800d476 <_realloc_r+0x16>
 800d46c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d470:	4611      	mov	r1, r2
 800d472:	f7ff baff 	b.w	800ca74 <_malloc_r>
 800d476:	b92a      	cbnz	r2, 800d484 <_realloc_r+0x24>
 800d478:	f7ff fa90 	bl	800c99c <_free_r>
 800d47c:	4625      	mov	r5, r4
 800d47e:	4628      	mov	r0, r5
 800d480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d484:	f000 fd08 	bl	800de98 <_malloc_usable_size_r>
 800d488:	4284      	cmp	r4, r0
 800d48a:	4607      	mov	r7, r0
 800d48c:	d802      	bhi.n	800d494 <_realloc_r+0x34>
 800d48e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d492:	d812      	bhi.n	800d4ba <_realloc_r+0x5a>
 800d494:	4621      	mov	r1, r4
 800d496:	4640      	mov	r0, r8
 800d498:	f7ff faec 	bl	800ca74 <_malloc_r>
 800d49c:	4605      	mov	r5, r0
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d0ed      	beq.n	800d47e <_realloc_r+0x1e>
 800d4a2:	42bc      	cmp	r4, r7
 800d4a4:	4622      	mov	r2, r4
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	bf28      	it	cs
 800d4aa:	463a      	movcs	r2, r7
 800d4ac:	f7ff fa60 	bl	800c970 <memcpy>
 800d4b0:	4631      	mov	r1, r6
 800d4b2:	4640      	mov	r0, r8
 800d4b4:	f7ff fa72 	bl	800c99c <_free_r>
 800d4b8:	e7e1      	b.n	800d47e <_realloc_r+0x1e>
 800d4ba:	4635      	mov	r5, r6
 800d4bc:	e7df      	b.n	800d47e <_realloc_r+0x1e>

0800d4be <__ssputs_r>:
 800d4be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4c2:	688e      	ldr	r6, [r1, #8]
 800d4c4:	429e      	cmp	r6, r3
 800d4c6:	4682      	mov	sl, r0
 800d4c8:	460c      	mov	r4, r1
 800d4ca:	4690      	mov	r8, r2
 800d4cc:	461f      	mov	r7, r3
 800d4ce:	d838      	bhi.n	800d542 <__ssputs_r+0x84>
 800d4d0:	898a      	ldrh	r2, [r1, #12]
 800d4d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d4d6:	d032      	beq.n	800d53e <__ssputs_r+0x80>
 800d4d8:	6825      	ldr	r5, [r4, #0]
 800d4da:	6909      	ldr	r1, [r1, #16]
 800d4dc:	eba5 0901 	sub.w	r9, r5, r1
 800d4e0:	6965      	ldr	r5, [r4, #20]
 800d4e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	444b      	add	r3, r9
 800d4ee:	106d      	asrs	r5, r5, #1
 800d4f0:	429d      	cmp	r5, r3
 800d4f2:	bf38      	it	cc
 800d4f4:	461d      	movcc	r5, r3
 800d4f6:	0553      	lsls	r3, r2, #21
 800d4f8:	d531      	bpl.n	800d55e <__ssputs_r+0xa0>
 800d4fa:	4629      	mov	r1, r5
 800d4fc:	f7ff faba 	bl	800ca74 <_malloc_r>
 800d500:	4606      	mov	r6, r0
 800d502:	b950      	cbnz	r0, 800d51a <__ssputs_r+0x5c>
 800d504:	230c      	movs	r3, #12
 800d506:	f8ca 3000 	str.w	r3, [sl]
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d510:	81a3      	strh	r3, [r4, #12]
 800d512:	f04f 30ff 	mov.w	r0, #4294967295
 800d516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d51a:	6921      	ldr	r1, [r4, #16]
 800d51c:	464a      	mov	r2, r9
 800d51e:	f7ff fa27 	bl	800c970 <memcpy>
 800d522:	89a3      	ldrh	r3, [r4, #12]
 800d524:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d52c:	81a3      	strh	r3, [r4, #12]
 800d52e:	6126      	str	r6, [r4, #16]
 800d530:	6165      	str	r5, [r4, #20]
 800d532:	444e      	add	r6, r9
 800d534:	eba5 0509 	sub.w	r5, r5, r9
 800d538:	6026      	str	r6, [r4, #0]
 800d53a:	60a5      	str	r5, [r4, #8]
 800d53c:	463e      	mov	r6, r7
 800d53e:	42be      	cmp	r6, r7
 800d540:	d900      	bls.n	800d544 <__ssputs_r+0x86>
 800d542:	463e      	mov	r6, r7
 800d544:	6820      	ldr	r0, [r4, #0]
 800d546:	4632      	mov	r2, r6
 800d548:	4641      	mov	r1, r8
 800d54a:	f000 fc8b 	bl	800de64 <memmove>
 800d54e:	68a3      	ldr	r3, [r4, #8]
 800d550:	1b9b      	subs	r3, r3, r6
 800d552:	60a3      	str	r3, [r4, #8]
 800d554:	6823      	ldr	r3, [r4, #0]
 800d556:	4433      	add	r3, r6
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	2000      	movs	r0, #0
 800d55c:	e7db      	b.n	800d516 <__ssputs_r+0x58>
 800d55e:	462a      	mov	r2, r5
 800d560:	f7ff ff7e 	bl	800d460 <_realloc_r>
 800d564:	4606      	mov	r6, r0
 800d566:	2800      	cmp	r0, #0
 800d568:	d1e1      	bne.n	800d52e <__ssputs_r+0x70>
 800d56a:	6921      	ldr	r1, [r4, #16]
 800d56c:	4650      	mov	r0, sl
 800d56e:	f7ff fa15 	bl	800c99c <_free_r>
 800d572:	e7c7      	b.n	800d504 <__ssputs_r+0x46>

0800d574 <_svfiprintf_r>:
 800d574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	4698      	mov	r8, r3
 800d57a:	898b      	ldrh	r3, [r1, #12]
 800d57c:	061b      	lsls	r3, r3, #24
 800d57e:	b09d      	sub	sp, #116	; 0x74
 800d580:	4607      	mov	r7, r0
 800d582:	460d      	mov	r5, r1
 800d584:	4614      	mov	r4, r2
 800d586:	d50e      	bpl.n	800d5a6 <_svfiprintf_r+0x32>
 800d588:	690b      	ldr	r3, [r1, #16]
 800d58a:	b963      	cbnz	r3, 800d5a6 <_svfiprintf_r+0x32>
 800d58c:	2140      	movs	r1, #64	; 0x40
 800d58e:	f7ff fa71 	bl	800ca74 <_malloc_r>
 800d592:	6028      	str	r0, [r5, #0]
 800d594:	6128      	str	r0, [r5, #16]
 800d596:	b920      	cbnz	r0, 800d5a2 <_svfiprintf_r+0x2e>
 800d598:	230c      	movs	r3, #12
 800d59a:	603b      	str	r3, [r7, #0]
 800d59c:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a0:	e0d1      	b.n	800d746 <_svfiprintf_r+0x1d2>
 800d5a2:	2340      	movs	r3, #64	; 0x40
 800d5a4:	616b      	str	r3, [r5, #20]
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d5aa:	2320      	movs	r3, #32
 800d5ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5b4:	2330      	movs	r3, #48	; 0x30
 800d5b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d760 <_svfiprintf_r+0x1ec>
 800d5ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5be:	f04f 0901 	mov.w	r9, #1
 800d5c2:	4623      	mov	r3, r4
 800d5c4:	469a      	mov	sl, r3
 800d5c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5ca:	b10a      	cbz	r2, 800d5d0 <_svfiprintf_r+0x5c>
 800d5cc:	2a25      	cmp	r2, #37	; 0x25
 800d5ce:	d1f9      	bne.n	800d5c4 <_svfiprintf_r+0x50>
 800d5d0:	ebba 0b04 	subs.w	fp, sl, r4
 800d5d4:	d00b      	beq.n	800d5ee <_svfiprintf_r+0x7a>
 800d5d6:	465b      	mov	r3, fp
 800d5d8:	4622      	mov	r2, r4
 800d5da:	4629      	mov	r1, r5
 800d5dc:	4638      	mov	r0, r7
 800d5de:	f7ff ff6e 	bl	800d4be <__ssputs_r>
 800d5e2:	3001      	adds	r0, #1
 800d5e4:	f000 80aa 	beq.w	800d73c <_svfiprintf_r+0x1c8>
 800d5e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d5ea:	445a      	add	r2, fp
 800d5ec:	9209      	str	r2, [sp, #36]	; 0x24
 800d5ee:	f89a 3000 	ldrb.w	r3, [sl]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f000 80a2 	beq.w	800d73c <_svfiprintf_r+0x1c8>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d5fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d602:	f10a 0a01 	add.w	sl, sl, #1
 800d606:	9304      	str	r3, [sp, #16]
 800d608:	9307      	str	r3, [sp, #28]
 800d60a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d60e:	931a      	str	r3, [sp, #104]	; 0x68
 800d610:	4654      	mov	r4, sl
 800d612:	2205      	movs	r2, #5
 800d614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d618:	4851      	ldr	r0, [pc, #324]	; (800d760 <_svfiprintf_r+0x1ec>)
 800d61a:	f7f2 fdb9 	bl	8000190 <memchr>
 800d61e:	9a04      	ldr	r2, [sp, #16]
 800d620:	b9d8      	cbnz	r0, 800d65a <_svfiprintf_r+0xe6>
 800d622:	06d0      	lsls	r0, r2, #27
 800d624:	bf44      	itt	mi
 800d626:	2320      	movmi	r3, #32
 800d628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d62c:	0711      	lsls	r1, r2, #28
 800d62e:	bf44      	itt	mi
 800d630:	232b      	movmi	r3, #43	; 0x2b
 800d632:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d636:	f89a 3000 	ldrb.w	r3, [sl]
 800d63a:	2b2a      	cmp	r3, #42	; 0x2a
 800d63c:	d015      	beq.n	800d66a <_svfiprintf_r+0xf6>
 800d63e:	9a07      	ldr	r2, [sp, #28]
 800d640:	4654      	mov	r4, sl
 800d642:	2000      	movs	r0, #0
 800d644:	f04f 0c0a 	mov.w	ip, #10
 800d648:	4621      	mov	r1, r4
 800d64a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d64e:	3b30      	subs	r3, #48	; 0x30
 800d650:	2b09      	cmp	r3, #9
 800d652:	d94e      	bls.n	800d6f2 <_svfiprintf_r+0x17e>
 800d654:	b1b0      	cbz	r0, 800d684 <_svfiprintf_r+0x110>
 800d656:	9207      	str	r2, [sp, #28]
 800d658:	e014      	b.n	800d684 <_svfiprintf_r+0x110>
 800d65a:	eba0 0308 	sub.w	r3, r0, r8
 800d65e:	fa09 f303 	lsl.w	r3, r9, r3
 800d662:	4313      	orrs	r3, r2
 800d664:	9304      	str	r3, [sp, #16]
 800d666:	46a2      	mov	sl, r4
 800d668:	e7d2      	b.n	800d610 <_svfiprintf_r+0x9c>
 800d66a:	9b03      	ldr	r3, [sp, #12]
 800d66c:	1d19      	adds	r1, r3, #4
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	9103      	str	r1, [sp, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	bfbb      	ittet	lt
 800d676:	425b      	neglt	r3, r3
 800d678:	f042 0202 	orrlt.w	r2, r2, #2
 800d67c:	9307      	strge	r3, [sp, #28]
 800d67e:	9307      	strlt	r3, [sp, #28]
 800d680:	bfb8      	it	lt
 800d682:	9204      	strlt	r2, [sp, #16]
 800d684:	7823      	ldrb	r3, [r4, #0]
 800d686:	2b2e      	cmp	r3, #46	; 0x2e
 800d688:	d10c      	bne.n	800d6a4 <_svfiprintf_r+0x130>
 800d68a:	7863      	ldrb	r3, [r4, #1]
 800d68c:	2b2a      	cmp	r3, #42	; 0x2a
 800d68e:	d135      	bne.n	800d6fc <_svfiprintf_r+0x188>
 800d690:	9b03      	ldr	r3, [sp, #12]
 800d692:	1d1a      	adds	r2, r3, #4
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	9203      	str	r2, [sp, #12]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	bfb8      	it	lt
 800d69c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6a0:	3402      	adds	r4, #2
 800d6a2:	9305      	str	r3, [sp, #20]
 800d6a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d770 <_svfiprintf_r+0x1fc>
 800d6a8:	7821      	ldrb	r1, [r4, #0]
 800d6aa:	2203      	movs	r2, #3
 800d6ac:	4650      	mov	r0, sl
 800d6ae:	f7f2 fd6f 	bl	8000190 <memchr>
 800d6b2:	b140      	cbz	r0, 800d6c6 <_svfiprintf_r+0x152>
 800d6b4:	2340      	movs	r3, #64	; 0x40
 800d6b6:	eba0 000a 	sub.w	r0, r0, sl
 800d6ba:	fa03 f000 	lsl.w	r0, r3, r0
 800d6be:	9b04      	ldr	r3, [sp, #16]
 800d6c0:	4303      	orrs	r3, r0
 800d6c2:	3401      	adds	r4, #1
 800d6c4:	9304      	str	r3, [sp, #16]
 800d6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ca:	4826      	ldr	r0, [pc, #152]	; (800d764 <_svfiprintf_r+0x1f0>)
 800d6cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6d0:	2206      	movs	r2, #6
 800d6d2:	f7f2 fd5d 	bl	8000190 <memchr>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d038      	beq.n	800d74c <_svfiprintf_r+0x1d8>
 800d6da:	4b23      	ldr	r3, [pc, #140]	; (800d768 <_svfiprintf_r+0x1f4>)
 800d6dc:	bb1b      	cbnz	r3, 800d726 <_svfiprintf_r+0x1b2>
 800d6de:	9b03      	ldr	r3, [sp, #12]
 800d6e0:	3307      	adds	r3, #7
 800d6e2:	f023 0307 	bic.w	r3, r3, #7
 800d6e6:	3308      	adds	r3, #8
 800d6e8:	9303      	str	r3, [sp, #12]
 800d6ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ec:	4433      	add	r3, r6
 800d6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800d6f0:	e767      	b.n	800d5c2 <_svfiprintf_r+0x4e>
 800d6f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6f6:	460c      	mov	r4, r1
 800d6f8:	2001      	movs	r0, #1
 800d6fa:	e7a5      	b.n	800d648 <_svfiprintf_r+0xd4>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	3401      	adds	r4, #1
 800d700:	9305      	str	r3, [sp, #20]
 800d702:	4619      	mov	r1, r3
 800d704:	f04f 0c0a 	mov.w	ip, #10
 800d708:	4620      	mov	r0, r4
 800d70a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d70e:	3a30      	subs	r2, #48	; 0x30
 800d710:	2a09      	cmp	r2, #9
 800d712:	d903      	bls.n	800d71c <_svfiprintf_r+0x1a8>
 800d714:	2b00      	cmp	r3, #0
 800d716:	d0c5      	beq.n	800d6a4 <_svfiprintf_r+0x130>
 800d718:	9105      	str	r1, [sp, #20]
 800d71a:	e7c3      	b.n	800d6a4 <_svfiprintf_r+0x130>
 800d71c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d720:	4604      	mov	r4, r0
 800d722:	2301      	movs	r3, #1
 800d724:	e7f0      	b.n	800d708 <_svfiprintf_r+0x194>
 800d726:	ab03      	add	r3, sp, #12
 800d728:	9300      	str	r3, [sp, #0]
 800d72a:	462a      	mov	r2, r5
 800d72c:	4b0f      	ldr	r3, [pc, #60]	; (800d76c <_svfiprintf_r+0x1f8>)
 800d72e:	a904      	add	r1, sp, #16
 800d730:	4638      	mov	r0, r7
 800d732:	f3af 8000 	nop.w
 800d736:	1c42      	adds	r2, r0, #1
 800d738:	4606      	mov	r6, r0
 800d73a:	d1d6      	bne.n	800d6ea <_svfiprintf_r+0x176>
 800d73c:	89ab      	ldrh	r3, [r5, #12]
 800d73e:	065b      	lsls	r3, r3, #25
 800d740:	f53f af2c 	bmi.w	800d59c <_svfiprintf_r+0x28>
 800d744:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d746:	b01d      	add	sp, #116	; 0x74
 800d748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d74c:	ab03      	add	r3, sp, #12
 800d74e:	9300      	str	r3, [sp, #0]
 800d750:	462a      	mov	r2, r5
 800d752:	4b06      	ldr	r3, [pc, #24]	; (800d76c <_svfiprintf_r+0x1f8>)
 800d754:	a904      	add	r1, sp, #16
 800d756:	4638      	mov	r0, r7
 800d758:	f000 f9d4 	bl	800db04 <_printf_i>
 800d75c:	e7eb      	b.n	800d736 <_svfiprintf_r+0x1c2>
 800d75e:	bf00      	nop
 800d760:	0800fd60 	.word	0x0800fd60
 800d764:	0800fd6a 	.word	0x0800fd6a
 800d768:	00000000 	.word	0x00000000
 800d76c:	0800d4bf 	.word	0x0800d4bf
 800d770:	0800fd66 	.word	0x0800fd66

0800d774 <__sfputc_r>:
 800d774:	6893      	ldr	r3, [r2, #8]
 800d776:	3b01      	subs	r3, #1
 800d778:	2b00      	cmp	r3, #0
 800d77a:	b410      	push	{r4}
 800d77c:	6093      	str	r3, [r2, #8]
 800d77e:	da08      	bge.n	800d792 <__sfputc_r+0x1e>
 800d780:	6994      	ldr	r4, [r2, #24]
 800d782:	42a3      	cmp	r3, r4
 800d784:	db01      	blt.n	800d78a <__sfputc_r+0x16>
 800d786:	290a      	cmp	r1, #10
 800d788:	d103      	bne.n	800d792 <__sfputc_r+0x1e>
 800d78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d78e:	f7ff bb47 	b.w	800ce20 <__swbuf_r>
 800d792:	6813      	ldr	r3, [r2, #0]
 800d794:	1c58      	adds	r0, r3, #1
 800d796:	6010      	str	r0, [r2, #0]
 800d798:	7019      	strb	r1, [r3, #0]
 800d79a:	4608      	mov	r0, r1
 800d79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <__sfputs_r>:
 800d7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7a4:	4606      	mov	r6, r0
 800d7a6:	460f      	mov	r7, r1
 800d7a8:	4614      	mov	r4, r2
 800d7aa:	18d5      	adds	r5, r2, r3
 800d7ac:	42ac      	cmp	r4, r5
 800d7ae:	d101      	bne.n	800d7b4 <__sfputs_r+0x12>
 800d7b0:	2000      	movs	r0, #0
 800d7b2:	e007      	b.n	800d7c4 <__sfputs_r+0x22>
 800d7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7b8:	463a      	mov	r2, r7
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f7ff ffda 	bl	800d774 <__sfputc_r>
 800d7c0:	1c43      	adds	r3, r0, #1
 800d7c2:	d1f3      	bne.n	800d7ac <__sfputs_r+0xa>
 800d7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7c8 <_vfiprintf_r>:
 800d7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7cc:	460d      	mov	r5, r1
 800d7ce:	b09d      	sub	sp, #116	; 0x74
 800d7d0:	4614      	mov	r4, r2
 800d7d2:	4698      	mov	r8, r3
 800d7d4:	4606      	mov	r6, r0
 800d7d6:	b118      	cbz	r0, 800d7e0 <_vfiprintf_r+0x18>
 800d7d8:	6983      	ldr	r3, [r0, #24]
 800d7da:	b90b      	cbnz	r3, 800d7e0 <_vfiprintf_r+0x18>
 800d7dc:	f7ff fd1c 	bl	800d218 <__sinit>
 800d7e0:	4b89      	ldr	r3, [pc, #548]	; (800da08 <_vfiprintf_r+0x240>)
 800d7e2:	429d      	cmp	r5, r3
 800d7e4:	d11b      	bne.n	800d81e <_vfiprintf_r+0x56>
 800d7e6:	6875      	ldr	r5, [r6, #4]
 800d7e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d7ea:	07d9      	lsls	r1, r3, #31
 800d7ec:	d405      	bmi.n	800d7fa <_vfiprintf_r+0x32>
 800d7ee:	89ab      	ldrh	r3, [r5, #12]
 800d7f0:	059a      	lsls	r2, r3, #22
 800d7f2:	d402      	bmi.n	800d7fa <_vfiprintf_r+0x32>
 800d7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d7f6:	f7ff fdad 	bl	800d354 <__retarget_lock_acquire_recursive>
 800d7fa:	89ab      	ldrh	r3, [r5, #12]
 800d7fc:	071b      	lsls	r3, r3, #28
 800d7fe:	d501      	bpl.n	800d804 <_vfiprintf_r+0x3c>
 800d800:	692b      	ldr	r3, [r5, #16]
 800d802:	b9eb      	cbnz	r3, 800d840 <_vfiprintf_r+0x78>
 800d804:	4629      	mov	r1, r5
 800d806:	4630      	mov	r0, r6
 800d808:	f7ff fb6e 	bl	800cee8 <__swsetup_r>
 800d80c:	b1c0      	cbz	r0, 800d840 <_vfiprintf_r+0x78>
 800d80e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d810:	07dc      	lsls	r4, r3, #31
 800d812:	d50e      	bpl.n	800d832 <_vfiprintf_r+0x6a>
 800d814:	f04f 30ff 	mov.w	r0, #4294967295
 800d818:	b01d      	add	sp, #116	; 0x74
 800d81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d81e:	4b7b      	ldr	r3, [pc, #492]	; (800da0c <_vfiprintf_r+0x244>)
 800d820:	429d      	cmp	r5, r3
 800d822:	d101      	bne.n	800d828 <_vfiprintf_r+0x60>
 800d824:	68b5      	ldr	r5, [r6, #8]
 800d826:	e7df      	b.n	800d7e8 <_vfiprintf_r+0x20>
 800d828:	4b79      	ldr	r3, [pc, #484]	; (800da10 <_vfiprintf_r+0x248>)
 800d82a:	429d      	cmp	r5, r3
 800d82c:	bf08      	it	eq
 800d82e:	68f5      	ldreq	r5, [r6, #12]
 800d830:	e7da      	b.n	800d7e8 <_vfiprintf_r+0x20>
 800d832:	89ab      	ldrh	r3, [r5, #12]
 800d834:	0598      	lsls	r0, r3, #22
 800d836:	d4ed      	bmi.n	800d814 <_vfiprintf_r+0x4c>
 800d838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d83a:	f7ff fd8c 	bl	800d356 <__retarget_lock_release_recursive>
 800d83e:	e7e9      	b.n	800d814 <_vfiprintf_r+0x4c>
 800d840:	2300      	movs	r3, #0
 800d842:	9309      	str	r3, [sp, #36]	; 0x24
 800d844:	2320      	movs	r3, #32
 800d846:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d84a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d84e:	2330      	movs	r3, #48	; 0x30
 800d850:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da14 <_vfiprintf_r+0x24c>
 800d854:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d858:	f04f 0901 	mov.w	r9, #1
 800d85c:	4623      	mov	r3, r4
 800d85e:	469a      	mov	sl, r3
 800d860:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d864:	b10a      	cbz	r2, 800d86a <_vfiprintf_r+0xa2>
 800d866:	2a25      	cmp	r2, #37	; 0x25
 800d868:	d1f9      	bne.n	800d85e <_vfiprintf_r+0x96>
 800d86a:	ebba 0b04 	subs.w	fp, sl, r4
 800d86e:	d00b      	beq.n	800d888 <_vfiprintf_r+0xc0>
 800d870:	465b      	mov	r3, fp
 800d872:	4622      	mov	r2, r4
 800d874:	4629      	mov	r1, r5
 800d876:	4630      	mov	r0, r6
 800d878:	f7ff ff93 	bl	800d7a2 <__sfputs_r>
 800d87c:	3001      	adds	r0, #1
 800d87e:	f000 80aa 	beq.w	800d9d6 <_vfiprintf_r+0x20e>
 800d882:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d884:	445a      	add	r2, fp
 800d886:	9209      	str	r2, [sp, #36]	; 0x24
 800d888:	f89a 3000 	ldrb.w	r3, [sl]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	f000 80a2 	beq.w	800d9d6 <_vfiprintf_r+0x20e>
 800d892:	2300      	movs	r3, #0
 800d894:	f04f 32ff 	mov.w	r2, #4294967295
 800d898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d89c:	f10a 0a01 	add.w	sl, sl, #1
 800d8a0:	9304      	str	r3, [sp, #16]
 800d8a2:	9307      	str	r3, [sp, #28]
 800d8a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8a8:	931a      	str	r3, [sp, #104]	; 0x68
 800d8aa:	4654      	mov	r4, sl
 800d8ac:	2205      	movs	r2, #5
 800d8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8b2:	4858      	ldr	r0, [pc, #352]	; (800da14 <_vfiprintf_r+0x24c>)
 800d8b4:	f7f2 fc6c 	bl	8000190 <memchr>
 800d8b8:	9a04      	ldr	r2, [sp, #16]
 800d8ba:	b9d8      	cbnz	r0, 800d8f4 <_vfiprintf_r+0x12c>
 800d8bc:	06d1      	lsls	r1, r2, #27
 800d8be:	bf44      	itt	mi
 800d8c0:	2320      	movmi	r3, #32
 800d8c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8c6:	0713      	lsls	r3, r2, #28
 800d8c8:	bf44      	itt	mi
 800d8ca:	232b      	movmi	r3, #43	; 0x2b
 800d8cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d8d6:	d015      	beq.n	800d904 <_vfiprintf_r+0x13c>
 800d8d8:	9a07      	ldr	r2, [sp, #28]
 800d8da:	4654      	mov	r4, sl
 800d8dc:	2000      	movs	r0, #0
 800d8de:	f04f 0c0a 	mov.w	ip, #10
 800d8e2:	4621      	mov	r1, r4
 800d8e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8e8:	3b30      	subs	r3, #48	; 0x30
 800d8ea:	2b09      	cmp	r3, #9
 800d8ec:	d94e      	bls.n	800d98c <_vfiprintf_r+0x1c4>
 800d8ee:	b1b0      	cbz	r0, 800d91e <_vfiprintf_r+0x156>
 800d8f0:	9207      	str	r2, [sp, #28]
 800d8f2:	e014      	b.n	800d91e <_vfiprintf_r+0x156>
 800d8f4:	eba0 0308 	sub.w	r3, r0, r8
 800d8f8:	fa09 f303 	lsl.w	r3, r9, r3
 800d8fc:	4313      	orrs	r3, r2
 800d8fe:	9304      	str	r3, [sp, #16]
 800d900:	46a2      	mov	sl, r4
 800d902:	e7d2      	b.n	800d8aa <_vfiprintf_r+0xe2>
 800d904:	9b03      	ldr	r3, [sp, #12]
 800d906:	1d19      	adds	r1, r3, #4
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	9103      	str	r1, [sp, #12]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	bfbb      	ittet	lt
 800d910:	425b      	neglt	r3, r3
 800d912:	f042 0202 	orrlt.w	r2, r2, #2
 800d916:	9307      	strge	r3, [sp, #28]
 800d918:	9307      	strlt	r3, [sp, #28]
 800d91a:	bfb8      	it	lt
 800d91c:	9204      	strlt	r2, [sp, #16]
 800d91e:	7823      	ldrb	r3, [r4, #0]
 800d920:	2b2e      	cmp	r3, #46	; 0x2e
 800d922:	d10c      	bne.n	800d93e <_vfiprintf_r+0x176>
 800d924:	7863      	ldrb	r3, [r4, #1]
 800d926:	2b2a      	cmp	r3, #42	; 0x2a
 800d928:	d135      	bne.n	800d996 <_vfiprintf_r+0x1ce>
 800d92a:	9b03      	ldr	r3, [sp, #12]
 800d92c:	1d1a      	adds	r2, r3, #4
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	9203      	str	r2, [sp, #12]
 800d932:	2b00      	cmp	r3, #0
 800d934:	bfb8      	it	lt
 800d936:	f04f 33ff 	movlt.w	r3, #4294967295
 800d93a:	3402      	adds	r4, #2
 800d93c:	9305      	str	r3, [sp, #20]
 800d93e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da24 <_vfiprintf_r+0x25c>
 800d942:	7821      	ldrb	r1, [r4, #0]
 800d944:	2203      	movs	r2, #3
 800d946:	4650      	mov	r0, sl
 800d948:	f7f2 fc22 	bl	8000190 <memchr>
 800d94c:	b140      	cbz	r0, 800d960 <_vfiprintf_r+0x198>
 800d94e:	2340      	movs	r3, #64	; 0x40
 800d950:	eba0 000a 	sub.w	r0, r0, sl
 800d954:	fa03 f000 	lsl.w	r0, r3, r0
 800d958:	9b04      	ldr	r3, [sp, #16]
 800d95a:	4303      	orrs	r3, r0
 800d95c:	3401      	adds	r4, #1
 800d95e:	9304      	str	r3, [sp, #16]
 800d960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d964:	482c      	ldr	r0, [pc, #176]	; (800da18 <_vfiprintf_r+0x250>)
 800d966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d96a:	2206      	movs	r2, #6
 800d96c:	f7f2 fc10 	bl	8000190 <memchr>
 800d970:	2800      	cmp	r0, #0
 800d972:	d03f      	beq.n	800d9f4 <_vfiprintf_r+0x22c>
 800d974:	4b29      	ldr	r3, [pc, #164]	; (800da1c <_vfiprintf_r+0x254>)
 800d976:	bb1b      	cbnz	r3, 800d9c0 <_vfiprintf_r+0x1f8>
 800d978:	9b03      	ldr	r3, [sp, #12]
 800d97a:	3307      	adds	r3, #7
 800d97c:	f023 0307 	bic.w	r3, r3, #7
 800d980:	3308      	adds	r3, #8
 800d982:	9303      	str	r3, [sp, #12]
 800d984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d986:	443b      	add	r3, r7
 800d988:	9309      	str	r3, [sp, #36]	; 0x24
 800d98a:	e767      	b.n	800d85c <_vfiprintf_r+0x94>
 800d98c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d990:	460c      	mov	r4, r1
 800d992:	2001      	movs	r0, #1
 800d994:	e7a5      	b.n	800d8e2 <_vfiprintf_r+0x11a>
 800d996:	2300      	movs	r3, #0
 800d998:	3401      	adds	r4, #1
 800d99a:	9305      	str	r3, [sp, #20]
 800d99c:	4619      	mov	r1, r3
 800d99e:	f04f 0c0a 	mov.w	ip, #10
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9a8:	3a30      	subs	r2, #48	; 0x30
 800d9aa:	2a09      	cmp	r2, #9
 800d9ac:	d903      	bls.n	800d9b6 <_vfiprintf_r+0x1ee>
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d0c5      	beq.n	800d93e <_vfiprintf_r+0x176>
 800d9b2:	9105      	str	r1, [sp, #20]
 800d9b4:	e7c3      	b.n	800d93e <_vfiprintf_r+0x176>
 800d9b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e7f0      	b.n	800d9a2 <_vfiprintf_r+0x1da>
 800d9c0:	ab03      	add	r3, sp, #12
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	462a      	mov	r2, r5
 800d9c6:	4b16      	ldr	r3, [pc, #88]	; (800da20 <_vfiprintf_r+0x258>)
 800d9c8:	a904      	add	r1, sp, #16
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	f3af 8000 	nop.w
 800d9d0:	4607      	mov	r7, r0
 800d9d2:	1c78      	adds	r0, r7, #1
 800d9d4:	d1d6      	bne.n	800d984 <_vfiprintf_r+0x1bc>
 800d9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9d8:	07d9      	lsls	r1, r3, #31
 800d9da:	d405      	bmi.n	800d9e8 <_vfiprintf_r+0x220>
 800d9dc:	89ab      	ldrh	r3, [r5, #12]
 800d9de:	059a      	lsls	r2, r3, #22
 800d9e0:	d402      	bmi.n	800d9e8 <_vfiprintf_r+0x220>
 800d9e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d9e4:	f7ff fcb7 	bl	800d356 <__retarget_lock_release_recursive>
 800d9e8:	89ab      	ldrh	r3, [r5, #12]
 800d9ea:	065b      	lsls	r3, r3, #25
 800d9ec:	f53f af12 	bmi.w	800d814 <_vfiprintf_r+0x4c>
 800d9f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d9f2:	e711      	b.n	800d818 <_vfiprintf_r+0x50>
 800d9f4:	ab03      	add	r3, sp, #12
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	462a      	mov	r2, r5
 800d9fa:	4b09      	ldr	r3, [pc, #36]	; (800da20 <_vfiprintf_r+0x258>)
 800d9fc:	a904      	add	r1, sp, #16
 800d9fe:	4630      	mov	r0, r6
 800da00:	f000 f880 	bl	800db04 <_printf_i>
 800da04:	e7e4      	b.n	800d9d0 <_vfiprintf_r+0x208>
 800da06:	bf00      	nop
 800da08:	0800fd20 	.word	0x0800fd20
 800da0c:	0800fd40 	.word	0x0800fd40
 800da10:	0800fd00 	.word	0x0800fd00
 800da14:	0800fd60 	.word	0x0800fd60
 800da18:	0800fd6a 	.word	0x0800fd6a
 800da1c:	00000000 	.word	0x00000000
 800da20:	0800d7a3 	.word	0x0800d7a3
 800da24:	0800fd66 	.word	0x0800fd66

0800da28 <_printf_common>:
 800da28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da2c:	4616      	mov	r6, r2
 800da2e:	4699      	mov	r9, r3
 800da30:	688a      	ldr	r2, [r1, #8]
 800da32:	690b      	ldr	r3, [r1, #16]
 800da34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da38:	4293      	cmp	r3, r2
 800da3a:	bfb8      	it	lt
 800da3c:	4613      	movlt	r3, r2
 800da3e:	6033      	str	r3, [r6, #0]
 800da40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da44:	4607      	mov	r7, r0
 800da46:	460c      	mov	r4, r1
 800da48:	b10a      	cbz	r2, 800da4e <_printf_common+0x26>
 800da4a:	3301      	adds	r3, #1
 800da4c:	6033      	str	r3, [r6, #0]
 800da4e:	6823      	ldr	r3, [r4, #0]
 800da50:	0699      	lsls	r1, r3, #26
 800da52:	bf42      	ittt	mi
 800da54:	6833      	ldrmi	r3, [r6, #0]
 800da56:	3302      	addmi	r3, #2
 800da58:	6033      	strmi	r3, [r6, #0]
 800da5a:	6825      	ldr	r5, [r4, #0]
 800da5c:	f015 0506 	ands.w	r5, r5, #6
 800da60:	d106      	bne.n	800da70 <_printf_common+0x48>
 800da62:	f104 0a19 	add.w	sl, r4, #25
 800da66:	68e3      	ldr	r3, [r4, #12]
 800da68:	6832      	ldr	r2, [r6, #0]
 800da6a:	1a9b      	subs	r3, r3, r2
 800da6c:	42ab      	cmp	r3, r5
 800da6e:	dc26      	bgt.n	800dabe <_printf_common+0x96>
 800da70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da74:	1e13      	subs	r3, r2, #0
 800da76:	6822      	ldr	r2, [r4, #0]
 800da78:	bf18      	it	ne
 800da7a:	2301      	movne	r3, #1
 800da7c:	0692      	lsls	r2, r2, #26
 800da7e:	d42b      	bmi.n	800dad8 <_printf_common+0xb0>
 800da80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da84:	4649      	mov	r1, r9
 800da86:	4638      	mov	r0, r7
 800da88:	47c0      	blx	r8
 800da8a:	3001      	adds	r0, #1
 800da8c:	d01e      	beq.n	800dacc <_printf_common+0xa4>
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	68e5      	ldr	r5, [r4, #12]
 800da92:	6832      	ldr	r2, [r6, #0]
 800da94:	f003 0306 	and.w	r3, r3, #6
 800da98:	2b04      	cmp	r3, #4
 800da9a:	bf08      	it	eq
 800da9c:	1aad      	subeq	r5, r5, r2
 800da9e:	68a3      	ldr	r3, [r4, #8]
 800daa0:	6922      	ldr	r2, [r4, #16]
 800daa2:	bf0c      	ite	eq
 800daa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800daa8:	2500      	movne	r5, #0
 800daaa:	4293      	cmp	r3, r2
 800daac:	bfc4      	itt	gt
 800daae:	1a9b      	subgt	r3, r3, r2
 800dab0:	18ed      	addgt	r5, r5, r3
 800dab2:	2600      	movs	r6, #0
 800dab4:	341a      	adds	r4, #26
 800dab6:	42b5      	cmp	r5, r6
 800dab8:	d11a      	bne.n	800daf0 <_printf_common+0xc8>
 800daba:	2000      	movs	r0, #0
 800dabc:	e008      	b.n	800dad0 <_printf_common+0xa8>
 800dabe:	2301      	movs	r3, #1
 800dac0:	4652      	mov	r2, sl
 800dac2:	4649      	mov	r1, r9
 800dac4:	4638      	mov	r0, r7
 800dac6:	47c0      	blx	r8
 800dac8:	3001      	adds	r0, #1
 800daca:	d103      	bne.n	800dad4 <_printf_common+0xac>
 800dacc:	f04f 30ff 	mov.w	r0, #4294967295
 800dad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad4:	3501      	adds	r5, #1
 800dad6:	e7c6      	b.n	800da66 <_printf_common+0x3e>
 800dad8:	18e1      	adds	r1, r4, r3
 800dada:	1c5a      	adds	r2, r3, #1
 800dadc:	2030      	movs	r0, #48	; 0x30
 800dade:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dae2:	4422      	add	r2, r4
 800dae4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dae8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800daec:	3302      	adds	r3, #2
 800daee:	e7c7      	b.n	800da80 <_printf_common+0x58>
 800daf0:	2301      	movs	r3, #1
 800daf2:	4622      	mov	r2, r4
 800daf4:	4649      	mov	r1, r9
 800daf6:	4638      	mov	r0, r7
 800daf8:	47c0      	blx	r8
 800dafa:	3001      	adds	r0, #1
 800dafc:	d0e6      	beq.n	800dacc <_printf_common+0xa4>
 800dafe:	3601      	adds	r6, #1
 800db00:	e7d9      	b.n	800dab6 <_printf_common+0x8e>
	...

0800db04 <_printf_i>:
 800db04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db08:	7e0f      	ldrb	r7, [r1, #24]
 800db0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db0c:	2f78      	cmp	r7, #120	; 0x78
 800db0e:	4691      	mov	r9, r2
 800db10:	4680      	mov	r8, r0
 800db12:	460c      	mov	r4, r1
 800db14:	469a      	mov	sl, r3
 800db16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db1a:	d807      	bhi.n	800db2c <_printf_i+0x28>
 800db1c:	2f62      	cmp	r7, #98	; 0x62
 800db1e:	d80a      	bhi.n	800db36 <_printf_i+0x32>
 800db20:	2f00      	cmp	r7, #0
 800db22:	f000 80d8 	beq.w	800dcd6 <_printf_i+0x1d2>
 800db26:	2f58      	cmp	r7, #88	; 0x58
 800db28:	f000 80a3 	beq.w	800dc72 <_printf_i+0x16e>
 800db2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db34:	e03a      	b.n	800dbac <_printf_i+0xa8>
 800db36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db3a:	2b15      	cmp	r3, #21
 800db3c:	d8f6      	bhi.n	800db2c <_printf_i+0x28>
 800db3e:	a101      	add	r1, pc, #4	; (adr r1, 800db44 <_printf_i+0x40>)
 800db40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db44:	0800db9d 	.word	0x0800db9d
 800db48:	0800dbb1 	.word	0x0800dbb1
 800db4c:	0800db2d 	.word	0x0800db2d
 800db50:	0800db2d 	.word	0x0800db2d
 800db54:	0800db2d 	.word	0x0800db2d
 800db58:	0800db2d 	.word	0x0800db2d
 800db5c:	0800dbb1 	.word	0x0800dbb1
 800db60:	0800db2d 	.word	0x0800db2d
 800db64:	0800db2d 	.word	0x0800db2d
 800db68:	0800db2d 	.word	0x0800db2d
 800db6c:	0800db2d 	.word	0x0800db2d
 800db70:	0800dcbd 	.word	0x0800dcbd
 800db74:	0800dbe1 	.word	0x0800dbe1
 800db78:	0800dc9f 	.word	0x0800dc9f
 800db7c:	0800db2d 	.word	0x0800db2d
 800db80:	0800db2d 	.word	0x0800db2d
 800db84:	0800dcdf 	.word	0x0800dcdf
 800db88:	0800db2d 	.word	0x0800db2d
 800db8c:	0800dbe1 	.word	0x0800dbe1
 800db90:	0800db2d 	.word	0x0800db2d
 800db94:	0800db2d 	.word	0x0800db2d
 800db98:	0800dca7 	.word	0x0800dca7
 800db9c:	682b      	ldr	r3, [r5, #0]
 800db9e:	1d1a      	adds	r2, r3, #4
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	602a      	str	r2, [r5, #0]
 800dba4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dba8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbac:	2301      	movs	r3, #1
 800dbae:	e0a3      	b.n	800dcf8 <_printf_i+0x1f4>
 800dbb0:	6820      	ldr	r0, [r4, #0]
 800dbb2:	6829      	ldr	r1, [r5, #0]
 800dbb4:	0606      	lsls	r6, r0, #24
 800dbb6:	f101 0304 	add.w	r3, r1, #4
 800dbba:	d50a      	bpl.n	800dbd2 <_printf_i+0xce>
 800dbbc:	680e      	ldr	r6, [r1, #0]
 800dbbe:	602b      	str	r3, [r5, #0]
 800dbc0:	2e00      	cmp	r6, #0
 800dbc2:	da03      	bge.n	800dbcc <_printf_i+0xc8>
 800dbc4:	232d      	movs	r3, #45	; 0x2d
 800dbc6:	4276      	negs	r6, r6
 800dbc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbcc:	485e      	ldr	r0, [pc, #376]	; (800dd48 <_printf_i+0x244>)
 800dbce:	230a      	movs	r3, #10
 800dbd0:	e019      	b.n	800dc06 <_printf_i+0x102>
 800dbd2:	680e      	ldr	r6, [r1, #0]
 800dbd4:	602b      	str	r3, [r5, #0]
 800dbd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dbda:	bf18      	it	ne
 800dbdc:	b236      	sxthne	r6, r6
 800dbde:	e7ef      	b.n	800dbc0 <_printf_i+0xbc>
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	6820      	ldr	r0, [r4, #0]
 800dbe4:	1d19      	adds	r1, r3, #4
 800dbe6:	6029      	str	r1, [r5, #0]
 800dbe8:	0601      	lsls	r1, r0, #24
 800dbea:	d501      	bpl.n	800dbf0 <_printf_i+0xec>
 800dbec:	681e      	ldr	r6, [r3, #0]
 800dbee:	e002      	b.n	800dbf6 <_printf_i+0xf2>
 800dbf0:	0646      	lsls	r6, r0, #25
 800dbf2:	d5fb      	bpl.n	800dbec <_printf_i+0xe8>
 800dbf4:	881e      	ldrh	r6, [r3, #0]
 800dbf6:	4854      	ldr	r0, [pc, #336]	; (800dd48 <_printf_i+0x244>)
 800dbf8:	2f6f      	cmp	r7, #111	; 0x6f
 800dbfa:	bf0c      	ite	eq
 800dbfc:	2308      	moveq	r3, #8
 800dbfe:	230a      	movne	r3, #10
 800dc00:	2100      	movs	r1, #0
 800dc02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc06:	6865      	ldr	r5, [r4, #4]
 800dc08:	60a5      	str	r5, [r4, #8]
 800dc0a:	2d00      	cmp	r5, #0
 800dc0c:	bfa2      	ittt	ge
 800dc0e:	6821      	ldrge	r1, [r4, #0]
 800dc10:	f021 0104 	bicge.w	r1, r1, #4
 800dc14:	6021      	strge	r1, [r4, #0]
 800dc16:	b90e      	cbnz	r6, 800dc1c <_printf_i+0x118>
 800dc18:	2d00      	cmp	r5, #0
 800dc1a:	d04d      	beq.n	800dcb8 <_printf_i+0x1b4>
 800dc1c:	4615      	mov	r5, r2
 800dc1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc22:	fb03 6711 	mls	r7, r3, r1, r6
 800dc26:	5dc7      	ldrb	r7, [r0, r7]
 800dc28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc2c:	4637      	mov	r7, r6
 800dc2e:	42bb      	cmp	r3, r7
 800dc30:	460e      	mov	r6, r1
 800dc32:	d9f4      	bls.n	800dc1e <_printf_i+0x11a>
 800dc34:	2b08      	cmp	r3, #8
 800dc36:	d10b      	bne.n	800dc50 <_printf_i+0x14c>
 800dc38:	6823      	ldr	r3, [r4, #0]
 800dc3a:	07de      	lsls	r6, r3, #31
 800dc3c:	d508      	bpl.n	800dc50 <_printf_i+0x14c>
 800dc3e:	6923      	ldr	r3, [r4, #16]
 800dc40:	6861      	ldr	r1, [r4, #4]
 800dc42:	4299      	cmp	r1, r3
 800dc44:	bfde      	ittt	le
 800dc46:	2330      	movle	r3, #48	; 0x30
 800dc48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc50:	1b52      	subs	r2, r2, r5
 800dc52:	6122      	str	r2, [r4, #16]
 800dc54:	f8cd a000 	str.w	sl, [sp]
 800dc58:	464b      	mov	r3, r9
 800dc5a:	aa03      	add	r2, sp, #12
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	4640      	mov	r0, r8
 800dc60:	f7ff fee2 	bl	800da28 <_printf_common>
 800dc64:	3001      	adds	r0, #1
 800dc66:	d14c      	bne.n	800dd02 <_printf_i+0x1fe>
 800dc68:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6c:	b004      	add	sp, #16
 800dc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc72:	4835      	ldr	r0, [pc, #212]	; (800dd48 <_printf_i+0x244>)
 800dc74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc78:	6829      	ldr	r1, [r5, #0]
 800dc7a:	6823      	ldr	r3, [r4, #0]
 800dc7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc80:	6029      	str	r1, [r5, #0]
 800dc82:	061d      	lsls	r5, r3, #24
 800dc84:	d514      	bpl.n	800dcb0 <_printf_i+0x1ac>
 800dc86:	07df      	lsls	r7, r3, #31
 800dc88:	bf44      	itt	mi
 800dc8a:	f043 0320 	orrmi.w	r3, r3, #32
 800dc8e:	6023      	strmi	r3, [r4, #0]
 800dc90:	b91e      	cbnz	r6, 800dc9a <_printf_i+0x196>
 800dc92:	6823      	ldr	r3, [r4, #0]
 800dc94:	f023 0320 	bic.w	r3, r3, #32
 800dc98:	6023      	str	r3, [r4, #0]
 800dc9a:	2310      	movs	r3, #16
 800dc9c:	e7b0      	b.n	800dc00 <_printf_i+0xfc>
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	f043 0320 	orr.w	r3, r3, #32
 800dca4:	6023      	str	r3, [r4, #0]
 800dca6:	2378      	movs	r3, #120	; 0x78
 800dca8:	4828      	ldr	r0, [pc, #160]	; (800dd4c <_printf_i+0x248>)
 800dcaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcae:	e7e3      	b.n	800dc78 <_printf_i+0x174>
 800dcb0:	0659      	lsls	r1, r3, #25
 800dcb2:	bf48      	it	mi
 800dcb4:	b2b6      	uxthmi	r6, r6
 800dcb6:	e7e6      	b.n	800dc86 <_printf_i+0x182>
 800dcb8:	4615      	mov	r5, r2
 800dcba:	e7bb      	b.n	800dc34 <_printf_i+0x130>
 800dcbc:	682b      	ldr	r3, [r5, #0]
 800dcbe:	6826      	ldr	r6, [r4, #0]
 800dcc0:	6961      	ldr	r1, [r4, #20]
 800dcc2:	1d18      	adds	r0, r3, #4
 800dcc4:	6028      	str	r0, [r5, #0]
 800dcc6:	0635      	lsls	r5, r6, #24
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	d501      	bpl.n	800dcd0 <_printf_i+0x1cc>
 800dccc:	6019      	str	r1, [r3, #0]
 800dcce:	e002      	b.n	800dcd6 <_printf_i+0x1d2>
 800dcd0:	0670      	lsls	r0, r6, #25
 800dcd2:	d5fb      	bpl.n	800dccc <_printf_i+0x1c8>
 800dcd4:	8019      	strh	r1, [r3, #0]
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	6123      	str	r3, [r4, #16]
 800dcda:	4615      	mov	r5, r2
 800dcdc:	e7ba      	b.n	800dc54 <_printf_i+0x150>
 800dcde:	682b      	ldr	r3, [r5, #0]
 800dce0:	1d1a      	adds	r2, r3, #4
 800dce2:	602a      	str	r2, [r5, #0]
 800dce4:	681d      	ldr	r5, [r3, #0]
 800dce6:	6862      	ldr	r2, [r4, #4]
 800dce8:	2100      	movs	r1, #0
 800dcea:	4628      	mov	r0, r5
 800dcec:	f7f2 fa50 	bl	8000190 <memchr>
 800dcf0:	b108      	cbz	r0, 800dcf6 <_printf_i+0x1f2>
 800dcf2:	1b40      	subs	r0, r0, r5
 800dcf4:	6060      	str	r0, [r4, #4]
 800dcf6:	6863      	ldr	r3, [r4, #4]
 800dcf8:	6123      	str	r3, [r4, #16]
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd00:	e7a8      	b.n	800dc54 <_printf_i+0x150>
 800dd02:	6923      	ldr	r3, [r4, #16]
 800dd04:	462a      	mov	r2, r5
 800dd06:	4649      	mov	r1, r9
 800dd08:	4640      	mov	r0, r8
 800dd0a:	47d0      	blx	sl
 800dd0c:	3001      	adds	r0, #1
 800dd0e:	d0ab      	beq.n	800dc68 <_printf_i+0x164>
 800dd10:	6823      	ldr	r3, [r4, #0]
 800dd12:	079b      	lsls	r3, r3, #30
 800dd14:	d413      	bmi.n	800dd3e <_printf_i+0x23a>
 800dd16:	68e0      	ldr	r0, [r4, #12]
 800dd18:	9b03      	ldr	r3, [sp, #12]
 800dd1a:	4298      	cmp	r0, r3
 800dd1c:	bfb8      	it	lt
 800dd1e:	4618      	movlt	r0, r3
 800dd20:	e7a4      	b.n	800dc6c <_printf_i+0x168>
 800dd22:	2301      	movs	r3, #1
 800dd24:	4632      	mov	r2, r6
 800dd26:	4649      	mov	r1, r9
 800dd28:	4640      	mov	r0, r8
 800dd2a:	47d0      	blx	sl
 800dd2c:	3001      	adds	r0, #1
 800dd2e:	d09b      	beq.n	800dc68 <_printf_i+0x164>
 800dd30:	3501      	adds	r5, #1
 800dd32:	68e3      	ldr	r3, [r4, #12]
 800dd34:	9903      	ldr	r1, [sp, #12]
 800dd36:	1a5b      	subs	r3, r3, r1
 800dd38:	42ab      	cmp	r3, r5
 800dd3a:	dcf2      	bgt.n	800dd22 <_printf_i+0x21e>
 800dd3c:	e7eb      	b.n	800dd16 <_printf_i+0x212>
 800dd3e:	2500      	movs	r5, #0
 800dd40:	f104 0619 	add.w	r6, r4, #25
 800dd44:	e7f5      	b.n	800dd32 <_printf_i+0x22e>
 800dd46:	bf00      	nop
 800dd48:	0800fd71 	.word	0x0800fd71
 800dd4c:	0800fd82 	.word	0x0800fd82

0800dd50 <_putc_r>:
 800dd50:	b570      	push	{r4, r5, r6, lr}
 800dd52:	460d      	mov	r5, r1
 800dd54:	4614      	mov	r4, r2
 800dd56:	4606      	mov	r6, r0
 800dd58:	b118      	cbz	r0, 800dd62 <_putc_r+0x12>
 800dd5a:	6983      	ldr	r3, [r0, #24]
 800dd5c:	b90b      	cbnz	r3, 800dd62 <_putc_r+0x12>
 800dd5e:	f7ff fa5b 	bl	800d218 <__sinit>
 800dd62:	4b1c      	ldr	r3, [pc, #112]	; (800ddd4 <_putc_r+0x84>)
 800dd64:	429c      	cmp	r4, r3
 800dd66:	d124      	bne.n	800ddb2 <_putc_r+0x62>
 800dd68:	6874      	ldr	r4, [r6, #4]
 800dd6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd6c:	07d8      	lsls	r0, r3, #31
 800dd6e:	d405      	bmi.n	800dd7c <_putc_r+0x2c>
 800dd70:	89a3      	ldrh	r3, [r4, #12]
 800dd72:	0599      	lsls	r1, r3, #22
 800dd74:	d402      	bmi.n	800dd7c <_putc_r+0x2c>
 800dd76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd78:	f7ff faec 	bl	800d354 <__retarget_lock_acquire_recursive>
 800dd7c:	68a3      	ldr	r3, [r4, #8]
 800dd7e:	3b01      	subs	r3, #1
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	60a3      	str	r3, [r4, #8]
 800dd84:	da05      	bge.n	800dd92 <_putc_r+0x42>
 800dd86:	69a2      	ldr	r2, [r4, #24]
 800dd88:	4293      	cmp	r3, r2
 800dd8a:	db1c      	blt.n	800ddc6 <_putc_r+0x76>
 800dd8c:	b2eb      	uxtb	r3, r5
 800dd8e:	2b0a      	cmp	r3, #10
 800dd90:	d019      	beq.n	800ddc6 <_putc_r+0x76>
 800dd92:	6823      	ldr	r3, [r4, #0]
 800dd94:	1c5a      	adds	r2, r3, #1
 800dd96:	6022      	str	r2, [r4, #0]
 800dd98:	701d      	strb	r5, [r3, #0]
 800dd9a:	b2ed      	uxtb	r5, r5
 800dd9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd9e:	07da      	lsls	r2, r3, #31
 800dda0:	d405      	bmi.n	800ddae <_putc_r+0x5e>
 800dda2:	89a3      	ldrh	r3, [r4, #12]
 800dda4:	059b      	lsls	r3, r3, #22
 800dda6:	d402      	bmi.n	800ddae <_putc_r+0x5e>
 800dda8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddaa:	f7ff fad4 	bl	800d356 <__retarget_lock_release_recursive>
 800ddae:	4628      	mov	r0, r5
 800ddb0:	bd70      	pop	{r4, r5, r6, pc}
 800ddb2:	4b09      	ldr	r3, [pc, #36]	; (800ddd8 <_putc_r+0x88>)
 800ddb4:	429c      	cmp	r4, r3
 800ddb6:	d101      	bne.n	800ddbc <_putc_r+0x6c>
 800ddb8:	68b4      	ldr	r4, [r6, #8]
 800ddba:	e7d6      	b.n	800dd6a <_putc_r+0x1a>
 800ddbc:	4b07      	ldr	r3, [pc, #28]	; (800dddc <_putc_r+0x8c>)
 800ddbe:	429c      	cmp	r4, r3
 800ddc0:	bf08      	it	eq
 800ddc2:	68f4      	ldreq	r4, [r6, #12]
 800ddc4:	e7d1      	b.n	800dd6a <_putc_r+0x1a>
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	4622      	mov	r2, r4
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f7ff f828 	bl	800ce20 <__swbuf_r>
 800ddd0:	4605      	mov	r5, r0
 800ddd2:	e7e3      	b.n	800dd9c <_putc_r+0x4c>
 800ddd4:	0800fd20 	.word	0x0800fd20
 800ddd8:	0800fd40 	.word	0x0800fd40
 800dddc:	0800fd00 	.word	0x0800fd00

0800dde0 <_read_r>:
 800dde0:	b538      	push	{r3, r4, r5, lr}
 800dde2:	4d07      	ldr	r5, [pc, #28]	; (800de00 <_read_r+0x20>)
 800dde4:	4604      	mov	r4, r0
 800dde6:	4608      	mov	r0, r1
 800dde8:	4611      	mov	r1, r2
 800ddea:	2200      	movs	r2, #0
 800ddec:	602a      	str	r2, [r5, #0]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	f7f4 fe40 	bl	8002a74 <_read>
 800ddf4:	1c43      	adds	r3, r0, #1
 800ddf6:	d102      	bne.n	800ddfe <_read_r+0x1e>
 800ddf8:	682b      	ldr	r3, [r5, #0]
 800ddfa:	b103      	cbz	r3, 800ddfe <_read_r+0x1e>
 800ddfc:	6023      	str	r3, [r4, #0]
 800ddfe:	bd38      	pop	{r3, r4, r5, pc}
 800de00:	200025a8 	.word	0x200025a8

0800de04 <strchr>:
 800de04:	b2c9      	uxtb	r1, r1
 800de06:	4603      	mov	r3, r0
 800de08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de0c:	b11a      	cbz	r2, 800de16 <strchr+0x12>
 800de0e:	428a      	cmp	r2, r1
 800de10:	d1f9      	bne.n	800de06 <strchr+0x2>
 800de12:	4618      	mov	r0, r3
 800de14:	4770      	bx	lr
 800de16:	2900      	cmp	r1, #0
 800de18:	bf18      	it	ne
 800de1a:	2300      	movne	r3, #0
 800de1c:	e7f9      	b.n	800de12 <strchr+0xe>
	...

0800de20 <_fstat_r>:
 800de20:	b538      	push	{r3, r4, r5, lr}
 800de22:	4d07      	ldr	r5, [pc, #28]	; (800de40 <_fstat_r+0x20>)
 800de24:	2300      	movs	r3, #0
 800de26:	4604      	mov	r4, r0
 800de28:	4608      	mov	r0, r1
 800de2a:	4611      	mov	r1, r2
 800de2c:	602b      	str	r3, [r5, #0]
 800de2e:	f7f4 fe4a 	bl	8002ac6 <_fstat>
 800de32:	1c43      	adds	r3, r0, #1
 800de34:	d102      	bne.n	800de3c <_fstat_r+0x1c>
 800de36:	682b      	ldr	r3, [r5, #0]
 800de38:	b103      	cbz	r3, 800de3c <_fstat_r+0x1c>
 800de3a:	6023      	str	r3, [r4, #0]
 800de3c:	bd38      	pop	{r3, r4, r5, pc}
 800de3e:	bf00      	nop
 800de40:	200025a8 	.word	0x200025a8

0800de44 <_isatty_r>:
 800de44:	b538      	push	{r3, r4, r5, lr}
 800de46:	4d06      	ldr	r5, [pc, #24]	; (800de60 <_isatty_r+0x1c>)
 800de48:	2300      	movs	r3, #0
 800de4a:	4604      	mov	r4, r0
 800de4c:	4608      	mov	r0, r1
 800de4e:	602b      	str	r3, [r5, #0]
 800de50:	f7f4 fe49 	bl	8002ae6 <_isatty>
 800de54:	1c43      	adds	r3, r0, #1
 800de56:	d102      	bne.n	800de5e <_isatty_r+0x1a>
 800de58:	682b      	ldr	r3, [r5, #0]
 800de5a:	b103      	cbz	r3, 800de5e <_isatty_r+0x1a>
 800de5c:	6023      	str	r3, [r4, #0]
 800de5e:	bd38      	pop	{r3, r4, r5, pc}
 800de60:	200025a8 	.word	0x200025a8

0800de64 <memmove>:
 800de64:	4288      	cmp	r0, r1
 800de66:	b510      	push	{r4, lr}
 800de68:	eb01 0402 	add.w	r4, r1, r2
 800de6c:	d902      	bls.n	800de74 <memmove+0x10>
 800de6e:	4284      	cmp	r4, r0
 800de70:	4623      	mov	r3, r4
 800de72:	d807      	bhi.n	800de84 <memmove+0x20>
 800de74:	1e43      	subs	r3, r0, #1
 800de76:	42a1      	cmp	r1, r4
 800de78:	d008      	beq.n	800de8c <memmove+0x28>
 800de7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de82:	e7f8      	b.n	800de76 <memmove+0x12>
 800de84:	4402      	add	r2, r0
 800de86:	4601      	mov	r1, r0
 800de88:	428a      	cmp	r2, r1
 800de8a:	d100      	bne.n	800de8e <memmove+0x2a>
 800de8c:	bd10      	pop	{r4, pc}
 800de8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de96:	e7f7      	b.n	800de88 <memmove+0x24>

0800de98 <_malloc_usable_size_r>:
 800de98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de9c:	1f18      	subs	r0, r3, #4
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	bfbc      	itt	lt
 800dea2:	580b      	ldrlt	r3, [r1, r0]
 800dea4:	18c0      	addlt	r0, r0, r3
 800dea6:	4770      	bx	lr

0800dea8 <_init>:
 800dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deaa:	bf00      	nop
 800deac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deae:	bc08      	pop	{r3}
 800deb0:	469e      	mov	lr, r3
 800deb2:	4770      	bx	lr

0800deb4 <_fini>:
 800deb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deb6:	bf00      	nop
 800deb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800deba:	bc08      	pop	{r3}
 800debc:	469e      	mov	lr, r3
 800debe:	4770      	bx	lr
