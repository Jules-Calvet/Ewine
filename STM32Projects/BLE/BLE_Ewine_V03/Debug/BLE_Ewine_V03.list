
BLE_Ewine_V03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e060  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d30  0800e1a0  0800e1a0  0001e1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fed0  0800fed0  0001fed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fed8  0800fed8  0001fed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fedc  0800fedc  0001fedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000010c  20000008  0800fee0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 MB_MEM2       00000883  20000114  0800ffec  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000998  0801086f  00020998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200009d0  080108a4  000209d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001b84  200009e8  080108b5  000209e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000256c  080108b5  0002256c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000209e1  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   00037176  00000000  00000000  00020a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007dd3  00000000  00000000  00057b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002d88  00000000  00000000  0005f960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002a18  00000000  00000000  000626e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000318b1  00000000  00000000  00065100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00038398  00000000  00000000  000969b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ff39c  00000000  00000000  000ced49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001ce0e5  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c710  00000000  00000000  001ce138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200009e8 	.word	0x200009e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e17c 	.word	0x0800e17c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200009ec 	.word	0x200009ec
 800017c:	0800e17c 	.word	0x0800e17c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b974 	b.w	8000ccc <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	4604      	mov	r4, r0
 8000a04:	468e      	mov	lr, r1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d14d      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a0a:	428a      	cmp	r2, r1
 8000a0c:	4694      	mov	ip, r2
 8000a0e:	d969      	bls.n	8000ae4 <__udivmoddi4+0xe8>
 8000a10:	fab2 f282 	clz	r2, r2
 8000a14:	b152      	cbz	r2, 8000a2c <__udivmoddi4+0x30>
 8000a16:	fa01 f302 	lsl.w	r3, r1, r2
 8000a1a:	f1c2 0120 	rsb	r1, r2, #32
 8000a1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a26:	ea41 0e03 	orr.w	lr, r1, r3
 8000a2a:	4094      	lsls	r4, r2
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	0c21      	lsrs	r1, r4, #16
 8000a32:	fbbe f6f8 	udiv	r6, lr, r8
 8000a36:	fa1f f78c 	uxth.w	r7, ip
 8000a3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a42:	fb06 f107 	mul.w	r1, r6, r7
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a52:	f080 811f 	bcs.w	8000c94 <__udivmoddi4+0x298>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 811c 	bls.w	8000c94 <__udivmoddi4+0x298>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a68:	fb08 3310 	mls	r3, r8, r0, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb00 f707 	mul.w	r7, r0, r7
 8000a74:	42a7      	cmp	r7, r4
 8000a76:	d90a      	bls.n	8000a8e <__udivmoddi4+0x92>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a80:	f080 810a 	bcs.w	8000c98 <__udivmoddi4+0x29c>
 8000a84:	42a7      	cmp	r7, r4
 8000a86:	f240 8107 	bls.w	8000c98 <__udivmoddi4+0x29c>
 8000a8a:	4464      	add	r4, ip
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a92:	1be4      	subs	r4, r4, r7
 8000a94:	2600      	movs	r6, #0
 8000a96:	b11d      	cbz	r5, 8000aa0 <__udivmoddi4+0xa4>
 8000a98:	40d4      	lsrs	r4, r2
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000aa0:	4631      	mov	r1, r6
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d909      	bls.n	8000abe <__udivmoddi4+0xc2>
 8000aaa:	2d00      	cmp	r5, #0
 8000aac:	f000 80ef 	beq.w	8000c8e <__udivmoddi4+0x292>
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	fab3 f683 	clz	r6, r3
 8000ac2:	2e00      	cmp	r6, #0
 8000ac4:	d14a      	bne.n	8000b5c <__udivmoddi4+0x160>
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d302      	bcc.n	8000ad0 <__udivmoddi4+0xd4>
 8000aca:	4282      	cmp	r2, r0
 8000acc:	f200 80f9 	bhi.w	8000cc2 <__udivmoddi4+0x2c6>
 8000ad0:	1a84      	subs	r4, r0, r2
 8000ad2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	469e      	mov	lr, r3
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d0e0      	beq.n	8000aa0 <__udivmoddi4+0xa4>
 8000ade:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ae2:	e7dd      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000ae4:	b902      	cbnz	r2, 8000ae8 <__udivmoddi4+0xec>
 8000ae6:	deff      	udf	#255	; 0xff
 8000ae8:	fab2 f282 	clz	r2, r2
 8000aec:	2a00      	cmp	r2, #0
 8000aee:	f040 8092 	bne.w	8000c16 <__udivmoddi4+0x21a>
 8000af2:	eba1 010c 	sub.w	r1, r1, ip
 8000af6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000afa:	fa1f fe8c 	uxth.w	lr, ip
 8000afe:	2601      	movs	r6, #1
 8000b00:	0c20      	lsrs	r0, r4, #16
 8000b02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b06:	fb07 1113 	mls	r1, r7, r3, r1
 8000b0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b0e:	fb0e f003 	mul.w	r0, lr, r3
 8000b12:	4288      	cmp	r0, r1
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x12c>
 8000b16:	eb1c 0101 	adds.w	r1, ip, r1
 8000b1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x12a>
 8000b20:	4288      	cmp	r0, r1
 8000b22:	f200 80cb 	bhi.w	8000cbc <__udivmoddi4+0x2c0>
 8000b26:	4643      	mov	r3, r8
 8000b28:	1a09      	subs	r1, r1, r0
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b30:	fb07 1110 	mls	r1, r7, r0, r1
 8000b34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b38:	fb0e fe00 	mul.w	lr, lr, r0
 8000b3c:	45a6      	cmp	lr, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x156>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b48:	d202      	bcs.n	8000b50 <__udivmoddi4+0x154>
 8000b4a:	45a6      	cmp	lr, r4
 8000b4c:	f200 80bb 	bhi.w	8000cc6 <__udivmoddi4+0x2ca>
 8000b50:	4608      	mov	r0, r1
 8000b52:	eba4 040e 	sub.w	r4, r4, lr
 8000b56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b5a:	e79c      	b.n	8000a96 <__udivmoddi4+0x9a>
 8000b5c:	f1c6 0720 	rsb	r7, r6, #32
 8000b60:	40b3      	lsls	r3, r6
 8000b62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b72:	431c      	orrs	r4, r3
 8000b74:	40f9      	lsrs	r1, r7
 8000b76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b82:	0c20      	lsrs	r0, r4, #16
 8000b84:	fa1f fe8c 	uxth.w	lr, ip
 8000b88:	fb09 1118 	mls	r1, r9, r8, r1
 8000b8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b90:	fb08 f00e 	mul.w	r0, r8, lr
 8000b94:	4288      	cmp	r0, r1
 8000b96:	fa02 f206 	lsl.w	r2, r2, r6
 8000b9a:	d90b      	bls.n	8000bb4 <__udivmoddi4+0x1b8>
 8000b9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ba4:	f080 8088 	bcs.w	8000cb8 <__udivmoddi4+0x2bc>
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	f240 8085 	bls.w	8000cb8 <__udivmoddi4+0x2bc>
 8000bae:	f1a8 0802 	sub.w	r8, r8, #2
 8000bb2:	4461      	add	r1, ip
 8000bb4:	1a09      	subs	r1, r1, r0
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc8:	458e      	cmp	lr, r1
 8000bca:	d908      	bls.n	8000bde <__udivmoddi4+0x1e2>
 8000bcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd4:	d26c      	bcs.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bd6:	458e      	cmp	lr, r1
 8000bd8:	d96a      	bls.n	8000cb0 <__udivmoddi4+0x2b4>
 8000bda:	3802      	subs	r0, #2
 8000bdc:	4461      	add	r1, ip
 8000bde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be2:	fba0 9402 	umull	r9, r4, r0, r2
 8000be6:	eba1 010e 	sub.w	r1, r1, lr
 8000bea:	42a1      	cmp	r1, r4
 8000bec:	46c8      	mov	r8, r9
 8000bee:	46a6      	mov	lr, r4
 8000bf0:	d356      	bcc.n	8000ca0 <__udivmoddi4+0x2a4>
 8000bf2:	d053      	beq.n	8000c9c <__udivmoddi4+0x2a0>
 8000bf4:	b15d      	cbz	r5, 8000c0e <__udivmoddi4+0x212>
 8000bf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000bfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000bfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000c02:	fa22 f306 	lsr.w	r3, r2, r6
 8000c06:	40f1      	lsrs	r1, r6
 8000c08:	431f      	orrs	r7, r3
 8000c0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c0e:	2600      	movs	r6, #0
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	f1c2 0320 	rsb	r3, r2, #32
 8000c1a:	40d8      	lsrs	r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa21 f303 	lsr.w	r3, r1, r3
 8000c24:	4091      	lsls	r1, r2
 8000c26:	4301      	orrs	r1, r0
 8000c28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2c:	fa1f fe8c 	uxth.w	lr, ip
 8000c30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c34:	fb07 3610 	mls	r6, r7, r0, r3
 8000c38:	0c0b      	lsrs	r3, r1, #16
 8000c3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c42:	429e      	cmp	r6, r3
 8000c44:	fa04 f402 	lsl.w	r4, r4, r2
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x260>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c52:	d22f      	bcs.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c54:	429e      	cmp	r6, r3
 8000c56:	d92d      	bls.n	8000cb4 <__udivmoddi4+0x2b8>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1b9b      	subs	r3, r3, r6
 8000c5e:	b289      	uxth	r1, r1
 8000c60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c64:	fb07 3316 	mls	r3, r7, r6, r3
 8000c68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c70:	428b      	cmp	r3, r1
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x28a>
 8000c74:	eb1c 0101 	adds.w	r1, ip, r1
 8000c78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c7c:	d216      	bcs.n	8000cac <__udivmoddi4+0x2b0>
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d914      	bls.n	8000cac <__udivmoddi4+0x2b0>
 8000c82:	3e02      	subs	r6, #2
 8000c84:	4461      	add	r1, ip
 8000c86:	1ac9      	subs	r1, r1, r3
 8000c88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c8c:	e738      	b.n	8000b00 <__udivmoddi4+0x104>
 8000c8e:	462e      	mov	r6, r5
 8000c90:	4628      	mov	r0, r5
 8000c92:	e705      	b.n	8000aa0 <__udivmoddi4+0xa4>
 8000c94:	4606      	mov	r6, r0
 8000c96:	e6e3      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c98:	4618      	mov	r0, r3
 8000c9a:	e6f8      	b.n	8000a8e <__udivmoddi4+0x92>
 8000c9c:	454b      	cmp	r3, r9
 8000c9e:	d2a9      	bcs.n	8000bf4 <__udivmoddi4+0x1f8>
 8000ca0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ca4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ca8:	3801      	subs	r0, #1
 8000caa:	e7a3      	b.n	8000bf4 <__udivmoddi4+0x1f8>
 8000cac:	4646      	mov	r6, r8
 8000cae:	e7ea      	b.n	8000c86 <__udivmoddi4+0x28a>
 8000cb0:	4620      	mov	r0, r4
 8000cb2:	e794      	b.n	8000bde <__udivmoddi4+0x1e2>
 8000cb4:	4640      	mov	r0, r8
 8000cb6:	e7d1      	b.n	8000c5c <__udivmoddi4+0x260>
 8000cb8:	46d0      	mov	r8, sl
 8000cba:	e77b      	b.n	8000bb4 <__udivmoddi4+0x1b8>
 8000cbc:	3b02      	subs	r3, #2
 8000cbe:	4461      	add	r1, ip
 8000cc0:	e732      	b.n	8000b28 <__udivmoddi4+0x12c>
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	e709      	b.n	8000ada <__udivmoddi4+0xde>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	e742      	b.n	8000b52 <__udivmoddi4+0x156>

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000cd0:	b5b0      	push	{r4, r5, r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <APPD_EnableCPU2+0x34>)
 8000cd8:	1d3c      	adds	r4, r7, #4
 8000cda:	461d      	mov	r5, r3
 8000cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce4:	c403      	stmia	r4!, {r0, r1}
 8000ce6:	8022      	strh	r2, [r4, #0]
 8000ce8:	3402      	adds	r4, #2
 8000cea:	0c13      	lsrs	r3, r2, #16
 8000cec:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000cee:	f009 fde1 	bl	800a8b4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f009 f87c 	bl	8009df2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000cfa:	bf00      	nop
}
 8000cfc:	3720      	adds	r7, #32
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bdb0      	pop	{r4, r5, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	0800e1a0 	.word	0x0800e1a0

08000d08 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d16:	f023 0207 	bic.w	r2, r3, #7
 8000d1a:	4905      	ldr	r1, [pc, #20]	; (8000d30 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	58000400 	.word	0x58000400

08000d34 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d3e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d42:	4905      	ldr	r1, [pc, #20]	; (8000d58 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	58000800 	.word	0x58000800

08000d5c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000d6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d76:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	021b      	lsls	r3, r3, #8
 8000d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d82:	4313      	orrs	r3, r2
 8000d84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	cafecafe 	.word	0xcafecafe

08000d98 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	608b      	str	r3, [r1, #8]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e18:	d101      	bne.n	8000e1e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e000      	b.n	8000e20 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e3e:	d101      	bne.n	8000e44 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e74:	68fb      	ldr	r3, [r7, #12]
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <LL_DBGMCU_GetDeviceID+0x18>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e0042000 	.word	0xe0042000

08000ea0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <LL_DBGMCU_GetRevisionID+0x18>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	0c1b      	lsrs	r3, r3, #16
 8000eaa:	b29b      	uxth	r3, r3
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e0042000 	.word	0xe0042000

08000ebc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	605a      	str	r2, [r3, #4]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	605a      	str	r2, [r3, #4]
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	615a      	str	r2, [r3, #20]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	615a      	str	r2, [r3, #20]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	609a      	str	r2, [r3, #8]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	619a      	str	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <LL_LPM_EnableSleep+0x1c>)
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <LL_LPM_EnableSleep+0x1c>)
 8000f8a:	f023 0304 	bic.w	r3, r3, #4
 8000f8e:	6113      	str	r3, [r2, #16]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	22ca      	movs	r2, #202	; 0xca
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2253      	movs	r2, #83	; 0x53
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f023 0207 	bic.w	r2, r3, #7
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <MX_APPE_Config+0x18>)
 8001006:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800100a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800100c:	f000 f824 	bl	8001058 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001010:	f000 f864 	bl	80010dc <Config_HSE>

  return;
 8001014:	bf00      	nop
}
 8001016:	bd80      	pop	{r7, pc}
 8001018:	58004000 	.word	0x58004000

0800101c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001020:	f000 f870 	bl	8001104 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001024:	f000 f888 	bl	8001138 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001028:	4903      	ldr	r1, [pc, #12]	; (8001038 <MX_APPE_Init+0x1c>)
 800102a:	2000      	movs	r0, #0
 800102c:	f000 fff4 	bl	8002018 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001030:	f000 f890 	bl	8001154 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001034:	bf00      	nop
}
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000ae8 	.word	0x20000ae8

0800103c <Init_Smps>:

void Init_Smps(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001040:	bf00      	nop
}
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <Init_Exti>:

void Init_Exti(void)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800104e:	2050      	movs	r0, #80	; 0x50
 8001050:	f7ff fe70 	bl	8000d34 <LL_EXTI_EnableIT_32_63>

  return;
 8001054:	bf00      	nop
}
 8001056:	bd80      	pop	{r7, pc}

08001058 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 800105c:	f000 f804 	bl	8001068 <Reset_BackupDomain>

  Reset_IPCC();
 8001060:	f000 f81a 	bl	8001098 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001064:	bf00      	nop
}
 8001066:	bd80      	pop	{r7, pc}

08001068 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800106c:	f7ff feca 	bl	8000e04 <LL_RCC_IsActiveFlag_PINRST>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00d      	beq.n	8001092 <Reset_BackupDomain+0x2a>
 8001076:	f7ff fed8 	bl	8000e2a <LL_RCC_IsActiveFlag_SFTRST>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d108      	bne.n	8001092 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001080:	f003 fb42 	bl	8004708 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001084:	f003 fb40 	bl	8004708 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001088:	f7ff fe9a 	bl	8000dc0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800108c:	f7ff fea9 	bl	8000de2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001090:	bf00      	nop
 8001092:	bf00      	nop
}
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800109c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010a0:	f7ff fed6 	bl	8000e50 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80010a4:	213f      	movs	r1, #63	; 0x3f
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <Reset_IPCC+0x40>)
 80010a8:	f7ff ff4e 	bl	8000f48 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80010ac:	213f      	movs	r1, #63	; 0x3f
 80010ae:	480a      	ldr	r0, [pc, #40]	; (80010d8 <Reset_IPCC+0x40>)
 80010b0:	f7ff ff58 	bl	8000f64 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80010b4:	213f      	movs	r1, #63	; 0x3f
 80010b6:	4808      	ldr	r0, [pc, #32]	; (80010d8 <Reset_IPCC+0x40>)
 80010b8:	f7ff ff00 	bl	8000ebc <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80010bc:	213f      	movs	r1, #63	; 0x3f
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <Reset_IPCC+0x40>)
 80010c0:	f7ff ff1f 	bl	8000f02 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80010c4:	213f      	movs	r1, #63	; 0x3f
 80010c6:	4804      	ldr	r0, [pc, #16]	; (80010d8 <Reset_IPCC+0x40>)
 80010c8:	f7ff ff0a 	bl	8000ee0 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80010cc:	213f      	movs	r1, #63	; 0x3f
 80010ce:	4802      	ldr	r0, [pc, #8]	; (80010d8 <Reset_IPCC+0x40>)
 80010d0:	f7ff ff29 	bl	8000f26 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80010d4:	bf00      	nop
}
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	58000c00 	.word	0x58000c00

080010dc <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f009 fc9a 	bl	800aa1c <OTP_Read>
 80010e8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	799b      	ldrb	r3, [r3, #6]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fe31 	bl	8000d5c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
}
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <System_Init>:

static void System_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  Init_Smps();
 8001108:	f7ff ff98 	bl	800103c <Init_Smps>

  Init_Exti();
 800110c:	f7ff ff9d 	bl	800104a <Init_Exti>

  Init_Rtc();
 8001110:	f000 f802 	bl	8001118 <Init_Rtc>

  return;
 8001114:	bf00      	nop
}
 8001116:	bd80      	pop	{r7, pc}

08001118 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <Init_Rtc+0x1c>)
 800111e:	f7ff ff4c 	bl	8000fba <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001122:	2100      	movs	r1, #0
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <Init_Rtc+0x1c>)
 8001126:	f7ff ff58 	bl	8000fda <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800112a:	4802      	ldr	r0, [pc, #8]	; (8001134 <Init_Rtc+0x1c>)
 800112c:	f7ff ff38 	bl	8000fa0 <LL_RTC_EnableWriteProtection>

  return;
 8001130:	bf00      	nop
}
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40002800 	.word	0x40002800

08001138 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800113c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001140:	f7ff fe2a 	bl	8000d98 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001144:	f00b facc 	bl	800c6e0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001148:	2004      	movs	r0, #4
 800114a:	f7ff fddd 	bl	8000d08 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800114e:	bf00      	nop
}
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800115a:	f009 f9f5 	bl	800a548 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800115e:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <appe_Tl_Init+0x50>)
 8001160:	2100      	movs	r1, #0
 8001162:	2004      	movs	r0, #4
 8001164:	f00b fbfa 	bl	800c95c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <appe_Tl_Init+0x54>)
 800116a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <appe_Tl_Init+0x58>)
 800116e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001170:	463b      	mov	r3, r7
 8001172:	4619      	mov	r1, r3
 8001174:	480e      	ldr	r0, [pc, #56]	; (80011b0 <appe_Tl_Init+0x5c>)
 8001176:	f009 f8ad 	bl	800a2d4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <appe_Tl_Init+0x60>)
 800117c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <appe_Tl_Init+0x64>)
 8001180:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <appe_Tl_Init+0x68>)
 8001184:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001186:	f240 533c 	movw	r3, #1340	; 0x53c
 800118a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	4618      	mov	r0, r3
 8001192:	f009 fb1b 	bl	800a7cc <TL_MM_Init>

  TL_Enable();
 8001196:	f009 f9d1 	bl	800a53c <TL_Enable>

  return;
 800119a:	bf00      	nop
}
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	0800a30d 	.word	0x0800a30d
 80011a8:	20000664 	.word	0x20000664
 80011ac:	080011c1 	.word	0x080011c1
 80011b0:	080011d9 	.word	0x080011d9
 80011b4:	2000087c 	.word	0x2000087c
 80011b8:	20000770 	.word	0x20000770
 80011bc:	20000128 	.word	0x20000128

080011c0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80011ca:	bf00      	nop
}
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b088      	sub	sp, #32
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	330b      	adds	r3, #11
 80011e6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	f200 80d0 	bhi.w	8001398 <APPE_SysUserEvtRx+0x1c0>
 80011f8:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <APPE_SysUserEvtRx+0x28>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001221 	.word	0x08001221
 8001204:	080012b3 	.word	0x080012b3
 8001208:	080012d5 	.word	0x080012d5
 800120c:	08001399 	.word	0x08001399
 8001210:	08001319 	.word	0x08001319
 8001214:	0800133d 	.word	0x0800133d
 8001218:	08001359 	.word	0x08001359
 800121c:	0800137d 	.word	0x0800137d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4618      	mov	r0, r3
 8001226:	f008 fe11 	bl	8009e4c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800122a:	485e      	ldr	r0, [pc, #376]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800122c:	f009 fbce 	bl	800a9cc <DbgTraceGetFileName>
 8001230:	4601      	mov	r1, r0
 8001232:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001236:	4a5c      	ldr	r2, [pc, #368]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 8001238:	485c      	ldr	r0, [pc, #368]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 800123a:	f00b fdf9 	bl	800ce30 <iprintf>
 800123e:	7b3b      	ldrb	r3, [r7, #12]
 8001240:	4619      	mov	r1, r3
 8001242:	7b7b      	ldrb	r3, [r7, #13]
 8001244:	461a      	mov	r2, r3
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	4859      	ldr	r0, [pc, #356]	; (80013b0 <APPE_SysUserEvtRx+0x1d8>)
 800124a:	f00b fdf1 	bl	800ce30 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800124e:	4855      	ldr	r0, [pc, #340]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 8001250:	f009 fbbc 	bl	800a9cc <DbgTraceGetFileName>
 8001254:	4601      	mov	r1, r0
 8001256:	f240 1369 	movw	r3, #361	; 0x169
 800125a:	4a53      	ldr	r2, [pc, #332]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 800125c:	4853      	ldr	r0, [pc, #332]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 800125e:	f00b fde7 	bl	800ce30 <iprintf>
 8001262:	7c3b      	ldrb	r3, [r7, #16]
 8001264:	4619      	mov	r1, r3
 8001266:	4853      	ldr	r0, [pc, #332]	; (80013b4 <APPE_SysUserEvtRx+0x1dc>)
 8001268:	f00b fde2 	bl	800ce30 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800126c:	484d      	ldr	r0, [pc, #308]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800126e:	f009 fbad 	bl	800a9cc <DbgTraceGetFileName>
 8001272:	4601      	mov	r1, r0
 8001274:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 8001278:	4a4b      	ldr	r2, [pc, #300]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 800127a:	484c      	ldr	r0, [pc, #304]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 800127c:	f00b fdd8 	bl	800ce30 <iprintf>
 8001280:	7dbb      	ldrb	r3, [r7, #22]
 8001282:	4619      	mov	r1, r3
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	461a      	mov	r2, r3
 8001288:	7e3b      	ldrb	r3, [r7, #24]
 800128a:	484b      	ldr	r0, [pc, #300]	; (80013b8 <APPE_SysUserEvtRx+0x1e0>)
 800128c:	f00b fdd0 	bl	800ce30 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001290:	4844      	ldr	r0, [pc, #272]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 8001292:	f009 fb9b 	bl	800a9cc <DbgTraceGetFileName>
 8001296:	4601      	mov	r1, r0
 8001298:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800129c:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 800129e:	4843      	ldr	r0, [pc, #268]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 80012a0:	f00b fdc6 	bl	800ce30 <iprintf>
 80012a4:	4845      	ldr	r0, [pc, #276]	; (80013bc <APPE_SysUserEvtRx+0x1e4>)
 80012a6:	f00b fdc3 	bl	800ce30 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f8e0 	bl	8001470 <APPE_SysEvtReadyProcessing>
    break;
 80012b0:	e073      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012b2:	483c      	ldr	r0, [pc, #240]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 80012b4:	f009 fb8a 	bl	800a9cc <DbgTraceGetFileName>
 80012b8:	4601      	mov	r1, r0
 80012ba:	f240 1371 	movw	r3, #369	; 0x171
 80012be:	4a3a      	ldr	r2, [pc, #232]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 80012c0:	483a      	ldr	r0, [pc, #232]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 80012c2:	f00b fdb5 	bl	800ce30 <iprintf>
 80012c6:	483e      	ldr	r0, [pc, #248]	; (80013c0 <APPE_SysUserEvtRx+0x1e8>)
 80012c8:	f00b fdb2 	bl	800ce30 <iprintf>
    APPE_SysEvtError(pPayload);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f885 	bl	80013dc <APPE_SysEvtError>
    break;
 80012d2:	e062      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80012d4:	4833      	ldr	r0, [pc, #204]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 80012d6:	f009 fb79 	bl	800a9cc <DbgTraceGetFileName>
 80012da:	4601      	mov	r1, r0
 80012dc:	f44f 73bb 	mov.w	r3, #374	; 0x176
 80012e0:	4a31      	ldr	r2, [pc, #196]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 80012e2:	4832      	ldr	r0, [pc, #200]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 80012e4:	f00b fda4 	bl	800ce30 <iprintf>
 80012e8:	4836      	ldr	r0, [pc, #216]	; (80013c4 <APPE_SysUserEvtRx+0x1ec>)
 80012ea:	f00b fe3d 	bl	800cf68 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80012ee:	482d      	ldr	r0, [pc, #180]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 80012f0:	f009 fb6c 	bl	800a9cc <DbgTraceGetFileName>
 80012f4:	4601      	mov	r1, r0
 80012f6:	f240 1377 	movw	r3, #375	; 0x177
 80012fa:	4a2b      	ldr	r2, [pc, #172]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 80012fc:	482b      	ldr	r0, [pc, #172]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 80012fe:	f00b fd97 	bl	800ce30 <iprintf>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3302      	adds	r3, #2
 8001306:	6819      	ldr	r1, [r3, #0]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	3302      	adds	r3, #2
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	461a      	mov	r2, r3
 8001310:	482d      	ldr	r0, [pc, #180]	; (80013c8 <APPE_SysUserEvtRx+0x1f0>)
 8001312:	f00b fd8d 	bl	800ce30 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001316:	e040      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001318:	4822      	ldr	r0, [pc, #136]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800131a:	f009 fb57 	bl	800a9cc <DbgTraceGetFileName>
 800131e:	4601      	mov	r1, r0
 8001320:	f240 137d 	movw	r3, #381	; 0x17d
 8001324:	4a20      	ldr	r2, [pc, #128]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 8001326:	4821      	ldr	r0, [pc, #132]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 8001328:	f00b fd82 	bl	800ce30 <iprintf>
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	3302      	adds	r3, #2
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4619      	mov	r1, r3
 8001334:	4825      	ldr	r0, [pc, #148]	; (80013cc <APPE_SysUserEvtRx+0x1f4>)
 8001336:	f00b fd7b 	bl	800ce30 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800133a:	e02e      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800133c:	4819      	ldr	r0, [pc, #100]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800133e:	f009 fb45 	bl	800a9cc <DbgTraceGetFileName>
 8001342:	4601      	mov	r1, r0
 8001344:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8001348:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 800134a:	4818      	ldr	r0, [pc, #96]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 800134c:	f00b fd70 	bl	800ce30 <iprintf>
 8001350:	481f      	ldr	r0, [pc, #124]	; (80013d0 <APPE_SysUserEvtRx+0x1f8>)
 8001352:	f00b fd6d 	bl	800ce30 <iprintf>
    break;
 8001356:	e020      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001358:	4812      	ldr	r0, [pc, #72]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800135a:	f009 fb37 	bl	800a9cc <DbgTraceGetFileName>
 800135e:	4601      	mov	r1, r0
 8001360:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8001364:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 8001366:	4811      	ldr	r0, [pc, #68]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 8001368:	f00b fd62 	bl	800ce30 <iprintf>
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	3302      	adds	r3, #2
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4619      	mov	r1, r3
 8001374:	4817      	ldr	r0, [pc, #92]	; (80013d4 <APPE_SysUserEvtRx+0x1fc>)
 8001376:	f00b fd5b 	bl	800ce30 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 800137a:	e00e      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <APPE_SysUserEvtRx+0x1cc>)
 800137e:	f009 fb25 	bl	800a9cc <DbgTraceGetFileName>
 8001382:	4601      	mov	r1, r0
 8001384:	f240 138b 	movw	r3, #395	; 0x18b
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <APPE_SysUserEvtRx+0x1d0>)
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <APPE_SysUserEvtRx+0x1d4>)
 800138c:	f00b fd50 	bl	800ce30 <iprintf>
 8001390:	4811      	ldr	r0, [pc, #68]	; (80013d8 <APPE_SysUserEvtRx+0x200>)
 8001392:	f00b fd4d 	bl	800ce30 <iprintf>
    break;
 8001396:	e000      	b.n	800139a <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001398:	bf00      	nop
  }

  return;
 800139a:	bf00      	nop
}
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	0800e1bc 	.word	0x0800e1bc
 80013a8:	0800fc84 	.word	0x0800fc84
 80013ac:	0800e1d4 	.word	0x0800e1d4
 80013b0:	0800e1e8 	.word	0x0800e1e8
 80013b4:	0800e20c 	.word	0x0800e20c
 80013b8:	0800e228 	.word	0x0800e228
 80013bc:	0800e240 	.word	0x0800e240
 80013c0:	0800e260 	.word	0x0800e260
 80013c4:	0800e284 	.word	0x0800e284
 80013c8:	0800e2d4 	.word	0x0800e2d4
 80013cc:	0800e2fc 	.word	0x0800e2fc
 80013d0:	0800e338 	.word	0x0800e338
 80013d4:	0800e35c 	.word	0x0800e35c
 80013d8:	0800e398 	.word	0x0800e398

080013dc <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	330b      	adds	r3, #11
 80013ea:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3302      	adds	r3, #2
 80013f0:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80013f2:	4819      	ldr	r0, [pc, #100]	; (8001458 <APPE_SysEvtError+0x7c>)
 80013f4:	f009 faea 	bl	800a9cc <DbgTraceGetFileName>
 80013f8:	4601      	mov	r1, r0
 80013fa:	f240 13a3 	movw	r3, #419	; 0x1a3
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <APPE_SysEvtError+0x80>)
 8001400:	4817      	ldr	r0, [pc, #92]	; (8001460 <APPE_SysEvtError+0x84>)
 8001402:	f00b fd15 	bl	800ce30 <iprintf>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	4815      	ldr	r0, [pc, #84]	; (8001464 <APPE_SysEvtError+0x88>)
 800140e:	f00b fd0f 	bl	800ce30 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10d      	bne.n	8001436 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800141a:	480f      	ldr	r0, [pc, #60]	; (8001458 <APPE_SysEvtError+0x7c>)
 800141c:	f009 fad6 	bl	800a9cc <DbgTraceGetFileName>
 8001420:	4601      	mov	r1, r0
 8001422:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <APPE_SysEvtError+0x80>)
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <APPE_SysEvtError+0x84>)
 800142a:	f00b fd01 	bl	800ce30 <iprintf>
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <APPE_SysEvtError+0x8c>)
 8001430:	f00b fd9a 	bl	800cf68 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001434:	e00d      	b.n	8001452 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <APPE_SysEvtError+0x7c>)
 8001438:	f009 fac8 	bl	800a9cc <DbgTraceGetFileName>
 800143c:	4601      	mov	r1, r0
 800143e:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 8001442:	4a06      	ldr	r2, [pc, #24]	; (800145c <APPE_SysEvtError+0x80>)
 8001444:	4806      	ldr	r0, [pc, #24]	; (8001460 <APPE_SysEvtError+0x84>)
 8001446:	f00b fcf3 	bl	800ce30 <iprintf>
 800144a:	4808      	ldr	r0, [pc, #32]	; (800146c <APPE_SysEvtError+0x90>)
 800144c:	f00b fd8c 	bl	800cf68 <puts>
  return;
 8001450:	bf00      	nop
}
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	0800e1bc 	.word	0x0800e1bc
 800145c:	0800fc98 	.word	0x0800fc98
 8001460:	0800e1d4 	.word	0x0800e1d4
 8001464:	0800e3bc 	.word	0x0800e3bc
 8001468:	0800e3ec 	.word	0x0800e3ec
 800146c:	0800e428 	.word	0x0800e428

08001470 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	330b      	adds	r3, #11
 8001494:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3302      	adds	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d146      	bne.n	8001532 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80014a4:	4836      	ldr	r0, [pc, #216]	; (8001580 <APPE_SysEvtReadyProcessing+0x110>)
 80014a6:	f009 fa91 	bl	800a9cc <DbgTraceGetFileName>
 80014aa:	4601      	mov	r1, r0
 80014ac:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80014b0:	4a34      	ldr	r2, [pc, #208]	; (8001584 <APPE_SysEvtReadyProcessing+0x114>)
 80014b2:	4835      	ldr	r0, [pc, #212]	; (8001588 <APPE_SysEvtReadyProcessing+0x118>)
 80014b4:	f00b fcbc 	bl	800ce30 <iprintf>
 80014b8:	4834      	ldr	r0, [pc, #208]	; (800158c <APPE_SysEvtReadyProcessing+0x11c>)
 80014ba:	f00b fd55 	bl	800cf68 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80014be:	f7ff fc07 	bl	8000cd0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80014c2:	230f      	movs	r3, #15
 80014c4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80014c6:	237f      	movs	r3, #127	; 0x7f
 80014c8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80014ca:	f7ff fce9 	bl	8000ea0 <LL_DBGMCU_GetRevisionID>
 80014ce:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80014d0:	482b      	ldr	r0, [pc, #172]	; (8001580 <APPE_SysEvtReadyProcessing+0x110>)
 80014d2:	f009 fa7b 	bl	800a9cc <DbgTraceGetFileName>
 80014d6:	4601      	mov	r1, r0
 80014d8:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 80014dc:	4a29      	ldr	r2, [pc, #164]	; (8001584 <APPE_SysEvtReadyProcessing+0x114>)
 80014de:	482a      	ldr	r0, [pc, #168]	; (8001588 <APPE_SysEvtReadyProcessing+0x118>)
 80014e0:	f00b fca6 	bl	800ce30 <iprintf>
 80014e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014e6:	482a      	ldr	r0, [pc, #168]	; (8001590 <APPE_SysEvtReadyProcessing+0x120>)
 80014e8:	f00b fca2 	bl	800ce30 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80014f2:	f7ff fcc7 	bl	8000e84 <LL_DBGMCU_GetDeviceID>
 80014f6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80014f8:	4821      	ldr	r0, [pc, #132]	; (8001580 <APPE_SysEvtReadyProcessing+0x110>)
 80014fa:	f009 fa67 	bl	800a9cc <DbgTraceGetFileName>
 80014fe:	4601      	mov	r1, r0
 8001500:	f240 13df 	movw	r3, #479	; 0x1df
 8001504:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <APPE_SysEvtReadyProcessing+0x114>)
 8001506:	4820      	ldr	r0, [pc, #128]	; (8001588 <APPE_SysEvtReadyProcessing+0x118>)
 8001508:	f00b fc92 	bl	800ce30 <iprintf>
 800150c:	6a39      	ldr	r1, [r7, #32]
 800150e:	4821      	ldr	r0, [pc, #132]	; (8001594 <APPE_SysEvtReadyProcessing+0x124>)
 8001510:	f00b fc8e 	bl	800ce30 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	b29b      	uxth	r3, r3
 8001518:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	4618      	mov	r0, r3
 8001520:	f008 fc7e 	bl	8009e20 <SHCI_C2_Config>

    APP_BLE_Init();
 8001524:	f009 fb84 	bl	800ac30 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001528:	2100      	movs	r1, #0
 800152a:	2001      	movs	r0, #1
 800152c:	f00b f8ea 	bl	800c704 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001530:	e022      	b.n	8001578 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d110      	bne.n	800155c <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800153a:	4811      	ldr	r0, [pc, #68]	; (8001580 <APPE_SysEvtReadyProcessing+0x110>)
 800153c:	f009 fa46 	bl	800a9cc <DbgTraceGetFileName>
 8001540:	4601      	mov	r1, r0
 8001542:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <APPE_SysEvtReadyProcessing+0x114>)
 8001548:	480f      	ldr	r0, [pc, #60]	; (8001588 <APPE_SysEvtReadyProcessing+0x118>)
 800154a:	f00b fc71 	bl	800ce30 <iprintf>
 800154e:	4812      	ldr	r0, [pc, #72]	; (8001598 <APPE_SysEvtReadyProcessing+0x128>)
 8001550:	f00b fc6e 	bl	800ce30 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	701a      	strb	r2, [r3, #0]
  return;
 800155a:	e00d      	b.n	8001578 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800155c:	4808      	ldr	r0, [pc, #32]	; (8001580 <APPE_SysEvtReadyProcessing+0x110>)
 800155e:	f009 fa35 	bl	800a9cc <DbgTraceGetFileName>
 8001562:	4601      	mov	r1, r0
 8001564:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <APPE_SysEvtReadyProcessing+0x114>)
 800156a:	4807      	ldr	r0, [pc, #28]	; (8001588 <APPE_SysEvtReadyProcessing+0x118>)
 800156c:	f00b fc60 	bl	800ce30 <iprintf>
 8001570:	480a      	ldr	r0, [pc, #40]	; (800159c <APPE_SysEvtReadyProcessing+0x12c>)
 8001572:	f00b fc5d 	bl	800ce30 <iprintf>
  return;
 8001576:	bf00      	nop
}
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	0800e1bc 	.word	0x0800e1bc
 8001584:	0800fcac 	.word	0x0800fcac
 8001588:	0800e1d4 	.word	0x0800e1d4
 800158c:	0800e460 	.word	0x0800e460
 8001590:	0800e47c 	.word	0x0800e47c
 8001594:	0800e4a0 	.word	0x0800e4a0
 8001598:	0800e4c0 	.word	0x0800e4c0
 800159c:	0800e4f4 	.word	0x0800e4f4

080015a0 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f001 fe70 	bl	800328c <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d00a      	beq.n	80015d0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80015ba:	f001 fe7f 	bl	80032bc <HAL_GetTickFreq>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c8:	e002      	b.n	80015d0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80015ca:	f7ff fcd9 	bl	8000f80 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80015ce:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80015d0:	f001 fe5c 	bl	800328c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8f4      	bhi.n	80015ca <HAL_Delay+0x2a>
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015ee:	f04f 30ff 	mov.w	r0, #4294967295
 80015f2:	f00b f8b7 	bl	800c764 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}

080015fa <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80015fe:	bf00      	nop
}
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001612:	f04f 30ff 	mov.w	r0, #4294967295
 8001616:	f00b f8a5 	bl	800c764 <UTIL_SEQ_Run>

  return;
 800161a:	bf00      	nop
}
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800162a:	2100      	movs	r1, #0
 800162c:	2004      	movs	r0, #4
 800162e:	f00b f9b7 	bl	800c9a0 <UTIL_SEQ_SetTask>
  return;
 8001632:	bf00      	nop
}
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001642:	2002      	movs	r0, #2
 8001644:	f00b fa18 	bl	800ca78 <UTIL_SEQ_SetEvt>
  return;
 8001648:	bf00      	nop
}
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001658:	2002      	movs	r0, #2
 800165a:	f00b fa2d 	bl	800cab8 <UTIL_SEQ_WaitEvt>
  return;
 800165e:	bf00      	nop
}
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <LL_AHB1_GRP1_EnableClock>:
{
 8001666:	b480      	push	{r7}
 8001668:	b085      	sub	sp, #20
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4313      	orrs	r3, r2
 800167c:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800167e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001682:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4013      	ands	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800169c:	2004      	movs	r0, #4
 800169e:	f7ff ffe2 	bl	8001666 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016a2:	2002      	movs	r0, #2
 80016a4:	f7ff ffdf 	bl	8001666 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a8:	2001      	movs	r0, #1
 80016aa:	f7ff ffdc 	bl	8001666 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	200b      	movs	r0, #11
 80016b4:	f001 ff49 	bl	800354a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b8:	200b      	movs	r0, #11
 80016ba:	f001 ff60 	bl	800357e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	203a      	movs	r0, #58	; 0x3a
 80016c4:	f001 ff41 	bl	800354a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80016c8:	203a      	movs	r0, #58	; 0x3a
 80016ca:	f001 ff58 	bl	800357e <HAL_NVIC_EnableIRQ>

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <LL_AHB2_GRP1_EnableClock>:
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4013      	ands	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001718:	2004      	movs	r0, #4
 800171a:	f7ff ffda 	bl	80016d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff ffd7 	bl	80016d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001724:	2002      	movs	r0, #2
 8001726:	f7ff ffd4 	bl	80016d2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172a:	2008      	movs	r0, #8
 800172c:	f7ff ffd1 	bl	80016d2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_RST_GPIO_Port, ESP32_RST_Pin, GPIO_PIN_RESET);
 8001730:	2200      	movs	r2, #0
 8001732:	2108      	movs	r1, #8
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f002 fde2 	bl	8004300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	2123      	movs	r1, #35	; 0x23
 8001740:	4828      	ldr	r0, [pc, #160]	; (80017e4 <MX_GPIO_Init+0xe0>)
 8001742:	f002 fddd 	bl	8004300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP32_RST_Pin;
 8001746:	2308      	movs	r3, #8
 8001748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ESP32_RST_GPIO_Port, &GPIO_InitStruct);
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	4619      	mov	r1, r3
 800175a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175e:	f002 fc5f 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001762:	2310      	movs	r3, #16
 8001764:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001766:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800176a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176c:	2301      	movs	r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001770:	1d3b      	adds	r3, r7, #4
 8001772:	4619      	mov	r1, r3
 8001774:	481c      	ldr	r0, [pc, #112]	; (80017e8 <MX_GPIO_Init+0xe4>)
 8001776:	f002 fc53 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800177a:	2323      	movs	r3, #35	; 0x23
 800177c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4619      	mov	r1, r3
 800178e:	4815      	ldr	r0, [pc, #84]	; (80017e4 <MX_GPIO_Init+0xe0>)
 8001790:	f002 fc46 	bl	8004020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001794:	2303      	movs	r3, #3
 8001796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001798:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800179c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179e:	2301      	movs	r3, #1
 80017a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4811      	ldr	r0, [pc, #68]	; (80017ec <MX_GPIO_Init+0xe8>)
 80017a8:	f002 fc3a 	bl	8004020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2006      	movs	r0, #6
 80017b2:	f001 feca 	bl	800354a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017b6:	2006      	movs	r0, #6
 80017b8:	f001 fee1 	bl	800357e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	2007      	movs	r0, #7
 80017c2:	f001 fec2 	bl	800354a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017c6:	2007      	movs	r0, #7
 80017c8:	f001 fed9 	bl	800357e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2100      	movs	r1, #0
 80017d0:	200a      	movs	r0, #10
 80017d2:	f001 feba 	bl	800354a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80017d6:	200a      	movs	r0, #10
 80017d8:	f001 fed1 	bl	800357e <HAL_NVIC_EnableIRQ>

}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	48000400 	.word	0x48000400
 80017e8:	48000800 	.word	0x48000800
 80017ec:	48000c00 	.word	0x48000c00

080017f0 <LL_EXTI_EnableIT_0_31>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <LL_EXTI_EnableIT_0_31+0x24>)
 80017fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017fe:	4905      	ldr	r1, [pc, #20]	; (8001814 <LL_EXTI_EnableIT_0_31+0x24>)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4313      	orrs	r3, r2
 8001804:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	58000800 	.word	0x58000800

08001818 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4904      	ldr	r1, [pc, #16]	; (8001838 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]

}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	58000800 	.word	0x58000800

0800183c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <ReadRtcSsrValue+0x3c>)
 8001844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001846:	b29b      	uxth	r3, r3
 8001848:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <ReadRtcSsrValue+0x3c>)
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	b29b      	uxth	r3, r3
 8001850:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001852:	e005      	b.n	8001860 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <ReadRtcSsrValue+0x3c>)
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	b29b      	uxth	r3, r3
 800185e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d1f5      	bne.n	8001854 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001868:	683b      	ldr	r3, [r7, #0]
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40002800 	.word	0x40002800

0800187c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800188c:	79ba      	ldrb	r2, [r7, #6]
 800188e:	491d      	ldr	r1, [pc, #116]	; (8001904 <LinkTimerAfter+0x88>)
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	440b      	add	r3, r1
 800189a:	3315      	adds	r3, #21
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d009      	beq.n	80018ba <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	4916      	ldr	r1, [pc, #88]	; (8001904 <LinkTimerAfter+0x88>)
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	3314      	adds	r3, #20
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80018ba:	79fa      	ldrb	r2, [r7, #7]
 80018bc:	4911      	ldr	r1, [pc, #68]	; (8001904 <LinkTimerAfter+0x88>)
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	440b      	add	r3, r1
 80018c8:	3315      	adds	r3, #21
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80018ce:	79fa      	ldrb	r2, [r7, #7]
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <LinkTimerAfter+0x88>)
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	440b      	add	r3, r1
 80018dc:	3314      	adds	r3, #20
 80018de:	79ba      	ldrb	r2, [r7, #6]
 80018e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80018e2:	79ba      	ldrb	r2, [r7, #6]
 80018e4:	4907      	ldr	r1, [pc, #28]	; (8001904 <LinkTimerAfter+0x88>)
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	440b      	add	r3, r1
 80018f0:	3315      	adds	r3, #21
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	701a      	strb	r2, [r3, #0]

  return;
 80018f6:	bf00      	nop
}
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000a04 	.word	0x20000a04

08001908 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	460a      	mov	r2, r1
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	4613      	mov	r3, r2
 8001916:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001918:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <LinkTimerBefore+0xb8>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	79ba      	ldrb	r2, [r7, #6]
 8001920:	429a      	cmp	r2, r3
 8001922:	d032      	beq.n	800198a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001924:	79ba      	ldrb	r2, [r7, #6]
 8001926:	4927      	ldr	r1, [pc, #156]	; (80019c4 <LinkTimerBefore+0xbc>)
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	3314      	adds	r3, #20
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	4922      	ldr	r1, [pc, #136]	; (80019c4 <LinkTimerBefore+0xbc>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3315      	adds	r3, #21
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800194c:	79fa      	ldrb	r2, [r7, #7]
 800194e:	491d      	ldr	r1, [pc, #116]	; (80019c4 <LinkTimerBefore+0xbc>)
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3315      	adds	r3, #21
 800195c:	79ba      	ldrb	r2, [r7, #6]
 800195e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001960:	79fa      	ldrb	r2, [r7, #7]
 8001962:	4918      	ldr	r1, [pc, #96]	; (80019c4 <LinkTimerBefore+0xbc>)
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	3314      	adds	r3, #20
 8001970:	7bfa      	ldrb	r2, [r7, #15]
 8001972:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001974:	79ba      	ldrb	r2, [r7, #6]
 8001976:	4913      	ldr	r1, [pc, #76]	; (80019c4 <LinkTimerBefore+0xbc>)
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	3314      	adds	r3, #20
 8001984:	79fa      	ldrb	r2, [r7, #7]
 8001986:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001988:	e014      	b.n	80019b4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800198a:	79fa      	ldrb	r2, [r7, #7]
 800198c:	490d      	ldr	r1, [pc, #52]	; (80019c4 <LinkTimerBefore+0xbc>)
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	3315      	adds	r3, #21
 800199a:	79ba      	ldrb	r2, [r7, #6]
 800199c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800199e:	79ba      	ldrb	r2, [r7, #6]
 80019a0:	4908      	ldr	r1, [pc, #32]	; (80019c4 <LinkTimerBefore+0xbc>)
 80019a2:	4613      	mov	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	440b      	add	r3, r1
 80019ac:	3314      	adds	r3, #20
 80019ae:	79fa      	ldrb	r2, [r7, #7]
 80019b0:	701a      	strb	r2, [r3, #0]
  return;
 80019b2:	bf00      	nop
}
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000a94 	.word	0x20000a94
 80019c4:	20000a04 	.word	0x20000a04

080019c8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019d2:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <linkTimer+0x144>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b06      	cmp	r3, #6
 80019da:	d118      	bne.n	8001a0e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80019dc:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <linkTimer+0x144>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b4b      	ldr	r3, [pc, #300]	; (8001b10 <linkTimer+0x148>)
 80019e4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80019e6:	4a49      	ldr	r2, [pc, #292]	; (8001b0c <linkTimer+0x144>)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80019ec:	79fa      	ldrb	r2, [r7, #7]
 80019ee:	4949      	ldr	r1, [pc, #292]	; (8001b14 <linkTimer+0x14c>)
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	3315      	adds	r3, #21
 80019fc:	2206      	movs	r2, #6
 80019fe:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a00:	4b45      	ldr	r3, [pc, #276]	; (8001b18 <linkTimer+0x150>)
 8001a02:	f04f 32ff 	mov.w	r2, #4294967295
 8001a06:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	81fb      	strh	r3, [r7, #14]
 8001a0c:	e078      	b.n	8001b00 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001a0e:	f000 f909 	bl	8001c24 <ReturnTimeElapsed>
 8001a12:	4603      	mov	r3, r0
 8001a14:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001a16:	79fa      	ldrb	r2, [r7, #7]
 8001a18:	493e      	ldr	r1, [pc, #248]	; (8001b14 <linkTimer+0x14c>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	3308      	adds	r3, #8
 8001a26:	6819      	ldr	r1, [r3, #0]
 8001a28:	89fb      	ldrh	r3, [r7, #14]
 8001a2a:	79fa      	ldrb	r2, [r7, #7]
 8001a2c:	4419      	add	r1, r3
 8001a2e:	4839      	ldr	r0, [pc, #228]	; (8001b14 <linkTimer+0x14c>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4403      	add	r3, r0
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001a3e:	79fa      	ldrb	r2, [r7, #7]
 8001a40:	4934      	ldr	r1, [pc, #208]	; (8001b14 <linkTimer+0x14c>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3308      	adds	r3, #8
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <linkTimer+0x144>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4a2e      	ldr	r2, [pc, #184]	; (8001b14 <linkTimer+0x14c>)
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	440b      	add	r3, r1
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	3308      	adds	r3, #8
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d337      	bcc.n	8001ae0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <linkTimer+0x144>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001a76:	7b7a      	ldrb	r2, [r7, #13]
 8001a78:	4926      	ldr	r1, [pc, #152]	; (8001b14 <linkTimer+0x14c>)
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	440b      	add	r3, r1
 8001a84:	3315      	adds	r3, #21
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a8a:	e013      	b.n	8001ab4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001a8c:	7b7a      	ldrb	r2, [r7, #13]
 8001a8e:	4921      	ldr	r1, [pc, #132]	; (8001b14 <linkTimer+0x14c>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	3315      	adds	r3, #21
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001aa0:	7b7a      	ldrb	r2, [r7, #13]
 8001aa2:	491c      	ldr	r1, [pc, #112]	; (8001b14 <linkTimer+0x14c>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	3315      	adds	r3, #21
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ab4:	7b3b      	ldrb	r3, [r7, #12]
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d00b      	beq.n	8001ad2 <linkTimer+0x10a>
 8001aba:	7b3a      	ldrb	r2, [r7, #12]
 8001abc:	4915      	ldr	r1, [pc, #84]	; (8001b14 <linkTimer+0x14c>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3308      	adds	r3, #8
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d2dc      	bcs.n	8001a8c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001ad2:	7b7a      	ldrb	r2, [r7, #13]
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fecf 	bl	800187c <LinkTimerAfter>
 8001ade:	e00f      	b.n	8001b00 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <linkTimer+0x144>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4611      	mov	r1, r2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff0c 	bl	8001908 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <linkTimer+0x144>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <linkTimer+0x148>)
 8001af8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <linkTimer+0x144>)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001b00:	89fb      	ldrh	r3, [r7, #14]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000a94 	.word	0x20000a94
 8001b10:	20000a95 	.word	0x20000a95
 8001b14:	20000a04 	.word	0x20000a04
 8001b18:	20000a98 	.word	0x20000a98

08001b1c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	460a      	mov	r2, r1
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001b2c:	4b39      	ldr	r3, [pc, #228]	; (8001c14 <UnlinkTimer+0xf8>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	79fa      	ldrb	r2, [r7, #7]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d111      	bne.n	8001b5c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <UnlinkTimer+0xf8>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b36      	ldr	r3, [pc, #216]	; (8001c18 <UnlinkTimer+0xfc>)
 8001b40:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001b42:	79fa      	ldrb	r2, [r7, #7]
 8001b44:	4935      	ldr	r1, [pc, #212]	; (8001c1c <UnlinkTimer+0x100>)
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	440b      	add	r3, r1
 8001b50:	3315      	adds	r3, #21
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <UnlinkTimer+0xf8>)
 8001b58:	701a      	strb	r2, [r3, #0]
 8001b5a:	e03e      	b.n	8001bda <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001b5c:	79fa      	ldrb	r2, [r7, #7]
 8001b5e:	492f      	ldr	r1, [pc, #188]	; (8001c1c <UnlinkTimer+0x100>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	3314      	adds	r3, #20
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001b70:	79fa      	ldrb	r2, [r7, #7]
 8001b72:	492a      	ldr	r1, [pc, #168]	; (8001c1c <UnlinkTimer+0x100>)
 8001b74:	4613      	mov	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	4413      	add	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3315      	adds	r3, #21
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001b84:	79f9      	ldrb	r1, [r7, #7]
 8001b86:	7bfa      	ldrb	r2, [r7, #15]
 8001b88:	4824      	ldr	r0, [pc, #144]	; (8001c1c <UnlinkTimer+0x100>)
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	440b      	add	r3, r1
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4403      	add	r3, r0
 8001b94:	3315      	adds	r3, #21
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2d8      	uxtb	r0, r3
 8001b9a:	4920      	ldr	r1, [pc, #128]	; (8001c1c <UnlinkTimer+0x100>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3315      	adds	r3, #21
 8001ba8:	4602      	mov	r2, r0
 8001baa:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d013      	beq.n	8001bda <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001bb2:	79f9      	ldrb	r1, [r7, #7]
 8001bb4:	7bba      	ldrb	r2, [r7, #14]
 8001bb6:	4819      	ldr	r0, [pc, #100]	; (8001c1c <UnlinkTimer+0x100>)
 8001bb8:	460b      	mov	r3, r1
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	440b      	add	r3, r1
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4403      	add	r3, r0
 8001bc2:	3314      	adds	r3, #20
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b2d8      	uxtb	r0, r3
 8001bc8:	4914      	ldr	r1, [pc, #80]	; (8001c1c <UnlinkTimer+0x100>)
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	440b      	add	r3, r1
 8001bd4:	3314      	adds	r3, #20
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001bda:	79fa      	ldrb	r2, [r7, #7]
 8001bdc:	490f      	ldr	r1, [pc, #60]	; (8001c1c <UnlinkTimer+0x100>)
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	330c      	adds	r3, #12
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <UnlinkTimer+0xf8>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b06      	cmp	r3, #6
 8001bf6:	d107      	bne.n	8001c08 <UnlinkTimer+0xec>
 8001bf8:	79bb      	ldrb	r3, [r7, #6]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d104      	bne.n	8001c08 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001bfe:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <UnlinkTimer+0x104>)
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	601a      	str	r2, [r3, #0]
  }

  return;
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
}
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	20000a94 	.word	0x20000a94
 8001c18:	20000a95 	.word	0x20000a95
 8001c1c:	20000a04 	.word	0x20000a04
 8001c20:	20000a98 	.word	0x20000a98

08001c24 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <ReturnTimeElapsed+0x70>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c32:	d026      	beq.n	8001c82 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001c34:	f7ff fe02 	bl	800183c <ReadRtcSsrValue>
 8001c38:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <ReturnTimeElapsed+0x70>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d805      	bhi.n	8001c50 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <ReturnTimeElapsed+0x70>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	607b      	str	r3, [r7, #4]
 8001c4e:	e00a      	b.n	8001c66 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <ReturnTimeElapsed+0x74>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	461a      	mov	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <ReturnTimeElapsed+0x70>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001c66:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <ReturnTimeElapsed+0x78>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <ReturnTimeElapsed+0x7c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	40d3      	lsrs	r3, r2
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	e001      	b.n	8001c86 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	b29b      	uxth	r3, r3
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000a98 	.word	0x20000a98
 8001c98:	20000aa0 	.word	0x20000aa0
 8001c9c:	20000a9e 	.word	0x20000a9e
 8001ca0:	20000a9d 	.word	0x20000a9d

08001ca4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d108      	bne.n	8001cc6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001cb4:	f7ff fdc2 	bl	800183c <ReadRtcSsrValue>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <RestartWakeupCounter+0x9c>)
 8001cbc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f001 fc85 	bl	80035ce <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001cc4:	e039      	b.n	8001d3a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d803      	bhi.n	8001cd4 <RestartWakeupCounter+0x30>
 8001ccc:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <RestartWakeupCounter+0xa0>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d002      	beq.n	8001cda <RestartWakeupCounter+0x36>
      Value -= 1;
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001cda:	bf00      	nop
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <RestartWakeupCounter+0xa4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f8      	beq.n	8001cdc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <RestartWakeupCounter+0xa4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	b2da      	uxtb	r2, r3
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <RestartWakeupCounter+0xa4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001cfa:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <RestartWakeupCounter+0xa8>)
 8001cfe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d02:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d04:	2003      	movs	r0, #3
 8001d06:	f001 fc70 	bl	80035ea <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <RestartWakeupCounter+0xac>)
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	041b      	lsls	r3, r3, #16
 8001d12:	88fa      	ldrh	r2, [r7, #6]
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <RestartWakeupCounter+0xac>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d1a:	f7ff fd8f 	bl	800183c <ReadRtcSsrValue>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <RestartWakeupCounter+0x9c>)
 8001d22:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <RestartWakeupCounter+0xa4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <RestartWakeupCounter+0xa4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d32:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001d34:	f3af 8000 	nop.w
  return ;
 8001d38:	bf00      	nop
}
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000a98 	.word	0x20000a98
 8001d44:	20000a9d 	.word	0x20000a9d
 8001d48:	20000ae8 	.word	0x20000ae8
 8001d4c:	58000800 	.word	0x58000800
 8001d50:	40002800 	.word	0x40002800

08001d54 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d5a:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <RescheduleTimerList+0x11c>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d66:	d107      	bne.n	8001d78 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d68:	bf00      	nop
 8001d6a:	4b42      	ldr	r3, [pc, #264]	; (8001e74 <RescheduleTimerList+0x120>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f8      	bne.n	8001d6a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001d78:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <RescheduleTimerList+0x120>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <RescheduleTimerList+0x120>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d86:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001d88:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <RescheduleTimerList+0x124>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	493a      	ldr	r1, [pc, #232]	; (8001e7c <RescheduleTimerList+0x128>)
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3308      	adds	r3, #8
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001da2:	f7ff ff3f 	bl	8001c24 <ReturnTimeElapsed>
 8001da6:	4603      	mov	r3, r0
 8001da8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d205      	bcs.n	8001dbe <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <RescheduleTimerList+0x12c>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e04d      	b.n	8001e5a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4a30      	ldr	r2, [pc, #192]	; (8001e84 <RescheduleTimerList+0x130>)
 8001dc2:	8812      	ldrh	r2, [r2, #0]
 8001dc4:	b292      	uxth	r2, r2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d906      	bls.n	8001dde <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <RescheduleTimerList+0x130>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	; (8001e80 <RescheduleTimerList+0x12c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e03d      	b.n	8001e5a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <RescheduleTimerList+0x12c>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001dee:	e034      	b.n	8001e5a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001df0:	7bfa      	ldrb	r2, [r7, #15]
 8001df2:	4922      	ldr	r1, [pc, #136]	; (8001e7c <RescheduleTimerList+0x128>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3308      	adds	r3, #8
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d20a      	bcs.n	8001e1e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	491c      	ldr	r1, [pc, #112]	; (8001e7c <RescheduleTimerList+0x128>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	3308      	adds	r3, #8
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e013      	b.n	8001e46 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001e1e:	7bfa      	ldrb	r2, [r7, #15]
 8001e20:	4916      	ldr	r1, [pc, #88]	; (8001e7c <RescheduleTimerList+0x128>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3308      	adds	r3, #8
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	1ac9      	subs	r1, r1, r3
 8001e36:	4811      	ldr	r0, [pc, #68]	; (8001e7c <RescheduleTimerList+0x128>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4403      	add	r3, r0
 8001e42:	3308      	adds	r3, #8
 8001e44:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001e46:	7bfa      	ldrb	r2, [r7, #15]
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <RescheduleTimerList+0x128>)
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	3315      	adds	r3, #21
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d1c7      	bne.n	8001df0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001e60:	89bb      	ldrh	r3, [r7, #12]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff1e 	bl	8001ca4 <RestartWakeupCounter>

  return ;
 8001e68:	bf00      	nop
}
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40002800 	.word	0x40002800
 8001e74:	20000ae8 	.word	0x20000ae8
 8001e78:	20000a94 	.word	0x20000a94
 8001e7c:	20000a04 	.word	0x20000a04
 8001e80:	20000a9c 	.word	0x20000a9c
 8001e84:	20000aa2 	.word	0x20000aa2

08001e88 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e92:	617b      	str	r3, [r7, #20]
  return(result);
 8001e94:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e9c:	4b59      	ldr	r3, [pc, #356]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	22ca      	movs	r2, #202	; 0xca
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
 8001ea4:	4b57      	ldr	r3, [pc, #348]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2253      	movs	r2, #83	; 0x53
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001eac:	4b55      	ldr	r3, [pc, #340]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	4b54      	ldr	r3, [pc, #336]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eba:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001ebc:	4b52      	ldr	r3, [pc, #328]	; (8002008 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001ec4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ec8:	4950      	ldr	r1, [pc, #320]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	330c      	adds	r3, #12
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d16e      	bne.n	8001fbc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001ede:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ee2:	494a      	ldr	r1, [pc, #296]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	440b      	add	r3, r1
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001ef2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ef6:	4945      	ldr	r1, [pc, #276]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	3310      	adds	r3, #16
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001f08:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04c      	beq.n	8001fac <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001f12:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f16:	493d      	ldr	r1, [pc, #244]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	440b      	add	r3, r1
 8001f22:	330d      	adds	r3, #13
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d124      	bne.n	8001f76 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f30:	2101      	movs	r1, #1
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fdf2 	bl	8001b1c <UnlinkTimer>
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f383 8810 	msr	PRIMASK, r3
}
 8001f42:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001f44:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f48:	4930      	ldr	r1, [pc, #192]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3304      	adds	r3, #4
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f9b8 	bl	80022d4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	22ca      	movs	r2, #202	; 0xca
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f6c:	4b25      	ldr	r3, [pc, #148]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2253      	movs	r2, #83	; 0x53
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24
 8001f74:	e012      	b.n	8001f9c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f383 8810 	msr	PRIMASK, r3
}
 8001f80:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001f82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 f920 	bl	80021cc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	22ca      	movs	r2, #202	; 0xca
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2253      	movs	r2, #83	; 0x53
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001f9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	69b8      	ldr	r0, [r7, #24]
 8001fa6:	f000 fa1b 	bl	80023e0 <HW_TS_RTC_Int_AppNot>
 8001faa:	e022      	b.n	8001ff2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001fac:	f7ff fed2 	bl	8001d54 <RescheduleTimerList>
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f383 8810 	msr	PRIMASK, r3
}
 8001fba:	e01a      	b.n	8001ff2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001fbc:	bf00      	nop
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f8      	beq.n	8001fbe <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001fcc:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001fdc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001fe0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f383 8810 	msr	PRIMASK, r3
}
 8001ff0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ff2:	4b04      	ldr	r3, [pc, #16]	; (8002004 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001ffa:	bf00      	nop
}
 8001ffc:	3728      	adds	r7, #40	; 0x28
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000ae8 	.word	0x20000ae8
 8002008:	20000a94 	.word	0x20000a94
 800200c:	20000a04 	.word	0x20000a04
 8002010:	20000a9c 	.word	0x20000a9c
 8002014:	58000800 	.word	0x58000800

08002018 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002024:	4b5e      	ldr	r3, [pc, #376]	; (80021a0 <HW_TS_Init+0x188>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	22ca      	movs	r2, #202	; 0xca
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
 800202c:	4b5c      	ldr	r3, [pc, #368]	; (80021a0 <HW_TS_Init+0x188>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2253      	movs	r2, #83	; 0x53
 8002032:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002034:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HW_TS_Init+0x18c>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <HW_TS_Init+0x18c>)
 800203a:	f043 0320 	orr.w	r3, r3, #32
 800203e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002040:	4b58      	ldr	r3, [pc, #352]	; (80021a4 <HW_TS_Init+0x18c>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f1c3 0304 	rsb	r3, r3, #4
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b55      	ldr	r3, [pc, #340]	; (80021a8 <HW_TS_Init+0x190>)
 8002054:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HW_TS_Init+0x18c>)
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800205e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002062:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	fa92 f2a2 	rbit	r2, r2
 800206a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	2a00      	cmp	r2, #0
 8002074:	d101      	bne.n	800207a <HW_TS_Init+0x62>
  {
    return 32U;
 8002076:	2220      	movs	r2, #32
 8002078:	e003      	b.n	8002082 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	40d3      	lsrs	r3, r2
 8002084:	b2db      	uxtb	r3, r3
 8002086:	3301      	adds	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b48      	ldr	r3, [pc, #288]	; (80021ac <HW_TS_Init+0x194>)
 800208c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800208e:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <HW_TS_Init+0x18c>)
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	b29b      	uxth	r3, r3
 8002094:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002098:	b29b      	uxth	r3, r3
 800209a:	3301      	adds	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b44      	ldr	r3, [pc, #272]	; (80021b0 <HW_TS_Init+0x198>)
 80020a0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80020a2:	4b43      	ldr	r3, [pc, #268]	; (80021b0 <HW_TS_Init+0x198>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	4a40      	ldr	r2, [pc, #256]	; (80021ac <HW_TS_Init+0x194>)
 80020aa:	7812      	ldrb	r2, [r2, #0]
 80020ac:	fb02 f303 	mul.w	r3, r2, r3
 80020b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020b4:	4a3c      	ldr	r2, [pc, #240]	; (80021a8 <HW_TS_Init+0x190>)
 80020b6:	7812      	ldrb	r2, [r2, #0]
 80020b8:	40d3      	lsrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d904      	bls.n	80020d0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HW_TS_Init+0x19c>)
 80020c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020cc:	801a      	strh	r2, [r3, #0]
 80020ce:	e003      	b.n	80020d8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <HW_TS_Init+0x19c>)
 80020d6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020dc:	f7ff fb9c 	bl	8001818 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020e4:	f7ff fb84 	bl	80017f0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d13d      	bne.n	800216a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80020ee:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HW_TS_Init+0x1a0>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <HW_TS_Init+0x1a4>)
 80020f6:	f04f 32ff 	mov.w	r2, #4294967295
 80020fa:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020fc:	2300      	movs	r3, #0
 80020fe:	77fb      	strb	r3, [r7, #31]
 8002100:	e00c      	b.n	800211c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002102:	7ffa      	ldrb	r2, [r7, #31]
 8002104:	492e      	ldr	r1, [pc, #184]	; (80021c0 <HW_TS_Init+0x1a8>)
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	330c      	adds	r3, #12
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002116:	7ffb      	ldrb	r3, [r7, #31]
 8002118:	3301      	adds	r3, #1
 800211a:	77fb      	strb	r3, [r7, #31]
 800211c:	7ffb      	ldrb	r3, [r7, #31]
 800211e:	2b05      	cmp	r3, #5
 8002120:	d9ef      	bls.n	8002102 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002122:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <HW_TS_Init+0x1ac>)
 8002124:	2206      	movs	r2, #6
 8002126:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HW_TS_Init+0x188>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HW_TS_Init+0x188>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002136:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HW_TS_Init+0x188>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <HW_TS_Init+0x188>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002148:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800214a:	4b1f      	ldr	r3, [pc, #124]	; (80021c8 <HW_TS_Init+0x1b0>)
 800214c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002150:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002152:	2003      	movs	r0, #3
 8002154:	f001 fa49 	bl	80035ea <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002158:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HW_TS_Init+0x188>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HW_TS_Init+0x188>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	e009      	b.n	800217e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <HW_TS_Init+0x188>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002178:	2003      	movs	r0, #3
 800217a:	f001 fa28 	bl	80035ce <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <HW_TS_Init+0x188>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	22ff      	movs	r2, #255	; 0xff
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002186:	2200      	movs	r2, #0
 8002188:	2103      	movs	r1, #3
 800218a:	2003      	movs	r0, #3
 800218c:	f001 f9dd 	bl	800354a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002190:	2003      	movs	r0, #3
 8002192:	f001 f9f4 	bl	800357e <HAL_NVIC_EnableIRQ>

  return;
 8002196:	bf00      	nop
}
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000ae8 	.word	0x20000ae8
 80021a4:	40002800 	.word	0x40002800
 80021a8:	20000a9d 	.word	0x20000a9d
 80021ac:	20000a9e 	.word	0x20000a9e
 80021b0:	20000aa0 	.word	0x20000aa0
 80021b4:	20000aa2 	.word	0x20000aa2
 80021b8:	20000a9c 	.word	0x20000a9c
 80021bc:	20000a98 	.word	0x20000a98
 80021c0:	20000a04 	.word	0x20000a04
 80021c4:	20000a94 	.word	0x20000a94
 80021c8:	58000800 	.word	0x58000800

080021cc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d6:	f3ef 8310 	mrs	r3, PRIMASK
 80021da:	60fb      	str	r3, [r7, #12]
  return(result);
 80021dc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021e0:	b672      	cpsid	i
}
 80021e2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021e4:	2003      	movs	r0, #3
 80021e6:	f001 f9d8 	bl	800359a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021ea:	4b34      	ldr	r3, [pc, #208]	; (80022bc <HW_TS_Stop+0xf0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	22ca      	movs	r2, #202	; 0xca
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
 80021f2:	4b32      	ldr	r3, [pc, #200]	; (80022bc <HW_TS_Stop+0xf0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2253      	movs	r2, #83	; 0x53
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80021fa:	79fa      	ldrb	r2, [r7, #7]
 80021fc:	4930      	ldr	r1, [pc, #192]	; (80022c0 <HW_TS_Stop+0xf4>)
 80021fe:	4613      	mov	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	330c      	adds	r3, #12
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d142      	bne.n	8002298 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fc80 	bl	8001b1c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800221c:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HW_TS_Stop+0xf8>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	2b06      	cmp	r3, #6
 8002226:	d12f      	bne.n	8002288 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HW_TS_Stop+0xfc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002234:	d107      	bne.n	8002246 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002236:	bf00      	nop
 8002238:	4b20      	ldr	r3, [pc, #128]	; (80022bc <HW_TS_Stop+0xf0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f8      	bne.n	8002238 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HW_TS_Stop+0xf0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <HW_TS_Stop+0xf0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002254:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002256:	bf00      	nop
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HW_TS_Stop+0xf0>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f8      	beq.n	8002258 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002266:	4b15      	ldr	r3, [pc, #84]	; (80022bc <HW_TS_Stop+0xf0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HW_TS_Stop+0xf0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002276:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HW_TS_Stop+0x100>)
 800227a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800227e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002280:	2003      	movs	r0, #3
 8002282:	f001 f9b2 	bl	80035ea <HAL_NVIC_ClearPendingIRQ>
 8002286:	e007      	b.n	8002298 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HW_TS_Stop+0x104>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	7cfa      	ldrb	r2, [r7, #19]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002294:	f7ff fd5e 	bl	8001d54 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002298:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HW_TS_Stop+0xf0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	22ff      	movs	r2, #255	; 0xff
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022a0:	2003      	movs	r0, #3
 80022a2:	f001 f96c 	bl	800357e <HAL_NVIC_EnableIRQ>
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f383 8810 	msr	PRIMASK, r3
}
 80022b0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80022b2:	bf00      	nop
}
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000ae8 	.word	0x20000ae8
 80022c0:	20000a04 	.word	0x20000a04
 80022c4:	20000a94 	.word	0x20000a94
 80022c8:	40002800 	.word	0x40002800
 80022cc:	58000800 	.word	0x58000800
 80022d0:	20000a95 	.word	0x20000a95

080022d4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80022e0:	79fa      	ldrb	r2, [r7, #7]
 80022e2:	493b      	ldr	r1, [pc, #236]	; (80023d0 <HW_TS_Start+0xfc>)
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	330c      	adds	r3, #12
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d103      	bne.n	8002300 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff66 	bl	80021cc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002300:	f3ef 8310 	mrs	r3, PRIMASK
 8002304:	60fb      	str	r3, [r7, #12]
  return(result);
 8002306:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002308:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800230a:	b672      	cpsid	i
}
 800230c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800230e:	2003      	movs	r0, #3
 8002310:	f001 f943 	bl	800359a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <HW_TS_Start+0x100>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	22ca      	movs	r2, #202	; 0xca
 800231a:	625a      	str	r2, [r3, #36]	; 0x24
 800231c:	4b2d      	ldr	r3, [pc, #180]	; (80023d4 <HW_TS_Start+0x100>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2253      	movs	r2, #83	; 0x53
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002324:	79fa      	ldrb	r2, [r7, #7]
 8002326:	492a      	ldr	r1, [pc, #168]	; (80023d0 <HW_TS_Start+0xfc>)
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	330c      	adds	r3, #12
 8002334:	2202      	movs	r2, #2
 8002336:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002338:	79fa      	ldrb	r2, [r7, #7]
 800233a:	4925      	ldr	r1, [pc, #148]	; (80023d0 <HW_TS_Start+0xfc>)
 800233c:	4613      	mov	r3, r2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3308      	adds	r3, #8
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800234c:	79fa      	ldrb	r2, [r7, #7]
 800234e:	4920      	ldr	r1, [pc, #128]	; (80023d0 <HW_TS_Start+0xfc>)
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	3304      	adds	r3, #4
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fb30 	bl	80019c8 <linkTimer>
 8002368:	4603      	mov	r3, r0
 800236a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HW_TS_Start+0x104>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <HW_TS_Start+0x108>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	7c7a      	ldrb	r2, [r7, #17]
 800237a:	429a      	cmp	r2, r3
 800237c:	d002      	beq.n	8002384 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800237e:	f7ff fce9 	bl	8001d54 <RescheduleTimerList>
 8002382:	e013      	b.n	80023ac <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002384:	79fa      	ldrb	r2, [r7, #7]
 8002386:	4912      	ldr	r1, [pc, #72]	; (80023d0 <HW_TS_Start+0xfc>)
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	3308      	adds	r3, #8
 8002394:	6819      	ldr	r1, [r3, #0]
 8002396:	8a7b      	ldrh	r3, [r7, #18]
 8002398:	79fa      	ldrb	r2, [r7, #7]
 800239a:	1ac9      	subs	r1, r1, r3
 800239c:	480c      	ldr	r0, [pc, #48]	; (80023d0 <HW_TS_Start+0xfc>)
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4403      	add	r3, r0
 80023a8:	3308      	adds	r3, #8
 80023aa:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HW_TS_Start+0x100>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	22ff      	movs	r2, #255	; 0xff
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023b4:	2003      	movs	r0, #3
 80023b6:	f001 f8e2 	bl	800357e <HAL_NVIC_EnableIRQ>
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f383 8810 	msr	PRIMASK, r3
}
 80023c4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023c6:	bf00      	nop
}
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000a04 	.word	0x20000a04
 80023d4:	20000ae8 	.word	0x20000ae8
 80023d8:	20000a94 	.word	0x20000a94
 80023dc:	20000a95 	.word	0x20000a95

080023e0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	460b      	mov	r3, r1
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4798      	blx	r3

  return;
 80023f2:	bf00      	nop
}
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_UART_RxCpltCallback+0x34>)
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002410:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_UART_RxCpltCallback+0x38>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_UART_RxCpltCallback+0x38>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4798      	blx	r3
            }
            break;
 800241e:	e001      	b.n	8002424 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002420:	bf00      	nop
 8002422:	e000      	b.n	8002426 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002424:	bf00      	nop
    }

    return;
 8002426:	bf00      	nop
}
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40013800 	.word	0x40013800
 8002434:	20000aa4 	.word	0x20000aa4

08002438 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_UART_TxCpltCallback+0x34>)
 8002448:	429a      	cmp	r2, r3
 800244a:	d107      	bne.n	800245c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_UART_TxCpltCallback+0x38>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_UART_TxCpltCallback+0x38>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4798      	blx	r3
            }
            break;
 800245a:	e001      	b.n	8002460 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800245c:	bf00      	nop
 800245e:	e000      	b.n	8002462 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002460:	bf00      	nop
    }

    return;
 8002462:	bf00      	nop
}
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40013800 	.word	0x40013800
 8002470:	20000aa8 	.word	0x20000aa8

08002474 <LL_AHB3_GRP1_EnableClock>:
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002482:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4313      	orrs	r3, r2
 800248a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002490:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002498:	68fb      	ldr	r3, [r7, #12]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
	...

080024a8 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_IPCC_Init+0x20>)
 80024ae:	4a07      	ldr	r2, [pc, #28]	; (80024cc <MX_IPCC_Init+0x24>)
 80024b0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_IPCC_Init+0x20>)
 80024b4:	f001 ff9e 	bl	80043f4 <HAL_IPCC_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80024be:	f000 f95b 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000aac 	.word	0x20000aac
 80024cc:	58000c00 	.word	0x58000c00

080024d0 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <HAL_IPCC_MspInit+0x44>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d113      	bne.n	800250a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80024e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80024e6:	f7ff ffc5 	bl	8002474 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	202c      	movs	r0, #44	; 0x2c
 80024f0:	f001 f82b 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80024f4:	202c      	movs	r0, #44	; 0x2c
 80024f6:	f001 f842 	bl	800357e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80024fa:	2200      	movs	r2, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	202d      	movs	r0, #45	; 0x2d
 8002500:	f001 f823 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002504:	202d      	movs	r0, #45	; 0x2d
 8002506:	f001 f83a 	bl	800357e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	58000c00 	.word	0x58000c00

08002518 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002524:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002530:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002534:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002538:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002540:	e000      	b.n	8002544 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002542:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002544:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f9      	beq.n	8002542 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800254e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_RCC_LSE_SetDriveCapability>:
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f023 0218 	bic.w	r2, r3, #24
 800257a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e009      	b.n	80025b8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ffb3 	bl	8002518 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf1      	blt.n	80025a4 <_write+0x12>
	}
	return len;
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025d0:	f000 fdee 	bl	80031b0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80025d4:	f7fe fd14 	bl	8001000 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025d8:	f000 f828 	bl	800262c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80025dc:	f000 f89e 	bl	800271c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80025e0:	f7ff ff62 	bl	80024a8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025e4:	f7ff f88e 	bl	8001704 <MX_GPIO_Init>
  MX_DMA_Init();
 80025e8:	f7ff f856 	bl	8001698 <MX_DMA_Init>
  MX_RTC_Init();
 80025ec:	f000 f8fa 	bl	80027e4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80025f0:	f000 fbd0 	bl	8002d94 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80025f4:	f000 fd24 	bl	8003040 <MX_USB_PCD_Init>
  MX_LPUART1_UART_Init();
 80025f8:	f000 fb70 	bl	8002cdc <MX_LPUART1_UART_Init>
  MX_RF_Init();
 80025fc:	f000 f8c1 	bl	8002782 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8002600:	2200      	movs	r2, #0
 8002602:	2102      	movs	r1, #2
 8002604:	4808      	ldr	r0, [pc, #32]	; (8002628 <main+0x5c>)
 8002606:	f001 fe7b 	bl	8004300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 800260a:	2200      	movs	r2, #0
 800260c:	2101      	movs	r1, #1
 800260e:	4806      	ldr	r0, [pc, #24]	; (8002628 <main+0x5c>)
 8002610:	f001 fe76 	bl	8004300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8002614:	2200      	movs	r2, #0
 8002616:	2120      	movs	r1, #32
 8002618:	4803      	ldr	r0, [pc, #12]	; (8002628 <main+0x5c>)
 800261a:	f001 fe71 	bl	8004300 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800261e:	f7fe fcfd 	bl	800101c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002622:	f7fe ffe2 	bl	80015ea <MX_APPE_Process>
 8002626:	e7fc      	b.n	8002622 <main+0x56>
 8002628:	48000400 	.word	0x48000400

0800262c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b09a      	sub	sp, #104	; 0x68
 8002630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002632:	f107 0320 	add.w	r3, r7, #32
 8002636:	2248      	movs	r2, #72	; 0x48
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f00a fb10 	bl	800cc60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	615a      	str	r2, [r3, #20]
 8002650:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800265c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002660:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f023 0303 	bic.w	r3, r3, #3
 800266c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002676:	f002 f847 	bl	8004708 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800267a:	2010      	movs	r0, #16
 800267c:	f7ff ff73 	bl	8002566 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <SystemClock_Config+0xec>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002688:	4a23      	ldr	r2, [pc, #140]	; (8002718 <SystemClock_Config+0xec>)
 800268a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b21      	ldr	r3, [pc, #132]	; (8002718 <SystemClock_Config+0xec>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002698:	603b      	str	r3, [r7, #0]
 800269a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800269c:	232f      	movs	r3, #47	; 0x2f
 800269e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026a6:	2301      	movs	r3, #1
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026b0:	2301      	movs	r3, #1
 80026b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026b4:	2340      	movs	r3, #64	; 0x40
 80026b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80026b8:	2300      	movs	r3, #0
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80026bc:	2360      	movs	r3, #96	; 0x60
 80026be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80026c0:	2305      	movs	r3, #5
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 fbaf 	bl	8004e30 <HAL_RCC_OscConfig>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80026d8:	f000 f84e 	bl	8002778 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80026dc:	236f      	movs	r3, #111	; 0x6f
 80026de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80026e0:	2302      	movs	r3, #2
 80026e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	2101      	movs	r1, #1
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 ff0b 	bl	8005518 <HAL_RCC_ClockConfig>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002708:	f000 f836 	bl	8002778 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800270c:	f003 fcc6 	bl	800609c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002710:	bf00      	nop
 8002712:	3768      	adds	r7, #104	; 0x68
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	58000400 	.word	0x58000400

0800271c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b094      	sub	sp, #80	; 0x50
 8002720:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002722:	463b      	mov	r3, r7
 8002724:	2250      	movs	r2, #80	; 0x50
 8002726:	2100      	movs	r1, #0
 8002728:	4618      	mov	r0, r3
 800272a:	f00a fa99 	bl	800cc60 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800272e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002732:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002734:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002738:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800273a:	2300      	movs	r3, #0
 800273c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800273e:	2300      	movs	r3, #0
 8002740:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002742:	463b      	mov	r3, r7
 8002744:	4618      	mov	r0, r3
 8002746:	f003 fb33 	bl	8005db0 <HAL_RCCEx_PeriphCLKConfig>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002750:	f000 f812 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002754:	bf00      	nop
 8002756:	3750      	adds	r7, #80	; 0x50
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <GetPage>:

/* USER CODE BEGIN 4 */
uint32_t GetPage(uint32_t Addr)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800276a:	0b1b      	lsrs	r3, r3, #12
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800277c:	b672      	cpsid	i
}
 800277e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002780:	e7fe      	b.n	8002780 <Error_Handler+0x8>

08002782 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_RCC_EnableRTC>:
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b085      	sub	sp, #20
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027d6:	68fb      	ldr	r3, [r7, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <MX_RTC_Init+0x60>)
 80027ea:	4a17      	ldr	r2, [pc, #92]	; (8002848 <MX_RTC_Init+0x64>)
 80027ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <MX_RTC_Init+0x60>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <MX_RTC_Init+0x60>)
 80027f6:	220f      	movs	r2, #15
 80027f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <MX_RTC_Init+0x60>)
 80027fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002800:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <MX_RTC_Init+0x60>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002808:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_RTC_Init+0x60>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <MX_RTC_Init+0x60>)
 8002810:	2200      	movs	r2, #0
 8002812:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <MX_RTC_Init+0x60>)
 8002816:	2200      	movs	r2, #0
 8002818:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800281a:	480a      	ldr	r0, [pc, #40]	; (8002844 <MX_RTC_Init+0x60>)
 800281c:	f003 fd56 	bl	80062cc <HAL_RTC_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002826:	f7ff ffa7 	bl	8002778 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	4805      	ldr	r0, [pc, #20]	; (8002844 <MX_RTC_Init+0x60>)
 8002830:	f003 fe4c 	bl	80064cc <HAL_RTCEx_SetWakeUpTimer_IT>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800283a:	f7ff ff9d 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000ae8 	.word	0x20000ae8
 8002848:	40002800 	.word	0x40002800

0800284c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b096      	sub	sp, #88	; 0x58
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	2250      	movs	r2, #80	; 0x50
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f00a f9ff 	bl	800cc60 <memset>
  if(rtcHandle->Instance==RTC)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a12      	ldr	r2, [pc, #72]	; (80028b0 <HAL_RTC_MspInit+0x64>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d11d      	bne.n	80028a8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800286c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002870:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002878:	f107 0308 	add.w	r3, r7, #8
 800287c:	4618      	mov	r0, r3
 800287e:	f003 fa97 	bl	8005db0 <HAL_RCCEx_PeriphCLKConfig>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002888:	f7ff ff76 	bl	8002778 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800288c:	f7ff ff80 	bl	8002790 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002890:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002894:	f7ff ff8d 	bl	80027b2 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2100      	movs	r1, #0
 800289c:	2003      	movs	r0, #3
 800289e:	f000 fe54 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80028a2:	2003      	movs	r0, #3
 80028a4:	f000 fe6b 	bl	800357e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80028a8:	bf00      	nop
 80028aa:	3758      	adds	r7, #88	; 0x58
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40002800 	.word	0x40002800

080028b4 <LL_AHB3_GRP1_EnableClock>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80028cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4013      	ands	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028d8:	68fb      	ldr	r3, [r7, #12]
}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80028ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028ee:	f7ff ffe1 	bl	80028b4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	202e      	movs	r0, #46	; 0x2e
 80028f8:	f000 fe27 	bl	800354a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80028fc:	202e      	movs	r0, #46	; 0x2e
 80028fe:	f000 fe3e 	bl	800357e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}

08002906 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800290a:	e7fe      	b.n	800290a <NMI_Handler+0x4>

0800290c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <HardFault_Handler+0x4>

08002912 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002912:	b480      	push	{r7}
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002916:	e7fe      	b.n	8002916 <MemManage_Handler+0x4>

08002918 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291c:	e7fe      	b.n	800291c <BusFault_Handler+0x4>

0800291e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002922:	e7fe      	b.n	8002922 <UsageFault_Handler+0x4>

08002924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002952:	f000 fc87 	bl	8003264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}

0800295a <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800295e:	f7ff fa93 	bl	8001e88 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}

08002966 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 800296a:	2001      	movs	r0, #1
 800296c:	f001 fcfa 	bl	8004364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8002978:	2002      	movs	r0, #2
 800297a:	f001 fcf3 	bl	8004364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}

08002982 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002986:	2010      	movs	r0, #16
 8002988:	f001 fcec 	bl	8004364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}

08002990 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <DMA1_Channel1_IRQHandler+0x10>)
 8002996:	f001 f818 	bl	80039ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000c38 	.word	0x20000c38

080029a4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	uint32_t tmp_flag = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
	uint32_t temp;
	tmp_flag = __HAL_UART_GET_FLAG(&hlpuart1, UART_FLAG_IDLE);
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <LPUART1_IRQHandler+0xa8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b10      	cmp	r3, #16
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	607b      	str	r3, [r7, #4]
	if ((tmp_flag != RESET)) {
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d039      	beq.n	8002a3e <LPUART1_IRQHandler+0x9a>
		__HAL_UART_CLEAR_IDLEFLAG(&hlpuart1);
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <LPUART1_IRQHandler+0xa8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2210      	movs	r2, #16
 80029d0:	621a      	str	r2, [r3, #32]
		temp = hlpuart1.Instance->ISR;
 80029d2:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <LPUART1_IRQHandler+0xa8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	603b      	str	r3, [r7, #0]
		temp = hlpuart1.Instance->RDR;
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <LPUART1_IRQHandler+0xa8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	603b      	str	r3, [r7, #0]
		//HAL_UART_DMAStop(&hlpuart1);
		temp = hlpuart1.hdmarx->Instance->CNDTR;
 80029e2:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <LPUART1_IRQHandler+0xa8>)
 80029e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	603b      	str	r3, [r7, #0]
		// reset index dma buffer to 1024 (countdown)
		__HAL_DMA_DISABLE(hlpuart1.hdmarx);
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <LPUART1_IRQHandler+0xa8>)
 80029f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <LPUART1_IRQHandler+0xa8>)
 80029fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
		hlpuart1.hdmarx->Instance->CNDTR = UART_ESP32_MAX_RECVLEN;
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <LPUART1_IRQHandler+0xa8>)
 8002a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a12:	605a      	str	r2, [r3, #4]
		__HAL_DMA_ENABLE(hlpuart1.hdmarx);
 8002a14:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <LPUART1_IRQHandler+0xa8>)
 8002a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <LPUART1_IRQHandler+0xa8>)
 8002a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
		UART_ESP32_RxLen = UART_ESP32_MAX_RECVLEN - temp;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	425b      	negs	r3, r3
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <LPUART1_IRQHandler+0xac>)
 8002a36:	701a      	strb	r2, [r3, #0]
		UART_ESP32_RecvEndFlag = 1;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <LPUART1_IRQHandler+0xb0>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002a3e:	4803      	ldr	r0, [pc, #12]	; (8002a4c <LPUART1_IRQHandler+0xa8>)
 8002a40:	f003 ff4a 	bl	80068d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000b10 	.word	0x20000b10
 8002a50:	2000204c 	.word	0x2000204c
 8002a54:	2000204d 	.word	0x2000204d

08002a58 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002a5c:	f009 fcfc 	bl	800c458 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002a68:	f009 fd2e 	bl	800c4c8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002a74:	f001 fc9a 	bl	80043ac <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <DMA2_Channel4_IRQHandler+0x10>)
 8002a82:	f000 ffa2 	bl	80039ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000c98 	.word	0x20000c98

08002a90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
 8002aa0:	e00a      	b.n	8002ab8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002aa2:	f3af 8000 	nop.w
 8002aa6:	4601      	mov	r1, r0
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1c5a      	adds	r2, r3, #1
 8002aac:	60ba      	str	r2, [r7, #8]
 8002aae:	b2ca      	uxtb	r2, r1
 8002ab0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	dbf0      	blt.n	8002aa2 <_read+0x12>
  }

  return len;
 8002ac0:	687b      	ldr	r3, [r7, #4]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <_close>:
  }
  return len;
}

int _close(int file)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002af2:	605a      	str	r2, [r3, #4]
  return 0;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <_isatty>:

int _isatty(int file)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b083      	sub	sp, #12
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b0a:	2301      	movs	r3, #1
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b3c:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <_sbrk+0x5c>)
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <_sbrk+0x60>)
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b48:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <_sbrk+0x64>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d102      	bne.n	8002b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <_sbrk+0x64>)
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <_sbrk+0x68>)
 8002b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b56:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <_sbrk+0x64>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d207      	bcs.n	8002b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b64:	f00a f83c 	bl	800cbe0 <__errno>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	220c      	movs	r2, #12
 8002b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	e009      	b.n	8002b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b74:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <_sbrk+0x64>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b7a:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	4a05      	ldr	r2, [pc, #20]	; (8002b98 <_sbrk+0x64>)
 8002b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b86:	68fb      	ldr	r3, [r7, #12]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20030000 	.word	0x20030000
 8002b94:	00000400 	.word	0x00000400
 8002b98:	20000b0c 	.word	0x20000b0c
 8002b9c:	20002570 	.word	0x20002570

08002ba0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002ba4:	4b24      	ldr	r3, [pc, #144]	; (8002c38 <SystemInit+0x98>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <SystemInit+0x98>)
 8002bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002bcc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd8:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <SystemInit+0x9c>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bea:	f023 0305 	bic.w	r3, r3, #5
 8002bee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0a:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <SystemInit+0xa0>)
 8002c0c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	4a0b      	ldr	r2, [pc, #44]	; (8002c40 <SystemInit+0xa0>)
 8002c14:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00
 8002c3c:	faf6fefb 	.word	0xfaf6fefb
 8002c40:	22041000 	.word	0x22041000

08002c44 <LL_AHB2_GRP1_EnableClock>:
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4013      	ands	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c68:	68fb      	ldr	r3, [r7, #12]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b085      	sub	sp, #20
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4013      	ands	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002ce0:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002ce2:	4a2a      	ldr	r2, [pc, #168]	; (8002d8c <MX_LPUART1_UART_Init+0xb0>)
 8002ce4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002ce6:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002cf4:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002cfa:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002d00:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d02:	220c      	movs	r2, #12
 8002d04:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d12:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d18:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002d1e:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002d24:	4818      	ldr	r0, [pc, #96]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d26:	f003 fcad 	bl	8006684 <HAL_UART_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d30:	f7ff fd22 	bl	8002778 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d34:	2100      	movs	r1, #0
 8002d36:	4814      	ldr	r0, [pc, #80]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d38:	f004 ffc8 	bl	8007ccc <HAL_UARTEx_SetTxFifoThreshold>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d42:	f7ff fd19 	bl	8002778 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d46:	2100      	movs	r1, #0
 8002d48:	480f      	ldr	r0, [pc, #60]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d4a:	f004 fffd 	bl	8007d48 <HAL_UARTEx_SetRxFifoThreshold>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d54:	f7ff fd10 	bl	8002778 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002d58:	480b      	ldr	r0, [pc, #44]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d5a:	f004 ff7e 	bl	8007c5a <HAL_UARTEx_DisableFifoMode>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d64:	f7ff fd08 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_IDLE);
 8002d68:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0210 	orr.w	r2, r2, #16
 8002d76:	601a      	str	r2, [r3, #0]
      	HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 8002d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d7c:	4904      	ldr	r1, [pc, #16]	; (8002d90 <MX_LPUART1_UART_Init+0xb4>)
 8002d7e:	4802      	ldr	r0, [pc, #8]	; (8002d88 <MX_LPUART1_UART_Init+0xac>)
 8002d80:	f003 fd5e 	bl	8006840 <HAL_UART_Receive_DMA>
  /* USER CODE END LPUART1_Init 2 */

}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000b10 	.word	0x20000b10
 8002d8c:	40008000 	.word	0x40008000
 8002d90:	2000184c 	.word	0x2000184c

08002d94 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d98:	4b23      	ldr	r3, [pc, #140]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002d9a:	4a24      	ldr	r2, [pc, #144]	; (8002e2c <MX_USART1_UART_Init+0x98>)
 8002d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dac:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002db8:	4b1b      	ldr	r3, [pc, #108]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002dba:	220c      	movs	r2, #12
 8002dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002dc4:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002dc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dcc:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dde:	4812      	ldr	r0, [pc, #72]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002de0:	f003 fc50 	bl	8006684 <HAL_UART_Init>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002dea:	f7ff fcc5 	bl	8002778 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dee:	2100      	movs	r1, #0
 8002df0:	480d      	ldr	r0, [pc, #52]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002df2:	f004 ff6b 	bl	8007ccc <HAL_UARTEx_SetTxFifoThreshold>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002dfc:	f7ff fcbc 	bl	8002778 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e00:	2100      	movs	r1, #0
 8002e02:	4809      	ldr	r0, [pc, #36]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002e04:	f004 ffa0 	bl	8007d48 <HAL_UARTEx_SetRxFifoThreshold>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002e0e:	f7ff fcb3 	bl	8002778 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002e12:	4805      	ldr	r0, [pc, #20]	; (8002e28 <MX_USART1_UART_Init+0x94>)
 8002e14:	f004 ff21 	bl	8007c5a <HAL_UARTEx_DisableFifoMode>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002e1e:	f7ff fcab 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000ba4 	.word	0x20000ba4
 8002e2c:	40013800 	.word	0x40013800

08002e30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b09c      	sub	sp, #112	; 0x70
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e48:	f107 030c 	add.w	r3, r7, #12
 8002e4c:	2250      	movs	r2, #80	; 0x50
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f009 ff05 	bl	800cc60 <memset>
  if(uartHandle->Instance==LPUART1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a58      	ldr	r2, [pc, #352]	; (8002fbc <HAL_UART_MspInit+0x18c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d156      	bne.n	8002f0e <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e60:	2302      	movs	r3, #2
 8002e62:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 ff9f 	bl	8005db0 <HAL_RCCEx_PeriphCLKConfig>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e78:	f7ff fc7e 	bl	8002778 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f7ff fefa 	bl	8002c76 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e82:	2004      	movs	r0, #4
 8002e84:	f7ff fede 	bl	8002c44 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ESP32_RX_Pin|ESP32_TX_Pin;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	2300      	movs	r3, #0
 8002e96:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002e98:	2308      	movs	r3, #8
 8002e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4847      	ldr	r0, [pc, #284]	; (8002fc0 <HAL_UART_MspInit+0x190>)
 8002ea4:	f001 f8bc 	bl	8004020 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002ea8:	4b46      	ldr	r3, [pc, #280]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002eaa:	4a47      	ldr	r2, [pc, #284]	; (8002fc8 <HAL_UART_MspInit+0x198>)
 8002eac:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002eae:	4b45      	ldr	r3, [pc, #276]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb4:	4b43      	ldr	r3, [pc, #268]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eba:	4b42      	ldr	r3, [pc, #264]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ec0:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002ec2:	2280      	movs	r2, #128	; 0x80
 8002ec4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ec6:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ecc:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002ed2:	4b3c      	ldr	r3, [pc, #240]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ed8:	4b3a      	ldr	r3, [pc, #232]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002ede:	4839      	ldr	r0, [pc, #228]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002ee0:	f000 fb92 	bl	8003608 <HAL_DMA_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8002eea:	f7ff fc45 	bl	8002778 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a34      	ldr	r2, [pc, #208]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002ef2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002ef6:	4a33      	ldr	r2, [pc, #204]	; (8002fc4 <HAL_UART_MspInit+0x194>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002efc:	2200      	movs	r2, #0
 8002efe:	2100      	movs	r1, #0
 8002f00:	2025      	movs	r0, #37	; 0x25
 8002f02:	f000 fb22 	bl	800354a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002f06:	2025      	movs	r0, #37	; 0x25
 8002f08:	f000 fb39 	bl	800357e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f0c:	e052      	b.n	8002fb4 <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==USART1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2e      	ldr	r2, [pc, #184]	; (8002fcc <HAL_UART_MspInit+0x19c>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d14d      	bne.n	8002fb4 <HAL_UART_MspInit+0x184>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f20:	f107 030c 	add.w	r3, r7, #12
 8002f24:	4618      	mov	r0, r3
 8002f26:	f002 ff43 	bl	8005db0 <HAL_RCCEx_PeriphCLKConfig>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8002f30:	f7ff fc22 	bl	8002778 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f38:	f7ff feb6 	bl	8002ca8 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f7ff fe81 	bl	8002c44 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002f42:	23c0      	movs	r3, #192	; 0xc0
 8002f44:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f46:	2302      	movs	r3, #2
 8002f48:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f52:	2307      	movs	r3, #7
 8002f54:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f56:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	481c      	ldr	r0, [pc, #112]	; (8002fd0 <HAL_UART_MspInit+0x1a0>)
 8002f5e:	f001 f85f 	bl	8004020 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002f62:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002f64:	4a1c      	ldr	r2, [pc, #112]	; (8002fd8 <HAL_UART_MspInit+0x1a8>)
 8002f66:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002f6a:	220f      	movs	r2, #15
 8002f6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f6e:	4b19      	ldr	r3, [pc, #100]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002f70:	2210      	movs	r2, #16
 8002f72:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f7a:	4b16      	ldr	r3, [pc, #88]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f98:	480e      	ldr	r0, [pc, #56]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002f9a:	f000 fb35 	bl	8003608 <HAL_DMA_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8002fa4:	f7ff fbe8 	bl	8002778 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002fac:	67da      	str	r2, [r3, #124]	; 0x7c
 8002fae:	4a09      	ldr	r2, [pc, #36]	; (8002fd4 <HAL_UART_MspInit+0x1a4>)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002fb4:	bf00      	nop
 8002fb6:	3770      	adds	r7, #112	; 0x70
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40008000 	.word	0x40008000
 8002fc0:	48000800 	.word	0x48000800
 8002fc4:	20000c38 	.word	0x20000c38
 8002fc8:	40020008 	.word	0x40020008
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	48000400 	.word	0x48000400
 8002fd4:	20000c98 	.word	0x20000c98
 8002fd8:	40020444 	.word	0x40020444

08002fdc <LL_AHB2_GRP1_EnableClock>:
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003000:	68fb      	ldr	r3, [r7, #12]
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_APB1_GRP1_EnableClock>:
{
 800300e:	b480      	push	{r7}
 8003010:	b085      	sub	sp, #20
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800301c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4313      	orrs	r3, r2
 8003024:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4013      	ands	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003044:	4b10      	ldr	r3, [pc, #64]	; (8003088 <MX_USB_PCD_Init+0x48>)
 8003046:	4a11      	ldr	r2, [pc, #68]	; (800308c <MX_USB_PCD_Init+0x4c>)
 8003048:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800304a:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <MX_USB_PCD_Init+0x48>)
 800304c:	2208      	movs	r2, #8
 800304e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <MX_USB_PCD_Init+0x48>)
 8003052:	2202      	movs	r2, #2
 8003054:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003056:	4b0c      	ldr	r3, [pc, #48]	; (8003088 <MX_USB_PCD_Init+0x48>)
 8003058:	2202      	movs	r2, #2
 800305a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <MX_USB_PCD_Init+0x48>)
 800305e:	2200      	movs	r2, #0
 8003060:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <MX_USB_PCD_Init+0x48>)
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <MX_USB_PCD_Init+0x48>)
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <MX_USB_PCD_Init+0x48>)
 8003070:	2200      	movs	r2, #0
 8003072:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003074:	4804      	ldr	r0, [pc, #16]	; (8003088 <MX_USB_PCD_Init+0x48>)
 8003076:	f001 fa43 	bl	8004500 <HAL_PCD_Init>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003080:	f7ff fb7a 	bl	8002778 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000cf8 	.word	0x20000cf8
 800308c:	40006800 	.word	0x40006800

08003090 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b09c      	sub	sp, #112	; 0x70
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030a8:	f107 030c 	add.w	r3, r7, #12
 80030ac:	2250      	movs	r2, #80	; 0x50
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f009 fdd5 	bl	800cc60 <memset>
  if(pcdHandle->Instance==USB)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1f      	ldr	r2, [pc, #124]	; (8003138 <HAL_PCD_MspInit+0xa8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d136      	bne.n	800312e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80030c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80030c6:	2318      	movs	r3, #24
 80030c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80030ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80030d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80030d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80030da:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80030dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80030e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80030e6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	4618      	mov	r0, r3
 80030ee:	f002 fe5f 	bl	8005db0 <HAL_RCCEx_PeriphCLKConfig>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80030f8:	f7ff fb3e 	bl	8002778 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fc:	2001      	movs	r0, #1
 80030fe:	f7ff ff6d 	bl	8002fdc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003102:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003106:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003114:	230a      	movs	r3, #10
 8003116:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003118:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800311c:	4619      	mov	r1, r3
 800311e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003122:	f000 ff7d 	bl	8004020 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003126:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800312a:	f7ff ff70 	bl	800300e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800312e:	bf00      	nop
 8003130:	3770      	adds	r7, #112	; 0x70
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40006800 	.word	0x40006800

0800313c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800313c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800313e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003140:	3304      	adds	r3, #4

08003142 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003142:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003144:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003146:	d3f9      	bcc.n	800313c <CopyDataInit>
  bx lr
 8003148:	4770      	bx	lr

0800314a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800314a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800314c:	3004      	adds	r0, #4

0800314e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800314e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003150:	d3fb      	bcc.n	800314a <FillZerobss>
  bx lr
 8003152:	4770      	bx	lr

08003154 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003154:	480c      	ldr	r0, [pc, #48]	; (8003188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003156:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003158:	f7ff fd22 	bl	8002ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800315c:	480b      	ldr	r0, [pc, #44]	; (800318c <LoopForever+0x6>)
 800315e:	490c      	ldr	r1, [pc, #48]	; (8003190 <LoopForever+0xa>)
 8003160:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <LoopForever+0xe>)
 8003162:	2300      	movs	r3, #0
 8003164:	f7ff ffed 	bl	8003142 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003168:	480b      	ldr	r0, [pc, #44]	; (8003198 <LoopForever+0x12>)
 800316a:	490c      	ldr	r1, [pc, #48]	; (800319c <LoopForever+0x16>)
 800316c:	4a0c      	ldr	r2, [pc, #48]	; (80031a0 <LoopForever+0x1a>)
 800316e:	2300      	movs	r3, #0
 8003170:	f7ff ffe7 	bl	8003142 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003174:	480b      	ldr	r0, [pc, #44]	; (80031a4 <LoopForever+0x1e>)
 8003176:	490c      	ldr	r1, [pc, #48]	; (80031a8 <LoopForever+0x22>)
 8003178:	2300      	movs	r3, #0
 800317a:	f7ff ffe8 	bl	800314e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800317e:	f009 fd35 	bl	800cbec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003182:	f7ff fa23 	bl	80025cc <main>

08003186 <LoopForever>:

LoopForever:
  b LoopForever
 8003186:	e7fe      	b.n	8003186 <LoopForever>
  ldr   r0, =_estack
 8003188:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800318c:	20000008 	.word	0x20000008
 8003190:	20000114 	.word	0x20000114
 8003194:	0800fee0 	.word	0x0800fee0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003198:	200301e3 	.word	0x200301e3
 800319c:	200301e3 	.word	0x200301e3
 80031a0:	080108b5 	.word	0x080108b5
  INIT_BSS _sbss, _ebss
 80031a4:	200009e8 	.word	0x200009e8
 80031a8:	2000256c 	.word	0x2000256c

080031ac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031ac:	e7fe      	b.n	80031ac <ADC1_IRQHandler>
	...

080031b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <HAL_Init+0x3c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <HAL_Init+0x3c>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c6:	2003      	movs	r0, #3
 80031c8:	f000 f9b4 	bl	8003534 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031cc:	2000      	movs	r0, #0
 80031ce:	f000 f80f 	bl	80031f0 <HAL_InitTick>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	71fb      	strb	r3, [r7, #7]
 80031dc:	e001      	b.n	80031e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031de:	f7ff fb82 	bl	80028e6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031e2:	79fb      	ldrb	r3, [r7, #7]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	58004000 	.word	0x58004000

080031f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80031fc:	4b17      	ldr	r3, [pc, #92]	; (800325c <HAL_InitTick+0x6c>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d024      	beq.n	800324e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003204:	f002 fb34 	bl	8005870 <HAL_RCC_GetHCLKFreq>
 8003208:	4602      	mov	r2, r0
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_InitTick+0x6c>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	4619      	mov	r1, r3
 8003210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003214:	fbb3 f3f1 	udiv	r3, r3, r1
 8003218:	fbb2 f3f3 	udiv	r3, r2, r3
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f9ca 	bl	80035b6 <HAL_SYSTICK_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10f      	bne.n	8003248 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	d809      	bhi.n	8003242 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800322e:	2200      	movs	r2, #0
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	f04f 30ff 	mov.w	r0, #4294967295
 8003236:	f000 f988 	bl	800354a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800323a:	4a09      	ldr	r2, [pc, #36]	; (8003260 <HAL_InitTick+0x70>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	e007      	b.n	8003252 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
 8003246:	e004      	b.n	8003252 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
 800324c:	e001      	b.n	8003252 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20000010 	.word	0x20000010
 8003260:	2000000c 	.word	0x2000000c

08003264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_IncTick+0x20>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <HAL_IncTick+0x24>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4413      	add	r3, r2
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_IncTick+0x24>)
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000010 	.word	0x20000010
 8003288:	20000fec 	.word	0x20000fec

0800328c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return uwTick;
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_GetTick+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000fec 	.word	0x20000fec

080032a4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <HAL_GetTickPrio+0x14>)
 80032aa:	681b      	ldr	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	2000000c 	.word	0x2000000c

080032bc <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HAL_GetTickFreq+0x14>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000010 	.word	0x20000010

080032d4 <__NVIC_SetPriorityGrouping>:
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032f0:	4013      	ands	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003306:	4a04      	ldr	r2, [pc, #16]	; (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60d3      	str	r3, [r2, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_GetPriorityGrouping>:
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003320:	4b04      	ldr	r3, [pc, #16]	; (8003334 <__NVIC_GetPriorityGrouping+0x18>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 0307 	and.w	r3, r3, #7
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_EnableIRQ>:
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	2b00      	cmp	r3, #0
 8003348:	db0b      	blt.n	8003362 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	f003 021f 	and.w	r2, r3, #31
 8003350:	4907      	ldr	r1, [pc, #28]	; (8003370 <__NVIC_EnableIRQ+0x38>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	2001      	movs	r0, #1
 800335a:	fa00 f202 	lsl.w	r2, r0, r2
 800335e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000e100 	.word	0xe000e100

08003374 <__NVIC_DisableIRQ>:
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003382:	2b00      	cmp	r3, #0
 8003384:	db12      	blt.n	80033ac <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	f003 021f 	and.w	r2, r3, #31
 800338c:	490a      	ldr	r1, [pc, #40]	; (80033b8 <__NVIC_DisableIRQ+0x44>)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2001      	movs	r0, #1
 8003396:	fa00 f202 	lsl.w	r2, r0, r2
 800339a:	3320      	adds	r3, #32
 800339c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80033a0:	f3bf 8f4f 	dsb	sy
}
 80033a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033a6:	f3bf 8f6f 	isb	sy
}
 80033aa:	bf00      	nop
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000e100 	.word	0xe000e100

080033bc <__NVIC_SetPendingIRQ>:
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	db0c      	blt.n	80033e8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	f003 021f 	and.w	r2, r3, #31
 80033d4:	4907      	ldr	r1, [pc, #28]	; (80033f4 <__NVIC_SetPendingIRQ+0x38>)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	2001      	movs	r0, #1
 80033de:	fa00 f202 	lsl.w	r2, r0, r2
 80033e2:	3340      	adds	r3, #64	; 0x40
 80033e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	e000e100 	.word	0xe000e100

080033f8 <__NVIC_ClearPendingIRQ>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	db0c      	blt.n	8003424 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4907      	ldr	r1, [pc, #28]	; (8003430 <__NVIC_ClearPendingIRQ+0x38>)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	095b      	lsrs	r3, r3, #5
 8003418:	2001      	movs	r0, #1
 800341a:	fa00 f202 	lsl.w	r2, r0, r2
 800341e:	3360      	adds	r3, #96	; 0x60
 8003420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000e100 	.word	0xe000e100

08003434 <__NVIC_SetPriority>:
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	6039      	str	r1, [r7, #0]
 800343e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	db0a      	blt.n	800345e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	b2da      	uxtb	r2, r3
 800344c:	490c      	ldr	r1, [pc, #48]	; (8003480 <__NVIC_SetPriority+0x4c>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	440b      	add	r3, r1
 8003458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800345c:	e00a      	b.n	8003474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4908      	ldr	r1, [pc, #32]	; (8003484 <__NVIC_SetPriority+0x50>)
 8003464:	79fb      	ldrb	r3, [r7, #7]
 8003466:	f003 030f 	and.w	r3, r3, #15
 800346a:	3b04      	subs	r3, #4
 800346c:	0112      	lsls	r2, r2, #4
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	440b      	add	r3, r1
 8003472:	761a      	strb	r2, [r3, #24]
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000e100 	.word	0xe000e100
 8003484:	e000ed00 	.word	0xe000ed00

08003488 <NVIC_EncodePriority>:
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f1c3 0307 	rsb	r3, r3, #7
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	bf28      	it	cs
 80034a6:	2304      	movcs	r3, #4
 80034a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d902      	bls.n	80034b8 <NVIC_EncodePriority+0x30>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3b03      	subs	r3, #3
 80034b6:	e000      	b.n	80034ba <NVIC_EncodePriority+0x32>
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	f04f 32ff 	mov.w	r2, #4294967295
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d0:	f04f 31ff 	mov.w	r1, #4294967295
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43d9      	mvns	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	4313      	orrs	r3, r2
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3724      	adds	r7, #36	; 0x24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
	...

080034f0 <SysTick_Config>:
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003500:	d301      	bcc.n	8003506 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003502:	2301      	movs	r3, #1
 8003504:	e00f      	b.n	8003526 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003506:	4a0a      	ldr	r2, [pc, #40]	; (8003530 <SysTick_Config+0x40>)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800350e:	210f      	movs	r1, #15
 8003510:	f04f 30ff 	mov.w	r0, #4294967295
 8003514:	f7ff ff8e 	bl	8003434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <SysTick_Config+0x40>)
 800351a:	2200      	movs	r2, #0
 800351c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351e:	4b04      	ldr	r3, [pc, #16]	; (8003530 <SysTick_Config+0x40>)
 8003520:	2207      	movs	r2, #7
 8003522:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	e000e010 	.word	0xe000e010

08003534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff fec9 	bl	80032d4 <__NVIC_SetPriorityGrouping>
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	4603      	mov	r3, r0
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003558:	f7ff fee0 	bl	800331c <__NVIC_GetPriorityGrouping>
 800355c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f7ff ff90 	bl	8003488 <NVIC_EncodePriority>
 8003568:	4602      	mov	r2, r0
 800356a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff5f 	bl	8003434 <__NVIC_SetPriority>
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	4603      	mov	r3, r0
 8003586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fed3 	bl	8003338 <__NVIC_EnableIRQ>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fee3 	bl	8003374 <__NVIC_DisableIRQ>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ff96 	bl	80034f0 <SysTick_Config>
 80035c4:	4603      	mov	r3, r0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80035d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff feed 	bl	80033bc <__NVIC_SetPendingIRQ>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b082      	sub	sp, #8
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff fefd 	bl	80033f8 <__NVIC_ClearPendingIRQ>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e08e      	b.n	8003738 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	4b47      	ldr	r3, [pc, #284]	; (8003740 <HAL_DMA_Init+0x138>)
 8003622:	429a      	cmp	r2, r3
 8003624:	d80f      	bhi.n	8003646 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	4b45      	ldr	r3, [pc, #276]	; (8003744 <HAL_DMA_Init+0x13c>)
 800362e:	4413      	add	r3, r2
 8003630:	4a45      	ldr	r2, [pc, #276]	; (8003748 <HAL_DMA_Init+0x140>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	009a      	lsls	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a42      	ldr	r2, [pc, #264]	; (800374c <HAL_DMA_Init+0x144>)
 8003642:	641a      	str	r2, [r3, #64]	; 0x40
 8003644:	e00e      	b.n	8003664 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	4b40      	ldr	r3, [pc, #256]	; (8003750 <HAL_DMA_Init+0x148>)
 800364e:	4413      	add	r3, r2
 8003650:	4a3d      	ldr	r2, [pc, #244]	; (8003748 <HAL_DMA_Init+0x140>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	009a      	lsls	r2, r3, #2
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a3c      	ldr	r2, [pc, #240]	; (8003754 <HAL_DMA_Init+0x14c>)
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800367a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 fa74 	bl	8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c4:	d102      	bne.n	80036cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80036d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036e2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d010      	beq.n	800370e <HAL_DMA_Init+0x106>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d80c      	bhi.n	800370e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fa93 	bl	8003c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	e008      	b.n	8003720 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40020407 	.word	0x40020407
 8003744:	bffdfff8 	.word	0xbffdfff8
 8003748:	cccccccd 	.word	0xcccccccd
 800374c:	40020000 	.word	0x40020000
 8003750:	bffdfbf8 	.word	0xbffdfbf8
 8003754:	40020400 	.word	0x40020400

08003758 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_DMA_Start_IT+0x20>
 8003774:	2302      	movs	r3, #2
 8003776:	e066      	b.n	8003846 <HAL_DMA_Start_IT+0xee>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	d155      	bne.n	8003838 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f9b9 	bl	8003b28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d008      	beq.n	80037d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 020e 	orr.w	r2, r2, #14
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e00f      	b.n	80037f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0204 	bic.w	r2, r2, #4
 80037de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 020a 	orr.w	r2, r2, #10
 80037ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003824:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0201 	orr.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e005      	b.n	8003844 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003840:	2302      	movs	r3, #2
 8003842:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003844:	7dfb      	ldrb	r3, [r7, #23]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e04f      	b.n	8003900 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d008      	beq.n	800387e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2204      	movs	r2, #4
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e040      	b.n	8003900 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 020e 	bic.w	r2, r2, #14
 800388c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800389c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	f003 021c 	and.w	r2, r3, #28
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f202 	lsl.w	r2, r1, r2
 80038c0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d005      	beq.n	8003930 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2204      	movs	r2, #4
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
 800392e:	e047      	b.n	80039c0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 020e 	bic.w	r2, r2, #14
 800393e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800395e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	f003 021c 	and.w	r2, r3, #28
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	2101      	movs	r1, #1
 800396e:	fa01 f202 	lsl.w	r2, r1, r2
 8003972:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800397c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00c      	beq.n	80039a0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003994:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800399e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
    }
  }
  return status;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f003 031c 	and.w	r3, r3, #28
 80039ea:	2204      	movs	r2, #4
 80039ec:	409a      	lsls	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4013      	ands	r3, r2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d026      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x7a>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d021      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d107      	bne.n	8003a1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0204 	bic.w	r2, r2, #4
 8003a1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	f003 021c 	and.w	r2, r3, #28
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	2104      	movs	r1, #4
 8003a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d071      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003a42:	e06c      	b.n	8003b1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a48:	f003 031c 	and.w	r3, r3, #28
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d02e      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xec>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d029      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0320 	and.w	r3, r3, #32
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 020a 	bic.w	r2, r2, #10
 8003a7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	f003 021c 	and.w	r2, r3, #28
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	2102      	movs	r1, #2
 8003a96:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d038      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003ab4:	e033      	b.n	8003b1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f003 031c 	and.w	r3, r3, #28
 8003abe:	2208      	movs	r2, #8
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d02a      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x156>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d025      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 020e 	bic.w	r2, r2, #14
 8003ae2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	f003 021c 	and.w	r2, r3, #28
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	2101      	movs	r1, #1
 8003af2:	fa01 f202 	lsl.w	r2, r1, r2
 8003af6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b1e:	bf00      	nop
 8003b20:	bf00      	nop
}
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b3e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d004      	beq.n	8003b52 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b50:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f003 021c 	and.w	r2, r3, #28
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	2101      	movs	r1, #1
 8003b60:	fa01 f202 	lsl.w	r2, r1, r2
 8003b64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d108      	bne.n	8003b88 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b86:	e007      	b.n	8003b98 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d80a      	bhi.n	8003bce <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bc4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6493      	str	r3, [r2, #72]	; 0x48
 8003bcc:	e007      	b.n	8003bde <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	009a      	lsls	r2, r3, #2
 8003bd6:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003bd8:	4413      	add	r3, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	3b08      	subs	r3, #8
 8003be6:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003be8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003bf4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	40020407 	.word	0x40020407
 8003c14:	4002081c 	.word	0x4002081c
 8003c18:	cccccccd 	.word	0xcccccccd
 8003c1c:	40020880 	.word	0x40020880

08003c20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c30:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003c44:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2201      	movs	r2, #1
 8003c50:	409a      	lsls	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	1000823f 	.word	0x1000823f
 8003c68:	40020940 	.word	0x40020940

08003c6c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <HAL_FLASH_Program+0x80>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_FLASH_Program+0x1a>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e02d      	b.n	8003ce2 <HAL_FLASH_Program+0x76>
 8003c86:	4b19      	ldr	r3, [pc, #100]	; (8003cec <HAL_FLASH_Program+0x80>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c8c:	4b17      	ldr	r3, [pc, #92]	; (8003cec <HAL_FLASH_Program+0x80>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003c92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c96:	f000 f869 	bl	8003d6c <FLASH_WaitForLastOperation>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d11a      	bne.n	8003cda <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d105      	bne.n	8003cb6 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003caa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cae:	68b8      	ldr	r0, [r7, #8]
 8003cb0:	f000 f8cc 	bl	8003e4c <FLASH_Program_DoubleWord>
 8003cb4:	e004      	b.n	8003cc0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	68b8      	ldr	r0, [r7, #8]
 8003cbc:	f00a fa6c 	bl	800e198 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cc4:	f000 f852 	bl	8003d6c <FLASH_WaitForLastOperation>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <HAL_FLASH_Program+0x84>)
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	4906      	ldr	r1, [pc, #24]	; (8003cf0 <HAL_FLASH_Program+0x84>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003cda:	4b04      	ldr	r3, [pc, #16]	; (8003cec <HAL_FLASH_Program+0x80>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000ff0 	.word	0x20000ff0
 8003cf0:	58004000 	.word	0x58004000

08003cf4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_FLASH_Unlock+0x38>)
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	da0b      	bge.n	8003d1e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_FLASH_Unlock+0x38>)
 8003d08:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <HAL_FLASH_Unlock+0x3c>)
 8003d0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <HAL_FLASH_Unlock+0x38>)
 8003d0e:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <HAL_FLASH_Unlock+0x40>)
 8003d10:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <HAL_FLASH_Unlock+0x38>)
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	da01      	bge.n	8003d1e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003d1e:	79fb      	ldrb	r3, [r7, #7]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	58004000 	.word	0x58004000
 8003d30:	45670123 	.word	0x45670123
 8003d34:	cdef89ab 	.word	0xcdef89ab

08003d38 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_FLASH_Lock+0x30>)
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	4a08      	ldr	r2, [pc, #32]	; (8003d68 <HAL_FLASH_Lock+0x30>)
 8003d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d4c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_FLASH_Lock+0x30>)
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	db01      	blt.n	8003d5a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	58004000 	.word	0x58004000

08003d6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8003d74:	f7ff fa8a 	bl	800328c <HAL_GetTick>
 8003d78:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003d7a:	e009      	b.n	8003d90 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003d7c:	f7ff fa86 	bl	800328c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d801      	bhi.n	8003d90 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e054      	b.n	8003e3a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003d90:	4b2c      	ldr	r3, [pc, #176]	; (8003e44 <FLASH_WaitForLastOperation+0xd8>)
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9c:	d0ee      	beq.n	8003d7c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8003d9e:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <FLASH_WaitForLastOperation+0xd8>)
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d002      	beq.n	8003db4 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003dae:	4b25      	ldr	r3, [pc, #148]	; (8003e44 <FLASH_WaitForLastOperation+0xd8>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d007      	beq.n	8003dce <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003dbe:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <FLASH_WaitForLastOperation+0xd8>)
 8003dc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003dc4:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d007      	beq.n	8003df2 <FLASH_WaitForLastOperation+0x86>
 8003de2:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <FLASH_WaitForLastOperation+0xd8>)
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003dec:	4915      	ldr	r1, [pc, #84]	; (8003e44 <FLASH_WaitForLastOperation+0xd8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	618b      	str	r3, [r1, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <FLASH_WaitForLastOperation+0x9a>
 8003dfc:	4a11      	ldr	r2, [pc, #68]	; (8003e44 <FLASH_WaitForLastOperation+0xd8>)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e04:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00e      	beq.n	8003e2a <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003e0c:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <FLASH_WaitForLastOperation+0xdc>)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e011      	b.n	8003e3a <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003e16:	f7ff fa39 	bl	800328c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d801      	bhi.n	8003e2a <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e007      	b.n	8003e3a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <FLASH_WaitForLastOperation+0xd8>)
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e36:	d0ee      	beq.n	8003e16 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	58004000 	.word	0x58004000
 8003e48:	20000ff0 	.word	0x20000ff0

08003e4c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <FLASH_Program_DoubleWord+0x48>)
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	4a0d      	ldr	r2, [pc, #52]	; (8003e94 <FLASH_Program_DoubleWord+0x48>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003e6a:	f3bf 8f6f 	isb	sy
}
 8003e6e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	000a      	movs	r2, r1
 8003e7e:	2300      	movs	r3, #0
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	3104      	adds	r1, #4
 8003e84:	4613      	mov	r3, r2
 8003e86:	600b      	str	r3, [r1, #0]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	58004000 	.word	0x58004000

08003e98 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_FLASHEx_Erase+0x9c>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_FLASHEx_Erase+0x16>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e03d      	b.n	8003f2a <HAL_FLASHEx_Erase+0x92>
 8003eae:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_FLASHEx_Erase+0x9c>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <HAL_FLASHEx_Erase+0x9c>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003eba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ebe:	f7ff ff55 	bl	8003d6c <FLASH_WaitForLastOperation>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d12a      	bne.n	8003f22 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d124      	bne.n	8003f1e <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eda:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	e012      	b.n	8003f0a <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8003ee4:	68b8      	ldr	r0, [r7, #8]
 8003ee6:	f000 f827 	bl	8003f38 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003eea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eee:	f7ff ff3d 	bl	8003d6c <FLASH_WaitForLastOperation>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d003      	beq.n	8003f04 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	601a      	str	r2, [r3, #0]
          break;
 8003f02:	e00a      	b.n	8003f1a <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	3301      	adds	r3, #1
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	4413      	add	r3, r2
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d3e4      	bcc.n	8003ee4 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8003f1a:	f000 f86f 	bl	8003ffc <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003f1e:	f000 f825 	bl	8003f6c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003f22:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <HAL_FLASHEx_Erase+0x9c>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]

  return status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000ff0 	.word	0x20000ff0

08003f38 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003f40:	4b09      	ldr	r3, [pc, #36]	; (8003f68 <FLASH_PageErase+0x30>)
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	4a06      	ldr	r2, [pc, #24]	; (8003f68 <FLASH_PageErase+0x30>)
 8003f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f54:	f043 0302 	orr.w	r3, r3, #2
 8003f58:	6153      	str	r3, [r2, #20]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	58004000 	.word	0x58004000

08003f6c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8003f70:	4b21      	ldr	r3, [pc, #132]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7c:	d117      	bne.n	8003fae <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003f7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1d      	ldr	r2, [pc, #116]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f88:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003f90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a17      	ldr	r2, [pc, #92]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fa0:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a14      	ldr	r2, [pc, #80]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003fa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fac:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8003fae:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fba:	d117      	bne.n	8003fec <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a0d      	ldr	r2, [pc, #52]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fc6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003fce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a07      	ldr	r2, [pc, #28]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fde:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <FLASH_FlushCaches+0x8c>)
 8003fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fea:	6013      	str	r3, [r2, #0]
  }
}
 8003fec:	bf00      	nop
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	58004000 	.word	0x58004000

08003ffc <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <FLASH_AcknowledgePageErase+0x20>)
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	4a05      	ldr	r2, [pc, #20]	; (800401c <FLASH_AcknowledgePageErase+0x20>)
 8004006:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800400a:	f023 0302 	bic.w	r3, r3, #2
 800400e:	6153      	str	r3, [r2, #20]
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	58004000 	.word	0x58004000

08004020 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800402e:	e14c      	b.n	80042ca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	2101      	movs	r1, #1
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	4013      	ands	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 813e 	beq.w	80042c4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d005      	beq.n	8004060 <HAL_GPIO_Init+0x40>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	2b02      	cmp	r3, #2
 800405e:	d130      	bne.n	80040c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	2203      	movs	r2, #3
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004096:	2201      	movs	r2, #1
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4013      	ands	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	091b      	lsrs	r3, r3, #4
 80040ac:	f003 0201 	and.w	r2, r3, #1
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d017      	beq.n	80040fe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	2203      	movs	r2, #3
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d123      	bne.n	8004152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	08da      	lsrs	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3208      	adds	r2, #8
 8004112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	220f      	movs	r2, #15
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	08da      	lsrs	r2, r3, #3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3208      	adds	r2, #8
 800414c:	6939      	ldr	r1, [r7, #16]
 800414e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f003 0203 	and.w	r2, r3, #3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8098 	beq.w	80042c4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004194:	4a54      	ldr	r2, [pc, #336]	; (80042e8 <HAL_GPIO_Init+0x2c8>)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	3302      	adds	r3, #2
 800419c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	220f      	movs	r2, #15
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4013      	ands	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041be:	d019      	beq.n	80041f4 <HAL_GPIO_Init+0x1d4>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a4a      	ldr	r2, [pc, #296]	; (80042ec <HAL_GPIO_Init+0x2cc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d013      	beq.n	80041f0 <HAL_GPIO_Init+0x1d0>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a49      	ldr	r2, [pc, #292]	; (80042f0 <HAL_GPIO_Init+0x2d0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00d      	beq.n	80041ec <HAL_GPIO_Init+0x1cc>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a48      	ldr	r2, [pc, #288]	; (80042f4 <HAL_GPIO_Init+0x2d4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d007      	beq.n	80041e8 <HAL_GPIO_Init+0x1c8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a47      	ldr	r2, [pc, #284]	; (80042f8 <HAL_GPIO_Init+0x2d8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d101      	bne.n	80041e4 <HAL_GPIO_Init+0x1c4>
 80041e0:	2304      	movs	r3, #4
 80041e2:	e008      	b.n	80041f6 <HAL_GPIO_Init+0x1d6>
 80041e4:	2307      	movs	r3, #7
 80041e6:	e006      	b.n	80041f6 <HAL_GPIO_Init+0x1d6>
 80041e8:	2303      	movs	r3, #3
 80041ea:	e004      	b.n	80041f6 <HAL_GPIO_Init+0x1d6>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e002      	b.n	80041f6 <HAL_GPIO_Init+0x1d6>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e000      	b.n	80041f6 <HAL_GPIO_Init+0x1d6>
 80041f4:	2300      	movs	r3, #0
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	f002 0203 	and.w	r2, r2, #3
 80041fc:	0092      	lsls	r2, r2, #2
 80041fe:	4093      	lsls	r3, r2
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004206:	4938      	ldr	r1, [pc, #224]	; (80042e8 <HAL_GPIO_Init+0x2c8>)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	3302      	adds	r3, #2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004214:	4b39      	ldr	r3, [pc, #228]	; (80042fc <HAL_GPIO_Init+0x2dc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	43db      	mvns	r3, r3
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4013      	ands	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004238:	4a30      	ldr	r2, [pc, #192]	; (80042fc <HAL_GPIO_Init+0x2dc>)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800423e:	4b2f      	ldr	r3, [pc, #188]	; (80042fc <HAL_GPIO_Init+0x2dc>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	43db      	mvns	r3, r3
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4013      	ands	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004262:	4a26      	ldr	r2, [pc, #152]	; (80042fc <HAL_GPIO_Init+0x2dc>)
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004268:	4b24      	ldr	r3, [pc, #144]	; (80042fc <HAL_GPIO_Init+0x2dc>)
 800426a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800426e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	43db      	mvns	r3, r3
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4013      	ands	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800428e:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <HAL_GPIO_Init+0x2dc>)
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004296:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_GPIO_Init+0x2dc>)
 8004298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042bc:	4a0f      	ldr	r2, [pc, #60]	; (80042fc <HAL_GPIO_Init+0x2dc>)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	3301      	adds	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	fa22 f303 	lsr.w	r3, r2, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f47f aeab 	bne.w	8004030 <HAL_GPIO_Init+0x10>
  }
}
 80042da:	bf00      	nop
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	40010000 	.word	0x40010000
 80042ec:	48000400 	.word	0x48000400
 80042f0:	48000800 	.word	0x48000800
 80042f4:	48000c00 	.word	0x48000c00
 80042f8:	48001000 	.word	0x48001000
 80042fc:	58000800 	.word	0x58000800

08004300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	807b      	strh	r3, [r7, #2]
 800430c:	4613      	mov	r3, r2
 800430e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004310:	787b      	ldrb	r3, [r7, #1]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004316:	887a      	ldrh	r2, [r7, #2]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800431c:	e002      	b.n	8004324 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800431e:	887a      	ldrh	r2, [r7, #2]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004342:	887a      	ldrh	r2, [r7, #2]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4013      	ands	r3, r2
 8004348:	041a      	lsls	r2, r3, #16
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	43d9      	mvns	r1, r3
 800434e:	887b      	ldrh	r3, [r7, #2]
 8004350:	400b      	ands	r3, r1
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	619a      	str	r2, [r3, #24]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	4603      	mov	r3, r0
 800436c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d006      	beq.n	8004388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800437a:	4a05      	ldr	r2, [pc, #20]	; (8004390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800437c:	88fb      	ldrh	r3, [r7, #6]
 800437e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f806 	bl	8004394 <HAL_GPIO_EXTI_Callback>
  }
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	58000800 	.word	0x58000800

08004394 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80043b2:	4b0a      	ldr	r3, [pc, #40]	; (80043dc <HAL_HSEM_IRQHandler+0x30>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80043b8:	4b08      	ldr	r3, [pc, #32]	; (80043dc <HAL_HSEM_IRQHandler+0x30>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	43db      	mvns	r3, r3
 80043c0:	4906      	ldr	r1, [pc, #24]	; (80043dc <HAL_HSEM_IRQHandler+0x30>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80043c6:	4a05      	ldr	r2, [pc, #20]	; (80043dc <HAL_HSEM_IRQHandler+0x30>)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f807 	bl	80043e0 <HAL_HSEM_FreeCallback>
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	58001500 	.word	0x58001500

080043e0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01e      	beq.n	8004444 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <HAL_IPCC_Init+0x60>)
 8004408:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fe f85a 	bl	80024d0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800441c:	68b8      	ldr	r0, [r7, #8]
 800441e:	f000 f85b 	bl	80044d8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f82c 	bl	800448c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004442:	e001      	b.n	8004448 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	58000c00 	.word	0x58000c00

08004458 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	4613      	mov	r3, r2
 8004464:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	4613      	mov	r3, r2
 800447e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e00f      	b.n	80044ba <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	4a0b      	ldr	r2, [pc, #44]	; (80044d0 <IPCC_SetDefaultCallbacks+0x44>)
 80044a4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3306      	adds	r3, #6
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <IPCC_SetDefaultCallbacks+0x48>)
 80044b2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3301      	adds	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b05      	cmp	r3, #5
 80044be:	d9ec      	bls.n	800449a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	08004459 	.word	0x08004459
 80044d4:	08004473 	.word	0x08004473

080044d8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80044ec:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	223f      	movs	r2, #63	; 0x3f
 80044f2:	609a      	str	r2, [r3, #8]
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004502:	b08b      	sub	sp, #44	; 0x2c
 8004504:	af06      	add	r7, sp, #24
 8004506:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e0cb      	b.n	80046aa <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fe fdb2 	bl	8003090 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2203      	movs	r2, #3
 8004530:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f003 fc91 	bl	8007e60 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
 8004542:	e040      	b.n	80045c6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	440b      	add	r3, r1
 8004554:	3301      	adds	r3, #1
 8004556:	2201      	movs	r2, #1
 8004558:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	440b      	add	r3, r1
 800456a:	7bfa      	ldrb	r2, [r7, #15]
 800456c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	1c5a      	adds	r2, r3, #1
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	440b      	add	r3, r1
 800457e:	3303      	adds	r3, #3
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004584:	7bfa      	ldrb	r2, [r7, #15]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	440b      	add	r3, r1
 8004592:	3338      	adds	r3, #56	; 0x38
 8004594:	2200      	movs	r2, #0
 8004596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004598:	7bfa      	ldrb	r2, [r7, #15]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	440b      	add	r3, r1
 80045a6:	333c      	adds	r3, #60	; 0x3c
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045ac:	7bfa      	ldrb	r2, [r7, #15]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	440b      	add	r3, r1
 80045ba:	3340      	adds	r3, #64	; 0x40
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	3301      	adds	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	7bfa      	ldrb	r2, [r7, #15]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d3b9      	bcc.n	8004544 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d0:	2300      	movs	r3, #0
 80045d2:	73fb      	strb	r3, [r7, #15]
 80045d4:	e044      	b.n	8004660 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045d6:	7bfa      	ldrb	r2, [r7, #15]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	440b      	add	r3, r1
 80045e4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80045e8:	2200      	movs	r2, #0
 80045ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045ec:	7bfa      	ldrb	r2, [r7, #15]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	440b      	add	r3, r1
 80045fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045fe:	7bfa      	ldrb	r2, [r7, #15]
 8004600:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	440b      	add	r3, r1
 8004610:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	440b      	add	r3, r1
 8004626:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	440b      	add	r3, r1
 800463c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	440b      	add	r3, r1
 8004652:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	3301      	adds	r3, #1
 800465e:	73fb      	strb	r3, [r7, #15]
 8004660:	7bfa      	ldrb	r2, [r7, #15]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	429a      	cmp	r2, r3
 8004668:	d3b5      	bcc.n	80045d6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	687e      	ldr	r6, [r7, #4]
 8004672:	466d      	mov	r5, sp
 8004674:	f106 0410 	add.w	r4, r6, #16
 8004678:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800467a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	602b      	str	r3, [r5, #0]
 8004680:	1d33      	adds	r3, r6, #4
 8004682:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004684:	6838      	ldr	r0, [r7, #0]
 8004686:	f003 fc06 	bl	8007e96 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d102      	bne.n	80046a8 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f805 	bl	80046b2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800470c:	4b05      	ldr	r3, [pc, #20]	; (8004724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a04      	ldr	r2, [pc, #16]	; (8004724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004716:	6013      	str	r3, [r2, #0]
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	58000400 	.word	0x58000400

08004728 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <HAL_PWREx_GetVoltageRange+0x18>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004734:	4618      	mov	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	58000400 	.word	0x58000400

08004744 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004756:	d101      	bne.n	800475c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <LL_RCC_HSE_Enable>:
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800476c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477a:	6013      	str	r3, [r2, #0]
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <LL_RCC_HSE_Disable>:
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800478a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004794:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004798:	6013      	str	r3, [r2, #0]
}
 800479a:	bf00      	nop
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <LL_RCC_HSE_IsReady>:
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80047a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047b6:	d101      	bne.n	80047bc <LL_RCC_HSE_IsReady+0x18>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <LL_RCC_HSE_IsReady+0x1a>
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_RCC_HSI_Enable>:
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80047cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047da:	6013      	str	r3, [r2, #0]
}
 80047dc:	bf00      	nop
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <LL_RCC_HSI_Disable>:
{
 80047e6:	b480      	push	{r7}
 80047e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80047ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	6013      	str	r3, [r2, #0]
}
 80047fa:	bf00      	nop
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_RCC_HSI_IsReady>:
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004816:	d101      	bne.n	800481c <LL_RCC_HSI_IsReady+0x18>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <LL_RCC_HSI_IsReady+0x1a>
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	061b      	lsls	r3, r3, #24
 800483e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <LL_RCC_HSI48_Enable>:
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800485e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800486a:	bf00      	nop
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_RCC_HSI48_Disable>:
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800488c:	bf00      	nop
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <LL_RCC_HSI48_IsReady>:
{
 8004896:	b480      	push	{r7}
 8004898:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800489a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d101      	bne.n	80048ae <LL_RCC_HSI48_IsReady+0x18>
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <LL_RCC_HSI48_IsReady+0x1a>
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <LL_RCC_LSE_Enable>:
{
 80048ba:	b480      	push	{r7}
 80048bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80048d2:	bf00      	nop
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <LL_RCC_LSE_Disable>:
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ec:	f023 0301 	bic.w	r3, r3, #1
 80048f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_RCC_LSE_EnableBypass>:
{
 80048fe:	b480      	push	{r7}
 8004900:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800490e:	f043 0304 	orr.w	r3, r3, #4
 8004912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004916:	bf00      	nop
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <LL_RCC_LSE_DisableBypass>:
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004930:	f023 0304 	bic.w	r3, r3, #4
 8004934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <LL_RCC_LSE_IsReady>:
{
 8004942:	b480      	push	{r7}
 8004944:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b02      	cmp	r3, #2
 8004954:	d101      	bne.n	800495a <LL_RCC_LSE_IsReady+0x18>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <LL_RCC_LSE_IsReady+0x1a>
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <LL_RCC_LSI1_Enable>:
{
 8004966:	b480      	push	{r7}
 8004968:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800496a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004972:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800497e:	bf00      	nop
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <LL_RCC_LSI1_Disable>:
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800498c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004990:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80049a0:	bf00      	nop
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <LL_RCC_LSI1_IsReady>:
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d101      	bne.n	80049c2 <LL_RCC_LSI1_IsReady+0x18>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <LL_RCC_LSI1_IsReady+0x1a>
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <LL_RCC_LSI2_Enable>:
{
 80049ce:	b480      	push	{r7}
 80049d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80049d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049de:	f043 0304 	orr.w	r3, r3, #4
 80049e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80049e6:	bf00      	nop
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <LL_RCC_LSI2_Disable>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80049f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a00:	f023 0304 	bic.w	r3, r3, #4
 8004a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004a08:	bf00      	nop
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_RCC_LSI2_IsReady>:
{
 8004a12:	b480      	push	{r7}
 8004a14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d101      	bne.n	8004a2a <LL_RCC_LSI2_IsReady+0x18>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <LL_RCC_LSI2_IsReady+0x1a>
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <LL_RCC_LSI2_SetTrimming>:
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <LL_RCC_MSI_Enable>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	6013      	str	r3, [r2, #0]
}
 8004a78:	bf00      	nop
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <LL_RCC_MSI_Disable>:
{
 8004a82:	b480      	push	{r7}
 8004a84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a90:	f023 0301 	bic.w	r3, r3, #1
 8004a94:	6013      	str	r3, [r2, #0]
}
 8004a96:	bf00      	nop
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_RCC_MSI_IsReady>:
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d101      	bne.n	8004ab6 <LL_RCC_MSI_IsReady+0x16>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <LL_RCC_MSI_IsReady+0x18>
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <LL_RCC_MSI_SetRange>:
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	600b      	str	r3, [r1, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <LL_RCC_MSI_GetRange>:
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004afa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2bb0      	cmp	r3, #176	; 0xb0
 8004b00:	d901      	bls.n	8004b06 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004b02:	23b0      	movs	r3, #176	; 0xb0
 8004b04:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004b06:	687b      	ldr	r3, [r7, #4]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	021b      	lsls	r3, r3, #8
 8004b2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	604b      	str	r3, [r1, #4]
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <LL_RCC_SetSysClkSource>:
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f023 0203 	bic.w	r2, r3, #3
 8004b50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <LL_RCC_GetSysClkSource>:
{
 8004b66:	b480      	push	{r7}
 8004b68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 030c 	and.w	r3, r3, #12
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <LL_RCC_SetAHBPrescaler>:
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <LL_RCC_SetAHB4Prescaler>:
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004be2:	f023 020f 	bic.w	r2, r3, #15
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	091b      	lsrs	r3, r3, #4
 8004bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LL_RCC_SetAPB1Prescaler>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	608b      	str	r3, [r1, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <LL_RCC_SetAPB2Prescaler>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	608b      	str	r3, [r1, #8]
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_RCC_GetAHBPrescaler>:
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <LL_RCC_GetAHB4Prescaler>:
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c70:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <LL_RCC_GetAPB1Prescaler>:
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <LL_RCC_GetAPB2Prescaler>:
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <LL_RCC_PLL_Enable>:
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cc6:	6013      	str	r3, [r2, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <LL_RCC_PLL_Disable>:
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce4:	6013      	str	r3, [r2, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_RCC_PLL_IsReady>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d02:	d101      	bne.n	8004d08 <LL_RCC_PLL_IsReady+0x18>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <LL_RCC_PLL_IsReady+0x1a>
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <LL_RCC_PLL_GetN>:
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	0a1b      	lsrs	r3, r3, #8
 8004d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <LL_RCC_PLL_GetR>:
{
 8004d2e:	b480      	push	{r7}
 8004d30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <LL_RCC_PLL_GetDivider>:
{
 8004d46:	b480      	push	{r7}
 8004d48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <LL_RCC_PLL_GetMainSource>:
{
 8004d5e:	b480      	push	{r7}
 8004d60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	f003 0303 	and.w	r3, r3, #3
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004d76:	b480      	push	{r7}
 8004d78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d101      	bne.n	8004d8e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004daa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dae:	d101      	bne.n	8004db4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d101      	bne.n	8004dda <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004de6:	b480      	push	{r7}
 8004de8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df8:	d101      	bne.n	8004dfe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e1c:	d101      	bne.n	8004e22 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b08d      	sub	sp, #52	; 0x34
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e363      	b.n	800550a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0320 	and.w	r3, r3, #32
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 808d 	beq.w	8004f6a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e50:	f7ff fe89 	bl	8004b66 <LL_RCC_GetSysClkSource>
 8004e54:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e56:	f7ff ff82 	bl	8004d5e <LL_RCC_PLL_GetMainSource>
 8004e5a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_RCC_OscConfig+0x3e>
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	2b0c      	cmp	r3, #12
 8004e66:	d147      	bne.n	8004ef8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d144      	bne.n	8004ef8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e347      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004e7e:	f7ff fe34 	bl	8004aea <LL_RCC_MSI_GetRange>
 8004e82:	4603      	mov	r3, r0
 8004e84:	429c      	cmp	r4, r3
 8004e86:	d914      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fd2f 	bl	80058f0 <RCC_SetFlashLatencyFromMSIRange>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e336      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fe0e 	bl	8004ac2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fe32 	bl	8004b14 <LL_RCC_MSI_SetCalibTrimming>
 8004eb0:	e013      	b.n	8004eda <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff fe03 	bl	8004ac2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff fe27 	bl	8004b14 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fd10 	bl	80058f0 <RCC_SetFlashLatencyFromMSIRange>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e317      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004eda:	f000 fcc9 	bl	8005870 <HAL_RCC_GetHCLKFreq>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4aa4      	ldr	r2, [pc, #656]	; (8005174 <HAL_RCC_OscConfig+0x344>)
 8004ee2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ee4:	4ba4      	ldr	r3, [pc, #656]	; (8005178 <HAL_RCC_OscConfig+0x348>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe f981 	bl	80031f0 <HAL_InitTick>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d039      	beq.n	8004f68 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e308      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01e      	beq.n	8004f3e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f00:	f7ff fdb0 	bl	8004a64 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f04:	f7fe f9c2 	bl	800328c <HAL_GetTick>
 8004f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f0c:	f7fe f9be 	bl	800328c <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e2f5      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004f1e:	f7ff fdbf 	bl	8004aa0 <LL_RCC_MSI_IsReady>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0f1      	beq.n	8004f0c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fdc8 	bl	8004ac2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff fdec 	bl	8004b14 <LL_RCC_MSI_SetCalibTrimming>
 8004f3c:	e015      	b.n	8004f6a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f3e:	f7ff fda0 	bl	8004a82 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f42:	f7fe f9a3 	bl	800328c <HAL_GetTick>
 8004f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f4a:	f7fe f99f 	bl	800328c <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e2d6      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004f5c:	f7ff fda0 	bl	8004aa0 <LL_RCC_MSI_IsReady>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f1      	bne.n	8004f4a <HAL_RCC_OscConfig+0x11a>
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f68:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d047      	beq.n	8005006 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f76:	f7ff fdf6 	bl	8004b66 <LL_RCC_GetSysClkSource>
 8004f7a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f7c:	f7ff feef 	bl	8004d5e <LL_RCC_PLL_GetMainSource>
 8004f80:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_OscConfig+0x164>
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	2b0c      	cmp	r3, #12
 8004f8c:	d108      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d105      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d134      	bne.n	8005006 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e2b4      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fa8:	d102      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x180>
 8004faa:	f7ff fbdd 	bl	8004768 <LL_RCC_HSE_Enable>
 8004fae:	e001      	b.n	8004fb4 <HAL_RCC_OscConfig+0x184>
 8004fb0:	f7ff fbe9 	bl	8004786 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d012      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fe f966 	bl	800328c <HAL_GetTick>
 8004fc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc4:	f7fe f962 	bl	800328c <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b64      	cmp	r3, #100	; 0x64
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e299      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004fd6:	f7ff fbe5 	bl	80047a4 <LL_RCC_HSE_IsReady>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f1      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x194>
 8004fe0:	e011      	b.n	8005006 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe2:	f7fe f953 	bl	800328c <HAL_GetTick>
 8004fe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fea:	f7fe f94f 	bl	800328c <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b64      	cmp	r3, #100	; 0x64
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e286      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ffc:	f7ff fbd2 	bl	80047a4 <LL_RCC_HSE_IsReady>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f1      	bne.n	8004fea <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d04c      	beq.n	80050ac <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005012:	f7ff fda8 	bl	8004b66 <LL_RCC_GetSysClkSource>
 8005016:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005018:	f7ff fea1 	bl	8004d5e <LL_RCC_PLL_GetMainSource>
 800501c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d005      	beq.n	8005030 <HAL_RCC_OscConfig+0x200>
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b0c      	cmp	r3, #12
 8005028:	d10e      	bne.n	8005048 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d10b      	bne.n	8005048 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e266      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fbf1 	bl	8004828 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005046:	e031      	b.n	80050ac <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d019      	beq.n	8005084 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005050:	f7ff fbba 	bl	80047c8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005054:	f7fe f91a 	bl	800328c <HAL_GetTick>
 8005058:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800505c:	f7fe f916 	bl	800328c <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e24d      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800506e:	f7ff fbc9 	bl	8004804 <LL_RCC_HSI_IsReady>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f1      	beq.n	800505c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	4618      	mov	r0, r3
 800507e:	f7ff fbd3 	bl	8004828 <LL_RCC_HSI_SetCalibTrimming>
 8005082:	e013      	b.n	80050ac <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005084:	f7ff fbaf 	bl	80047e6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fe f900 	bl	800328c <HAL_GetTick>
 800508c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005090:	f7fe f8fc 	bl	800328c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e233      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80050a2:	f7ff fbaf 	bl	8004804 <LL_RCC_HSI_IsReady>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1f1      	bne.n	8005090 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 80a3 	beq.w	800520c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d076      	beq.n	80051bc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d046      	beq.n	8005168 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80050da:	f7ff fc66 	bl	80049aa <LL_RCC_LSI1_IsReady>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d113      	bne.n	800510c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80050e4:	f7ff fc3f 	bl	8004966 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050e8:	f7fe f8d0 	bl	800328c <HAL_GetTick>
 80050ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80050f0:	f7fe f8cc 	bl	800328c <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e203      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005102:	f7ff fc52 	bl	80049aa <LL_RCC_LSI1_IsReady>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d0f1      	beq.n	80050f0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800510c:	f7ff fc5f 	bl	80049ce <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005110:	f7fe f8bc 	bl	800328c <HAL_GetTick>
 8005114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005116:	e008      	b.n	800512a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005118:	f7fe f8b8 	bl	800328c <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b03      	cmp	r3, #3
 8005124:	d901      	bls.n	800512a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e1ef      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800512a:	f7ff fc72 	bl	8004a12 <LL_RCC_LSI2_IsReady>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f1      	beq.n	8005118 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fc7c 	bl	8004a36 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800513e:	f7ff fc23 	bl	8004988 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fe f8a3 	bl	800328c <HAL_GetTick>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800514a:	f7fe f89f 	bl	800328c <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e1d6      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800515c:	f7ff fc25 	bl	80049aa <LL_RCC_LSI1_IsReady>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f1      	bne.n	800514a <HAL_RCC_OscConfig+0x31a>
 8005166:	e051      	b.n	800520c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005168:	f7ff fbfd 	bl	8004966 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516c:	f7fe f88e 	bl	800328c <HAL_GetTick>
 8005170:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005172:	e00c      	b.n	800518e <HAL_RCC_OscConfig+0x35e>
 8005174:	20000008 	.word	0x20000008
 8005178:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800517c:	f7fe f886 	bl	800328c <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e1bd      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800518e:	f7ff fc0c 	bl	80049aa <LL_RCC_LSI1_IsReady>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f1      	beq.n	800517c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005198:	f7ff fc2a 	bl	80049f0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800519e:	f7fe f875 	bl	800328c <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e1ac      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80051b0:	f7ff fc2f 	bl	8004a12 <LL_RCC_LSI2_IsReady>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f1      	bne.n	800519e <HAL_RCC_OscConfig+0x36e>
 80051ba:	e027      	b.n	800520c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80051bc:	f7ff fc18 	bl	80049f0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fe f864 	bl	800328c <HAL_GetTick>
 80051c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80051c8:	f7fe f860 	bl	800328c <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e197      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80051da:	f7ff fc1a 	bl	8004a12 <LL_RCC_LSI2_IsReady>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1f1      	bne.n	80051c8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80051e4:	f7ff fbd0 	bl	8004988 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e8:	f7fe f850 	bl	800328c <HAL_GetTick>
 80051ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80051f0:	f7fe f84c 	bl	800328c <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e183      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005202:	f7ff fbd2 	bl	80049aa <LL_RCC_LSI1_IsReady>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f1      	bne.n	80051f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	2b00      	cmp	r3, #0
 8005216:	d05b      	beq.n	80052d0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005218:	4ba7      	ldr	r3, [pc, #668]	; (80054b8 <HAL_RCC_OscConfig+0x688>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d114      	bne.n	800524e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005224:	f7ff fa70 	bl	8004708 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005228:	f7fe f830 	bl	800328c <HAL_GetTick>
 800522c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800522e:	e008      	b.n	8005242 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005230:	f7fe f82c 	bl	800328c <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e163      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005242:	4b9d      	ldr	r3, [pc, #628]	; (80054b8 <HAL_RCC_OscConfig+0x688>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f0      	beq.n	8005230 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d102      	bne.n	800525c <HAL_RCC_OscConfig+0x42c>
 8005256:	f7ff fb30 	bl	80048ba <LL_RCC_LSE_Enable>
 800525a:	e00c      	b.n	8005276 <HAL_RCC_OscConfig+0x446>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b05      	cmp	r3, #5
 8005262:	d104      	bne.n	800526e <HAL_RCC_OscConfig+0x43e>
 8005264:	f7ff fb4b 	bl	80048fe <LL_RCC_LSE_EnableBypass>
 8005268:	f7ff fb27 	bl	80048ba <LL_RCC_LSE_Enable>
 800526c:	e003      	b.n	8005276 <HAL_RCC_OscConfig+0x446>
 800526e:	f7ff fb35 	bl	80048dc <LL_RCC_LSE_Disable>
 8005272:	f7ff fb55 	bl	8004920 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d014      	beq.n	80052a8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527e:	f7fe f805 	bl	800328c <HAL_GetTick>
 8005282:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005284:	e00a      	b.n	800529c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005286:	f7fe f801 	bl	800328c <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	f241 3288 	movw	r2, #5000	; 0x1388
 8005294:	4293      	cmp	r3, r2
 8005296:	d901      	bls.n	800529c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e136      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800529c:	f7ff fb51 	bl	8004942 <LL_RCC_LSE_IsReady>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0ef      	beq.n	8005286 <HAL_RCC_OscConfig+0x456>
 80052a6:	e013      	b.n	80052d0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a8:	f7fd fff0 	bl	800328c <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80052ae:	e00a      	b.n	80052c6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052b0:	f7fd ffec 	bl	800328c <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80052be:	4293      	cmp	r3, r2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e121      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80052c6:	f7ff fb3c 	bl	8004942 <LL_RCC_LSE_IsReady>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1ef      	bne.n	80052b0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d02c      	beq.n	8005336 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d014      	beq.n	800530e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052e4:	f7ff fab5 	bl	8004852 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e8:	f7fd ffd0 	bl	800328c <HAL_GetTick>
 80052ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052f0:	f7fd ffcc 	bl	800328c <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e103      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005302:	f7ff fac8 	bl	8004896 <LL_RCC_HSI48_IsReady>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f1      	beq.n	80052f0 <HAL_RCC_OscConfig+0x4c0>
 800530c:	e013      	b.n	8005336 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800530e:	f7ff fab1 	bl	8004874 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005312:	f7fd ffbb 	bl	800328c <HAL_GetTick>
 8005316:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800531a:	f7fd ffb7 	bl	800328c <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e0ee      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800532c:	f7ff fab3 	bl	8004896 <LL_RCC_HSI48_IsReady>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f1      	bne.n	800531a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 80e4 	beq.w	8005508 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005340:	f7ff fc11 	bl	8004b66 <LL_RCC_GetSysClkSource>
 8005344:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	2b02      	cmp	r3, #2
 8005354:	f040 80b4 	bne.w	80054c0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 0203 	and.w	r2, r3, #3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	429a      	cmp	r2, r3
 8005364:	d123      	bne.n	80053ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d11c      	bne.n	80053ae <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005380:	429a      	cmp	r2, r3
 8005382:	d114      	bne.n	80053ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800538e:	429a      	cmp	r2, r3
 8005390:	d10d      	bne.n	80053ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800539c:	429a      	cmp	r2, r3
 800539e:	d106      	bne.n	80053ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d05d      	beq.n	800546a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b0c      	cmp	r3, #12
 80053b2:	d058      	beq.n	8005466 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e0a1      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053c6:	f7ff fc84 	bl	8004cd2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053ca:	f7fd ff5f 	bl	800328c <HAL_GetTick>
 80053ce:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d2:	f7fd ff5b 	bl	800328c <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e092      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1ef      	bne.n	80053d2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	4b30      	ldr	r3, [pc, #192]	; (80054bc <HAL_RCC_OscConfig+0x68c>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005404:	4311      	orrs	r1, r2
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800540a:	0212      	lsls	r2, r2, #8
 800540c:	4311      	orrs	r1, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005412:	4311      	orrs	r1, r2
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005418:	4311      	orrs	r1, r2
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800541e:	430a      	orrs	r2, r1
 8005420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005424:	4313      	orrs	r3, r2
 8005426:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005428:	f7ff fc44 	bl	8004cb4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800542c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800543a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800543c:	f7fd ff26 	bl	800328c <HAL_GetTick>
 8005440:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005444:	f7fd ff22 	bl	800328c <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e059      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0ef      	beq.n	8005444 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005464:	e050      	b.n	8005508 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e04f      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d147      	bne.n	8005508 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005478:	f7ff fc1c 	bl	8004cb4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800547c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800548c:	f7fd fefe 	bl	800328c <HAL_GetTick>
 8005490:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005494:	f7fd fefa 	bl	800328c <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e031      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0ef      	beq.n	8005494 <HAL_RCC_OscConfig+0x664>
 80054b4:	e028      	b.n	8005508 <HAL_RCC_OscConfig+0x6d8>
 80054b6:	bf00      	nop
 80054b8:	58000400 	.word	0x58000400
 80054bc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	d01e      	beq.n	8005504 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c6:	f7ff fc04 	bl	8004cd2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ca:	f7fd fedf 	bl	800328c <HAL_GetTick>
 80054ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d0:	e008      	b.n	80054e4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d2:	f7fd fedb 	bl	800328c <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d901      	bls.n	80054e4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80054e0:	2303      	movs	r3, #3
 80054e2:	e012      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1ef      	bne.n	80054d2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80054f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <HAL_RCC_OscConfig+0x6e4>)
 80054fe:	4013      	ands	r3, r2
 8005500:	60cb      	str	r3, [r1, #12]
 8005502:	e001      	b.n	8005508 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3734      	adds	r7, #52	; 0x34
 800550e:	46bd      	mov	sp, r7
 8005510:	bd90      	pop	{r4, r7, pc}
 8005512:	bf00      	nop
 8005514:	eefefffc 	.word	0xeefefffc

08005518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e12d      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800552c:	4b98      	ldr	r3, [pc, #608]	; (8005790 <HAL_RCC_ClockConfig+0x278>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0307 	and.w	r3, r3, #7
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d91b      	bls.n	8005572 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553a:	4b95      	ldr	r3, [pc, #596]	; (8005790 <HAL_RCC_ClockConfig+0x278>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 0207 	bic.w	r2, r3, #7
 8005542:	4993      	ldr	r1, [pc, #588]	; (8005790 <HAL_RCC_ClockConfig+0x278>)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	4313      	orrs	r3, r2
 8005548:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554a:	f7fd fe9f 	bl	800328c <HAL_GetTick>
 800554e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005550:	e008      	b.n	8005564 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005552:	f7fd fe9b 	bl	800328c <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d901      	bls.n	8005564 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e111      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005564:	4b8a      	ldr	r3, [pc, #552]	; (8005790 <HAL_RCC_ClockConfig+0x278>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0307 	and.w	r3, r3, #7
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	429a      	cmp	r2, r3
 8005570:	d1ef      	bne.n	8005552 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d016      	beq.n	80055ac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fafb 	bl	8004b7e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005588:	f7fd fe80 	bl	800328c <HAL_GetTick>
 800558c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005590:	f7fd fe7c 	bl	800328c <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e0f2      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80055a2:	f7ff fbe8 	bl	8004d76 <LL_RCC_IsActiveFlag_HPRE>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f1      	beq.n	8005590 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d016      	beq.n	80055e6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff faf2 	bl	8004ba6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055c2:	f7fd fe63 	bl	800328c <HAL_GetTick>
 80055c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80055c8:	e008      	b.n	80055dc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80055ca:	f7fd fe5f 	bl	800328c <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d901      	bls.n	80055dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e0d5      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80055dc:	f7ff fbdd 	bl	8004d9a <LL_RCC_IsActiveFlag_C2HPRE>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0f1      	beq.n	80055ca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d016      	beq.n	8005620 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff faeb 	bl	8004bd2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055fc:	f7fd fe46 	bl	800328c <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005604:	f7fd fe42 	bl	800328c <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e0b8      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005616:	f7ff fbd3 	bl	8004dc0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f1      	beq.n	8005604 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d016      	beq.n	800565a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fae5 	bl	8004c00 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005636:	f7fd fe29 	bl	800328c <HAL_GetTick>
 800563a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800563c:	e008      	b.n	8005650 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800563e:	f7fd fe25 	bl	800328c <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d901      	bls.n	8005650 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e09b      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005650:	f7ff fbc9 	bl	8004de6 <LL_RCC_IsActiveFlag_PPRE1>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f1      	beq.n	800563e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d017      	beq.n	8005696 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff fadb 	bl	8004c28 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005672:	f7fd fe0b 	bl	800328c <HAL_GetTick>
 8005676:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005678:	e008      	b.n	800568c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800567a:	f7fd fe07 	bl	800328c <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b02      	cmp	r3, #2
 8005686:	d901      	bls.n	800568c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e07d      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800568c:	f7ff fbbd 	bl	8004e0a <LL_RCC_IsActiveFlag_PPRE2>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f1      	beq.n	800567a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d043      	beq.n	800572a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d106      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80056aa:	f7ff f87b 	bl	80047a4 <LL_RCC_HSE_IsReady>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d11e      	bne.n	80056f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e067      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d106      	bne.n	80056ce <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80056c0:	f7ff fb16 	bl	8004cf0 <LL_RCC_PLL_IsReady>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d113      	bne.n	80056f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e05c      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80056d6:	f7ff f9e3 	bl	8004aa0 <LL_RCC_MSI_IsReady>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d108      	bne.n	80056f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e051      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80056e4:	f7ff f88e 	bl	8004804 <LL_RCC_HSI_IsReady>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e04a      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff fa21 	bl	8004b3e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056fc:	f7fd fdc6 	bl	800328c <HAL_GetTick>
 8005700:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005702:	e00a      	b.n	800571a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005704:	f7fd fdc2 	bl	800328c <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e036      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571a:	f7ff fa24 	bl	8004b66 <LL_RCC_GetSysClkSource>
 800571e:	4602      	mov	r2, r0
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	429a      	cmp	r2, r3
 8005728:	d1ec      	bne.n	8005704 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800572a:	4b19      	ldr	r3, [pc, #100]	; (8005790 <HAL_RCC_ClockConfig+0x278>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0307 	and.w	r3, r3, #7
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d21b      	bcs.n	8005770 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005738:	4b15      	ldr	r3, [pc, #84]	; (8005790 <HAL_RCC_ClockConfig+0x278>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f023 0207 	bic.w	r2, r3, #7
 8005740:	4913      	ldr	r1, [pc, #76]	; (8005790 <HAL_RCC_ClockConfig+0x278>)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005748:	f7fd fda0 	bl	800328c <HAL_GetTick>
 800574c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800574e:	e008      	b.n	8005762 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005750:	f7fd fd9c 	bl	800328c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e012      	b.n	8005788 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005762:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <HAL_RCC_ClockConfig+0x278>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d1ef      	bne.n	8005750 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005770:	f000 f87e 	bl	8005870 <HAL_RCC_GetHCLKFreq>
 8005774:	4603      	mov	r3, r0
 8005776:	4a07      	ldr	r2, [pc, #28]	; (8005794 <HAL_RCC_ClockConfig+0x27c>)
 8005778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800577a:	f7fd fd93 	bl	80032a4 <HAL_GetTickPrio>
 800577e:	4603      	mov	r3, r0
 8005780:	4618      	mov	r0, r3
 8005782:	f7fd fd35 	bl	80031f0 <HAL_InitTick>
 8005786:	4603      	mov	r3, r0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	58004000 	.word	0x58004000
 8005794:	20000008 	.word	0x20000008

08005798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005798:	b590      	push	{r4, r7, lr}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800579e:	f7ff f9e2 	bl	8004b66 <LL_RCC_GetSysClkSource>
 80057a2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80057aa:	f7ff f99e 	bl	8004aea <LL_RCC_MSI_GetRange>
 80057ae:	4603      	mov	r3, r0
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	f003 030f 	and.w	r3, r3, #15
 80057b6:	4a2b      	ldr	r2, [pc, #172]	; (8005864 <HAL_RCC_GetSysClockFreq+0xcc>)
 80057b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	e04b      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d102      	bne.n	80057cc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057c6:	4b28      	ldr	r3, [pc, #160]	; (8005868 <HAL_RCC_GetSysClockFreq+0xd0>)
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e045      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d10a      	bne.n	80057e8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80057d2:	f7fe ffb7 	bl	8004744 <LL_RCC_HSE_IsEnabledDiv2>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d102      	bne.n	80057e2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80057dc:	4b22      	ldr	r3, [pc, #136]	; (8005868 <HAL_RCC_GetSysClockFreq+0xd0>)
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	e03a      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80057e2:	4b22      	ldr	r3, [pc, #136]	; (800586c <HAL_RCC_GetSysClockFreq+0xd4>)
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e037      	b.n	8005858 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80057e8:	f7ff fab9 	bl	8004d5e <LL_RCC_PLL_GetMainSource>
 80057ec:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d003      	beq.n	80057fc <HAL_RCC_GetSysClockFreq+0x64>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d003      	beq.n	8005802 <HAL_RCC_GetSysClockFreq+0x6a>
 80057fa:	e00d      	b.n	8005818 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80057fc:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <HAL_RCC_GetSysClockFreq+0xd0>)
 80057fe:	60bb      	str	r3, [r7, #8]
        break;
 8005800:	e015      	b.n	800582e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005802:	f7fe ff9f 	bl	8004744 <LL_RCC_HSE_IsEnabledDiv2>
 8005806:	4603      	mov	r3, r0
 8005808:	2b01      	cmp	r3, #1
 800580a:	d102      	bne.n	8005812 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800580c:	4b16      	ldr	r3, [pc, #88]	; (8005868 <HAL_RCC_GetSysClockFreq+0xd0>)
 800580e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005810:	e00d      	b.n	800582e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005812:	4b16      	ldr	r3, [pc, #88]	; (800586c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005814:	60bb      	str	r3, [r7, #8]
        break;
 8005816:	e00a      	b.n	800582e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005818:	f7ff f967 	bl	8004aea <LL_RCC_MSI_GetRange>
 800581c:	4603      	mov	r3, r0
 800581e:	091b      	lsrs	r3, r3, #4
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	4a0f      	ldr	r2, [pc, #60]	; (8005864 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800582a:	60bb      	str	r3, [r7, #8]
        break;
 800582c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800582e:	f7ff fa71 	bl	8004d14 <LL_RCC_PLL_GetN>
 8005832:	4602      	mov	r2, r0
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	fb03 f402 	mul.w	r4, r3, r2
 800583a:	f7ff fa84 	bl	8004d46 <LL_RCC_PLL_GetDivider>
 800583e:	4603      	mov	r3, r0
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	3301      	adds	r3, #1
 8005844:	fbb4 f4f3 	udiv	r4, r4, r3
 8005848:	f7ff fa71 	bl	8004d2e <LL_RCC_PLL_GetR>
 800584c:	4603      	mov	r3, r0
 800584e:	0f5b      	lsrs	r3, r3, #29
 8005850:	3301      	adds	r3, #1
 8005852:	fbb4 f3f3 	udiv	r3, r4, r3
 8005856:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005858:	68fb      	ldr	r3, [r7, #12]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	bd90      	pop	{r4, r7, pc}
 8005862:	bf00      	nop
 8005864:	0800fd28 	.word	0x0800fd28
 8005868:	00f42400 	.word	0x00f42400
 800586c:	01e84800 	.word	0x01e84800

08005870 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005870:	b598      	push	{r3, r4, r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005874:	f7ff ff90 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8005878:	4604      	mov	r4, r0
 800587a:	f7ff f9e9 	bl	8004c50 <LL_RCC_GetAHBPrescaler>
 800587e:	4603      	mov	r3, r0
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	4a03      	ldr	r2, [pc, #12]	; (8005894 <HAL_RCC_GetHCLKFreq+0x24>)
 8005888:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005890:	4618      	mov	r0, r3
 8005892:	bd98      	pop	{r3, r4, r7, pc}
 8005894:	0800fcc8 	.word	0x0800fcc8

08005898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005898:	b598      	push	{r3, r4, r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800589c:	f7ff ffe8 	bl	8005870 <HAL_RCC_GetHCLKFreq>
 80058a0:	4604      	mov	r4, r0
 80058a2:	f7ff f9ef 	bl	8004c84 <LL_RCC_GetAPB1Prescaler>
 80058a6:	4603      	mov	r3, r0
 80058a8:	0a1b      	lsrs	r3, r3, #8
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	4a04      	ldr	r2, [pc, #16]	; (80058c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80058bc:	4618      	mov	r0, r3
 80058be:	bd98      	pop	{r3, r4, r7, pc}
 80058c0:	0800fd08 	.word	0x0800fd08

080058c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c4:	b598      	push	{r3, r4, r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80058c8:	f7ff ffd2 	bl	8005870 <HAL_RCC_GetHCLKFreq>
 80058cc:	4604      	mov	r4, r0
 80058ce:	f7ff f9e5 	bl	8004c9c <LL_RCC_GetAPB2Prescaler>
 80058d2:	4603      	mov	r3, r0
 80058d4:	0adb      	lsrs	r3, r3, #11
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	4a04      	ldr	r2, [pc, #16]	; (80058ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80058dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e0:	f003 031f 	and.w	r3, r3, #31
 80058e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	bd98      	pop	{r3, r4, r7, pc}
 80058ec:	0800fd08 	.word	0x0800fd08

080058f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80058f0:	b590      	push	{r4, r7, lr}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2bb0      	cmp	r3, #176	; 0xb0
 80058fc:	d903      	bls.n	8005906 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80058fe:	4b15      	ldr	r3, [pc, #84]	; (8005954 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e007      	b.n	8005916 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	091b      	lsrs	r3, r3, #4
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	4a11      	ldr	r2, [pc, #68]	; (8005954 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005914:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005916:	f7ff f9a7 	bl	8004c68 <LL_RCC_GetAHB4Prescaler>
 800591a:	4603      	mov	r3, r0
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	4a0d      	ldr	r2, [pc, #52]	; (8005958 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	fbb2 f3f3 	udiv	r3, r2, r3
 800592e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4a0a      	ldr	r2, [pc, #40]	; (800595c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	0c9c      	lsrs	r4, r3, #18
 800593a:	f7fe fef5 	bl	8004728 <HAL_PWREx_GetVoltageRange>
 800593e:	4603      	mov	r3, r0
 8005940:	4619      	mov	r1, r3
 8005942:	4620      	mov	r0, r4
 8005944:	f000 f80c 	bl	8005960 <RCC_SetFlashLatency>
 8005948:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	bd90      	pop	{r4, r7, pc}
 8005952:	bf00      	nop
 8005954:	0800fd28 	.word	0x0800fd28
 8005958:	0800fcc8 	.word	0x0800fcc8
 800595c:	431bde83 	.word	0x431bde83

08005960 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005960:	b590      	push	{r4, r7, lr}
 8005962:	b093      	sub	sp, #76	; 0x4c
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800596a:	4b37      	ldr	r3, [pc, #220]	; (8005a48 <RCC_SetFlashLatency+0xe8>)
 800596c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005970:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005972:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005976:	4a35      	ldr	r2, [pc, #212]	; (8005a4c <RCC_SetFlashLatency+0xec>)
 8005978:	f107 031c 	add.w	r3, r7, #28
 800597c:	ca07      	ldmia	r2, {r0, r1, r2}
 800597e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005982:	4b33      	ldr	r3, [pc, #204]	; (8005a50 <RCC_SetFlashLatency+0xf0>)
 8005984:	f107 040c 	add.w	r4, r7, #12
 8005988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800598a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800598e:	2300      	movs	r3, #0
 8005990:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005998:	d11a      	bne.n	80059d0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800599a:	2300      	movs	r3, #0
 800599c:	643b      	str	r3, [r7, #64]	; 0x40
 800599e:	e013      	b.n	80059c8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80059a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	3348      	adds	r3, #72	; 0x48
 80059a6:	443b      	add	r3, r7
 80059a8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d807      	bhi.n	80059c2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80059b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	3348      	adds	r3, #72	; 0x48
 80059b8:	443b      	add	r3, r7
 80059ba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80059be:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80059c0:	e020      	b.n	8005a04 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80059c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c4:	3301      	adds	r3, #1
 80059c6:	643b      	str	r3, [r7, #64]	; 0x40
 80059c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d9e8      	bls.n	80059a0 <RCC_SetFlashLatency+0x40>
 80059ce:	e019      	b.n	8005a04 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80059d0:	2300      	movs	r3, #0
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059d4:	e013      	b.n	80059fe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80059d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	3348      	adds	r3, #72	; 0x48
 80059dc:	443b      	add	r3, r7
 80059de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d807      	bhi.n	80059f8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80059e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	3348      	adds	r3, #72	; 0x48
 80059ee:	443b      	add	r3, r7
 80059f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80059f4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80059f6:	e005      	b.n	8005a04 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80059f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fa:	3301      	adds	r3, #1
 80059fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d9e8      	bls.n	80059d6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005a04:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <RCC_SetFlashLatency+0xf4>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f023 0207 	bic.w	r2, r3, #7
 8005a0c:	4911      	ldr	r1, [pc, #68]	; (8005a54 <RCC_SetFlashLatency+0xf4>)
 8005a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a10:	4313      	orrs	r3, r2
 8005a12:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a14:	f7fd fc3a 	bl	800328c <HAL_GetTick>
 8005a18:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005a1a:	e008      	b.n	8005a2e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005a1c:	f7fd fc36 	bl	800328c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e007      	b.n	8005a3e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005a2e:	4b09      	ldr	r3, [pc, #36]	; (8005a54 <RCC_SetFlashLatency+0xf4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d1ef      	bne.n	8005a1c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	374c      	adds	r7, #76	; 0x4c
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd90      	pop	{r4, r7, pc}
 8005a46:	bf00      	nop
 8005a48:	0800e528 	.word	0x0800e528
 8005a4c:	0800e538 	.word	0x0800e538
 8005a50:	0800e544 	.word	0x0800e544
 8005a54:	58004000 	.word	0x58004000

08005a58 <LL_RCC_LSE_IsEnabled>:
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <LL_RCC_LSE_IsEnabled+0x18>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e000      	b.n	8005a72 <LL_RCC_LSE_IsEnabled+0x1a>
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <LL_RCC_LSE_IsReady>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d101      	bne.n	8005a94 <LL_RCC_LSE_IsReady+0x18>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <LL_RCC_LSE_IsReady+0x1a>
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <LL_RCC_MSI_EnablePLLMode>:
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	6013      	str	r3, [r2, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <LL_RCC_SetRFWKPClockSource>:
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ace:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ad2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <LL_RCC_SetSMPSClockSource>:
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	f023 0203 	bic.w	r2, r3, #3
 8005afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <LL_RCC_SetSMPSPrescaler>:
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <LL_RCC_SetUSARTClockSource>:
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	f023 0203 	bic.w	r2, r3, #3
 8005b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <LL_RCC_SetLPUARTClockSource>:
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <LL_RCC_SetI2CClockSource>:
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	091b      	lsrs	r3, r3, #4
 8005ba6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005baa:	43db      	mvns	r3, r3
 8005bac:	401a      	ands	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <LL_RCC_SetLPTIMClockSource>:
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	43db      	mvns	r3, r3
 8005be4:	401a      	ands	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	041b      	lsls	r3, r3, #16
 8005bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <LL_RCC_SetSAIClockSource>:
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LL_RCC_SetRNGClockSource>:
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <LL_RCC_SetCLK48ClockSource>:
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <LL_RCC_SetUSBClockSource>:
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff ffe3 	bl	8005c58 <LL_RCC_SetCLK48ClockSource>
}
 8005c92:	bf00      	nop
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <LL_RCC_SetADCClockSource>:
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <LL_RCC_SetRTCClockSource>:
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <LL_RCC_GetRTCClockSource>:
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <LL_RCC_ForceBackupDomainReset>:
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d24:	bf00      	nop
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <LL_RCC_ReleaseBackupDomainReset>:
{
 8005d2e:	b480      	push	{r7}
 8005d30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d46:	bf00      	nop
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <LL_RCC_PLLSAI1_Enable>:
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d62:	6013      	str	r3, [r2, #0]
}
 8005d64:	bf00      	nop
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <LL_RCC_PLLSAI1_Disable>:
{
 8005d6e:	b480      	push	{r7}
 8005d70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d80:	6013      	str	r3, [r2, #0]
}
 8005d82:	bf00      	nop
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <LL_RCC_PLLSAI1_IsReady>:
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d9e:	d101      	bne.n	8005da4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005db8:	2300      	movs	r3, #0
 8005dba:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d034      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005dd4:	d021      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005dd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005dda:	d81b      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ddc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005de0:	d01d      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005de2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005de6:	d815      	bhi.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005df0:	d110      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e00:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e02:	e00d      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 f94d 	bl	80060a8 <RCCEx_PLLSAI1_ConfigNP>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e12:	e005      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	77fb      	strb	r3, [r7, #31]
        break;
 8005e18:	e002      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e20:	7ffb      	ldrb	r3, [r7, #31]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d105      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff fee8 	bl	8005c00 <LL_RCC_SetSAIClockSource>
 8005e30:	e001      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e32:	7ffb      	ldrb	r3, [r7, #31]
 8005e34:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d046      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005e42:	f7ff ff56 	bl	8005cf2 <LL_RCC_GetRTCClockSource>
 8005e46:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d03c      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005e52:	f7fe fc59 	bl	8004708 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d105      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff ff30 	bl	8005cc6 <LL_RCC_SetRTCClockSource>
 8005e66:	e02e      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e70:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005e72:	f7ff ff4b 	bl	8005d0c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005e76:	f7ff ff5a 	bl	8005d2e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005e92:	f7ff fde1 	bl	8005a58 <LL_RCC_LSE_IsEnabled>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d114      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e9c:	f7fd f9f6 	bl	800328c <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ea2:	e00b      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea4:	f7fd f9f2 	bl	800328c <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d902      	bls.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	77fb      	strb	r3, [r7, #31]
              break;
 8005eba:	e004      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ebc:	f7ff fdde 	bl	8005a7c <LL_RCC_LSE_IsReady>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d1ee      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005ec6:	7ffb      	ldrb	r3, [r7, #31]
 8005ec8:	77bb      	strb	r3, [r7, #30]
 8005eca:	e001      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ecc:	7ffb      	ldrb	r3, [r7, #31]
 8005ece:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d004      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7ff fe2a 	bl	8005b3a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d004      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7ff fe35 	bl	8005b66 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff fe5d 	bl	8005bcc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fe52 	bl	8005bcc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0304 	and.w	r3, r3, #4
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff fe2a 	bl	8005b92 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0308 	and.w	r3, r3, #8
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d004      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff fe1f 	bl	8005b92 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d022      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fe8d 	bl	8005c84 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f72:	d107      	bne.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f82:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f8c:	d10b      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	3304      	adds	r3, #4
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 f8e3 	bl	800615e <RCCEx_PLLSAI1_ConfigNQ>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005f9c:	7ffb      	ldrb	r3, [r7, #31]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005fa2:	7ffb      	ldrb	r3, [r7, #31]
 8005fa4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d02b      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d008      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc4:	d003      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d105      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff fe2a 	bl	8005c2c <LL_RCC_SetRNGClockSource>
 8005fd8:	e00a      	b.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f7ff fe21 	bl	8005c2c <LL_RCC_SetRNGClockSource>
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff fe34 	bl	8005c58 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005ff8:	d107      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006004:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006008:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006012:	2b00      	cmp	r3, #0
 8006014:	d022      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fe3d 	bl	8005c9a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006028:	d107      	bne.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800602a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006038:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006042:	d10b      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	4618      	mov	r0, r3
 800604a:	f000 f8e3 	bl	8006214 <RCCEx_PLLSAI1_ConfigNR>
 800604e:	4603      	mov	r3, r0
 8006050:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006052:	7ffb      	ldrb	r3, [r7, #31]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006058:	7ffb      	ldrb	r3, [r7, #31]
 800605a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fd26 	bl	8005abe <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fd45 	bl	8005b12 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fd2c 	bl	8005aea <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006092:	7fbb      	ldrb	r3, [r7, #30]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 80060a0:	f7ff fcfe 	bl	8005aa0 <LL_RCC_MSI_EnablePLLMode>
}
 80060a4:	bf00      	nop
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80060b4:	f7ff fe5b 	bl	8005d6e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060b8:	f7fd f8e8 	bl	800328c <HAL_GetTick>
 80060bc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060be:	e009      	b.n	80060d4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060c0:	f7fd f8e4 	bl	800328c <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d902      	bls.n	80060d4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	73fb      	strb	r3, [r7, #15]
      break;
 80060d2:	e004      	b.n	80060de <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060d4:	f7ff fe5a 	bl	8005d8c <LL_RCC_PLLSAI1_IsReady>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80060de:	7bfb      	ldrb	r3, [r7, #15]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d137      	bne.n	8006154 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80060e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060f8:	4313      	orrs	r3, r2
 80060fa:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80060fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800610e:	4313      	orrs	r3, r2
 8006110:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006112:	f7ff fe1d 	bl	8005d50 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006116:	f7fd f8b9 	bl	800328c <HAL_GetTick>
 800611a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800611c:	e009      	b.n	8006132 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800611e:	f7fd f8b5 	bl	800328c <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d902      	bls.n	8006132 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	73fb      	strb	r3, [r7, #15]
        break;
 8006130:	e004      	b.n	800613c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006132:	f7ff fe2b 	bl	8005d8c <LL_RCC_PLLSAI1_IsReady>
 8006136:	4603      	mov	r3, r0
 8006138:	2b01      	cmp	r3, #1
 800613a:	d1f0      	bne.n	800611e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d108      	bne.n	8006154 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006150:	4313      	orrs	r3, r2
 8006152:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800616a:	f7ff fe00 	bl	8005d6e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800616e:	f7fd f88d 	bl	800328c <HAL_GetTick>
 8006172:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006174:	e009      	b.n	800618a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006176:	f7fd f889 	bl	800328c <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d902      	bls.n	800618a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	73fb      	strb	r3, [r7, #15]
      break;
 8006188:	e004      	b.n	8006194 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800618a:	f7ff fdff 	bl	8005d8c <LL_RCC_PLLSAI1_IsReady>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1f0      	bne.n	8006176 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d137      	bne.n	800620a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800619a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	021b      	lsls	r3, r3, #8
 80061aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ae:	4313      	orrs	r3, r2
 80061b0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80061b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061c4:	4313      	orrs	r3, r2
 80061c6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80061c8:	f7ff fdc2 	bl	8005d50 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061cc:	f7fd f85e 	bl	800328c <HAL_GetTick>
 80061d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80061d2:	e009      	b.n	80061e8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061d4:	f7fd f85a 	bl	800328c <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d902      	bls.n	80061e8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	73fb      	strb	r3, [r7, #15]
        break;
 80061e6:	e004      	b.n	80061f2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80061e8:	f7ff fdd0 	bl	8005d8c <LL_RCC_PLLSAI1_IsReady>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d1f0      	bne.n	80061d4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d108      	bne.n	800620a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80061f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006206:	4313      	orrs	r3, r2
 8006208:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800621c:	2300      	movs	r3, #0
 800621e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006220:	f7ff fda5 	bl	8005d6e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006224:	f7fd f832 	bl	800328c <HAL_GetTick>
 8006228:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800622a:	e009      	b.n	8006240 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800622c:	f7fd f82e 	bl	800328c <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d902      	bls.n	8006240 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	73fb      	strb	r3, [r7, #15]
      break;
 800623e:	e004      	b.n	800624a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006240:	f7ff fda4 	bl	8005d8c <LL_RCC_PLLSAI1_IsReady>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1f0      	bne.n	800622c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800624a:	7bfb      	ldrb	r3, [r7, #15]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d137      	bne.n	80062c0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006264:	4313      	orrs	r3, r2
 8006266:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800627a:	4313      	orrs	r3, r2
 800627c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800627e:	f7ff fd67 	bl	8005d50 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006282:	f7fd f803 	bl	800328c <HAL_GetTick>
 8006286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006288:	e009      	b.n	800629e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800628a:	f7fc ffff 	bl	800328c <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d902      	bls.n	800629e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	73fb      	strb	r3, [r7, #15]
        break;
 800629c:	e004      	b.n	80062a8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800629e:	f7ff fd75 	bl	8005d8c <LL_RCC_PLLSAI1_IsReady>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d1f0      	bne.n	800628a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d108      	bne.n	80062c0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80062ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062bc:	4313      	orrs	r3, r2
 80062be:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e09f      	b.n	800641e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d106      	bne.n	80062f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7fc faaa 	bl	800284c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006300:	4b49      	ldr	r3, [pc, #292]	; (8006428 <HAL_RTC_Init+0x15c>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b10      	cmp	r3, #16
 800630a:	d07e      	beq.n	800640a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	22ca      	movs	r2, #202	; 0xca
 8006312:	625a      	str	r2, [r3, #36]	; 0x24
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2253      	movs	r2, #83	; 0x53
 800631a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f8ab 	bl	8006478 <RTC_EnterInitMode>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	22ff      	movs	r2, #255	; 0xff
 800632e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2204      	movs	r2, #4
 8006334:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	73fb      	strb	r3, [r7, #15]
 800633c:	e067      	b.n	800640e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800634c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006350:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6899      	ldr	r1, [r3, #8]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	68d2      	ldr	r2, [r2, #12]
 8006378:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6919      	ldr	r1, [r3, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	041a      	lsls	r2, r3, #16
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	430a      	orrs	r2, r1
 800638c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68da      	ldr	r2, [r3, #12]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800639c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0203 	bic.w	r2, r2, #3
 80063ac:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	431a      	orrs	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d113      	bne.n	80063fc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f829 	bl	800642c <HAL_RTC_WaitForSynchro>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00d      	beq.n	80063fc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	22ff      	movs	r2, #255	; 0xff
 80063e6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2204      	movs	r2, #4
 80063ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e010      	b.n	800641e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	22ff      	movs	r2, #255	; 0xff
 8006402:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]
 8006408:	e001      	b.n	800640e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d103      	bne.n	800641c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40002800 	.word	0x40002800

0800642c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006442:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006444:	f7fc ff22 	bl	800328c <HAL_GetTick>
 8006448:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800644a:	e009      	b.n	8006460 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800644c:	f7fc ff1e 	bl	800328c <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800645a:	d901      	bls.n	8006460 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e007      	b.n	8006470 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0ee      	beq.n	800644c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d119      	bne.n	80064c2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f04f 32ff 	mov.w	r2, #4294967295
 8006496:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006498:	f7fc fef8 	bl	800328c <HAL_GetTick>
 800649c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800649e:	e009      	b.n	80064b4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80064a0:	f7fc fef4 	bl	800328c <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064ae:	d901      	bls.n	80064b4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e007      	b.n	80064c4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0ee      	beq.n	80064a0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d101      	bne.n	80064e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80064e2:	2302      	movs	r3, #2
 80064e4:	e0a8      	b.n	8006638 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2202      	movs	r2, #2
 80064f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	22ca      	movs	r2, #202	; 0xca
 80064fc:	625a      	str	r2, [r3, #36]	; 0x24
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2253      	movs	r2, #83	; 0x53
 8006504:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006510:	2b00      	cmp	r3, #0
 8006512:	d020      	beq.n	8006556 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006514:	f7fc feba 	bl	800328c <HAL_GetTick>
 8006518:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800651a:	e015      	b.n	8006548 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800651c:	f7fc feb6 	bl	800328c <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800652a:	d90d      	bls.n	8006548 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	22ff      	movs	r2, #255	; 0xff
 8006532:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2203      	movs	r2, #3
 8006538:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e077      	b.n	8006638 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e2      	bne.n	800651c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006564:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006576:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006578:	f7fc fe88 	bl	800328c <HAL_GetTick>
 800657c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800657e:	e015      	b.n	80065ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006580:	f7fc fe84 	bl	800328c <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800658e:	d90d      	bls.n	80065ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	22ff      	movs	r2, #255	; 0xff
 8006596:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2203      	movs	r2, #3
 800659c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e045      	b.n	8006638 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0e2      	beq.n	8006580 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68ba      	ldr	r2, [r7, #8]
 80065c0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 0207 	bic.w	r2, r2, #7
 80065d0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6899      	ldr	r1, [r3, #8]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	430a      	orrs	r2, r1
 80065e0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80065e2:	4b17      	ldr	r3, [pc, #92]	; (8006640 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80065e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065e8:	4a15      	ldr	r2, [pc, #84]	; (8006640 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80065ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80065f2:	4b13      	ldr	r3, [pc, #76]	; (8006640 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a12      	ldr	r2, [pc, #72]	; (8006640 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80065f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065fc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800660c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800661c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	22ff      	movs	r2, #255	; 0xff
 8006624:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	58000800 	.word	0x58000800

08006644 <LL_RCC_GetUSARTClockSource>:
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800664c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006650:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4013      	ands	r3, r2
}
 8006658:	4618      	mov	r0, r3
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <LL_RCC_GetLPUARTClockSource>:
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800666c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006670:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4013      	ands	r3, r2
}
 8006678:	4618      	mov	r0, r3
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e042      	b.n	800671c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7fc fbc1 	bl	8002e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2224      	movs	r2, #36	; 0x24
 80066b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f022 0201 	bic.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fc4a 	bl	8006f60 <UART_SetConfig>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e022      	b.n	800671c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fe66 	bl	80073b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 feed 	bl	80074f4 <UART_CheckIdleState>
 800671a:	4603      	mov	r3, r0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08a      	sub	sp, #40	; 0x28
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	603b      	str	r3, [r7, #0]
 8006730:	4613      	mov	r3, r2
 8006732:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673a:	2b20      	cmp	r3, #32
 800673c:	d17b      	bne.n	8006836 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <HAL_UART_Transmit+0x26>
 8006744:	88fb      	ldrh	r3, [r7, #6]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e074      	b.n	8006838 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2221      	movs	r2, #33	; 0x21
 800675a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800675e:	f7fc fd95 	bl	800328c <HAL_GetTick>
 8006762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	88fa      	ldrh	r2, [r7, #6]
 8006768:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	88fa      	ldrh	r2, [r7, #6]
 8006770:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677c:	d108      	bne.n	8006790 <HAL_UART_Transmit+0x6c>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	e003      	b.n	8006798 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006794:	2300      	movs	r3, #0
 8006796:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006798:	e030      	b.n	80067fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2200      	movs	r2, #0
 80067a2:	2180      	movs	r1, #128	; 0x80
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 ff4f 	bl	8007648 <UART_WaitOnFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e03d      	b.n	8006838 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10b      	bne.n	80067da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	3302      	adds	r3, #2
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	e007      	b.n	80067ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	781a      	ldrb	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	3301      	adds	r3, #1
 80067e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1c8      	bne.n	800679a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2200      	movs	r2, #0
 8006810:	2140      	movs	r1, #64	; 0x40
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 ff18 	bl	8007648 <UART_WaitOnFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2220      	movs	r2, #32
 8006822:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e006      	b.n	8006838 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2220      	movs	r2, #32
 800682e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	e000      	b.n	8006838 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006836:	2302      	movs	r3, #2
  }
}
 8006838:	4618      	mov	r0, r3
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08a      	sub	sp, #40	; 0x28
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4613      	mov	r3, r2
 800684c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006854:	2b20      	cmp	r3, #32
 8006856:	d137      	bne.n	80068c8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_UART_Receive_DMA+0x24>
 800685e:	88fb      	ldrh	r3, [r7, #6]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e030      	b.n	80068ca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a18      	ldr	r2, [pc, #96]	; (80068d4 <HAL_UART_Receive_DMA+0x94>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d01f      	beq.n	80068b8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d018      	beq.n	80068b8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	613b      	str	r3, [r7, #16]
   return(result);
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	623b      	str	r3, [r7, #32]
 80068a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a8:	69f9      	ldr	r1, [r7, #28]
 80068aa:	6a3a      	ldr	r2, [r7, #32]
 80068ac:	e841 2300 	strex	r3, r2, [r1]
 80068b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e6      	bne.n	8006886 <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80068b8:	88fb      	ldrh	r3, [r7, #6]
 80068ba:	461a      	mov	r2, r3
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 ff2a 	bl	8007718 <UART_Start_Receive_DMA>
 80068c4:	4603      	mov	r3, r0
 80068c6:	e000      	b.n	80068ca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80068c8:	2302      	movs	r3, #2
  }
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3728      	adds	r7, #40	; 0x28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	40008000 	.word	0x40008000

080068d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b0ba      	sub	sp, #232	; 0xe8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80068fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006902:	f640 030f 	movw	r3, #2063	; 0x80f
 8006906:	4013      	ands	r3, r2
 8006908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800690c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d11b      	bne.n	800694c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b00      	cmp	r3, #0
 800691e:	d015      	beq.n	800694c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006924:	f003 0320 	and.w	r3, r3, #32
 8006928:	2b00      	cmp	r3, #0
 800692a:	d105      	bne.n	8006938 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800692c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d009      	beq.n	800694c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 82e3 	beq.w	8006f08 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
      }
      return;
 800694a:	e2dd      	b.n	8006f08 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800694c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 8123 	beq.w	8006b9c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006956:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800695a:	4b8d      	ldr	r3, [pc, #564]	; (8006b90 <HAL_UART_IRQHandler+0x2b8>)
 800695c:	4013      	ands	r3, r2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d106      	bne.n	8006970 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006962:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006966:	4b8b      	ldr	r3, [pc, #556]	; (8006b94 <HAL_UART_IRQHandler+0x2bc>)
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 8116 	beq.w	8006b9c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d011      	beq.n	80069a0 <HAL_UART_IRQHandler+0xc8>
 800697c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2201      	movs	r2, #1
 800698e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006996:	f043 0201 	orr.w	r2, r3, #1
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d011      	beq.n	80069d0 <HAL_UART_IRQHandler+0xf8>
 80069ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2202      	movs	r2, #2
 80069be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c6:	f043 0204 	orr.w	r2, r3, #4
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d011      	beq.n	8006a00 <HAL_UART_IRQHandler+0x128>
 80069dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00b      	beq.n	8006a00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2204      	movs	r2, #4
 80069ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f6:	f043 0202 	orr.w	r2, r3, #2
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d017      	beq.n	8006a3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d105      	bne.n	8006a24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006a1c:	4b5c      	ldr	r3, [pc, #368]	; (8006b90 <HAL_UART_IRQHandler+0x2b8>)
 8006a1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00b      	beq.n	8006a3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2208      	movs	r2, #8
 8006a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a32:	f043 0208 	orr.w	r2, r3, #8
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d012      	beq.n	8006a6e <HAL_UART_IRQHandler+0x196>
 8006a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00c      	beq.n	8006a6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a64:	f043 0220 	orr.w	r2, r3, #32
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 8249 	beq.w	8006f0c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d013      	beq.n	8006aae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d007      	beq.n	8006aae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d005      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d054      	beq.n	8006b7c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 ff07 	bl	80078e6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d146      	bne.n	8006b74 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3308      	adds	r3, #8
 8006aec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006b12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006b1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1d9      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d017      	beq.n	8006b6c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b42:	4a15      	ldr	r2, [pc, #84]	; (8006b98 <HAL_UART_IRQHandler+0x2c0>)
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fc fedd 	bl	800390c <HAL_DMA_Abort_IT>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d019      	beq.n	8006b8c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006b66:	4610      	mov	r0, r2
 8006b68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6a:	e00f      	b.n	8006b8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f9e1 	bl	8006f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b72:	e00b      	b.n	8006b8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f9dd 	bl	8006f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7a:	e007      	b.n	8006b8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f9d9 	bl	8006f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006b8a:	e1bf      	b.n	8006f0c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8c:	bf00      	nop
    return;
 8006b8e:	e1bd      	b.n	8006f0c <HAL_UART_IRQHandler+0x634>
 8006b90:	10000001 	.word	0x10000001
 8006b94:	04000120 	.word	0x04000120
 8006b98:	08007b9d 	.word	0x08007b9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	f040 8153 	bne.w	8006e4c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006baa:	f003 0310 	and.w	r3, r3, #16
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 814c 	beq.w	8006e4c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 8145 	beq.w	8006e4c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	f040 80bb 	bne.w	8006d50 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006be8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 818f 	beq.w	8006f10 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	f080 8187 	bcs.w	8006f10 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006c08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f040 8087 	bne.w	8006d2e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006c4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1da      	bne.n	8006c20 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3308      	adds	r3, #8
 8006c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c7c:	f023 0301 	bic.w	r3, r3, #1
 8006c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3308      	adds	r3, #8
 8006c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c9a:	e841 2300 	strex	r3, r2, [r1]
 8006c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1e1      	bne.n	8006c6a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3308      	adds	r3, #8
 8006cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1e3      	bne.n	8006ca6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cfc:	f023 0310 	bic.w	r3, r3, #16
 8006d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006d10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e4      	bne.n	8006cec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fc fd90 	bl	800384e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2202      	movs	r2, #2
 8006d32:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f8fd 	bl	8006f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d4e:	e0df      	b.n	8006f10 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80d1 	beq.w	8006f14 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006d72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 80cc 	beq.w	8006f14 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d84:	e853 3f00 	ldrex	r3, [r3]
 8006d88:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8006da0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006da4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e4      	bne.n	8006d7c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc8:	f023 0301 	bic.w	r3, r3, #1
 8006dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006dda:	633a      	str	r2, [r7, #48]	; 0x30
 8006ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e1      	bne.n	8006db2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0310 	bic.w	r3, r3, #16
 8006e16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e24:	61fb      	str	r3, [r7, #28]
 8006e26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	69b9      	ldr	r1, [r7, #24]
 8006e2a:	69fa      	ldr	r2, [r7, #28]
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	617b      	str	r3, [r7, #20]
   return(result);
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e4      	bne.n	8006e02 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f87f 	bl	8006f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e4a:	e063      	b.n	8006f14 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00e      	beq.n	8006e76 <HAL_UART_IRQHandler+0x59e>
 8006e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d008      	beq.n	8006e76 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fed5 	bl	8007c1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e74:	e051      	b.n	8006f1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d014      	beq.n	8006eac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d105      	bne.n	8006e9a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d008      	beq.n	8006eac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d03a      	beq.n	8006f18 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
    }
    return;
 8006eaa:	e035      	b.n	8006f18 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d009      	beq.n	8006ecc <HAL_UART_IRQHandler+0x5f4>
 8006eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fe7f 	bl	8007bc8 <UART_EndTransmit_IT>
    return;
 8006eca:	e026      	b.n	8006f1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d009      	beq.n	8006eec <HAL_UART_IRQHandler+0x614>
 8006ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006edc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d003      	beq.n	8006eec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 feae 	bl	8007c46 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006eea:	e016      	b.n	8006f1a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d010      	beq.n	8006f1a <HAL_UART_IRQHandler+0x642>
 8006ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	da0c      	bge.n	8006f1a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fe96 	bl	8007c32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f06:	e008      	b.n	8006f1a <HAL_UART_IRQHandler+0x642>
      return;
 8006f08:	bf00      	nop
 8006f0a:	e006      	b.n	8006f1a <HAL_UART_IRQHandler+0x642>
    return;
 8006f0c:	bf00      	nop
 8006f0e:	e004      	b.n	8006f1a <HAL_UART_IRQHandler+0x642>
      return;
 8006f10:	bf00      	nop
 8006f12:	e002      	b.n	8006f1a <HAL_UART_IRQHandler+0x642>
      return;
 8006f14:	bf00      	nop
 8006f16:	e000      	b.n	8006f1a <HAL_UART_IRQHandler+0x642>
    return;
 8006f18:	bf00      	nop
  }
}
 8006f1a:	37e8      	adds	r7, #232	; 0xe8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f64:	b08c      	sub	sp, #48	; 0x30
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	689a      	ldr	r2, [r3, #8]
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4baf      	ldr	r3, [pc, #700]	; (800724c <UART_SetConfig+0x2ec>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	6812      	ldr	r2, [r2, #0]
 8006f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f98:	430b      	orrs	r3, r1
 8006f9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	430a      	orrs	r2, r1
 8006fb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4aa4      	ldr	r2, [pc, #656]	; (8007250 <UART_SetConfig+0x2f0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d004      	beq.n	8006fcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006fd6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	6812      	ldr	r2, [r2, #0]
 8006fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fe0:	430b      	orrs	r3, r1
 8006fe2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fea:	f023 010f 	bic.w	r1, r3, #15
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a95      	ldr	r2, [pc, #596]	; (8007254 <UART_SetConfig+0x2f4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d125      	bne.n	8007050 <UART_SetConfig+0xf0>
 8007004:	2003      	movs	r0, #3
 8007006:	f7ff fb1d 	bl	8006644 <LL_RCC_GetUSARTClockSource>
 800700a:	4603      	mov	r3, r0
 800700c:	2b03      	cmp	r3, #3
 800700e:	d81b      	bhi.n	8007048 <UART_SetConfig+0xe8>
 8007010:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <UART_SetConfig+0xb8>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	08007029 	.word	0x08007029
 800701c:	08007039 	.word	0x08007039
 8007020:	08007031 	.word	0x08007031
 8007024:	08007041 	.word	0x08007041
 8007028:	2301      	movs	r3, #1
 800702a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800702e:	e042      	b.n	80070b6 <UART_SetConfig+0x156>
 8007030:	2302      	movs	r3, #2
 8007032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007036:	e03e      	b.n	80070b6 <UART_SetConfig+0x156>
 8007038:	2304      	movs	r3, #4
 800703a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800703e:	e03a      	b.n	80070b6 <UART_SetConfig+0x156>
 8007040:	2308      	movs	r3, #8
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007046:	e036      	b.n	80070b6 <UART_SetConfig+0x156>
 8007048:	2310      	movs	r3, #16
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800704e:	e032      	b.n	80070b6 <UART_SetConfig+0x156>
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a7e      	ldr	r2, [pc, #504]	; (8007250 <UART_SetConfig+0x2f0>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d12a      	bne.n	80070b0 <UART_SetConfig+0x150>
 800705a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800705e:	f7ff fb01 	bl	8006664 <LL_RCC_GetLPUARTClockSource>
 8007062:	4603      	mov	r3, r0
 8007064:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007068:	d01a      	beq.n	80070a0 <UART_SetConfig+0x140>
 800706a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800706e:	d81b      	bhi.n	80070a8 <UART_SetConfig+0x148>
 8007070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007074:	d00c      	beq.n	8007090 <UART_SetConfig+0x130>
 8007076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800707a:	d815      	bhi.n	80070a8 <UART_SetConfig+0x148>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <UART_SetConfig+0x128>
 8007080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007084:	d008      	beq.n	8007098 <UART_SetConfig+0x138>
 8007086:	e00f      	b.n	80070a8 <UART_SetConfig+0x148>
 8007088:	2300      	movs	r3, #0
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800708e:	e012      	b.n	80070b6 <UART_SetConfig+0x156>
 8007090:	2302      	movs	r3, #2
 8007092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007096:	e00e      	b.n	80070b6 <UART_SetConfig+0x156>
 8007098:	2304      	movs	r3, #4
 800709a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800709e:	e00a      	b.n	80070b6 <UART_SetConfig+0x156>
 80070a0:	2308      	movs	r3, #8
 80070a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070a6:	e006      	b.n	80070b6 <UART_SetConfig+0x156>
 80070a8:	2310      	movs	r3, #16
 80070aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ae:	e002      	b.n	80070b6 <UART_SetConfig+0x156>
 80070b0:	2310      	movs	r3, #16
 80070b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a65      	ldr	r2, [pc, #404]	; (8007250 <UART_SetConfig+0x2f0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	f040 8097 	bne.w	80071f0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d823      	bhi.n	8007112 <UART_SetConfig+0x1b2>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0x170>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	080070f5 	.word	0x080070f5
 80070d4:	08007113 	.word	0x08007113
 80070d8:	080070fd 	.word	0x080070fd
 80070dc:	08007113 	.word	0x08007113
 80070e0:	08007103 	.word	0x08007103
 80070e4:	08007113 	.word	0x08007113
 80070e8:	08007113 	.word	0x08007113
 80070ec:	08007113 	.word	0x08007113
 80070f0:	0800710b 	.word	0x0800710b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f4:	f7fe fbd0 	bl	8005898 <HAL_RCC_GetPCLK1Freq>
 80070f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070fa:	e010      	b.n	800711e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070fc:	4b56      	ldr	r3, [pc, #344]	; (8007258 <UART_SetConfig+0x2f8>)
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007100:	e00d      	b.n	800711e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007102:	f7fe fb49 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8007106:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007108:	e009      	b.n	800711e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800710a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007110:	e005      	b.n	800711e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007112:	2300      	movs	r3, #0
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800711c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 812b 	beq.w	800737c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	4a4c      	ldr	r2, [pc, #304]	; (800725c <UART_SetConfig+0x2fc>)
 800712c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007130:	461a      	mov	r2, r3
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	fbb3 f3f2 	udiv	r3, r3, r2
 8007138:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	685a      	ldr	r2, [r3, #4]
 800713e:	4613      	mov	r3, r2
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	4413      	add	r3, r2
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	429a      	cmp	r2, r3
 8007148:	d305      	bcc.n	8007156 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	429a      	cmp	r2, r3
 8007154:	d903      	bls.n	800715e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800715c:	e10e      	b.n	800737c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800715e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007160:	2200      	movs	r2, #0
 8007162:	60bb      	str	r3, [r7, #8]
 8007164:	60fa      	str	r2, [r7, #12]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	4a3c      	ldr	r2, [pc, #240]	; (800725c <UART_SetConfig+0x2fc>)
 800716c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007170:	b29b      	uxth	r3, r3
 8007172:	2200      	movs	r2, #0
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	607a      	str	r2, [r7, #4]
 8007178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800717c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007180:	f7f9 fc24 	bl	80009cc <__aeabi_uldivmod>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4610      	mov	r0, r2
 800718a:	4619      	mov	r1, r3
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	f04f 0300 	mov.w	r3, #0
 8007194:	020b      	lsls	r3, r1, #8
 8007196:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800719a:	0202      	lsls	r2, r0, #8
 800719c:	6979      	ldr	r1, [r7, #20]
 800719e:	6849      	ldr	r1, [r1, #4]
 80071a0:	0849      	lsrs	r1, r1, #1
 80071a2:	2000      	movs	r0, #0
 80071a4:	460c      	mov	r4, r1
 80071a6:	4605      	mov	r5, r0
 80071a8:	eb12 0804 	adds.w	r8, r2, r4
 80071ac:	eb43 0905 	adc.w	r9, r3, r5
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	469a      	mov	sl, r3
 80071b8:	4693      	mov	fp, r2
 80071ba:	4652      	mov	r2, sl
 80071bc:	465b      	mov	r3, fp
 80071be:	4640      	mov	r0, r8
 80071c0:	4649      	mov	r1, r9
 80071c2:	f7f9 fc03 	bl	80009cc <__aeabi_uldivmod>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	4613      	mov	r3, r2
 80071cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071d4:	d308      	bcc.n	80071e8 <UART_SetConfig+0x288>
 80071d6:	6a3b      	ldr	r3, [r7, #32]
 80071d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071dc:	d204      	bcs.n	80071e8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6a3a      	ldr	r2, [r7, #32]
 80071e4:	60da      	str	r2, [r3, #12]
 80071e6:	e0c9      	b.n	800737c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80071ee:	e0c5      	b.n	800737c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071f8:	d16d      	bne.n	80072d6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80071fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80071fe:	3b01      	subs	r3, #1
 8007200:	2b07      	cmp	r3, #7
 8007202:	d82d      	bhi.n	8007260 <UART_SetConfig+0x300>
 8007204:	a201      	add	r2, pc, #4	; (adr r2, 800720c <UART_SetConfig+0x2ac>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	0800722d 	.word	0x0800722d
 8007210:	08007235 	.word	0x08007235
 8007214:	08007261 	.word	0x08007261
 8007218:	0800723b 	.word	0x0800723b
 800721c:	08007261 	.word	0x08007261
 8007220:	08007261 	.word	0x08007261
 8007224:	08007261 	.word	0x08007261
 8007228:	08007243 	.word	0x08007243
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800722c:	f7fe fb4a 	bl	80058c4 <HAL_RCC_GetPCLK2Freq>
 8007230:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007232:	e01b      	b.n	800726c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007234:	4b08      	ldr	r3, [pc, #32]	; (8007258 <UART_SetConfig+0x2f8>)
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007238:	e018      	b.n	800726c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800723a:	f7fe faad 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 800723e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007240:	e014      	b.n	800726c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007246:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007248:	e010      	b.n	800726c <UART_SetConfig+0x30c>
 800724a:	bf00      	nop
 800724c:	cfff69f3 	.word	0xcfff69f3
 8007250:	40008000 	.word	0x40008000
 8007254:	40013800 	.word	0x40013800
 8007258:	00f42400 	.word	0x00f42400
 800725c:	0800fd68 	.word	0x0800fd68
      default:
        pclk = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800726a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800726c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	f000 8084 	beq.w	800737c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	4a4b      	ldr	r2, [pc, #300]	; (80073a8 <UART_SetConfig+0x448>)
 800727a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800727e:	461a      	mov	r2, r3
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	fbb3 f3f2 	udiv	r3, r3, r2
 8007286:	005a      	lsls	r2, r3, #1
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	441a      	add	r2, r3
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	fbb2 f3f3 	udiv	r3, r2, r3
 8007298:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800729a:	6a3b      	ldr	r3, [r7, #32]
 800729c:	2b0f      	cmp	r3, #15
 800729e:	d916      	bls.n	80072ce <UART_SetConfig+0x36e>
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a6:	d212      	bcs.n	80072ce <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	f023 030f 	bic.w	r3, r3, #15
 80072b0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	085b      	lsrs	r3, r3, #1
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	b29a      	uxth	r2, r3
 80072be:	8bfb      	ldrh	r3, [r7, #30]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	8bfa      	ldrh	r2, [r7, #30]
 80072ca:	60da      	str	r2, [r3, #12]
 80072cc:	e056      	b.n	800737c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072d4:	e052      	b.n	800737c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072da:	3b01      	subs	r3, #1
 80072dc:	2b07      	cmp	r3, #7
 80072de:	d822      	bhi.n	8007326 <UART_SetConfig+0x3c6>
 80072e0:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <UART_SetConfig+0x388>)
 80072e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e6:	bf00      	nop
 80072e8:	08007309 	.word	0x08007309
 80072ec:	08007311 	.word	0x08007311
 80072f0:	08007327 	.word	0x08007327
 80072f4:	08007317 	.word	0x08007317
 80072f8:	08007327 	.word	0x08007327
 80072fc:	08007327 	.word	0x08007327
 8007300:	08007327 	.word	0x08007327
 8007304:	0800731f 	.word	0x0800731f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007308:	f7fe fadc 	bl	80058c4 <HAL_RCC_GetPCLK2Freq>
 800730c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800730e:	e010      	b.n	8007332 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007310:	4b26      	ldr	r3, [pc, #152]	; (80073ac <UART_SetConfig+0x44c>)
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007314:	e00d      	b.n	8007332 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007316:	f7fe fa3f 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 800731a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800731c:	e009      	b.n	8007332 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800731e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007324:	e005      	b.n	8007332 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007330:	bf00      	nop
    }

    if (pclk != 0U)
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	2b00      	cmp	r3, #0
 8007336:	d021      	beq.n	800737c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	4a1a      	ldr	r2, [pc, #104]	; (80073a8 <UART_SetConfig+0x448>)
 800733e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007342:	461a      	mov	r2, r3
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	fbb3 f2f2 	udiv	r2, r3, r2
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	085b      	lsrs	r3, r3, #1
 8007350:	441a      	add	r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	fbb2 f3f3 	udiv	r3, r2, r3
 800735a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	2b0f      	cmp	r3, #15
 8007360:	d909      	bls.n	8007376 <UART_SetConfig+0x416>
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007368:	d205      	bcs.n	8007376 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800736a:	6a3b      	ldr	r3, [r7, #32]
 800736c:	b29a      	uxth	r2, r3
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	60da      	str	r2, [r3, #12]
 8007374:	e002      	b.n	800737c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	2201      	movs	r2, #1
 8007380:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2201      	movs	r2, #1
 8007388:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2200      	movs	r2, #0
 8007390:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2200      	movs	r2, #0
 8007396:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007398:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800739c:	4618      	mov	r0, r3
 800739e:	3730      	adds	r7, #48	; 0x30
 80073a0:	46bd      	mov	sp, r7
 80073a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a6:	bf00      	nop
 80073a8:	0800fd68 	.word	0x0800fd68
 80073ac:	00f42400 	.word	0x00f42400

080073b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00a      	beq.n	80073da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00a      	beq.n	80073fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00a      	beq.n	800741e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	f003 0308 	and.w	r3, r3, #8
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	430a      	orrs	r2, r1
 800743e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007444:	f003 0310 	and.w	r3, r3, #16
 8007448:	2b00      	cmp	r3, #0
 800744a:	d00a      	beq.n	8007462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	430a      	orrs	r2, r1
 8007460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01a      	beq.n	80074c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	430a      	orrs	r2, r1
 80074a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ae:	d10a      	bne.n	80074c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	605a      	str	r2, [r3, #4]
  }
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b098      	sub	sp, #96	; 0x60
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007504:	f7fb fec2 	bl	800328c <HAL_GetTick>
 8007508:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b08      	cmp	r3, #8
 8007516:	d12f      	bne.n	8007578 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007518:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007520:	2200      	movs	r2, #0
 8007522:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f88e 	bl	8007648 <UART_WaitOnFlagUntilTimeout>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d022      	beq.n	8007578 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007546:	653b      	str	r3, [r7, #80]	; 0x50
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	461a      	mov	r2, r3
 800754e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007550:	647b      	str	r3, [r7, #68]	; 0x44
 8007552:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800755e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e6      	bne.n	8007532 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2220      	movs	r2, #32
 8007568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e063      	b.n	8007640 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0304 	and.w	r3, r3, #4
 8007582:	2b04      	cmp	r3, #4
 8007584:	d149      	bne.n	800761a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007586:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800758e:	2200      	movs	r2, #0
 8007590:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f857 	bl	8007648 <UART_WaitOnFlagUntilTimeout>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d03c      	beq.n	800761a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	623b      	str	r3, [r7, #32]
   return(result);
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075be:	633b      	str	r3, [r7, #48]	; 0x30
 80075c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e6      	bne.n	80075a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3308      	adds	r3, #8
 80075d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	e853 3f00 	ldrex	r3, [r3]
 80075e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f023 0301 	bic.w	r3, r3, #1
 80075e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	3308      	adds	r3, #8
 80075f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075f2:	61fa      	str	r2, [r7, #28]
 80075f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f6:	69b9      	ldr	r1, [r7, #24]
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	e841 2300 	strex	r3, r2, [r1]
 80075fe:	617b      	str	r3, [r7, #20]
   return(result);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e5      	bne.n	80075d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e012      	b.n	8007640 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2220      	movs	r2, #32
 800761e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3758      	adds	r7, #88	; 0x58
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	4613      	mov	r3, r2
 8007656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007658:	e049      	b.n	80076ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d045      	beq.n	80076ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007662:	f7fb fe13 	bl	800328c <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	429a      	cmp	r2, r3
 8007670:	d302      	bcc.n	8007678 <UART_WaitOnFlagUntilTimeout+0x30>
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e048      	b.n	800770e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	d031      	beq.n	80076ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	69db      	ldr	r3, [r3, #28]
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b08      	cmp	r3, #8
 8007696:	d110      	bne.n	80076ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2208      	movs	r2, #8
 800769e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 f920 	bl	80078e6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2208      	movs	r2, #8
 80076aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e029      	b.n	800770e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c8:	d111      	bne.n	80076ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f906 	bl	80078e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e00f      	b.n	800770e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69da      	ldr	r2, [r3, #28]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4013      	ands	r3, r2
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	bf0c      	ite	eq
 80076fe:	2301      	moveq	r3, #1
 8007700:	2300      	movne	r3, #0
 8007702:	b2db      	uxtb	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	429a      	cmp	r2, r3
 800770a:	d0a6      	beq.n	800765a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b096      	sub	sp, #88	; 0x58
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	4613      	mov	r3, r2
 8007724:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	88fa      	ldrh	r2, [r7, #6]
 8007730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2222      	movs	r2, #34	; 0x22
 8007740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800774a:	2b00      	cmp	r3, #0
 800774c:	d02d      	beq.n	80077aa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007754:	4a40      	ldr	r2, [pc, #256]	; (8007858 <UART_Start_Receive_DMA+0x140>)
 8007756:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800775e:	4a3f      	ldr	r2, [pc, #252]	; (800785c <UART_Start_Receive_DMA+0x144>)
 8007760:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007768:	4a3d      	ldr	r2, [pc, #244]	; (8007860 <UART_Start_Receive_DMA+0x148>)
 800776a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007772:	2200      	movs	r2, #0
 8007774:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	3324      	adds	r3, #36	; 0x24
 8007782:	4619      	mov	r1, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007788:	461a      	mov	r2, r3
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	f7fb ffe4 	bl	8003758 <HAL_DMA_Start_IT>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d009      	beq.n	80077aa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2210      	movs	r2, #16
 800779a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2220      	movs	r2, #32
 80077a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e051      	b.n	800784e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d018      	beq.n	80077e4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c6:	657b      	str	r3, [r7, #84]	; 0x54
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077d2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e6      	bne.n	80077b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3308      	adds	r3, #8
 80077ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	e853 3f00 	ldrex	r3, [r3]
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	f043 0301 	orr.w	r3, r3, #1
 80077fa:	653b      	str	r3, [r7, #80]	; 0x50
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	3308      	adds	r3, #8
 8007802:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007804:	637a      	str	r2, [r7, #52]	; 0x34
 8007806:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800780a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800780c:	e841 2300 	strex	r3, r2, [r1]
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e5      	bne.n	80077e4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3308      	adds	r3, #8
 800781e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	613b      	str	r3, [r7, #16]
   return(result);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800782e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	3308      	adds	r3, #8
 8007836:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007838:	623a      	str	r2, [r7, #32]
 800783a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	69f9      	ldr	r1, [r7, #28]
 800783e:	6a3a      	ldr	r2, [r7, #32]
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	61bb      	str	r3, [r7, #24]
   return(result);
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e5      	bne.n	8007818 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3758      	adds	r7, #88	; 0x58
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	080079b3 	.word	0x080079b3
 800785c:	08007adf 	.word	0x08007adf
 8007860:	08007b1d 	.word	0x08007b1d

08007864 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007864:	b480      	push	{r7}
 8007866:	b08f      	sub	sp, #60	; 0x3c
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	e853 3f00 	ldrex	r3, [r3]
 8007878:	61fb      	str	r3, [r7, #28]
   return(result);
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007880:	637b      	str	r3, [r7, #52]	; 0x34
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800788c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e6      	bne.n	800786c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80078b4:	633b      	str	r3, [r7, #48]	; 0x30
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3308      	adds	r3, #8
 80078bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078be:	61ba      	str	r2, [r7, #24]
 80078c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6979      	ldr	r1, [r7, #20]
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	613b      	str	r3, [r7, #16]
   return(result);
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e5      	bne.n	800789e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80078da:	bf00      	nop
 80078dc:	373c      	adds	r7, #60	; 0x3c
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b095      	sub	sp, #84	; 0x54
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80078fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800790c:	643b      	str	r3, [r7, #64]	; 0x40
 800790e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e6      	bne.n	80078ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3308      	adds	r3, #8
 8007926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007936:	f023 0301 	bic.w	r3, r3, #1
 800793a:	64bb      	str	r3, [r7, #72]	; 0x48
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3308      	adds	r3, #8
 8007942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007944:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800794a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800794c:	e841 2300 	strex	r3, r2, [r1]
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1e3      	bne.n	8007920 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800795c:	2b01      	cmp	r3, #1
 800795e:	d118      	bne.n	8007992 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	e853 3f00 	ldrex	r3, [r3]
 800796c:	60bb      	str	r3, [r7, #8]
   return(result);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	f023 0310 	bic.w	r3, r3, #16
 8007974:	647b      	str	r3, [r7, #68]	; 0x44
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800797e:	61bb      	str	r3, [r7, #24]
 8007980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007982:	6979      	ldr	r1, [r7, #20]
 8007984:	69ba      	ldr	r2, [r7, #24]
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	613b      	str	r3, [r7, #16]
   return(result);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e6      	bne.n	8007960 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2220      	movs	r2, #32
 8007996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80079a6:	bf00      	nop
 80079a8:	3754      	adds	r7, #84	; 0x54
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr

080079b2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b09c      	sub	sp, #112	; 0x70
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0320 	and.w	r3, r3, #32
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d171      	bne.n	8007ab2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	2200      	movs	r2, #0
 80079d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079de:	e853 3f00 	ldrex	r3, [r3]
 80079e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80079e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80079ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80079f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079fc:	e841 2300 	strex	r3, r2, [r1]
 8007a00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1e6      	bne.n	80079d6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1a:	f023 0301 	bic.w	r3, r3, #1
 8007a1e:	667b      	str	r3, [r7, #100]	; 0x64
 8007a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3308      	adds	r3, #8
 8007a26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a28:	647a      	str	r2, [r7, #68]	; 0x44
 8007a2a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e5      	bne.n	8007a08 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	623b      	str	r3, [r7, #32]
   return(result);
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a52:	663b      	str	r3, [r7, #96]	; 0x60
 8007a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3308      	adds	r3, #8
 8007a5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a5c:	633a      	str	r2, [r7, #48]	; 0x30
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a72:	2220      	movs	r2, #32
 8007a74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d118      	bne.n	8007ab2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f023 0310 	bic.w	r3, r3, #16
 8007a94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a9e:	61fb      	str	r3, [r7, #28]
 8007aa0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	69b9      	ldr	r1, [r7, #24]
 8007aa4:	69fa      	ldr	r2, [r7, #28]
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	617b      	str	r3, [r7, #20]
   return(result);
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e6      	bne.n	8007a80 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d107      	bne.n	8007ad0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007aca:	f7ff fa3d 	bl	8006f48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ace:	e002      	b.n	8007ad6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007ad0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007ad2:	f7fa fc93 	bl	80023fc <HAL_UART_RxCpltCallback>
}
 8007ad6:	bf00      	nop
 8007ad8:	3770      	adds	r7, #112	; 0x70
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d109      	bne.n	8007b0e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b00:	085b      	lsrs	r3, r3, #1
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	4619      	mov	r1, r3
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f7ff fa1e 	bl	8006f48 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b0c:	e002      	b.n	8007b14 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7ff fa06 	bl	8006f20 <HAL_UART_RxHalfCpltCallback>
}
 8007b14:	bf00      	nop
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b44:	2b80      	cmp	r3, #128	; 0x80
 8007b46:	d109      	bne.n	8007b5c <UART_DMAError+0x40>
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	2b21      	cmp	r3, #33	; 0x21
 8007b4c:	d106      	bne.n	8007b5c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007b56:	6978      	ldr	r0, [r7, #20]
 8007b58:	f7ff fe84 	bl	8007864 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d109      	bne.n	8007b7e <UART_DMAError+0x62>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b22      	cmp	r3, #34	; 0x22
 8007b6e:	d106      	bne.n	8007b7e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007b78:	6978      	ldr	r0, [r7, #20]
 8007b7a:	f7ff feb4 	bl	80078e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b84:	f043 0210 	orr.w	r2, r3, #16
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b8e:	6978      	ldr	r0, [r7, #20]
 8007b90:	f7ff f9d0 	bl	8006f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b94:	bf00      	nop
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f7ff f9ba 	bl	8006f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bc0:	bf00      	nop
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b088      	sub	sp, #32
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be4:	61fb      	str	r3, [r7, #28]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	61bb      	str	r3, [r7, #24]
 8007bf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6979      	ldr	r1, [r7, #20]
 8007bf4:	69ba      	ldr	r2, [r7, #24]
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e6      	bne.n	8007bd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7fa fc11 	bl	8002438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c16:	bf00      	nop
 8007c18:	3720      	adds	r7, #32
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c26:	bf00      	nop
 8007c28:	370c      	adds	r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b083      	sub	sp, #12
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c3a:	bf00      	nop
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_UARTEx_DisableFifoMode+0x16>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e027      	b.n	8007cc0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2224      	movs	r2, #36	; 0x24
 8007c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0201 	bic.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e02d      	b.n	8007d40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2224      	movs	r2, #36	; 0x24
 8007cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f022 0201 	bic.w	r2, r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	430a      	orrs	r2, r1
 8007d1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f84f 	bl	8007dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2220      	movs	r2, #32
 8007d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e02d      	b.n	8007dbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2224      	movs	r2, #36	; 0x24
 8007d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 0201 	bic.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f811 	bl	8007dc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d108      	bne.n	8007de6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007de4:	e031      	b.n	8007e4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007de6:	2308      	movs	r3, #8
 8007de8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dea:	2308      	movs	r3, #8
 8007dec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	0e5b      	lsrs	r3, r3, #25
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 0307 	and.w	r3, r3, #7
 8007dfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	0f5b      	lsrs	r3, r3, #29
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	7b3a      	ldrb	r2, [r7, #12]
 8007e12:	4911      	ldr	r1, [pc, #68]	; (8007e58 <UARTEx_SetNbDataToProcess+0x94>)
 8007e14:	5c8a      	ldrb	r2, [r1, r2]
 8007e16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e1a:	7b3a      	ldrb	r2, [r7, #12]
 8007e1c:	490f      	ldr	r1, [pc, #60]	; (8007e5c <UARTEx_SetNbDataToProcess+0x98>)
 8007e1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e20:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	7b7a      	ldrb	r2, [r7, #13]
 8007e30:	4909      	ldr	r1, [pc, #36]	; (8007e58 <UARTEx_SetNbDataToProcess+0x94>)
 8007e32:	5c8a      	ldrb	r2, [r1, r2]
 8007e34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e38:	7b7a      	ldrb	r2, [r7, #13]
 8007e3a:	4908      	ldr	r1, [pc, #32]	; (8007e5c <UARTEx_SetNbDataToProcess+0x98>)
 8007e3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e4a:	bf00      	nop
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	0800fd80 	.word	0x0800fd80
 8007e5c:	0800fd88 	.word	0x0800fd88

08007e60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007e68:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007e6c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	43db      	mvns	r3, r3
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	4013      	ands	r3, r2
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007e96:	b084      	sub	sp, #16
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	f107 0014 	add.w	r0, r7, #20
 8007ea4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	b004      	add	sp, #16
 8007ed6:	4770      	bx	lr

08007ed8 <init_done>:
#include "stdio.h"

void init_done();

void init_done()
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
	for(int i=0; i<3; i++)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	607b      	str	r3, [r7, #4]
 8007ee2:	e017      	b.n	8007f14 <init_done+0x3c>
	{
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8007ee4:	2120      	movs	r1, #32
 8007ee6:	4816      	ldr	r0, [pc, #88]	; (8007f40 <init_done+0x68>)
 8007ee8:	f7fc fa22 	bl	8004330 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8007eec:	20c8      	movs	r0, #200	; 0xc8
 8007eee:	f7f9 fb57 	bl	80015a0 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	4812      	ldr	r0, [pc, #72]	; (8007f40 <init_done+0x68>)
 8007ef6:	f7fc fa1b 	bl	8004330 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8007efa:	20c8      	movs	r0, #200	; 0xc8
 8007efc:	f7f9 fb50 	bl	80015a0 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007f00:	2102      	movs	r1, #2
 8007f02:	480f      	ldr	r0, [pc, #60]	; (8007f40 <init_done+0x68>)
 8007f04:	f7fc fa14 	bl	8004330 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8007f08:	20c8      	movs	r0, #200	; 0xc8
 8007f0a:	f7f9 fb49 	bl	80015a0 <HAL_Delay>
	for(int i=0; i<3; i++)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	3301      	adds	r3, #1
 8007f12:	607b      	str	r3, [r7, #4]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	dde4      	ble.n	8007ee4 <init_done+0xc>
	}
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2120      	movs	r1, #32
 8007f1e:	4808      	ldr	r0, [pc, #32]	; (8007f40 <init_done+0x68>)
 8007f20:	f7fc f9ee 	bl	8004300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2101      	movs	r1, #1
 8007f28:	4805      	ldr	r0, [pc, #20]	; (8007f40 <init_done+0x68>)
 8007f2a:	f7fc f9e9 	bl	8004300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2102      	movs	r1, #2
 8007f32:	4803      	ldr	r0, [pc, #12]	; (8007f40 <init_done+0x68>)
 8007f34:	f7fc f9e4 	bl	8004300 <HAL_GPIO_WritePin>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	48000400 	.word	0x48000400

08007f44 <wifi_init>:

void wifi_init(){
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
	if (esp8266_SetupIP() != _SUCCEED) {
 8007f48:	f000 f9fe 	bl	8008348 <esp8266_SetupIP>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d00a      	beq.n	8007f68 <wifi_init+0x24>
	  printf("esp8266_SetupIP failed - RESTART and configure WIFI source\n");
 8007f52:	480f      	ldr	r0, [pc, #60]	; (8007f90 <wifi_init+0x4c>)
 8007f54:	f005 f808 	bl	800cf68 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007f58:	2102      	movs	r1, #2
 8007f5a:	480e      	ldr	r0, [pc, #56]	; (8007f94 <wifi_init+0x50>)
 8007f5c:	f7fc f9e8 	bl	8004330 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8007f60:	20c8      	movs	r0, #200	; 0xc8
 8007f62:	f7f9 fb1d 	bl	80015a0 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007f66:	e7f7      	b.n	8007f58 <wifi_init+0x14>
	  }
  }

  if(esp8266_SetupConnect_BrokerMQTT() != _SUCCEED_MQTT)
 8007f68:	f000 fcb0 	bl	80088cc <esp8266_SetupConnect_BrokerMQTT>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d00a      	beq.n	8007f88 <wifi_init+0x44>
  {
	  printf("esp8266_SetupConnect_BrokerMQTT failed - RESTART and configure MQTT\n");
 8007f72:	4809      	ldr	r0, [pc, #36]	; (8007f98 <wifi_init+0x54>)
 8007f74:	f004 fff8 	bl	800cf68 <puts>
	  while(1)
	  {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007f78:	2102      	movs	r1, #2
 8007f7a:	4806      	ldr	r0, [pc, #24]	; (8007f94 <wifi_init+0x50>)
 8007f7c:	f7fc f9d8 	bl	8004330 <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 8007f80:	20c8      	movs	r0, #200	; 0xc8
 8007f82:	f7f9 fb0d 	bl	80015a0 <HAL_Delay>
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8007f86:	e7f7      	b.n	8007f78 <wifi_init+0x34>
	  }
  }
  init_done();
 8007f88:	f7ff ffa6 	bl	8007ed8 <init_done>
}
 8007f8c:	bf00      	nop
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	0800e554 	.word	0x0800e554
 8007f94:	48000400 	.word	0x48000400
 8007f98:	0800e590 	.word	0x0800e590

08007f9c <uart_esp32_transmit>:
uint8_t UART_ESP32_TxBUF[UART_ESP32_MAX_SENDLEN];
uint8_t UART_ESP32_RxBUF[UART_ESP32_MAX_RECVLEN];
volatile uint8_t UART_ESP32_RxLen = 0;
volatile uint8_t UART_ESP32_RecvEndFlag = 0;

void uart_esp32_transmit(char *fmt, ...) {
 8007f9c:	b40f      	push	{r0, r1, r2, r3}
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
	uint16_t i, j;
	va_list ap;
	va_start(ap, fmt);
 8007fa4:	f107 0314 	add.w	r3, r7, #20
 8007fa8:	603b      	str	r3, [r7, #0]
	vsprintf((char*) UART_ESP32_TxBUF, fmt, ap);
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	6939      	ldr	r1, [r7, #16]
 8007fae:	4822      	ldr	r0, [pc, #136]	; (8008038 <uart_esp32_transmit+0x9c>)
 8007fb0:	f005 f896 	bl	800d0e0 <vsiprintf>
	va_end(ap);

	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	80fb      	strh	r3, [r7, #6]
 8007fb8:	e019      	b.n	8007fee <uart_esp32_transmit+0x52>
		j = i + 1;
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	80bb      	strh	r3, [r7, #4]
		if (UART_ESP32_TxBUF[i] == '\00') {
 8007fc0:	88fb      	ldrh	r3, [r7, #6]
 8007fc2:	4a1d      	ldr	r2, [pc, #116]	; (8008038 <uart_esp32_transmit+0x9c>)
 8007fc4:	5cd3      	ldrb	r3, [r2, r3]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10e      	bne.n	8007fe8 <uart_esp32_transmit+0x4c>
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 8007fca:	e009      	b.n	8007fe0 <uart_esp32_transmit+0x44>
				UART_ESP32_TxBUF[j - 1] = UART_ESP32_TxBUF[j];
 8007fcc:	88ba      	ldrh	r2, [r7, #4]
 8007fce:	88bb      	ldrh	r3, [r7, #4]
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	4919      	ldr	r1, [pc, #100]	; (8008038 <uart_esp32_transmit+0x9c>)
 8007fd4:	5c89      	ldrb	r1, [r1, r2]
 8007fd6:	4a18      	ldr	r2, [pc, #96]	; (8008038 <uart_esp32_transmit+0x9c>)
 8007fd8:	54d1      	strb	r1, [r2, r3]
			for (; j < UART_ESP32_MAX_SENDLEN; j++) {
 8007fda:	88bb      	ldrh	r3, [r7, #4]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	80bb      	strh	r3, [r7, #4]
 8007fe0:	88bb      	ldrh	r3, [r7, #4]
 8007fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe6:	d3f1      	bcc.n	8007fcc <uart_esp32_transmit+0x30>
	for (i = 0; i < UART_ESP32_MAX_SENDLEN; i++) {
 8007fe8:	88fb      	ldrh	r3, [r7, #6]
 8007fea:	3301      	adds	r3, #1
 8007fec:	80fb      	strh	r3, [r7, #6]
 8007fee:	88fb      	ldrh	r3, [r7, #6]
 8007ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff4:	d3e1      	bcc.n	8007fba <uart_esp32_transmit+0x1e>
			}
		}
	}

	i = strlen((const char*) UART_ESP32_TxBUF);
 8007ff6:	4810      	ldr	r0, [pc, #64]	; (8008038 <uart_esp32_transmit+0x9c>)
 8007ff8:	f7f8 f8c2 	bl	8000180 <strlen>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	80fb      	strh	r3, [r7, #6]

	HAL_UART_Transmit(&hlpuart1, UART_ESP32_TxBUF, i, 100);
 8008000:	88fa      	ldrh	r2, [r7, #6]
 8008002:	2364      	movs	r3, #100	; 0x64
 8008004:	490c      	ldr	r1, [pc, #48]	; (8008038 <uart_esp32_transmit+0x9c>)
 8008006:	480d      	ldr	r0, [pc, #52]	; (800803c <uart_esp32_transmit+0xa0>)
 8008008:	f7fe fb8c 	bl	8006724 <HAL_UART_Transmit>

	memset(UART_ESP32_TxBUF, 0, UART_ESP32_MAX_SENDLEN);
 800800c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008010:	2100      	movs	r1, #0
 8008012:	4809      	ldr	r0, [pc, #36]	; (8008038 <uart_esp32_transmit+0x9c>)
 8008014:	f004 fe24 	bl	800cc60 <memset>
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 8008018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800801c:	2100      	movs	r1, #0
 800801e:	4808      	ldr	r0, [pc, #32]	; (8008040 <uart_esp32_transmit+0xa4>)
 8008020:	f004 fe1e 	bl	800cc60 <memset>
	UART_ESP32_RecvEndFlag = 0;
 8008024:	4b07      	ldr	r3, [pc, #28]	; (8008044 <uart_esp32_transmit+0xa8>)
 8008026:	2200      	movs	r2, #0
 8008028:	701a      	strb	r2, [r3, #0]
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008034:	b004      	add	sp, #16
 8008036:	4770      	bx	lr
 8008038:	2000104c 	.word	0x2000104c
 800803c:	20000b10 	.word	0x20000b10
 8008040:	2000184c 	.word	0x2000184c
 8008044:	2000204d 	.word	0x2000204d

08008048 <esp8266_CheckRespond>:

WIFI_StateTypeDef esp8266_CheckRespond(uint8_t *str) {
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
	printf("(DBG:) recv:\r\n%s\r\n", UART_ESP32_RxBUF);
 8008050:	4910      	ldr	r1, [pc, #64]	; (8008094 <esp8266_CheckRespond+0x4c>)
 8008052:	4811      	ldr	r0, [pc, #68]	; (8008098 <esp8266_CheckRespond+0x50>)
 8008054:	f004 feec 	bl	800ce30 <iprintf>
	if (strstr((const char*) UART_ESP32_RxBUF, (const char*) str) != NULL) {
 8008058:	6879      	ldr	r1, [r7, #4]
 800805a:	480e      	ldr	r0, [pc, #56]	; (8008094 <esp8266_CheckRespond+0x4c>)
 800805c:	f005 f813 	bl	800d086 <strstr>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <esp8266_CheckRespond+0x34>
		printf("(DBG:) Match succeed\r\n");
 8008066:	480d      	ldr	r0, [pc, #52]	; (800809c <esp8266_CheckRespond+0x54>)
 8008068:	f004 ff7e 	bl	800cf68 <puts>
		memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 800806c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008070:	2100      	movs	r1, #0
 8008072:	4808      	ldr	r0, [pc, #32]	; (8008094 <esp8266_CheckRespond+0x4c>)
 8008074:	f004 fdf4 	bl	800cc60 <memset>
		return _MATCHOK;
 8008078:	2304      	movs	r3, #4
 800807a:	e006      	b.n	800808a <esp8266_CheckRespond+0x42>
	}

	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 800807c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008080:	2100      	movs	r1, #0
 8008082:	4804      	ldr	r0, [pc, #16]	; (8008094 <esp8266_CheckRespond+0x4c>)
 8008084:	f004 fdec 	bl	800cc60 <memset>
	return _MATCHERROR;
 8008088:	2303      	movs	r3, #3
}
 800808a:	4618      	mov	r0, r3
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	2000184c 	.word	0x2000184c
 8008098:	0800e5d4 	.word	0x0800e5d4
 800809c:	0800e5e8 	.word	0x0800e5e8

080080a0 <esp8266_TransmitCmd>:

WIFI_StateTypeDef esp8266_TransmitCmd(uint8_t *cmd, uint8_t *ack,
		uint32_t waitms, uint8_t newline) {
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	70fb      	strb	r3, [r7, #3]
	int timeout = waitms;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	617b      	str	r3, [r7, #20]
	uint8_t check = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	74fb      	strb	r3, [r7, #19]
	memset(UART_ESP32_RxBUF, 0, UART_ESP32_MAX_RECVLEN);
 80080b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080ba:	2100      	movs	r1, #0
 80080bc:	4826      	ldr	r0, [pc, #152]	; (8008158 <esp8266_TransmitCmd+0xb8>)
 80080be:	f004 fdcf 	bl	800cc60 <memset>
	printf("\r\n(DBG:) Try to send cmd: %s\r\n", cmd);
 80080c2:	68f9      	ldr	r1, [r7, #12]
 80080c4:	4825      	ldr	r0, [pc, #148]	; (800815c <esp8266_TransmitCmd+0xbc>)
 80080c6:	f004 feb3 	bl	800ce30 <iprintf>
	if (newline == 0)
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d104      	bne.n	80080da <esp8266_TransmitCmd+0x3a>
		uart_esp32_transmit("%s", cmd);      // transmit cmd to usart2
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	4823      	ldr	r0, [pc, #140]	; (8008160 <esp8266_TransmitCmd+0xc0>)
 80080d4:	f7ff ff62 	bl	8007f9c <uart_esp32_transmit>
 80080d8:	e01e      	b.n	8008118 <esp8266_TransmitCmd+0x78>
	else
		uart_esp32_transmit("%s\r\n", cmd); // transmit cmd to usart2
 80080da:	68f9      	ldr	r1, [r7, #12]
 80080dc:	4821      	ldr	r0, [pc, #132]	; (8008164 <esp8266_TransmitCmd+0xc4>)
 80080de:	f7ff ff5d 	bl	8007f9c <uart_esp32_transmit>

	while (timeout--) {
 80080e2:	e019      	b.n	8008118 <esp8266_TransmitCmd+0x78>
		// finish dma receive
		if (UART_ESP32_RecvEndFlag == 1) {
 80080e4:	4b20      	ldr	r3, [pc, #128]	; (8008168 <esp8266_TransmitCmd+0xc8>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d111      	bne.n	8008112 <esp8266_TransmitCmd+0x72>
			check = esp8266_CheckRespond(ack);
 80080ee:	68b8      	ldr	r0, [r7, #8]
 80080f0:	f7ff ffaa 	bl	8008048 <esp8266_CheckRespond>
 80080f4:	4603      	mov	r3, r0
 80080f6:	74fb      	strb	r3, [r7, #19]
			if (check == _MATCHOK) {
			}

			UART_ESP32_RxLen = 0;
 80080f8:	4b1c      	ldr	r3, [pc, #112]	; (800816c <esp8266_TransmitCmd+0xcc>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 80080fe:	4b1a      	ldr	r3, [pc, #104]	; (8008168 <esp8266_TransmitCmd+0xc8>)
 8008100:	2200      	movs	r2, #0
 8008102:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 8008104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008108:	4913      	ldr	r1, [pc, #76]	; (8008158 <esp8266_TransmitCmd+0xb8>)
 800810a:	4819      	ldr	r0, [pc, #100]	; (8008170 <esp8266_TransmitCmd+0xd0>)
 800810c:	f7fe fb98 	bl	8006840 <HAL_UART_Receive_DMA>

			break;
 8008110:	e007      	b.n	8008122 <esp8266_TransmitCmd+0x82>
		}
		HAL_Delay(1);
 8008112:	2001      	movs	r0, #1
 8008114:	f7f9 fa44 	bl	80015a0 <HAL_Delay>
	while (timeout--) {
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	1e5a      	subs	r2, r3, #1
 800811c:	617a      	str	r2, [r7, #20]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1e0      	bne.n	80080e4 <esp8266_TransmitCmd+0x44>
	}

	if (check == _MATCHERROR) {
 8008122:	7cfb      	ldrb	r3, [r7, #19]
 8008124:	2b03      	cmp	r3, #3
 8008126:	d104      	bne.n	8008132 <esp8266_TransmitCmd+0x92>
		printf("\r\n(DBG:) Cmd match failed\r\n");
 8008128:	4812      	ldr	r0, [pc, #72]	; (8008174 <esp8266_TransmitCmd+0xd4>)
 800812a:	f004 ff1d 	bl	800cf68 <puts>
		return check;
 800812e:	7cfb      	ldrb	r3, [r7, #19]
 8008130:	e00e      	b.n	8008150 <esp8266_TransmitCmd+0xb0>
	}
	if (timeout <= 0) {
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	2b00      	cmp	r3, #0
 8008136:	dc07      	bgt.n	8008148 <esp8266_TransmitCmd+0xa8>
		printf("(DBG:) Finish waiting\r\n");
 8008138:	480f      	ldr	r0, [pc, #60]	; (8008178 <esp8266_TransmitCmd+0xd8>)
 800813a:	f004 ff15 	bl	800cf68 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 800813e:	480f      	ldr	r0, [pc, #60]	; (800817c <esp8266_TransmitCmd+0xdc>)
 8008140:	f004 ff12 	bl	800cf68 <puts>
		return _TIMEOUT;
 8008144:	2302      	movs	r3, #2
 8008146:	e003      	b.n	8008150 <esp8266_TransmitCmd+0xb0>
	}
	printf("(DBG:) Succeed\r\n");
 8008148:	480d      	ldr	r0, [pc, #52]	; (8008180 <esp8266_TransmitCmd+0xe0>)
 800814a:	f004 ff0d 	bl	800cf68 <puts>
	return _SUCCEED;
 800814e:	2301      	movs	r3, #1
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	2000184c 	.word	0x2000184c
 800815c:	0800e600 	.word	0x0800e600
 8008160:	0800e620 	.word	0x0800e620
 8008164:	0800e624 	.word	0x0800e624
 8008168:	2000204d 	.word	0x2000204d
 800816c:	2000204c 	.word	0x2000204c
 8008170:	20000b10 	.word	0x20000b10
 8008174:	0800e62c 	.word	0x0800e62c
 8008178:	0800e648 	.word	0x0800e648
 800817c:	0800e660 	.word	0x0800e660
 8008180:	0800e674 	.word	0x0800e674

08008184 <esp8266_HardwareReset>:

WIFI_StateTypeDef esp8266_HardwareReset(uint32_t waitms) {
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
	int timeout = waitms;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	60fb      	str	r3, [r7, #12]
	WIFI_RST_Enable();
 8008190:	2200      	movs	r2, #0
 8008192:	2108      	movs	r1, #8
 8008194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008198:	f7fc f8b2 	bl	8004300 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800819c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081a0:	f7f9 f9fe 	bl	80015a0 <HAL_Delay>
	WIFI_RST_Disable();
 80081a4:	2201      	movs	r2, #1
 80081a6:	2108      	movs	r1, #8
 80081a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081ac:	f7fc f8a8 	bl	8004300 <HAL_GPIO_WritePin>
	while (timeout--) {
 80081b0:	e01b      	b.n	80081ea <esp8266_HardwareReset+0x66>
		if (UART_ESP32_RecvEndFlag == 1) {
 80081b2:	4b18      	ldr	r3, [pc, #96]	; (8008214 <esp8266_HardwareReset+0x90>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d113      	bne.n	80081e4 <esp8266_HardwareReset+0x60>

			printf("(DBG:) Hardware Reset OK!\r\n");
 80081bc:	4816      	ldr	r0, [pc, #88]	; (8008218 <esp8266_HardwareReset+0x94>)
 80081be:	f004 fed3 	bl	800cf68 <puts>
			HAL_Delay(100);
 80081c2:	2064      	movs	r0, #100	; 0x64
 80081c4:	f7f9 f9ec 	bl	80015a0 <HAL_Delay>

			UART_ESP32_RxLen = 0;
 80081c8:	4b14      	ldr	r3, [pc, #80]	; (800821c <esp8266_HardwareReset+0x98>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	701a      	strb	r2, [r3, #0]
			UART_ESP32_RecvEndFlag = 0;
 80081ce:	4b11      	ldr	r3, [pc, #68]	; (8008214 <esp8266_HardwareReset+0x90>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&hlpuart1, UART_ESP32_RxBUF, UART_ESP32_MAX_RECVLEN);
 80081d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081d8:	4911      	ldr	r1, [pc, #68]	; (8008220 <esp8266_HardwareReset+0x9c>)
 80081da:	4812      	ldr	r0, [pc, #72]	; (8008224 <esp8266_HardwareReset+0xa0>)
 80081dc:	f7fe fb30 	bl	8006840 <HAL_UART_Receive_DMA>

			return _SUCCEED;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e013      	b.n	800820c <esp8266_HardwareReset+0x88>
		}
		HAL_Delay(1);
 80081e4:	2001      	movs	r0, #1
 80081e6:	f7f9 f9db 	bl	80015a0 <HAL_Delay>
	while (timeout--) {
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	1e5a      	subs	r2, r3, #1
 80081ee:	60fa      	str	r2, [r7, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1de      	bne.n	80081b2 <esp8266_HardwareReset+0x2e>
	}
	if (timeout <= 0) {
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dc07      	bgt.n	800820a <esp8266_HardwareReset+0x86>
		printf("(DBG:) Finish waiting\r\n");
 80081fa:	480b      	ldr	r0, [pc, #44]	; (8008228 <esp8266_HardwareReset+0xa4>)
 80081fc:	f004 feb4 	bl	800cf68 <puts>
		printf("\r\n(DBG:) Timeout\r\n");
 8008200:	480a      	ldr	r0, [pc, #40]	; (800822c <esp8266_HardwareReset+0xa8>)
 8008202:	f004 feb1 	bl	800cf68 <puts>
		return _TIMEOUT;
 8008206:	2302      	movs	r3, #2
 8008208:	e000      	b.n	800820c <esp8266_HardwareReset+0x88>
	}

	return _UNKNOWN_ERROR;
 800820a:	23ff      	movs	r3, #255	; 0xff
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	2000204d 	.word	0x2000204d
 8008218:	0800e684 	.word	0x0800e684
 800821c:	2000204c 	.word	0x2000204c
 8008220:	2000184c 	.word	0x2000184c
 8008224:	20000b10 	.word	0x20000b10
 8008228:	0800e648 	.word	0x0800e648
 800822c:	0800e660 	.word	0x0800e660

08008230 <esp8266_ConnectAP>:

WIFI_StateTypeDef esp8266_ConnectAP() {
 8008230:	b590      	push	{r4, r7, lr}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0

	for(int i = 0 ; i < strlen(ssid) ; i++){
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	e00b      	b.n	8008254 <esp8266_ConnectAP+0x24>
		AP_SSID[i] = ssid[i];
 800823c:	4a37      	ldr	r2, [pc, #220]	; (800831c <esp8266_ConnectAP+0xec>)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	7819      	ldrb	r1, [r3, #0]
 8008244:	4a36      	ldr	r2, [pc, #216]	; (8008320 <esp8266_ConnectAP+0xf0>)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4413      	add	r3, r2
 800824a:	460a      	mov	r2, r1
 800824c:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < strlen(ssid) ; i++){
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	3301      	adds	r3, #1
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	4831      	ldr	r0, [pc, #196]	; (800831c <esp8266_ConnectAP+0xec>)
 8008256:	f7f7 ff93 	bl	8000180 <strlen>
 800825a:	4602      	mov	r2, r0
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	429a      	cmp	r2, r3
 8008260:	d8ec      	bhi.n	800823c <esp8266_ConnectAP+0xc>
	}
	printf("(DBG:)  ap_ssid : %s \n",AP_SSID);
 8008262:	492f      	ldr	r1, [pc, #188]	; (8008320 <esp8266_ConnectAP+0xf0>)
 8008264:	482f      	ldr	r0, [pc, #188]	; (8008324 <esp8266_ConnectAP+0xf4>)
 8008266:	f004 fde3 	bl	800ce30 <iprintf>
	printf("(DBG:)  ble_ssid : %s \n",ssid);
 800826a:	492c      	ldr	r1, [pc, #176]	; (800831c <esp8266_ConnectAP+0xec>)
 800826c:	482e      	ldr	r0, [pc, #184]	; (8008328 <esp8266_ConnectAP+0xf8>)
 800826e:	f004 fddf 	bl	800ce30 <iprintf>
	for(int i = 0 ; i < strlen(password) ; i++){
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	e00b      	b.n	8008290 <esp8266_ConnectAP+0x60>
		AP_PSWD[i] = password[i];
 8008278:	4a2c      	ldr	r2, [pc, #176]	; (800832c <esp8266_ConnectAP+0xfc>)
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	4413      	add	r3, r2
 800827e:	7819      	ldrb	r1, [r3, #0]
 8008280:	4a2b      	ldr	r2, [pc, #172]	; (8008330 <esp8266_ConnectAP+0x100>)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	4413      	add	r3, r2
 8008286:	460a      	mov	r2, r1
 8008288:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < strlen(password) ; i++){
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	3301      	adds	r3, #1
 800828e:	60bb      	str	r3, [r7, #8]
 8008290:	4826      	ldr	r0, [pc, #152]	; (800832c <esp8266_ConnectAP+0xfc>)
 8008292:	f7f7 ff75 	bl	8000180 <strlen>
 8008296:	4602      	mov	r2, r0
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	429a      	cmp	r2, r3
 800829c:	d8ec      	bhi.n	8008278 <esp8266_ConnectAP+0x48>
	}
	printf("(DBG:)  ap_pswd : %s \n",AP_PSWD);
 800829e:	4924      	ldr	r1, [pc, #144]	; (8008330 <esp8266_ConnectAP+0x100>)
 80082a0:	4824      	ldr	r0, [pc, #144]	; (8008334 <esp8266_ConnectAP+0x104>)
 80082a2:	f004 fdc5 	bl	800ce30 <iprintf>
	printf("(DBG:)  ble_pswd : %s \n",password);
 80082a6:	4921      	ldr	r1, [pc, #132]	; (800832c <esp8266_ConnectAP+0xfc>)
 80082a8:	4823      	ldr	r0, [pc, #140]	; (8008338 <esp8266_ConnectAP+0x108>)
 80082aa:	f004 fdc1 	bl	800ce30 <iprintf>

	uint16_t cmd_len = strlen(AP_SSID) + strlen(AP_PSWD) + 30;
 80082ae:	481c      	ldr	r0, [pc, #112]	; (8008320 <esp8266_ConnectAP+0xf0>)
 80082b0:	f7f7 ff66 	bl	8000180 <strlen>
 80082b4:	4603      	mov	r3, r0
 80082b6:	b29c      	uxth	r4, r3
 80082b8:	481d      	ldr	r0, [pc, #116]	; (8008330 <esp8266_ConnectAP+0x100>)
 80082ba:	f7f7 ff61 	bl	8000180 <strlen>
 80082be:	4603      	mov	r3, r0
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	4423      	add	r3, r4
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	331e      	adds	r3, #30
 80082c8:	80fb      	strh	r3, [r7, #6]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 80082ca:	88fb      	ldrh	r3, [r7, #6]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f004 fcb1 	bl	800cc34 <malloc>
 80082d2:	4603      	mov	r3, r0
 80082d4:	603b      	str	r3, [r7, #0]
	memset(cmd, 0, cmd_len);
 80082d6:	88fb      	ldrh	r3, [r7, #6]
 80082d8:	461a      	mov	r2, r3
 80082da:	2100      	movs	r1, #0
 80082dc:	6838      	ldr	r0, [r7, #0]
 80082de:	f004 fcbf 	bl	800cc60 <memset>
	sprintf((char*) cmd, "AT+CWJAP=\"%s\",\"%s\"", AP_SSID, AP_PSWD);
 80082e2:	4b13      	ldr	r3, [pc, #76]	; (8008330 <esp8266_ConnectAP+0x100>)
 80082e4:	4a0e      	ldr	r2, [pc, #56]	; (8008320 <esp8266_ConnectAP+0xf0>)
 80082e6:	4915      	ldr	r1, [pc, #84]	; (800833c <esp8266_ConnectAP+0x10c>)
 80082e8:	6838      	ldr	r0, [r7, #0]
 80082ea:	f004 fe55 	bl	800cf98 <siprintf>

	if (esp8266_TransmitCmd(cmd, (uint8_t*) "WIFI CONNECTED", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
 80082ee:	2301      	movs	r3, #1
 80082f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082f4:	4912      	ldr	r1, [pc, #72]	; (8008340 <esp8266_ConnectAP+0x110>)
 80082f6:	6838      	ldr	r0, [r7, #0]
 80082f8:	f7ff fed2 	bl	80080a0 <esp8266_TransmitCmd>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d103      	bne.n	800830a <esp8266_ConnectAP+0xda>
		wifi_state = _ONLINE;
 8008302:	4b10      	ldr	r3, [pc, #64]	; (8008344 <esp8266_ConnectAP+0x114>)
 8008304:	2205      	movs	r2, #5
 8008306:	701a      	strb	r2, [r3, #0]
 8008308:	e002      	b.n	8008310 <esp8266_ConnectAP+0xe0>
	else
		wifi_state = _OFFLINE;
 800830a:	4b0e      	ldr	r3, [pc, #56]	; (8008344 <esp8266_ConnectAP+0x114>)
 800830c:	2206      	movs	r2, #6
 800830e:	701a      	strb	r2, [r3, #0]

	return wifi_state;
 8008310:	4b0c      	ldr	r3, [pc, #48]	; (8008344 <esp8266_ConnectAP+0x114>)
 8008312:	781b      	ldrb	r3, [r3, #0]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	bd90      	pop	{r4, r7, pc}
 800831c:	20002430 	.word	0x20002430
 8008320:	2000100c 	.word	0x2000100c
 8008324:	0800e6a0 	.word	0x0800e6a0
 8008328:	0800e6b8 	.word	0x0800e6b8
 800832c:	20002450 	.word	0x20002450
 8008330:	2000102c 	.word	0x2000102c
 8008334:	0800e6d0 	.word	0x0800e6d0
 8008338:	0800e6e8 	.word	0x0800e6e8
 800833c:	0800e700 	.word	0x0800e700
 8008340:	0800e714 	.word	0x0800e714
 8008344:	20000011 	.word	0x20000011

08008348 <esp8266_SetupIP>:
	return _SUCCEED;
}

// +BCH
WIFI_StateTypeDef esp8266_SetupIP()
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	71fb      	strb	r3, [r7, #7]

	/* Reset esp8266 */
	printf("(DBG:) Trying to reset esp8266\r\n");
 8008352:	48a8      	ldr	r0, [pc, #672]	; (80085f4 <esp8266_SetupIP+0x2ac>)
 8008354:	f004 fe08 	bl	800cf68 <puts>
	wifi_config_step++;
 8008358:	4ba7      	ldr	r3, [pc, #668]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	3301      	adds	r3, #1
 800835e:	b2da      	uxtb	r2, r3
 8008360:	4ba5      	ldr	r3, [pc, #660]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 8008362:	701a      	strb	r2, [r3, #0]
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 8008364:	e019      	b.n	800839a <esp8266_SetupIP+0x52>
		retry_count++;
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	3301      	adds	r3, #1
 800836a:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800836c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008370:	f7f9 f916 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	2b03      	cmp	r3, #3
 8008378:	d90f      	bls.n	800839a <esp8266_SetupIP+0x52>
			printf("(DBG:) Reset failed\r\n");
 800837a:	48a0      	ldr	r0, [pc, #640]	; (80085fc <esp8266_SetupIP+0x2b4>)
 800837c:	f004 fdf4 	bl	800cf68 <puts>
			retry_count = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	71fb      	strb	r3, [r7, #7]
			trans_state = _UNKNOWN_STATE;
 8008384:	4b9e      	ldr	r3, [pc, #632]	; (8008600 <esp8266_SetupIP+0x2b8>)
 8008386:	22ee      	movs	r2, #238	; 0xee
 8008388:	701a      	strb	r2, [r3, #0]
			wifi_config_step--;
 800838a:	4b9b      	ldr	r3, [pc, #620]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	3b01      	subs	r3, #1
 8008390:	b2da      	uxtb	r2, r3
 8008392:	4b99      	ldr	r3, [pc, #612]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 8008394:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8008396:	2300      	movs	r3, #0
 8008398:	e1e1      	b.n	800875e <esp8266_SetupIP+0x416>
	while (esp8266_HardwareReset(500) != _SUCCEED) {
 800839a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800839e:	f7ff fef1 	bl	8008184 <esp8266_HardwareReset>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d1de      	bne.n	8008366 <esp8266_SetupIP+0x1e>
		}
	}

	HAL_Delay(2000);		// wait 2 seconds
 80083a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80083ac:	f7f9 f8f8 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 80083b0:	2300      	movs	r3, #0
 80083b2:	71fb      	strb	r3, [r7, #7]

	/* Close echo */
	printf("(DBG:) Trying to close echo\r\n");
 80083b4:	4893      	ldr	r0, [pc, #588]	; (8008604 <esp8266_SetupIP+0x2bc>)
 80083b6:	f004 fdd7 	bl	800cf68 <puts>
	wifi_config_step++;
 80083ba:	4b8f      	ldr	r3, [pc, #572]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	3301      	adds	r3, #1
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	4b8d      	ldr	r3, [pc, #564]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80083c4:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 80083c6:	e016      	b.n	80083f6 <esp8266_SetupIP+0xae>
			!= _SUCCEED) {
		retry_count++;
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	3301      	adds	r3, #1
 80083cc:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80083ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083d2:	f7f9 f8e5 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80083d6:	79fb      	ldrb	r3, [r7, #7]
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d90c      	bls.n	80083f6 <esp8266_SetupIP+0xae>
			printf("(DBG:) Close echo failed\r\n");
 80083dc:	488a      	ldr	r0, [pc, #552]	; (8008608 <esp8266_SetupIP+0x2c0>)
 80083de:	f004 fdc3 	bl	800cf68 <puts>
			retry_count = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80083e6:	4b84      	ldr	r3, [pc, #528]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	4b82      	ldr	r3, [pc, #520]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80083f0:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80083f2:	2300      	movs	r3, #0
 80083f4:	e1b3      	b.n	800875e <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "ATE0", OK_ACK, 500, WITH_NEWLINE)
 80083f6:	2301      	movs	r3, #1
 80083f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80083fc:	4983      	ldr	r1, [pc, #524]	; (800860c <esp8266_SetupIP+0x2c4>)
 80083fe:	4884      	ldr	r0, [pc, #528]	; (8008610 <esp8266_SetupIP+0x2c8>)
 8008400:	f7ff fe4e 	bl	80080a0 <esp8266_TransmitCmd>
 8008404:	4603      	mov	r3, r0
 8008406:	2b01      	cmp	r3, #1
 8008408:	d1de      	bne.n	80083c8 <esp8266_SetupIP+0x80>
		}
	}

	HAL_Delay(100);
 800840a:	2064      	movs	r0, #100	; 0x64
 800840c:	f7f9 f8c8 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8008410:	2300      	movs	r3, #0
 8008412:	71fb      	strb	r3, [r7, #7]

	/* Set wifi mode 0:AP 1:STA 2:AP+STA */
	printf("(DBG:) Trying to set Wifi mode\r\n");
 8008414:	487f      	ldr	r0, [pc, #508]	; (8008614 <esp8266_SetupIP+0x2cc>)
 8008416:	f004 fda7 	bl	800cf68 <puts>
	wifi_config_step++;
 800841a:	4b77      	ldr	r3, [pc, #476]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	3301      	adds	r3, #1
 8008420:	b2da      	uxtb	r2, r3
 8008422:	4b75      	ldr	r3, [pc, #468]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 8008424:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 8008426:	e016      	b.n	8008456 <esp8266_SetupIP+0x10e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8008428:	79fb      	ldrb	r3, [r7, #7]
 800842a:	3301      	adds	r3, #1
 800842c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800842e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008432:	f7f9 f8b5 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8008436:	79fb      	ldrb	r3, [r7, #7]
 8008438:	2b03      	cmp	r3, #3
 800843a:	d90c      	bls.n	8008456 <esp8266_SetupIP+0x10e>
			printf("(DBG:) Set Wifi mode failed\r\n");
 800843c:	4876      	ldr	r0, [pc, #472]	; (8008618 <esp8266_SetupIP+0x2d0>)
 800843e:	f004 fd93 	bl	800cf68 <puts>
			retry_count = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8008446:	4b6c      	ldr	r3, [pc, #432]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	3b01      	subs	r3, #1
 800844c:	b2da      	uxtb	r2, r3
 800844e:	4b6a      	ldr	r3, [pc, #424]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 8008450:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8008452:	2300      	movs	r3, #0
 8008454:	e183      	b.n	800875e <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWMODE=1", OK_ACK, 500,
 8008456:	2301      	movs	r3, #1
 8008458:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800845c:	496b      	ldr	r1, [pc, #428]	; (800860c <esp8266_SetupIP+0x2c4>)
 800845e:	486f      	ldr	r0, [pc, #444]	; (800861c <esp8266_SetupIP+0x2d4>)
 8008460:	f7ff fe1e 	bl	80080a0 <esp8266_TransmitCmd>
 8008464:	4603      	mov	r3, r0
 8008466:	2b01      	cmp	r3, #1
 8008468:	d1de      	bne.n	8008428 <esp8266_SetupIP+0xe0>
		}
	}

	HAL_Delay(100);
 800846a:	2064      	movs	r0, #100	; 0x64
 800846c:	f7f9 f898 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8008470:	2300      	movs	r3, #0
 8008472:	71fb      	strb	r3, [r7, #7]

	/* Disable auto connect */
	printf("(DBG:) Trying to close auto connect\r\n");
 8008474:	486a      	ldr	r0, [pc, #424]	; (8008620 <esp8266_SetupIP+0x2d8>)
 8008476:	f004 fd77 	bl	800cf68 <puts>
	wifi_config_step++;
 800847a:	4b5f      	ldr	r3, [pc, #380]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	3301      	adds	r3, #1
 8008480:	b2da      	uxtb	r2, r3
 8008482:	4b5d      	ldr	r3, [pc, #372]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 8008484:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 8008486:	e016      	b.n	80084b6 <esp8266_SetupIP+0x16e>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8008488:	79fb      	ldrb	r3, [r7, #7]
 800848a:	3301      	adds	r3, #1
 800848c:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 800848e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008492:	f7f9 f885 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	2b03      	cmp	r3, #3
 800849a:	d90c      	bls.n	80084b6 <esp8266_SetupIP+0x16e>
			printf("(DBG:) Close auto connect failed\r\n");
 800849c:	4861      	ldr	r0, [pc, #388]	; (8008624 <esp8266_SetupIP+0x2dc>)
 800849e:	f004 fd63 	bl	800cf68 <puts>
			retry_count = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80084a6:	4b54      	ldr	r3, [pc, #336]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b2da      	uxtb	r2, r3
 80084ae:	4b52      	ldr	r3, [pc, #328]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80084b0:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80084b2:	2300      	movs	r3, #0
 80084b4:	e153      	b.n	800875e <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWAUTOCONN=0", OK_ACK, 500,
 80084b6:	2301      	movs	r3, #1
 80084b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80084bc:	4953      	ldr	r1, [pc, #332]	; (800860c <esp8266_SetupIP+0x2c4>)
 80084be:	485a      	ldr	r0, [pc, #360]	; (8008628 <esp8266_SetupIP+0x2e0>)
 80084c0:	f7ff fdee 	bl	80080a0 <esp8266_TransmitCmd>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d1de      	bne.n	8008488 <esp8266_SetupIP+0x140>
		}
	}

	HAL_Delay(100);
 80084ca:	2064      	movs	r0, #100	; 0x64
 80084cc:	f7f9 f868 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 80084d0:	2300      	movs	r3, #0
 80084d2:	71fb      	strb	r3, [r7, #7]

	/* Connect to AP(Wifi) */
	printf("(DBG:) Trying to connect to AP\r\n");
 80084d4:	4855      	ldr	r0, [pc, #340]	; (800862c <esp8266_SetupIP+0x2e4>)
 80084d6:	f004 fd47 	bl	800cf68 <puts>
	wifi_config_step++;
 80084da:	4b47      	ldr	r3, [pc, #284]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	3301      	adds	r3, #1
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	4b45      	ldr	r3, [pc, #276]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80084e4:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectAP() != _ONLINE) {
 80084e6:	e016      	b.n	8008516 <esp8266_SetupIP+0x1ce>
		retry_count++;
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	3301      	adds	r3, #1
 80084ec:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80084ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80084f2:	f7f9 f855 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d90c      	bls.n	8008516 <esp8266_SetupIP+0x1ce>
			printf("(DBG:) Connect to AP failed\r\n");
 80084fc:	484c      	ldr	r0, [pc, #304]	; (8008630 <esp8266_SetupIP+0x2e8>)
 80084fe:	f004 fd33 	bl	800cf68 <puts>
			retry_count = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 8008506:	4b3c      	ldr	r3, [pc, #240]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	3b01      	subs	r3, #1
 800850c:	b2da      	uxtb	r2, r3
 800850e:	4b3a      	ldr	r3, [pc, #232]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 8008510:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 8008512:	2300      	movs	r3, #0
 8008514:	e123      	b.n	800875e <esp8266_SetupIP+0x416>
	while (esp8266_ConnectAP() != _ONLINE) {
 8008516:	f7ff fe8b 	bl	8008230 <esp8266_ConnectAP>
 800851a:	4603      	mov	r3, r0
 800851c:	2b05      	cmp	r3, #5
 800851e:	d1e3      	bne.n	80084e8 <esp8266_SetupIP+0x1a0>
		}
	}

	HAL_Delay(100);
 8008520:	2064      	movs	r0, #100	; 0x64
 8008522:	f7f9 f83d 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8008526:	2300      	movs	r3, #0
 8008528:	71fb      	strb	r3, [r7, #7]

	/* Try to get AP info */
	if (wifi_state == _ONLINE) {
 800852a:	4b42      	ldr	r3, [pc, #264]	; (8008634 <esp8266_SetupIP+0x2ec>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b05      	cmp	r3, #5
 8008530:	d123      	bne.n	800857a <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 8008532:	e018      	b.n	8008566 <esp8266_SetupIP+0x21e>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	3301      	adds	r3, #1
 8008538:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 800853a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800853e:	f7f9 f82f 	bl	80015a0 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d90e      	bls.n	8008566 <esp8266_SetupIP+0x21e>
				printf("(DBG:) Get AP msg failed\r\n");
 8008548:	483b      	ldr	r0, [pc, #236]	; (8008638 <esp8266_SetupIP+0x2f0>)
 800854a:	f004 fd0d 	bl	800cf68 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 800854e:	483b      	ldr	r0, [pc, #236]	; (800863c <esp8266_SetupIP+0x2f4>)
 8008550:	f004 fc6e 	bl	800ce30 <iprintf>
				retry_count = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 8008558:	4b27      	ldr	r3, [pc, #156]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	3b01      	subs	r3, #1
 800855e:	b2da      	uxtb	r2, r3
 8008560:	4b25      	ldr	r3, [pc, #148]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 8008562:	701a      	strb	r2, [r3, #0]
				break;
 8008564:	e009      	b.n	800857a <esp8266_SetupIP+0x232>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CWJAP?", OK_ACK,
 8008566:	2301      	movs	r3, #1
 8008568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800856c:	4927      	ldr	r1, [pc, #156]	; (800860c <esp8266_SetupIP+0x2c4>)
 800856e:	4834      	ldr	r0, [pc, #208]	; (8008640 <esp8266_SetupIP+0x2f8>)
 8008570:	f7ff fd96 	bl	80080a0 <esp8266_TransmitCmd>
 8008574:	4603      	mov	r3, r0
 8008576:	2b01      	cmp	r3, #1
 8008578:	d1dc      	bne.n	8008534 <esp8266_SetupIP+0x1ec>
			}
		}
	}

	HAL_Delay(100);
 800857a:	2064      	movs	r0, #100	; 0x64
 800857c:	f7f9 f810 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8008580:	2300      	movs	r3, #0
 8008582:	71fb      	strb	r3, [r7, #7]

	/* Try to get IP info */
	if (wifi_state == _ONLINE) {
 8008584:	4b2b      	ldr	r3, [pc, #172]	; (8008634 <esp8266_SetupIP+0x2ec>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b05      	cmp	r3, #5
 800858a:	d123      	bne.n	80085d4 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 800858c:	e018      	b.n	80085c0 <esp8266_SetupIP+0x278>
		ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED) {
			retry_count++;
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	3301      	adds	r3, #1
 8008592:	71fb      	strb	r3, [r7, #7]
			HAL_Delay(1000);
 8008594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008598:	f7f9 f802 	bl	80015a0 <HAL_Delay>
			if (retry_count > ESP8266_MAX_RETRY_TIME / 2) {
 800859c:	79fb      	ldrb	r3, [r7, #7]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d90e      	bls.n	80085c0 <esp8266_SetupIP+0x278>
				printf("(DBG:) Get IP info failed\r\n");
 80085a2:	4828      	ldr	r0, [pc, #160]	; (8008644 <esp8266_SetupIP+0x2fc>)
 80085a4:	f004 fce0 	bl	800cf68 <puts>
				printf("(DBG:) Connect server process will not be terminated");
 80085a8:	4824      	ldr	r0, [pc, #144]	; (800863c <esp8266_SetupIP+0x2f4>)
 80085aa:	f004 fc41 	bl	800ce30 <iprintf>
				retry_count = 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	71fb      	strb	r3, [r7, #7]
				wifi_config_step--;
 80085b2:	4b11      	ldr	r3, [pc, #68]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80085bc:	701a      	strb	r2, [r3, #0]
				break;
 80085be:	e009      	b.n	80085d4 <esp8266_SetupIP+0x28c>
		while (esp8266_TransmitCmd((uint8_t*) "AT+CIPSTA?", OK_ACK,
 80085c0:	2301      	movs	r3, #1
 80085c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085c6:	4911      	ldr	r1, [pc, #68]	; (800860c <esp8266_SetupIP+0x2c4>)
 80085c8:	481f      	ldr	r0, [pc, #124]	; (8008648 <esp8266_SetupIP+0x300>)
 80085ca:	f7ff fd69 	bl	80080a0 <esp8266_TransmitCmd>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d1dc      	bne.n	800858e <esp8266_SetupIP+0x246>
			}
		}
	}

	HAL_Delay(100);
 80085d4:	2064      	movs	r0, #100	; 0x64
 80085d6:	f7f8 ffe3 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 80085da:	2300      	movs	r3, #0
 80085dc:	71fb      	strb	r3, [r7, #7]

	/* Set DHCP */
	printf("(DBG:) Trying to set DHCP mode\r\n");
 80085de:	481b      	ldr	r0, [pc, #108]	; (800864c <esp8266_SetupIP+0x304>)
 80085e0:	f004 fcc2 	bl	800cf68 <puts>
	wifi_config_step++;
 80085e4:	4b04      	ldr	r3, [pc, #16]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	3301      	adds	r3, #1
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <esp8266_SetupIP+0x2b0>)
 80085ee:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 80085f0:	e045      	b.n	800867e <esp8266_SetupIP+0x336>
 80085f2:	bf00      	nop
 80085f4:	0800e764 	.word	0x0800e764
 80085f8:	20001008 	.word	0x20001008
 80085fc:	0800e784 	.word	0x0800e784
 8008600:	20000012 	.word	0x20000012
 8008604:	0800e7d0 	.word	0x0800e7d0
 8008608:	0800e7f0 	.word	0x0800e7f0
 800860c:	0800e80c 	.word	0x0800e80c
 8008610:	0800e810 	.word	0x0800e810
 8008614:	0800e818 	.word	0x0800e818
 8008618:	0800e838 	.word	0x0800e838
 800861c:	0800e858 	.word	0x0800e858
 8008620:	0800e864 	.word	0x0800e864
 8008624:	0800e88c 	.word	0x0800e88c
 8008628:	0800e8b0 	.word	0x0800e8b0
 800862c:	0800e8c0 	.word	0x0800e8c0
 8008630:	0800e8e0 	.word	0x0800e8e0
 8008634:	20000011 	.word	0x20000011
 8008638:	0800e900 	.word	0x0800e900
 800863c:	0800e91c 	.word	0x0800e91c
 8008640:	0800e954 	.word	0x0800e954
 8008644:	0800e960 	.word	0x0800e960
 8008648:	0800e97c 	.word	0x0800e97c
 800864c:	0800e988 	.word	0x0800e988
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	3301      	adds	r3, #1
 8008654:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8008656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800865a:	f7f8 ffa1 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	2b03      	cmp	r3, #3
 8008662:	d90c      	bls.n	800867e <esp8266_SetupIP+0x336>
			printf("(DBG:) Set DHCP model failed\r\n");
 8008664:	4840      	ldr	r0, [pc, #256]	; (8008768 <esp8266_SetupIP+0x420>)
 8008666:	f004 fc7f 	bl	800cf68 <puts>
			retry_count = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800866e:	4b3f      	ldr	r3, [pc, #252]	; (800876c <esp8266_SetupIP+0x424>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	3b01      	subs	r3, #1
 8008674:	b2da      	uxtb	r2, r3
 8008676:	4b3d      	ldr	r3, [pc, #244]	; (800876c <esp8266_SetupIP+0x424>)
 8008678:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800867a:	2300      	movs	r3, #0
 800867c:	e06f      	b.n	800875e <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CWDHCP=1,1", OK_ACK, 1000,
 800867e:	2301      	movs	r3, #1
 8008680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008684:	493a      	ldr	r1, [pc, #232]	; (8008770 <esp8266_SetupIP+0x428>)
 8008686:	483b      	ldr	r0, [pc, #236]	; (8008774 <esp8266_SetupIP+0x42c>)
 8008688:	f7ff fd0a 	bl	80080a0 <esp8266_TransmitCmd>
 800868c:	4603      	mov	r3, r0
 800868e:	2b01      	cmp	r3, #1
 8008690:	d1de      	bne.n	8008650 <esp8266_SetupIP+0x308>
		}
	}

	HAL_Delay(100);
 8008692:	2064      	movs	r0, #100	; 0x64
 8008694:	f7f8 ff84 	bl	80015a0 <HAL_Delay>
	retry_count = 0;
 8008698:	2300      	movs	r3, #0
 800869a:	71fb      	strb	r3, [r7, #7]

	/* Set single connection */
	printf("(DBG:) Trying to set single connection\r\n");
 800869c:	4836      	ldr	r0, [pc, #216]	; (8008778 <esp8266_SetupIP+0x430>)
 800869e:	f004 fc63 	bl	800cf68 <puts>
	wifi_config_step++;
 80086a2:	4b32      	ldr	r3, [pc, #200]	; (800876c <esp8266_SetupIP+0x424>)
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	3301      	adds	r3, #1
 80086a8:	b2da      	uxtb	r2, r3
 80086aa:	4b30      	ldr	r3, [pc, #192]	; (800876c <esp8266_SetupIP+0x424>)
 80086ac:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 80086ae:	e016      	b.n	80086de <esp8266_SetupIP+0x396>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	3301      	adds	r3, #1
 80086b4:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 80086b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086ba:	f7f8 ff71 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80086be:	79fb      	ldrb	r3, [r7, #7]
 80086c0:	2b03      	cmp	r3, #3
 80086c2:	d90c      	bls.n	80086de <esp8266_SetupIP+0x396>
			printf("(DBG:) Set single connection model failed\r\n");
 80086c4:	482d      	ldr	r0, [pc, #180]	; (800877c <esp8266_SetupIP+0x434>)
 80086c6:	f004 fc4f 	bl	800cf68 <puts>
			retry_count = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 80086ce:	4b27      	ldr	r3, [pc, #156]	; (800876c <esp8266_SetupIP+0x424>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	4b25      	ldr	r3, [pc, #148]	; (800876c <esp8266_SetupIP+0x424>)
 80086d8:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 80086da:	2300      	movs	r3, #0
 80086dc:	e03f      	b.n	800875e <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMUX=0", OK_ACK, 1000,
 80086de:	2301      	movs	r3, #1
 80086e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086e4:	4922      	ldr	r1, [pc, #136]	; (8008770 <esp8266_SetupIP+0x428>)
 80086e6:	4826      	ldr	r0, [pc, #152]	; (8008780 <esp8266_SetupIP+0x438>)
 80086e8:	f7ff fcda 	bl	80080a0 <esp8266_TransmitCmd>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d1de      	bne.n	80086b0 <esp8266_SetupIP+0x368>
		}
	}

	HAL_Delay(100);
 80086f2:	2064      	movs	r0, #100	; 0x64
 80086f4:	f7f8 ff54 	bl	80015a0 <HAL_Delay>
	retry_count = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	71fb      	strb	r3, [r7, #7]

	/* Set transparent transmission */
	printf("(DBG:) Trying to set transparent transmission mode\r\n");
 80086fc:	4821      	ldr	r0, [pc, #132]	; (8008784 <esp8266_SetupIP+0x43c>)
 80086fe:	f004 fc33 	bl	800cf68 <puts>
	wifi_config_step++;
 8008702:	4b1a      	ldr	r3, [pc, #104]	; (800876c <esp8266_SetupIP+0x424>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	3301      	adds	r3, #1
 8008708:	b2da      	uxtb	r2, r3
 800870a:	4b18      	ldr	r3, [pc, #96]	; (800876c <esp8266_SetupIP+0x424>)
 800870c:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 800870e:	e016      	b.n	800873e <esp8266_SetupIP+0x3f6>
	WITH_NEWLINE) != _SUCCEED) {
		retry_count++;
 8008710:	79fb      	ldrb	r3, [r7, #7]
 8008712:	3301      	adds	r3, #1
 8008714:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(1000);
 8008716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800871a:	f7f8 ff41 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800871e:	79fb      	ldrb	r3, [r7, #7]
 8008720:	2b03      	cmp	r3, #3
 8008722:	d90c      	bls.n	800873e <esp8266_SetupIP+0x3f6>
			printf("(DBG:) Set transparent transmission mode failed\r\n");
 8008724:	4818      	ldr	r0, [pc, #96]	; (8008788 <esp8266_SetupIP+0x440>)
 8008726:	f004 fc1f 	bl	800cf68 <puts>
			retry_count = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	71fb      	strb	r3, [r7, #7]
			wifi_config_step--;
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <esp8266_SetupIP+0x424>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	3b01      	subs	r3, #1
 8008734:	b2da      	uxtb	r2, r3
 8008736:	4b0d      	ldr	r3, [pc, #52]	; (800876c <esp8266_SetupIP+0x424>)
 8008738:	701a      	strb	r2, [r3, #0]
			return _FAILED;
 800873a:	2300      	movs	r3, #0
 800873c:	e00f      	b.n	800875e <esp8266_SetupIP+0x416>
	while (esp8266_TransmitCmd((uint8_t*) "AT+CIPMODE=1", OK_ACK, 1000,
 800873e:	2301      	movs	r3, #1
 8008740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008744:	490a      	ldr	r1, [pc, #40]	; (8008770 <esp8266_SetupIP+0x428>)
 8008746:	4811      	ldr	r0, [pc, #68]	; (800878c <esp8266_SetupIP+0x444>)
 8008748:	f7ff fcaa 	bl	80080a0 <esp8266_TransmitCmd>
 800874c:	4603      	mov	r3, r0
 800874e:	2b01      	cmp	r3, #1
 8008750:	d1de      	bne.n	8008710 <esp8266_SetupIP+0x3c8>
		}
	}

	HAL_Delay(100);
 8008752:	2064      	movs	r0, #100	; 0x64
 8008754:	f7f8 ff24 	bl	80015a0 <HAL_Delay>
	retry_count = 0;
 8008758:	2300      	movs	r3, #0
 800875a:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED;
 800875c:	2301      	movs	r3, #1

}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	0800e9a8 	.word	0x0800e9a8
 800876c:	20001008 	.word	0x20001008
 8008770:	0800e80c 	.word	0x0800e80c
 8008774:	0800e9c8 	.word	0x0800e9c8
 8008778:	0800e9d8 	.word	0x0800e9d8
 800877c:	0800ea00 	.word	0x0800ea00
 8008780:	0800ea2c 	.word	0x0800ea2c
 8008784:	0800ea38 	.word	0x0800ea38
 8008788:	0800ea6c 	.word	0x0800ea6c
 800878c:	0800eaa0 	.word	0x0800eaa0

08008790 <esp8266_ConfigAccessBroker>:

static MQTT_StateTypeDef esp8266_ConfigAccessBroker()
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af02      	add	r7, sp, #8
	int retry_count = 0;
 8008796:	2300      	movs	r3, #0
 8008798:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(MQTT_CLIENTID) + strlen(MQTT_USERNAME) + strlen(MQTT_PASSWORD) + 40;
 800879a:	232d      	movs	r3, #45	; 0x2d
 800879c:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 800879e:	897b      	ldrh	r3, [r7, #10]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f004 fa47 	bl	800cc34 <malloc>
 80087a6:	4603      	mov	r3, r0
 80087a8:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 80087aa:	897b      	ldrh	r3, [r7, #10]
 80087ac:	461a      	mov	r2, r3
 80087ae:	2100      	movs	r1, #0
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f004 fa55 	bl	800cc60 <memset>
	sprintf((char*) cmd, "AT+MQTTUSERCFG=0,1,\"%s\",\"%s\",\"%s\",0,0,\"\"", MQTT_CLIENTID, MQTT_USERNAME, MQTT_PASSWORD);
 80087b6:	4b19      	ldr	r3, [pc, #100]	; (800881c <esp8266_ConfigAccessBroker+0x8c>)
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	4b18      	ldr	r3, [pc, #96]	; (800881c <esp8266_ConfigAccessBroker+0x8c>)
 80087bc:	4a18      	ldr	r2, [pc, #96]	; (8008820 <esp8266_ConfigAccessBroker+0x90>)
 80087be:	4919      	ldr	r1, [pc, #100]	; (8008824 <esp8266_ConfigAccessBroker+0x94>)
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f004 fbe9 	bl	800cf98 <siprintf>

	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 80087c6:	e011      	b.n	80087ec <esp8266_ConfigAccessBroker+0x5c>
	{
		retry_count++;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3301      	adds	r3, #1
 80087cc:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 80087ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087d2:	f7f8 fee5 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b03      	cmp	r3, #3
 80087da:	dd07      	ble.n	80087ec <esp8266_ConfigAccessBroker+0x5c>
			printf("(DBG:) esp8266_ConfigAccessBroker() failed\r\n");
 80087dc:	4812      	ldr	r0, [pc, #72]	; (8008828 <esp8266_ConfigAccessBroker+0x98>)
 80087de:	f004 fbc3 	bl	800cf68 <puts>
			retry_count = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	60fb      	str	r3, [r7, #12]
			mqtt_state = _CONFIG_ERROR_MQTT;
 80087e6:	4b11      	ldr	r3, [pc, #68]	; (800882c <esp8266_ConfigAccessBroker+0x9c>)
 80087e8:	2204      	movs	r2, #4
 80087ea:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 80087ec:	2301      	movs	r3, #1
 80087ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087f2:	490f      	ldr	r1, [pc, #60]	; (8008830 <esp8266_ConfigAccessBroker+0xa0>)
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f7ff fc53 	bl	80080a0 <esp8266_TransmitCmd>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d1e3      	bne.n	80087c8 <esp8266_ConfigAccessBroker+0x38>
		}
	}

	mqtt_state = _CONFIG_OK_MQTT;
 8008800:	4b0a      	ldr	r3, [pc, #40]	; (800882c <esp8266_ConfigAccessBroker+0x9c>)
 8008802:	2205      	movs	r2, #5
 8008804:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8008806:	2064      	movs	r0, #100	; 0x64
 8008808:	f7f8 feca 	bl	80015a0 <HAL_Delay>
	retry_count = 0;
 800880c:	2300      	movs	r3, #0
 800880e:	60fb      	str	r3, [r7, #12]

	return mqtt_state;
 8008810:	4b06      	ldr	r3, [pc, #24]	; (800882c <esp8266_ConfigAccessBroker+0x9c>)
 8008812:	781b      	ldrb	r3, [r3, #0]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	0800eb2c 	.word	0x0800eb2c
 8008820:	0800eb30 	.word	0x0800eb30
 8008824:	0800eb38 	.word	0x0800eb38
 8008828:	0800eb64 	.word	0x0800eb64
 800882c:	20000013 	.word	0x20000013
 8008830:	0800e80c 	.word	0x0800e80c

08008834 <esp8266_ConnectBroker>:

	return mqtt_state;
}

static MQTT_StateTypeDef esp8266_ConnectBroker()
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
	int retry_count = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	60fb      	str	r3, [r7, #12]
	uint16_t cmd_len = strlen(IpServer) + strlen(ServerPort) + 25;
 800883e:	232e      	movs	r3, #46	; 0x2e
 8008840:	817b      	strh	r3, [r7, #10]
	uint8_t *cmd = (uint8_t*) malloc(cmd_len * sizeof(uint8_t));
 8008842:	897b      	ldrh	r3, [r7, #10]
 8008844:	4618      	mov	r0, r3
 8008846:	f004 f9f5 	bl	800cc34 <malloc>
 800884a:	4603      	mov	r3, r0
 800884c:	607b      	str	r3, [r7, #4]
	memset(cmd, 0, cmd_len);
 800884e:	897b      	ldrh	r3, [r7, #10]
 8008850:	461a      	mov	r2, r3
 8008852:	2100      	movs	r1, #0
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f004 fa03 	bl	800cc60 <memset>
	sprintf((char*) cmd, "AT+MQTTCONN=0,\"%s\",%s,0", IpServer, ServerPort);
 800885a:	4b16      	ldr	r3, [pc, #88]	; (80088b4 <esp8266_ConnectBroker+0x80>)
 800885c:	4a16      	ldr	r2, [pc, #88]	; (80088b8 <esp8266_ConnectBroker+0x84>)
 800885e:	4917      	ldr	r1, [pc, #92]	; (80088bc <esp8266_ConnectBroker+0x88>)
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f004 fb99 	bl	800cf98 <siprintf>

	//if (esp8266_TransmitCmd(cmd, (uint8_t*)"\r\nready\r\n", ESP8266_MAX_TIMEOUT, WITH_NEWLINE) == _SUCCEED)
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 8008866:	e011      	b.n	800888c <esp8266_ConnectBroker+0x58>
	{
		retry_count++;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3301      	adds	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800886e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008872:	f7f8 fe95 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2b03      	cmp	r3, #3
 800887a:	dd07      	ble.n	800888c <esp8266_ConnectBroker+0x58>
			printf("(DBG:) esp8266_ConnectBroker() failed\r\n");
 800887c:	4810      	ldr	r0, [pc, #64]	; (80088c0 <esp8266_ConnectBroker+0x8c>)
 800887e:	f004 fb73 	bl	800cf68 <puts>
			retry_count = 0;
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
			mqtt_state = _UNCONNECTED_MQTT;
 8008886:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <esp8266_ConnectBroker+0x90>)
 8008888:	2206      	movs	r2, #6
 800888a:	701a      	strb	r2, [r3, #0]
	while (esp8266_TransmitCmd(cmd, OK_ACK, ESP8266_MAX_TIMEOUT, WITH_NEWLINE) != _SUCCEED)
 800888c:	2301      	movs	r3, #1
 800888e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008892:	490d      	ldr	r1, [pc, #52]	; (80088c8 <esp8266_ConnectBroker+0x94>)
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7ff fc03 	bl	80080a0 <esp8266_TransmitCmd>
 800889a:	4603      	mov	r3, r0
 800889c:	2b01      	cmp	r3, #1
 800889e:	d1e3      	bne.n	8008868 <esp8266_ConnectBroker+0x34>
		}
	}

	mqtt_state = _CONNECTED_MQTT;
 80088a0:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <esp8266_ConnectBroker+0x90>)
 80088a2:	2207      	movs	r2, #7
 80088a4:	701a      	strb	r2, [r3, #0]

	return mqtt_state;
 80088a6:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <esp8266_ConnectBroker+0x90>)
 80088a8:	781b      	ldrb	r3, [r3, #0]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	0800e724 	.word	0x0800e724
 80088b8:	0800e72c 	.word	0x0800e72c
 80088bc:	0800ebb8 	.word	0x0800ebb8
 80088c0:	0800ebd0 	.word	0x0800ebd0
 80088c4:	20000013 	.word	0x20000013
 80088c8:	0800e80c 	.word	0x0800e80c

080088cc <esp8266_SetupConnect_BrokerMQTT>:

MQTT_StateTypeDef esp8266_SetupConnect_BrokerMQTT()
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
	uint8_t retry_count = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker configuration esp8266 */
	printf("(DBG:) Trying to configure MQTT access broker esp8266\r\n");
 80088d6:	482d      	ldr	r0, [pc, #180]	; (800898c <esp8266_SetupConnect_BrokerMQTT+0xc0>)
 80088d8:	f004 fb46 	bl	800cf68 <puts>
	mqtt_config_step++;
 80088dc:	4b2c      	ldr	r3, [pc, #176]	; (8008990 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	3301      	adds	r3, #1
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	4b2a      	ldr	r3, [pc, #168]	; (8008990 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 80088e6:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 80088e8:	e016      	b.n	8008918 <esp8266_SetupConnect_BrokerMQTT+0x4c>
		retry_count++;
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	3301      	adds	r3, #1
 80088ee:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 80088f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088f4:	f7f8 fe54 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 80088f8:	79fb      	ldrb	r3, [r7, #7]
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d90c      	bls.n	8008918 <esp8266_SetupConnect_BrokerMQTT+0x4c>
			printf("(DBG:) Configure MQTT access broker failed\r\n");
 80088fe:	4825      	ldr	r0, [pc, #148]	; (8008994 <esp8266_SetupConnect_BrokerMQTT+0xc8>)
 8008900:	f004 fb32 	bl	800cf68 <puts>
			retry_count = 0;
 8008904:	2300      	movs	r3, #0
 8008906:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 8008908:	4b21      	ldr	r3, [pc, #132]	; (8008990 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	3b01      	subs	r3, #1
 800890e:	b2da      	uxtb	r2, r3
 8008910:	4b1f      	ldr	r3, [pc, #124]	; (8008990 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8008912:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 8008914:	2300      	movs	r3, #0
 8008916:	e035      	b.n	8008984 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConfigAccessBroker() != _CONFIG_OK_MQTT) {
 8008918:	f7ff ff3a 	bl	8008790 <esp8266_ConfigAccessBroker>
 800891c:	4603      	mov	r3, r0
 800891e:	2b05      	cmp	r3, #5
 8008920:	d1e3      	bne.n	80088ea <esp8266_SetupConnect_BrokerMQTT+0x1e>
		}
	}

	HAL_Delay(100);
 8008922:	2064      	movs	r0, #100	; 0x64
 8008924:	f7f8 fe3c 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 8008928:	2300      	movs	r3, #0
 800892a:	71fb      	strb	r3, [r7, #7]

	/* MQTT broker connection esp8266 */
	printf("(DBG:) Trying to connect to MQTT broker esp8266\r\n");
 800892c:	481a      	ldr	r0, [pc, #104]	; (8008998 <esp8266_SetupConnect_BrokerMQTT+0xcc>)
 800892e:	f004 fb1b 	bl	800cf68 <puts>
	mqtt_config_step++;
 8008932:	4b17      	ldr	r3, [pc, #92]	; (8008990 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	3301      	adds	r3, #1
 8008938:	b2da      	uxtb	r2, r3
 800893a:	4b15      	ldr	r3, [pc, #84]	; (8008990 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 800893c:	701a      	strb	r2, [r3, #0]
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 800893e:	e016      	b.n	800896e <esp8266_SetupConnect_BrokerMQTT+0xa2>
		retry_count++;
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	3301      	adds	r3, #1
 8008944:	71fb      	strb	r3, [r7, #7]
		HAL_Delay(500);
 8008946:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800894a:	f7f8 fe29 	bl	80015a0 <HAL_Delay>
		if (retry_count > ESP8266_MAX_RETRY_TIME) {
 800894e:	79fb      	ldrb	r3, [r7, #7]
 8008950:	2b03      	cmp	r3, #3
 8008952:	d90c      	bls.n	800896e <esp8266_SetupConnect_BrokerMQTT+0xa2>
			printf("(DBG:) connection MQTT broker failed\r\n");
 8008954:	4811      	ldr	r0, [pc, #68]	; (800899c <esp8266_SetupConnect_BrokerMQTT+0xd0>)
 8008956:	f004 fb07 	bl	800cf68 <puts>
			retry_count = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	71fb      	strb	r3, [r7, #7]
			mqtt_config_step--;
 800895e:	4b0c      	ldr	r3, [pc, #48]	; (8008990 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	3b01      	subs	r3, #1
 8008964:	b2da      	uxtb	r2, r3
 8008966:	4b0a      	ldr	r3, [pc, #40]	; (8008990 <esp8266_SetupConnect_BrokerMQTT+0xc4>)
 8008968:	701a      	strb	r2, [r3, #0]
			return _FAILED_MQTT;
 800896a:	2300      	movs	r3, #0
 800896c:	e00a      	b.n	8008984 <esp8266_SetupConnect_BrokerMQTT+0xb8>
	while (esp8266_ConnectBroker() < _CONNECTED_MQTT) {
 800896e:	f7ff ff61 	bl	8008834 <esp8266_ConnectBroker>
 8008972:	4603      	mov	r3, r0
 8008974:	2b06      	cmp	r3, #6
 8008976:	d9e3      	bls.n	8008940 <esp8266_SetupConnect_BrokerMQTT+0x74>
		}
	}

	HAL_Delay(100);
 8008978:	2064      	movs	r0, #100	; 0x64
 800897a:	f7f8 fe11 	bl	80015a0 <HAL_Delay>
	retry_count = 0;		// reset retry count
 800897e:	2300      	movs	r3, #0
 8008980:	71fb      	strb	r3, [r7, #7]
	return _SUCCEED_MQTT;
 8008982:	2301      	movs	r3, #1
}
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	0800ebf8 	.word	0x0800ebf8
 8008990:	20001009 	.word	0x20001009
 8008994:	0800ec30 	.word	0x0800ec30
 8008998:	0800ec5c 	.word	0x0800ec5c
 800899c:	0800ec90 	.word	0x0800ec90

080089a0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80089aa:	f107 0308 	add.w	r3, r7, #8
 80089ae:	2218      	movs	r2, #24
 80089b0:	2100      	movs	r1, #0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f001 f8d8 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 80089b8:	233f      	movs	r3, #63	; 0x3f
 80089ba:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80089bc:	2381      	movs	r3, #129	; 0x81
 80089be:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80089c0:	1dfb      	adds	r3, r7, #7
 80089c2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80089c4:	2301      	movs	r3, #1
 80089c6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089c8:	f107 0308 	add.w	r3, r7, #8
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f001 fb54 	bl	800a07c <hci_send_req>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	da01      	bge.n	80089de <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80089da:	23ff      	movs	r3, #255	; 0xff
 80089dc:	e000      	b.n	80089e0 <aci_gap_set_non_discoverable+0x40>
  return status;
 80089de:	79fb      	ldrb	r3, [r7, #7]
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3720      	adds	r7, #32
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80089e8:	b5b0      	push	{r4, r5, r7, lr}
 80089ea:	b0ce      	sub	sp, #312	; 0x138
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4605      	mov	r5, r0
 80089f0:	460c      	mov	r4, r1
 80089f2:	4610      	mov	r0, r2
 80089f4:	4619      	mov	r1, r3
 80089f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80089fa:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80089fe:	462a      	mov	r2, r5
 8008a00:	701a      	strb	r2, [r3, #0]
 8008a02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a06:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a12:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008a16:	4602      	mov	r2, r0
 8008a18:	801a      	strh	r2, [r3, #0]
 8008a1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a1e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008a22:	460a      	mov	r2, r1
 8008a24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008a26:	f107 0310 	add.w	r3, r7, #16
 8008a2a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008a2e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008a32:	3308      	adds	r3, #8
 8008a34:	f107 0210 	add.w	r2, r7, #16
 8008a38:	4413      	add	r3, r2
 8008a3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008a3e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008a42:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008a46:	4413      	add	r3, r2
 8008a48:	3309      	adds	r3, #9
 8008a4a:	f107 0210 	add.w	r2, r7, #16
 8008a4e:	4413      	add	r3, r2
 8008a50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008a58:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008a66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a6a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008a6e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008a72:	7812      	ldrb	r2, [r2, #0]
 8008a74:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008a76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008a80:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a84:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008a88:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008a8c:	8812      	ldrh	r2, [r2, #0]
 8008a8e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a96:	3302      	adds	r3, #2
 8008a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008a9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008aa0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008aa4:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8008aa8:	8812      	ldrh	r2, [r2, #0]
 8008aaa:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008aae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ab2:	3302      	adds	r3, #2
 8008ab4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008ab8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008abc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008ac0:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008ac4:	7812      	ldrb	r2, [r2, #0]
 8008ac6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008acc:	3301      	adds	r3, #1
 8008ace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008ad2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ad6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008ada:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008adc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008ae6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008aea:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008aee:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008af0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008af4:	3301      	adds	r3, #1
 8008af6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008afa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008afe:	3308      	adds	r3, #8
 8008b00:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008b04:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 f81d 	bl	8009b48 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008b0e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008b12:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008b16:	4413      	add	r3, r2
 8008b18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008b1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b20:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008b24:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008b26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008b30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008b34:	3301      	adds	r3, #1
 8008b36:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008b3a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 f802 	bl	8009b48 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008b44:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008b48:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8008b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b56:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008b5a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b60:	3302      	adds	r3, #2
 8008b62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8008b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b6a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008b6e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b74:	3302      	adds	r3, #2
 8008b76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b7e:	2218      	movs	r2, #24
 8008b80:	2100      	movs	r1, #0
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 fff0 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b88:	233f      	movs	r3, #63	; 0x3f
 8008b8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008b8e:	2383      	movs	r3, #131	; 0x83
 8008b90:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b94:	f107 0310 	add.w	r3, r7, #16
 8008b98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ba0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ba4:	f107 030f 	add.w	r3, r7, #15
 8008ba8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008bac:	2301      	movs	r3, #1
 8008bae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f001 fa5f 	bl	800a07c <hci_send_req>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	da01      	bge.n	8008bc8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008bc4:	23ff      	movs	r3, #255	; 0xff
 8008bc6:	e004      	b.n	8008bd2 <aci_gap_set_discoverable+0x1ea>
  return status;
 8008bc8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008bcc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008bd0:	781b      	ldrb	r3, [r3, #0]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bdb0      	pop	{r4, r5, r7, pc}

08008bdc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b0cc      	sub	sp, #304	; 0x130
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	4602      	mov	r2, r0
 8008be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008be8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008bec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008bee:	f107 0310 	add.w	r3, r7, #16
 8008bf2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008bf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bfa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008bfe:	2200      	movs	r2, #0
 8008c00:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c10:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008c14:	7812      	ldrb	r2, [r2, #0]
 8008c16:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c26:	2218      	movs	r2, #24
 8008c28:	2100      	movs	r1, #0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 ff9c 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c30:	233f      	movs	r3, #63	; 0x3f
 8008c32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008c36:	2385      	movs	r3, #133	; 0x85
 8008c38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c3c:	f107 0310 	add.w	r3, r7, #16
 8008c40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c4c:	f107 030f 	add.w	r3, r7, #15
 8008c50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c54:	2301      	movs	r3, #1
 8008c56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c5e:	2100      	movs	r1, #0
 8008c60:	4618      	mov	r0, r3
 8008c62:	f001 fa0b 	bl	800a07c <hci_send_req>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	da01      	bge.n	8008c70 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008c6c:	23ff      	movs	r3, #255	; 0xff
 8008c6e:	e004      	b.n	8008c7a <aci_gap_set_io_capability+0x9e>
  return status;
 8008c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c74:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c78:	781b      	ldrb	r3, [r3, #0]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008c84:	b5b0      	push	{r4, r5, r7, lr}
 8008c86:	b0cc      	sub	sp, #304	; 0x130
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	4610      	mov	r0, r2
 8008c90:	4619      	mov	r1, r3
 8008c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c96:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008c9a:	462a      	mov	r2, r5
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ca2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008ca6:	4622      	mov	r2, r4
 8008ca8:	701a      	strb	r2, [r3, #0]
 8008caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cae:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	701a      	strb	r2, [r3, #0]
 8008cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cbe:	460a      	mov	r2, r1
 8008cc0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008cc2:	f107 0310 	add.w	r3, r7, #16
 8008cc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ce4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008ce8:	7812      	ldrb	r2, [r2, #0]
 8008cea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008cec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cfe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008d02:	7812      	ldrb	r2, [r2, #0]
 8008d04:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d14:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d18:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008d1c:	7812      	ldrb	r2, [r2, #0]
 8008d1e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008d20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d24:	3301      	adds	r3, #1
 8008d26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d32:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d36:	7812      	ldrb	r2, [r2, #0]
 8008d38:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d3e:	3301      	adds	r3, #1
 8008d40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d48:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008d4c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008d4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d52:	3301      	adds	r3, #1
 8008d54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d5c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008d60:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008d62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d66:	3301      	adds	r3, #1
 8008d68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d70:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008d74:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008d76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d84:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008d88:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d90:	3304      	adds	r3, #4
 8008d92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d9a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008d9e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008da0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008da4:	3301      	adds	r3, #1
 8008da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008daa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dae:	2218      	movs	r2, #24
 8008db0:	2100      	movs	r1, #0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fed8 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008db8:	233f      	movs	r3, #63	; 0x3f
 8008dba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008dbe:	2386      	movs	r3, #134	; 0x86
 8008dc0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008dc4:	f107 0310 	add.w	r3, r7, #16
 8008dc8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008dd4:	f107 030f 	add.w	r3, r7, #15
 8008dd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008de2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008de6:	2100      	movs	r1, #0
 8008de8:	4618      	mov	r0, r3
 8008dea:	f001 f947 	bl	800a07c <hci_send_req>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	da01      	bge.n	8008df8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008df4:	23ff      	movs	r3, #255	; 0xff
 8008df6:	e004      	b.n	8008e02 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dfc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008e00:	781b      	ldrb	r3, [r3, #0]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bdb0      	pop	{r4, r5, r7, pc}

08008e0c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b0cc      	sub	sp, #304	; 0x130
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4602      	mov	r2, r0
 8008e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008e1c:	6019      	str	r1, [r3, #0]
 8008e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e22:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008e26:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008e28:	f107 0310 	add.w	r3, r7, #16
 8008e2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e34:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008e38:	2200      	movs	r2, #0
 8008e3a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008e42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e4a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008e4e:	8812      	ldrh	r2, [r2, #0]
 8008e50:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008e52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e56:	3302      	adds	r3, #2
 8008e58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8008e5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e64:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e72:	3304      	adds	r3, #4
 8008e74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e7c:	2218      	movs	r2, #24
 8008e7e:	2100      	movs	r1, #0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fe71 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e86:	233f      	movs	r3, #63	; 0x3f
 8008e88:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008e8c:	2388      	movs	r3, #136	; 0x88
 8008e8e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e92:	f107 0310 	add.w	r3, r7, #16
 8008e96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ea2:	f107 030f 	add.w	r3, r7, #15
 8008ea6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008eb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f001 f8e0 	bl	800a07c <hci_send_req>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	da01      	bge.n	8008ec6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8008ec2:	23ff      	movs	r3, #255	; 0xff
 8008ec4:	e004      	b.n	8008ed0 <aci_gap_pass_key_resp+0xc4>
  return status;
 8008ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ece:	781b      	ldrb	r3, [r3, #0]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008eda:	b590      	push	{r4, r7, lr}
 8008edc:	b0cd      	sub	sp, #308	; 0x134
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	4608      	mov	r0, r1
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008eea:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ef4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008ef8:	4622      	mov	r2, r4
 8008efa:	701a      	strb	r2, [r3, #0]
 8008efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f00:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008f04:	4602      	mov	r2, r0
 8008f06:	701a      	strb	r2, [r3, #0]
 8008f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f0c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008f10:	460a      	mov	r2, r1
 8008f12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008f14:	f107 0310 	add.w	r3, r7, #16
 8008f18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008f1c:	f107 0308 	add.w	r3, r7, #8
 8008f20:	2207      	movs	r2, #7
 8008f22:	2100      	movs	r1, #0
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fe1f 	bl	8009b68 <Osal_MemSet>
  int index_input = 0;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f38:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008f3c:	7812      	ldrb	r2, [r2, #0]
 8008f3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008f40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f44:	3301      	adds	r3, #1
 8008f46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f52:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008f56:	7812      	ldrb	r2, [r2, #0]
 8008f58:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f5e:	3301      	adds	r3, #1
 8008f60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008f6c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008f70:	7812      	ldrb	r2, [r2, #0]
 8008f72:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008f74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f78:	3301      	adds	r3, #1
 8008f7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f82:	2218      	movs	r2, #24
 8008f84:	2100      	movs	r1, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 fdee 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f8c:	233f      	movs	r3, #63	; 0x3f
 8008f8e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008f92:	238a      	movs	r3, #138	; 0x8a
 8008f94:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f98:	f107 0310 	add.w	r3, r7, #16
 8008f9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008fa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fa4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008fa8:	f107 0308 	add.w	r3, r7, #8
 8008fac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008fb0:	2307      	movs	r3, #7
 8008fb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008fb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fba:	2100      	movs	r1, #0
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 f85d 	bl	800a07c <hci_send_req>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da01      	bge.n	8008fcc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008fc8:	23ff      	movs	r3, #255	; 0xff
 8008fca:	e02e      	b.n	800902a <aci_gap_init+0x150>
  if ( resp.Status )
 8008fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <aci_gap_init+0x10c>
    return resp.Status;
 8008fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	e021      	b.n	800902a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008fee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009004:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009008:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800900c:	b29a      	uxth	r2, r3
 800900e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009012:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009018:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800901c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009020:	b29a      	uxth	r2, r3
 8009022:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009026:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009030:	46bd      	mov	sp, r7
 8009032:	bd90      	pop	{r4, r7, pc}

08009034 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b0cc      	sub	sp, #304	; 0x130
 8009038:	af00      	add	r7, sp, #0
 800903a:	4602      	mov	r2, r0
 800903c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009044:	6019      	str	r1, [r3, #0]
 8009046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800904a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800904e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009050:	f107 0310 	add.w	r3, r7, #16
 8009054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800905c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800906a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009072:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009076:	7812      	ldrb	r2, [r2, #0]
 8009078:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800907a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800907e:	3301      	adds	r3, #1
 8009080:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009088:	1c58      	adds	r0, r3, #1
 800908a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800908e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800909c:	6819      	ldr	r1, [r3, #0]
 800909e:	f000 fd53 	bl	8009b48 <Osal_MemCpy>
  index_input += AdvDataLen;
 80090a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090a6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80090b0:	4413      	add	r3, r2
 80090b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80090b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090ba:	2218      	movs	r2, #24
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fd52 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 80090c4:	233f      	movs	r3, #63	; 0x3f
 80090c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80090ca:	238e      	movs	r3, #142	; 0x8e
 80090cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80090d0:	f107 0310 	add.w	r3, r7, #16
 80090d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80090d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80090e0:	f107 030f 	add.w	r3, r7, #15
 80090e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80090e8:	2301      	movs	r3, #1
 80090ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090f2:	2100      	movs	r1, #0
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 ffc1 	bl	800a07c <hci_send_req>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	da01      	bge.n	8009104 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009100:	23ff      	movs	r3, #255	; 0xff
 8009102:	e004      	b.n	800910e <aci_gap_update_adv_data+0xda>
  return status;
 8009104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009108:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800910c:	781b      	ldrb	r3, [r3, #0]
}
 800910e:	4618      	mov	r0, r3
 8009110:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009122:	f107 0308 	add.w	r3, r7, #8
 8009126:	2218      	movs	r2, #24
 8009128:	2100      	movs	r1, #0
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fd1c 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009130:	233f      	movs	r3, #63	; 0x3f
 8009132:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009134:	2392      	movs	r3, #146	; 0x92
 8009136:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009138:	1dfb      	adds	r3, r7, #7
 800913a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800913c:	2301      	movs	r3, #1
 800913e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009140:	f107 0308 	add.w	r3, r7, #8
 8009144:	2100      	movs	r1, #0
 8009146:	4618      	mov	r0, r3
 8009148:	f000 ff98 	bl	800a07c <hci_send_req>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	da01      	bge.n	8009156 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009152:	23ff      	movs	r3, #255	; 0xff
 8009154:	e000      	b.n	8009158 <aci_gap_configure_whitelist+0x40>
  return status;
 8009156:	79fb      	ldrb	r3, [r7, #7]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3720      	adds	r7, #32
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b0cc      	sub	sp, #304	; 0x130
 8009164:	af00      	add	r7, sp, #0
 8009166:	4602      	mov	r2, r0
 8009168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800916c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009170:	801a      	strh	r2, [r3, #0]
 8009172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009176:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800917a:	460a      	mov	r2, r1
 800917c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800917e:	f107 0310 	add.w	r3, r7, #16
 8009182:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800918a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800918e:	2200      	movs	r2, #0
 8009190:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800919c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091a0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80091a4:	8812      	ldrh	r2, [r2, #0]
 80091a6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80091a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091ac:	3302      	adds	r3, #2
 80091ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80091b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091ba:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80091be:	7812      	ldrb	r2, [r2, #0]
 80091c0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80091c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091c6:	3301      	adds	r3, #1
 80091c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091d0:	2218      	movs	r2, #24
 80091d2:	2100      	movs	r1, #0
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 fcc7 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 80091da:	233f      	movs	r3, #63	; 0x3f
 80091dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80091e0:	23a5      	movs	r3, #165	; 0xa5
 80091e2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80091e6:	f107 0310 	add.w	r3, r7, #16
 80091ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80091ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80091f6:	f107 030f 	add.w	r3, r7, #15
 80091fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80091fe:	2301      	movs	r3, #1
 8009200:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009204:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009208:	2100      	movs	r1, #0
 800920a:	4618      	mov	r0, r3
 800920c:	f000 ff36 	bl	800a07c <hci_send_req>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	da01      	bge.n	800921a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009216:	23ff      	movs	r3, #255	; 0xff
 8009218:	e004      	b.n	8009224 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800921a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800921e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009222:	781b      	ldrb	r3, [r3, #0]
}
 8009224:	4618      	mov	r0, r3
 8009226:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b088      	sub	sp, #32
 8009232:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009238:	f107 0308 	add.w	r3, r7, #8
 800923c:	2218      	movs	r2, #24
 800923e:	2100      	movs	r1, #0
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fc91 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009246:	233f      	movs	r3, #63	; 0x3f
 8009248:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800924a:	f240 1301 	movw	r3, #257	; 0x101
 800924e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009250:	1dfb      	adds	r3, r7, #7
 8009252:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009254:	2301      	movs	r3, #1
 8009256:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009258:	f107 0308 	add.w	r3, r7, #8
 800925c:	2100      	movs	r1, #0
 800925e:	4618      	mov	r0, r3
 8009260:	f000 ff0c 	bl	800a07c <hci_send_req>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	da01      	bge.n	800926e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800926a:	23ff      	movs	r3, #255	; 0xff
 800926c:	e000      	b.n	8009270 <aci_gatt_init+0x42>
  return status;
 800926e:	79fb      	ldrb	r3, [r7, #7]
}
 8009270:	4618      	mov	r0, r3
 8009272:	3720      	adds	r7, #32
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009278:	b590      	push	{r4, r7, lr}
 800927a:	b0cf      	sub	sp, #316	; 0x13c
 800927c:	af00      	add	r7, sp, #0
 800927e:	4604      	mov	r4, r0
 8009280:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009284:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8009288:	6001      	str	r1, [r0, #0]
 800928a:	4610      	mov	r0, r2
 800928c:	4619      	mov	r1, r3
 800928e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009292:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009296:	4622      	mov	r2, r4
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800929e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80092a2:	4602      	mov	r2, r0
 80092a4:	701a      	strb	r2, [r3, #0]
 80092a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80092aa:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80092ae:	460a      	mov	r2, r1
 80092b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80092b2:	f107 0310 	add.w	r3, r7, #16
 80092b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80092ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80092be:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	d00a      	beq.n	80092de <aci_gatt_add_service+0x66>
 80092c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80092cc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d101      	bne.n	80092da <aci_gatt_add_service+0x62>
 80092d6:	2311      	movs	r3, #17
 80092d8:	e002      	b.n	80092e0 <aci_gatt_add_service+0x68>
 80092da:	2301      	movs	r3, #1
 80092dc:	e000      	b.n	80092e0 <aci_gatt_add_service+0x68>
 80092de:	2303      	movs	r3, #3
 80092e0:	f107 0210 	add.w	r2, r7, #16
 80092e4:	4413      	add	r3, r2
 80092e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80092ea:	f107 030c 	add.w	r3, r7, #12
 80092ee:	2203      	movs	r2, #3
 80092f0:	2100      	movs	r1, #0
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 fc38 	bl	8009b68 <Osal_MemSet>
  int index_input = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80092fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009302:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009306:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800930a:	7812      	ldrb	r2, [r2, #0]
 800930c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800930e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009312:	3301      	adds	r3, #1
 8009314:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009318:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800931c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d002      	beq.n	800932c <aci_gatt_add_service+0xb4>
 8009326:	2b02      	cmp	r3, #2
 8009328:	d004      	beq.n	8009334 <aci_gatt_add_service+0xbc>
 800932a:	e007      	b.n	800933c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800932c:	2302      	movs	r3, #2
 800932e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009332:	e005      	b.n	8009340 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009334:	2310      	movs	r3, #16
 8009336:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800933a:	e001      	b.n	8009340 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800933c:	2397      	movs	r3, #151	; 0x97
 800933e:	e06c      	b.n	800941a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009340:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009344:	1c58      	adds	r0, r3, #1
 8009346:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800934a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800934e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009352:	6819      	ldr	r1, [r3, #0]
 8009354:	f000 fbf8 	bl	8009b48 <Osal_MemCpy>
    index_input += size;
 8009358:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800935c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009360:	4413      	add	r3, r2
 8009362:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800936a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800936e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009372:	7812      	ldrb	r2, [r2, #0]
 8009374:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009376:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800937a:	3301      	adds	r3, #1
 800937c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009384:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009388:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800938c:	7812      	ldrb	r2, [r2, #0]
 800938e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009394:	3301      	adds	r3, #1
 8009396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800939a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800939e:	2218      	movs	r2, #24
 80093a0:	2100      	movs	r1, #0
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 fbe0 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 80093a8:	233f      	movs	r3, #63	; 0x3f
 80093aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80093ae:	f44f 7381 	mov.w	r3, #258	; 0x102
 80093b2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80093b6:	f107 0310 	add.w	r3, r7, #16
 80093ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80093c6:	f107 030c 	add.w	r3, r7, #12
 80093ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80093ce:	2303      	movs	r3, #3
 80093d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fe4e 	bl	800a07c <hci_send_req>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	da01      	bge.n	80093ea <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80093e6:	23ff      	movs	r3, #255	; 0xff
 80093e8:	e017      	b.n	800941a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80093ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d005      	beq.n	8009404 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80093f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80093fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	e00a      	b.n	800941a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009404:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009408:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800940c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009410:	b29a      	uxth	r2, r3
 8009412:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009416:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009420:	46bd      	mov	sp, r7
 8009422:	bd90      	pop	{r4, r7, pc}

08009424 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009424:	b590      	push	{r4, r7, lr}
 8009426:	b0d1      	sub	sp, #324	; 0x144
 8009428:	af00      	add	r7, sp, #0
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009432:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009436:	600a      	str	r2, [r1, #0]
 8009438:	4619      	mov	r1, r3
 800943a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800943e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009442:	4622      	mov	r2, r4
 8009444:	801a      	strh	r2, [r3, #0]
 8009446:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800944a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800944e:	4602      	mov	r2, r0
 8009450:	701a      	strb	r2, [r3, #0]
 8009452:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009456:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800945a:	460a      	mov	r2, r1
 800945c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800945e:	f107 0318 	add.w	r3, r7, #24
 8009462:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009466:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800946a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d00a      	beq.n	800948a <aci_gatt_add_char+0x66>
 8009474:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009478:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b02      	cmp	r3, #2
 8009480:	d101      	bne.n	8009486 <aci_gatt_add_char+0x62>
 8009482:	2313      	movs	r3, #19
 8009484:	e002      	b.n	800948c <aci_gatt_add_char+0x68>
 8009486:	2303      	movs	r3, #3
 8009488:	e000      	b.n	800948c <aci_gatt_add_char+0x68>
 800948a:	2305      	movs	r3, #5
 800948c:	f107 0218 	add.w	r2, r7, #24
 8009490:	4413      	add	r3, r2
 8009492:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009496:	f107 0314 	add.w	r3, r7, #20
 800949a:	2203      	movs	r2, #3
 800949c:	2100      	movs	r1, #0
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fb62 	bl	8009b68 <Osal_MemSet>
  int index_input = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80094aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80094ae:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80094b2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80094b6:	8812      	ldrh	r2, [r2, #0]
 80094b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80094ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094be:	3302      	adds	r3, #2
 80094c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80094c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80094c8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80094cc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80094d0:	7812      	ldrb	r2, [r2, #0]
 80094d2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80094d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094d8:	3301      	adds	r3, #1
 80094da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80094de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80094e2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d002      	beq.n	80094f2 <aci_gatt_add_char+0xce>
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d004      	beq.n	80094fa <aci_gatt_add_char+0xd6>
 80094f0:	e007      	b.n	8009502 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80094f2:	2302      	movs	r3, #2
 80094f4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80094f8:	e005      	b.n	8009506 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80094fa:	2310      	movs	r3, #16
 80094fc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009500:	e001      	b.n	8009506 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009502:	2397      	movs	r3, #151	; 0x97
 8009504:	e091      	b.n	800962a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009506:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800950a:	1cd8      	adds	r0, r3, #3
 800950c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009510:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009514:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009518:	6819      	ldr	r1, [r3, #0]
 800951a:	f000 fb15 	bl	8009b48 <Osal_MemCpy>
    index_input += size;
 800951e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009522:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009526:	4413      	add	r3, r2
 8009528:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800952c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009530:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009534:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009538:	8812      	ldrh	r2, [r2, #0]
 800953a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800953c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009540:	3302      	adds	r3, #2
 8009542:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009546:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800954a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800954e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009550:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009554:	3301      	adds	r3, #1
 8009556:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800955a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800955e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009562:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009564:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009568:	3301      	adds	r3, #1
 800956a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800956e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009572:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009576:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009578:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800957c:	3301      	adds	r3, #1
 800957e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009582:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009586:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800958a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800958c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009590:	3301      	adds	r3, #1
 8009592:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009596:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800959a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800959e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80095a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80095a4:	3301      	adds	r3, #1
 80095a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095ae:	2218      	movs	r2, #24
 80095b0:	2100      	movs	r1, #0
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 fad8 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 80095b8:	233f      	movs	r3, #63	; 0x3f
 80095ba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80095be:	f44f 7382 	mov.w	r3, #260	; 0x104
 80095c2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80095c6:	f107 0318 	add.w	r3, r7, #24
 80095ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80095ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80095d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80095d6:	f107 0314 	add.w	r3, r7, #20
 80095da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80095de:	2303      	movs	r3, #3
 80095e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095e4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095e8:	2100      	movs	r1, #0
 80095ea:	4618      	mov	r0, r3
 80095ec:	f000 fd46 	bl	800a07c <hci_send_req>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	da01      	bge.n	80095fa <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80095f6:	23ff      	movs	r3, #255	; 0xff
 80095f8:	e017      	b.n	800962a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80095fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80095fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009608:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800960c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	e00a      	b.n	800962a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009614:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800961c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009620:	b29a      	uxth	r2, r3
 8009622:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009626:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009630:	46bd      	mov	sp, r7
 8009632:	bd90      	pop	{r4, r7, pc}

08009634 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009634:	b5b0      	push	{r4, r5, r7, lr}
 8009636:	b0cc      	sub	sp, #304	; 0x130
 8009638:	af00      	add	r7, sp, #0
 800963a:	4605      	mov	r5, r0
 800963c:	460c      	mov	r4, r1
 800963e:	4610      	mov	r0, r2
 8009640:	4619      	mov	r1, r3
 8009642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009646:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800964a:	462a      	mov	r2, r5
 800964c:	801a      	strh	r2, [r3, #0]
 800964e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009652:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009656:	4622      	mov	r2, r4
 8009658:	801a      	strh	r2, [r3, #0]
 800965a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800965e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009662:	4602      	mov	r2, r0
 8009664:	701a      	strb	r2, [r3, #0]
 8009666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800966a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800966e:	460a      	mov	r2, r1
 8009670:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009672:	f107 0310 	add.w	r3, r7, #16
 8009676:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800967a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800967e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009682:	2200      	movs	r2, #0
 8009684:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800968c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009690:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009694:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009698:	8812      	ldrh	r2, [r2, #0]
 800969a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800969c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096a0:	3302      	adds	r3, #2
 80096a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80096a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096ae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80096b2:	8812      	ldrh	r2, [r2, #0]
 80096b4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80096b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096ba:	3302      	adds	r3, #2
 80096bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80096c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096c8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80096cc:	7812      	ldrb	r2, [r2, #0]
 80096ce:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80096d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096d4:	3301      	adds	r3, #1
 80096d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80096da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096e2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80096e6:	7812      	ldrb	r2, [r2, #0]
 80096e8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80096ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096ee:	3301      	adds	r3, #1
 80096f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80096f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096f8:	1d98      	adds	r0, r3, #6
 80096fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096fe:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	461a      	mov	r2, r3
 8009706:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800970a:	f000 fa1d 	bl	8009b48 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800970e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009712:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800971c:	4413      	add	r3, r2
 800971e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009722:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009726:	2218      	movs	r2, #24
 8009728:	2100      	movs	r1, #0
 800972a:	4618      	mov	r0, r3
 800972c:	f000 fa1c 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009730:	233f      	movs	r3, #63	; 0x3f
 8009732:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009736:	f44f 7383 	mov.w	r3, #262	; 0x106
 800973a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800973e:	f107 0310 	add.w	r3, r7, #16
 8009742:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009746:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800974a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800974e:	f107 030f 	add.w	r3, r7, #15
 8009752:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009756:	2301      	movs	r3, #1
 8009758:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800975c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009760:	2100      	movs	r1, #0
 8009762:	4618      	mov	r0, r3
 8009764:	f000 fc8a 	bl	800a07c <hci_send_req>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	da01      	bge.n	8009772 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800976e:	23ff      	movs	r3, #255	; 0xff
 8009770:	e004      	b.n	800977c <aci_gatt_update_char_value+0x148>
  return status;
 8009772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009776:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800977a:	781b      	ldrb	r3, [r3, #0]
}
 800977c:	4618      	mov	r0, r3
 800977e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009782:	46bd      	mov	sp, r7
 8009784:	bdb0      	pop	{r4, r5, r7, pc}

08009786 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b0cc      	sub	sp, #304	; 0x130
 800978a:	af00      	add	r7, sp, #0
 800978c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009790:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800979a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800979e:	4602      	mov	r2, r0
 80097a0:	701a      	strb	r2, [r3, #0]
 80097a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80097aa:	460a      	mov	r2, r1
 80097ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80097ae:	f107 0310 	add.w	r3, r7, #16
 80097b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80097b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80097be:	2200      	movs	r2, #0
 80097c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80097c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80097d0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80097d4:	7812      	ldrb	r2, [r2, #0]
 80097d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80097d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097dc:	3301      	adds	r3, #1
 80097de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80097e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80097ea:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80097f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097f6:	3301      	adds	r3, #1
 80097f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80097fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009800:	1c98      	adds	r0, r3, #2
 8009802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009806:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800980a:	781a      	ldrb	r2, [r3, #0]
 800980c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009814:	6819      	ldr	r1, [r3, #0]
 8009816:	f000 f997 	bl	8009b48 <Osal_MemCpy>
  index_input += Length;
 800981a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800981e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009828:	4413      	add	r3, r2
 800982a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800982e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009832:	2218      	movs	r2, #24
 8009834:	2100      	movs	r1, #0
 8009836:	4618      	mov	r0, r3
 8009838:	f000 f996 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 800983c:	233f      	movs	r3, #63	; 0x3f
 800983e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009842:	230c      	movs	r3, #12
 8009844:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009848:	f107 0310 	add.w	r3, r7, #16
 800984c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009850:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009854:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009858:	f107 030f 	add.w	r3, r7, #15
 800985c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009860:	2301      	movs	r3, #1
 8009862:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009866:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800986a:	2100      	movs	r1, #0
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fc05 	bl	800a07c <hci_send_req>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	da01      	bge.n	800987c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009878:	23ff      	movs	r3, #255	; 0xff
 800987a:	e004      	b.n	8009886 <aci_hal_write_config_data+0x100>
  return status;
 800987c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009880:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009884:	781b      	ldrb	r3, [r3, #0]
}
 8009886:	4618      	mov	r0, r3
 8009888:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b0cc      	sub	sp, #304	; 0x130
 8009894:	af00      	add	r7, sp, #0
 8009896:	4602      	mov	r2, r0
 8009898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800989c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80098aa:	460a      	mov	r2, r1
 80098ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80098ae:	f107 0310 	add.w	r3, r7, #16
 80098b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80098b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80098be:	2200      	movs	r2, #0
 80098c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80098c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80098d0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80098d4:	7812      	ldrb	r2, [r2, #0]
 80098d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80098d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098dc:	3301      	adds	r3, #1
 80098de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80098e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80098ea:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80098ee:	7812      	ldrb	r2, [r2, #0]
 80098f0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80098f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098f6:	3301      	adds	r3, #1
 80098f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009900:	2218      	movs	r2, #24
 8009902:	2100      	movs	r1, #0
 8009904:	4618      	mov	r0, r3
 8009906:	f000 f92f 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 800990a:	233f      	movs	r3, #63	; 0x3f
 800990c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009910:	230f      	movs	r3, #15
 8009912:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009916:	f107 0310 	add.w	r3, r7, #16
 800991a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800991e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009922:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009926:	f107 030f 	add.w	r3, r7, #15
 800992a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800992e:	2301      	movs	r3, #1
 8009930:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009938:	2100      	movs	r1, #0
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fb9e 	bl	800a07c <hci_send_req>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	da01      	bge.n	800994a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009946:	23ff      	movs	r3, #255	; 0xff
 8009948:	e004      	b.n	8009954 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800994a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800994e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009952:	781b      	ldrb	r3, [r3, #0]
}
 8009954:	4618      	mov	r0, r3
 8009956:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b0cc      	sub	sp, #304	; 0x130
 8009962:	af00      	add	r7, sp, #0
 8009964:	4602      	mov	r2, r0
 8009966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800996a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800996e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009970:	f107 0310 	add.w	r3, r7, #16
 8009974:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800997c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009980:	2200      	movs	r2, #0
 8009982:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009984:	2300      	movs	r3, #0
 8009986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800998a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800998e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009992:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009996:	8812      	ldrh	r2, [r2, #0]
 8009998:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800999a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800999e:	3302      	adds	r3, #2
 80099a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099a8:	2218      	movs	r2, #24
 80099aa:	2100      	movs	r1, #0
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 f8db 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x3f;
 80099b2:	233f      	movs	r3, #63	; 0x3f
 80099b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80099b8:	2318      	movs	r3, #24
 80099ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80099be:	f107 0310 	add.w	r3, r7, #16
 80099c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80099c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80099ce:	f107 030f 	add.w	r3, r7, #15
 80099d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80099d6:	2301      	movs	r3, #1
 80099d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099e0:	2100      	movs	r1, #0
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fb4a 	bl	800a07c <hci_send_req>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	da01      	bge.n	80099f2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80099ee:	23ff      	movs	r3, #255	; 0xff
 80099f0:	e004      	b.n	80099fc <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80099f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80099fa:	781b      	ldrb	r3, [r3, #0]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b088      	sub	sp, #32
 8009a0a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a10:	f107 0308 	add.w	r3, r7, #8
 8009a14:	2218      	movs	r2, #24
 8009a16:	2100      	movs	r1, #0
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 f8a5 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x03;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009a22:	2303      	movs	r3, #3
 8009a24:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009a26:	1dfb      	adds	r3, r7, #7
 8009a28:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a2e:	f107 0308 	add.w	r3, r7, #8
 8009a32:	2100      	movs	r1, #0
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 fb21 	bl	800a07c <hci_send_req>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	da01      	bge.n	8009a44 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009a40:	23ff      	movs	r3, #255	; 0xff
 8009a42:	e000      	b.n	8009a46 <hci_reset+0x40>
  return status;
 8009a44:	79fb      	ldrb	r3, [r7, #7]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3720      	adds	r7, #32
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009a4e:	b590      	push	{r4, r7, lr}
 8009a50:	b0cd      	sub	sp, #308	; 0x134
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	4604      	mov	r4, r0
 8009a56:	4608      	mov	r0, r1
 8009a58:	4611      	mov	r1, r2
 8009a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a5e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009a62:	4622      	mov	r2, r4
 8009a64:	701a      	strb	r2, [r3, #0]
 8009a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a6a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009a6e:	4602      	mov	r2, r0
 8009a70:	701a      	strb	r2, [r3, #0]
 8009a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a76:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009a7a:	460a      	mov	r2, r1
 8009a7c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009a7e:	f107 0310 	add.w	r3, r7, #16
 8009a82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a8a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a8e:	2200      	movs	r2, #0
 8009a90:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009a92:	2300      	movs	r3, #0
 8009a94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a9c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009aa0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009aa4:	7812      	ldrb	r2, [r2, #0]
 8009aa6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009aac:	3301      	adds	r3, #1
 8009aae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009aba:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009abe:	7812      	ldrb	r2, [r2, #0]
 8009ac0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ad4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009ad8:	7812      	ldrb	r2, [r2, #0]
 8009ada:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009adc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009aea:	2218      	movs	r2, #24
 8009aec:	2100      	movs	r1, #0
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 f83a 	bl	8009b68 <Osal_MemSet>
  rq.ogf = 0x08;
 8009af4:	2308      	movs	r3, #8
 8009af6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009afa:	2331      	movs	r3, #49	; 0x31
 8009afc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b00:	f107 0310 	add.w	r3, r7, #16
 8009b04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b10:	f107 030f 	add.w	r3, r7, #15
 8009b14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b22:	2100      	movs	r1, #0
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 faa9 	bl	800a07c <hci_send_req>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	da01      	bge.n	8009b34 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009b30:	23ff      	movs	r3, #255	; 0xff
 8009b32:	e004      	b.n	8009b3e <hci_le_set_default_phy+0xf0>
  return status;
 8009b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b38:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b3c:	781b      	ldrb	r3, [r3, #0]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd90      	pop	{r4, r7, pc}

08009b48 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f003 f873 	bl	800cc44 <memcpy>
 8009b5e:	4603      	mov	r3, r0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	68b9      	ldr	r1, [r7, #8]
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f003 f871 	bl	800cc60 <memset>
 8009b7e:	4603      	mov	r3, r0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	af00      	add	r7, sp, #0
  return;
 8009b8c:	bf00      	nop
}
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr

08009b96 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009b96:	b480      	push	{r7}
 8009b98:	af00      	add	r7, sp, #0
  return;
 8009b9a:	bf00      	nop
}
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	af00      	add	r7, sp, #0
  return;
 8009ba8:	bf00      	nop
}
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	af00      	add	r7, sp, #0
  return;
 8009bb6:	bf00      	nop
}
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	af00      	add	r7, sp, #0
  return;
 8009bc4:	bf00      	nop
}
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009bce:	b480      	push	{r7}
 8009bd0:	af00      	add	r7, sp, #0
  return;
 8009bd2:	bf00      	nop
}
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009bdc:	b480      	push	{r7}
 8009bde:	af00      	add	r7, sp, #0
  return;
 8009be0:	bf00      	nop
}
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009bea:	b480      	push	{r7}
 8009bec:	af00      	add	r7, sp, #0
  return;
 8009bee:	bf00      	nop
}
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	af00      	add	r7, sp, #0
  return;
 8009bfc:	bf00      	nop
}
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009c06:	b480      	push	{r7}
 8009c08:	af00      	add	r7, sp, #0
  return;
 8009c0a:	bf00      	nop
}
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009c14:	b480      	push	{r7}
 8009c16:	af00      	add	r7, sp, #0
  return;
 8009c18:	bf00      	nop
}
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009c22:	b480      	push	{r7}
 8009c24:	af00      	add	r7, sp, #0
  return;
 8009c26:	bf00      	nop
}
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009c30:	b480      	push	{r7}
 8009c32:	af00      	add	r7, sp, #0
  return;
 8009c34:	bf00      	nop
}
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009c3e:	b480      	push	{r7}
 8009c40:	af00      	add	r7, sp, #0
  return;
 8009c42:	bf00      	nop
}
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	af00      	add	r7, sp, #0
  return;
 8009c50:	bf00      	nop
}
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	af00      	add	r7, sp, #0
  return;
 8009c5e:	bf00      	nop
}
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
  return;
 8009c6c:	bf00      	nop
}
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
	...

08009c78 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009c7c:	4b04      	ldr	r3, [pc, #16]	; (8009c90 <SVCCTL_Init+0x18>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009c82:	4b04      	ldr	r3, [pc, #16]	; (8009c94 <SVCCTL_Init+0x1c>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009c88:	f000 f806 	bl	8009c98 <SVCCTL_SvcInit>

  return;
 8009c8c:	bf00      	nop
}
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	20000998 	.word	0x20000998
 8009c94:	200009b8 	.word	0x200009b8

08009c98 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	af00      	add	r7, sp, #0
  BAS_Init();
 8009c9c:	f7ff ff74 	bl	8009b88 <BAS_Init>

  BLS_Init();
 8009ca0:	f7ff ff79 	bl	8009b96 <BLS_Init>

  CRS_STM_Init();
 8009ca4:	f7ff ff7e 	bl	8009ba4 <CRS_STM_Init>

  DIS_Init();
 8009ca8:	f7ff ff83 	bl	8009bb2 <DIS_Init>

  EDS_STM_Init();
 8009cac:	f7ff ff88 	bl	8009bc0 <EDS_STM_Init>

  HIDS_Init();
 8009cb0:	f7ff ff8d 	bl	8009bce <HIDS_Init>

  HRS_Init();
 8009cb4:	f7ff ff92 	bl	8009bdc <HRS_Init>

  HTS_Init();
 8009cb8:	f7ff ff97 	bl	8009bea <HTS_Init>

  IAS_Init();
 8009cbc:	f7ff ff9c 	bl	8009bf8 <IAS_Init>

  LLS_Init();
 8009cc0:	f7ff ffa1 	bl	8009c06 <LLS_Init>

  TPS_Init();
 8009cc4:	f7ff ffa6 	bl	8009c14 <TPS_Init>

  MOTENV_STM_Init();
 8009cc8:	f7ff ffab 	bl	8009c22 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009ccc:	f7ff ffb0 	bl	8009c30 <P2PS_STM_Init>

  ZDD_STM_Init();
 8009cd0:	f7ff ffb5 	bl	8009c3e <ZDD_STM_Init>

  OTAS_STM_Init();
 8009cd4:	f7ff ffba 	bl	8009c4c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009cd8:	f7ff ffc6 	bl	8009c68 <BVOPUS_STM_Init>

  MESH_Init();
 8009cdc:	f7ff ffbd 	bl	8009c5a <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009ce0:	f002 f98e 	bl	800c000 <SVCCTL_InitCustomSvc>
  
  return;
 8009ce4:	bf00      	nop
}
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009cf0:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <SVCCTL_RegisterSvcHandler+0x30>)
 8009cf2:	7f1b      	ldrb	r3, [r3, #28]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4a08      	ldr	r2, [pc, #32]	; (8009d18 <SVCCTL_RegisterSvcHandler+0x30>)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009cfe:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <SVCCTL_RegisterSvcHandler+0x30>)
 8009d00:	7f1b      	ldrb	r3, [r3, #28]
 8009d02:	3301      	adds	r3, #1
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	4b04      	ldr	r3, [pc, #16]	; (8009d18 <SVCCTL_RegisterSvcHandler+0x30>)
 8009d08:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009d0a:	bf00      	nop
}
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	20000998 	.word	0x20000998

08009d1c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3301      	adds	r3, #1
 8009d28:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2bff      	cmp	r3, #255	; 0xff
 8009d34:	d125      	bne.n	8009d82 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	3302      	adds	r3, #2
 8009d3a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d4a:	d118      	bne.n	8009d7e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	757b      	strb	r3, [r7, #21]
 8009d50:	e00d      	b.n	8009d6e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009d52:	7d7b      	ldrb	r3, [r7, #21]
 8009d54:	4a1a      	ldr	r2, [pc, #104]	; (8009dc0 <SVCCTL_UserEvtRx+0xa4>)
 8009d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	4798      	blx	r3
 8009d5e:	4603      	mov	r3, r0
 8009d60:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d108      	bne.n	8009d7a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009d68:	7d7b      	ldrb	r3, [r7, #21]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	757b      	strb	r3, [r7, #21]
 8009d6e:	4b14      	ldr	r3, [pc, #80]	; (8009dc0 <SVCCTL_UserEvtRx+0xa4>)
 8009d70:	7f1b      	ldrb	r3, [r3, #28]
 8009d72:	7d7a      	ldrb	r2, [r7, #21]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d3ec      	bcc.n	8009d52 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009d78:	e002      	b.n	8009d80 <SVCCTL_UserEvtRx+0x64>
              break;
 8009d7a:	bf00      	nop
          break;
 8009d7c:	e000      	b.n	8009d80 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009d7e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009d80:	e000      	b.n	8009d84 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009d82:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d00f      	beq.n	8009daa <SVCCTL_UserEvtRx+0x8e>
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	dc10      	bgt.n	8009db0 <SVCCTL_UserEvtRx+0x94>
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d002      	beq.n	8009d98 <SVCCTL_UserEvtRx+0x7c>
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d006      	beq.n	8009da4 <SVCCTL_UserEvtRx+0x88>
 8009d96:	e00b      	b.n	8009db0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fff1 	bl	800ad80 <SVCCTL_App_Notification>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	75bb      	strb	r3, [r7, #22]
      break;
 8009da2:	e008      	b.n	8009db6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009da4:	2301      	movs	r3, #1
 8009da6:	75bb      	strb	r3, [r7, #22]
      break;
 8009da8:	e005      	b.n	8009db6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009daa:	2300      	movs	r3, #0
 8009dac:	75bb      	strb	r3, [r7, #22]
      break;
 8009dae:	e002      	b.n	8009db6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009db0:	2301      	movs	r3, #1
 8009db2:	75bb      	strb	r3, [r7, #22]
      break;
 8009db4:	bf00      	nop
  }

  return (return_status);
 8009db6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20000998 	.word	0x20000998

08009dc4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009dcc:	f107 030c 	add.w	r3, r7, #12
 8009dd0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	212e      	movs	r1, #46	; 0x2e
 8009ddc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009de0:	f000 fae2 	bl	800a3a8 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	330b      	adds	r3, #11
 8009de8:	78db      	ldrb	r3, [r3, #3]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3720      	adds	r7, #32
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b088      	sub	sp, #32
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009dfa:	f107 030c 	add.w	r3, r7, #12
 8009dfe:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	210f      	movs	r1, #15
 8009e0a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009e0e:	f000 facb 	bl	800a3a8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	330b      	adds	r3, #11
 8009e16:	78db      	ldrb	r3, [r3, #3]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3720      	adds	r7, #32
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b088      	sub	sp, #32
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009e28:	f107 030c 	add.w	r3, r7, #12
 8009e2c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	2110      	movs	r1, #16
 8009e34:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009e38:	f000 fab6 	bl	800a3a8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	330b      	adds	r3, #11
 8009e40:	78db      	ldrb	r3, [r3, #3]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3720      	adds	r7, #32
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b08b      	sub	sp, #44	; 0x2c
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009e70:	2300      	movs	r3, #0
 8009e72:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009e74:	4b4a      	ldr	r3, [pc, #296]	; (8009fa0 <SHCI_GetWirelessFwInfo+0x154>)
 8009e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009e7c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	009b      	lsls	r3, r3, #2
 8009e82:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009e86:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a44      	ldr	r2, [pc, #272]	; (8009fa4 <SHCI_GetWirelessFwInfo+0x158>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d10f      	bne.n	8009eb8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	69db      	ldr	r3, [r3, #28]
 8009ea8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	617b      	str	r3, [r7, #20]
 8009eb6:	e01a      	b.n	8009eee <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009ec0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009ec4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	695b      	ldr	r3, [r3, #20]
 8009ed4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	0e1b      	lsrs	r3, r3, #24
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	0c1b      	lsrs	r3, r3, #16
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f04:	0a1b      	lsrs	r3, r3, #8
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0e:	091b      	lsrs	r3, r3, #4
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	f003 030f 	and.w	r3, r3, #15
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	f003 030f 	and.w	r3, r3, #15
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009f2a:	6a3b      	ldr	r3, [r7, #32]
 8009f2c:	0e1b      	lsrs	r3, r3, #24
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	0c1b      	lsrs	r3, r3, #16
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	0a1b      	lsrs	r3, r3, #8
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	0e1b      	lsrs	r3, r3, #24
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	0c1b      	lsrs	r3, r3, #16
 8009f66:	b2da      	uxtb	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	0a1b      	lsrs	r3, r3, #8
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	0e1b      	lsrs	r3, r3, #24
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	0c1b      	lsrs	r3, r3, #16
 8009f84:	b2da      	uxtb	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	372c      	adds	r7, #44	; 0x2c
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	58004000 	.word	0x58004000
 8009fa4:	a94656b9 	.word	0xa94656b9

08009fa8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	4a08      	ldr	r2, [pc, #32]	; (8009fd8 <hci_init+0x30>)
 8009fb8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009fba:	4a08      	ldr	r2, [pc, #32]	; (8009fdc <hci_init+0x34>)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009fc0:	4806      	ldr	r0, [pc, #24]	; (8009fdc <hci_init+0x34>)
 8009fc2:	f000 f973 	bl	800a2ac <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f000 f8d4 	bl	800a178 <TlInit>

  return;
 8009fd0:	bf00      	nop
}
 8009fd2:	3708      	adds	r7, #8
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	20002078 	.word	0x20002078
 8009fdc:	20002050 	.word	0x20002050

08009fe0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009fe6:	4822      	ldr	r0, [pc, #136]	; (800a070 <hci_user_evt_proc+0x90>)
 8009fe8:	f000 fd50 	bl	800aa8c <LST_is_empty>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d12b      	bne.n	800a04a <hci_user_evt_proc+0x6a>
 8009ff2:	4b20      	ldr	r3, [pc, #128]	; (800a074 <hci_user_evt_proc+0x94>)
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d027      	beq.n	800a04a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009ffa:	f107 030c 	add.w	r3, r7, #12
 8009ffe:	4619      	mov	r1, r3
 800a000:	481b      	ldr	r0, [pc, #108]	; (800a070 <hci_user_evt_proc+0x90>)
 800a002:	f000 fdd2 	bl	800abaa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a006:	4b1c      	ldr	r3, [pc, #112]	; (800a078 <hci_user_evt_proc+0x98>)
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00c      	beq.n	800a028 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a012:	2301      	movs	r3, #1
 800a014:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a016:	4b18      	ldr	r3, [pc, #96]	; (800a078 <hci_user_evt_proc+0x98>)
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	1d3a      	adds	r2, r7, #4
 800a01c:	4610      	mov	r0, r2
 800a01e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a020:	793a      	ldrb	r2, [r7, #4]
 800a022:	4b14      	ldr	r3, [pc, #80]	; (800a074 <hci_user_evt_proc+0x94>)
 800a024:	701a      	strb	r2, [r3, #0]
 800a026:	e002      	b.n	800a02e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a028:	4b12      	ldr	r3, [pc, #72]	; (800a074 <hci_user_evt_proc+0x94>)
 800a02a:	2201      	movs	r2, #1
 800a02c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a02e:	4b11      	ldr	r3, [pc, #68]	; (800a074 <hci_user_evt_proc+0x94>)
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d004      	beq.n	800a040 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 fc03 	bl	800a844 <TL_MM_EvtDone>
 800a03e:	e004      	b.n	800a04a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	4619      	mov	r1, r3
 800a044:	480a      	ldr	r0, [pc, #40]	; (800a070 <hci_user_evt_proc+0x90>)
 800a046:	f000 fd43 	bl	800aad0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a04a:	4809      	ldr	r0, [pc, #36]	; (800a070 <hci_user_evt_proc+0x90>)
 800a04c:	f000 fd1e 	bl	800aa8c <LST_is_empty>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d107      	bne.n	800a066 <hci_user_evt_proc+0x86>
 800a056:	4b07      	ldr	r3, [pc, #28]	; (800a074 <hci_user_evt_proc+0x94>)
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a05e:	4804      	ldr	r0, [pc, #16]	; (800a070 <hci_user_evt_proc+0x90>)
 800a060:	f001 fcee 	bl	800ba40 <hci_notify_asynch_evt>
  }


  return;
 800a064:	bf00      	nop
 800a066:	bf00      	nop
}
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	200009c0 	.word	0x200009c0
 800a074:	200009cc 	.word	0x200009cc
 800a078:	20002050 	.word	0x20002050

0800a07c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a088:	2000      	movs	r0, #0
 800a08a:	f000 f8cb 	bl	800a224 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a08e:	2300      	movs	r3, #0
 800a090:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	885b      	ldrh	r3, [r3, #2]
 800a096:	b21b      	sxth	r3, r3
 800a098:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a09c:	b21a      	sxth	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	029b      	lsls	r3, r3, #10
 800a0a4:	b21b      	sxth	r3, r3
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	b21b      	sxth	r3, r3
 800a0aa:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	b2d9      	uxtb	r1, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	689a      	ldr	r2, [r3, #8]
 800a0b6:	8bbb      	ldrh	r3, [r7, #28]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f000 f88d 	bl	800a1d8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a0be:	e04e      	b.n	800a15e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a0c0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a0c4:	f001 fcd3 	bl	800ba6e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a0c8:	e043      	b.n	800a152 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a0ca:	f107 030c 	add.w	r3, r7, #12
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	4828      	ldr	r0, [pc, #160]	; (800a174 <hci_send_req+0xf8>)
 800a0d2:	f000 fd6a 	bl	800abaa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	7a5b      	ldrb	r3, [r3, #9]
 800a0da:	2b0f      	cmp	r3, #15
 800a0dc:	d114      	bne.n	800a108 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	330b      	adds	r3, #11
 800a0e2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	885b      	ldrh	r3, [r3, #2]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	8bba      	ldrh	r2, [r7, #28]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d104      	bne.n	800a0fa <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	693a      	ldr	r2, [r7, #16]
 800a0f6:	7812      	ldrb	r2, [r2, #0]
 800a0f8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d027      	beq.n	800a152 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a102:	2301      	movs	r3, #1
 800a104:	77fb      	strb	r3, [r7, #31]
 800a106:	e024      	b.n	800a152 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	330b      	adds	r3, #11
 800a10c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a114:	b29b      	uxth	r3, r3
 800a116:	8bba      	ldrh	r2, [r7, #28]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d114      	bne.n	800a146 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	7a9b      	ldrb	r3, [r3, #10]
 800a120:	3b03      	subs	r3, #3
 800a122:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	695a      	ldr	r2, [r3, #20]
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	429a      	cmp	r2, r3
 800a12c:	bfa8      	it	ge
 800a12e:	461a      	movge	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6918      	ldr	r0, [r3, #16]
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	1cd9      	adds	r1, r3, #3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	695b      	ldr	r3, [r3, #20]
 800a140:	461a      	mov	r2, r3
 800a142:	f002 fd7f 	bl	800cc44 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d001      	beq.n	800a152 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a14e:	2301      	movs	r3, #1
 800a150:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a152:	4808      	ldr	r0, [pc, #32]	; (800a174 <hci_send_req+0xf8>)
 800a154:	f000 fc9a 	bl	800aa8c <LST_is_empty>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0b5      	beq.n	800a0ca <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a15e:	7ffb      	ldrb	r3, [r7, #31]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d0ad      	beq.n	800a0c0 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a164:	2001      	movs	r0, #1
 800a166:	f000 f85d 	bl	800a224 <NotifyCmdStatus>

  return 0;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3720      	adds	r7, #32
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	20002070 	.word	0x20002070

0800a178 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a180:	480f      	ldr	r0, [pc, #60]	; (800a1c0 <TlInit+0x48>)
 800a182:	f000 fc73 	bl	800aa6c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a186:	4a0f      	ldr	r2, [pc, #60]	; (800a1c4 <TlInit+0x4c>)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a18c:	480e      	ldr	r0, [pc, #56]	; (800a1c8 <TlInit+0x50>)
 800a18e:	f000 fc6d 	bl	800aa6c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a192:	4b0e      	ldr	r3, [pc, #56]	; (800a1cc <TlInit+0x54>)
 800a194:	2201      	movs	r2, #1
 800a196:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a198:	4b0d      	ldr	r3, [pc, #52]	; (800a1d0 <TlInit+0x58>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00a      	beq.n	800a1b6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a1a4:	4b0b      	ldr	r3, [pc, #44]	; (800a1d4 <TlInit+0x5c>)
 800a1a6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a1a8:	4b09      	ldr	r3, [pc, #36]	; (800a1d0 <TlInit+0x58>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f107 0208 	add.w	r2, r7, #8
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
  }

  return;
 800a1b4:	bf00      	nop
 800a1b6:	bf00      	nop
}
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	20002070 	.word	0x20002070
 800a1c4:	200009c8 	.word	0x200009c8
 800a1c8:	200009c0 	.word	0x200009c0
 800a1cc:	200009cc 	.word	0x200009cc
 800a1d0:	20002050 	.word	0x20002050
 800a1d4:	0800a265 	.word	0x0800a265

0800a1d8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	603a      	str	r2, [r7, #0]
 800a1e2:	80fb      	strh	r3, [r7, #6]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a1e8:	4b0c      	ldr	r3, [pc, #48]	; (800a21c <SendCmd+0x44>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	88fa      	ldrh	r2, [r7, #6]
 800a1ee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a1f2:	4b0a      	ldr	r3, [pc, #40]	; (800a21c <SendCmd+0x44>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	797a      	ldrb	r2, [r7, #5]
 800a1f8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a1fa:	4b08      	ldr	r3, [pc, #32]	; (800a21c <SendCmd+0x44>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	330c      	adds	r3, #12
 800a200:	797a      	ldrb	r2, [r7, #5]
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	4618      	mov	r0, r3
 800a206:	f002 fd1d 	bl	800cc44 <memcpy>

  hciContext.io.Send(0,0);
 800a20a:	4b05      	ldr	r3, [pc, #20]	; (800a220 <SendCmd+0x48>)
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	2100      	movs	r1, #0
 800a210:	2000      	movs	r0, #0
 800a212:	4798      	blx	r3

  return;
 800a214:	bf00      	nop
}
 800a216:	3708      	adds	r7, #8
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	200009c8 	.word	0x200009c8
 800a220:	20002050 	.word	0x20002050

0800a224 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	4603      	mov	r3, r0
 800a22c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a22e:	79fb      	ldrb	r3, [r7, #7]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d108      	bne.n	800a246 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a234:	4b0a      	ldr	r3, [pc, #40]	; (800a260 <NotifyCmdStatus+0x3c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00d      	beq.n	800a258 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a23c:	4b08      	ldr	r3, [pc, #32]	; (800a260 <NotifyCmdStatus+0x3c>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2000      	movs	r0, #0
 800a242:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a244:	e008      	b.n	800a258 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a246:	4b06      	ldr	r3, [pc, #24]	; (800a260 <NotifyCmdStatus+0x3c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d004      	beq.n	800a258 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a24e:	4b04      	ldr	r3, [pc, #16]	; (800a260 <NotifyCmdStatus+0x3c>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2001      	movs	r0, #1
 800a254:	4798      	blx	r3
  return;
 800a256:	bf00      	nop
 800a258:	bf00      	nop
}
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	20002078 	.word	0x20002078

0800a264 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	7a5b      	ldrb	r3, [r3, #9]
 800a270:	2b0f      	cmp	r3, #15
 800a272:	d003      	beq.n	800a27c <TlEvtReceived+0x18>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	7a5b      	ldrb	r3, [r3, #9]
 800a278:	2b0e      	cmp	r3, #14
 800a27a:	d107      	bne.n	800a28c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a27c:	6879      	ldr	r1, [r7, #4]
 800a27e:	4809      	ldr	r0, [pc, #36]	; (800a2a4 <TlEvtReceived+0x40>)
 800a280:	f000 fc4c 	bl	800ab1c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a284:	2000      	movs	r0, #0
 800a286:	f001 fbe7 	bl	800ba58 <hci_cmd_resp_release>
 800a28a:	e006      	b.n	800a29a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	4806      	ldr	r0, [pc, #24]	; (800a2a8 <TlEvtReceived+0x44>)
 800a290:	f000 fc44 	bl	800ab1c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a294:	4804      	ldr	r0, [pc, #16]	; (800a2a8 <TlEvtReceived+0x44>)
 800a296:	f001 fbd3 	bl	800ba40 <hci_notify_asynch_evt>
  }

  return;
 800a29a:	bf00      	nop
}
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	20002070 	.word	0x20002070
 800a2a8:	200009c0 	.word	0x200009c0

0800a2ac <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a05      	ldr	r2, [pc, #20]	; (800a2cc <hci_register_io_bus+0x20>)
 800a2b8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	4a04      	ldr	r2, [pc, #16]	; (800a2d0 <hci_register_io_bus+0x24>)
 800a2be:	611a      	str	r2, [r3, #16]

  return;
 800a2c0:	bf00      	nop
}
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	0800a5bd 	.word	0x0800a5bd
 800a2d0:	0800a625 	.word	0x0800a625

0800a2d4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	4a08      	ldr	r2, [pc, #32]	; (800a304 <shci_init+0x30>)
 800a2e4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a2e6:	4a08      	ldr	r2, [pc, #32]	; (800a308 <shci_init+0x34>)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a2ec:	4806      	ldr	r0, [pc, #24]	; (800a308 <shci_init+0x34>)
 800a2ee:	f000 f911 	bl	800a514 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 f894 	bl	800a424 <TlInit>

  return;
 800a2fc:	bf00      	nop
}
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	2000209c 	.word	0x2000209c
 800a308:	2000207c 	.word	0x2000207c

0800a30c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a312:	4822      	ldr	r0, [pc, #136]	; (800a39c <shci_user_evt_proc+0x90>)
 800a314:	f000 fbba 	bl	800aa8c <LST_is_empty>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d12b      	bne.n	800a376 <shci_user_evt_proc+0x6a>
 800a31e:	4b20      	ldr	r3, [pc, #128]	; (800a3a0 <shci_user_evt_proc+0x94>)
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d027      	beq.n	800a376 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a326:	f107 030c 	add.w	r3, r7, #12
 800a32a:	4619      	mov	r1, r3
 800a32c:	481b      	ldr	r0, [pc, #108]	; (800a39c <shci_user_evt_proc+0x90>)
 800a32e:	f000 fc3c 	bl	800abaa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a332:	4b1c      	ldr	r3, [pc, #112]	; (800a3a4 <shci_user_evt_proc+0x98>)
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00c      	beq.n	800a354 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a33e:	2301      	movs	r3, #1
 800a340:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a342:	4b18      	ldr	r3, [pc, #96]	; (800a3a4 <shci_user_evt_proc+0x98>)
 800a344:	69db      	ldr	r3, [r3, #28]
 800a346:	1d3a      	adds	r2, r7, #4
 800a348:	4610      	mov	r0, r2
 800a34a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a34c:	793a      	ldrb	r2, [r7, #4]
 800a34e:	4b14      	ldr	r3, [pc, #80]	; (800a3a0 <shci_user_evt_proc+0x94>)
 800a350:	701a      	strb	r2, [r3, #0]
 800a352:	e002      	b.n	800a35a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a354:	4b12      	ldr	r3, [pc, #72]	; (800a3a0 <shci_user_evt_proc+0x94>)
 800a356:	2201      	movs	r2, #1
 800a358:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a35a:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <shci_user_evt_proc+0x94>)
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d004      	beq.n	800a36c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	4618      	mov	r0, r3
 800a366:	f000 fa6d 	bl	800a844 <TL_MM_EvtDone>
 800a36a:	e004      	b.n	800a376 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	4619      	mov	r1, r3
 800a370:	480a      	ldr	r0, [pc, #40]	; (800a39c <shci_user_evt_proc+0x90>)
 800a372:	f000 fbad 	bl	800aad0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a376:	4809      	ldr	r0, [pc, #36]	; (800a39c <shci_user_evt_proc+0x90>)
 800a378:	f000 fb88 	bl	800aa8c <LST_is_empty>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d107      	bne.n	800a392 <shci_user_evt_proc+0x86>
 800a382:	4b07      	ldr	r3, [pc, #28]	; (800a3a0 <shci_user_evt_proc+0x94>)
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a38a:	4804      	ldr	r0, [pc, #16]	; (800a39c <shci_user_evt_proc+0x90>)
 800a38c:	f7f7 f949 	bl	8001622 <shci_notify_asynch_evt>
  }


  return;
 800a390:	bf00      	nop
 800a392:	bf00      	nop
}
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	200009d0 	.word	0x200009d0
 800a3a0:	200009e0 	.word	0x200009e0
 800a3a4:	2000207c 	.word	0x2000207c

0800a3a8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60ba      	str	r2, [r7, #8]
 800a3b0:	607b      	str	r3, [r7, #4]
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	81fb      	strh	r3, [r7, #14]
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a3ba:	2000      	movs	r0, #0
 800a3bc:	f000 f864 	bl	800a488 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a3c0:	4b16      	ldr	r3, [pc, #88]	; (800a41c <shci_send+0x74>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	89fa      	ldrh	r2, [r7, #14]
 800a3c6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a3ca:	4b14      	ldr	r3, [pc, #80]	; (800a41c <shci_send+0x74>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	7b7a      	ldrb	r2, [r7, #13]
 800a3d0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a3d2:	4b12      	ldr	r3, [pc, #72]	; (800a41c <shci_send+0x74>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	330c      	adds	r3, #12
 800a3d8:	7b7a      	ldrb	r2, [r7, #13]
 800a3da:	68b9      	ldr	r1, [r7, #8]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f002 fc31 	bl	800cc44 <memcpy>

  shciContext.io.Send(0,0);
 800a3e2:	4b0f      	ldr	r3, [pc, #60]	; (800a420 <shci_send+0x78>)
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a3ec:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a3f0:	f7f7 f92e 	bl	8001650 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f103 0008 	add.w	r0, r3, #8
 800a3fa:	4b08      	ldr	r3, [pc, #32]	; (800a41c <shci_send+0x74>)
 800a3fc:	6819      	ldr	r1, [r3, #0]
 800a3fe:	4b07      	ldr	r3, [pc, #28]	; (800a41c <shci_send+0x74>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	789b      	ldrb	r3, [r3, #2]
 800a404:	3303      	adds	r3, #3
 800a406:	461a      	mov	r2, r3
 800a408:	f002 fc1c 	bl	800cc44 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a40c:	2001      	movs	r0, #1
 800a40e:	f000 f83b 	bl	800a488 <Cmd_SetStatus>

  return;
 800a412:	bf00      	nop
}
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	200009dc 	.word	0x200009dc
 800a420:	2000207c 	.word	0x2000207c

0800a424 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a42c:	4a10      	ldr	r2, [pc, #64]	; (800a470 <TlInit+0x4c>)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a432:	4810      	ldr	r0, [pc, #64]	; (800a474 <TlInit+0x50>)
 800a434:	f000 fb1a 	bl	800aa6c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a438:	2001      	movs	r0, #1
 800a43a:	f000 f825 	bl	800a488 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a43e:	4b0e      	ldr	r3, [pc, #56]	; (800a478 <TlInit+0x54>)
 800a440:	2201      	movs	r2, #1
 800a442:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a444:	4b0d      	ldr	r3, [pc, #52]	; (800a47c <TlInit+0x58>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00c      	beq.n	800a466 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a450:	4b0b      	ldr	r3, [pc, #44]	; (800a480 <TlInit+0x5c>)
 800a452:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a454:	4b0b      	ldr	r3, [pc, #44]	; (800a484 <TlInit+0x60>)
 800a456:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a458:	4b08      	ldr	r3, [pc, #32]	; (800a47c <TlInit+0x58>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f107 020c 	add.w	r2, r7, #12
 800a460:	4610      	mov	r0, r2
 800a462:	4798      	blx	r3
  }

  return;
 800a464:	bf00      	nop
 800a466:	bf00      	nop
}
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	200009dc 	.word	0x200009dc
 800a474:	200009d0 	.word	0x200009d0
 800a478:	200009e0 	.word	0x200009e0
 800a47c:	2000207c 	.word	0x2000207c
 800a480:	0800a4d9 	.word	0x0800a4d9
 800a484:	0800a4f1 	.word	0x0800a4f1

0800a488 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	4603      	mov	r3, r0
 800a490:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10b      	bne.n	800a4b0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a498:	4b0d      	ldr	r3, [pc, #52]	; (800a4d0 <Cmd_SetStatus+0x48>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d003      	beq.n	800a4a8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <Cmd_SetStatus+0x48>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a4a8:	4b0a      	ldr	r3, [pc, #40]	; (800a4d4 <Cmd_SetStatus+0x4c>)
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a4ae:	e00b      	b.n	800a4c8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a4b0:	4b08      	ldr	r3, [pc, #32]	; (800a4d4 <Cmd_SetStatus+0x4c>)
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a4b6:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <Cmd_SetStatus+0x48>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d004      	beq.n	800a4c8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a4be:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <Cmd_SetStatus+0x48>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2001      	movs	r0, #1
 800a4c4:	4798      	blx	r3
  return;
 800a4c6:	bf00      	nop
 800a4c8:	bf00      	nop
}
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	2000209c 	.word	0x2000209c
 800a4d4:	200009d8 	.word	0x200009d8

0800a4d8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	f7f7 f8aa 	bl	800163a <shci_cmd_resp_release>

  return;
 800a4e6:	bf00      	nop
}
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
	...

0800a4f0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a4f8:	6879      	ldr	r1, [r7, #4]
 800a4fa:	4805      	ldr	r0, [pc, #20]	; (800a510 <TlUserEvtReceived+0x20>)
 800a4fc:	f000 fb0e 	bl	800ab1c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a500:	4803      	ldr	r0, [pc, #12]	; (800a510 <TlUserEvtReceived+0x20>)
 800a502:	f7f7 f88e 	bl	8001622 <shci_notify_asynch_evt>

  return;
 800a506:	bf00      	nop
}
 800a508:	3708      	adds	r7, #8
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	200009d0 	.word	0x200009d0

0800a514 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a05      	ldr	r2, [pc, #20]	; (800a534 <shci_register_io_bus+0x20>)
 800a520:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a04      	ldr	r2, [pc, #16]	; (800a538 <shci_register_io_bus+0x24>)
 800a526:	611a      	str	r2, [r3, #16]

  return;
 800a528:	bf00      	nop
}
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	0800a6d1 	.word	0x0800a6d1
 800a538:	0800a725 	.word	0x0800a725

0800a53c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a540:	f001 fffc 	bl	800c53c <HW_IPCC_Enable>

  return;
 800a544:	bf00      	nop
}
 800a546:	bd80      	pop	{r7, pc}

0800a548 <TL_Init>:


void TL_Init( void )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a54c:	4b10      	ldr	r3, [pc, #64]	; (800a590 <TL_Init+0x48>)
 800a54e:	4a11      	ldr	r2, [pc, #68]	; (800a594 <TL_Init+0x4c>)
 800a550:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a552:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <TL_Init+0x48>)
 800a554:	4a10      	ldr	r2, [pc, #64]	; (800a598 <TL_Init+0x50>)
 800a556:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a558:	4b0d      	ldr	r3, [pc, #52]	; (800a590 <TL_Init+0x48>)
 800a55a:	4a10      	ldr	r2, [pc, #64]	; (800a59c <TL_Init+0x54>)
 800a55c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a55e:	4b0c      	ldr	r3, [pc, #48]	; (800a590 <TL_Init+0x48>)
 800a560:	4a0f      	ldr	r2, [pc, #60]	; (800a5a0 <TL_Init+0x58>)
 800a562:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <TL_Init+0x48>)
 800a566:	4a0f      	ldr	r2, [pc, #60]	; (800a5a4 <TL_Init+0x5c>)
 800a568:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a56a:	4b09      	ldr	r3, [pc, #36]	; (800a590 <TL_Init+0x48>)
 800a56c:	4a0e      	ldr	r2, [pc, #56]	; (800a5a8 <TL_Init+0x60>)
 800a56e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a570:	4b07      	ldr	r3, [pc, #28]	; (800a590 <TL_Init+0x48>)
 800a572:	4a0e      	ldr	r2, [pc, #56]	; (800a5ac <TL_Init+0x64>)
 800a574:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a576:	4b06      	ldr	r3, [pc, #24]	; (800a590 <TL_Init+0x48>)
 800a578:	4a0d      	ldr	r2, [pc, #52]	; (800a5b0 <TL_Init+0x68>)
 800a57a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a57c:	4b04      	ldr	r3, [pc, #16]	; (800a590 <TL_Init+0x48>)
 800a57e:	4a0d      	ldr	r2, [pc, #52]	; (800a5b4 <TL_Init+0x6c>)
 800a580:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a582:	4b03      	ldr	r3, [pc, #12]	; (800a590 <TL_Init+0x48>)
 800a584:	4a0c      	ldr	r2, [pc, #48]	; (800a5b8 <TL_Init+0x70>)
 800a586:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a588:	f001 ffec 	bl	800c564 <HW_IPCC_Init>

  return;
 800a58c:	bf00      	nop
}
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20030000 	.word	0x20030000
 800a594:	20030028 	.word	0x20030028
 800a598:	20030048 	.word	0x20030048
 800a59c:	20030058 	.word	0x20030058
 800a5a0:	20030068 	.word	0x20030068
 800a5a4:	20030070 	.word	0x20030070
 800a5a8:	20030078 	.word	0x20030078
 800a5ac:	20030080 	.word	0x20030080
 800a5b0:	2003009c 	.word	0x2003009c
 800a5b4:	200300a0 	.word	0x200300a0
 800a5b8:	200300ac 	.word	0x200300ac

0800a5bc <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a5c8:	4811      	ldr	r0, [pc, #68]	; (800a610 <TL_BLE_Init+0x54>)
 800a5ca:	f000 fa4f 	bl	800aa6c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a5ce:	4b11      	ldr	r3, [pc, #68]	; (800a614 <TL_BLE_Init+0x58>)
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	68da      	ldr	r2, [r3, #12]
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	4a0c      	ldr	r2, [pc, #48]	; (800a618 <TL_BLE_Init+0x5c>)
 800a5e8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	4a08      	ldr	r2, [pc, #32]	; (800a610 <TL_BLE_Init+0x54>)
 800a5ee:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a5f0:	f001 ffce 	bl	800c590 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a08      	ldr	r2, [pc, #32]	; (800a61c <TL_BLE_Init+0x60>)
 800a5fa:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	4a07      	ldr	r2, [pc, #28]	; (800a620 <TL_BLE_Init+0x64>)
 800a602:	6013      	str	r3, [r2, #0]

  return 0;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	200300c8 	.word	0x200300c8
 800a614:	20030000 	.word	0x20030000
 800a618:	20000988 	.word	0x20000988
 800a61c:	200020a8 	.word	0x200020a8
 800a620:	200020ac 	.word	0x200020ac

0800a624 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a630:	4b09      	ldr	r3, [pc, #36]	; (800a658 <TL_BLE_SendCmd+0x34>)
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2201      	movs	r2, #1
 800a638:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a63a:	4b07      	ldr	r3, [pc, #28]	; (800a658 <TL_BLE_SendCmd+0x34>)
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4619      	mov	r1, r3
 800a642:	2001      	movs	r0, #1
 800a644:	f000 f96c 	bl	800a920 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a648:	f001 ffac 	bl	800c5a4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20030000 	.word	0x20030000

0800a65c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a662:	e01c      	b.n	800a69e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a664:	1d3b      	adds	r3, r7, #4
 800a666:	4619      	mov	r1, r3
 800a668:	4812      	ldr	r0, [pc, #72]	; (800a6b4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a66a:	f000 fa9e 	bl	800abaa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	7a5b      	ldrb	r3, [r3, #9]
 800a672:	2b0f      	cmp	r3, #15
 800a674:	d003      	beq.n	800a67e <HW_IPCC_BLE_RxEvtNot+0x22>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	7a5b      	ldrb	r3, [r3, #9]
 800a67a:	2b0e      	cmp	r3, #14
 800a67c:	d105      	bne.n	800a68a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4619      	mov	r1, r3
 800a682:	2002      	movs	r0, #2
 800a684:	f000 f94c 	bl	800a920 <OutputDbgTrace>
 800a688:	e004      	b.n	800a694 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4619      	mov	r1, r3
 800a68e:	2003      	movs	r0, #3
 800a690:	f000 f946 	bl	800a920 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a694:	4b08      	ldr	r3, [pc, #32]	; (800a6b8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	4610      	mov	r0, r2
 800a69c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a69e:	4805      	ldr	r0, [pc, #20]	; (800a6b4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a6a0:	f000 f9f4 	bl	800aa8c <LST_is_empty>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d0dc      	beq.n	800a664 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a6aa:	bf00      	nop
}
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	200300c8 	.word	0x200300c8
 800a6b8:	200020a8 	.word	0x200020a8

0800a6bc <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a6c0:	4b02      	ldr	r3, [pc, #8]	; (800a6cc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4798      	blx	r3

  return;
 800a6c6:	bf00      	nop
}
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	200020ac 	.word	0x200020ac

0800a6d0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a6dc:	480d      	ldr	r0, [pc, #52]	; (800a714 <TL_SYS_Init+0x44>)
 800a6de:	f000 f9c5 	bl	800aa6c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	; (800a718 <TL_SYS_Init+0x48>)
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	689a      	ldr	r2, [r3, #8]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	4a08      	ldr	r2, [pc, #32]	; (800a714 <TL_SYS_Init+0x44>)
 800a6f4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a6f6:	f001 ff77 	bl	800c5e8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a07      	ldr	r2, [pc, #28]	; (800a71c <TL_SYS_Init+0x4c>)
 800a700:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	4a06      	ldr	r2, [pc, #24]	; (800a720 <TL_SYS_Init+0x50>)
 800a708:	6013      	str	r3, [r2, #0]

  return 0;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	200300d0 	.word	0x200300d0
 800a718:	20030000 	.word	0x20030000
 800a71c:	200020b0 	.word	0x200020b0
 800a720:	200020b4 	.word	0x200020b4

0800a724 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a730:	4b09      	ldr	r3, [pc, #36]	; (800a758 <TL_SYS_SendCmd+0x34>)
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2210      	movs	r2, #16
 800a738:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a73a:	4b07      	ldr	r3, [pc, #28]	; (800a758 <TL_SYS_SendCmd+0x34>)
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4619      	mov	r1, r3
 800a742:	2004      	movs	r0, #4
 800a744:	f000 f8ec 	bl	800a920 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a748:	f001 ff58 	bl	800c5fc <HW_IPCC_SYS_SendCmd>

  return 0;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20030000 	.word	0x20030000

0800a75c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a760:	4b07      	ldr	r3, [pc, #28]	; (800a780 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4619      	mov	r1, r3
 800a768:	2005      	movs	r0, #5
 800a76a:	f000 f8d9 	bl	800a920 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a76e:	4b05      	ldr	r3, [pc, #20]	; (800a784 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a03      	ldr	r2, [pc, #12]	; (800a780 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a774:	68d2      	ldr	r2, [r2, #12]
 800a776:	6812      	ldr	r2, [r2, #0]
 800a778:	4610      	mov	r0, r2
 800a77a:	4798      	blx	r3

  return;
 800a77c:	bf00      	nop
}
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	20030000 	.word	0x20030000
 800a784:	200020b0 	.word	0x200020b0

0800a788 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a78e:	e00e      	b.n	800a7ae <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a790:	1d3b      	adds	r3, r7, #4
 800a792:	4619      	mov	r1, r3
 800a794:	480b      	ldr	r0, [pc, #44]	; (800a7c4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a796:	f000 fa08 	bl	800abaa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4619      	mov	r1, r3
 800a79e:	2006      	movs	r0, #6
 800a7a0:	f000 f8be 	bl	800a920 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a7a4:	4b08      	ldr	r3, [pc, #32]	; (800a7c8 <HW_IPCC_SYS_EvtNot+0x40>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a7ae:	4805      	ldr	r0, [pc, #20]	; (800a7c4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a7b0:	f000 f96c 	bl	800aa8c <LST_is_empty>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0ea      	beq.n	800a790 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a7ba:	bf00      	nop
}
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	200300d0 	.word	0x200300d0
 800a7c8:	200020b4 	.word	0x200020b4

0800a7cc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a7d4:	4817      	ldr	r0, [pc, #92]	; (800a834 <TL_MM_Init+0x68>)
 800a7d6:	f000 f949 	bl	800aa6c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a7da:	4817      	ldr	r0, [pc, #92]	; (800a838 <TL_MM_Init+0x6c>)
 800a7dc:	f000 f946 	bl	800aa6c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a7e0:	4b16      	ldr	r3, [pc, #88]	; (800a83c <TL_MM_Init+0x70>)
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	4a16      	ldr	r2, [pc, #88]	; (800a840 <TL_MM_Init+0x74>)
 800a7e6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a7e8:	4b15      	ldr	r3, [pc, #84]	; (800a840 <TL_MM_Init+0x74>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	6892      	ldr	r2, [r2, #8]
 800a7f0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a7f2:	4b13      	ldr	r3, [pc, #76]	; (800a840 <TL_MM_Init+0x74>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	68d2      	ldr	r2, [r2, #12]
 800a7fa:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a7fc:	4b10      	ldr	r3, [pc, #64]	; (800a840 <TL_MM_Init+0x74>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a0c      	ldr	r2, [pc, #48]	; (800a834 <TL_MM_Init+0x68>)
 800a802:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a804:	4b0e      	ldr	r3, [pc, #56]	; (800a840 <TL_MM_Init+0x74>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	6812      	ldr	r2, [r2, #0]
 800a80c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a80e:	4b0c      	ldr	r3, [pc, #48]	; (800a840 <TL_MM_Init+0x74>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	6852      	ldr	r2, [r2, #4]
 800a816:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a818:	4b09      	ldr	r3, [pc, #36]	; (800a840 <TL_MM_Init+0x74>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	6912      	ldr	r2, [r2, #16]
 800a820:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a822:	4b07      	ldr	r3, [pc, #28]	; (800a840 <TL_MM_Init+0x74>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	6952      	ldr	r2, [r2, #20]
 800a82a:	619a      	str	r2, [r3, #24]

  return;
 800a82c:	bf00      	nop
}
 800a82e:	3708      	adds	r7, #8
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	200300b8 	.word	0x200300b8
 800a838:	200020a0 	.word	0x200020a0
 800a83c:	20030000 	.word	0x20030000
 800a840:	200020b8 	.word	0x200020b8

0800a844 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a84c:	6879      	ldr	r1, [r7, #4]
 800a84e:	4807      	ldr	r0, [pc, #28]	; (800a86c <TL_MM_EvtDone+0x28>)
 800a850:	f000 f964 	bl	800ab1c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a854:	6879      	ldr	r1, [r7, #4]
 800a856:	2000      	movs	r0, #0
 800a858:	f000 f862 	bl	800a920 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a85c:	4804      	ldr	r0, [pc, #16]	; (800a870 <TL_MM_EvtDone+0x2c>)
 800a85e:	f001 fef3 	bl	800c648 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a862:	bf00      	nop
}
 800a864:	3708      	adds	r7, #8
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	200020a0 	.word	0x200020a0
 800a870:	0800a875 	.word	0x0800a875

0800a874 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b082      	sub	sp, #8
 800a878:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a87a:	e00c      	b.n	800a896 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a87c:	1d3b      	adds	r3, r7, #4
 800a87e:	4619      	mov	r1, r3
 800a880:	480a      	ldr	r0, [pc, #40]	; (800a8ac <SendFreeBuf+0x38>)
 800a882:	f000 f992 	bl	800abaa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a886:	4b0a      	ldr	r3, [pc, #40]	; (800a8b0 <SendFreeBuf+0x3c>)
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	4611      	mov	r1, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f000 f943 	bl	800ab1c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a896:	4805      	ldr	r0, [pc, #20]	; (800a8ac <SendFreeBuf+0x38>)
 800a898:	f000 f8f8 	bl	800aa8c <LST_is_empty>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0ec      	beq.n	800a87c <SendFreeBuf+0x8>
  }

  return;
 800a8a2:	bf00      	nop
}
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	200020a0 	.word	0x200020a0
 800a8b0:	20030000 	.word	0x20030000

0800a8b4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a8b8:	4805      	ldr	r0, [pc, #20]	; (800a8d0 <TL_TRACES_Init+0x1c>)
 800a8ba:	f000 f8d7 	bl	800aa6c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a8be:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <TL_TRACES_Init+0x20>)
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	4a03      	ldr	r2, [pc, #12]	; (800a8d0 <TL_TRACES_Init+0x1c>)
 800a8c4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a8c6:	f001 fef5 	bl	800c6b4 <HW_IPCC_TRACES_Init>

  return;
 800a8ca:	bf00      	nop
}
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	200300c0 	.word	0x200300c0
 800a8d4:	20030000 	.word	0x20030000

0800a8d8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a8de:	e008      	b.n	800a8f2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a8e0:	1d3b      	adds	r3, r7, #4
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4808      	ldr	r0, [pc, #32]	; (800a908 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a8e6:	f000 f960 	bl	800abaa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 f80d 	bl	800a90c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a8f2:	4805      	ldr	r0, [pc, #20]	; (800a908 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a8f4:	f000 f8ca 	bl	800aa8c <LST_is_empty>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d0f0      	beq.n	800a8e0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a8fe:	bf00      	nop
}
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	200300c0 	.word	0x200300c0

0800a90c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	4603      	mov	r3, r0
 800a928:	6039      	str	r1, [r7, #0]
 800a92a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a92c:	79fb      	ldrb	r3, [r7, #7]
 800a92e:	2b06      	cmp	r3, #6
 800a930:	d845      	bhi.n	800a9be <OutputDbgTrace+0x9e>
 800a932:	a201      	add	r2, pc, #4	; (adr r2, 800a938 <OutputDbgTrace+0x18>)
 800a934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a938:	0800a955 	.word	0x0800a955
 800a93c:	0800a979 	.word	0x0800a979
 800a940:	0800a97f 	.word	0x0800a97f
 800a944:	0800a993 	.word	0x0800a993
 800a948:	0800a99f 	.word	0x0800a99f
 800a94c:	0800a9a5 	.word	0x0800a9a5
 800a950:	0800a9b3 	.word	0x0800a9b3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	7a5b      	ldrb	r3, [r3, #9]
 800a95c:	2bff      	cmp	r3, #255	; 0xff
 800a95e:	d005      	beq.n	800a96c <OutputDbgTrace+0x4c>
 800a960:	2bff      	cmp	r3, #255	; 0xff
 800a962:	dc05      	bgt.n	800a970 <OutputDbgTrace+0x50>
 800a964:	2b0e      	cmp	r3, #14
 800a966:	d005      	beq.n	800a974 <OutputDbgTrace+0x54>
 800a968:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a96a:	e001      	b.n	800a970 <OutputDbgTrace+0x50>
          break;
 800a96c:	bf00      	nop
 800a96e:	e027      	b.n	800a9c0 <OutputDbgTrace+0xa0>
          break;
 800a970:	bf00      	nop
 800a972:	e025      	b.n	800a9c0 <OutputDbgTrace+0xa0>
          break;
 800a974:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a976:	e023      	b.n	800a9c0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a97c:	e020      	b.n	800a9c0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	7a5b      	ldrb	r3, [r3, #9]
 800a986:	2b0e      	cmp	r3, #14
 800a988:	d001      	beq.n	800a98e <OutputDbgTrace+0x6e>
 800a98a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a98c:	e000      	b.n	800a990 <OutputDbgTrace+0x70>
          break;
 800a98e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a990:	e016      	b.n	800a9c0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	7a5b      	ldrb	r3, [r3, #9]
 800a99a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a99c:	e010      	b.n	800a9c0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a9a2:	e00d      	b.n	800a9c0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	7a5b      	ldrb	r3, [r3, #9]
 800a9ac:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a9ae:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a9b0:	e006      	b.n	800a9c0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	7a5b      	ldrb	r3, [r3, #9]
 800a9ba:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a9bc:	e000      	b.n	800a9c0 <OutputDbgTrace+0xa0>

    default:
      break;
 800a9be:	bf00      	nop
  }

  return;
 800a9c0:	bf00      	nop
}
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800a9d8:	215c      	movs	r1, #92	; 0x5c
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f002 fb3f 	bl	800d05e <strrchr>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d007      	beq.n	800a9f6 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800a9e6:	215c      	movs	r1, #92	; 0x5c
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f002 fb38 	bl	800d05e <strrchr>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	60fb      	str	r3, [r7, #12]
 800a9f4:	e00d      	b.n	800aa12 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800a9f6:	212f      	movs	r1, #47	; 0x2f
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f002 fb30 	bl	800d05e <strrchr>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d006      	beq.n	800aa12 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800aa04:	212f      	movs	r1, #47	; 0x2f
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f002 fb29 	bl	800d05e <strrchr>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	3301      	adds	r3, #1
 800aa10:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800aa12:	68fb      	ldr	r3, [r7, #12]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800aa26:	4b0f      	ldr	r3, [pc, #60]	; (800aa64 <OTP_Read+0x48>)
 800aa28:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800aa2a:	e002      	b.n	800aa32 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	3b08      	subs	r3, #8
 800aa30:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3307      	adds	r3, #7
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	79fa      	ldrb	r2, [r7, #7]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d003      	beq.n	800aa46 <OTP_Read+0x2a>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4a09      	ldr	r2, [pc, #36]	; (800aa68 <OTP_Read+0x4c>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d1f2      	bne.n	800aa2c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	3307      	adds	r3, #7
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	79fa      	ldrb	r2, [r7, #7]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d001      	beq.n	800aa56 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800aa56:	68fb      	ldr	r3, [r7, #12]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr
 800aa64:	1fff73f8 	.word	0x1fff73f8
 800aa68:	1fff7000 	.word	0x1fff7000

0800aa6c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	605a      	str	r2, [r3, #4]
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b087      	sub	sp, #28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa94:	f3ef 8310 	mrs	r3, PRIMASK
 800aa98:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aa9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa9e:	b672      	cpsid	i
}
 800aaa0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d102      	bne.n	800aab2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800aaac:	2301      	movs	r3, #1
 800aaae:	75fb      	strb	r3, [r7, #23]
 800aab0:	e001      	b.n	800aab6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800aab2:	2300      	movs	r3, #0
 800aab4:	75fb      	strb	r3, [r7, #23]
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f383 8810 	msr	PRIMASK, r3
}
 800aac0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	371c      	adds	r7, #28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aada:	f3ef 8310 	mrs	r3, PRIMASK
 800aade:	60fb      	str	r3, [r7, #12]
  return(result);
 800aae0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aae2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aae4:	b672      	cpsid	i
}
 800aae6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	683a      	ldr	r2, [r7, #0]
 800aafa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	683a      	ldr	r2, [r7, #0]
 800ab02:	605a      	str	r2, [r3, #4]
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f383 8810 	msr	PRIMASK, r3
}
 800ab0e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ab10:	bf00      	nop
 800ab12:	371c      	adds	r7, #28
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab26:	f3ef 8310 	mrs	r3, PRIMASK
 800ab2a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab30:	b672      	cpsid	i
}
 800ab32:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	683a      	ldr	r2, [r7, #0]
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	f383 8810 	msr	PRIMASK, r3
}
 800ab5a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ab5c:	bf00      	nop
 800ab5e:	371c      	adds	r7, #28
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b087      	sub	sp, #28
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab70:	f3ef 8310 	mrs	r3, PRIMASK
 800ab74:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab76:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab7a:	b672      	cpsid	i
}
 800ab7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	6812      	ldr	r2, [r2, #0]
 800ab86:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	6852      	ldr	r2, [r2, #4]
 800ab90:	605a      	str	r2, [r3, #4]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	f383 8810 	msr	PRIMASK, r3
}
 800ab9c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ab9e:	bf00      	nop
 800aba0:	371c      	adds	r7, #28
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b086      	sub	sp, #24
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abb4:	f3ef 8310 	mrs	r3, PRIMASK
 800abb8:	60fb      	str	r3, [r7, #12]
  return(result);
 800abba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800abbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abbe:	b672      	cpsid	i
}
 800abc0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff ffca 	bl	800ab68 <LST_remove_node>
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f383 8810 	msr	PRIMASK, r3
}
 800abde:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800abe0:	bf00      	nop
 800abe2:	3718      	adds	r7, #24
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800abe8:	b480      	push	{r7}
 800abea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800abec:	4b03      	ldr	r3, [pc, #12]	; (800abfc <LL_FLASH_GetUDN+0x14>)
 800abee:	681b      	ldr	r3, [r3, #0]
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	1fff7580 	.word	0x1fff7580

0800ac00 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800ac00:	b480      	push	{r7}
 800ac02:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800ac04:	4b03      	ldr	r3, [pc, #12]	; (800ac14 <LL_FLASH_GetDeviceID+0x14>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	b2db      	uxtb	r3, r3
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	1fff7584 	.word	0x1fff7584

0800ac18 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800ac1c:	4b03      	ldr	r3, [pc, #12]	; (800ac2c <LL_FLASH_GetSTCompanyID+0x14>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	0a1b      	lsrs	r3, r3, #8
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	1fff7584 	.word	0x1fff7584

0800ac30 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800ac30:	b5b0      	push	{r4, r5, r7, lr}
 800ac32:	b090      	sub	sp, #64	; 0x40
 800ac34:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ac36:	2392      	movs	r3, #146	; 0x92
 800ac38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800ac3c:	4b45      	ldr	r3, [pc, #276]	; (800ad54 <APP_BLE_Init+0x124>)
 800ac3e:	1d3c      	adds	r4, r7, #4
 800ac40:	461d      	mov	r5, r3
 800ac42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ac52:	c403      	stmia	r4!, {r0, r1}
 800ac54:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800ac56:	f000 fb37 	bl	800b2c8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800ac5a:	2101      	movs	r1, #1
 800ac5c:	2002      	movs	r0, #2
 800ac5e:	f001 fd51 	bl	800c704 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800ac62:	4a3d      	ldr	r2, [pc, #244]	; (800ad58 <APP_BLE_Init+0x128>)
 800ac64:	2100      	movs	r1, #0
 800ac66:	2002      	movs	r0, #2
 800ac68:	f001 fe78 	bl	800c95c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800ac6c:	1d3b      	adds	r3, r7, #4
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7ff f8a8 	bl	8009dc4 <SHCI_C2_BLE_Init>
 800ac74:	4603      	mov	r3, r0
 800ac76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800ac7a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d012      	beq.n	800aca8 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800ac82:	4836      	ldr	r0, [pc, #216]	; (800ad5c <APP_BLE_Init+0x12c>)
 800ac84:	f7ff fea2 	bl	800a9cc <DbgTraceGetFileName>
 800ac88:	4601      	mov	r1, r0
 800ac8a:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800ac8e:	4a34      	ldr	r2, [pc, #208]	; (800ad60 <APP_BLE_Init+0x130>)
 800ac90:	4834      	ldr	r0, [pc, #208]	; (800ad64 <APP_BLE_Init+0x134>)
 800ac92:	f002 f8cd 	bl	800ce30 <iprintf>
 800ac96:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	4832      	ldr	r0, [pc, #200]	; (800ad68 <APP_BLE_Init+0x138>)
 800ac9e:	f002 f8c7 	bl	800ce30 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800aca2:	f7f7 fd69 	bl	8002778 <Error_Handler>
 800aca6:	e00c      	b.n	800acc2 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800aca8:	482c      	ldr	r0, [pc, #176]	; (800ad5c <APP_BLE_Init+0x12c>)
 800acaa:	f7ff fe8f 	bl	800a9cc <DbgTraceGetFileName>
 800acae:	4601      	mov	r1, r0
 800acb0:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800acb4:	4a2a      	ldr	r2, [pc, #168]	; (800ad60 <APP_BLE_Init+0x130>)
 800acb6:	482b      	ldr	r0, [pc, #172]	; (800ad64 <APP_BLE_Init+0x134>)
 800acb8:	f002 f8ba 	bl	800ce30 <iprintf>
 800acbc:	482b      	ldr	r0, [pc, #172]	; (800ad6c <APP_BLE_Init+0x13c>)
 800acbe:	f002 f8b7 	bl	800ce30 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800acc2:	f000 fb17 	bl	800b2f4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800acc6:	f7fe ffd7 	bl	8009c78 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800acca:	4b29      	ldr	r3, [pc, #164]	; (800ad70 <APP_BLE_Init+0x140>)
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800acd2:	4b27      	ldr	r3, [pc, #156]	; (800ad70 <APP_BLE_Init+0x140>)
 800acd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acd8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800acda:	4a26      	ldr	r2, [pc, #152]	; (800ad74 <APP_BLE_Init+0x144>)
 800acdc:	2100      	movs	r1, #0
 800acde:	2001      	movs	r0, #1
 800ace0:	f001 fe3c 	bl	800c95c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800ace4:	2006      	movs	r0, #6
 800ace6:	f7fe fe3a 	bl	800995e <aci_hal_set_radio_activity_mask>
 800acea:	4603      	mov	r3, r0
 800acec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800acf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d010      	beq.n	800ad1a <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800acf8:	4818      	ldr	r0, [pc, #96]	; (800ad5c <APP_BLE_Init+0x12c>)
 800acfa:	f7ff fe67 	bl	800a9cc <DbgTraceGetFileName>
 800acfe:	4601      	mov	r1, r0
 800ad00:	f44f 73b9 	mov.w	r3, #370	; 0x172
 800ad04:	4a16      	ldr	r2, [pc, #88]	; (800ad60 <APP_BLE_Init+0x130>)
 800ad06:	4817      	ldr	r0, [pc, #92]	; (800ad64 <APP_BLE_Init+0x134>)
 800ad08:	f002 f892 	bl	800ce30 <iprintf>
 800ad0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ad10:	4619      	mov	r1, r3
 800ad12:	4819      	ldr	r0, [pc, #100]	; (800ad78 <APP_BLE_Init+0x148>)
 800ad14:	f002 f88c 	bl	800ce30 <iprintf>
 800ad18:	e00c      	b.n	800ad34 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800ad1a:	4810      	ldr	r0, [pc, #64]	; (800ad5c <APP_BLE_Init+0x12c>)
 800ad1c:	f7ff fe56 	bl	800a9cc <DbgTraceGetFileName>
 800ad20:	4601      	mov	r1, r0
 800ad22:	f44f 73bb 	mov.w	r3, #374	; 0x176
 800ad26:	4a0e      	ldr	r2, [pc, #56]	; (800ad60 <APP_BLE_Init+0x130>)
 800ad28:	480e      	ldr	r0, [pc, #56]	; (800ad64 <APP_BLE_Init+0x134>)
 800ad2a:	f002 f881 	bl	800ce30 <iprintf>
 800ad2e:	4813      	ldr	r0, [pc, #76]	; (800ad7c <APP_BLE_Init+0x14c>)
 800ad30:	f002 f87e 	bl	800ce30 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800ad34:	f001 f8ee 	bl	800bf14 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800ad38:	4b0d      	ldr	r3, [pc, #52]	; (800ad70 <APP_BLE_Init+0x140>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800ad3e:	4b0c      	ldr	r3, [pc, #48]	; (800ad70 <APP_BLE_Init+0x140>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800ad44:	2001      	movs	r0, #1
 800ad46:	f000 fd69 	bl	800b81c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800ad4a:	bf00      	nop
}
 800ad4c:	3740      	adds	r7, #64	; 0x40
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bdb0      	pop	{r4, r5, r7, pc}
 800ad52:	bf00      	nop
 800ad54:	0800edc4 	.word	0x0800edc4
 800ad58:	08009fe1 	.word	0x08009fe1
 800ad5c:	0800ecb8 	.word	0x0800ecb8
 800ad60:	0800fdb8 	.word	0x0800fdb8
 800ad64:	0800ecd4 	.word	0x0800ecd4
 800ad68:	0800ece8 	.word	0x0800ece8
 800ad6c:	0800ed20 	.word	0x0800ed20
 800ad70:	200020c4 	.word	0x200020c4
 800ad74:	0800b9a1 	.word	0x0800b9a1
 800ad78:	0800ed48 	.word	0x0800ed48
 800ad7c:	0800ed8c 	.word	0x0800ed8c

0800ad80 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800ad80:	b5b0      	push	{r4, r5, r7, lr}
 800ad82:	b08e      	sub	sp, #56	; 0x38
 800ad84:	af04      	add	r7, sp, #16
 800ad86:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800ad88:	2392      	movs	r3, #146	; 0x92
 800ad8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	3301      	adds	r3, #1
 800ad92:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800ad94:	6a3b      	ldr	r3, [r7, #32]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	2bff      	cmp	r3, #255	; 0xff
 800ad9a:	f000 811d 	beq.w	800afd8 <SVCCTL_App_Notification+0x258>
 800ad9e:	2bff      	cmp	r3, #255	; 0xff
 800ada0:	f300 8269 	bgt.w	800b276 <SVCCTL_App_Notification+0x4f6>
 800ada4:	2b05      	cmp	r3, #5
 800ada6:	d002      	beq.n	800adae <SVCCTL_App_Notification+0x2e>
 800ada8:	2b3e      	cmp	r3, #62	; 0x3e
 800adaa:	d042      	beq.n	800ae32 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800adac:	e263      	b.n	800b276 <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	3302      	adds	r3, #2
 800adb2:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800adba:	b29a      	uxth	r2, r3
 800adbc:	4bb1      	ldr	r3, [pc, #708]	; (800b084 <SVCCTL_App_Notification+0x304>)
 800adbe:	8adb      	ldrh	r3, [r3, #22]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d128      	bne.n	800ae16 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800adc4:	4baf      	ldr	r3, [pc, #700]	; (800b084 <SVCCTL_App_Notification+0x304>)
 800adc6:	2200      	movs	r2, #0
 800adc8:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800adca:	4bae      	ldr	r3, [pc, #696]	; (800b084 <SVCCTL_App_Notification+0x304>)
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800add2:	48ad      	ldr	r0, [pc, #692]	; (800b088 <SVCCTL_App_Notification+0x308>)
 800add4:	f7ff fdfa 	bl	800a9cc <DbgTraceGetFileName>
 800add8:	4601      	mov	r1, r0
 800adda:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 800adde:	4aab      	ldr	r2, [pc, #684]	; (800b08c <SVCCTL_App_Notification+0x30c>)
 800ade0:	48ab      	ldr	r0, [pc, #684]	; (800b090 <SVCCTL_App_Notification+0x310>)
 800ade2:	f002 f825 	bl	800ce30 <iprintf>
 800ade6:	48ab      	ldr	r0, [pc, #684]	; (800b094 <SVCCTL_App_Notification+0x314>)
 800ade8:	f002 f8be 	bl	800cf68 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800adec:	48a6      	ldr	r0, [pc, #664]	; (800b088 <SVCCTL_App_Notification+0x308>)
 800adee:	f7ff fded 	bl	800a9cc <DbgTraceGetFileName>
 800adf2:	4601      	mov	r1, r0
 800adf4:	f240 13bb 	movw	r3, #443	; 0x1bb
 800adf8:	4aa4      	ldr	r2, [pc, #656]	; (800b08c <SVCCTL_App_Notification+0x30c>)
 800adfa:	48a5      	ldr	r0, [pc, #660]	; (800b090 <SVCCTL_App_Notification+0x310>)
 800adfc:	f002 f818 	bl	800ce30 <iprintf>
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	4619      	mov	r1, r3
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	78db      	ldrb	r3, [r3, #3]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	48a1      	ldr	r0, [pc, #644]	; (800b098 <SVCCTL_App_Notification+0x318>)
 800ae12:	f002 f80d 	bl	800ce30 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800ae16:	2001      	movs	r0, #1
 800ae18:	f000 fd00 	bl	800b81c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800ae1c:	4b9f      	ldr	r3, [pc, #636]	; (800b09c <SVCCTL_App_Notification+0x31c>)
 800ae1e:	2201      	movs	r2, #1
 800ae20:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ae22:	4b98      	ldr	r3, [pc, #608]	; (800b084 <SVCCTL_App_Notification+0x304>)
 800ae24:	8ada      	ldrh	r2, [r3, #22]
 800ae26:	4b9d      	ldr	r3, [pc, #628]	; (800b09c <SVCCTL_App_Notification+0x31c>)
 800ae28:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800ae2a:	489c      	ldr	r0, [pc, #624]	; (800b09c <SVCCTL_App_Notification+0x31c>)
 800ae2c:	f001 f85e 	bl	800beec <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ae30:	e224      	b.n	800b27c <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	3302      	adds	r3, #2
 800ae36:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d042      	beq.n	800aec6 <SVCCTL_App_Notification+0x146>
 800ae40:	2b03      	cmp	r3, #3
 800ae42:	f040 80c7 	bne.w	800afd4 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800ae4c:	488e      	ldr	r0, [pc, #568]	; (800b088 <SVCCTL_App_Notification+0x308>)
 800ae4e:	f7ff fdbd 	bl	800a9cc <DbgTraceGetFileName>
 800ae52:	4601      	mov	r1, r0
 800ae54:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800ae58:	4a8c      	ldr	r2, [pc, #560]	; (800b08c <SVCCTL_App_Notification+0x30c>)
 800ae5a:	488d      	ldr	r0, [pc, #564]	; (800b090 <SVCCTL_App_Notification+0x310>)
 800ae5c:	f001 ffe8 	bl	800ce30 <iprintf>
 800ae60:	488f      	ldr	r0, [pc, #572]	; (800b0a0 <SVCCTL_App_Notification+0x320>)
 800ae62:	f002 f881 	bl	800cf68 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ae66:	4888      	ldr	r0, [pc, #544]	; (800b088 <SVCCTL_App_Notification+0x308>)
 800ae68:	f7ff fdb0 	bl	800a9cc <DbgTraceGetFileName>
 800ae6c:	4601      	mov	r1, r0
 800ae6e:	f240 13e3 	movw	r3, #483	; 0x1e3
 800ae72:	4a86      	ldr	r2, [pc, #536]	; (800b08c <SVCCTL_App_Notification+0x30c>)
 800ae74:	4886      	ldr	r0, [pc, #536]	; (800b090 <SVCCTL_App_Notification+0x310>)
 800ae76:	f001 ffdb 	bl	800ce30 <iprintf>
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7f5 fb26 	bl	80004d4 <__aeabi_i2d>
 800ae88:	f04f 0200 	mov.w	r2, #0
 800ae8c:	4b85      	ldr	r3, [pc, #532]	; (800b0a4 <SVCCTL_App_Notification+0x324>)
 800ae8e:	f7f5 fb8b 	bl	80005a8 <__aeabi_dmul>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4610      	mov	r0, r2
 800ae98:	4619      	mov	r1, r3
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	461c      	mov	r4, r3
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	461a      	mov	r2, r3
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	005b      	lsls	r3, r3, #1
 800aeb6:	9301      	str	r3, [sp, #4]
 800aeb8:	9400      	str	r4, [sp, #0]
 800aeba:	4602      	mov	r2, r0
 800aebc:	460b      	mov	r3, r1
 800aebe:	487a      	ldr	r0, [pc, #488]	; (800b0a8 <SVCCTL_App_Notification+0x328>)
 800aec0:	f001 ffb6 	bl	800ce30 <iprintf>
          break;
 800aec4:	e087      	b.n	800afd6 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	3301      	adds	r3, #1
 800aeca:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800aecc:	486e      	ldr	r0, [pc, #440]	; (800b088 <SVCCTL_App_Notification+0x308>)
 800aece:	f7ff fd7d 	bl	800a9cc <DbgTraceGetFileName>
 800aed2:	4601      	mov	r1, r0
 800aed4:	f240 13f5 	movw	r3, #501	; 0x1f5
 800aed8:	4a6c      	ldr	r2, [pc, #432]	; (800b08c <SVCCTL_App_Notification+0x30c>)
 800aeda:	486d      	ldr	r0, [pc, #436]	; (800b090 <SVCCTL_App_Notification+0x310>)
 800aedc:	f001 ffa8 	bl	800ce30 <iprintf>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	4619      	mov	r1, r3
 800aeea:	4870      	ldr	r0, [pc, #448]	; (800b0ac <SVCCTL_App_Notification+0x32c>)
 800aeec:	f001 ffa0 	bl	800ce30 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800aef0:	4865      	ldr	r0, [pc, #404]	; (800b088 <SVCCTL_App_Notification+0x308>)
 800aef2:	f7ff fd6b 	bl	800a9cc <DbgTraceGetFileName>
 800aef6:	4601      	mov	r1, r0
 800aef8:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 800aefc:	4a63      	ldr	r2, [pc, #396]	; (800b08c <SVCCTL_App_Notification+0x30c>)
 800aefe:	4864      	ldr	r0, [pc, #400]	; (800b090 <SVCCTL_App_Notification+0x310>)
 800af00:	f001 ff96 	bl	800ce30 <iprintf>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	7a9b      	ldrb	r3, [r3, #10]
 800af08:	4618      	mov	r0, r3
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	7a5b      	ldrb	r3, [r3, #9]
 800af0e:	461c      	mov	r4, r3
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	7a1b      	ldrb	r3, [r3, #8]
 800af14:	461d      	mov	r5, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	79db      	ldrb	r3, [r3, #7]
 800af1a:	461a      	mov	r2, r3
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	799b      	ldrb	r3, [r3, #6]
 800af20:	4619      	mov	r1, r3
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	795b      	ldrb	r3, [r3, #5]
 800af26:	9302      	str	r3, [sp, #8]
 800af28:	9101      	str	r1, [sp, #4]
 800af2a:	9200      	str	r2, [sp, #0]
 800af2c:	462b      	mov	r3, r5
 800af2e:	4622      	mov	r2, r4
 800af30:	4601      	mov	r1, r0
 800af32:	485f      	ldr	r0, [pc, #380]	; (800b0b0 <SVCCTL_App_Notification+0x330>)
 800af34:	f001 ff7c 	bl	800ce30 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800af38:	4853      	ldr	r0, [pc, #332]	; (800b088 <SVCCTL_App_Notification+0x308>)
 800af3a:	f7ff fd47 	bl	800a9cc <DbgTraceGetFileName>
 800af3e:	4601      	mov	r1, r0
 800af40:	f240 13fd 	movw	r3, #509	; 0x1fd
 800af44:	4a51      	ldr	r2, [pc, #324]	; (800b08c <SVCCTL_App_Notification+0x30c>)
 800af46:	4852      	ldr	r0, [pc, #328]	; (800b090 <SVCCTL_App_Notification+0x310>)
 800af48:	f001 ff72 	bl	800ce30 <iprintf>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800af52:	b29b      	uxth	r3, r3
 800af54:	4618      	mov	r0, r3
 800af56:	f7f5 fabd 	bl	80004d4 <__aeabi_i2d>
 800af5a:	f04f 0200 	mov.w	r2, #0
 800af5e:	4b51      	ldr	r3, [pc, #324]	; (800b0a4 <SVCCTL_App_Notification+0x324>)
 800af60:	f7f5 fb22 	bl	80005a8 <__aeabi_dmul>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	4610      	mov	r0, r2
 800af6a:	4619      	mov	r1, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800af72:	b29b      	uxth	r3, r3
 800af74:	461c      	mov	r4, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	461a      	mov	r2, r3
 800af80:	4613      	mov	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	005b      	lsls	r3, r3, #1
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	9400      	str	r4, [sp, #0]
 800af8c:	4602      	mov	r2, r0
 800af8e:	460b      	mov	r3, r1
 800af90:	4845      	ldr	r0, [pc, #276]	; (800b0a8 <SVCCTL_App_Notification+0x328>)
 800af92:	f001 ff4d 	bl	800ce30 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800af96:	4b3b      	ldr	r3, [pc, #236]	; (800b084 <SVCCTL_App_Notification+0x304>)
 800af98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af9c:	2b04      	cmp	r3, #4
 800af9e:	d104      	bne.n	800afaa <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800afa0:	4b38      	ldr	r3, [pc, #224]	; (800b084 <SVCCTL_App_Notification+0x304>)
 800afa2:	2206      	movs	r2, #6
 800afa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800afa8:	e003      	b.n	800afb2 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800afaa:	4b36      	ldr	r3, [pc, #216]	; (800b084 <SVCCTL_App_Notification+0x304>)
 800afac:	2205      	movs	r2, #5
 800afae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800afb8:	b29a      	uxth	r2, r3
 800afba:	4b32      	ldr	r3, [pc, #200]	; (800b084 <SVCCTL_App_Notification+0x304>)
 800afbc:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800afbe:	4b37      	ldr	r3, [pc, #220]	; (800b09c <SVCCTL_App_Notification+0x31c>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800afc4:	4b2f      	ldr	r3, [pc, #188]	; (800b084 <SVCCTL_App_Notification+0x304>)
 800afc6:	8ada      	ldrh	r2, [r3, #22]
 800afc8:	4b34      	ldr	r3, [pc, #208]	; (800b09c <SVCCTL_App_Notification+0x31c>)
 800afca:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800afcc:	4833      	ldr	r0, [pc, #204]	; (800b09c <SVCCTL_App_Notification+0x31c>)
 800afce:	f000 ff8d 	bl	800beec <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800afd2:	e000      	b.n	800afd6 <SVCCTL_App_Notification+0x256>
          break;
 800afd4:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800afd6:	e151      	b.n	800b27c <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800afd8:	6a3b      	ldr	r3, [r7, #32]
 800afda:	3302      	adds	r3, #2
 800afdc:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afe8:	f000 8141 	beq.w	800b26e <SVCCTL_App_Notification+0x4ee>
 800afec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aff0:	f300 8143 	bgt.w	800b27a <SVCCTL_App_Notification+0x4fa>
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	f000 813c 	beq.w	800b272 <SVCCTL_App_Notification+0x4f2>
 800affa:	2b04      	cmp	r3, #4
 800affc:	f2c0 813d 	blt.w	800b27a <SVCCTL_App_Notification+0x4fa>
 800b000:	f240 420a 	movw	r2, #1034	; 0x40a
 800b004:	4293      	cmp	r3, r2
 800b006:	f300 8138 	bgt.w	800b27a <SVCCTL_App_Notification+0x4fa>
 800b00a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b00e:	f340 8134 	ble.w	800b27a <SVCCTL_App_Notification+0x4fa>
 800b012:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800b016:	2b09      	cmp	r3, #9
 800b018:	f200 812f 	bhi.w	800b27a <SVCCTL_App_Notification+0x4fa>
 800b01c:	a201      	add	r2, pc, #4	; (adr r2, 800b024 <SVCCTL_App_Notification+0x2a4>)
 800b01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b022:	bf00      	nop
 800b024:	0800b1e9 	.word	0x0800b1e9
 800b028:	0800b0bd 	.word	0x0800b0bd
 800b02c:	0800b27b 	.word	0x0800b27b
 800b030:	0800b27b 	.word	0x0800b27b
 800b034:	0800b27b 	.word	0x0800b27b
 800b038:	0800b27b 	.word	0x0800b27b
 800b03c:	0800b04d 	.word	0x0800b04d
 800b040:	0800b27b 	.word	0x0800b27b
 800b044:	0800b12f 	.word	0x0800b12f
 800b048:	0800b069 	.word	0x0800b069
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800b04c:	480e      	ldr	r0, [pc, #56]	; (800b088 <SVCCTL_App_Notification+0x308>)
 800b04e:	f7ff fcbd 	bl	800a9cc <DbgTraceGetFileName>
 800b052:	4601      	mov	r1, r0
 800b054:	f240 233f 	movw	r3, #575	; 0x23f
 800b058:	4a0c      	ldr	r2, [pc, #48]	; (800b08c <SVCCTL_App_Notification+0x30c>)
 800b05a:	480d      	ldr	r0, [pc, #52]	; (800b090 <SVCCTL_App_Notification+0x310>)
 800b05c:	f001 fee8 	bl	800ce30 <iprintf>
 800b060:	4814      	ldr	r0, [pc, #80]	; (800b0b4 <SVCCTL_App_Notification+0x334>)
 800b062:	f001 fee5 	bl	800ce30 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b066:	e105      	b.n	800b274 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800b068:	4807      	ldr	r0, [pc, #28]	; (800b088 <SVCCTL_App_Notification+0x308>)
 800b06a:	f7ff fcaf 	bl	800a9cc <DbgTraceGetFileName>
 800b06e:	4601      	mov	r1, r0
 800b070:	f240 234f 	movw	r3, #591	; 0x24f
 800b074:	4a05      	ldr	r2, [pc, #20]	; (800b08c <SVCCTL_App_Notification+0x30c>)
 800b076:	4806      	ldr	r0, [pc, #24]	; (800b090 <SVCCTL_App_Notification+0x310>)
 800b078:	f001 feda 	bl	800ce30 <iprintf>
 800b07c:	480e      	ldr	r0, [pc, #56]	; (800b0b8 <SVCCTL_App_Notification+0x338>)
 800b07e:	f001 ff73 	bl	800cf68 <puts>
          break;
 800b082:	e0f7      	b.n	800b274 <SVCCTL_App_Notification+0x4f4>
 800b084:	200020c4 	.word	0x200020c4
 800b088:	0800ecb8 	.word	0x0800ecb8
 800b08c:	0800fdc8 	.word	0x0800fdc8
 800b090:	0800ecd4 	.word	0x0800ecd4
 800b094:	0800ee00 	.word	0x0800ee00
 800b098:	0800ee2c 	.word	0x0800ee2c
 800b09c:	20002148 	.word	0x20002148
 800b0a0:	0800ee68 	.word	0x0800ee68
 800b0a4:	3ff40000 	.word	0x3ff40000
 800b0a8:	0800ee9c 	.word	0x0800ee9c
 800b0ac:	0800ef08 	.word	0x0800ef08
 800b0b0:	0800ef50 	.word	0x0800ef50
 800b0b4:	0800efa0 	.word	0x0800efa0
 800b0b8:	0800efc8 	.word	0x0800efc8
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800b0bc:	4872      	ldr	r0, [pc, #456]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b0be:	f7ff fc85 	bl	800a9cc <DbgTraceGetFileName>
 800b0c2:	4601      	mov	r1, r0
 800b0c4:	f240 2356 	movw	r3, #598	; 0x256
 800b0c8:	4a70      	ldr	r2, [pc, #448]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b0ca:	4871      	ldr	r0, [pc, #452]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b0cc:	f001 feb0 	bl	800ce30 <iprintf>
 800b0d0:	4870      	ldr	r0, [pc, #448]	; (800b294 <SVCCTL_App_Notification+0x514>)
 800b0d2:	f001 ff49 	bl	800cf68 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800b0d6:	4b70      	ldr	r3, [pc, #448]	; (800b298 <SVCCTL_App_Notification+0x518>)
 800b0d8:	8adb      	ldrh	r3, [r3, #22]
 800b0da:	4970      	ldr	r1, [pc, #448]	; (800b29c <SVCCTL_App_Notification+0x51c>)
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fd fe95 	bl	8008e0c <aci_gap_pass_key_resp>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800b0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d010      	beq.n	800b112 <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800b0f0:	4865      	ldr	r0, [pc, #404]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b0f2:	f7ff fc6b 	bl	800a9cc <DbgTraceGetFileName>
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	f240 235b 	movw	r3, #603	; 0x25b
 800b0fc:	4a63      	ldr	r2, [pc, #396]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b0fe:	4864      	ldr	r0, [pc, #400]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b100:	f001 fe96 	bl	800ce30 <iprintf>
 800b104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b108:	4619      	mov	r1, r3
 800b10a:	4865      	ldr	r0, [pc, #404]	; (800b2a0 <SVCCTL_App_Notification+0x520>)
 800b10c:	f001 fe90 	bl	800ce30 <iprintf>
          break;
 800b110:	e0b0      	b.n	800b274 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800b112:	485d      	ldr	r0, [pc, #372]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b114:	f7ff fc5a 	bl	800a9cc <DbgTraceGetFileName>
 800b118:	4601      	mov	r1, r0
 800b11a:	f240 235f 	movw	r3, #607	; 0x25f
 800b11e:	4a5b      	ldr	r2, [pc, #364]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b120:	485b      	ldr	r0, [pc, #364]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b122:	f001 fe85 	bl	800ce30 <iprintf>
 800b126:	485f      	ldr	r0, [pc, #380]	; (800b2a4 <SVCCTL_App_Notification+0x524>)
 800b128:	f001 ff1e 	bl	800cf68 <puts>
          break;
 800b12c:	e0a2      	b.n	800b274 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800b12e:	4856      	ldr	r0, [pc, #344]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b130:	f7ff fc4c 	bl	800a9cc <DbgTraceGetFileName>
 800b134:	4601      	mov	r1, r0
 800b136:	f240 2367 	movw	r3, #615	; 0x267
 800b13a:	4a54      	ldr	r2, [pc, #336]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b13c:	4854      	ldr	r0, [pc, #336]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b13e:	f001 fe77 	bl	800ce30 <iprintf>
 800b142:	4859      	ldr	r0, [pc, #356]	; (800b2a8 <SVCCTL_App_Notification+0x528>)
 800b144:	f001 ff10 	bl	800cf68 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800b148:	484f      	ldr	r0, [pc, #316]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b14a:	f7ff fc3f 	bl	800a9cc <DbgTraceGetFileName>
 800b14e:	4601      	mov	r1, r0
 800b150:	f44f 731a 	mov.w	r3, #616	; 0x268
 800b154:	4a4d      	ldr	r2, [pc, #308]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b156:	484e      	ldr	r0, [pc, #312]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b158:	f001 fe6a 	bl	800ce30 <iprintf>
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	3302      	adds	r3, #2
 800b160:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800b164:	4619      	mov	r1, r3
 800b166:	4851      	ldr	r0, [pc, #324]	; (800b2ac <SVCCTL_App_Notification+0x52c>)
 800b168:	f001 fe62 	bl	800ce30 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800b16c:	4846      	ldr	r0, [pc, #280]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b16e:	f7ff fc2d 	bl	800a9cc <DbgTraceGetFileName>
 800b172:	4601      	mov	r1, r0
 800b174:	f240 236a 	movw	r3, #618	; 0x26a
 800b178:	4a44      	ldr	r2, [pc, #272]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b17a:	4845      	ldr	r0, [pc, #276]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b17c:	f001 fe58 	bl	800ce30 <iprintf>
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	3302      	adds	r3, #2
 800b184:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800b188:	4619      	mov	r1, r3
 800b18a:	4849      	ldr	r0, [pc, #292]	; (800b2b0 <SVCCTL_App_Notification+0x530>)
 800b18c:	f001 fe50 	bl	800ce30 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800b190:	4b41      	ldr	r3, [pc, #260]	; (800b298 <SVCCTL_App_Notification+0x518>)
 800b192:	8adb      	ldrh	r3, [r3, #22]
 800b194:	2101      	movs	r1, #1
 800b196:	4618      	mov	r0, r3
 800b198:	f7fd ffe2 	bl	8009160 <aci_gap_numeric_comparison_value_confirm_yesno>
 800b19c:	4603      	mov	r3, r0
 800b19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800b1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d010      	beq.n	800b1cc <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800b1aa:	4837      	ldr	r0, [pc, #220]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b1ac:	f7ff fc0e 	bl	800a9cc <DbgTraceGetFileName>
 800b1b0:	4601      	mov	r1, r0
 800b1b2:	f240 236f 	movw	r3, #623	; 0x26f
 800b1b6:	4a35      	ldr	r2, [pc, #212]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b1b8:	4835      	ldr	r0, [pc, #212]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b1ba:	f001 fe39 	bl	800ce30 <iprintf>
 800b1be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	483b      	ldr	r0, [pc, #236]	; (800b2b4 <SVCCTL_App_Notification+0x534>)
 800b1c6:	f001 fe33 	bl	800ce30 <iprintf>
          break;
 800b1ca:	e053      	b.n	800b274 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800b1cc:	482e      	ldr	r0, [pc, #184]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b1ce:	f7ff fbfd 	bl	800a9cc <DbgTraceGetFileName>
 800b1d2:	4601      	mov	r1, r0
 800b1d4:	f240 2373 	movw	r3, #627	; 0x273
 800b1d8:	4a2c      	ldr	r2, [pc, #176]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b1da:	482d      	ldr	r0, [pc, #180]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b1dc:	f001 fe28 	bl	800ce30 <iprintf>
 800b1e0:	4835      	ldr	r0, [pc, #212]	; (800b2b8 <SVCCTL_App_Notification+0x538>)
 800b1e2:	f001 fec1 	bl	800cf68 <puts>
          break;
 800b1e6:	e045      	b.n	800b274 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	3302      	adds	r3, #2
 800b1ec:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800b1ee:	4826      	ldr	r0, [pc, #152]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b1f0:	f7ff fbec 	bl	800a9cc <DbgTraceGetFileName>
 800b1f4:	4601      	mov	r1, r0
 800b1f6:	f240 237d 	movw	r3, #637	; 0x27d
 800b1fa:	4a24      	ldr	r2, [pc, #144]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b1fc:	4824      	ldr	r0, [pc, #144]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b1fe:	f001 fe17 	bl	800ce30 <iprintf>
 800b202:	482e      	ldr	r0, [pc, #184]	; (800b2bc <SVCCTL_App_Notification+0x53c>)
 800b204:	f001 feb0 	bl	800cf68 <puts>
          if (p_pairing_complete->Status != 0)
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	789b      	ldrb	r3, [r3, #2]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d013      	beq.n	800b238 <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800b210:	481d      	ldr	r0, [pc, #116]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b212:	f7ff fbdb 	bl	800a9cc <DbgTraceGetFileName>
 800b216:	4601      	mov	r1, r0
 800b218:	f44f 7320 	mov.w	r3, #640	; 0x280
 800b21c:	4a1b      	ldr	r2, [pc, #108]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b21e:	481c      	ldr	r0, [pc, #112]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b220:	f001 fe06 	bl	800ce30 <iprintf>
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	789b      	ldrb	r3, [r3, #2]
 800b228:	4619      	mov	r1, r3
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	78db      	ldrb	r3, [r3, #3]
 800b22e:	461a      	mov	r2, r3
 800b230:	4823      	ldr	r0, [pc, #140]	; (800b2c0 <SVCCTL_App_Notification+0x540>)
 800b232:	f001 fdfd 	bl	800ce30 <iprintf>
 800b236:	e00c      	b.n	800b252 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800b238:	4813      	ldr	r0, [pc, #76]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b23a:	f7ff fbc7 	bl	800a9cc <DbgTraceGetFileName>
 800b23e:	4601      	mov	r1, r0
 800b240:	f44f 7321 	mov.w	r3, #644	; 0x284
 800b244:	4a11      	ldr	r2, [pc, #68]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b246:	4812      	ldr	r0, [pc, #72]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b248:	f001 fdf2 	bl	800ce30 <iprintf>
 800b24c:	481d      	ldr	r0, [pc, #116]	; (800b2c4 <SVCCTL_App_Notification+0x544>)
 800b24e:	f001 fe8b 	bl	800cf68 <puts>
          APP_DBG_MSG("\n");
 800b252:	480d      	ldr	r0, [pc, #52]	; (800b288 <SVCCTL_App_Notification+0x508>)
 800b254:	f7ff fbba 	bl	800a9cc <DbgTraceGetFileName>
 800b258:	4601      	mov	r1, r0
 800b25a:	f240 2386 	movw	r3, #646	; 0x286
 800b25e:	4a0b      	ldr	r2, [pc, #44]	; (800b28c <SVCCTL_App_Notification+0x50c>)
 800b260:	480b      	ldr	r0, [pc, #44]	; (800b290 <SVCCTL_App_Notification+0x510>)
 800b262:	f001 fde5 	bl	800ce30 <iprintf>
 800b266:	200a      	movs	r0, #10
 800b268:	f001 fdfa 	bl	800ce60 <putchar>
          break;
 800b26c:	e002      	b.n	800b274 <SVCCTL_App_Notification+0x4f4>
          break;
 800b26e:	bf00      	nop
 800b270:	e003      	b.n	800b27a <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b272:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b274:	e001      	b.n	800b27a <SVCCTL_App_Notification+0x4fa>
      break;
 800b276:	bf00      	nop
 800b278:	e000      	b.n	800b27c <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b27a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b27c:	2301      	movs	r3, #1
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3728      	adds	r7, #40	; 0x28
 800b282:	46bd      	mov	sp, r7
 800b284:	bdb0      	pop	{r4, r5, r7, pc}
 800b286:	bf00      	nop
 800b288:	0800ecb8 	.word	0x0800ecb8
 800b28c:	0800fdc8 	.word	0x0800fdc8
 800b290:	0800ecd4 	.word	0x0800ecd4
 800b294:	0800eff8 	.word	0x0800eff8
 800b298:	200020c4 	.word	0x200020c4
 800b29c:	0001b207 	.word	0x0001b207
 800b2a0:	0800f020 	.word	0x0800f020
 800b2a4:	0800f054 	.word	0x0800f054
 800b2a8:	0800f07c 	.word	0x0800f07c
 800b2ac:	0800f0b0 	.word	0x0800f0b0
 800b2b0:	0800f0cc 	.word	0x0800f0cc
 800b2b4:	0800f0e4 	.word	0x0800f0e4
 800b2b8:	0800f134 	.word	0x0800f134
 800b2bc:	0800f17c 	.word	0x0800f17c
 800b2c0:	0800f1a8 	.word	0x0800f1a8
 800b2c4:	0800f1e4 	.word	0x0800f1e4

0800b2c8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b2ce:	4b06      	ldr	r3, [pc, #24]	; (800b2e8 <Ble_Tl_Init+0x20>)
 800b2d0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b2d2:	4b06      	ldr	r3, [pc, #24]	; (800b2ec <Ble_Tl_Init+0x24>)
 800b2d4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b2d6:	463b      	mov	r3, r7
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4805      	ldr	r0, [pc, #20]	; (800b2f0 <Ble_Tl_Init+0x28>)
 800b2dc:	f7fe fe64 	bl	8009fa8 <hci_init>

  return;
 800b2e0:	bf00      	nop
}
 800b2e2:	3708      	adds	r7, #8
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	200300d8 	.word	0x200300d8
 800b2ec:	0800babd 	.word	0x0800babd
 800b2f0:	0800ba85 	.word	0x0800ba85

0800b2f4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2f6:	b08d      	sub	sp, #52	; 0x34
 800b2f8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b2fe:	2392      	movs	r3, #146	; 0x92
 800b300:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800b302:	48a3      	ldr	r0, [pc, #652]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b304:	f7ff fb62 	bl	800a9cc <DbgTraceGetFileName>
 800b308:	4601      	mov	r1, r0
 800b30a:	f240 23c6 	movw	r3, #710	; 0x2c6
 800b30e:	4aa1      	ldr	r2, [pc, #644]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b310:	48a1      	ldr	r0, [pc, #644]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b312:	f001 fd8d 	bl	800ce30 <iprintf>
 800b316:	48a1      	ldr	r0, [pc, #644]	; (800b59c <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800b318:	f001 fe26 	bl	800cf68 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b31c:	f7fe fb73 	bl	8009a06 <hci_reset>
 800b320:	4603      	mov	r3, r0
 800b322:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b324:	7dfb      	ldrb	r3, [r7, #23]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00f      	beq.n	800b34a <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800b32a:	4899      	ldr	r0, [pc, #612]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b32c:	f7ff fb4e 	bl	800a9cc <DbgTraceGetFileName>
 800b330:	4601      	mov	r1, r0
 800b332:	f240 23cf 	movw	r3, #719	; 0x2cf
 800b336:	4a97      	ldr	r2, [pc, #604]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b338:	4897      	ldr	r0, [pc, #604]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b33a:	f001 fd79 	bl	800ce30 <iprintf>
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	4619      	mov	r1, r3
 800b342:	4897      	ldr	r0, [pc, #604]	; (800b5a0 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800b344:	f001 fd74 	bl	800ce30 <iprintf>
 800b348:	e00c      	b.n	800b364 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800b34a:	4891      	ldr	r0, [pc, #580]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b34c:	f7ff fb3e 	bl	800a9cc <DbgTraceGetFileName>
 800b350:	4601      	mov	r1, r0
 800b352:	f240 23d3 	movw	r3, #723	; 0x2d3
 800b356:	4a8f      	ldr	r2, [pc, #572]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b358:	488f      	ldr	r0, [pc, #572]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b35a:	f001 fd69 	bl	800ce30 <iprintf>
 800b35e:	4891      	ldr	r0, [pc, #580]	; (800b5a4 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800b360:	f001 fe02 	bl	800cf68 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b364:	f000 fad8 	bl	800b918 <BleGetBdAddress>
 800b368:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	2106      	movs	r1, #6
 800b36e:	2000      	movs	r0, #0
 800b370:	f7fe fa09 	bl	8009786 <aci_hal_write_config_data>
 800b374:	4603      	mov	r3, r0
 800b376:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00f      	beq.n	800b39e <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800b37e:	4884      	ldr	r0, [pc, #528]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b380:	f7ff fb24 	bl	800a9cc <DbgTraceGetFileName>
 800b384:	4601      	mov	r1, r0
 800b386:	f240 23dd 	movw	r3, #733	; 0x2dd
 800b38a:	4a82      	ldr	r2, [pc, #520]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b38c:	4882      	ldr	r0, [pc, #520]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b38e:	f001 fd4f 	bl	800ce30 <iprintf>
 800b392:	7dfb      	ldrb	r3, [r7, #23]
 800b394:	4619      	mov	r1, r3
 800b396:	4884      	ldr	r0, [pc, #528]	; (800b5a8 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800b398:	f001 fd4a 	bl	800ce30 <iprintf>
 800b39c:	e035      	b.n	800b40a <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800b39e:	487c      	ldr	r0, [pc, #496]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b3a0:	f7ff fb14 	bl	800a9cc <DbgTraceGetFileName>
 800b3a4:	4601      	mov	r1, r0
 800b3a6:	f240 23e1 	movw	r3, #737	; 0x2e1
 800b3aa:	4a7a      	ldr	r2, [pc, #488]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b3ac:	487a      	ldr	r0, [pc, #488]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b3ae:	f001 fd3f 	bl	800ce30 <iprintf>
 800b3b2:	487e      	ldr	r0, [pc, #504]	; (800b5ac <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800b3b4:	f001 fdd8 	bl	800cf68 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800b3b8:	4875      	ldr	r0, [pc, #468]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b3ba:	f7ff fb07 	bl	800a9cc <DbgTraceGetFileName>
 800b3be:	4601      	mov	r1, r0
 800b3c0:	f240 23e2 	movw	r3, #738	; 0x2e2
 800b3c4:	4a73      	ldr	r2, [pc, #460]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b3c6:	4874      	ldr	r0, [pc, #464]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b3c8:	f001 fd32 	bl	800ce30 <iprintf>
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	3305      	adds	r3, #5
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	461c      	mov	r4, r3
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	3303      	adds	r3, #3
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	461d      	mov	r5, r3
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	3302      	adds	r3, #2
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	9302      	str	r3, [sp, #8]
 800b3fa:	9101      	str	r1, [sp, #4]
 800b3fc:	9200      	str	r2, [sp, #0]
 800b3fe:	462b      	mov	r3, r5
 800b400:	4622      	mov	r2, r4
 800b402:	4601      	mov	r1, r0
 800b404:	486a      	ldr	r0, [pc, #424]	; (800b5b0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800b406:	f001 fd13 	bl	800ce30 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b40a:	4a6a      	ldr	r2, [pc, #424]	; (800b5b4 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800b40c:	2110      	movs	r1, #16
 800b40e:	2018      	movs	r0, #24
 800b410:	f7fe f9b9 	bl	8009786 <aci_hal_write_config_data>
 800b414:	4603      	mov	r3, r0
 800b416:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00f      	beq.n	800b43e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800b41e:	485c      	ldr	r0, [pc, #368]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b420:	f7ff fad4 	bl	800a9cc <DbgTraceGetFileName>
 800b424:	4601      	mov	r1, r0
 800b426:	f44f 734b 	mov.w	r3, #812	; 0x32c
 800b42a:	4a5a      	ldr	r2, [pc, #360]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b42c:	485a      	ldr	r0, [pc, #360]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b42e:	f001 fcff 	bl	800ce30 <iprintf>
 800b432:	7dfb      	ldrb	r3, [r7, #23]
 800b434:	4619      	mov	r1, r3
 800b436:	4860      	ldr	r0, [pc, #384]	; (800b5b8 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800b438:	f001 fcfa 	bl	800ce30 <iprintf>
 800b43c:	e00c      	b.n	800b458 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800b43e:	4854      	ldr	r0, [pc, #336]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b440:	f7ff fac4 	bl	800a9cc <DbgTraceGetFileName>
 800b444:	4601      	mov	r1, r0
 800b446:	f44f 734c 	mov.w	r3, #816	; 0x330
 800b44a:	4a52      	ldr	r2, [pc, #328]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b44c:	4852      	ldr	r0, [pc, #328]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b44e:	f001 fcef 	bl	800ce30 <iprintf>
 800b452:	485a      	ldr	r0, [pc, #360]	; (800b5bc <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800b454:	f001 fd88 	bl	800cf68 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b458:	4a59      	ldr	r2, [pc, #356]	; (800b5c0 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800b45a:	2110      	movs	r1, #16
 800b45c:	2008      	movs	r0, #8
 800b45e:	f7fe f992 	bl	8009786 <aci_hal_write_config_data>
 800b462:	4603      	mov	r3, r0
 800b464:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b466:	7dfb      	ldrb	r3, [r7, #23]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00f      	beq.n	800b48c <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800b46c:	4848      	ldr	r0, [pc, #288]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b46e:	f7ff faad 	bl	800a9cc <DbgTraceGetFileName>
 800b472:	4601      	mov	r1, r0
 800b474:	f240 3339 	movw	r3, #825	; 0x339
 800b478:	4a46      	ldr	r2, [pc, #280]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b47a:	4847      	ldr	r0, [pc, #284]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b47c:	f001 fcd8 	bl	800ce30 <iprintf>
 800b480:	7dfb      	ldrb	r3, [r7, #23]
 800b482:	4619      	mov	r1, r3
 800b484:	484f      	ldr	r0, [pc, #316]	; (800b5c4 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800b486:	f001 fcd3 	bl	800ce30 <iprintf>
 800b48a:	e00c      	b.n	800b4a6 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800b48c:	4840      	ldr	r0, [pc, #256]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b48e:	f7ff fa9d 	bl	800a9cc <DbgTraceGetFileName>
 800b492:	4601      	mov	r1, r0
 800b494:	f240 333d 	movw	r3, #829	; 0x33d
 800b498:	4a3e      	ldr	r2, [pc, #248]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b49a:	483f      	ldr	r0, [pc, #252]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b49c:	f001 fcc8 	bl	800ce30 <iprintf>
 800b4a0:	4849      	ldr	r0, [pc, #292]	; (800b5c8 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800b4a2:	f001 fd61 	bl	800cf68 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b4a6:	2118      	movs	r1, #24
 800b4a8:	2001      	movs	r0, #1
 800b4aa:	f7fe f9f1 	bl	8009890 <aci_hal_set_tx_power_level>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b4b2:	7dfb      	ldrb	r3, [r7, #23]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00f      	beq.n	800b4d8 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800b4b8:	4835      	ldr	r0, [pc, #212]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b4ba:	f7ff fa87 	bl	800a9cc <DbgTraceGetFileName>
 800b4be:	4601      	mov	r1, r0
 800b4c0:	f240 3346 	movw	r3, #838	; 0x346
 800b4c4:	4a33      	ldr	r2, [pc, #204]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b4c6:	4834      	ldr	r0, [pc, #208]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b4c8:	f001 fcb2 	bl	800ce30 <iprintf>
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	483e      	ldr	r0, [pc, #248]	; (800b5cc <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800b4d2:	f001 fcad 	bl	800ce30 <iprintf>
 800b4d6:	e00c      	b.n	800b4f2 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800b4d8:	482d      	ldr	r0, [pc, #180]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b4da:	f7ff fa77 	bl	800a9cc <DbgTraceGetFileName>
 800b4de:	4601      	mov	r1, r0
 800b4e0:	f240 334a 	movw	r3, #842	; 0x34a
 800b4e4:	4a2b      	ldr	r2, [pc, #172]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b4e6:	482c      	ldr	r0, [pc, #176]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b4e8:	f001 fca2 	bl	800ce30 <iprintf>
 800b4ec:	4838      	ldr	r0, [pc, #224]	; (800b5d0 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800b4ee:	f001 fd3b 	bl	800cf68 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b4f2:	f7fd fe9c 	bl	800922e <aci_gatt_init>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d00f      	beq.n	800b520 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800b500:	4823      	ldr	r0, [pc, #140]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b502:	f7ff fa63 	bl	800a9cc <DbgTraceGetFileName>
 800b506:	4601      	mov	r1, r0
 800b508:	f240 3353 	movw	r3, #851	; 0x353
 800b50c:	4a21      	ldr	r2, [pc, #132]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b50e:	4822      	ldr	r0, [pc, #136]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b510:	f001 fc8e 	bl	800ce30 <iprintf>
 800b514:	7dfb      	ldrb	r3, [r7, #23]
 800b516:	4619      	mov	r1, r3
 800b518:	482e      	ldr	r0, [pc, #184]	; (800b5d4 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800b51a:	f001 fc89 	bl	800ce30 <iprintf>
 800b51e:	e00c      	b.n	800b53a <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800b520:	481b      	ldr	r0, [pc, #108]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b522:	f7ff fa53 	bl	800a9cc <DbgTraceGetFileName>
 800b526:	4601      	mov	r1, r0
 800b528:	f240 3357 	movw	r3, #855	; 0x357
 800b52c:	4a19      	ldr	r2, [pc, #100]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b52e:	481a      	ldr	r0, [pc, #104]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b530:	f001 fc7e 	bl	800ce30 <iprintf>
 800b534:	4828      	ldr	r0, [pc, #160]	; (800b5d8 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800b536:	f001 fd17 	bl	800cf68 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
 800b540:	f043 0301 	orr.w	r3, r3, #1
 800b544:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b546:	7bfb      	ldrb	r3, [r7, #15]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d069      	beq.n	800b620 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b54c:	4b23      	ldr	r3, [pc, #140]	; (800b5dc <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800b54e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b550:	1dba      	adds	r2, r7, #6
 800b552:	7bf8      	ldrb	r0, [r7, #15]
 800b554:	1cbb      	adds	r3, r7, #2
 800b556:	9301      	str	r3, [sp, #4]
 800b558:	1d3b      	adds	r3, r7, #4
 800b55a:	9300      	str	r3, [sp, #0]
 800b55c:	4613      	mov	r3, r2
 800b55e:	2205      	movs	r2, #5
 800b560:	2100      	movs	r1, #0
 800b562:	f7fd fcba 	bl	8008eda <aci_gap_init>
 800b566:	4603      	mov	r3, r0
 800b568:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800b56a:	7dfb      	ldrb	r3, [r7, #23]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d039      	beq.n	800b5e4 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800b570:	4807      	ldr	r0, [pc, #28]	; (800b590 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800b572:	f7ff fa2b 	bl	800a9cc <DbgTraceGetFileName>
 800b576:	4601      	mov	r1, r0
 800b578:	f240 3377 	movw	r3, #887	; 0x377
 800b57c:	4a05      	ldr	r2, [pc, #20]	; (800b594 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800b57e:	4806      	ldr	r0, [pc, #24]	; (800b598 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800b580:	f001 fc56 	bl	800ce30 <iprintf>
 800b584:	7dfb      	ldrb	r3, [r7, #23]
 800b586:	4619      	mov	r1, r3
 800b588:	4815      	ldr	r0, [pc, #84]	; (800b5e0 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800b58a:	f001 fc51 	bl	800ce30 <iprintf>
 800b58e:	e036      	b.n	800b5fe <Ble_Hci_Gap_Gatt_Init+0x30a>
 800b590:	0800ecb8 	.word	0x0800ecb8
 800b594:	0800fde0 	.word	0x0800fde0
 800b598:	0800ecd4 	.word	0x0800ecd4
 800b59c:	0800f1fc 	.word	0x0800f1fc
 800b5a0:	0800f228 	.word	0x0800f228
 800b5a4:	0800f258 	.word	0x0800f258
 800b5a8:	0800f278 	.word	0x0800f278
 800b5ac:	0800f2d4 	.word	0x0800f2d4
 800b5b0:	0800f320 	.word	0x0800f320
 800b5b4:	0800fd98 	.word	0x0800fd98
 800b5b8:	0800f35c 	.word	0x0800f35c
 800b5bc:	0800f3b4 	.word	0x0800f3b4
 800b5c0:	0800fda8 	.word	0x0800fda8
 800b5c4:	0800f3fc 	.word	0x0800f3fc
 800b5c8:	0800f454 	.word	0x0800f454
 800b5cc:	0800f49c 	.word	0x0800f49c
 800b5d0:	0800f4dc 	.word	0x0800f4dc
 800b5d4:	0800f50c 	.word	0x0800f50c
 800b5d8:	0800f540 	.word	0x0800f540
 800b5dc:	0800f564 	.word	0x0800f564
 800b5e0:	0800f56c 	.word	0x0800f56c
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800b5e4:	487e      	ldr	r0, [pc, #504]	; (800b7e0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b5e6:	f7ff f9f1 	bl	800a9cc <DbgTraceGetFileName>
 800b5ea:	4601      	mov	r1, r0
 800b5ec:	f240 337b 	movw	r3, #891	; 0x37b
 800b5f0:	4a7c      	ldr	r2, [pc, #496]	; (800b7e4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b5f2:	487d      	ldr	r0, [pc, #500]	; (800b7e8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b5f4:	f001 fc1c 	bl	800ce30 <iprintf>
 800b5f8:	487c      	ldr	r0, [pc, #496]	; (800b7ec <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800b5fa:	f001 fcb5 	bl	800cf68 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b5fe:	88fc      	ldrh	r4, [r7, #6]
 800b600:	88bd      	ldrh	r5, [r7, #4]
 800b602:	68b8      	ldr	r0, [r7, #8]
 800b604:	f7f4 fdbc 	bl	8000180 <strlen>
 800b608:	4603      	mov	r3, r0
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	4613      	mov	r3, r2
 800b612:	2200      	movs	r2, #0
 800b614:	4629      	mov	r1, r5
 800b616:	4620      	mov	r0, r4
 800b618:	f7fe f80c 	bl	8009634 <aci_gatt_update_char_value>
 800b61c:	4603      	mov	r3, r0
 800b61e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b620:	88f8      	ldrh	r0, [r7, #6]
 800b622:	8879      	ldrh	r1, [r7, #2]
 800b624:	463b      	mov	r3, r7
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	2302      	movs	r3, #2
 800b62a:	2200      	movs	r2, #0
 800b62c:	f7fe f802 	bl	8009634 <aci_gatt_update_char_value>
 800b630:	4603      	mov	r3, r0
 800b632:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b634:	2202      	movs	r2, #2
 800b636:	2102      	movs	r1, #2
 800b638:	2000      	movs	r0, #0
 800b63a:	f7fe fa08 	bl	8009a4e <hci_le_set_default_phy>
 800b63e:	4603      	mov	r3, r0
 800b640:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b642:	7dfb      	ldrb	r3, [r7, #23]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00f      	beq.n	800b668 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800b648:	4865      	ldr	r0, [pc, #404]	; (800b7e0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b64a:	f7ff f9bf 	bl	800a9cc <DbgTraceGetFileName>
 800b64e:	4601      	mov	r1, r0
 800b650:	f240 339d 	movw	r3, #925	; 0x39d
 800b654:	4a63      	ldr	r2, [pc, #396]	; (800b7e4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b656:	4864      	ldr	r0, [pc, #400]	; (800b7e8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b658:	f001 fbea 	bl	800ce30 <iprintf>
 800b65c:	7dfb      	ldrb	r3, [r7, #23]
 800b65e:	4619      	mov	r1, r3
 800b660:	4863      	ldr	r0, [pc, #396]	; (800b7f0 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800b662:	f001 fbe5 	bl	800ce30 <iprintf>
 800b666:	e00c      	b.n	800b682 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800b668:	485d      	ldr	r0, [pc, #372]	; (800b7e0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b66a:	f7ff f9af 	bl	800a9cc <DbgTraceGetFileName>
 800b66e:	4601      	mov	r1, r0
 800b670:	f240 33a1 	movw	r3, #929	; 0x3a1
 800b674:	4a5b      	ldr	r2, [pc, #364]	; (800b7e4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b676:	485c      	ldr	r0, [pc, #368]	; (800b7e8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b678:	f001 fbda 	bl	800ce30 <iprintf>
 800b67c:	485d      	ldr	r0, [pc, #372]	; (800b7f4 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800b67e:	f001 fc73 	bl	800cf68 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b682:	4b5d      	ldr	r3, [pc, #372]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b684:	2201      	movs	r2, #1
 800b686:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b688:	4b5b      	ldr	r3, [pc, #364]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7fd faa5 	bl	8008bdc <aci_gap_set_io_capability>
 800b692:	4603      	mov	r3, r0
 800b694:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800b696:	7dfb      	ldrb	r3, [r7, #23]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00f      	beq.n	800b6bc <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800b69c:	4850      	ldr	r0, [pc, #320]	; (800b7e0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b69e:	f7ff f995 	bl	800a9cc <DbgTraceGetFileName>
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	f240 33ab 	movw	r3, #939	; 0x3ab
 800b6a8:	4a4e      	ldr	r2, [pc, #312]	; (800b7e4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b6aa:	484f      	ldr	r0, [pc, #316]	; (800b7e8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b6ac:	f001 fbc0 	bl	800ce30 <iprintf>
 800b6b0:	7dfb      	ldrb	r3, [r7, #23]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4851      	ldr	r0, [pc, #324]	; (800b7fc <Ble_Hci_Gap_Gatt_Init+0x508>)
 800b6b6:	f001 fbbb 	bl	800ce30 <iprintf>
 800b6ba:	e00c      	b.n	800b6d6 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800b6bc:	4848      	ldr	r0, [pc, #288]	; (800b7e0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b6be:	f7ff f985 	bl	800a9cc <DbgTraceGetFileName>
 800b6c2:	4601      	mov	r1, r0
 800b6c4:	f240 33af 	movw	r3, #943	; 0x3af
 800b6c8:	4a46      	ldr	r2, [pc, #280]	; (800b7e4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b6ca:	4847      	ldr	r0, [pc, #284]	; (800b7e8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b6cc:	f001 fbb0 	bl	800ce30 <iprintf>
 800b6d0:	484b      	ldr	r0, [pc, #300]	; (800b800 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800b6d2:	f001 fc49 	bl	800cf68 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b6d6:	4b48      	ldr	r3, [pc, #288]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b6d8:	2201      	movs	r2, #1
 800b6da:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b6dc:	4b46      	ldr	r3, [pc, #280]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b6de:	2208      	movs	r2, #8
 800b6e0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b6e2:	4b45      	ldr	r3, [pc, #276]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b6e4:	2210      	movs	r2, #16
 800b6e6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b6e8:	4b43      	ldr	r3, [pc, #268]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b6ee:	4b42      	ldr	r3, [pc, #264]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b6f0:	4a44      	ldr	r2, [pc, #272]	; (800b804 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800b6f2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b6f4:	4b40      	ldr	r3, [pc, #256]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b6fa:	4b3f      	ldr	r3, [pc, #252]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b6fc:	789c      	ldrb	r4, [r3, #2]
 800b6fe:	4b3e      	ldr	r3, [pc, #248]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b700:	785d      	ldrb	r5, [r3, #1]
 800b702:	4b3d      	ldr	r3, [pc, #244]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b704:	791b      	ldrb	r3, [r3, #4]
 800b706:	4a3c      	ldr	r2, [pc, #240]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b708:	7952      	ldrb	r2, [r2, #5]
 800b70a:	493b      	ldr	r1, [pc, #236]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b70c:	78c9      	ldrb	r1, [r1, #3]
 800b70e:	483a      	ldr	r0, [pc, #232]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b710:	6880      	ldr	r0, [r0, #8]
 800b712:	2600      	movs	r6, #0
 800b714:	9604      	str	r6, [sp, #16]
 800b716:	9003      	str	r0, [sp, #12]
 800b718:	9102      	str	r1, [sp, #8]
 800b71a:	9201      	str	r2, [sp, #4]
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	2300      	movs	r3, #0
 800b720:	2201      	movs	r2, #1
 800b722:	4629      	mov	r1, r5
 800b724:	4620      	mov	r0, r4
 800b726:	f7fd faad 	bl	8008c84 <aci_gap_set_authentication_requirement>
 800b72a:	4603      	mov	r3, r0
 800b72c:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800b72e:	7dfb      	ldrb	r3, [r7, #23]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00f      	beq.n	800b754 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800b734:	482a      	ldr	r0, [pc, #168]	; (800b7e0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b736:	f7ff f949 	bl	800a9cc <DbgTraceGetFileName>
 800b73a:	4601      	mov	r1, r0
 800b73c:	f240 33ca 	movw	r3, #970	; 0x3ca
 800b740:	4a28      	ldr	r2, [pc, #160]	; (800b7e4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b742:	4829      	ldr	r0, [pc, #164]	; (800b7e8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b744:	f001 fb74 	bl	800ce30 <iprintf>
 800b748:	7dfb      	ldrb	r3, [r7, #23]
 800b74a:	4619      	mov	r1, r3
 800b74c:	482e      	ldr	r0, [pc, #184]	; (800b808 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800b74e:	f001 fb6f 	bl	800ce30 <iprintf>
 800b752:	e00c      	b.n	800b76e <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800b754:	4822      	ldr	r0, [pc, #136]	; (800b7e0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b756:	f7ff f939 	bl	800a9cc <DbgTraceGetFileName>
 800b75a:	4601      	mov	r1, r0
 800b75c:	f240 33ce 	movw	r3, #974	; 0x3ce
 800b760:	4a20      	ldr	r2, [pc, #128]	; (800b7e4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b762:	4821      	ldr	r0, [pc, #132]	; (800b7e8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b764:	f001 fb64 	bl	800ce30 <iprintf>
 800b768:	4828      	ldr	r0, [pc, #160]	; (800b80c <Ble_Hci_Gap_Gatt_Init+0x518>)
 800b76a:	f001 fbfd 	bl	800cf68 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b76e:	4b22      	ldr	r3, [pc, #136]	; (800b7f8 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800b770:	789b      	ldrb	r3, [r3, #2]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d023      	beq.n	800b7be <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800b776:	f7fd fccf 	bl	8009118 <aci_gap_configure_whitelist>
 800b77a:	4603      	mov	r3, r0
 800b77c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00f      	beq.n	800b7a4 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800b784:	4816      	ldr	r0, [pc, #88]	; (800b7e0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b786:	f7ff f921 	bl	800a9cc <DbgTraceGetFileName>
 800b78a:	4601      	mov	r1, r0
 800b78c:	f240 33d9 	movw	r3, #985	; 0x3d9
 800b790:	4a14      	ldr	r2, [pc, #80]	; (800b7e4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b792:	4815      	ldr	r0, [pc, #84]	; (800b7e8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b794:	f001 fb4c 	bl	800ce30 <iprintf>
 800b798:	7dfb      	ldrb	r3, [r7, #23]
 800b79a:	4619      	mov	r1, r3
 800b79c:	481c      	ldr	r0, [pc, #112]	; (800b810 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800b79e:	f001 fb47 	bl	800ce30 <iprintf>
 800b7a2:	e00c      	b.n	800b7be <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800b7a4:	480e      	ldr	r0, [pc, #56]	; (800b7e0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b7a6:	f7ff f911 	bl	800a9cc <DbgTraceGetFileName>
 800b7aa:	4601      	mov	r1, r0
 800b7ac:	f240 33dd 	movw	r3, #989	; 0x3dd
 800b7b0:	4a0c      	ldr	r2, [pc, #48]	; (800b7e4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b7b2:	480d      	ldr	r0, [pc, #52]	; (800b7e8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b7b4:	f001 fb3c 	bl	800ce30 <iprintf>
 800b7b8:	4816      	ldr	r0, [pc, #88]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800b7ba:	f001 fbd5 	bl	800cf68 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800b7be:	4808      	ldr	r0, [pc, #32]	; (800b7e0 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800b7c0:	f7ff f904 	bl	800a9cc <DbgTraceGetFileName>
 800b7c4:	4601      	mov	r1, r0
 800b7c6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800b7ca:	4a06      	ldr	r2, [pc, #24]	; (800b7e4 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800b7cc:	4806      	ldr	r0, [pc, #24]	; (800b7e8 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800b7ce:	f001 fb2f 	bl	800ce30 <iprintf>
 800b7d2:	4811      	ldr	r0, [pc, #68]	; (800b818 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800b7d4:	f001 fb2c 	bl	800ce30 <iprintf>
}
 800b7d8:	bf00      	nop
 800b7da:	371c      	adds	r7, #28
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7e0:	0800ecb8 	.word	0x0800ecb8
 800b7e4:	0800fde0 	.word	0x0800fde0
 800b7e8:	0800ecd4 	.word	0x0800ecd4
 800b7ec:	0800f59c 	.word	0x0800f59c
 800b7f0:	0800f5bc 	.word	0x0800f5bc
 800b7f4:	0800f5f8 	.word	0x0800f5f8
 800b7f8:	200020c4 	.word	0x200020c4
 800b7fc:	0800f624 	.word	0x0800f624
 800b800:	0800f664 	.word	0x0800f664
 800b804:	0001b207 	.word	0x0001b207
 800b808:	0800f694 	.word	0x0800f694
 800b80c:	0800f6e0 	.word	0x0800f6e0
 800b810:	0800f71c 	.word	0x0800f71c
 800b814:	0800f75c 	.word	0x0800f75c
 800b818:	0800f78c 	.word	0x0800f78c

0800b81c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b08c      	sub	sp, #48	; 0x30
 800b820:	af08      	add	r7, sp, #32
 800b822:	4603      	mov	r3, r0
 800b824:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b826:	2392      	movs	r3, #146	; 0x92
 800b828:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b82a:	4a32      	ldr	r2, [pc, #200]	; (800b8f4 <Adv_Request+0xd8>)
 800b82c:	79fb      	ldrb	r3, [r7, #7]
 800b82e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b832:	2300      	movs	r3, #0
 800b834:	9306      	str	r3, [sp, #24]
 800b836:	2300      	movs	r3, #0
 800b838:	9305      	str	r3, [sp, #20]
 800b83a:	2300      	movs	r3, #0
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	2300      	movs	r3, #0
 800b840:	9303      	str	r3, [sp, #12]
 800b842:	2300      	movs	r3, #0
 800b844:	9302      	str	r3, [sp, #8]
 800b846:	2300      	movs	r3, #0
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	2300      	movs	r3, #0
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	2300      	movs	r3, #0
 800b850:	22a0      	movs	r2, #160	; 0xa0
 800b852:	2180      	movs	r1, #128	; 0x80
 800b854:	2000      	movs	r0, #0
 800b856:	f7fd f8c7 	bl	80089e8 <aci_gap_set_discoverable>
 800b85a:	4603      	mov	r3, r0
 800b85c:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800b85e:	7bfb      	ldrb	r3, [r7, #15]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00f      	beq.n	800b884 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800b864:	4824      	ldr	r0, [pc, #144]	; (800b8f8 <Adv_Request+0xdc>)
 800b866:	f7ff f8b1 	bl	800a9cc <DbgTraceGetFileName>
 800b86a:	4601      	mov	r1, r0
 800b86c:	f240 33f6 	movw	r3, #1014	; 0x3f6
 800b870:	4a22      	ldr	r2, [pc, #136]	; (800b8fc <Adv_Request+0xe0>)
 800b872:	4823      	ldr	r0, [pc, #140]	; (800b900 <Adv_Request+0xe4>)
 800b874:	f001 fadc 	bl	800ce30 <iprintf>
 800b878:	7bfb      	ldrb	r3, [r7, #15]
 800b87a:	4619      	mov	r1, r3
 800b87c:	4821      	ldr	r0, [pc, #132]	; (800b904 <Adv_Request+0xe8>)
 800b87e:	f001 fad7 	bl	800ce30 <iprintf>
 800b882:	e00c      	b.n	800b89e <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800b884:	481c      	ldr	r0, [pc, #112]	; (800b8f8 <Adv_Request+0xdc>)
 800b886:	f7ff f8a1 	bl	800a9cc <DbgTraceGetFileName>
 800b88a:	4601      	mov	r1, r0
 800b88c:	f240 33fa 	movw	r3, #1018	; 0x3fa
 800b890:	4a1a      	ldr	r2, [pc, #104]	; (800b8fc <Adv_Request+0xe0>)
 800b892:	481b      	ldr	r0, [pc, #108]	; (800b900 <Adv_Request+0xe4>)
 800b894:	f001 facc 	bl	800ce30 <iprintf>
 800b898:	481b      	ldr	r0, [pc, #108]	; (800b908 <Adv_Request+0xec>)
 800b89a:	f001 fb65 	bl	800cf68 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b89e:	491b      	ldr	r1, [pc, #108]	; (800b90c <Adv_Request+0xf0>)
 800b8a0:	2015      	movs	r0, #21
 800b8a2:	f7fd fbc7 	bl	8009034 <aci_gap_update_adv_data>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800b8aa:	7bfb      	ldrb	r3, [r7, #15]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d00f      	beq.n	800b8d0 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800b8b0:	4811      	ldr	r0, [pc, #68]	; (800b8f8 <Adv_Request+0xdc>)
 800b8b2:	f7ff f88b 	bl	800a9cc <DbgTraceGetFileName>
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	f240 4301 	movw	r3, #1025	; 0x401
 800b8bc:	4a0f      	ldr	r2, [pc, #60]	; (800b8fc <Adv_Request+0xe0>)
 800b8be:	4810      	ldr	r0, [pc, #64]	; (800b900 <Adv_Request+0xe4>)
 800b8c0:	f001 fab6 	bl	800ce30 <iprintf>
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	4811      	ldr	r0, [pc, #68]	; (800b910 <Adv_Request+0xf4>)
 800b8ca:	f001 fab1 	bl	800ce30 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b8ce:	e00d      	b.n	800b8ec <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800b8d0:	4809      	ldr	r0, [pc, #36]	; (800b8f8 <Adv_Request+0xdc>)
 800b8d2:	f7ff f87b 	bl	800a9cc <DbgTraceGetFileName>
 800b8d6:	4601      	mov	r1, r0
 800b8d8:	f240 4305 	movw	r3, #1029	; 0x405
 800b8dc:	4a07      	ldr	r2, [pc, #28]	; (800b8fc <Adv_Request+0xe0>)
 800b8de:	4808      	ldr	r0, [pc, #32]	; (800b900 <Adv_Request+0xe4>)
 800b8e0:	f001 faa6 	bl	800ce30 <iprintf>
 800b8e4:	480b      	ldr	r0, [pc, #44]	; (800b914 <Adv_Request+0xf8>)
 800b8e6:	f001 faa3 	bl	800ce30 <iprintf>
  return;
 800b8ea:	bf00      	nop
}
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	200020c4 	.word	0x200020c4
 800b8f8:	0800ecb8 	.word	0x0800ecb8
 800b8fc:	0800fdf8 	.word	0x0800fdf8
 800b900:	0800ecd4 	.word	0x0800ecd4
 800b904:	0800f7b8 	.word	0x0800f7b8
 800b908:	0800f7f0 	.word	0x0800f7f0
 800b90c:	20000014 	.word	0x20000014
 800b910:	0800f818 	.word	0x0800f818
 800b914:	0800f84c 	.word	0x0800f84c

0800b918 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b086      	sub	sp, #24
 800b91c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b91e:	f7ff f963 	bl	800abe8 <LL_FLASH_GetUDN>
 800b922:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b92a:	d023      	beq.n	800b974 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b92c:	f7ff f974 	bl	800ac18 <LL_FLASH_GetSTCompanyID>
 800b930:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b932:	f7ff f965 	bl	800ac00 <LL_FLASH_GetDeviceID>
 800b936:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	b2da      	uxtb	r2, r3
 800b93c:	4b16      	ldr	r3, [pc, #88]	; (800b998 <BleGetBdAddress+0x80>)
 800b93e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	0a1b      	lsrs	r3, r3, #8
 800b944:	b2da      	uxtb	r2, r3
 800b946:	4b14      	ldr	r3, [pc, #80]	; (800b998 <BleGetBdAddress+0x80>)
 800b948:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	4b12      	ldr	r3, [pc, #72]	; (800b998 <BleGetBdAddress+0x80>)
 800b950:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	b2da      	uxtb	r2, r3
 800b956:	4b10      	ldr	r3, [pc, #64]	; (800b998 <BleGetBdAddress+0x80>)
 800b958:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	0a1b      	lsrs	r3, r3, #8
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	4b0d      	ldr	r3, [pc, #52]	; (800b998 <BleGetBdAddress+0x80>)
 800b962:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	0c1b      	lsrs	r3, r3, #16
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	4b0b      	ldr	r3, [pc, #44]	; (800b998 <BleGetBdAddress+0x80>)
 800b96c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b96e:	4b0a      	ldr	r3, [pc, #40]	; (800b998 <BleGetBdAddress+0x80>)
 800b970:	617b      	str	r3, [r7, #20]
 800b972:	e00b      	b.n	800b98c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b974:	2000      	movs	r0, #0
 800b976:	f7ff f851 	bl	800aa1c <OTP_Read>
 800b97a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d002      	beq.n	800b988 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	617b      	str	r3, [r7, #20]
 800b986:	e001      	b.n	800b98c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b988:	4b04      	ldr	r3, [pc, #16]	; (800b99c <BleGetBdAddress+0x84>)
 800b98a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b98c:	697b      	ldr	r3, [r7, #20]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3718      	adds	r7, #24
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	200020bc 	.word	0x200020bc
 800b99c:	0800fd90 	.word	0x0800fd90

0800b9a0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b9a6:	4b1f      	ldr	r3, [pc, #124]	; (800ba24 <Adv_Cancel+0x84>)
 800b9a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b9ac:	2b05      	cmp	r3, #5
 800b9ae:	d035      	beq.n	800ba1c <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b9b0:	2392      	movs	r3, #146	; 0x92
 800b9b2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b9b4:	f7fc fff4 	bl	80089a0 <aci_gap_set_non_discoverable>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b9bc:	4b19      	ldr	r3, [pc, #100]	; (800ba24 <Adv_Cancel+0x84>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800b9c4:	79fb      	ldrb	r3, [r7, #7]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00d      	beq.n	800b9e6 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800b9ca:	4817      	ldr	r0, [pc, #92]	; (800ba28 <Adv_Cancel+0x88>)
 800b9cc:	f7fe fffe 	bl	800a9cc <DbgTraceGetFileName>
 800b9d0:	4601      	mov	r1, r0
 800b9d2:	f240 4353 	movw	r3, #1107	; 0x453
 800b9d6:	4a15      	ldr	r2, [pc, #84]	; (800ba2c <Adv_Cancel+0x8c>)
 800b9d8:	4815      	ldr	r0, [pc, #84]	; (800ba30 <Adv_Cancel+0x90>)
 800b9da:	f001 fa29 	bl	800ce30 <iprintf>
 800b9de:	4815      	ldr	r0, [pc, #84]	; (800ba34 <Adv_Cancel+0x94>)
 800b9e0:	f001 fa26 	bl	800ce30 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b9e4:	e01a      	b.n	800ba1c <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800b9e6:	4810      	ldr	r0, [pc, #64]	; (800ba28 <Adv_Cancel+0x88>)
 800b9e8:	f7fe fff0 	bl	800a9cc <DbgTraceGetFileName>
 800b9ec:	4601      	mov	r1, r0
 800b9ee:	f240 4357 	movw	r3, #1111	; 0x457
 800b9f2:	4a0e      	ldr	r2, [pc, #56]	; (800ba2c <Adv_Cancel+0x8c>)
 800b9f4:	480e      	ldr	r0, [pc, #56]	; (800ba30 <Adv_Cancel+0x90>)
 800b9f6:	f001 fa1b 	bl	800ce30 <iprintf>
 800b9fa:	480f      	ldr	r0, [pc, #60]	; (800ba38 <Adv_Cancel+0x98>)
 800b9fc:	f001 fa18 	bl	800ce30 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800ba00:	4809      	ldr	r0, [pc, #36]	; (800ba28 <Adv_Cancel+0x88>)
 800ba02:	f7fe ffe3 	bl	800a9cc <DbgTraceGetFileName>
 800ba06:	4601      	mov	r1, r0
 800ba08:	f44f 638b 	mov.w	r3, #1112	; 0x458
 800ba0c:	4a07      	ldr	r2, [pc, #28]	; (800ba2c <Adv_Cancel+0x8c>)
 800ba0e:	4808      	ldr	r0, [pc, #32]	; (800ba30 <Adv_Cancel+0x90>)
 800ba10:	f001 fa0e 	bl	800ce30 <iprintf>
 800ba14:	4809      	ldr	r0, [pc, #36]	; (800ba3c <Adv_Cancel+0x9c>)
 800ba16:	f001 fa0b 	bl	800ce30 <iprintf>
  return;
 800ba1a:	bf00      	nop
 800ba1c:	bf00      	nop
}
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	200020c4 	.word	0x200020c4
 800ba28:	0800ecb8 	.word	0x0800ecb8
 800ba2c:	0800fe04 	.word	0x0800fe04
 800ba30:	0800ecd4 	.word	0x0800ecd4
 800ba34:	0800f874 	.word	0x0800f874
 800ba38:	0800f898 	.word	0x0800f898
 800ba3c:	0800f8a0 	.word	0x0800f8a0

0800ba40 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ba48:	2100      	movs	r1, #0
 800ba4a:	2002      	movs	r0, #2
 800ba4c:	f000 ffa8 	bl	800c9a0 <UTIL_SEQ_SetTask>

  return;
 800ba50:	bf00      	nop
}
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ba60:	2001      	movs	r0, #1
 800ba62:	f001 f809 	bl	800ca78 <UTIL_SEQ_SetEvt>

  return;
 800ba66:	bf00      	nop
}
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}

0800ba6e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800ba6e:	b580      	push	{r7, lr}
 800ba70:	b082      	sub	sp, #8
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ba76:	2001      	movs	r0, #1
 800ba78:	f001 f81e 	bl	800cab8 <UTIL_SEQ_WaitEvt>

  return;
 800ba7c:	bf00      	nop
}
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	3308      	adds	r3, #8
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fe f940 	bl	8009d1c <SVCCTL_UserEvtRx>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800baa0:	7afb      	ldrb	r3, [r7, #11]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d003      	beq.n	800baae <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2201      	movs	r2, #1
 800baaa:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800baac:	e003      	b.n	800bab6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	701a      	strb	r2, [r3, #0]
  return;
 800bab4:	bf00      	nop
}
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800bac6:	79fb      	ldrb	r3, [r7, #7]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d002      	beq.n	800bad2 <BLE_StatusNot+0x16>
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d006      	beq.n	800bade <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800bad0:	e00b      	b.n	800baea <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bad2:	2303      	movs	r3, #3
 800bad4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f000 ff8e 	bl	800c9f8 <UTIL_SEQ_PauseTask>
      break;
 800badc:	e005      	b.n	800baea <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800bade:	2303      	movs	r3, #3
 800bae0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f000 ffa8 	bl	800ca38 <UTIL_SEQ_ResumeTask>
      break;
 800bae8:	bf00      	nop
  }

  return;
 800baea:	bf00      	nop
}
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
	...

0800baf4 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800baf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800baf8:	b08c      	sub	sp, #48	; 0x30
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	int i = 0;
 800bafe:	2300      	movs	r3, #0
 800bb00:	62bb      	str	r3, [r7, #40]	; 0x28
	int j = 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	627b      	str	r3, [r7, #36]	; 0x24
	memset(UpdateCharData, 0, sizeof(uint8_t) * 247);
 800bb06:	22f7      	movs	r2, #247	; 0xf7
 800bb08:	2100      	movs	r1, #0
 800bb0a:	4884      	ldr	r0, [pc, #528]	; (800bd1c <Custom_STM_App_Notification+0x228>)
 800bb0c:	f001 f8a8 	bl	800cc60 <memset>
	// copy data update buffer +BCH
	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	6859      	ldr	r1, [r3, #4]
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	7a1b      	ldrb	r3, [r3, #8]
 800bb18:	461a      	mov	r2, r3
 800bb1a:	4880      	ldr	r0, [pc, #512]	; (800bd1c <Custom_STM_App_Notification+0x228>)
 800bb1c:	f001 f892 	bl	800cc44 <memcpy>
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	f200 81bd 	bhi.w	800bea4 <Custom_STM_App_Notification+0x3b0>
 800bb2a:	a201      	add	r2, pc, #4	; (adr r2, 800bb30 <Custom_STM_App_Notification+0x3c>)
 800bb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb30:	0800bea5 	.word	0x0800bea5
 800bb34:	0800bb41 	.word	0x0800bb41
 800bb38:	0800bea5 	.word	0x0800bea5
 800bb3c:	0800bccd 	.word	0x0800bccd
      break;

    case CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT */

    	memset(Custom_App_Context.ssid, 0x00, sizeof(uint64_t)*30);
 800bb40:	22f0      	movs	r2, #240	; 0xf0
 800bb42:	2100      	movs	r1, #0
 800bb44:	4876      	ldr	r0, [pc, #472]	; (800bd20 <Custom_STM_App_Notification+0x22c>)
 800bb46:	f001 f88b 	bl	800cc60 <memset>
    	while(UpdateCharData[i] != 0x00) {
 800bb4a:	e012      	b.n	800bb72 <Custom_STM_App_Notification+0x7e>
    		Custom_App_Context.ssid[i] = (uint64_t)UpdateCharData[i];
 800bb4c:	4a73      	ldr	r2, [pc, #460]	; (800bd1c <Custom_STM_App_Notification+0x228>)
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	4413      	add	r3, r2
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2200      	movs	r2, #0
 800bb58:	613b      	str	r3, [r7, #16]
 800bb5a:	617a      	str	r2, [r7, #20]
 800bb5c:	4a70      	ldr	r2, [pc, #448]	; (800bd20 <Custom_STM_App_Notification+0x22c>)
 800bb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb60:	00db      	lsls	r3, r3, #3
 800bb62:	4413      	add	r3, r2
 800bb64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb68:	e9c3 1200 	strd	r1, r2, [r3]
    		i++;
 800bb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6e:	3301      	adds	r3, #1
 800bb70:	62bb      	str	r3, [r7, #40]	; 0x28
    	while(UpdateCharData[i] != 0x00) {
 800bb72:	4a6a      	ldr	r2, [pc, #424]	; (800bd1c <Custom_STM_App_Notification+0x228>)
 800bb74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb76:	4413      	add	r3, r2
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1e6      	bne.n	800bb4c <Custom_STM_App_Notification+0x58>
    	}
    	memset(ssid, NULL, sizeof(char)*30);
 800bb7e:	221e      	movs	r2, #30
 800bb80:	2100      	movs	r1, #0
 800bb82:	4868      	ldr	r0, [pc, #416]	; (800bd24 <Custom_STM_App_Notification+0x230>)
 800bb84:	f001 f86c 	bl	800cc60 <memset>
    	for(int pos=0;pos<i; pos++) {
 800bb88:	2300      	movs	r3, #0
 800bb8a:	623b      	str	r3, [r7, #32]
 800bb8c:	e00e      	b.n	800bbac <Custom_STM_App_Notification+0xb8>
    		ssid[pos] = (char)Custom_App_Context.ssid[pos];
 800bb8e:	4a64      	ldr	r2, [pc, #400]	; (800bd20 <Custom_STM_App_Notification+0x22c>)
 800bb90:	6a3b      	ldr	r3, [r7, #32]
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	4413      	add	r3, r2
 800bb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9a:	b2d1      	uxtb	r1, r2
 800bb9c:	4a61      	ldr	r2, [pc, #388]	; (800bd24 <Custom_STM_App_Notification+0x230>)
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	4413      	add	r3, r2
 800bba2:	460a      	mov	r2, r1
 800bba4:	701a      	strb	r2, [r3, #0]
    	for(int pos=0;pos<i; pos++) {
 800bba6:	6a3b      	ldr	r3, [r7, #32]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	623b      	str	r3, [r7, #32]
 800bbac:	6a3a      	ldr	r2, [r7, #32]
 800bbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	dbec      	blt.n	800bb8e <Custom_STM_App_Notification+0x9a>
    	}
    	dataSsid = (uint64_t)ssid;
 800bbb4:	4b5b      	ldr	r3, [pc, #364]	; (800bd24 <Custom_STM_App_Notification+0x230>)
 800bbb6:	17da      	asrs	r2, r3, #31
 800bbb8:	60bb      	str	r3, [r7, #8]
 800bbba:	60fa      	str	r2, [r7, #12]
 800bbbc:	4b5a      	ldr	r3, [pc, #360]	; (800bd28 <Custom_STM_App_Notification+0x234>)
 800bbbe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bbc2:	e9c3 1200 	strd	r1, r2, [r3]
    	/* Unlock the Flash to enable the flash control register access *************/
		  HAL_FLASH_Unlock();
 800bbc6:	f7f8 f895 	bl	8003cf4 <HAL_FLASH_Unlock>

		 /* Clear OPTVERR bit set on virgin samples */
		  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800bbca:	4b58      	ldr	r3, [pc, #352]	; (800bd2c <Custom_STM_App_Notification+0x238>)
 800bbcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bbd0:	611a      	str	r2, [r3, #16]

		  /* Erase the user Flash area
			(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

		  /* Get the 1st page to erase */
		  FirstPage = GetPage(FLASH_USER_START_ADDR_SSID);
 800bbd2:	4857      	ldr	r0, [pc, #348]	; (800bd30 <Custom_STM_App_Notification+0x23c>)
 800bbd4:	f7f6 fdc2 	bl	800275c <GetPage>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	4a56      	ldr	r2, [pc, #344]	; (800bd34 <Custom_STM_App_Notification+0x240>)
 800bbdc:	6013      	str	r3, [r2, #0]

		  /* Get the number of pages to erase from 1st page */
		  NbOfPages = GetPage(FLASH_USER_END_ADDR_SSID) - FirstPage + 1;
 800bbde:	4856      	ldr	r0, [pc, #344]	; (800bd38 <Custom_STM_App_Notification+0x244>)
 800bbe0:	f7f6 fdbc 	bl	800275c <GetPage>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	4b53      	ldr	r3, [pc, #332]	; (800bd34 <Custom_STM_App_Notification+0x240>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	3301      	adds	r3, #1
 800bbee:	4a53      	ldr	r2, [pc, #332]	; (800bd3c <Custom_STM_App_Notification+0x248>)
 800bbf0:	6013      	str	r3, [r2, #0]

		  /* Fill EraseInit structure*/
		  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800bbf2:	4b53      	ldr	r3, [pc, #332]	; (800bd40 <Custom_STM_App_Notification+0x24c>)
 800bbf4:	2202      	movs	r2, #2
 800bbf6:	601a      	str	r2, [r3, #0]
		  EraseInitStruct.Page        = FirstPage;
 800bbf8:	4b4e      	ldr	r3, [pc, #312]	; (800bd34 <Custom_STM_App_Notification+0x240>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a50      	ldr	r2, [pc, #320]	; (800bd40 <Custom_STM_App_Notification+0x24c>)
 800bbfe:	6053      	str	r3, [r2, #4]
		  EraseInitStruct.NbPages     = NbOfPages;
 800bc00:	4b4e      	ldr	r3, [pc, #312]	; (800bd3c <Custom_STM_App_Notification+0x248>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a4e      	ldr	r2, [pc, #312]	; (800bd40 <Custom_STM_App_Notification+0x24c>)
 800bc06:	6093      	str	r3, [r2, #8]

		  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
			 you have to make sure that these data are rewritten before they are accessed during code
			 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
			 DCRST and ICRST bits in the FLASH_CR register. */
		  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 800bc08:	494e      	ldr	r1, [pc, #312]	; (800bd44 <Custom_STM_App_Notification+0x250>)
 800bc0a:	484d      	ldr	r0, [pc, #308]	; (800bd40 <Custom_STM_App_Notification+0x24c>)
 800bc0c:	f7f8 f944 	bl	8003e98 <HAL_FLASHEx_Erase>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d004      	beq.n	800bc20 <Custom_STM_App_Notification+0x12c>
			*/
			/* Infinite loop */
			while (1)
			{
			  /* Turn on LED3 */
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800bc16:	2102      	movs	r1, #2
 800bc18:	484b      	ldr	r0, [pc, #300]	; (800bd48 <Custom_STM_App_Notification+0x254>)
 800bc1a:	f7f8 fb89 	bl	8004330 <HAL_GPIO_TogglePin>
 800bc1e:	e7fa      	b.n	800bc16 <Custom_STM_App_Notification+0x122>
		  }

		  /* Program the user Flash area word by word
			(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

		  Address = FLASH_USER_START_ADDR_SSID;
 800bc20:	4b4a      	ldr	r3, [pc, #296]	; (800bd4c <Custom_STM_App_Notification+0x258>)
 800bc22:	4a43      	ldr	r2, [pc, #268]	; (800bd30 <Custom_STM_App_Notification+0x23c>)
 800bc24:	601a      	str	r2, [r3, #0]


		  while (Address < FLASH_USER_END_ADDR_SSID)
 800bc26:	e015      	b.n	800bc54 <Custom_STM_App_Notification+0x160>
		  {
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, dataSsid) == HAL_OK)
 800bc28:	4b48      	ldr	r3, [pc, #288]	; (800bd4c <Custom_STM_App_Notification+0x258>)
 800bc2a:	6819      	ldr	r1, [r3, #0]
 800bc2c:	4b3e      	ldr	r3, [pc, #248]	; (800bd28 <Custom_STM_App_Notification+0x234>)
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	2001      	movs	r0, #1
 800bc34:	f7f8 f81a 	bl	8003c6c <HAL_FLASH_Program>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d105      	bne.n	800bc4a <Custom_STM_App_Notification+0x156>
			{
			  Address = Address + 8;  /* increment to next double word*/
 800bc3e:	4b43      	ldr	r3, [pc, #268]	; (800bd4c <Custom_STM_App_Notification+0x258>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3308      	adds	r3, #8
 800bc44:	4a41      	ldr	r2, [pc, #260]	; (800bd4c <Custom_STM_App_Notification+0x258>)
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	e004      	b.n	800bc54 <Custom_STM_App_Notification+0x160>
			  /* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
			  while (1)
			  {
				/* Turn on LED3 */
				  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800bc4a:	2102      	movs	r1, #2
 800bc4c:	483e      	ldr	r0, [pc, #248]	; (800bd48 <Custom_STM_App_Notification+0x254>)
 800bc4e:	f7f8 fb6f 	bl	8004330 <HAL_GPIO_TogglePin>
 800bc52:	e7fa      	b.n	800bc4a <Custom_STM_App_Notification+0x156>
		  while (Address < FLASH_USER_END_ADDR_SSID)
 800bc54:	4b3d      	ldr	r3, [pc, #244]	; (800bd4c <Custom_STM_App_Notification+0x258>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a3d      	ldr	r2, [pc, #244]	; (800bd50 <Custom_STM_App_Notification+0x25c>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d9e4      	bls.n	800bc28 <Custom_STM_App_Notification+0x134>
			}
		  }

		  /* Lock the Flash to disable the flash control register access (recommended
			 to protect the FLASH memory against possible unwanted operation) *********/
		  HAL_FLASH_Lock();
 800bc5e:	f7f8 f86b 	bl	8003d38 <HAL_FLASH_Lock>

	  /* Check if the programmed data is OK
				 MemoryProgramStatus = 0: data programmed correctly
				 MemoryProgramStatus != 0: number of words not programmed correctly ******/
			 Address = FLASH_USER_START_ADDR_SSID;
 800bc62:	4b3a      	ldr	r3, [pc, #232]	; (800bd4c <Custom_STM_App_Notification+0x258>)
 800bc64:	4a32      	ldr	r2, [pc, #200]	; (800bd30 <Custom_STM_App_Notification+0x23c>)
 800bc66:	601a      	str	r2, [r3, #0]
			 MemoryProgramStatus = 0x0;
 800bc68:	4b3a      	ldr	r3, [pc, #232]	; (800bd54 <Custom_STM_App_Notification+0x260>)
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	601a      	str	r2, [r3, #0]

			 while (Address < FLASH_USER_END_ADDR_SSID)
 800bc6e:	e01a      	b.n	800bca6 <Custom_STM_App_Notification+0x1b2>
			 {
			   data32Ssid = *(__IO uint32_t *)Address;
 800bc70:	4b36      	ldr	r3, [pc, #216]	; (800bd4c <Custom_STM_App_Notification+0x258>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a38      	ldr	r2, [pc, #224]	; (800bd58 <Custom_STM_App_Notification+0x264>)
 800bc78:	6013      	str	r3, [r2, #0]

			   if (data32Ssid != dataSsid)
 800bc7a:	4b37      	ldr	r3, [pc, #220]	; (800bd58 <Custom_STM_App_Notification+0x264>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	4698      	mov	r8, r3
 800bc82:	4691      	mov	r9, r2
 800bc84:	4b28      	ldr	r3, [pc, #160]	; (800bd28 <Custom_STM_App_Notification+0x234>)
 800bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8a:	4599      	cmp	r9, r3
 800bc8c:	bf08      	it	eq
 800bc8e:	4590      	cmpeq	r8, r2
 800bc90:	d004      	beq.n	800bc9c <Custom_STM_App_Notification+0x1a8>
			   {
				 MemoryProgramStatus++;
 800bc92:	4b30      	ldr	r3, [pc, #192]	; (800bd54 <Custom_STM_App_Notification+0x260>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3301      	adds	r3, #1
 800bc98:	4a2e      	ldr	r2, [pc, #184]	; (800bd54 <Custom_STM_App_Notification+0x260>)
 800bc9a:	6013      	str	r3, [r2, #0]
			   }
			   Address = Address + 8;
 800bc9c:	4b2b      	ldr	r3, [pc, #172]	; (800bd4c <Custom_STM_App_Notification+0x258>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	3308      	adds	r3, #8
 800bca2:	4a2a      	ldr	r2, [pc, #168]	; (800bd4c <Custom_STM_App_Notification+0x258>)
 800bca4:	6013      	str	r3, [r2, #0]
			 while (Address < FLASH_USER_END_ADDR_SSID)
 800bca6:	4b29      	ldr	r3, [pc, #164]	; (800bd4c <Custom_STM_App_Notification+0x258>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a29      	ldr	r2, [pc, #164]	; (800bd50 <Custom_STM_App_Notification+0x25c>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d9df      	bls.n	800bc70 <Custom_STM_App_Notification+0x17c>
			 }

			 /*Check if there is an issue to program data*/
			 if (MemoryProgramStatus == 0)
 800bcb0:	4b28      	ldr	r3, [pc, #160]	; (800bd54 <Custom_STM_App_Notification+0x260>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d104      	bne.n	800bcc2 <Custom_STM_App_Notification+0x1ce>
			 {
			   /* No error detected. Switch on LED2*/
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800bcb8:	2101      	movs	r1, #1
 800bcba:	4823      	ldr	r0, [pc, #140]	; (800bd48 <Custom_STM_App_Notification+0x254>)
 800bcbc:	f7f8 fb38 	bl	8004330 <HAL_GPIO_TogglePin>
			   /* Error detected. Switch on LED1*/
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
			 }

      /* USER CODE END CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT */
      break;
 800bcc0:	e0f1      	b.n	800bea6 <Custom_STM_App_Notification+0x3b2>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800bcc2:	2120      	movs	r1, #32
 800bcc4:	4820      	ldr	r0, [pc, #128]	; (800bd48 <Custom_STM_App_Notification+0x254>)
 800bcc6:	f7f8 fb33 	bl	8004330 <HAL_GPIO_TogglePin>
      break;
 800bcca:	e0ec      	b.n	800bea6 <Custom_STM_App_Notification+0x3b2>
      /* USER CODE END CUSTOM_STM_GPASS_READ_EVT */
      break;

    case CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT */
		memset(Custom_App_Context.password, 0x00, sizeof(uint64_t)*30);
 800bccc:	22f0      	movs	r2, #240	; 0xf0
 800bcce:	2100      	movs	r1, #0
 800bcd0:	4822      	ldr	r0, [pc, #136]	; (800bd5c <Custom_STM_App_Notification+0x268>)
 800bcd2:	f000 ffc5 	bl	800cc60 <memset>
		while(UpdateCharData[j] != 0x00) {
 800bcd6:	e013      	b.n	800bd00 <Custom_STM_App_Notification+0x20c>
			Custom_App_Context.password[j] = (uint64_t)UpdateCharData[j];
 800bcd8:	4a10      	ldr	r2, [pc, #64]	; (800bd1c <Custom_STM_App_Notification+0x228>)
 800bcda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcdc:	4413      	add	r3, r2
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	2200      	movs	r2, #0
 800bce4:	603b      	str	r3, [r7, #0]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	4a0d      	ldr	r2, [pc, #52]	; (800bd20 <Custom_STM_App_Notification+0x22c>)
 800bcea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcec:	331e      	adds	r3, #30
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	4413      	add	r3, r2
 800bcf2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bcf6:	e9c3 1200 	strd	r1, r2, [r3]
			j++;
 800bcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	627b      	str	r3, [r7, #36]	; 0x24
		while(UpdateCharData[j] != 0x00) {
 800bd00:	4a06      	ldr	r2, [pc, #24]	; (800bd1c <Custom_STM_App_Notification+0x228>)
 800bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd04:	4413      	add	r3, r2
 800bd06:	781b      	ldrb	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1e5      	bne.n	800bcd8 <Custom_STM_App_Notification+0x1e4>
		}
		memset(password, NULL, sizeof(char)*30);
 800bd0c:	221e      	movs	r2, #30
 800bd0e:	2100      	movs	r1, #0
 800bd10:	4813      	ldr	r0, [pc, #76]	; (800bd60 <Custom_STM_App_Notification+0x26c>)
 800bd12:	f000 ffa5 	bl	800cc60 <memset>
		for(int pos=0;pos<j; pos++) {
 800bd16:	2300      	movs	r3, #0
 800bd18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd1a:	e033      	b.n	800bd84 <Custom_STM_App_Notification+0x290>
 800bd1c:	20002338 	.word	0x20002338
 800bd20:	20002150 	.word	0x20002150
 800bd24:	20002430 	.word	0x20002430
 800bd28:	20002470 	.word	0x20002470
 800bd2c:	58004000 	.word	0x58004000
 800bd30:	08010000 	.word	0x08010000
 800bd34:	20002480 	.word	0x20002480
 800bd38:	08018fff 	.word	0x08018fff
 800bd3c:	20002484 	.word	0x20002484
 800bd40:	2000249c 	.word	0x2000249c
 800bd44:	2000248c 	.word	0x2000248c
 800bd48:	48000400 	.word	0x48000400
 800bd4c:	20002488 	.word	0x20002488
 800bd50:	08018ffe 	.word	0x08018ffe
 800bd54:	20002490 	.word	0x20002490
 800bd58:	20002494 	.word	0x20002494
 800bd5c:	20002240 	.word	0x20002240
 800bd60:	20002450 	.word	0x20002450
			password[pos] = (char)Custom_App_Context.password[pos];
 800bd64:	4a52      	ldr	r2, [pc, #328]	; (800beb0 <Custom_STM_App_Notification+0x3bc>)
 800bd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd68:	331e      	adds	r3, #30
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	4413      	add	r3, r2
 800bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd72:	b2d1      	uxtb	r1, r2
 800bd74:	4a4f      	ldr	r2, [pc, #316]	; (800beb4 <Custom_STM_App_Notification+0x3c0>)
 800bd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd78:	4413      	add	r3, r2
 800bd7a:	460a      	mov	r2, r1
 800bd7c:	701a      	strb	r2, [r3, #0]
		for(int pos=0;pos<j; pos++) {
 800bd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd80:	3301      	adds	r3, #1
 800bd82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	dbeb      	blt.n	800bd64 <Custom_STM_App_Notification+0x270>
		}
		dataPass = (uint64_t)password;
 800bd8c:	4b49      	ldr	r3, [pc, #292]	; (800beb4 <Custom_STM_App_Notification+0x3c0>)
 800bd8e:	17da      	asrs	r2, r3, #31
 800bd90:	469a      	mov	sl, r3
 800bd92:	4693      	mov	fp, r2
 800bd94:	4b48      	ldr	r3, [pc, #288]	; (800beb8 <Custom_STM_App_Notification+0x3c4>)
 800bd96:	e9c3 ab00 	strd	sl, fp, [r3]
		wifi_init();
 800bd9a:	f7fc f8d3 	bl	8007f44 <wifi_init>

		/* Unlock the Flash to enable the flash control register access *************/
		  HAL_FLASH_Unlock();
 800bd9e:	f7f7 ffa9 	bl	8003cf4 <HAL_FLASH_Unlock>

		 /* Clear OPTVERR bit set on virgin samples */
		  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800bda2:	4b46      	ldr	r3, [pc, #280]	; (800bebc <Custom_STM_App_Notification+0x3c8>)
 800bda4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bda8:	611a      	str	r2, [r3, #16]

		  /* Erase the user Flash area
			(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

		  /* Get the 1st page to erase */
		  FirstPage = GetPage(FLASH_USER_START_ADDR_PASS);
 800bdaa:	4845      	ldr	r0, [pc, #276]	; (800bec0 <Custom_STM_App_Notification+0x3cc>)
 800bdac:	f7f6 fcd6 	bl	800275c <GetPage>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	4a44      	ldr	r2, [pc, #272]	; (800bec4 <Custom_STM_App_Notification+0x3d0>)
 800bdb4:	6013      	str	r3, [r2, #0]

		  /* Get the number of pages to erase from 1st page */
		  NbOfPages = GetPage(FLASH_USER_END_ADDR_PASS) - FirstPage + 1;
 800bdb6:	4844      	ldr	r0, [pc, #272]	; (800bec8 <Custom_STM_App_Notification+0x3d4>)
 800bdb8:	f7f6 fcd0 	bl	800275c <GetPage>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	4b41      	ldr	r3, [pc, #260]	; (800bec4 <Custom_STM_App_Notification+0x3d0>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	1ad3      	subs	r3, r2, r3
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	4a41      	ldr	r2, [pc, #260]	; (800becc <Custom_STM_App_Notification+0x3d8>)
 800bdc8:	6013      	str	r3, [r2, #0]

		  /* Fill EraseInit structure*/
		  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800bdca:	4b41      	ldr	r3, [pc, #260]	; (800bed0 <Custom_STM_App_Notification+0x3dc>)
 800bdcc:	2202      	movs	r2, #2
 800bdce:	601a      	str	r2, [r3, #0]
		  EraseInitStruct.Page        = FirstPage;
 800bdd0:	4b3c      	ldr	r3, [pc, #240]	; (800bec4 <Custom_STM_App_Notification+0x3d0>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a3e      	ldr	r2, [pc, #248]	; (800bed0 <Custom_STM_App_Notification+0x3dc>)
 800bdd6:	6053      	str	r3, [r2, #4]
		  EraseInitStruct.NbPages     = NbOfPages;
 800bdd8:	4b3c      	ldr	r3, [pc, #240]	; (800becc <Custom_STM_App_Notification+0x3d8>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a3c      	ldr	r2, [pc, #240]	; (800bed0 <Custom_STM_App_Notification+0x3dc>)
 800bdde:	6093      	str	r3, [r2, #8]

		  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
			 you have to make sure that these data are rewritten before they are accessed during code
			 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
			 DCRST and ICRST bits in the FLASH_CR register. */
		  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 800bde0:	493c      	ldr	r1, [pc, #240]	; (800bed4 <Custom_STM_App_Notification+0x3e0>)
 800bde2:	483b      	ldr	r0, [pc, #236]	; (800bed0 <Custom_STM_App_Notification+0x3dc>)
 800bde4:	f7f8 f858 	bl	8003e98 <HAL_FLASHEx_Erase>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d004      	beq.n	800bdf8 <Custom_STM_App_Notification+0x304>
			*/
			/* Infinite loop */
			while (1)
			{
			  /* Turn on LED3 */
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800bdee:	2102      	movs	r1, #2
 800bdf0:	4839      	ldr	r0, [pc, #228]	; (800bed8 <Custom_STM_App_Notification+0x3e4>)
 800bdf2:	f7f8 fa9d 	bl	8004330 <HAL_GPIO_TogglePin>
 800bdf6:	e7fa      	b.n	800bdee <Custom_STM_App_Notification+0x2fa>
		  }

		  /* Program the user Flash area word by word
			(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

		  Address = FLASH_USER_START_ADDR_PASS;
 800bdf8:	4b38      	ldr	r3, [pc, #224]	; (800bedc <Custom_STM_App_Notification+0x3e8>)
 800bdfa:	4a31      	ldr	r2, [pc, #196]	; (800bec0 <Custom_STM_App_Notification+0x3cc>)
 800bdfc:	601a      	str	r2, [r3, #0]


		  while (Address < FLASH_USER_END_ADDR_PASS)
 800bdfe:	e015      	b.n	800be2c <Custom_STM_App_Notification+0x338>
		  {
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, dataPass) == HAL_OK)
 800be00:	4b36      	ldr	r3, [pc, #216]	; (800bedc <Custom_STM_App_Notification+0x3e8>)
 800be02:	6819      	ldr	r1, [r3, #0]
 800be04:	4b2c      	ldr	r3, [pc, #176]	; (800beb8 <Custom_STM_App_Notification+0x3c4>)
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	2001      	movs	r0, #1
 800be0c:	f7f7 ff2e 	bl	8003c6c <HAL_FLASH_Program>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d105      	bne.n	800be22 <Custom_STM_App_Notification+0x32e>
			{
			  Address = Address + 8;  /* increment to next double word*/
 800be16:	4b31      	ldr	r3, [pc, #196]	; (800bedc <Custom_STM_App_Notification+0x3e8>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	3308      	adds	r3, #8
 800be1c:	4a2f      	ldr	r2, [pc, #188]	; (800bedc <Custom_STM_App_Notification+0x3e8>)
 800be1e:	6013      	str	r3, [r2, #0]
 800be20:	e004      	b.n	800be2c <Custom_STM_App_Notification+0x338>
			  /* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
			  while (1)
			  {
				/* Turn on LED3 */
				  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800be22:	2102      	movs	r1, #2
 800be24:	482c      	ldr	r0, [pc, #176]	; (800bed8 <Custom_STM_App_Notification+0x3e4>)
 800be26:	f7f8 fa83 	bl	8004330 <HAL_GPIO_TogglePin>
 800be2a:	e7fa      	b.n	800be22 <Custom_STM_App_Notification+0x32e>
		  while (Address < FLASH_USER_END_ADDR_PASS)
 800be2c:	4b2b      	ldr	r3, [pc, #172]	; (800bedc <Custom_STM_App_Notification+0x3e8>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a2b      	ldr	r2, [pc, #172]	; (800bee0 <Custom_STM_App_Notification+0x3ec>)
 800be32:	4293      	cmp	r3, r2
 800be34:	d9e4      	bls.n	800be00 <Custom_STM_App_Notification+0x30c>
			}
		  }

		  /* Lock the Flash to disable the flash control register access (recommended
			 to protect the FLASH memory against possible unwanted operation) *********/
		  HAL_FLASH_Lock();
 800be36:	f7f7 ff7f 	bl	8003d38 <HAL_FLASH_Lock>

	  /* Check if the programmed data is OK
				 MemoryProgramStatus = 0: data programmed correctly
				 MemoryProgramStatus != 0: number of words not programmed correctly ******/
			 Address = FLASH_USER_START_ADDR_PASS;
 800be3a:	4b28      	ldr	r3, [pc, #160]	; (800bedc <Custom_STM_App_Notification+0x3e8>)
 800be3c:	4a20      	ldr	r2, [pc, #128]	; (800bec0 <Custom_STM_App_Notification+0x3cc>)
 800be3e:	601a      	str	r2, [r3, #0]
			 MemoryProgramStatus = 0x0;
 800be40:	4b28      	ldr	r3, [pc, #160]	; (800bee4 <Custom_STM_App_Notification+0x3f0>)
 800be42:	2200      	movs	r2, #0
 800be44:	601a      	str	r2, [r3, #0]

			 while (Address < FLASH_USER_END_ADDR_PASS)
 800be46:	e01a      	b.n	800be7e <Custom_STM_App_Notification+0x38a>
			 {
			   data32Pass = *(__IO uint32_t *)Address;
 800be48:	4b24      	ldr	r3, [pc, #144]	; (800bedc <Custom_STM_App_Notification+0x3e8>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a26      	ldr	r2, [pc, #152]	; (800bee8 <Custom_STM_App_Notification+0x3f4>)
 800be50:	6013      	str	r3, [r2, #0]

			   if (data32Pass != dataPass)
 800be52:	4b25      	ldr	r3, [pc, #148]	; (800bee8 <Custom_STM_App_Notification+0x3f4>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	2200      	movs	r2, #0
 800be58:	461c      	mov	r4, r3
 800be5a:	4615      	mov	r5, r2
 800be5c:	4b16      	ldr	r3, [pc, #88]	; (800beb8 <Custom_STM_App_Notification+0x3c4>)
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	429d      	cmp	r5, r3
 800be64:	bf08      	it	eq
 800be66:	4294      	cmpeq	r4, r2
 800be68:	d004      	beq.n	800be74 <Custom_STM_App_Notification+0x380>
			   {
				 MemoryProgramStatus++;
 800be6a:	4b1e      	ldr	r3, [pc, #120]	; (800bee4 <Custom_STM_App_Notification+0x3f0>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3301      	adds	r3, #1
 800be70:	4a1c      	ldr	r2, [pc, #112]	; (800bee4 <Custom_STM_App_Notification+0x3f0>)
 800be72:	6013      	str	r3, [r2, #0]
			   }
			   Address = Address + 8;
 800be74:	4b19      	ldr	r3, [pc, #100]	; (800bedc <Custom_STM_App_Notification+0x3e8>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3308      	adds	r3, #8
 800be7a:	4a18      	ldr	r2, [pc, #96]	; (800bedc <Custom_STM_App_Notification+0x3e8>)
 800be7c:	6013      	str	r3, [r2, #0]
			 while (Address < FLASH_USER_END_ADDR_PASS)
 800be7e:	4b17      	ldr	r3, [pc, #92]	; (800bedc <Custom_STM_App_Notification+0x3e8>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a17      	ldr	r2, [pc, #92]	; (800bee0 <Custom_STM_App_Notification+0x3ec>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d9df      	bls.n	800be48 <Custom_STM_App_Notification+0x354>
			 }

			 /*Check if there is an issue to program data*/
			 if (MemoryProgramStatus == 0)
 800be88:	4b16      	ldr	r3, [pc, #88]	; (800bee4 <Custom_STM_App_Notification+0x3f0>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <Custom_STM_App_Notification+0x3a6>
			 {
			   /* No error detected. Switch on LED2*/
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800be90:	2102      	movs	r1, #2
 800be92:	4811      	ldr	r0, [pc, #68]	; (800bed8 <Custom_STM_App_Notification+0x3e4>)
 800be94:	f7f8 fa4c 	bl	8004330 <HAL_GPIO_TogglePin>
			 {
			   /* Error detected. Switch on LED1*/
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
			 }
      /* USER CODE END CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT */
      break;
 800be98:	e005      	b.n	800bea6 <Custom_STM_App_Notification+0x3b2>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800be9a:	2120      	movs	r1, #32
 800be9c:	480e      	ldr	r0, [pc, #56]	; (800bed8 <Custom_STM_App_Notification+0x3e4>)
 800be9e:	f7f8 fa47 	bl	8004330 <HAL_GPIO_TogglePin>
      break;
 800bea2:	e000      	b.n	800bea6 <Custom_STM_App_Notification+0x3b2>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800bea4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800bea6:	bf00      	nop
}
 800bea8:	3730      	adds	r7, #48	; 0x30
 800beaa:	46bd      	mov	sp, r7
 800beac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800beb0:	20002150 	.word	0x20002150
 800beb4:	20002450 	.word	0x20002450
 800beb8:	20002478 	.word	0x20002478
 800bebc:	58004000 	.word	0x58004000
 800bec0:	08020000 	.word	0x08020000
 800bec4:	20002480 	.word	0x20002480
 800bec8:	08030fff 	.word	0x08030fff
 800becc:	20002484 	.word	0x20002484
 800bed0:	2000249c 	.word	0x2000249c
 800bed4:	2000248c 	.word	0x2000248c
 800bed8:	48000400 	.word	0x48000400
 800bedc:	20002488 	.word	0x20002488
 800bee0:	08030ffe 	.word	0x08030ffe
 800bee4:	20002490 	.word	0x20002490
 800bee8:	20002498 	.word	0x20002498

0800beec <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d002      	beq.n	800bf02 <Custom_APP_Notification+0x16>
 800befc:	2b01      	cmp	r3, #1
 800befe:	d002      	beq.n	800bf06 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800bf00:	e002      	b.n	800bf08 <Custom_APP_Notification+0x1c>
      break;
 800bf02:	bf00      	nop
 800bf04:	e000      	b.n	800bf08 <Custom_APP_Notification+0x1c>
      break;
 800bf06:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800bf08:	bf00      	nop
}
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800bf14:	b480      	push	{r7}
 800bf16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800bf18:	bf00      	nop
}
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
	...

0800bf24 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b08a      	sub	sp, #40	; 0x28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	3301      	adds	r3, #1
 800bf36:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800bf38:	6a3b      	ldr	r3, [r7, #32]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	2bff      	cmp	r3, #255	; 0xff
 800bf3e:	d156      	bne.n	800bfee <Custom_STM_Event_Handler+0xca>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800bf40:	6a3b      	ldr	r3, [r7, #32]
 800bf42:	3302      	adds	r3, #2
 800bf44:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	f640 4214 	movw	r2, #3092	; 0xc14
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d046      	beq.n	800bfe2 <Custom_STM_Event_Handler+0xbe>
 800bf54:	f640 4214 	movw	r2, #3092	; 0xc14
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	dc44      	bgt.n	800bfe6 <Custom_STM_Event_Handler+0xc2>
 800bf5c:	f640 4201 	movw	r2, #3073	; 0xc01
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d003      	beq.n	800bf6c <Custom_STM_Event_Handler+0x48>
 800bf64:	f640 4213 	movw	r2, #3091	; 0xc13
 800bf68:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800bf6a:	e03f      	b.n	800bfec <Custom_STM_Event_Handler+0xc8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	3302      	adds	r3, #2
 800bf70:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomGssidHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	885b      	ldrh	r3, [r3, #2]
 800bf76:	b29b      	uxth	r3, r3
 800bf78:	461a      	mov	r2, r3
 800bf7a:	4b20      	ldr	r3, [pc, #128]	; (800bffc <Custom_STM_Event_Handler+0xd8>)
 800bf7c:	885b      	ldrh	r3, [r3, #2]
 800bf7e:	3301      	adds	r3, #1
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d112      	bne.n	800bfaa <Custom_STM_Event_Handler+0x86>
            return_value = SVCCTL_EvtAckFlowEnable;
 800bf84:	2301      	movs	r3, #1
 800bf86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800bf8e:	69bb      	ldr	r3, [r7, #24]
 800bf90:	88db      	ldrh	r3, [r3, #6]
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	3308      	adds	r3, #8
 800bf9c:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 800bf9e:	f107 0308 	add.w	r3, r7, #8
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7ff fda6 	bl	800baf4 <Custom_STM_App_Notification>
          break;
 800bfa8:	e01f      	b.n	800bfea <Custom_STM_Event_Handler+0xc6>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGpassHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	885b      	ldrh	r3, [r3, #2]
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	4b12      	ldr	r3, [pc, #72]	; (800bffc <Custom_STM_Event_Handler+0xd8>)
 800bfb4:	889b      	ldrh	r3, [r3, #4]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d116      	bne.n	800bfea <Custom_STM_Event_Handler+0xc6>
            return_value = SVCCTL_EvtAckFlowEnable;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT;
 800bfc2:	2303      	movs	r3, #3
 800bfc4:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	88db      	ldrh	r3, [r3, #6]
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	3308      	adds	r3, #8
 800bfd4:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 800bfd6:	f107 0308 	add.w	r3, r7, #8
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7ff fd8a 	bl	800baf4 <Custom_STM_App_Notification>
          break;
 800bfe0:	e003      	b.n	800bfea <Custom_STM_Event_Handler+0xc6>
          break;
 800bfe2:	bf00      	nop
 800bfe4:	e004      	b.n	800bff0 <Custom_STM_Event_Handler+0xcc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800bfe6:	bf00      	nop
 800bfe8:	e002      	b.n	800bff0 <Custom_STM_Event_Handler+0xcc>
          break;
 800bfea:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bfec:	e000      	b.n	800bff0 <Custom_STM_Event_Handler+0xcc>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800bfee:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800bff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800bff4:	4618      	mov	r0, r3
 800bff6:	3728      	adds	r7, #40	; 0x28
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	200024a8 	.word	0x200024a8

0800c000 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b08c      	sub	sp, #48	; 0x30
 800c004:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c006:	2392      	movs	r3, #146	; 0x92
 800c008:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800c00a:	487f      	ldr	r0, [pc, #508]	; (800c208 <SVCCTL_InitCustomSvc+0x208>)
 800c00c:	f7fd fe6c 	bl	8009ce8 <SVCCTL_RegisterSvcHandler>
   *                                2 for get_ssid +
   *                                2 for get_password +
   *                              = 5
   */

  COPY_FIRST_SERVICE_UUID(uuid.Char_UUID_128);
 800c010:	238f      	movs	r3, #143	; 0x8f
 800c012:	713b      	strb	r3, [r7, #4]
 800c014:	23e5      	movs	r3, #229	; 0xe5
 800c016:	717b      	strb	r3, [r7, #5]
 800c018:	23b3      	movs	r3, #179	; 0xb3
 800c01a:	71bb      	strb	r3, [r7, #6]
 800c01c:	23d5      	movs	r3, #213	; 0xd5
 800c01e:	71fb      	strb	r3, [r7, #7]
 800c020:	232e      	movs	r3, #46	; 0x2e
 800c022:	723b      	strb	r3, [r7, #8]
 800c024:	237f      	movs	r3, #127	; 0x7f
 800c026:	727b      	strb	r3, [r7, #9]
 800c028:	234a      	movs	r3, #74	; 0x4a
 800c02a:	72bb      	strb	r3, [r7, #10]
 800c02c:	2398      	movs	r3, #152	; 0x98
 800c02e:	72fb      	strb	r3, [r7, #11]
 800c030:	232a      	movs	r3, #42	; 0x2a
 800c032:	733b      	strb	r3, [r7, #12]
 800c034:	2348      	movs	r3, #72	; 0x48
 800c036:	737b      	strb	r3, [r7, #13]
 800c038:	237a      	movs	r3, #122	; 0x7a
 800c03a:	73bb      	strb	r3, [r7, #14]
 800c03c:	23cc      	movs	r3, #204	; 0xcc
 800c03e:	73fb      	strb	r3, [r7, #15]
 800c040:	23ed      	movs	r3, #237	; 0xed
 800c042:	743b      	strb	r3, [r7, #16]
 800c044:	23fe      	movs	r3, #254	; 0xfe
 800c046:	747b      	strb	r3, [r7, #17]
 800c048:	2300      	movs	r3, #0
 800c04a:	74bb      	strb	r3, [r7, #18]
 800c04c:	2300      	movs	r3, #0
 800c04e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800c050:	1d39      	adds	r1, r7, #4
 800c052:	4b6e      	ldr	r3, [pc, #440]	; (800c20c <SVCCTL_InitCustomSvc+0x20c>)
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	2305      	movs	r3, #5
 800c058:	2201      	movs	r2, #1
 800c05a:	2002      	movs	r0, #2
 800c05c:	f7fd f90c 	bl	8009278 <aci_gatt_add_service>
 800c060:	4603      	mov	r3, r0
 800c062:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             5,
                             &(CustomContext.CustomFsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c064:	7dfb      	ldrb	r3, [r7, #23]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d00f      	beq.n	800c08a <SVCCTL_InitCustomSvc+0x8a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: fs, error code: 0x%x \n\r", ret);
 800c06a:	4869      	ldr	r0, [pc, #420]	; (800c210 <SVCCTL_InitCustomSvc+0x210>)
 800c06c:	f7fe fcae 	bl	800a9cc <DbgTraceGetFileName>
 800c070:	4601      	mov	r1, r0
 800c072:	f44f 7382 	mov.w	r3, #260	; 0x104
 800c076:	4a67      	ldr	r2, [pc, #412]	; (800c214 <SVCCTL_InitCustomSvc+0x214>)
 800c078:	4867      	ldr	r0, [pc, #412]	; (800c218 <SVCCTL_InitCustomSvc+0x218>)
 800c07a:	f000 fed9 	bl	800ce30 <iprintf>
 800c07e:	7dfb      	ldrb	r3, [r7, #23]
 800c080:	4619      	mov	r1, r3
 800c082:	4866      	ldr	r0, [pc, #408]	; (800c21c <SVCCTL_InitCustomSvc+0x21c>)
 800c084:	f000 fed4 	bl	800ce30 <iprintf>
 800c088:	e00c      	b.n	800c0a4 <SVCCTL_InitCustomSvc+0xa4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: fs \n\r");
 800c08a:	4861      	ldr	r0, [pc, #388]	; (800c210 <SVCCTL_InitCustomSvc+0x210>)
 800c08c:	f7fe fc9e 	bl	800a9cc <DbgTraceGetFileName>
 800c090:	4601      	mov	r1, r0
 800c092:	f44f 7384 	mov.w	r3, #264	; 0x108
 800c096:	4a5f      	ldr	r2, [pc, #380]	; (800c214 <SVCCTL_InitCustomSvc+0x214>)
 800c098:	485f      	ldr	r0, [pc, #380]	; (800c218 <SVCCTL_InitCustomSvc+0x218>)
 800c09a:	f000 fec9 	bl	800ce30 <iprintf>
 800c09e:	4860      	ldr	r0, [pc, #384]	; (800c220 <SVCCTL_InitCustomSvc+0x220>)
 800c0a0:	f000 fec6 	bl	800ce30 <iprintf>
  }

  /**
   *  get_ssid
   */
  COPY_GET_SSID_UUID(uuid.Char_UUID_128);
 800c0a4:	2319      	movs	r3, #25
 800c0a6:	713b      	strb	r3, [r7, #4]
 800c0a8:	23ed      	movs	r3, #237	; 0xed
 800c0aa:	717b      	strb	r3, [r7, #5]
 800c0ac:	2382      	movs	r3, #130	; 0x82
 800c0ae:	71bb      	strb	r3, [r7, #6]
 800c0b0:	23ae      	movs	r3, #174	; 0xae
 800c0b2:	71fb      	strb	r3, [r7, #7]
 800c0b4:	23ed      	movs	r3, #237	; 0xed
 800c0b6:	723b      	strb	r3, [r7, #8]
 800c0b8:	2321      	movs	r3, #33	; 0x21
 800c0ba:	727b      	strb	r3, [r7, #9]
 800c0bc:	234c      	movs	r3, #76	; 0x4c
 800c0be:	72bb      	strb	r3, [r7, #10]
 800c0c0:	239d      	movs	r3, #157	; 0x9d
 800c0c2:	72fb      	strb	r3, [r7, #11]
 800c0c4:	2341      	movs	r3, #65	; 0x41
 800c0c6:	733b      	strb	r3, [r7, #12]
 800c0c8:	2345      	movs	r3, #69	; 0x45
 800c0ca:	737b      	strb	r3, [r7, #13]
 800c0cc:	2322      	movs	r3, #34	; 0x22
 800c0ce:	73bb      	strb	r3, [r7, #14]
 800c0d0:	238e      	movs	r3, #142	; 0x8e
 800c0d2:	73fb      	strb	r3, [r7, #15]
 800c0d4:	23cd      	movs	r3, #205	; 0xcd
 800c0d6:	743b      	strb	r3, [r7, #16]
 800c0d8:	23ab      	movs	r3, #171	; 0xab
 800c0da:	747b      	strb	r3, [r7, #17]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	74bb      	strb	r3, [r7, #18]
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 800c0e4:	4b49      	ldr	r3, [pc, #292]	; (800c20c <SVCCTL_InitCustomSvc+0x20c>)
 800c0e6:	8818      	ldrh	r0, [r3, #0]
 800c0e8:	4b4e      	ldr	r3, [pc, #312]	; (800c224 <SVCCTL_InitCustomSvc+0x224>)
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	1d3a      	adds	r2, r7, #4
 800c0f0:	494d      	ldr	r1, [pc, #308]	; (800c228 <SVCCTL_InitCustomSvc+0x228>)
 800c0f2:	9105      	str	r1, [sp, #20]
 800c0f4:	2101      	movs	r1, #1
 800c0f6:	9104      	str	r1, [sp, #16]
 800c0f8:	2110      	movs	r1, #16
 800c0fa:	9103      	str	r1, [sp, #12]
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	9102      	str	r1, [sp, #8]
 800c100:	2100      	movs	r1, #0
 800c102:	9101      	str	r1, [sp, #4]
 800c104:	2106      	movs	r1, #6
 800c106:	9100      	str	r1, [sp, #0]
 800c108:	2102      	movs	r1, #2
 800c10a:	f7fd f98b 	bl	8009424 <aci_gatt_add_char>
 800c10e:	4603      	mov	r3, r0
 800c110:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGssidHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c112:	7dfb      	ldrb	r3, [r7, #23]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d00f      	beq.n	800c138 <SVCCTL_InitCustomSvc+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GSSID, error code: 0x%x \n\r", ret);
 800c118:	483d      	ldr	r0, [pc, #244]	; (800c210 <SVCCTL_InitCustomSvc+0x210>)
 800c11a:	f7fe fc57 	bl	800a9cc <DbgTraceGetFileName>
 800c11e:	4601      	mov	r1, r0
 800c120:	f44f 738d 	mov.w	r3, #282	; 0x11a
 800c124:	4a3b      	ldr	r2, [pc, #236]	; (800c214 <SVCCTL_InitCustomSvc+0x214>)
 800c126:	483c      	ldr	r0, [pc, #240]	; (800c218 <SVCCTL_InitCustomSvc+0x218>)
 800c128:	f000 fe82 	bl	800ce30 <iprintf>
 800c12c:	7dfb      	ldrb	r3, [r7, #23]
 800c12e:	4619      	mov	r1, r3
 800c130:	483e      	ldr	r0, [pc, #248]	; (800c22c <SVCCTL_InitCustomSvc+0x22c>)
 800c132:	f000 fe7d 	bl	800ce30 <iprintf>
 800c136:	e00c      	b.n	800c152 <SVCCTL_InitCustomSvc+0x152>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GSSID \n\r");
 800c138:	4835      	ldr	r0, [pc, #212]	; (800c210 <SVCCTL_InitCustomSvc+0x210>)
 800c13a:	f7fe fc47 	bl	800a9cc <DbgTraceGetFileName>
 800c13e:	4601      	mov	r1, r0
 800c140:	f44f 738f 	mov.w	r3, #286	; 0x11e
 800c144:	4a33      	ldr	r2, [pc, #204]	; (800c214 <SVCCTL_InitCustomSvc+0x214>)
 800c146:	4834      	ldr	r0, [pc, #208]	; (800c218 <SVCCTL_InitCustomSvc+0x218>)
 800c148:	f000 fe72 	bl	800ce30 <iprintf>
 800c14c:	4838      	ldr	r0, [pc, #224]	; (800c230 <SVCCTL_InitCustomSvc+0x230>)
 800c14e:	f000 fe6f 	bl	800ce30 <iprintf>
  }
  /**
   *  get_password
   */
  COPY_GET_PASSWORD_UUID(uuid.Char_UUID_128);
 800c152:	2319      	movs	r3, #25
 800c154:	713b      	strb	r3, [r7, #4]
 800c156:	23ed      	movs	r3, #237	; 0xed
 800c158:	717b      	strb	r3, [r7, #5]
 800c15a:	2382      	movs	r3, #130	; 0x82
 800c15c:	71bb      	strb	r3, [r7, #6]
 800c15e:	23ae      	movs	r3, #174	; 0xae
 800c160:	71fb      	strb	r3, [r7, #7]
 800c162:	23ed      	movs	r3, #237	; 0xed
 800c164:	723b      	strb	r3, [r7, #8]
 800c166:	2321      	movs	r3, #33	; 0x21
 800c168:	727b      	strb	r3, [r7, #9]
 800c16a:	234c      	movs	r3, #76	; 0x4c
 800c16c:	72bb      	strb	r3, [r7, #10]
 800c16e:	239d      	movs	r3, #157	; 0x9d
 800c170:	72fb      	strb	r3, [r7, #11]
 800c172:	2341      	movs	r3, #65	; 0x41
 800c174:	733b      	strb	r3, [r7, #12]
 800c176:	2345      	movs	r3, #69	; 0x45
 800c178:	737b      	strb	r3, [r7, #13]
 800c17a:	2322      	movs	r3, #34	; 0x22
 800c17c:	73bb      	strb	r3, [r7, #14]
 800c17e:	238e      	movs	r3, #142	; 0x8e
 800c180:	73fb      	strb	r3, [r7, #15]
 800c182:	2334      	movs	r3, #52	; 0x34
 800c184:	743b      	strb	r3, [r7, #16]
 800c186:	2312      	movs	r3, #18
 800c188:	747b      	strb	r3, [r7, #17]
 800c18a:	2300      	movs	r3, #0
 800c18c:	74bb      	strb	r3, [r7, #18]
 800c18e:	2300      	movs	r3, #0
 800c190:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 800c192:	4b1e      	ldr	r3, [pc, #120]	; (800c20c <SVCCTL_InitCustomSvc+0x20c>)
 800c194:	8818      	ldrh	r0, [r3, #0]
 800c196:	4b27      	ldr	r3, [pc, #156]	; (800c234 <SVCCTL_InitCustomSvc+0x234>)
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	1d3a      	adds	r2, r7, #4
 800c19e:	4926      	ldr	r1, [pc, #152]	; (800c238 <SVCCTL_InitCustomSvc+0x238>)
 800c1a0:	9105      	str	r1, [sp, #20]
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	9104      	str	r1, [sp, #16]
 800c1a6:	2110      	movs	r1, #16
 800c1a8:	9103      	str	r1, [sp, #12]
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	9102      	str	r1, [sp, #8]
 800c1ae:	2100      	movs	r1, #0
 800c1b0:	9101      	str	r1, [sp, #4]
 800c1b2:	2106      	movs	r1, #6
 800c1b4:	9100      	str	r1, [sp, #0]
 800c1b6:	2102      	movs	r1, #2
 800c1b8:	f7fd f934 	bl	8009424 <aci_gatt_add_char>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGpassHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c1c0:	7dfb      	ldrb	r3, [r7, #23]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00f      	beq.n	800c1e6 <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GPASS, error code: 0x%x \n\r", ret);
 800c1c6:	4812      	ldr	r0, [pc, #72]	; (800c210 <SVCCTL_InitCustomSvc+0x210>)
 800c1c8:	f7fe fc00 	bl	800a9cc <DbgTraceGetFileName>
 800c1cc:	4601      	mov	r1, r0
 800c1ce:	f240 132f 	movw	r3, #303	; 0x12f
 800c1d2:	4a10      	ldr	r2, [pc, #64]	; (800c214 <SVCCTL_InitCustomSvc+0x214>)
 800c1d4:	4810      	ldr	r0, [pc, #64]	; (800c218 <SVCCTL_InitCustomSvc+0x218>)
 800c1d6:	f000 fe2b 	bl	800ce30 <iprintf>
 800c1da:	7dfb      	ldrb	r3, [r7, #23]
 800c1dc:	4619      	mov	r1, r3
 800c1de:	4817      	ldr	r0, [pc, #92]	; (800c23c <SVCCTL_InitCustomSvc+0x23c>)
 800c1e0:	f000 fe26 	bl	800ce30 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800c1e4:	e00d      	b.n	800c202 <SVCCTL_InitCustomSvc+0x202>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GPASS \n\r");
 800c1e6:	480a      	ldr	r0, [pc, #40]	; (800c210 <SVCCTL_InitCustomSvc+0x210>)
 800c1e8:	f7fe fbf0 	bl	800a9cc <DbgTraceGetFileName>
 800c1ec:	4601      	mov	r1, r0
 800c1ee:	f240 1333 	movw	r3, #307	; 0x133
 800c1f2:	4a08      	ldr	r2, [pc, #32]	; (800c214 <SVCCTL_InitCustomSvc+0x214>)
 800c1f4:	4808      	ldr	r0, [pc, #32]	; (800c218 <SVCCTL_InitCustomSvc+0x218>)
 800c1f6:	f000 fe1b 	bl	800ce30 <iprintf>
 800c1fa:	4811      	ldr	r0, [pc, #68]	; (800c240 <SVCCTL_InitCustomSvc+0x240>)
 800c1fc:	f000 fe18 	bl	800ce30 <iprintf>
  return;
 800c200:	bf00      	nop
}
 800c202:	3718      	adds	r7, #24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	0800bf25 	.word	0x0800bf25
 800c20c:	200024a8 	.word	0x200024a8
 800c210:	0800f8bc 	.word	0x0800f8bc
 800c214:	0800fe10 	.word	0x0800fe10
 800c218:	0800f8dc 	.word	0x0800f8dc
 800c21c:	0800f8f0 	.word	0x0800f8f0
 800c220:	0800f934 	.word	0x0800f934
 800c224:	20000029 	.word	0x20000029
 800c228:	200024aa 	.word	0x200024aa
 800c22c:	0800f964 	.word	0x0800f964
 800c230:	0800f9a8 	.word	0x0800f9a8
 800c234:	2000002a 	.word	0x2000002a
 800c238:	200024ac 	.word	0x200024ac
 800c23c:	0800f9dc 	.word	0x0800f9dc
 800c240:	0800fa20 	.word	0x0800fa20

0800c244 <LL_PWR_EnableBootC2>:
{
 800c244:	b480      	push	{r7}
 800c246:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c248:	4b05      	ldr	r3, [pc, #20]	; (800c260 <LL_PWR_EnableBootC2+0x1c>)
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	4a04      	ldr	r2, [pc, #16]	; (800c260 <LL_PWR_EnableBootC2+0x1c>)
 800c24e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c252:	60d3      	str	r3, [r2, #12]
}
 800c254:	bf00      	nop
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	58000400 	.word	0x58000400

0800c264 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c26c:	4b06      	ldr	r3, [pc, #24]	; (800c288 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c26e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c272:	4905      	ldr	r1, [pc, #20]	; (800c288 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4313      	orrs	r3, r2
 800c278:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800c27c:	bf00      	nop
 800c27e:	370c      	adds	r7, #12
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr
 800c288:	58000800 	.word	0x58000800

0800c28c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c294:	4b05      	ldr	r3, [pc, #20]	; (800c2ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c296:	6a1a      	ldr	r2, [r3, #32]
 800c298:	4904      	ldr	r1, [pc, #16]	; (800c2ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	620b      	str	r3, [r1, #32]
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	58000800 	.word	0x58000800

0800c2b0 <LL_AHB3_GRP1_EnableClock>:
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b085      	sub	sp, #20
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c2b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c2c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
}
 800c2d6:	bf00      	nop
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c2e2:	b480      	push	{r7}
 800c2e4:	b085      	sub	sp, #20
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c2ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c2ee:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c2f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c2fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c302:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4013      	ands	r3, r2
 800c30a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c30c:	68fb      	ldr	r3, [r7, #12]
}
 800c30e:	bf00      	nop
 800c310:	3714      	adds	r7, #20
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <LL_C1_IPCC_EnableIT_TXF>:
{
 800c31a:	b480      	push	{r7}
 800c31c:	b083      	sub	sp, #12
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	601a      	str	r2, [r3, #0]
}
 800c32e:	bf00      	nop
 800c330:	370c      	adds	r7, #12
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr

0800c33a <LL_C1_IPCC_EnableIT_RXO>:
{
 800c33a:	b480      	push	{r7}
 800c33c:	b083      	sub	sp, #12
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f043 0201 	orr.w	r2, r3, #1
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	601a      	str	r2, [r3, #0]
}
 800c34e:	bf00      	nop
 800c350:	370c      	adds	r7, #12
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr

0800c35a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800c35a:	b480      	push	{r7}
 800c35c:	b083      	sub	sp, #12
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685a      	ldr	r2, [r3, #4]
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	041b      	lsls	r3, r3, #16
 800c36c:	43db      	mvns	r3, r3
 800c36e:	401a      	ands	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	605a      	str	r2, [r3, #4]
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	041b      	lsls	r3, r3, #16
 800c392:	431a      	orrs	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	605a      	str	r2, [r3, #4]
}
 800c398:	bf00      	nop
 800c39a:	370c      	adds	r7, #12
 800c39c:	46bd      	mov	sp, r7
 800c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a2:	4770      	bx	lr

0800c3a4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	685a      	ldr	r2, [r3, #4]
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	43db      	mvns	r3, r3
 800c3b6:	401a      	ands	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	605a      	str	r2, [r3, #4]
}
 800c3bc:	bf00      	nop
 800c3be:	370c      	adds	r7, #12
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr

0800c3c8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	683a      	ldr	r2, [r7, #0]
 800c3d6:	609a      	str	r2, [r3, #8]
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <LL_C1_IPCC_SetFlag_CHx>:
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	041a      	lsls	r2, r3, #16
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	609a      	str	r2, [r3, #8]
}
 800c3f6:	bf00      	nop
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr

0800c402 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800c402:	b480      	push	{r7}
 800c404:	b083      	sub	sp, #12
 800c406:	af00      	add	r7, sp, #0
 800c408:	6078      	str	r0, [r7, #4]
 800c40a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	68da      	ldr	r2, [r3, #12]
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	4013      	ands	r3, r2
 800c414:	683a      	ldr	r2, [r7, #0]
 800c416:	429a      	cmp	r2, r3
 800c418:	d101      	bne.n	800c41e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c41a:	2301      	movs	r3, #1
 800c41c:	e000      	b.n	800c420 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	370c      	adds	r7, #12
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	69da      	ldr	r2, [r3, #28]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	4013      	ands	r3, r2
 800c43e:	683a      	ldr	r2, [r7, #0]
 800c440:	429a      	cmp	r2, r3
 800c442:	d101      	bne.n	800c448 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c444:	2301      	movs	r3, #1
 800c446:	e000      	b.n	800c44a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
	...

0800c458 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c45c:	2102      	movs	r1, #2
 800c45e:	4819      	ldr	r0, [pc, #100]	; (800c4c4 <HW_IPCC_Rx_Handler+0x6c>)
 800c460:	f7ff ffe4 	bl	800c42c <LL_C2_IPCC_IsActiveFlag_CHx>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d009      	beq.n	800c47e <HW_IPCC_Rx_Handler+0x26>
 800c46a:	4b16      	ldr	r3, [pc, #88]	; (800c4c4 <HW_IPCC_Rx_Handler+0x6c>)
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	43db      	mvns	r3, r3
 800c470:	f003 0302 	and.w	r3, r3, #2
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800c478:	f000 f8da 	bl	800c630 <HW_IPCC_SYS_EvtHandler>
 800c47c:	e01f      	b.n	800c4be <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c47e:	2101      	movs	r1, #1
 800c480:	4810      	ldr	r0, [pc, #64]	; (800c4c4 <HW_IPCC_Rx_Handler+0x6c>)
 800c482:	f7ff ffd3 	bl	800c42c <LL_C2_IPCC_IsActiveFlag_CHx>
 800c486:	4603      	mov	r3, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d008      	beq.n	800c49e <HW_IPCC_Rx_Handler+0x46>
 800c48c:	4b0d      	ldr	r3, [pc, #52]	; (800c4c4 <HW_IPCC_Rx_Handler+0x6c>)
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	d102      	bne.n	800c49e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800c498:	f000 f88e 	bl	800c5b8 <HW_IPCC_BLE_EvtHandler>
 800c49c:	e00f      	b.n	800c4be <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c49e:	2108      	movs	r1, #8
 800c4a0:	4808      	ldr	r0, [pc, #32]	; (800c4c4 <HW_IPCC_Rx_Handler+0x6c>)
 800c4a2:	f7ff ffc3 	bl	800c42c <LL_C2_IPCC_IsActiveFlag_CHx>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d009      	beq.n	800c4c0 <HW_IPCC_Rx_Handler+0x68>
 800c4ac:	4b05      	ldr	r3, [pc, #20]	; (800c4c4 <HW_IPCC_Rx_Handler+0x6c>)
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	43db      	mvns	r3, r3
 800c4b2:	f003 0308 	and.w	r3, r3, #8
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d002      	beq.n	800c4c0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c4ba:	f000 f905 	bl	800c6c8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c4be:	bf00      	nop
 800c4c0:	bf00      	nop
}
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	58000c00 	.word	0x58000c00

0800c4c8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c4cc:	2102      	movs	r1, #2
 800c4ce:	481a      	ldr	r0, [pc, #104]	; (800c538 <HW_IPCC_Tx_Handler+0x70>)
 800c4d0:	f7ff ff97 	bl	800c402 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d109      	bne.n	800c4ee <HW_IPCC_Tx_Handler+0x26>
 800c4da:	4b17      	ldr	r3, [pc, #92]	; (800c538 <HW_IPCC_Tx_Handler+0x70>)
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	43db      	mvns	r3, r3
 800c4e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c4e8:	f000 f896 	bl	800c618 <HW_IPCC_SYS_CmdEvtHandler>
 800c4ec:	e020      	b.n	800c530 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c4ee:	2108      	movs	r1, #8
 800c4f0:	4811      	ldr	r0, [pc, #68]	; (800c538 <HW_IPCC_Tx_Handler+0x70>)
 800c4f2:	f7ff ff86 	bl	800c402 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d109      	bne.n	800c510 <HW_IPCC_Tx_Handler+0x48>
 800c4fc:	4b0e      	ldr	r3, [pc, #56]	; (800c538 <HW_IPCC_Tx_Handler+0x70>)
 800c4fe:	685b      	ldr	r3, [r3, #4]
 800c500:	43db      	mvns	r3, r3
 800c502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c506:	2b00      	cmp	r3, #0
 800c508:	d002      	beq.n	800c510 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c50a:	f000 f8bf 	bl	800c68c <HW_IPCC_MM_FreeBufHandler>
 800c50e:	e00f      	b.n	800c530 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c510:	2120      	movs	r1, #32
 800c512:	4809      	ldr	r0, [pc, #36]	; (800c538 <HW_IPCC_Tx_Handler+0x70>)
 800c514:	f7ff ff75 	bl	800c402 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d109      	bne.n	800c532 <HW_IPCC_Tx_Handler+0x6a>
 800c51e:	4b06      	ldr	r3, [pc, #24]	; (800c538 <HW_IPCC_Tx_Handler+0x70>)
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	43db      	mvns	r3, r3
 800c524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c52c:	f000 f850 	bl	800c5d0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c530:	bf00      	nop
 800c532:	bf00      	nop
}
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	58000c00 	.word	0x58000c00

0800c53c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c540:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c544:	f7ff fecd 	bl	800c2e2 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c548:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c54c:	f7ff fe9e 	bl	800c28c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c550:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c554:	f7ff fe86 	bl	800c264 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c558:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c55a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c55c:	f7ff fe72 	bl	800c244 <LL_PWR_EnableBootC2>

  return;
 800c560:	bf00      	nop
}
 800c562:	bd80      	pop	{r7, pc}

0800c564 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c568:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c56c:	f7ff fea0 	bl	800c2b0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c570:	4806      	ldr	r0, [pc, #24]	; (800c58c <HW_IPCC_Init+0x28>)
 800c572:	f7ff fee2 	bl	800c33a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c576:	4805      	ldr	r0, [pc, #20]	; (800c58c <HW_IPCC_Init+0x28>)
 800c578:	f7ff fecf 	bl	800c31a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c57c:	202c      	movs	r0, #44	; 0x2c
 800c57e:	f7f6 fffe 	bl	800357e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c582:	202d      	movs	r0, #45	; 0x2d
 800c584:	f7f6 fffb 	bl	800357e <HAL_NVIC_EnableIRQ>

  return;
 800c588:	bf00      	nop
}
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	58000c00 	.word	0x58000c00

0800c590 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c594:	2101      	movs	r1, #1
 800c596:	4802      	ldr	r0, [pc, #8]	; (800c5a0 <HW_IPCC_BLE_Init+0x10>)
 800c598:	f7ff ff04 	bl	800c3a4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c59c:	bf00      	nop
}
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	58000c00 	.word	0x58000c00

0800c5a4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c5a8:	2101      	movs	r1, #1
 800c5aa:	4802      	ldr	r0, [pc, #8]	; (800c5b4 <HW_IPCC_BLE_SendCmd+0x10>)
 800c5ac:	f7ff ff1a 	bl	800c3e4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c5b0:	bf00      	nop
}
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	58000c00 	.word	0x58000c00

0800c5b8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c5bc:	f7fe f84e 	bl	800a65c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	4802      	ldr	r0, [pc, #8]	; (800c5cc <HW_IPCC_BLE_EvtHandler+0x14>)
 800c5c4:	f7ff ff00 	bl	800c3c8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c5c8:	bf00      	nop
}
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	58000c00 	.word	0x58000c00

0800c5d0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c5d4:	2120      	movs	r1, #32
 800c5d6:	4803      	ldr	r0, [pc, #12]	; (800c5e4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c5d8:	f7ff fed2 	bl	800c380 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c5dc:	f7fe f86e 	bl	800a6bc <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c5e0:	bf00      	nop
}
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	58000c00 	.word	0x58000c00

0800c5e8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c5ec:	2102      	movs	r1, #2
 800c5ee:	4802      	ldr	r0, [pc, #8]	; (800c5f8 <HW_IPCC_SYS_Init+0x10>)
 800c5f0:	f7ff fed8 	bl	800c3a4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c5f4:	bf00      	nop
}
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	58000c00 	.word	0x58000c00

0800c5fc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c600:	2102      	movs	r1, #2
 800c602:	4804      	ldr	r0, [pc, #16]	; (800c614 <HW_IPCC_SYS_SendCmd+0x18>)
 800c604:	f7ff feee 	bl	800c3e4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c608:	2102      	movs	r1, #2
 800c60a:	4802      	ldr	r0, [pc, #8]	; (800c614 <HW_IPCC_SYS_SendCmd+0x18>)
 800c60c:	f7ff fea5 	bl	800c35a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c610:	bf00      	nop
}
 800c612:	bd80      	pop	{r7, pc}
 800c614:	58000c00 	.word	0x58000c00

0800c618 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c61c:	2102      	movs	r1, #2
 800c61e:	4803      	ldr	r0, [pc, #12]	; (800c62c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c620:	f7ff feae 	bl	800c380 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c624:	f7fe f89a 	bl	800a75c <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c628:	bf00      	nop
}
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	58000c00 	.word	0x58000c00

0800c630 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c634:	f7fe f8a8 	bl	800a788 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c638:	2102      	movs	r1, #2
 800c63a:	4802      	ldr	r0, [pc, #8]	; (800c644 <HW_IPCC_SYS_EvtHandler+0x14>)
 800c63c:	f7ff fec4 	bl	800c3c8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c640:	bf00      	nop
}
 800c642:	bd80      	pop	{r7, pc}
 800c644:	58000c00 	.word	0x58000c00

0800c648 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c650:	2108      	movs	r1, #8
 800c652:	480c      	ldr	r0, [pc, #48]	; (800c684 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c654:	f7ff fed5 	bl	800c402 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d007      	beq.n	800c66e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c65e:	4a0a      	ldr	r2, [pc, #40]	; (800c688 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c664:	2108      	movs	r1, #8
 800c666:	4807      	ldr	r0, [pc, #28]	; (800c684 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c668:	f7ff fe77 	bl	800c35a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c66c:	e006      	b.n	800c67c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c672:	2108      	movs	r1, #8
 800c674:	4803      	ldr	r0, [pc, #12]	; (800c684 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c676:	f7ff feb5 	bl	800c3e4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c67a:	bf00      	nop
}
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	58000c00 	.word	0x58000c00
 800c688:	200024b0 	.word	0x200024b0

0800c68c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c690:	2108      	movs	r1, #8
 800c692:	4806      	ldr	r0, [pc, #24]	; (800c6ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c694:	f7ff fe74 	bl	800c380 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c698:	4b05      	ldr	r3, [pc, #20]	; (800c6b0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c69e:	2108      	movs	r1, #8
 800c6a0:	4802      	ldr	r0, [pc, #8]	; (800c6ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c6a2:	f7ff fe9f 	bl	800c3e4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c6a6:	bf00      	nop
}
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	58000c00 	.word	0x58000c00
 800c6b0:	200024b0 	.word	0x200024b0

0800c6b4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c6b8:	2108      	movs	r1, #8
 800c6ba:	4802      	ldr	r0, [pc, #8]	; (800c6c4 <HW_IPCC_TRACES_Init+0x10>)
 800c6bc:	f7ff fe72 	bl	800c3a4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c6c0:	bf00      	nop
}
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	58000c00 	.word	0x58000c00

0800c6c8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c6cc:	f7fe f904 	bl	800a8d8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c6d0:	2108      	movs	r1, #8
 800c6d2:	4802      	ldr	r0, [pc, #8]	; (800c6dc <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c6d4:	f7ff fe78 	bl	800c3c8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c6d8:	bf00      	nop
}
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	58000c00 	.word	0x58000c00

0800c6e0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c6e4:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <UTIL_LPM_Init+0x1c>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c6ea:	4b05      	ldr	r3, [pc, #20]	; (800c700 <UTIL_LPM_Init+0x20>)
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c6f0:	bf00      	nop
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	200024b4 	.word	0x200024b4
 800c700:	200024b8 	.word	0x200024b8

0800c704 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c704:	b480      	push	{r7}
 800c706:	b087      	sub	sp, #28
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	460b      	mov	r3, r1
 800c70e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c710:	f3ef 8310 	mrs	r3, PRIMASK
 800c714:	613b      	str	r3, [r7, #16]
  return(result);
 800c716:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c718:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c71a:	b672      	cpsid	i
}
 800c71c:	bf00      	nop
  
  switch(state)
 800c71e:	78fb      	ldrb	r3, [r7, #3]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d008      	beq.n	800c736 <UTIL_LPM_SetOffMode+0x32>
 800c724:	2b01      	cmp	r3, #1
 800c726:	d10e      	bne.n	800c746 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c728:	4b0d      	ldr	r3, [pc, #52]	; (800c760 <UTIL_LPM_SetOffMode+0x5c>)
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4313      	orrs	r3, r2
 800c730:	4a0b      	ldr	r2, [pc, #44]	; (800c760 <UTIL_LPM_SetOffMode+0x5c>)
 800c732:	6013      	str	r3, [r2, #0]
      break;
 800c734:	e008      	b.n	800c748 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	43da      	mvns	r2, r3
 800c73a:	4b09      	ldr	r3, [pc, #36]	; (800c760 <UTIL_LPM_SetOffMode+0x5c>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4013      	ands	r3, r2
 800c740:	4a07      	ldr	r2, [pc, #28]	; (800c760 <UTIL_LPM_SetOffMode+0x5c>)
 800c742:	6013      	str	r3, [r2, #0]
      break;
 800c744:	e000      	b.n	800c748 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c746:	bf00      	nop
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f383 8810 	msr	PRIMASK, r3
}
 800c752:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c754:	bf00      	nop
 800c756:	371c      	adds	r7, #28
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	200024b8 	.word	0x200024b8

0800c764 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b090      	sub	sp, #64	; 0x40
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c76c:	4b73      	ldr	r3, [pc, #460]	; (800c93c <UTIL_SEQ_Run+0x1d8>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c772:	4b72      	ldr	r3, [pc, #456]	; (800c93c <UTIL_SEQ_Run+0x1d8>)
 800c774:	681a      	ldr	r2, [r3, #0]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4013      	ands	r3, r2
 800c77a:	4a70      	ldr	r2, [pc, #448]	; (800c93c <UTIL_SEQ_Run+0x1d8>)
 800c77c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c77e:	4b70      	ldr	r3, [pc, #448]	; (800c940 <UTIL_SEQ_Run+0x1dc>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c784:	4b6f      	ldr	r3, [pc, #444]	; (800c944 <UTIL_SEQ_Run+0x1e0>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c78a:	4b6f      	ldr	r3, [pc, #444]	; (800c948 <UTIL_SEQ_Run+0x1e4>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c790:	4b6e      	ldr	r3, [pc, #440]	; (800c94c <UTIL_SEQ_Run+0x1e8>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c796:	e08d      	b.n	800c8b4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c798:	2300      	movs	r3, #0
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c79c:	e002      	b.n	800c7a4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c7a4:	4a6a      	ldr	r2, [pc, #424]	; (800c950 <UTIL_SEQ_Run+0x1ec>)
 800c7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ae:	401a      	ands	r2, r3
 800c7b0:	4b62      	ldr	r3, [pc, #392]	; (800c93c <UTIL_SEQ_Run+0x1d8>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0f1      	beq.n	800c79e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c7ba:	4a65      	ldr	r2, [pc, #404]	; (800c950 <UTIL_SEQ_Run+0x1ec>)
 800c7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	401a      	ands	r2, r3
 800c7c6:	4b5d      	ldr	r3, [pc, #372]	; (800c93c <UTIL_SEQ_Run+0x1d8>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c7ce:	4a60      	ldr	r2, [pc, #384]	; (800c950 <UTIL_SEQ_Run+0x1ec>)
 800c7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7d2:	00db      	lsls	r3, r3, #3
 800c7d4:	4413      	add	r3, r2
 800c7d6:	685a      	ldr	r2, [r3, #4]
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7da:	4013      	ands	r3, r2
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d106      	bne.n	800c7ee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c7e0:	4a5b      	ldr	r2, [pc, #364]	; (800c950 <UTIL_SEQ_Run+0x1ec>)
 800c7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7e4:	00db      	lsls	r3, r3, #3
 800c7e6:	4413      	add	r3, r2
 800c7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ec:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c7ee:	4a58      	ldr	r2, [pc, #352]	; (800c950 <UTIL_SEQ_Run+0x1ec>)
 800c7f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f2:	00db      	lsls	r3, r3, #3
 800c7f4:	4413      	add	r3, r2
 800c7f6:	685a      	ldr	r2, [r3, #4]
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fa:	4013      	ands	r3, r2
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 f9b3 	bl	800cb68 <SEQ_BitPosition>
 800c802:	4603      	mov	r3, r0
 800c804:	461a      	mov	r2, r3
 800c806:	4b53      	ldr	r3, [pc, #332]	; (800c954 <UTIL_SEQ_Run+0x1f0>)
 800c808:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c80a:	4a51      	ldr	r2, [pc, #324]	; (800c950 <UTIL_SEQ_Run+0x1ec>)
 800c80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c80e:	00db      	lsls	r3, r3, #3
 800c810:	4413      	add	r3, r2
 800c812:	685a      	ldr	r2, [r3, #4]
 800c814:	4b4f      	ldr	r3, [pc, #316]	; (800c954 <UTIL_SEQ_Run+0x1f0>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2101      	movs	r1, #1
 800c81a:	fa01 f303 	lsl.w	r3, r1, r3
 800c81e:	43db      	mvns	r3, r3
 800c820:	401a      	ands	r2, r3
 800c822:	494b      	ldr	r1, [pc, #300]	; (800c950 <UTIL_SEQ_Run+0x1ec>)
 800c824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c826:	00db      	lsls	r3, r3, #3
 800c828:	440b      	add	r3, r1
 800c82a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c82c:	f3ef 8310 	mrs	r3, PRIMASK
 800c830:	61bb      	str	r3, [r7, #24]
  return(result);
 800c832:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c834:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c836:	b672      	cpsid	i
}
 800c838:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c83a:	4b46      	ldr	r3, [pc, #280]	; (800c954 <UTIL_SEQ_Run+0x1f0>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2201      	movs	r2, #1
 800c840:	fa02 f303 	lsl.w	r3, r2, r3
 800c844:	43da      	mvns	r2, r3
 800c846:	4b3e      	ldr	r3, [pc, #248]	; (800c940 <UTIL_SEQ_Run+0x1dc>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4013      	ands	r3, r2
 800c84c:	4a3c      	ldr	r2, [pc, #240]	; (800c940 <UTIL_SEQ_Run+0x1dc>)
 800c84e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c850:	2302      	movs	r3, #2
 800c852:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c854:	e013      	b.n	800c87e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c858:	3b01      	subs	r3, #1
 800c85a:	4a3d      	ldr	r2, [pc, #244]	; (800c950 <UTIL_SEQ_Run+0x1ec>)
 800c85c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c860:	4b3c      	ldr	r3, [pc, #240]	; (800c954 <UTIL_SEQ_Run+0x1f0>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2201      	movs	r2, #1
 800c866:	fa02 f303 	lsl.w	r3, r2, r3
 800c86a:	43da      	mvns	r2, r3
 800c86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c86e:	3b01      	subs	r3, #1
 800c870:	400a      	ands	r2, r1
 800c872:	4937      	ldr	r1, [pc, #220]	; (800c950 <UTIL_SEQ_Run+0x1ec>)
 800c874:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c87a:	3b01      	subs	r3, #1
 800c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1e8      	bne.n	800c856 <UTIL_SEQ_Run+0xf2>
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	f383 8810 	msr	PRIMASK, r3
}
 800c88e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c890:	4b30      	ldr	r3, [pc, #192]	; (800c954 <UTIL_SEQ_Run+0x1f0>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a30      	ldr	r2, [pc, #192]	; (800c958 <UTIL_SEQ_Run+0x1f4>)
 800c896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c89a:	4798      	blx	r3

    local_taskset = TaskSet;
 800c89c:	4b28      	ldr	r3, [pc, #160]	; (800c940 <UTIL_SEQ_Run+0x1dc>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c8a2:	4b28      	ldr	r3, [pc, #160]	; (800c944 <UTIL_SEQ_Run+0x1e0>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c8a8:	4b27      	ldr	r3, [pc, #156]	; (800c948 <UTIL_SEQ_Run+0x1e4>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c8ae:	4b27      	ldr	r3, [pc, #156]	; (800c94c <UTIL_SEQ_Run+0x1e8>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c8b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b8:	401a      	ands	r2, r3
 800c8ba:	4b20      	ldr	r3, [pc, #128]	; (800c93c <UTIL_SEQ_Run+0x1d8>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4013      	ands	r3, r2
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d005      	beq.n	800c8d0 <UTIL_SEQ_Run+0x16c>
 800c8c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f43f af64 	beq.w	800c798 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c8d0:	4b20      	ldr	r3, [pc, #128]	; (800c954 <UTIL_SEQ_Run+0x1f0>)
 800c8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8d6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c8d8:	f000 f938 	bl	800cb4c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800c8e0:	613b      	str	r3, [r7, #16]
  return(result);
 800c8e2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c8e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8e6:	b672      	cpsid	i
}
 800c8e8:	bf00      	nop
  local_taskset = TaskSet;
 800c8ea:	4b15      	ldr	r3, [pc, #84]	; (800c940 <UTIL_SEQ_Run+0x1dc>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c8f0:	4b14      	ldr	r3, [pc, #80]	; (800c944 <UTIL_SEQ_Run+0x1e0>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c8f6:	4b14      	ldr	r3, [pc, #80]	; (800c948 <UTIL_SEQ_Run+0x1e4>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c8fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c900:	401a      	ands	r2, r3
 800c902:	4b0e      	ldr	r3, [pc, #56]	; (800c93c <UTIL_SEQ_Run+0x1d8>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4013      	ands	r3, r2
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d107      	bne.n	800c91c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c90c:	4b0f      	ldr	r3, [pc, #60]	; (800c94c <UTIL_SEQ_Run+0x1e8>)
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c912:	4013      	ands	r3, r2
 800c914:	2b00      	cmp	r3, #0
 800c916:	d101      	bne.n	800c91c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c918:	f7f4 fe6f 	bl	80015fa <UTIL_SEQ_Idle>
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f383 8810 	msr	PRIMASK, r3
}
 800c926:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c928:	f000 f917 	bl	800cb5a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c92c:	4a03      	ldr	r2, [pc, #12]	; (800c93c <UTIL_SEQ_Run+0x1d8>)
 800c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c930:	6013      	str	r3, [r2, #0]

  return;
 800c932:	bf00      	nop
}
 800c934:	3740      	adds	r7, #64	; 0x40
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}
 800c93a:	bf00      	nop
 800c93c:	20000030 	.word	0x20000030
 800c940:	200024bc 	.word	0x200024bc
 800c944:	200024c0 	.word	0x200024c0
 800c948:	2000002c 	.word	0x2000002c
 800c94c:	200024c4 	.word	0x200024c4
 800c950:	2000254c 	.word	0x2000254c
 800c954:	200024c8 	.word	0x200024c8
 800c958:	200024cc 	.word	0x200024cc

0800c95c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b088      	sub	sp, #32
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c968:	f3ef 8310 	mrs	r3, PRIMASK
 800c96c:	617b      	str	r3, [r7, #20]
  return(result);
 800c96e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c972:	b672      	cpsid	i
}
 800c974:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f000 f8f6 	bl	800cb68 <SEQ_BitPosition>
 800c97c:	4603      	mov	r3, r0
 800c97e:	4619      	mov	r1, r3
 800c980:	4a06      	ldr	r2, [pc, #24]	; (800c99c <UTIL_SEQ_RegTask+0x40>)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	f383 8810 	msr	PRIMASK, r3
}
 800c992:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c994:	bf00      	nop
}
 800c996:	3720      	adds	r7, #32
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	200024cc 	.word	0x200024cc

0800c9a0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b087      	sub	sp, #28
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9aa:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c9b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9b4:	b672      	cpsid	i
}
 800c9b6:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c9b8:	4b0d      	ldr	r3, [pc, #52]	; (800c9f0 <UTIL_SEQ_SetTask+0x50>)
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	4a0b      	ldr	r2, [pc, #44]	; (800c9f0 <UTIL_SEQ_SetTask+0x50>)
 800c9c2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c9c4:	4a0b      	ldr	r2, [pc, #44]	; (800c9f4 <UTIL_SEQ_SetTask+0x54>)
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	431a      	orrs	r2, r3
 800c9d0:	4908      	ldr	r1, [pc, #32]	; (800c9f4 <UTIL_SEQ_SetTask+0x54>)
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f383 8810 	msr	PRIMASK, r3
}
 800c9e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c9e4:	bf00      	nop
}
 800c9e6:	371c      	adds	r7, #28
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ee:	4770      	bx	lr
 800c9f0:	200024bc 	.word	0x200024bc
 800c9f4:	2000254c 	.word	0x2000254c

0800c9f8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b087      	sub	sp, #28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca00:	f3ef 8310 	mrs	r3, PRIMASK
 800ca04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca06:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ca08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca0a:	b672      	cpsid	i
}
 800ca0c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	43da      	mvns	r2, r3
 800ca12:	4b08      	ldr	r3, [pc, #32]	; (800ca34 <UTIL_SEQ_PauseTask+0x3c>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4013      	ands	r3, r2
 800ca18:	4a06      	ldr	r2, [pc, #24]	; (800ca34 <UTIL_SEQ_PauseTask+0x3c>)
 800ca1a:	6013      	str	r3, [r2, #0]
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	f383 8810 	msr	PRIMASK, r3
}
 800ca26:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ca28:	bf00      	nop
}
 800ca2a:	371c      	adds	r7, #28
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr
 800ca34:	2000002c 	.word	0x2000002c

0800ca38 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b087      	sub	sp, #28
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca40:	f3ef 8310 	mrs	r3, PRIMASK
 800ca44:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca46:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ca48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca4a:	b672      	cpsid	i
}
 800ca4c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ca4e:	4b09      	ldr	r3, [pc, #36]	; (800ca74 <UTIL_SEQ_ResumeTask+0x3c>)
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4313      	orrs	r3, r2
 800ca56:	4a07      	ldr	r2, [pc, #28]	; (800ca74 <UTIL_SEQ_ResumeTask+0x3c>)
 800ca58:	6013      	str	r3, [r2, #0]
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	f383 8810 	msr	PRIMASK, r3
}
 800ca64:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ca66:	bf00      	nop
}
 800ca68:	371c      	adds	r7, #28
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	2000002c 	.word	0x2000002c

0800ca78 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca80:	f3ef 8310 	mrs	r3, PRIMASK
 800ca84:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca86:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ca88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca8a:	b672      	cpsid	i
}
 800ca8c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ca8e:	4b09      	ldr	r3, [pc, #36]	; (800cab4 <UTIL_SEQ_SetEvt+0x3c>)
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	4313      	orrs	r3, r2
 800ca96:	4a07      	ldr	r2, [pc, #28]	; (800cab4 <UTIL_SEQ_SetEvt+0x3c>)
 800ca98:	6013      	str	r3, [r2, #0]
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	f383 8810 	msr	PRIMASK, r3
}
 800caa4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800caa6:	bf00      	nop
}
 800caa8:	371c      	adds	r7, #28
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	200024c0 	.word	0x200024c0

0800cab8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b088      	sub	sp, #32
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800cac0:	4b1f      	ldr	r3, [pc, #124]	; (800cb40 <UTIL_SEQ_WaitEvt+0x88>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800cac6:	4b1e      	ldr	r3, [pc, #120]	; (800cb40 <UTIL_SEQ_WaitEvt+0x88>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cace:	d102      	bne.n	800cad6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800cad0:	2300      	movs	r3, #0
 800cad2:	61fb      	str	r3, [r7, #28]
 800cad4:	e005      	b.n	800cae2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800cad6:	4b1a      	ldr	r3, [pc, #104]	; (800cb40 <UTIL_SEQ_WaitEvt+0x88>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2201      	movs	r2, #1
 800cadc:	fa02 f303 	lsl.w	r3, r2, r3
 800cae0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800cae2:	4b18      	ldr	r3, [pc, #96]	; (800cb44 <UTIL_SEQ_WaitEvt+0x8c>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800cae8:	4a16      	ldr	r2, [pc, #88]	; (800cb44 <UTIL_SEQ_WaitEvt+0x8c>)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800caee:	e003      	b.n	800caf8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800caf0:	6879      	ldr	r1, [r7, #4]
 800caf2:	69f8      	ldr	r0, [r7, #28]
 800caf4:	f7f4 fd88 	bl	8001608 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800caf8:	4b13      	ldr	r3, [pc, #76]	; (800cb48 <UTIL_SEQ_WaitEvt+0x90>)
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4013      	ands	r3, r2
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0f5      	beq.n	800caf0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800cb04:	4a0e      	ldr	r2, [pc, #56]	; (800cb40 <UTIL_SEQ_WaitEvt+0x88>)
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb0a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb0e:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb10:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cb12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb14:	b672      	cpsid	i
}
 800cb16:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	43da      	mvns	r2, r3
 800cb1c:	4b0a      	ldr	r3, [pc, #40]	; (800cb48 <UTIL_SEQ_WaitEvt+0x90>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4013      	ands	r3, r2
 800cb22:	4a09      	ldr	r2, [pc, #36]	; (800cb48 <UTIL_SEQ_WaitEvt+0x90>)
 800cb24:	6013      	str	r3, [r2, #0]
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f383 8810 	msr	PRIMASK, r3
}
 800cb30:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800cb32:	4a04      	ldr	r2, [pc, #16]	; (800cb44 <UTIL_SEQ_WaitEvt+0x8c>)
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	6013      	str	r3, [r2, #0]
  return;
 800cb38:	bf00      	nop
}
 800cb3a:	3720      	adds	r7, #32
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	200024c8 	.word	0x200024c8
 800cb44:	200024c4 	.word	0x200024c4
 800cb48:	200024c0 	.word	0x200024c0

0800cb4c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cb50:	bf00      	nop
}
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr

0800cb5a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800cb5a:	b480      	push	{r7}
 800cb5c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800cb5e:	bf00      	nop
}
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	0c1b      	lsrs	r3, r3, #16
 800cb7c:	041b      	lsls	r3, r3, #16
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d104      	bne.n	800cb8c <SEQ_BitPosition+0x24>
 800cb82:	2310      	movs	r3, #16
 800cb84:	73fb      	strb	r3, [r7, #15]
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	041b      	lsls	r3, r3, #16
 800cb8a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d105      	bne.n	800cba2 <SEQ_BitPosition+0x3a>
 800cb96:	7bfb      	ldrb	r3, [r7, #15]
 800cb98:	3308      	adds	r3, #8
 800cb9a:	73fb      	strb	r3, [r7, #15]
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	021b      	lsls	r3, r3, #8
 800cba0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d105      	bne.n	800cbb8 <SEQ_BitPosition+0x50>
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	3304      	adds	r3, #4
 800cbb0:	73fb      	strb	r3, [r7, #15]
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	011b      	lsls	r3, r3, #4
 800cbb6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	0f1b      	lsrs	r3, r3, #28
 800cbbc:	4a07      	ldr	r2, [pc, #28]	; (800cbdc <SEQ_BitPosition+0x74>)
 800cbbe:	5cd2      	ldrb	r2, [r2, r3]
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
 800cbc2:	4413      	add	r3, r2
 800cbc4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800cbc6:	7bfb      	ldrb	r3, [r7, #15]
 800cbc8:	f1c3 031f 	rsb	r3, r3, #31
 800cbcc:	b2db      	uxtb	r3, r3
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3714      	adds	r7, #20
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	0800fe28 	.word	0x0800fe28

0800cbe0 <__errno>:
 800cbe0:	4b01      	ldr	r3, [pc, #4]	; (800cbe8 <__errno+0x8>)
 800cbe2:	6818      	ldr	r0, [r3, #0]
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	20000034 	.word	0x20000034

0800cbec <__libc_init_array>:
 800cbec:	b570      	push	{r4, r5, r6, lr}
 800cbee:	4d0d      	ldr	r5, [pc, #52]	; (800cc24 <__libc_init_array+0x38>)
 800cbf0:	4c0d      	ldr	r4, [pc, #52]	; (800cc28 <__libc_init_array+0x3c>)
 800cbf2:	1b64      	subs	r4, r4, r5
 800cbf4:	10a4      	asrs	r4, r4, #2
 800cbf6:	2600      	movs	r6, #0
 800cbf8:	42a6      	cmp	r6, r4
 800cbfa:	d109      	bne.n	800cc10 <__libc_init_array+0x24>
 800cbfc:	4d0b      	ldr	r5, [pc, #44]	; (800cc2c <__libc_init_array+0x40>)
 800cbfe:	4c0c      	ldr	r4, [pc, #48]	; (800cc30 <__libc_init_array+0x44>)
 800cc00:	f001 fabc 	bl	800e17c <_init>
 800cc04:	1b64      	subs	r4, r4, r5
 800cc06:	10a4      	asrs	r4, r4, #2
 800cc08:	2600      	movs	r6, #0
 800cc0a:	42a6      	cmp	r6, r4
 800cc0c:	d105      	bne.n	800cc1a <__libc_init_array+0x2e>
 800cc0e:	bd70      	pop	{r4, r5, r6, pc}
 800cc10:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc14:	4798      	blx	r3
 800cc16:	3601      	adds	r6, #1
 800cc18:	e7ee      	b.n	800cbf8 <__libc_init_array+0xc>
 800cc1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc1e:	4798      	blx	r3
 800cc20:	3601      	adds	r6, #1
 800cc22:	e7f2      	b.n	800cc0a <__libc_init_array+0x1e>
 800cc24:	0800fed8 	.word	0x0800fed8
 800cc28:	0800fed8 	.word	0x0800fed8
 800cc2c:	0800fed8 	.word	0x0800fed8
 800cc30:	0800fedc 	.word	0x0800fedc

0800cc34 <malloc>:
 800cc34:	4b02      	ldr	r3, [pc, #8]	; (800cc40 <malloc+0xc>)
 800cc36:	4601      	mov	r1, r0
 800cc38:	6818      	ldr	r0, [r3, #0]
 800cc3a:	f000 b885 	b.w	800cd48 <_malloc_r>
 800cc3e:	bf00      	nop
 800cc40:	20000034 	.word	0x20000034

0800cc44 <memcpy>:
 800cc44:	440a      	add	r2, r1
 800cc46:	4291      	cmp	r1, r2
 800cc48:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc4c:	d100      	bne.n	800cc50 <memcpy+0xc>
 800cc4e:	4770      	bx	lr
 800cc50:	b510      	push	{r4, lr}
 800cc52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc5a:	4291      	cmp	r1, r2
 800cc5c:	d1f9      	bne.n	800cc52 <memcpy+0xe>
 800cc5e:	bd10      	pop	{r4, pc}

0800cc60 <memset>:
 800cc60:	4402      	add	r2, r0
 800cc62:	4603      	mov	r3, r0
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d100      	bne.n	800cc6a <memset+0xa>
 800cc68:	4770      	bx	lr
 800cc6a:	f803 1b01 	strb.w	r1, [r3], #1
 800cc6e:	e7f9      	b.n	800cc64 <memset+0x4>

0800cc70 <_free_r>:
 800cc70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc72:	2900      	cmp	r1, #0
 800cc74:	d044      	beq.n	800cd00 <_free_r+0x90>
 800cc76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc7a:	9001      	str	r0, [sp, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f1a1 0404 	sub.w	r4, r1, #4
 800cc82:	bfb8      	it	lt
 800cc84:	18e4      	addlt	r4, r4, r3
 800cc86:	f000 fd49 	bl	800d71c <__malloc_lock>
 800cc8a:	4a1e      	ldr	r2, [pc, #120]	; (800cd04 <_free_r+0x94>)
 800cc8c:	9801      	ldr	r0, [sp, #4]
 800cc8e:	6813      	ldr	r3, [r2, #0]
 800cc90:	b933      	cbnz	r3, 800cca0 <_free_r+0x30>
 800cc92:	6063      	str	r3, [r4, #4]
 800cc94:	6014      	str	r4, [r2, #0]
 800cc96:	b003      	add	sp, #12
 800cc98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc9c:	f000 bd44 	b.w	800d728 <__malloc_unlock>
 800cca0:	42a3      	cmp	r3, r4
 800cca2:	d908      	bls.n	800ccb6 <_free_r+0x46>
 800cca4:	6825      	ldr	r5, [r4, #0]
 800cca6:	1961      	adds	r1, r4, r5
 800cca8:	428b      	cmp	r3, r1
 800ccaa:	bf01      	itttt	eq
 800ccac:	6819      	ldreq	r1, [r3, #0]
 800ccae:	685b      	ldreq	r3, [r3, #4]
 800ccb0:	1949      	addeq	r1, r1, r5
 800ccb2:	6021      	streq	r1, [r4, #0]
 800ccb4:	e7ed      	b.n	800cc92 <_free_r+0x22>
 800ccb6:	461a      	mov	r2, r3
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	b10b      	cbz	r3, 800ccc0 <_free_r+0x50>
 800ccbc:	42a3      	cmp	r3, r4
 800ccbe:	d9fa      	bls.n	800ccb6 <_free_r+0x46>
 800ccc0:	6811      	ldr	r1, [r2, #0]
 800ccc2:	1855      	adds	r5, r2, r1
 800ccc4:	42a5      	cmp	r5, r4
 800ccc6:	d10b      	bne.n	800cce0 <_free_r+0x70>
 800ccc8:	6824      	ldr	r4, [r4, #0]
 800ccca:	4421      	add	r1, r4
 800cccc:	1854      	adds	r4, r2, r1
 800ccce:	42a3      	cmp	r3, r4
 800ccd0:	6011      	str	r1, [r2, #0]
 800ccd2:	d1e0      	bne.n	800cc96 <_free_r+0x26>
 800ccd4:	681c      	ldr	r4, [r3, #0]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	6053      	str	r3, [r2, #4]
 800ccda:	4421      	add	r1, r4
 800ccdc:	6011      	str	r1, [r2, #0]
 800ccde:	e7da      	b.n	800cc96 <_free_r+0x26>
 800cce0:	d902      	bls.n	800cce8 <_free_r+0x78>
 800cce2:	230c      	movs	r3, #12
 800cce4:	6003      	str	r3, [r0, #0]
 800cce6:	e7d6      	b.n	800cc96 <_free_r+0x26>
 800cce8:	6825      	ldr	r5, [r4, #0]
 800ccea:	1961      	adds	r1, r4, r5
 800ccec:	428b      	cmp	r3, r1
 800ccee:	bf04      	itt	eq
 800ccf0:	6819      	ldreq	r1, [r3, #0]
 800ccf2:	685b      	ldreq	r3, [r3, #4]
 800ccf4:	6063      	str	r3, [r4, #4]
 800ccf6:	bf04      	itt	eq
 800ccf8:	1949      	addeq	r1, r1, r5
 800ccfa:	6021      	streq	r1, [r4, #0]
 800ccfc:	6054      	str	r4, [r2, #4]
 800ccfe:	e7ca      	b.n	800cc96 <_free_r+0x26>
 800cd00:	b003      	add	sp, #12
 800cd02:	bd30      	pop	{r4, r5, pc}
 800cd04:	2000255c 	.word	0x2000255c

0800cd08 <sbrk_aligned>:
 800cd08:	b570      	push	{r4, r5, r6, lr}
 800cd0a:	4e0e      	ldr	r6, [pc, #56]	; (800cd44 <sbrk_aligned+0x3c>)
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	6831      	ldr	r1, [r6, #0]
 800cd10:	4605      	mov	r5, r0
 800cd12:	b911      	cbnz	r1, 800cd1a <sbrk_aligned+0x12>
 800cd14:	f000 f930 	bl	800cf78 <_sbrk_r>
 800cd18:	6030      	str	r0, [r6, #0]
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f000 f92b 	bl	800cf78 <_sbrk_r>
 800cd22:	1c43      	adds	r3, r0, #1
 800cd24:	d00a      	beq.n	800cd3c <sbrk_aligned+0x34>
 800cd26:	1cc4      	adds	r4, r0, #3
 800cd28:	f024 0403 	bic.w	r4, r4, #3
 800cd2c:	42a0      	cmp	r0, r4
 800cd2e:	d007      	beq.n	800cd40 <sbrk_aligned+0x38>
 800cd30:	1a21      	subs	r1, r4, r0
 800cd32:	4628      	mov	r0, r5
 800cd34:	f000 f920 	bl	800cf78 <_sbrk_r>
 800cd38:	3001      	adds	r0, #1
 800cd3a:	d101      	bne.n	800cd40 <sbrk_aligned+0x38>
 800cd3c:	f04f 34ff 	mov.w	r4, #4294967295
 800cd40:	4620      	mov	r0, r4
 800cd42:	bd70      	pop	{r4, r5, r6, pc}
 800cd44:	20002560 	.word	0x20002560

0800cd48 <_malloc_r>:
 800cd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4c:	1ccd      	adds	r5, r1, #3
 800cd4e:	f025 0503 	bic.w	r5, r5, #3
 800cd52:	3508      	adds	r5, #8
 800cd54:	2d0c      	cmp	r5, #12
 800cd56:	bf38      	it	cc
 800cd58:	250c      	movcc	r5, #12
 800cd5a:	2d00      	cmp	r5, #0
 800cd5c:	4607      	mov	r7, r0
 800cd5e:	db01      	blt.n	800cd64 <_malloc_r+0x1c>
 800cd60:	42a9      	cmp	r1, r5
 800cd62:	d905      	bls.n	800cd70 <_malloc_r+0x28>
 800cd64:	230c      	movs	r3, #12
 800cd66:	603b      	str	r3, [r7, #0]
 800cd68:	2600      	movs	r6, #0
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd70:	4e2e      	ldr	r6, [pc, #184]	; (800ce2c <_malloc_r+0xe4>)
 800cd72:	f000 fcd3 	bl	800d71c <__malloc_lock>
 800cd76:	6833      	ldr	r3, [r6, #0]
 800cd78:	461c      	mov	r4, r3
 800cd7a:	bb34      	cbnz	r4, 800cdca <_malloc_r+0x82>
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	4638      	mov	r0, r7
 800cd80:	f7ff ffc2 	bl	800cd08 <sbrk_aligned>
 800cd84:	1c43      	adds	r3, r0, #1
 800cd86:	4604      	mov	r4, r0
 800cd88:	d14d      	bne.n	800ce26 <_malloc_r+0xde>
 800cd8a:	6834      	ldr	r4, [r6, #0]
 800cd8c:	4626      	mov	r6, r4
 800cd8e:	2e00      	cmp	r6, #0
 800cd90:	d140      	bne.n	800ce14 <_malloc_r+0xcc>
 800cd92:	6823      	ldr	r3, [r4, #0]
 800cd94:	4631      	mov	r1, r6
 800cd96:	4638      	mov	r0, r7
 800cd98:	eb04 0803 	add.w	r8, r4, r3
 800cd9c:	f000 f8ec 	bl	800cf78 <_sbrk_r>
 800cda0:	4580      	cmp	r8, r0
 800cda2:	d13a      	bne.n	800ce1a <_malloc_r+0xd2>
 800cda4:	6821      	ldr	r1, [r4, #0]
 800cda6:	3503      	adds	r5, #3
 800cda8:	1a6d      	subs	r5, r5, r1
 800cdaa:	f025 0503 	bic.w	r5, r5, #3
 800cdae:	3508      	adds	r5, #8
 800cdb0:	2d0c      	cmp	r5, #12
 800cdb2:	bf38      	it	cc
 800cdb4:	250c      	movcc	r5, #12
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	4638      	mov	r0, r7
 800cdba:	f7ff ffa5 	bl	800cd08 <sbrk_aligned>
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	d02b      	beq.n	800ce1a <_malloc_r+0xd2>
 800cdc2:	6823      	ldr	r3, [r4, #0]
 800cdc4:	442b      	add	r3, r5
 800cdc6:	6023      	str	r3, [r4, #0]
 800cdc8:	e00e      	b.n	800cde8 <_malloc_r+0xa0>
 800cdca:	6822      	ldr	r2, [r4, #0]
 800cdcc:	1b52      	subs	r2, r2, r5
 800cdce:	d41e      	bmi.n	800ce0e <_malloc_r+0xc6>
 800cdd0:	2a0b      	cmp	r2, #11
 800cdd2:	d916      	bls.n	800ce02 <_malloc_r+0xba>
 800cdd4:	1961      	adds	r1, r4, r5
 800cdd6:	42a3      	cmp	r3, r4
 800cdd8:	6025      	str	r5, [r4, #0]
 800cdda:	bf18      	it	ne
 800cddc:	6059      	strne	r1, [r3, #4]
 800cdde:	6863      	ldr	r3, [r4, #4]
 800cde0:	bf08      	it	eq
 800cde2:	6031      	streq	r1, [r6, #0]
 800cde4:	5162      	str	r2, [r4, r5]
 800cde6:	604b      	str	r3, [r1, #4]
 800cde8:	4638      	mov	r0, r7
 800cdea:	f104 060b 	add.w	r6, r4, #11
 800cdee:	f000 fc9b 	bl	800d728 <__malloc_unlock>
 800cdf2:	f026 0607 	bic.w	r6, r6, #7
 800cdf6:	1d23      	adds	r3, r4, #4
 800cdf8:	1af2      	subs	r2, r6, r3
 800cdfa:	d0b6      	beq.n	800cd6a <_malloc_r+0x22>
 800cdfc:	1b9b      	subs	r3, r3, r6
 800cdfe:	50a3      	str	r3, [r4, r2]
 800ce00:	e7b3      	b.n	800cd6a <_malloc_r+0x22>
 800ce02:	6862      	ldr	r2, [r4, #4]
 800ce04:	42a3      	cmp	r3, r4
 800ce06:	bf0c      	ite	eq
 800ce08:	6032      	streq	r2, [r6, #0]
 800ce0a:	605a      	strne	r2, [r3, #4]
 800ce0c:	e7ec      	b.n	800cde8 <_malloc_r+0xa0>
 800ce0e:	4623      	mov	r3, r4
 800ce10:	6864      	ldr	r4, [r4, #4]
 800ce12:	e7b2      	b.n	800cd7a <_malloc_r+0x32>
 800ce14:	4634      	mov	r4, r6
 800ce16:	6876      	ldr	r6, [r6, #4]
 800ce18:	e7b9      	b.n	800cd8e <_malloc_r+0x46>
 800ce1a:	230c      	movs	r3, #12
 800ce1c:	603b      	str	r3, [r7, #0]
 800ce1e:	4638      	mov	r0, r7
 800ce20:	f000 fc82 	bl	800d728 <__malloc_unlock>
 800ce24:	e7a1      	b.n	800cd6a <_malloc_r+0x22>
 800ce26:	6025      	str	r5, [r4, #0]
 800ce28:	e7de      	b.n	800cde8 <_malloc_r+0xa0>
 800ce2a:	bf00      	nop
 800ce2c:	2000255c 	.word	0x2000255c

0800ce30 <iprintf>:
 800ce30:	b40f      	push	{r0, r1, r2, r3}
 800ce32:	4b0a      	ldr	r3, [pc, #40]	; (800ce5c <iprintf+0x2c>)
 800ce34:	b513      	push	{r0, r1, r4, lr}
 800ce36:	681c      	ldr	r4, [r3, #0]
 800ce38:	b124      	cbz	r4, 800ce44 <iprintf+0x14>
 800ce3a:	69a3      	ldr	r3, [r4, #24]
 800ce3c:	b913      	cbnz	r3, 800ce44 <iprintf+0x14>
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f000 fb54 	bl	800d4ec <__sinit>
 800ce44:	ab05      	add	r3, sp, #20
 800ce46:	9a04      	ldr	r2, [sp, #16]
 800ce48:	68a1      	ldr	r1, [r4, #8]
 800ce4a:	9301      	str	r3, [sp, #4]
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f000 fe25 	bl	800da9c <_vfiprintf_r>
 800ce52:	b002      	add	sp, #8
 800ce54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce58:	b004      	add	sp, #16
 800ce5a:	4770      	bx	lr
 800ce5c:	20000034 	.word	0x20000034

0800ce60 <putchar>:
 800ce60:	4b09      	ldr	r3, [pc, #36]	; (800ce88 <putchar+0x28>)
 800ce62:	b513      	push	{r0, r1, r4, lr}
 800ce64:	681c      	ldr	r4, [r3, #0]
 800ce66:	4601      	mov	r1, r0
 800ce68:	b134      	cbz	r4, 800ce78 <putchar+0x18>
 800ce6a:	69a3      	ldr	r3, [r4, #24]
 800ce6c:	b923      	cbnz	r3, 800ce78 <putchar+0x18>
 800ce6e:	9001      	str	r0, [sp, #4]
 800ce70:	4620      	mov	r0, r4
 800ce72:	f000 fb3b 	bl	800d4ec <__sinit>
 800ce76:	9901      	ldr	r1, [sp, #4]
 800ce78:	68a2      	ldr	r2, [r4, #8]
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	b002      	add	sp, #8
 800ce7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce82:	f001 b8cf 	b.w	800e024 <_putc_r>
 800ce86:	bf00      	nop
 800ce88:	20000034 	.word	0x20000034

0800ce8c <_puts_r>:
 800ce8c:	b570      	push	{r4, r5, r6, lr}
 800ce8e:	460e      	mov	r6, r1
 800ce90:	4605      	mov	r5, r0
 800ce92:	b118      	cbz	r0, 800ce9c <_puts_r+0x10>
 800ce94:	6983      	ldr	r3, [r0, #24]
 800ce96:	b90b      	cbnz	r3, 800ce9c <_puts_r+0x10>
 800ce98:	f000 fb28 	bl	800d4ec <__sinit>
 800ce9c:	69ab      	ldr	r3, [r5, #24]
 800ce9e:	68ac      	ldr	r4, [r5, #8]
 800cea0:	b913      	cbnz	r3, 800cea8 <_puts_r+0x1c>
 800cea2:	4628      	mov	r0, r5
 800cea4:	f000 fb22 	bl	800d4ec <__sinit>
 800cea8:	4b2c      	ldr	r3, [pc, #176]	; (800cf5c <_puts_r+0xd0>)
 800ceaa:	429c      	cmp	r4, r3
 800ceac:	d120      	bne.n	800cef0 <_puts_r+0x64>
 800ceae:	686c      	ldr	r4, [r5, #4]
 800ceb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ceb2:	07db      	lsls	r3, r3, #31
 800ceb4:	d405      	bmi.n	800cec2 <_puts_r+0x36>
 800ceb6:	89a3      	ldrh	r3, [r4, #12]
 800ceb8:	0598      	lsls	r0, r3, #22
 800ceba:	d402      	bmi.n	800cec2 <_puts_r+0x36>
 800cebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cebe:	f000 fbb3 	bl	800d628 <__retarget_lock_acquire_recursive>
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	0719      	lsls	r1, r3, #28
 800cec6:	d51d      	bpl.n	800cf04 <_puts_r+0x78>
 800cec8:	6923      	ldr	r3, [r4, #16]
 800ceca:	b1db      	cbz	r3, 800cf04 <_puts_r+0x78>
 800cecc:	3e01      	subs	r6, #1
 800cece:	68a3      	ldr	r3, [r4, #8]
 800ced0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ced4:	3b01      	subs	r3, #1
 800ced6:	60a3      	str	r3, [r4, #8]
 800ced8:	bb39      	cbnz	r1, 800cf2a <_puts_r+0x9e>
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	da38      	bge.n	800cf50 <_puts_r+0xc4>
 800cede:	4622      	mov	r2, r4
 800cee0:	210a      	movs	r1, #10
 800cee2:	4628      	mov	r0, r5
 800cee4:	f000 f906 	bl	800d0f4 <__swbuf_r>
 800cee8:	3001      	adds	r0, #1
 800ceea:	d011      	beq.n	800cf10 <_puts_r+0x84>
 800ceec:	250a      	movs	r5, #10
 800ceee:	e011      	b.n	800cf14 <_puts_r+0x88>
 800cef0:	4b1b      	ldr	r3, [pc, #108]	; (800cf60 <_puts_r+0xd4>)
 800cef2:	429c      	cmp	r4, r3
 800cef4:	d101      	bne.n	800cefa <_puts_r+0x6e>
 800cef6:	68ac      	ldr	r4, [r5, #8]
 800cef8:	e7da      	b.n	800ceb0 <_puts_r+0x24>
 800cefa:	4b1a      	ldr	r3, [pc, #104]	; (800cf64 <_puts_r+0xd8>)
 800cefc:	429c      	cmp	r4, r3
 800cefe:	bf08      	it	eq
 800cf00:	68ec      	ldreq	r4, [r5, #12]
 800cf02:	e7d5      	b.n	800ceb0 <_puts_r+0x24>
 800cf04:	4621      	mov	r1, r4
 800cf06:	4628      	mov	r0, r5
 800cf08:	f000 f958 	bl	800d1bc <__swsetup_r>
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d0dd      	beq.n	800cecc <_puts_r+0x40>
 800cf10:	f04f 35ff 	mov.w	r5, #4294967295
 800cf14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf16:	07da      	lsls	r2, r3, #31
 800cf18:	d405      	bmi.n	800cf26 <_puts_r+0x9a>
 800cf1a:	89a3      	ldrh	r3, [r4, #12]
 800cf1c:	059b      	lsls	r3, r3, #22
 800cf1e:	d402      	bmi.n	800cf26 <_puts_r+0x9a>
 800cf20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf22:	f000 fb82 	bl	800d62a <__retarget_lock_release_recursive>
 800cf26:	4628      	mov	r0, r5
 800cf28:	bd70      	pop	{r4, r5, r6, pc}
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	da04      	bge.n	800cf38 <_puts_r+0xac>
 800cf2e:	69a2      	ldr	r2, [r4, #24]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	dc06      	bgt.n	800cf42 <_puts_r+0xb6>
 800cf34:	290a      	cmp	r1, #10
 800cf36:	d004      	beq.n	800cf42 <_puts_r+0xb6>
 800cf38:	6823      	ldr	r3, [r4, #0]
 800cf3a:	1c5a      	adds	r2, r3, #1
 800cf3c:	6022      	str	r2, [r4, #0]
 800cf3e:	7019      	strb	r1, [r3, #0]
 800cf40:	e7c5      	b.n	800cece <_puts_r+0x42>
 800cf42:	4622      	mov	r2, r4
 800cf44:	4628      	mov	r0, r5
 800cf46:	f000 f8d5 	bl	800d0f4 <__swbuf_r>
 800cf4a:	3001      	adds	r0, #1
 800cf4c:	d1bf      	bne.n	800cece <_puts_r+0x42>
 800cf4e:	e7df      	b.n	800cf10 <_puts_r+0x84>
 800cf50:	6823      	ldr	r3, [r4, #0]
 800cf52:	250a      	movs	r5, #10
 800cf54:	1c5a      	adds	r2, r3, #1
 800cf56:	6022      	str	r2, [r4, #0]
 800cf58:	701d      	strb	r5, [r3, #0]
 800cf5a:	e7db      	b.n	800cf14 <_puts_r+0x88>
 800cf5c:	0800fe5c 	.word	0x0800fe5c
 800cf60:	0800fe7c 	.word	0x0800fe7c
 800cf64:	0800fe3c 	.word	0x0800fe3c

0800cf68 <puts>:
 800cf68:	4b02      	ldr	r3, [pc, #8]	; (800cf74 <puts+0xc>)
 800cf6a:	4601      	mov	r1, r0
 800cf6c:	6818      	ldr	r0, [r3, #0]
 800cf6e:	f7ff bf8d 	b.w	800ce8c <_puts_r>
 800cf72:	bf00      	nop
 800cf74:	20000034 	.word	0x20000034

0800cf78 <_sbrk_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4d06      	ldr	r5, [pc, #24]	; (800cf94 <_sbrk_r+0x1c>)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	602b      	str	r3, [r5, #0]
 800cf84:	f7f5 fdd6 	bl	8002b34 <_sbrk>
 800cf88:	1c43      	adds	r3, r0, #1
 800cf8a:	d102      	bne.n	800cf92 <_sbrk_r+0x1a>
 800cf8c:	682b      	ldr	r3, [r5, #0]
 800cf8e:	b103      	cbz	r3, 800cf92 <_sbrk_r+0x1a>
 800cf90:	6023      	str	r3, [r4, #0]
 800cf92:	bd38      	pop	{r3, r4, r5, pc}
 800cf94:	20002568 	.word	0x20002568

0800cf98 <siprintf>:
 800cf98:	b40e      	push	{r1, r2, r3}
 800cf9a:	b500      	push	{lr}
 800cf9c:	b09c      	sub	sp, #112	; 0x70
 800cf9e:	ab1d      	add	r3, sp, #116	; 0x74
 800cfa0:	9002      	str	r0, [sp, #8]
 800cfa2:	9006      	str	r0, [sp, #24]
 800cfa4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cfa8:	4809      	ldr	r0, [pc, #36]	; (800cfd0 <siprintf+0x38>)
 800cfaa:	9107      	str	r1, [sp, #28]
 800cfac:	9104      	str	r1, [sp, #16]
 800cfae:	4909      	ldr	r1, [pc, #36]	; (800cfd4 <siprintf+0x3c>)
 800cfb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfb4:	9105      	str	r1, [sp, #20]
 800cfb6:	6800      	ldr	r0, [r0, #0]
 800cfb8:	9301      	str	r3, [sp, #4]
 800cfba:	a902      	add	r1, sp, #8
 800cfbc:	f000 fc44 	bl	800d848 <_svfiprintf_r>
 800cfc0:	9b02      	ldr	r3, [sp, #8]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	701a      	strb	r2, [r3, #0]
 800cfc6:	b01c      	add	sp, #112	; 0x70
 800cfc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfcc:	b003      	add	sp, #12
 800cfce:	4770      	bx	lr
 800cfd0:	20000034 	.word	0x20000034
 800cfd4:	ffff0208 	.word	0xffff0208

0800cfd8 <__sread>:
 800cfd8:	b510      	push	{r4, lr}
 800cfda:	460c      	mov	r4, r1
 800cfdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfe0:	f001 f868 	bl	800e0b4 <_read_r>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	bfab      	itete	ge
 800cfe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cfea:	89a3      	ldrhlt	r3, [r4, #12]
 800cfec:	181b      	addge	r3, r3, r0
 800cfee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cff2:	bfac      	ite	ge
 800cff4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cff6:	81a3      	strhlt	r3, [r4, #12]
 800cff8:	bd10      	pop	{r4, pc}

0800cffa <__swrite>:
 800cffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cffe:	461f      	mov	r7, r3
 800d000:	898b      	ldrh	r3, [r1, #12]
 800d002:	05db      	lsls	r3, r3, #23
 800d004:	4605      	mov	r5, r0
 800d006:	460c      	mov	r4, r1
 800d008:	4616      	mov	r6, r2
 800d00a:	d505      	bpl.n	800d018 <__swrite+0x1e>
 800d00c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d010:	2302      	movs	r3, #2
 800d012:	2200      	movs	r2, #0
 800d014:	f000 fb0a 	bl	800d62c <_lseek_r>
 800d018:	89a3      	ldrh	r3, [r4, #12]
 800d01a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d01e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d022:	81a3      	strh	r3, [r4, #12]
 800d024:	4632      	mov	r2, r6
 800d026:	463b      	mov	r3, r7
 800d028:	4628      	mov	r0, r5
 800d02a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d02e:	f000 b8b3 	b.w	800d198 <_write_r>

0800d032 <__sseek>:
 800d032:	b510      	push	{r4, lr}
 800d034:	460c      	mov	r4, r1
 800d036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d03a:	f000 faf7 	bl	800d62c <_lseek_r>
 800d03e:	1c43      	adds	r3, r0, #1
 800d040:	89a3      	ldrh	r3, [r4, #12]
 800d042:	bf15      	itete	ne
 800d044:	6560      	strne	r0, [r4, #84]	; 0x54
 800d046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d04a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d04e:	81a3      	strheq	r3, [r4, #12]
 800d050:	bf18      	it	ne
 800d052:	81a3      	strhne	r3, [r4, #12]
 800d054:	bd10      	pop	{r4, pc}

0800d056 <__sclose>:
 800d056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d05a:	f000 b91d 	b.w	800d298 <_close_r>

0800d05e <strrchr>:
 800d05e:	b538      	push	{r3, r4, r5, lr}
 800d060:	4603      	mov	r3, r0
 800d062:	460c      	mov	r4, r1
 800d064:	b969      	cbnz	r1, 800d082 <strrchr+0x24>
 800d066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d06a:	f001 b835 	b.w	800e0d8 <strchr>
 800d06e:	1c43      	adds	r3, r0, #1
 800d070:	4605      	mov	r5, r0
 800d072:	4621      	mov	r1, r4
 800d074:	4618      	mov	r0, r3
 800d076:	f001 f82f 	bl	800e0d8 <strchr>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d1f7      	bne.n	800d06e <strrchr+0x10>
 800d07e:	4628      	mov	r0, r5
 800d080:	bd38      	pop	{r3, r4, r5, pc}
 800d082:	2500      	movs	r5, #0
 800d084:	e7f5      	b.n	800d072 <strrchr+0x14>

0800d086 <strstr>:
 800d086:	780a      	ldrb	r2, [r1, #0]
 800d088:	b570      	push	{r4, r5, r6, lr}
 800d08a:	b96a      	cbnz	r2, 800d0a8 <strstr+0x22>
 800d08c:	bd70      	pop	{r4, r5, r6, pc}
 800d08e:	429a      	cmp	r2, r3
 800d090:	d109      	bne.n	800d0a6 <strstr+0x20>
 800d092:	460c      	mov	r4, r1
 800d094:	4605      	mov	r5, r0
 800d096:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d0f6      	beq.n	800d08c <strstr+0x6>
 800d09e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d0a2:	429e      	cmp	r6, r3
 800d0a4:	d0f7      	beq.n	800d096 <strstr+0x10>
 800d0a6:	3001      	adds	r0, #1
 800d0a8:	7803      	ldrb	r3, [r0, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d1ef      	bne.n	800d08e <strstr+0x8>
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	e7ec      	b.n	800d08c <strstr+0x6>
	...

0800d0b4 <_vsiprintf_r>:
 800d0b4:	b500      	push	{lr}
 800d0b6:	b09b      	sub	sp, #108	; 0x6c
 800d0b8:	9100      	str	r1, [sp, #0]
 800d0ba:	9104      	str	r1, [sp, #16]
 800d0bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0c0:	9105      	str	r1, [sp, #20]
 800d0c2:	9102      	str	r1, [sp, #8]
 800d0c4:	4905      	ldr	r1, [pc, #20]	; (800d0dc <_vsiprintf_r+0x28>)
 800d0c6:	9103      	str	r1, [sp, #12]
 800d0c8:	4669      	mov	r1, sp
 800d0ca:	f000 fbbd 	bl	800d848 <_svfiprintf_r>
 800d0ce:	9b00      	ldr	r3, [sp, #0]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	701a      	strb	r2, [r3, #0]
 800d0d4:	b01b      	add	sp, #108	; 0x6c
 800d0d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d0da:	bf00      	nop
 800d0dc:	ffff0208 	.word	0xffff0208

0800d0e0 <vsiprintf>:
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	460a      	mov	r2, r1
 800d0e4:	4601      	mov	r1, r0
 800d0e6:	4802      	ldr	r0, [pc, #8]	; (800d0f0 <vsiprintf+0x10>)
 800d0e8:	6800      	ldr	r0, [r0, #0]
 800d0ea:	f7ff bfe3 	b.w	800d0b4 <_vsiprintf_r>
 800d0ee:	bf00      	nop
 800d0f0:	20000034 	.word	0x20000034

0800d0f4 <__swbuf_r>:
 800d0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f6:	460e      	mov	r6, r1
 800d0f8:	4614      	mov	r4, r2
 800d0fa:	4605      	mov	r5, r0
 800d0fc:	b118      	cbz	r0, 800d106 <__swbuf_r+0x12>
 800d0fe:	6983      	ldr	r3, [r0, #24]
 800d100:	b90b      	cbnz	r3, 800d106 <__swbuf_r+0x12>
 800d102:	f000 f9f3 	bl	800d4ec <__sinit>
 800d106:	4b21      	ldr	r3, [pc, #132]	; (800d18c <__swbuf_r+0x98>)
 800d108:	429c      	cmp	r4, r3
 800d10a:	d12b      	bne.n	800d164 <__swbuf_r+0x70>
 800d10c:	686c      	ldr	r4, [r5, #4]
 800d10e:	69a3      	ldr	r3, [r4, #24]
 800d110:	60a3      	str	r3, [r4, #8]
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	071a      	lsls	r2, r3, #28
 800d116:	d52f      	bpl.n	800d178 <__swbuf_r+0x84>
 800d118:	6923      	ldr	r3, [r4, #16]
 800d11a:	b36b      	cbz	r3, 800d178 <__swbuf_r+0x84>
 800d11c:	6923      	ldr	r3, [r4, #16]
 800d11e:	6820      	ldr	r0, [r4, #0]
 800d120:	1ac0      	subs	r0, r0, r3
 800d122:	6963      	ldr	r3, [r4, #20]
 800d124:	b2f6      	uxtb	r6, r6
 800d126:	4283      	cmp	r3, r0
 800d128:	4637      	mov	r7, r6
 800d12a:	dc04      	bgt.n	800d136 <__swbuf_r+0x42>
 800d12c:	4621      	mov	r1, r4
 800d12e:	4628      	mov	r0, r5
 800d130:	f000 f948 	bl	800d3c4 <_fflush_r>
 800d134:	bb30      	cbnz	r0, 800d184 <__swbuf_r+0x90>
 800d136:	68a3      	ldr	r3, [r4, #8]
 800d138:	3b01      	subs	r3, #1
 800d13a:	60a3      	str	r3, [r4, #8]
 800d13c:	6823      	ldr	r3, [r4, #0]
 800d13e:	1c5a      	adds	r2, r3, #1
 800d140:	6022      	str	r2, [r4, #0]
 800d142:	701e      	strb	r6, [r3, #0]
 800d144:	6963      	ldr	r3, [r4, #20]
 800d146:	3001      	adds	r0, #1
 800d148:	4283      	cmp	r3, r0
 800d14a:	d004      	beq.n	800d156 <__swbuf_r+0x62>
 800d14c:	89a3      	ldrh	r3, [r4, #12]
 800d14e:	07db      	lsls	r3, r3, #31
 800d150:	d506      	bpl.n	800d160 <__swbuf_r+0x6c>
 800d152:	2e0a      	cmp	r6, #10
 800d154:	d104      	bne.n	800d160 <__swbuf_r+0x6c>
 800d156:	4621      	mov	r1, r4
 800d158:	4628      	mov	r0, r5
 800d15a:	f000 f933 	bl	800d3c4 <_fflush_r>
 800d15e:	b988      	cbnz	r0, 800d184 <__swbuf_r+0x90>
 800d160:	4638      	mov	r0, r7
 800d162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d164:	4b0a      	ldr	r3, [pc, #40]	; (800d190 <__swbuf_r+0x9c>)
 800d166:	429c      	cmp	r4, r3
 800d168:	d101      	bne.n	800d16e <__swbuf_r+0x7a>
 800d16a:	68ac      	ldr	r4, [r5, #8]
 800d16c:	e7cf      	b.n	800d10e <__swbuf_r+0x1a>
 800d16e:	4b09      	ldr	r3, [pc, #36]	; (800d194 <__swbuf_r+0xa0>)
 800d170:	429c      	cmp	r4, r3
 800d172:	bf08      	it	eq
 800d174:	68ec      	ldreq	r4, [r5, #12]
 800d176:	e7ca      	b.n	800d10e <__swbuf_r+0x1a>
 800d178:	4621      	mov	r1, r4
 800d17a:	4628      	mov	r0, r5
 800d17c:	f000 f81e 	bl	800d1bc <__swsetup_r>
 800d180:	2800      	cmp	r0, #0
 800d182:	d0cb      	beq.n	800d11c <__swbuf_r+0x28>
 800d184:	f04f 37ff 	mov.w	r7, #4294967295
 800d188:	e7ea      	b.n	800d160 <__swbuf_r+0x6c>
 800d18a:	bf00      	nop
 800d18c:	0800fe5c 	.word	0x0800fe5c
 800d190:	0800fe7c 	.word	0x0800fe7c
 800d194:	0800fe3c 	.word	0x0800fe3c

0800d198 <_write_r>:
 800d198:	b538      	push	{r3, r4, r5, lr}
 800d19a:	4d07      	ldr	r5, [pc, #28]	; (800d1b8 <_write_r+0x20>)
 800d19c:	4604      	mov	r4, r0
 800d19e:	4608      	mov	r0, r1
 800d1a0:	4611      	mov	r1, r2
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	602a      	str	r2, [r5, #0]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	f7f5 f9f3 	bl	8002592 <_write>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_write_r+0x1e>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_write_r+0x1e>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	20002568 	.word	0x20002568

0800d1bc <__swsetup_r>:
 800d1bc:	4b32      	ldr	r3, [pc, #200]	; (800d288 <__swsetup_r+0xcc>)
 800d1be:	b570      	push	{r4, r5, r6, lr}
 800d1c0:	681d      	ldr	r5, [r3, #0]
 800d1c2:	4606      	mov	r6, r0
 800d1c4:	460c      	mov	r4, r1
 800d1c6:	b125      	cbz	r5, 800d1d2 <__swsetup_r+0x16>
 800d1c8:	69ab      	ldr	r3, [r5, #24]
 800d1ca:	b913      	cbnz	r3, 800d1d2 <__swsetup_r+0x16>
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	f000 f98d 	bl	800d4ec <__sinit>
 800d1d2:	4b2e      	ldr	r3, [pc, #184]	; (800d28c <__swsetup_r+0xd0>)
 800d1d4:	429c      	cmp	r4, r3
 800d1d6:	d10f      	bne.n	800d1f8 <__swsetup_r+0x3c>
 800d1d8:	686c      	ldr	r4, [r5, #4]
 800d1da:	89a3      	ldrh	r3, [r4, #12]
 800d1dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1e0:	0719      	lsls	r1, r3, #28
 800d1e2:	d42c      	bmi.n	800d23e <__swsetup_r+0x82>
 800d1e4:	06dd      	lsls	r5, r3, #27
 800d1e6:	d411      	bmi.n	800d20c <__swsetup_r+0x50>
 800d1e8:	2309      	movs	r3, #9
 800d1ea:	6033      	str	r3, [r6, #0]
 800d1ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1f0:	81a3      	strh	r3, [r4, #12]
 800d1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f6:	e03e      	b.n	800d276 <__swsetup_r+0xba>
 800d1f8:	4b25      	ldr	r3, [pc, #148]	; (800d290 <__swsetup_r+0xd4>)
 800d1fa:	429c      	cmp	r4, r3
 800d1fc:	d101      	bne.n	800d202 <__swsetup_r+0x46>
 800d1fe:	68ac      	ldr	r4, [r5, #8]
 800d200:	e7eb      	b.n	800d1da <__swsetup_r+0x1e>
 800d202:	4b24      	ldr	r3, [pc, #144]	; (800d294 <__swsetup_r+0xd8>)
 800d204:	429c      	cmp	r4, r3
 800d206:	bf08      	it	eq
 800d208:	68ec      	ldreq	r4, [r5, #12]
 800d20a:	e7e6      	b.n	800d1da <__swsetup_r+0x1e>
 800d20c:	0758      	lsls	r0, r3, #29
 800d20e:	d512      	bpl.n	800d236 <__swsetup_r+0x7a>
 800d210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d212:	b141      	cbz	r1, 800d226 <__swsetup_r+0x6a>
 800d214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d218:	4299      	cmp	r1, r3
 800d21a:	d002      	beq.n	800d222 <__swsetup_r+0x66>
 800d21c:	4630      	mov	r0, r6
 800d21e:	f7ff fd27 	bl	800cc70 <_free_r>
 800d222:	2300      	movs	r3, #0
 800d224:	6363      	str	r3, [r4, #52]	; 0x34
 800d226:	89a3      	ldrh	r3, [r4, #12]
 800d228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d22c:	81a3      	strh	r3, [r4, #12]
 800d22e:	2300      	movs	r3, #0
 800d230:	6063      	str	r3, [r4, #4]
 800d232:	6923      	ldr	r3, [r4, #16]
 800d234:	6023      	str	r3, [r4, #0]
 800d236:	89a3      	ldrh	r3, [r4, #12]
 800d238:	f043 0308 	orr.w	r3, r3, #8
 800d23c:	81a3      	strh	r3, [r4, #12]
 800d23e:	6923      	ldr	r3, [r4, #16]
 800d240:	b94b      	cbnz	r3, 800d256 <__swsetup_r+0x9a>
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d24c:	d003      	beq.n	800d256 <__swsetup_r+0x9a>
 800d24e:	4621      	mov	r1, r4
 800d250:	4630      	mov	r0, r6
 800d252:	f000 fa23 	bl	800d69c <__smakebuf_r>
 800d256:	89a0      	ldrh	r0, [r4, #12]
 800d258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d25c:	f010 0301 	ands.w	r3, r0, #1
 800d260:	d00a      	beq.n	800d278 <__swsetup_r+0xbc>
 800d262:	2300      	movs	r3, #0
 800d264:	60a3      	str	r3, [r4, #8]
 800d266:	6963      	ldr	r3, [r4, #20]
 800d268:	425b      	negs	r3, r3
 800d26a:	61a3      	str	r3, [r4, #24]
 800d26c:	6923      	ldr	r3, [r4, #16]
 800d26e:	b943      	cbnz	r3, 800d282 <__swsetup_r+0xc6>
 800d270:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d274:	d1ba      	bne.n	800d1ec <__swsetup_r+0x30>
 800d276:	bd70      	pop	{r4, r5, r6, pc}
 800d278:	0781      	lsls	r1, r0, #30
 800d27a:	bf58      	it	pl
 800d27c:	6963      	ldrpl	r3, [r4, #20]
 800d27e:	60a3      	str	r3, [r4, #8]
 800d280:	e7f4      	b.n	800d26c <__swsetup_r+0xb0>
 800d282:	2000      	movs	r0, #0
 800d284:	e7f7      	b.n	800d276 <__swsetup_r+0xba>
 800d286:	bf00      	nop
 800d288:	20000034 	.word	0x20000034
 800d28c:	0800fe5c 	.word	0x0800fe5c
 800d290:	0800fe7c 	.word	0x0800fe7c
 800d294:	0800fe3c 	.word	0x0800fe3c

0800d298 <_close_r>:
 800d298:	b538      	push	{r3, r4, r5, lr}
 800d29a:	4d06      	ldr	r5, [pc, #24]	; (800d2b4 <_close_r+0x1c>)
 800d29c:	2300      	movs	r3, #0
 800d29e:	4604      	mov	r4, r0
 800d2a0:	4608      	mov	r0, r1
 800d2a2:	602b      	str	r3, [r5, #0]
 800d2a4:	f7f5 fc11 	bl	8002aca <_close>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	d102      	bne.n	800d2b2 <_close_r+0x1a>
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	b103      	cbz	r3, 800d2b2 <_close_r+0x1a>
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	bd38      	pop	{r3, r4, r5, pc}
 800d2b4:	20002568 	.word	0x20002568

0800d2b8 <__sflush_r>:
 800d2b8:	898a      	ldrh	r2, [r1, #12]
 800d2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2be:	4605      	mov	r5, r0
 800d2c0:	0710      	lsls	r0, r2, #28
 800d2c2:	460c      	mov	r4, r1
 800d2c4:	d458      	bmi.n	800d378 <__sflush_r+0xc0>
 800d2c6:	684b      	ldr	r3, [r1, #4]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	dc05      	bgt.n	800d2d8 <__sflush_r+0x20>
 800d2cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	dc02      	bgt.n	800d2d8 <__sflush_r+0x20>
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2da:	2e00      	cmp	r6, #0
 800d2dc:	d0f9      	beq.n	800d2d2 <__sflush_r+0x1a>
 800d2de:	2300      	movs	r3, #0
 800d2e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d2e4:	682f      	ldr	r7, [r5, #0]
 800d2e6:	602b      	str	r3, [r5, #0]
 800d2e8:	d032      	beq.n	800d350 <__sflush_r+0x98>
 800d2ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d2ec:	89a3      	ldrh	r3, [r4, #12]
 800d2ee:	075a      	lsls	r2, r3, #29
 800d2f0:	d505      	bpl.n	800d2fe <__sflush_r+0x46>
 800d2f2:	6863      	ldr	r3, [r4, #4]
 800d2f4:	1ac0      	subs	r0, r0, r3
 800d2f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2f8:	b10b      	cbz	r3, 800d2fe <__sflush_r+0x46>
 800d2fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2fc:	1ac0      	subs	r0, r0, r3
 800d2fe:	2300      	movs	r3, #0
 800d300:	4602      	mov	r2, r0
 800d302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d304:	6a21      	ldr	r1, [r4, #32]
 800d306:	4628      	mov	r0, r5
 800d308:	47b0      	blx	r6
 800d30a:	1c43      	adds	r3, r0, #1
 800d30c:	89a3      	ldrh	r3, [r4, #12]
 800d30e:	d106      	bne.n	800d31e <__sflush_r+0x66>
 800d310:	6829      	ldr	r1, [r5, #0]
 800d312:	291d      	cmp	r1, #29
 800d314:	d82c      	bhi.n	800d370 <__sflush_r+0xb8>
 800d316:	4a2a      	ldr	r2, [pc, #168]	; (800d3c0 <__sflush_r+0x108>)
 800d318:	40ca      	lsrs	r2, r1
 800d31a:	07d6      	lsls	r6, r2, #31
 800d31c:	d528      	bpl.n	800d370 <__sflush_r+0xb8>
 800d31e:	2200      	movs	r2, #0
 800d320:	6062      	str	r2, [r4, #4]
 800d322:	04d9      	lsls	r1, r3, #19
 800d324:	6922      	ldr	r2, [r4, #16]
 800d326:	6022      	str	r2, [r4, #0]
 800d328:	d504      	bpl.n	800d334 <__sflush_r+0x7c>
 800d32a:	1c42      	adds	r2, r0, #1
 800d32c:	d101      	bne.n	800d332 <__sflush_r+0x7a>
 800d32e:	682b      	ldr	r3, [r5, #0]
 800d330:	b903      	cbnz	r3, 800d334 <__sflush_r+0x7c>
 800d332:	6560      	str	r0, [r4, #84]	; 0x54
 800d334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d336:	602f      	str	r7, [r5, #0]
 800d338:	2900      	cmp	r1, #0
 800d33a:	d0ca      	beq.n	800d2d2 <__sflush_r+0x1a>
 800d33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d340:	4299      	cmp	r1, r3
 800d342:	d002      	beq.n	800d34a <__sflush_r+0x92>
 800d344:	4628      	mov	r0, r5
 800d346:	f7ff fc93 	bl	800cc70 <_free_r>
 800d34a:	2000      	movs	r0, #0
 800d34c:	6360      	str	r0, [r4, #52]	; 0x34
 800d34e:	e7c1      	b.n	800d2d4 <__sflush_r+0x1c>
 800d350:	6a21      	ldr	r1, [r4, #32]
 800d352:	2301      	movs	r3, #1
 800d354:	4628      	mov	r0, r5
 800d356:	47b0      	blx	r6
 800d358:	1c41      	adds	r1, r0, #1
 800d35a:	d1c7      	bne.n	800d2ec <__sflush_r+0x34>
 800d35c:	682b      	ldr	r3, [r5, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d0c4      	beq.n	800d2ec <__sflush_r+0x34>
 800d362:	2b1d      	cmp	r3, #29
 800d364:	d001      	beq.n	800d36a <__sflush_r+0xb2>
 800d366:	2b16      	cmp	r3, #22
 800d368:	d101      	bne.n	800d36e <__sflush_r+0xb6>
 800d36a:	602f      	str	r7, [r5, #0]
 800d36c:	e7b1      	b.n	800d2d2 <__sflush_r+0x1a>
 800d36e:	89a3      	ldrh	r3, [r4, #12]
 800d370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d374:	81a3      	strh	r3, [r4, #12]
 800d376:	e7ad      	b.n	800d2d4 <__sflush_r+0x1c>
 800d378:	690f      	ldr	r7, [r1, #16]
 800d37a:	2f00      	cmp	r7, #0
 800d37c:	d0a9      	beq.n	800d2d2 <__sflush_r+0x1a>
 800d37e:	0793      	lsls	r3, r2, #30
 800d380:	680e      	ldr	r6, [r1, #0]
 800d382:	bf08      	it	eq
 800d384:	694b      	ldreq	r3, [r1, #20]
 800d386:	600f      	str	r7, [r1, #0]
 800d388:	bf18      	it	ne
 800d38a:	2300      	movne	r3, #0
 800d38c:	eba6 0807 	sub.w	r8, r6, r7
 800d390:	608b      	str	r3, [r1, #8]
 800d392:	f1b8 0f00 	cmp.w	r8, #0
 800d396:	dd9c      	ble.n	800d2d2 <__sflush_r+0x1a>
 800d398:	6a21      	ldr	r1, [r4, #32]
 800d39a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d39c:	4643      	mov	r3, r8
 800d39e:	463a      	mov	r2, r7
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	47b0      	blx	r6
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	dc06      	bgt.n	800d3b6 <__sflush_r+0xfe>
 800d3a8:	89a3      	ldrh	r3, [r4, #12]
 800d3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3ae:	81a3      	strh	r3, [r4, #12]
 800d3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b4:	e78e      	b.n	800d2d4 <__sflush_r+0x1c>
 800d3b6:	4407      	add	r7, r0
 800d3b8:	eba8 0800 	sub.w	r8, r8, r0
 800d3bc:	e7e9      	b.n	800d392 <__sflush_r+0xda>
 800d3be:	bf00      	nop
 800d3c0:	20400001 	.word	0x20400001

0800d3c4 <_fflush_r>:
 800d3c4:	b538      	push	{r3, r4, r5, lr}
 800d3c6:	690b      	ldr	r3, [r1, #16]
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	460c      	mov	r4, r1
 800d3cc:	b913      	cbnz	r3, 800d3d4 <_fflush_r+0x10>
 800d3ce:	2500      	movs	r5, #0
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	b118      	cbz	r0, 800d3de <_fflush_r+0x1a>
 800d3d6:	6983      	ldr	r3, [r0, #24]
 800d3d8:	b90b      	cbnz	r3, 800d3de <_fflush_r+0x1a>
 800d3da:	f000 f887 	bl	800d4ec <__sinit>
 800d3de:	4b14      	ldr	r3, [pc, #80]	; (800d430 <_fflush_r+0x6c>)
 800d3e0:	429c      	cmp	r4, r3
 800d3e2:	d11b      	bne.n	800d41c <_fflush_r+0x58>
 800d3e4:	686c      	ldr	r4, [r5, #4]
 800d3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d0ef      	beq.n	800d3ce <_fflush_r+0xa>
 800d3ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3f0:	07d0      	lsls	r0, r2, #31
 800d3f2:	d404      	bmi.n	800d3fe <_fflush_r+0x3a>
 800d3f4:	0599      	lsls	r1, r3, #22
 800d3f6:	d402      	bmi.n	800d3fe <_fflush_r+0x3a>
 800d3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3fa:	f000 f915 	bl	800d628 <__retarget_lock_acquire_recursive>
 800d3fe:	4628      	mov	r0, r5
 800d400:	4621      	mov	r1, r4
 800d402:	f7ff ff59 	bl	800d2b8 <__sflush_r>
 800d406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d408:	07da      	lsls	r2, r3, #31
 800d40a:	4605      	mov	r5, r0
 800d40c:	d4e0      	bmi.n	800d3d0 <_fflush_r+0xc>
 800d40e:	89a3      	ldrh	r3, [r4, #12]
 800d410:	059b      	lsls	r3, r3, #22
 800d412:	d4dd      	bmi.n	800d3d0 <_fflush_r+0xc>
 800d414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d416:	f000 f908 	bl	800d62a <__retarget_lock_release_recursive>
 800d41a:	e7d9      	b.n	800d3d0 <_fflush_r+0xc>
 800d41c:	4b05      	ldr	r3, [pc, #20]	; (800d434 <_fflush_r+0x70>)
 800d41e:	429c      	cmp	r4, r3
 800d420:	d101      	bne.n	800d426 <_fflush_r+0x62>
 800d422:	68ac      	ldr	r4, [r5, #8]
 800d424:	e7df      	b.n	800d3e6 <_fflush_r+0x22>
 800d426:	4b04      	ldr	r3, [pc, #16]	; (800d438 <_fflush_r+0x74>)
 800d428:	429c      	cmp	r4, r3
 800d42a:	bf08      	it	eq
 800d42c:	68ec      	ldreq	r4, [r5, #12]
 800d42e:	e7da      	b.n	800d3e6 <_fflush_r+0x22>
 800d430:	0800fe5c 	.word	0x0800fe5c
 800d434:	0800fe7c 	.word	0x0800fe7c
 800d438:	0800fe3c 	.word	0x0800fe3c

0800d43c <std>:
 800d43c:	2300      	movs	r3, #0
 800d43e:	b510      	push	{r4, lr}
 800d440:	4604      	mov	r4, r0
 800d442:	e9c0 3300 	strd	r3, r3, [r0]
 800d446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d44a:	6083      	str	r3, [r0, #8]
 800d44c:	8181      	strh	r1, [r0, #12]
 800d44e:	6643      	str	r3, [r0, #100]	; 0x64
 800d450:	81c2      	strh	r2, [r0, #14]
 800d452:	6183      	str	r3, [r0, #24]
 800d454:	4619      	mov	r1, r3
 800d456:	2208      	movs	r2, #8
 800d458:	305c      	adds	r0, #92	; 0x5c
 800d45a:	f7ff fc01 	bl	800cc60 <memset>
 800d45e:	4b05      	ldr	r3, [pc, #20]	; (800d474 <std+0x38>)
 800d460:	6263      	str	r3, [r4, #36]	; 0x24
 800d462:	4b05      	ldr	r3, [pc, #20]	; (800d478 <std+0x3c>)
 800d464:	62a3      	str	r3, [r4, #40]	; 0x28
 800d466:	4b05      	ldr	r3, [pc, #20]	; (800d47c <std+0x40>)
 800d468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d46a:	4b05      	ldr	r3, [pc, #20]	; (800d480 <std+0x44>)
 800d46c:	6224      	str	r4, [r4, #32]
 800d46e:	6323      	str	r3, [r4, #48]	; 0x30
 800d470:	bd10      	pop	{r4, pc}
 800d472:	bf00      	nop
 800d474:	0800cfd9 	.word	0x0800cfd9
 800d478:	0800cffb 	.word	0x0800cffb
 800d47c:	0800d033 	.word	0x0800d033
 800d480:	0800d057 	.word	0x0800d057

0800d484 <_cleanup_r>:
 800d484:	4901      	ldr	r1, [pc, #4]	; (800d48c <_cleanup_r+0x8>)
 800d486:	f000 b8af 	b.w	800d5e8 <_fwalk_reent>
 800d48a:	bf00      	nop
 800d48c:	0800d3c5 	.word	0x0800d3c5

0800d490 <__sfmoreglue>:
 800d490:	b570      	push	{r4, r5, r6, lr}
 800d492:	2268      	movs	r2, #104	; 0x68
 800d494:	1e4d      	subs	r5, r1, #1
 800d496:	4355      	muls	r5, r2
 800d498:	460e      	mov	r6, r1
 800d49a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d49e:	f7ff fc53 	bl	800cd48 <_malloc_r>
 800d4a2:	4604      	mov	r4, r0
 800d4a4:	b140      	cbz	r0, 800d4b8 <__sfmoreglue+0x28>
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	e9c0 1600 	strd	r1, r6, [r0]
 800d4ac:	300c      	adds	r0, #12
 800d4ae:	60a0      	str	r0, [r4, #8]
 800d4b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4b4:	f7ff fbd4 	bl	800cc60 <memset>
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	bd70      	pop	{r4, r5, r6, pc}

0800d4bc <__sfp_lock_acquire>:
 800d4bc:	4801      	ldr	r0, [pc, #4]	; (800d4c4 <__sfp_lock_acquire+0x8>)
 800d4be:	f000 b8b3 	b.w	800d628 <__retarget_lock_acquire_recursive>
 800d4c2:	bf00      	nop
 800d4c4:	20002565 	.word	0x20002565

0800d4c8 <__sfp_lock_release>:
 800d4c8:	4801      	ldr	r0, [pc, #4]	; (800d4d0 <__sfp_lock_release+0x8>)
 800d4ca:	f000 b8ae 	b.w	800d62a <__retarget_lock_release_recursive>
 800d4ce:	bf00      	nop
 800d4d0:	20002565 	.word	0x20002565

0800d4d4 <__sinit_lock_acquire>:
 800d4d4:	4801      	ldr	r0, [pc, #4]	; (800d4dc <__sinit_lock_acquire+0x8>)
 800d4d6:	f000 b8a7 	b.w	800d628 <__retarget_lock_acquire_recursive>
 800d4da:	bf00      	nop
 800d4dc:	20002566 	.word	0x20002566

0800d4e0 <__sinit_lock_release>:
 800d4e0:	4801      	ldr	r0, [pc, #4]	; (800d4e8 <__sinit_lock_release+0x8>)
 800d4e2:	f000 b8a2 	b.w	800d62a <__retarget_lock_release_recursive>
 800d4e6:	bf00      	nop
 800d4e8:	20002566 	.word	0x20002566

0800d4ec <__sinit>:
 800d4ec:	b510      	push	{r4, lr}
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	f7ff fff0 	bl	800d4d4 <__sinit_lock_acquire>
 800d4f4:	69a3      	ldr	r3, [r4, #24]
 800d4f6:	b11b      	cbz	r3, 800d500 <__sinit+0x14>
 800d4f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4fc:	f7ff bff0 	b.w	800d4e0 <__sinit_lock_release>
 800d500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d504:	6523      	str	r3, [r4, #80]	; 0x50
 800d506:	4b13      	ldr	r3, [pc, #76]	; (800d554 <__sinit+0x68>)
 800d508:	4a13      	ldr	r2, [pc, #76]	; (800d558 <__sinit+0x6c>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d50e:	42a3      	cmp	r3, r4
 800d510:	bf04      	itt	eq
 800d512:	2301      	moveq	r3, #1
 800d514:	61a3      	streq	r3, [r4, #24]
 800d516:	4620      	mov	r0, r4
 800d518:	f000 f820 	bl	800d55c <__sfp>
 800d51c:	6060      	str	r0, [r4, #4]
 800d51e:	4620      	mov	r0, r4
 800d520:	f000 f81c 	bl	800d55c <__sfp>
 800d524:	60a0      	str	r0, [r4, #8]
 800d526:	4620      	mov	r0, r4
 800d528:	f000 f818 	bl	800d55c <__sfp>
 800d52c:	2200      	movs	r2, #0
 800d52e:	60e0      	str	r0, [r4, #12]
 800d530:	2104      	movs	r1, #4
 800d532:	6860      	ldr	r0, [r4, #4]
 800d534:	f7ff ff82 	bl	800d43c <std>
 800d538:	68a0      	ldr	r0, [r4, #8]
 800d53a:	2201      	movs	r2, #1
 800d53c:	2109      	movs	r1, #9
 800d53e:	f7ff ff7d 	bl	800d43c <std>
 800d542:	68e0      	ldr	r0, [r4, #12]
 800d544:	2202      	movs	r2, #2
 800d546:	2112      	movs	r1, #18
 800d548:	f7ff ff78 	bl	800d43c <std>
 800d54c:	2301      	movs	r3, #1
 800d54e:	61a3      	str	r3, [r4, #24]
 800d550:	e7d2      	b.n	800d4f8 <__sinit+0xc>
 800d552:	bf00      	nop
 800d554:	0800fe38 	.word	0x0800fe38
 800d558:	0800d485 	.word	0x0800d485

0800d55c <__sfp>:
 800d55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d55e:	4607      	mov	r7, r0
 800d560:	f7ff ffac 	bl	800d4bc <__sfp_lock_acquire>
 800d564:	4b1e      	ldr	r3, [pc, #120]	; (800d5e0 <__sfp+0x84>)
 800d566:	681e      	ldr	r6, [r3, #0]
 800d568:	69b3      	ldr	r3, [r6, #24]
 800d56a:	b913      	cbnz	r3, 800d572 <__sfp+0x16>
 800d56c:	4630      	mov	r0, r6
 800d56e:	f7ff ffbd 	bl	800d4ec <__sinit>
 800d572:	3648      	adds	r6, #72	; 0x48
 800d574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d578:	3b01      	subs	r3, #1
 800d57a:	d503      	bpl.n	800d584 <__sfp+0x28>
 800d57c:	6833      	ldr	r3, [r6, #0]
 800d57e:	b30b      	cbz	r3, 800d5c4 <__sfp+0x68>
 800d580:	6836      	ldr	r6, [r6, #0]
 800d582:	e7f7      	b.n	800d574 <__sfp+0x18>
 800d584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d588:	b9d5      	cbnz	r5, 800d5c0 <__sfp+0x64>
 800d58a:	4b16      	ldr	r3, [pc, #88]	; (800d5e4 <__sfp+0x88>)
 800d58c:	60e3      	str	r3, [r4, #12]
 800d58e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d592:	6665      	str	r5, [r4, #100]	; 0x64
 800d594:	f000 f847 	bl	800d626 <__retarget_lock_init_recursive>
 800d598:	f7ff ff96 	bl	800d4c8 <__sfp_lock_release>
 800d59c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d5a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d5a4:	6025      	str	r5, [r4, #0]
 800d5a6:	61a5      	str	r5, [r4, #24]
 800d5a8:	2208      	movs	r2, #8
 800d5aa:	4629      	mov	r1, r5
 800d5ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d5b0:	f7ff fb56 	bl	800cc60 <memset>
 800d5b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d5b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d5bc:	4620      	mov	r0, r4
 800d5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c0:	3468      	adds	r4, #104	; 0x68
 800d5c2:	e7d9      	b.n	800d578 <__sfp+0x1c>
 800d5c4:	2104      	movs	r1, #4
 800d5c6:	4638      	mov	r0, r7
 800d5c8:	f7ff ff62 	bl	800d490 <__sfmoreglue>
 800d5cc:	4604      	mov	r4, r0
 800d5ce:	6030      	str	r0, [r6, #0]
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	d1d5      	bne.n	800d580 <__sfp+0x24>
 800d5d4:	f7ff ff78 	bl	800d4c8 <__sfp_lock_release>
 800d5d8:	230c      	movs	r3, #12
 800d5da:	603b      	str	r3, [r7, #0]
 800d5dc:	e7ee      	b.n	800d5bc <__sfp+0x60>
 800d5de:	bf00      	nop
 800d5e0:	0800fe38 	.word	0x0800fe38
 800d5e4:	ffff0001 	.word	0xffff0001

0800d5e8 <_fwalk_reent>:
 800d5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5ec:	4606      	mov	r6, r0
 800d5ee:	4688      	mov	r8, r1
 800d5f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d5f4:	2700      	movs	r7, #0
 800d5f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d5fa:	f1b9 0901 	subs.w	r9, r9, #1
 800d5fe:	d505      	bpl.n	800d60c <_fwalk_reent+0x24>
 800d600:	6824      	ldr	r4, [r4, #0]
 800d602:	2c00      	cmp	r4, #0
 800d604:	d1f7      	bne.n	800d5f6 <_fwalk_reent+0xe>
 800d606:	4638      	mov	r0, r7
 800d608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d60c:	89ab      	ldrh	r3, [r5, #12]
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d907      	bls.n	800d622 <_fwalk_reent+0x3a>
 800d612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d616:	3301      	adds	r3, #1
 800d618:	d003      	beq.n	800d622 <_fwalk_reent+0x3a>
 800d61a:	4629      	mov	r1, r5
 800d61c:	4630      	mov	r0, r6
 800d61e:	47c0      	blx	r8
 800d620:	4307      	orrs	r7, r0
 800d622:	3568      	adds	r5, #104	; 0x68
 800d624:	e7e9      	b.n	800d5fa <_fwalk_reent+0x12>

0800d626 <__retarget_lock_init_recursive>:
 800d626:	4770      	bx	lr

0800d628 <__retarget_lock_acquire_recursive>:
 800d628:	4770      	bx	lr

0800d62a <__retarget_lock_release_recursive>:
 800d62a:	4770      	bx	lr

0800d62c <_lseek_r>:
 800d62c:	b538      	push	{r3, r4, r5, lr}
 800d62e:	4d07      	ldr	r5, [pc, #28]	; (800d64c <_lseek_r+0x20>)
 800d630:	4604      	mov	r4, r0
 800d632:	4608      	mov	r0, r1
 800d634:	4611      	mov	r1, r2
 800d636:	2200      	movs	r2, #0
 800d638:	602a      	str	r2, [r5, #0]
 800d63a:	461a      	mov	r2, r3
 800d63c:	f7f5 fa6c 	bl	8002b18 <_lseek>
 800d640:	1c43      	adds	r3, r0, #1
 800d642:	d102      	bne.n	800d64a <_lseek_r+0x1e>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	b103      	cbz	r3, 800d64a <_lseek_r+0x1e>
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	bd38      	pop	{r3, r4, r5, pc}
 800d64c:	20002568 	.word	0x20002568

0800d650 <__swhatbuf_r>:
 800d650:	b570      	push	{r4, r5, r6, lr}
 800d652:	460e      	mov	r6, r1
 800d654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d658:	2900      	cmp	r1, #0
 800d65a:	b096      	sub	sp, #88	; 0x58
 800d65c:	4614      	mov	r4, r2
 800d65e:	461d      	mov	r5, r3
 800d660:	da08      	bge.n	800d674 <__swhatbuf_r+0x24>
 800d662:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d666:	2200      	movs	r2, #0
 800d668:	602a      	str	r2, [r5, #0]
 800d66a:	061a      	lsls	r2, r3, #24
 800d66c:	d410      	bmi.n	800d690 <__swhatbuf_r+0x40>
 800d66e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d672:	e00e      	b.n	800d692 <__swhatbuf_r+0x42>
 800d674:	466a      	mov	r2, sp
 800d676:	f000 fd3d 	bl	800e0f4 <_fstat_r>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	dbf1      	blt.n	800d662 <__swhatbuf_r+0x12>
 800d67e:	9a01      	ldr	r2, [sp, #4]
 800d680:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d684:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d688:	425a      	negs	r2, r3
 800d68a:	415a      	adcs	r2, r3
 800d68c:	602a      	str	r2, [r5, #0]
 800d68e:	e7ee      	b.n	800d66e <__swhatbuf_r+0x1e>
 800d690:	2340      	movs	r3, #64	; 0x40
 800d692:	2000      	movs	r0, #0
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	b016      	add	sp, #88	; 0x58
 800d698:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d69c <__smakebuf_r>:
 800d69c:	898b      	ldrh	r3, [r1, #12]
 800d69e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6a0:	079d      	lsls	r5, r3, #30
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	460c      	mov	r4, r1
 800d6a6:	d507      	bpl.n	800d6b8 <__smakebuf_r+0x1c>
 800d6a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6ac:	6023      	str	r3, [r4, #0]
 800d6ae:	6123      	str	r3, [r4, #16]
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	6163      	str	r3, [r4, #20]
 800d6b4:	b002      	add	sp, #8
 800d6b6:	bd70      	pop	{r4, r5, r6, pc}
 800d6b8:	ab01      	add	r3, sp, #4
 800d6ba:	466a      	mov	r2, sp
 800d6bc:	f7ff ffc8 	bl	800d650 <__swhatbuf_r>
 800d6c0:	9900      	ldr	r1, [sp, #0]
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f7ff fb3f 	bl	800cd48 <_malloc_r>
 800d6ca:	b948      	cbnz	r0, 800d6e0 <__smakebuf_r+0x44>
 800d6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6d0:	059a      	lsls	r2, r3, #22
 800d6d2:	d4ef      	bmi.n	800d6b4 <__smakebuf_r+0x18>
 800d6d4:	f023 0303 	bic.w	r3, r3, #3
 800d6d8:	f043 0302 	orr.w	r3, r3, #2
 800d6dc:	81a3      	strh	r3, [r4, #12]
 800d6de:	e7e3      	b.n	800d6a8 <__smakebuf_r+0xc>
 800d6e0:	4b0d      	ldr	r3, [pc, #52]	; (800d718 <__smakebuf_r+0x7c>)
 800d6e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d6e4:	89a3      	ldrh	r3, [r4, #12]
 800d6e6:	6020      	str	r0, [r4, #0]
 800d6e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6ec:	81a3      	strh	r3, [r4, #12]
 800d6ee:	9b00      	ldr	r3, [sp, #0]
 800d6f0:	6163      	str	r3, [r4, #20]
 800d6f2:	9b01      	ldr	r3, [sp, #4]
 800d6f4:	6120      	str	r0, [r4, #16]
 800d6f6:	b15b      	cbz	r3, 800d710 <__smakebuf_r+0x74>
 800d6f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	f000 fd0b 	bl	800e118 <_isatty_r>
 800d702:	b128      	cbz	r0, 800d710 <__smakebuf_r+0x74>
 800d704:	89a3      	ldrh	r3, [r4, #12]
 800d706:	f023 0303 	bic.w	r3, r3, #3
 800d70a:	f043 0301 	orr.w	r3, r3, #1
 800d70e:	81a3      	strh	r3, [r4, #12]
 800d710:	89a0      	ldrh	r0, [r4, #12]
 800d712:	4305      	orrs	r5, r0
 800d714:	81a5      	strh	r5, [r4, #12]
 800d716:	e7cd      	b.n	800d6b4 <__smakebuf_r+0x18>
 800d718:	0800d485 	.word	0x0800d485

0800d71c <__malloc_lock>:
 800d71c:	4801      	ldr	r0, [pc, #4]	; (800d724 <__malloc_lock+0x8>)
 800d71e:	f7ff bf83 	b.w	800d628 <__retarget_lock_acquire_recursive>
 800d722:	bf00      	nop
 800d724:	20002564 	.word	0x20002564

0800d728 <__malloc_unlock>:
 800d728:	4801      	ldr	r0, [pc, #4]	; (800d730 <__malloc_unlock+0x8>)
 800d72a:	f7ff bf7e 	b.w	800d62a <__retarget_lock_release_recursive>
 800d72e:	bf00      	nop
 800d730:	20002564 	.word	0x20002564

0800d734 <_realloc_r>:
 800d734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d738:	4680      	mov	r8, r0
 800d73a:	4614      	mov	r4, r2
 800d73c:	460e      	mov	r6, r1
 800d73e:	b921      	cbnz	r1, 800d74a <_realloc_r+0x16>
 800d740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d744:	4611      	mov	r1, r2
 800d746:	f7ff baff 	b.w	800cd48 <_malloc_r>
 800d74a:	b92a      	cbnz	r2, 800d758 <_realloc_r+0x24>
 800d74c:	f7ff fa90 	bl	800cc70 <_free_r>
 800d750:	4625      	mov	r5, r4
 800d752:	4628      	mov	r0, r5
 800d754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d758:	f000 fd08 	bl	800e16c <_malloc_usable_size_r>
 800d75c:	4284      	cmp	r4, r0
 800d75e:	4607      	mov	r7, r0
 800d760:	d802      	bhi.n	800d768 <_realloc_r+0x34>
 800d762:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d766:	d812      	bhi.n	800d78e <_realloc_r+0x5a>
 800d768:	4621      	mov	r1, r4
 800d76a:	4640      	mov	r0, r8
 800d76c:	f7ff faec 	bl	800cd48 <_malloc_r>
 800d770:	4605      	mov	r5, r0
 800d772:	2800      	cmp	r0, #0
 800d774:	d0ed      	beq.n	800d752 <_realloc_r+0x1e>
 800d776:	42bc      	cmp	r4, r7
 800d778:	4622      	mov	r2, r4
 800d77a:	4631      	mov	r1, r6
 800d77c:	bf28      	it	cs
 800d77e:	463a      	movcs	r2, r7
 800d780:	f7ff fa60 	bl	800cc44 <memcpy>
 800d784:	4631      	mov	r1, r6
 800d786:	4640      	mov	r0, r8
 800d788:	f7ff fa72 	bl	800cc70 <_free_r>
 800d78c:	e7e1      	b.n	800d752 <_realloc_r+0x1e>
 800d78e:	4635      	mov	r5, r6
 800d790:	e7df      	b.n	800d752 <_realloc_r+0x1e>

0800d792 <__ssputs_r>:
 800d792:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d796:	688e      	ldr	r6, [r1, #8]
 800d798:	429e      	cmp	r6, r3
 800d79a:	4682      	mov	sl, r0
 800d79c:	460c      	mov	r4, r1
 800d79e:	4690      	mov	r8, r2
 800d7a0:	461f      	mov	r7, r3
 800d7a2:	d838      	bhi.n	800d816 <__ssputs_r+0x84>
 800d7a4:	898a      	ldrh	r2, [r1, #12]
 800d7a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7aa:	d032      	beq.n	800d812 <__ssputs_r+0x80>
 800d7ac:	6825      	ldr	r5, [r4, #0]
 800d7ae:	6909      	ldr	r1, [r1, #16]
 800d7b0:	eba5 0901 	sub.w	r9, r5, r1
 800d7b4:	6965      	ldr	r5, [r4, #20]
 800d7b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7be:	3301      	adds	r3, #1
 800d7c0:	444b      	add	r3, r9
 800d7c2:	106d      	asrs	r5, r5, #1
 800d7c4:	429d      	cmp	r5, r3
 800d7c6:	bf38      	it	cc
 800d7c8:	461d      	movcc	r5, r3
 800d7ca:	0553      	lsls	r3, r2, #21
 800d7cc:	d531      	bpl.n	800d832 <__ssputs_r+0xa0>
 800d7ce:	4629      	mov	r1, r5
 800d7d0:	f7ff faba 	bl	800cd48 <_malloc_r>
 800d7d4:	4606      	mov	r6, r0
 800d7d6:	b950      	cbnz	r0, 800d7ee <__ssputs_r+0x5c>
 800d7d8:	230c      	movs	r3, #12
 800d7da:	f8ca 3000 	str.w	r3, [sl]
 800d7de:	89a3      	ldrh	r3, [r4, #12]
 800d7e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7e4:	81a3      	strh	r3, [r4, #12]
 800d7e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ee:	6921      	ldr	r1, [r4, #16]
 800d7f0:	464a      	mov	r2, r9
 800d7f2:	f7ff fa27 	bl	800cc44 <memcpy>
 800d7f6:	89a3      	ldrh	r3, [r4, #12]
 800d7f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d800:	81a3      	strh	r3, [r4, #12]
 800d802:	6126      	str	r6, [r4, #16]
 800d804:	6165      	str	r5, [r4, #20]
 800d806:	444e      	add	r6, r9
 800d808:	eba5 0509 	sub.w	r5, r5, r9
 800d80c:	6026      	str	r6, [r4, #0]
 800d80e:	60a5      	str	r5, [r4, #8]
 800d810:	463e      	mov	r6, r7
 800d812:	42be      	cmp	r6, r7
 800d814:	d900      	bls.n	800d818 <__ssputs_r+0x86>
 800d816:	463e      	mov	r6, r7
 800d818:	6820      	ldr	r0, [r4, #0]
 800d81a:	4632      	mov	r2, r6
 800d81c:	4641      	mov	r1, r8
 800d81e:	f000 fc8b 	bl	800e138 <memmove>
 800d822:	68a3      	ldr	r3, [r4, #8]
 800d824:	1b9b      	subs	r3, r3, r6
 800d826:	60a3      	str	r3, [r4, #8]
 800d828:	6823      	ldr	r3, [r4, #0]
 800d82a:	4433      	add	r3, r6
 800d82c:	6023      	str	r3, [r4, #0]
 800d82e:	2000      	movs	r0, #0
 800d830:	e7db      	b.n	800d7ea <__ssputs_r+0x58>
 800d832:	462a      	mov	r2, r5
 800d834:	f7ff ff7e 	bl	800d734 <_realloc_r>
 800d838:	4606      	mov	r6, r0
 800d83a:	2800      	cmp	r0, #0
 800d83c:	d1e1      	bne.n	800d802 <__ssputs_r+0x70>
 800d83e:	6921      	ldr	r1, [r4, #16]
 800d840:	4650      	mov	r0, sl
 800d842:	f7ff fa15 	bl	800cc70 <_free_r>
 800d846:	e7c7      	b.n	800d7d8 <__ssputs_r+0x46>

0800d848 <_svfiprintf_r>:
 800d848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d84c:	4698      	mov	r8, r3
 800d84e:	898b      	ldrh	r3, [r1, #12]
 800d850:	061b      	lsls	r3, r3, #24
 800d852:	b09d      	sub	sp, #116	; 0x74
 800d854:	4607      	mov	r7, r0
 800d856:	460d      	mov	r5, r1
 800d858:	4614      	mov	r4, r2
 800d85a:	d50e      	bpl.n	800d87a <_svfiprintf_r+0x32>
 800d85c:	690b      	ldr	r3, [r1, #16]
 800d85e:	b963      	cbnz	r3, 800d87a <_svfiprintf_r+0x32>
 800d860:	2140      	movs	r1, #64	; 0x40
 800d862:	f7ff fa71 	bl	800cd48 <_malloc_r>
 800d866:	6028      	str	r0, [r5, #0]
 800d868:	6128      	str	r0, [r5, #16]
 800d86a:	b920      	cbnz	r0, 800d876 <_svfiprintf_r+0x2e>
 800d86c:	230c      	movs	r3, #12
 800d86e:	603b      	str	r3, [r7, #0]
 800d870:	f04f 30ff 	mov.w	r0, #4294967295
 800d874:	e0d1      	b.n	800da1a <_svfiprintf_r+0x1d2>
 800d876:	2340      	movs	r3, #64	; 0x40
 800d878:	616b      	str	r3, [r5, #20]
 800d87a:	2300      	movs	r3, #0
 800d87c:	9309      	str	r3, [sp, #36]	; 0x24
 800d87e:	2320      	movs	r3, #32
 800d880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d884:	f8cd 800c 	str.w	r8, [sp, #12]
 800d888:	2330      	movs	r3, #48	; 0x30
 800d88a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800da34 <_svfiprintf_r+0x1ec>
 800d88e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d892:	f04f 0901 	mov.w	r9, #1
 800d896:	4623      	mov	r3, r4
 800d898:	469a      	mov	sl, r3
 800d89a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d89e:	b10a      	cbz	r2, 800d8a4 <_svfiprintf_r+0x5c>
 800d8a0:	2a25      	cmp	r2, #37	; 0x25
 800d8a2:	d1f9      	bne.n	800d898 <_svfiprintf_r+0x50>
 800d8a4:	ebba 0b04 	subs.w	fp, sl, r4
 800d8a8:	d00b      	beq.n	800d8c2 <_svfiprintf_r+0x7a>
 800d8aa:	465b      	mov	r3, fp
 800d8ac:	4622      	mov	r2, r4
 800d8ae:	4629      	mov	r1, r5
 800d8b0:	4638      	mov	r0, r7
 800d8b2:	f7ff ff6e 	bl	800d792 <__ssputs_r>
 800d8b6:	3001      	adds	r0, #1
 800d8b8:	f000 80aa 	beq.w	800da10 <_svfiprintf_r+0x1c8>
 800d8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8be:	445a      	add	r2, fp
 800d8c0:	9209      	str	r2, [sp, #36]	; 0x24
 800d8c2:	f89a 3000 	ldrb.w	r3, [sl]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	f000 80a2 	beq.w	800da10 <_svfiprintf_r+0x1c8>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8d6:	f10a 0a01 	add.w	sl, sl, #1
 800d8da:	9304      	str	r3, [sp, #16]
 800d8dc:	9307      	str	r3, [sp, #28]
 800d8de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8e2:	931a      	str	r3, [sp, #104]	; 0x68
 800d8e4:	4654      	mov	r4, sl
 800d8e6:	2205      	movs	r2, #5
 800d8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8ec:	4851      	ldr	r0, [pc, #324]	; (800da34 <_svfiprintf_r+0x1ec>)
 800d8ee:	f7f2 fc4f 	bl	8000190 <memchr>
 800d8f2:	9a04      	ldr	r2, [sp, #16]
 800d8f4:	b9d8      	cbnz	r0, 800d92e <_svfiprintf_r+0xe6>
 800d8f6:	06d0      	lsls	r0, r2, #27
 800d8f8:	bf44      	itt	mi
 800d8fa:	2320      	movmi	r3, #32
 800d8fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d900:	0711      	lsls	r1, r2, #28
 800d902:	bf44      	itt	mi
 800d904:	232b      	movmi	r3, #43	; 0x2b
 800d906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d90a:	f89a 3000 	ldrb.w	r3, [sl]
 800d90e:	2b2a      	cmp	r3, #42	; 0x2a
 800d910:	d015      	beq.n	800d93e <_svfiprintf_r+0xf6>
 800d912:	9a07      	ldr	r2, [sp, #28]
 800d914:	4654      	mov	r4, sl
 800d916:	2000      	movs	r0, #0
 800d918:	f04f 0c0a 	mov.w	ip, #10
 800d91c:	4621      	mov	r1, r4
 800d91e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d922:	3b30      	subs	r3, #48	; 0x30
 800d924:	2b09      	cmp	r3, #9
 800d926:	d94e      	bls.n	800d9c6 <_svfiprintf_r+0x17e>
 800d928:	b1b0      	cbz	r0, 800d958 <_svfiprintf_r+0x110>
 800d92a:	9207      	str	r2, [sp, #28]
 800d92c:	e014      	b.n	800d958 <_svfiprintf_r+0x110>
 800d92e:	eba0 0308 	sub.w	r3, r0, r8
 800d932:	fa09 f303 	lsl.w	r3, r9, r3
 800d936:	4313      	orrs	r3, r2
 800d938:	9304      	str	r3, [sp, #16]
 800d93a:	46a2      	mov	sl, r4
 800d93c:	e7d2      	b.n	800d8e4 <_svfiprintf_r+0x9c>
 800d93e:	9b03      	ldr	r3, [sp, #12]
 800d940:	1d19      	adds	r1, r3, #4
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	9103      	str	r1, [sp, #12]
 800d946:	2b00      	cmp	r3, #0
 800d948:	bfbb      	ittet	lt
 800d94a:	425b      	neglt	r3, r3
 800d94c:	f042 0202 	orrlt.w	r2, r2, #2
 800d950:	9307      	strge	r3, [sp, #28]
 800d952:	9307      	strlt	r3, [sp, #28]
 800d954:	bfb8      	it	lt
 800d956:	9204      	strlt	r2, [sp, #16]
 800d958:	7823      	ldrb	r3, [r4, #0]
 800d95a:	2b2e      	cmp	r3, #46	; 0x2e
 800d95c:	d10c      	bne.n	800d978 <_svfiprintf_r+0x130>
 800d95e:	7863      	ldrb	r3, [r4, #1]
 800d960:	2b2a      	cmp	r3, #42	; 0x2a
 800d962:	d135      	bne.n	800d9d0 <_svfiprintf_r+0x188>
 800d964:	9b03      	ldr	r3, [sp, #12]
 800d966:	1d1a      	adds	r2, r3, #4
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	9203      	str	r2, [sp, #12]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	bfb8      	it	lt
 800d970:	f04f 33ff 	movlt.w	r3, #4294967295
 800d974:	3402      	adds	r4, #2
 800d976:	9305      	str	r3, [sp, #20]
 800d978:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800da44 <_svfiprintf_r+0x1fc>
 800d97c:	7821      	ldrb	r1, [r4, #0]
 800d97e:	2203      	movs	r2, #3
 800d980:	4650      	mov	r0, sl
 800d982:	f7f2 fc05 	bl	8000190 <memchr>
 800d986:	b140      	cbz	r0, 800d99a <_svfiprintf_r+0x152>
 800d988:	2340      	movs	r3, #64	; 0x40
 800d98a:	eba0 000a 	sub.w	r0, r0, sl
 800d98e:	fa03 f000 	lsl.w	r0, r3, r0
 800d992:	9b04      	ldr	r3, [sp, #16]
 800d994:	4303      	orrs	r3, r0
 800d996:	3401      	adds	r4, #1
 800d998:	9304      	str	r3, [sp, #16]
 800d99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d99e:	4826      	ldr	r0, [pc, #152]	; (800da38 <_svfiprintf_r+0x1f0>)
 800d9a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9a4:	2206      	movs	r2, #6
 800d9a6:	f7f2 fbf3 	bl	8000190 <memchr>
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	d038      	beq.n	800da20 <_svfiprintf_r+0x1d8>
 800d9ae:	4b23      	ldr	r3, [pc, #140]	; (800da3c <_svfiprintf_r+0x1f4>)
 800d9b0:	bb1b      	cbnz	r3, 800d9fa <_svfiprintf_r+0x1b2>
 800d9b2:	9b03      	ldr	r3, [sp, #12]
 800d9b4:	3307      	adds	r3, #7
 800d9b6:	f023 0307 	bic.w	r3, r3, #7
 800d9ba:	3308      	adds	r3, #8
 800d9bc:	9303      	str	r3, [sp, #12]
 800d9be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c0:	4433      	add	r3, r6
 800d9c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d9c4:	e767      	b.n	800d896 <_svfiprintf_r+0x4e>
 800d9c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9ca:	460c      	mov	r4, r1
 800d9cc:	2001      	movs	r0, #1
 800d9ce:	e7a5      	b.n	800d91c <_svfiprintf_r+0xd4>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	3401      	adds	r4, #1
 800d9d4:	9305      	str	r3, [sp, #20]
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	f04f 0c0a 	mov.w	ip, #10
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9e2:	3a30      	subs	r2, #48	; 0x30
 800d9e4:	2a09      	cmp	r2, #9
 800d9e6:	d903      	bls.n	800d9f0 <_svfiprintf_r+0x1a8>
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d0c5      	beq.n	800d978 <_svfiprintf_r+0x130>
 800d9ec:	9105      	str	r1, [sp, #20]
 800d9ee:	e7c3      	b.n	800d978 <_svfiprintf_r+0x130>
 800d9f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9f4:	4604      	mov	r4, r0
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e7f0      	b.n	800d9dc <_svfiprintf_r+0x194>
 800d9fa:	ab03      	add	r3, sp, #12
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	462a      	mov	r2, r5
 800da00:	4b0f      	ldr	r3, [pc, #60]	; (800da40 <_svfiprintf_r+0x1f8>)
 800da02:	a904      	add	r1, sp, #16
 800da04:	4638      	mov	r0, r7
 800da06:	f3af 8000 	nop.w
 800da0a:	1c42      	adds	r2, r0, #1
 800da0c:	4606      	mov	r6, r0
 800da0e:	d1d6      	bne.n	800d9be <_svfiprintf_r+0x176>
 800da10:	89ab      	ldrh	r3, [r5, #12]
 800da12:	065b      	lsls	r3, r3, #25
 800da14:	f53f af2c 	bmi.w	800d870 <_svfiprintf_r+0x28>
 800da18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da1a:	b01d      	add	sp, #116	; 0x74
 800da1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da20:	ab03      	add	r3, sp, #12
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	462a      	mov	r2, r5
 800da26:	4b06      	ldr	r3, [pc, #24]	; (800da40 <_svfiprintf_r+0x1f8>)
 800da28:	a904      	add	r1, sp, #16
 800da2a:	4638      	mov	r0, r7
 800da2c:	f000 f9d4 	bl	800ddd8 <_printf_i>
 800da30:	e7eb      	b.n	800da0a <_svfiprintf_r+0x1c2>
 800da32:	bf00      	nop
 800da34:	0800fe9c 	.word	0x0800fe9c
 800da38:	0800fea6 	.word	0x0800fea6
 800da3c:	00000000 	.word	0x00000000
 800da40:	0800d793 	.word	0x0800d793
 800da44:	0800fea2 	.word	0x0800fea2

0800da48 <__sfputc_r>:
 800da48:	6893      	ldr	r3, [r2, #8]
 800da4a:	3b01      	subs	r3, #1
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	b410      	push	{r4}
 800da50:	6093      	str	r3, [r2, #8]
 800da52:	da08      	bge.n	800da66 <__sfputc_r+0x1e>
 800da54:	6994      	ldr	r4, [r2, #24]
 800da56:	42a3      	cmp	r3, r4
 800da58:	db01      	blt.n	800da5e <__sfputc_r+0x16>
 800da5a:	290a      	cmp	r1, #10
 800da5c:	d103      	bne.n	800da66 <__sfputc_r+0x1e>
 800da5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da62:	f7ff bb47 	b.w	800d0f4 <__swbuf_r>
 800da66:	6813      	ldr	r3, [r2, #0]
 800da68:	1c58      	adds	r0, r3, #1
 800da6a:	6010      	str	r0, [r2, #0]
 800da6c:	7019      	strb	r1, [r3, #0]
 800da6e:	4608      	mov	r0, r1
 800da70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da74:	4770      	bx	lr

0800da76 <__sfputs_r>:
 800da76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da78:	4606      	mov	r6, r0
 800da7a:	460f      	mov	r7, r1
 800da7c:	4614      	mov	r4, r2
 800da7e:	18d5      	adds	r5, r2, r3
 800da80:	42ac      	cmp	r4, r5
 800da82:	d101      	bne.n	800da88 <__sfputs_r+0x12>
 800da84:	2000      	movs	r0, #0
 800da86:	e007      	b.n	800da98 <__sfputs_r+0x22>
 800da88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da8c:	463a      	mov	r2, r7
 800da8e:	4630      	mov	r0, r6
 800da90:	f7ff ffda 	bl	800da48 <__sfputc_r>
 800da94:	1c43      	adds	r3, r0, #1
 800da96:	d1f3      	bne.n	800da80 <__sfputs_r+0xa>
 800da98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da9c <_vfiprintf_r>:
 800da9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa0:	460d      	mov	r5, r1
 800daa2:	b09d      	sub	sp, #116	; 0x74
 800daa4:	4614      	mov	r4, r2
 800daa6:	4698      	mov	r8, r3
 800daa8:	4606      	mov	r6, r0
 800daaa:	b118      	cbz	r0, 800dab4 <_vfiprintf_r+0x18>
 800daac:	6983      	ldr	r3, [r0, #24]
 800daae:	b90b      	cbnz	r3, 800dab4 <_vfiprintf_r+0x18>
 800dab0:	f7ff fd1c 	bl	800d4ec <__sinit>
 800dab4:	4b89      	ldr	r3, [pc, #548]	; (800dcdc <_vfiprintf_r+0x240>)
 800dab6:	429d      	cmp	r5, r3
 800dab8:	d11b      	bne.n	800daf2 <_vfiprintf_r+0x56>
 800daba:	6875      	ldr	r5, [r6, #4]
 800dabc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dabe:	07d9      	lsls	r1, r3, #31
 800dac0:	d405      	bmi.n	800dace <_vfiprintf_r+0x32>
 800dac2:	89ab      	ldrh	r3, [r5, #12]
 800dac4:	059a      	lsls	r2, r3, #22
 800dac6:	d402      	bmi.n	800dace <_vfiprintf_r+0x32>
 800dac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daca:	f7ff fdad 	bl	800d628 <__retarget_lock_acquire_recursive>
 800dace:	89ab      	ldrh	r3, [r5, #12]
 800dad0:	071b      	lsls	r3, r3, #28
 800dad2:	d501      	bpl.n	800dad8 <_vfiprintf_r+0x3c>
 800dad4:	692b      	ldr	r3, [r5, #16]
 800dad6:	b9eb      	cbnz	r3, 800db14 <_vfiprintf_r+0x78>
 800dad8:	4629      	mov	r1, r5
 800dada:	4630      	mov	r0, r6
 800dadc:	f7ff fb6e 	bl	800d1bc <__swsetup_r>
 800dae0:	b1c0      	cbz	r0, 800db14 <_vfiprintf_r+0x78>
 800dae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dae4:	07dc      	lsls	r4, r3, #31
 800dae6:	d50e      	bpl.n	800db06 <_vfiprintf_r+0x6a>
 800dae8:	f04f 30ff 	mov.w	r0, #4294967295
 800daec:	b01d      	add	sp, #116	; 0x74
 800daee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf2:	4b7b      	ldr	r3, [pc, #492]	; (800dce0 <_vfiprintf_r+0x244>)
 800daf4:	429d      	cmp	r5, r3
 800daf6:	d101      	bne.n	800dafc <_vfiprintf_r+0x60>
 800daf8:	68b5      	ldr	r5, [r6, #8]
 800dafa:	e7df      	b.n	800dabc <_vfiprintf_r+0x20>
 800dafc:	4b79      	ldr	r3, [pc, #484]	; (800dce4 <_vfiprintf_r+0x248>)
 800dafe:	429d      	cmp	r5, r3
 800db00:	bf08      	it	eq
 800db02:	68f5      	ldreq	r5, [r6, #12]
 800db04:	e7da      	b.n	800dabc <_vfiprintf_r+0x20>
 800db06:	89ab      	ldrh	r3, [r5, #12]
 800db08:	0598      	lsls	r0, r3, #22
 800db0a:	d4ed      	bmi.n	800dae8 <_vfiprintf_r+0x4c>
 800db0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db0e:	f7ff fd8c 	bl	800d62a <__retarget_lock_release_recursive>
 800db12:	e7e9      	b.n	800dae8 <_vfiprintf_r+0x4c>
 800db14:	2300      	movs	r3, #0
 800db16:	9309      	str	r3, [sp, #36]	; 0x24
 800db18:	2320      	movs	r3, #32
 800db1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800db22:	2330      	movs	r3, #48	; 0x30
 800db24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dce8 <_vfiprintf_r+0x24c>
 800db28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db2c:	f04f 0901 	mov.w	r9, #1
 800db30:	4623      	mov	r3, r4
 800db32:	469a      	mov	sl, r3
 800db34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db38:	b10a      	cbz	r2, 800db3e <_vfiprintf_r+0xa2>
 800db3a:	2a25      	cmp	r2, #37	; 0x25
 800db3c:	d1f9      	bne.n	800db32 <_vfiprintf_r+0x96>
 800db3e:	ebba 0b04 	subs.w	fp, sl, r4
 800db42:	d00b      	beq.n	800db5c <_vfiprintf_r+0xc0>
 800db44:	465b      	mov	r3, fp
 800db46:	4622      	mov	r2, r4
 800db48:	4629      	mov	r1, r5
 800db4a:	4630      	mov	r0, r6
 800db4c:	f7ff ff93 	bl	800da76 <__sfputs_r>
 800db50:	3001      	adds	r0, #1
 800db52:	f000 80aa 	beq.w	800dcaa <_vfiprintf_r+0x20e>
 800db56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db58:	445a      	add	r2, fp
 800db5a:	9209      	str	r2, [sp, #36]	; 0x24
 800db5c:	f89a 3000 	ldrb.w	r3, [sl]
 800db60:	2b00      	cmp	r3, #0
 800db62:	f000 80a2 	beq.w	800dcaa <_vfiprintf_r+0x20e>
 800db66:	2300      	movs	r3, #0
 800db68:	f04f 32ff 	mov.w	r2, #4294967295
 800db6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db70:	f10a 0a01 	add.w	sl, sl, #1
 800db74:	9304      	str	r3, [sp, #16]
 800db76:	9307      	str	r3, [sp, #28]
 800db78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db7c:	931a      	str	r3, [sp, #104]	; 0x68
 800db7e:	4654      	mov	r4, sl
 800db80:	2205      	movs	r2, #5
 800db82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db86:	4858      	ldr	r0, [pc, #352]	; (800dce8 <_vfiprintf_r+0x24c>)
 800db88:	f7f2 fb02 	bl	8000190 <memchr>
 800db8c:	9a04      	ldr	r2, [sp, #16]
 800db8e:	b9d8      	cbnz	r0, 800dbc8 <_vfiprintf_r+0x12c>
 800db90:	06d1      	lsls	r1, r2, #27
 800db92:	bf44      	itt	mi
 800db94:	2320      	movmi	r3, #32
 800db96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db9a:	0713      	lsls	r3, r2, #28
 800db9c:	bf44      	itt	mi
 800db9e:	232b      	movmi	r3, #43	; 0x2b
 800dba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dba4:	f89a 3000 	ldrb.w	r3, [sl]
 800dba8:	2b2a      	cmp	r3, #42	; 0x2a
 800dbaa:	d015      	beq.n	800dbd8 <_vfiprintf_r+0x13c>
 800dbac:	9a07      	ldr	r2, [sp, #28]
 800dbae:	4654      	mov	r4, sl
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	f04f 0c0a 	mov.w	ip, #10
 800dbb6:	4621      	mov	r1, r4
 800dbb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbbc:	3b30      	subs	r3, #48	; 0x30
 800dbbe:	2b09      	cmp	r3, #9
 800dbc0:	d94e      	bls.n	800dc60 <_vfiprintf_r+0x1c4>
 800dbc2:	b1b0      	cbz	r0, 800dbf2 <_vfiprintf_r+0x156>
 800dbc4:	9207      	str	r2, [sp, #28]
 800dbc6:	e014      	b.n	800dbf2 <_vfiprintf_r+0x156>
 800dbc8:	eba0 0308 	sub.w	r3, r0, r8
 800dbcc:	fa09 f303 	lsl.w	r3, r9, r3
 800dbd0:	4313      	orrs	r3, r2
 800dbd2:	9304      	str	r3, [sp, #16]
 800dbd4:	46a2      	mov	sl, r4
 800dbd6:	e7d2      	b.n	800db7e <_vfiprintf_r+0xe2>
 800dbd8:	9b03      	ldr	r3, [sp, #12]
 800dbda:	1d19      	adds	r1, r3, #4
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	9103      	str	r1, [sp, #12]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	bfbb      	ittet	lt
 800dbe4:	425b      	neglt	r3, r3
 800dbe6:	f042 0202 	orrlt.w	r2, r2, #2
 800dbea:	9307      	strge	r3, [sp, #28]
 800dbec:	9307      	strlt	r3, [sp, #28]
 800dbee:	bfb8      	it	lt
 800dbf0:	9204      	strlt	r2, [sp, #16]
 800dbf2:	7823      	ldrb	r3, [r4, #0]
 800dbf4:	2b2e      	cmp	r3, #46	; 0x2e
 800dbf6:	d10c      	bne.n	800dc12 <_vfiprintf_r+0x176>
 800dbf8:	7863      	ldrb	r3, [r4, #1]
 800dbfa:	2b2a      	cmp	r3, #42	; 0x2a
 800dbfc:	d135      	bne.n	800dc6a <_vfiprintf_r+0x1ce>
 800dbfe:	9b03      	ldr	r3, [sp, #12]
 800dc00:	1d1a      	adds	r2, r3, #4
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	9203      	str	r2, [sp, #12]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	bfb8      	it	lt
 800dc0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc0e:	3402      	adds	r4, #2
 800dc10:	9305      	str	r3, [sp, #20]
 800dc12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dcf8 <_vfiprintf_r+0x25c>
 800dc16:	7821      	ldrb	r1, [r4, #0]
 800dc18:	2203      	movs	r2, #3
 800dc1a:	4650      	mov	r0, sl
 800dc1c:	f7f2 fab8 	bl	8000190 <memchr>
 800dc20:	b140      	cbz	r0, 800dc34 <_vfiprintf_r+0x198>
 800dc22:	2340      	movs	r3, #64	; 0x40
 800dc24:	eba0 000a 	sub.w	r0, r0, sl
 800dc28:	fa03 f000 	lsl.w	r0, r3, r0
 800dc2c:	9b04      	ldr	r3, [sp, #16]
 800dc2e:	4303      	orrs	r3, r0
 800dc30:	3401      	adds	r4, #1
 800dc32:	9304      	str	r3, [sp, #16]
 800dc34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc38:	482c      	ldr	r0, [pc, #176]	; (800dcec <_vfiprintf_r+0x250>)
 800dc3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc3e:	2206      	movs	r2, #6
 800dc40:	f7f2 faa6 	bl	8000190 <memchr>
 800dc44:	2800      	cmp	r0, #0
 800dc46:	d03f      	beq.n	800dcc8 <_vfiprintf_r+0x22c>
 800dc48:	4b29      	ldr	r3, [pc, #164]	; (800dcf0 <_vfiprintf_r+0x254>)
 800dc4a:	bb1b      	cbnz	r3, 800dc94 <_vfiprintf_r+0x1f8>
 800dc4c:	9b03      	ldr	r3, [sp, #12]
 800dc4e:	3307      	adds	r3, #7
 800dc50:	f023 0307 	bic.w	r3, r3, #7
 800dc54:	3308      	adds	r3, #8
 800dc56:	9303      	str	r3, [sp, #12]
 800dc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc5a:	443b      	add	r3, r7
 800dc5c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc5e:	e767      	b.n	800db30 <_vfiprintf_r+0x94>
 800dc60:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc64:	460c      	mov	r4, r1
 800dc66:	2001      	movs	r0, #1
 800dc68:	e7a5      	b.n	800dbb6 <_vfiprintf_r+0x11a>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	3401      	adds	r4, #1
 800dc6e:	9305      	str	r3, [sp, #20]
 800dc70:	4619      	mov	r1, r3
 800dc72:	f04f 0c0a 	mov.w	ip, #10
 800dc76:	4620      	mov	r0, r4
 800dc78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc7c:	3a30      	subs	r2, #48	; 0x30
 800dc7e:	2a09      	cmp	r2, #9
 800dc80:	d903      	bls.n	800dc8a <_vfiprintf_r+0x1ee>
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d0c5      	beq.n	800dc12 <_vfiprintf_r+0x176>
 800dc86:	9105      	str	r1, [sp, #20]
 800dc88:	e7c3      	b.n	800dc12 <_vfiprintf_r+0x176>
 800dc8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc8e:	4604      	mov	r4, r0
 800dc90:	2301      	movs	r3, #1
 800dc92:	e7f0      	b.n	800dc76 <_vfiprintf_r+0x1da>
 800dc94:	ab03      	add	r3, sp, #12
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	462a      	mov	r2, r5
 800dc9a:	4b16      	ldr	r3, [pc, #88]	; (800dcf4 <_vfiprintf_r+0x258>)
 800dc9c:	a904      	add	r1, sp, #16
 800dc9e:	4630      	mov	r0, r6
 800dca0:	f3af 8000 	nop.w
 800dca4:	4607      	mov	r7, r0
 800dca6:	1c78      	adds	r0, r7, #1
 800dca8:	d1d6      	bne.n	800dc58 <_vfiprintf_r+0x1bc>
 800dcaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcac:	07d9      	lsls	r1, r3, #31
 800dcae:	d405      	bmi.n	800dcbc <_vfiprintf_r+0x220>
 800dcb0:	89ab      	ldrh	r3, [r5, #12]
 800dcb2:	059a      	lsls	r2, r3, #22
 800dcb4:	d402      	bmi.n	800dcbc <_vfiprintf_r+0x220>
 800dcb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcb8:	f7ff fcb7 	bl	800d62a <__retarget_lock_release_recursive>
 800dcbc:	89ab      	ldrh	r3, [r5, #12]
 800dcbe:	065b      	lsls	r3, r3, #25
 800dcc0:	f53f af12 	bmi.w	800dae8 <_vfiprintf_r+0x4c>
 800dcc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcc6:	e711      	b.n	800daec <_vfiprintf_r+0x50>
 800dcc8:	ab03      	add	r3, sp, #12
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	462a      	mov	r2, r5
 800dcce:	4b09      	ldr	r3, [pc, #36]	; (800dcf4 <_vfiprintf_r+0x258>)
 800dcd0:	a904      	add	r1, sp, #16
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	f000 f880 	bl	800ddd8 <_printf_i>
 800dcd8:	e7e4      	b.n	800dca4 <_vfiprintf_r+0x208>
 800dcda:	bf00      	nop
 800dcdc:	0800fe5c 	.word	0x0800fe5c
 800dce0:	0800fe7c 	.word	0x0800fe7c
 800dce4:	0800fe3c 	.word	0x0800fe3c
 800dce8:	0800fe9c 	.word	0x0800fe9c
 800dcec:	0800fea6 	.word	0x0800fea6
 800dcf0:	00000000 	.word	0x00000000
 800dcf4:	0800da77 	.word	0x0800da77
 800dcf8:	0800fea2 	.word	0x0800fea2

0800dcfc <_printf_common>:
 800dcfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd00:	4616      	mov	r6, r2
 800dd02:	4699      	mov	r9, r3
 800dd04:	688a      	ldr	r2, [r1, #8]
 800dd06:	690b      	ldr	r3, [r1, #16]
 800dd08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	bfb8      	it	lt
 800dd10:	4613      	movlt	r3, r2
 800dd12:	6033      	str	r3, [r6, #0]
 800dd14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd18:	4607      	mov	r7, r0
 800dd1a:	460c      	mov	r4, r1
 800dd1c:	b10a      	cbz	r2, 800dd22 <_printf_common+0x26>
 800dd1e:	3301      	adds	r3, #1
 800dd20:	6033      	str	r3, [r6, #0]
 800dd22:	6823      	ldr	r3, [r4, #0]
 800dd24:	0699      	lsls	r1, r3, #26
 800dd26:	bf42      	ittt	mi
 800dd28:	6833      	ldrmi	r3, [r6, #0]
 800dd2a:	3302      	addmi	r3, #2
 800dd2c:	6033      	strmi	r3, [r6, #0]
 800dd2e:	6825      	ldr	r5, [r4, #0]
 800dd30:	f015 0506 	ands.w	r5, r5, #6
 800dd34:	d106      	bne.n	800dd44 <_printf_common+0x48>
 800dd36:	f104 0a19 	add.w	sl, r4, #25
 800dd3a:	68e3      	ldr	r3, [r4, #12]
 800dd3c:	6832      	ldr	r2, [r6, #0]
 800dd3e:	1a9b      	subs	r3, r3, r2
 800dd40:	42ab      	cmp	r3, r5
 800dd42:	dc26      	bgt.n	800dd92 <_printf_common+0x96>
 800dd44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd48:	1e13      	subs	r3, r2, #0
 800dd4a:	6822      	ldr	r2, [r4, #0]
 800dd4c:	bf18      	it	ne
 800dd4e:	2301      	movne	r3, #1
 800dd50:	0692      	lsls	r2, r2, #26
 800dd52:	d42b      	bmi.n	800ddac <_printf_common+0xb0>
 800dd54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd58:	4649      	mov	r1, r9
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	47c0      	blx	r8
 800dd5e:	3001      	adds	r0, #1
 800dd60:	d01e      	beq.n	800dda0 <_printf_common+0xa4>
 800dd62:	6823      	ldr	r3, [r4, #0]
 800dd64:	68e5      	ldr	r5, [r4, #12]
 800dd66:	6832      	ldr	r2, [r6, #0]
 800dd68:	f003 0306 	and.w	r3, r3, #6
 800dd6c:	2b04      	cmp	r3, #4
 800dd6e:	bf08      	it	eq
 800dd70:	1aad      	subeq	r5, r5, r2
 800dd72:	68a3      	ldr	r3, [r4, #8]
 800dd74:	6922      	ldr	r2, [r4, #16]
 800dd76:	bf0c      	ite	eq
 800dd78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd7c:	2500      	movne	r5, #0
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	bfc4      	itt	gt
 800dd82:	1a9b      	subgt	r3, r3, r2
 800dd84:	18ed      	addgt	r5, r5, r3
 800dd86:	2600      	movs	r6, #0
 800dd88:	341a      	adds	r4, #26
 800dd8a:	42b5      	cmp	r5, r6
 800dd8c:	d11a      	bne.n	800ddc4 <_printf_common+0xc8>
 800dd8e:	2000      	movs	r0, #0
 800dd90:	e008      	b.n	800dda4 <_printf_common+0xa8>
 800dd92:	2301      	movs	r3, #1
 800dd94:	4652      	mov	r2, sl
 800dd96:	4649      	mov	r1, r9
 800dd98:	4638      	mov	r0, r7
 800dd9a:	47c0      	blx	r8
 800dd9c:	3001      	adds	r0, #1
 800dd9e:	d103      	bne.n	800dda8 <_printf_common+0xac>
 800dda0:	f04f 30ff 	mov.w	r0, #4294967295
 800dda4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dda8:	3501      	adds	r5, #1
 800ddaa:	e7c6      	b.n	800dd3a <_printf_common+0x3e>
 800ddac:	18e1      	adds	r1, r4, r3
 800ddae:	1c5a      	adds	r2, r3, #1
 800ddb0:	2030      	movs	r0, #48	; 0x30
 800ddb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ddb6:	4422      	add	r2, r4
 800ddb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddc0:	3302      	adds	r3, #2
 800ddc2:	e7c7      	b.n	800dd54 <_printf_common+0x58>
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	4622      	mov	r2, r4
 800ddc8:	4649      	mov	r1, r9
 800ddca:	4638      	mov	r0, r7
 800ddcc:	47c0      	blx	r8
 800ddce:	3001      	adds	r0, #1
 800ddd0:	d0e6      	beq.n	800dda0 <_printf_common+0xa4>
 800ddd2:	3601      	adds	r6, #1
 800ddd4:	e7d9      	b.n	800dd8a <_printf_common+0x8e>
	...

0800ddd8 <_printf_i>:
 800ddd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dddc:	7e0f      	ldrb	r7, [r1, #24]
 800ddde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dde0:	2f78      	cmp	r7, #120	; 0x78
 800dde2:	4691      	mov	r9, r2
 800dde4:	4680      	mov	r8, r0
 800dde6:	460c      	mov	r4, r1
 800dde8:	469a      	mov	sl, r3
 800ddea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ddee:	d807      	bhi.n	800de00 <_printf_i+0x28>
 800ddf0:	2f62      	cmp	r7, #98	; 0x62
 800ddf2:	d80a      	bhi.n	800de0a <_printf_i+0x32>
 800ddf4:	2f00      	cmp	r7, #0
 800ddf6:	f000 80d8 	beq.w	800dfaa <_printf_i+0x1d2>
 800ddfa:	2f58      	cmp	r7, #88	; 0x58
 800ddfc:	f000 80a3 	beq.w	800df46 <_printf_i+0x16e>
 800de00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de08:	e03a      	b.n	800de80 <_printf_i+0xa8>
 800de0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de0e:	2b15      	cmp	r3, #21
 800de10:	d8f6      	bhi.n	800de00 <_printf_i+0x28>
 800de12:	a101      	add	r1, pc, #4	; (adr r1, 800de18 <_printf_i+0x40>)
 800de14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de18:	0800de71 	.word	0x0800de71
 800de1c:	0800de85 	.word	0x0800de85
 800de20:	0800de01 	.word	0x0800de01
 800de24:	0800de01 	.word	0x0800de01
 800de28:	0800de01 	.word	0x0800de01
 800de2c:	0800de01 	.word	0x0800de01
 800de30:	0800de85 	.word	0x0800de85
 800de34:	0800de01 	.word	0x0800de01
 800de38:	0800de01 	.word	0x0800de01
 800de3c:	0800de01 	.word	0x0800de01
 800de40:	0800de01 	.word	0x0800de01
 800de44:	0800df91 	.word	0x0800df91
 800de48:	0800deb5 	.word	0x0800deb5
 800de4c:	0800df73 	.word	0x0800df73
 800de50:	0800de01 	.word	0x0800de01
 800de54:	0800de01 	.word	0x0800de01
 800de58:	0800dfb3 	.word	0x0800dfb3
 800de5c:	0800de01 	.word	0x0800de01
 800de60:	0800deb5 	.word	0x0800deb5
 800de64:	0800de01 	.word	0x0800de01
 800de68:	0800de01 	.word	0x0800de01
 800de6c:	0800df7b 	.word	0x0800df7b
 800de70:	682b      	ldr	r3, [r5, #0]
 800de72:	1d1a      	adds	r2, r3, #4
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	602a      	str	r2, [r5, #0]
 800de78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de80:	2301      	movs	r3, #1
 800de82:	e0a3      	b.n	800dfcc <_printf_i+0x1f4>
 800de84:	6820      	ldr	r0, [r4, #0]
 800de86:	6829      	ldr	r1, [r5, #0]
 800de88:	0606      	lsls	r6, r0, #24
 800de8a:	f101 0304 	add.w	r3, r1, #4
 800de8e:	d50a      	bpl.n	800dea6 <_printf_i+0xce>
 800de90:	680e      	ldr	r6, [r1, #0]
 800de92:	602b      	str	r3, [r5, #0]
 800de94:	2e00      	cmp	r6, #0
 800de96:	da03      	bge.n	800dea0 <_printf_i+0xc8>
 800de98:	232d      	movs	r3, #45	; 0x2d
 800de9a:	4276      	negs	r6, r6
 800de9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dea0:	485e      	ldr	r0, [pc, #376]	; (800e01c <_printf_i+0x244>)
 800dea2:	230a      	movs	r3, #10
 800dea4:	e019      	b.n	800deda <_printf_i+0x102>
 800dea6:	680e      	ldr	r6, [r1, #0]
 800dea8:	602b      	str	r3, [r5, #0]
 800deaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800deae:	bf18      	it	ne
 800deb0:	b236      	sxthne	r6, r6
 800deb2:	e7ef      	b.n	800de94 <_printf_i+0xbc>
 800deb4:	682b      	ldr	r3, [r5, #0]
 800deb6:	6820      	ldr	r0, [r4, #0]
 800deb8:	1d19      	adds	r1, r3, #4
 800deba:	6029      	str	r1, [r5, #0]
 800debc:	0601      	lsls	r1, r0, #24
 800debe:	d501      	bpl.n	800dec4 <_printf_i+0xec>
 800dec0:	681e      	ldr	r6, [r3, #0]
 800dec2:	e002      	b.n	800deca <_printf_i+0xf2>
 800dec4:	0646      	lsls	r6, r0, #25
 800dec6:	d5fb      	bpl.n	800dec0 <_printf_i+0xe8>
 800dec8:	881e      	ldrh	r6, [r3, #0]
 800deca:	4854      	ldr	r0, [pc, #336]	; (800e01c <_printf_i+0x244>)
 800decc:	2f6f      	cmp	r7, #111	; 0x6f
 800dece:	bf0c      	ite	eq
 800ded0:	2308      	moveq	r3, #8
 800ded2:	230a      	movne	r3, #10
 800ded4:	2100      	movs	r1, #0
 800ded6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800deda:	6865      	ldr	r5, [r4, #4]
 800dedc:	60a5      	str	r5, [r4, #8]
 800dede:	2d00      	cmp	r5, #0
 800dee0:	bfa2      	ittt	ge
 800dee2:	6821      	ldrge	r1, [r4, #0]
 800dee4:	f021 0104 	bicge.w	r1, r1, #4
 800dee8:	6021      	strge	r1, [r4, #0]
 800deea:	b90e      	cbnz	r6, 800def0 <_printf_i+0x118>
 800deec:	2d00      	cmp	r5, #0
 800deee:	d04d      	beq.n	800df8c <_printf_i+0x1b4>
 800def0:	4615      	mov	r5, r2
 800def2:	fbb6 f1f3 	udiv	r1, r6, r3
 800def6:	fb03 6711 	mls	r7, r3, r1, r6
 800defa:	5dc7      	ldrb	r7, [r0, r7]
 800defc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800df00:	4637      	mov	r7, r6
 800df02:	42bb      	cmp	r3, r7
 800df04:	460e      	mov	r6, r1
 800df06:	d9f4      	bls.n	800def2 <_printf_i+0x11a>
 800df08:	2b08      	cmp	r3, #8
 800df0a:	d10b      	bne.n	800df24 <_printf_i+0x14c>
 800df0c:	6823      	ldr	r3, [r4, #0]
 800df0e:	07de      	lsls	r6, r3, #31
 800df10:	d508      	bpl.n	800df24 <_printf_i+0x14c>
 800df12:	6923      	ldr	r3, [r4, #16]
 800df14:	6861      	ldr	r1, [r4, #4]
 800df16:	4299      	cmp	r1, r3
 800df18:	bfde      	ittt	le
 800df1a:	2330      	movle	r3, #48	; 0x30
 800df1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df24:	1b52      	subs	r2, r2, r5
 800df26:	6122      	str	r2, [r4, #16]
 800df28:	f8cd a000 	str.w	sl, [sp]
 800df2c:	464b      	mov	r3, r9
 800df2e:	aa03      	add	r2, sp, #12
 800df30:	4621      	mov	r1, r4
 800df32:	4640      	mov	r0, r8
 800df34:	f7ff fee2 	bl	800dcfc <_printf_common>
 800df38:	3001      	adds	r0, #1
 800df3a:	d14c      	bne.n	800dfd6 <_printf_i+0x1fe>
 800df3c:	f04f 30ff 	mov.w	r0, #4294967295
 800df40:	b004      	add	sp, #16
 800df42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df46:	4835      	ldr	r0, [pc, #212]	; (800e01c <_printf_i+0x244>)
 800df48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800df4c:	6829      	ldr	r1, [r5, #0]
 800df4e:	6823      	ldr	r3, [r4, #0]
 800df50:	f851 6b04 	ldr.w	r6, [r1], #4
 800df54:	6029      	str	r1, [r5, #0]
 800df56:	061d      	lsls	r5, r3, #24
 800df58:	d514      	bpl.n	800df84 <_printf_i+0x1ac>
 800df5a:	07df      	lsls	r7, r3, #31
 800df5c:	bf44      	itt	mi
 800df5e:	f043 0320 	orrmi.w	r3, r3, #32
 800df62:	6023      	strmi	r3, [r4, #0]
 800df64:	b91e      	cbnz	r6, 800df6e <_printf_i+0x196>
 800df66:	6823      	ldr	r3, [r4, #0]
 800df68:	f023 0320 	bic.w	r3, r3, #32
 800df6c:	6023      	str	r3, [r4, #0]
 800df6e:	2310      	movs	r3, #16
 800df70:	e7b0      	b.n	800ded4 <_printf_i+0xfc>
 800df72:	6823      	ldr	r3, [r4, #0]
 800df74:	f043 0320 	orr.w	r3, r3, #32
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	2378      	movs	r3, #120	; 0x78
 800df7c:	4828      	ldr	r0, [pc, #160]	; (800e020 <_printf_i+0x248>)
 800df7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800df82:	e7e3      	b.n	800df4c <_printf_i+0x174>
 800df84:	0659      	lsls	r1, r3, #25
 800df86:	bf48      	it	mi
 800df88:	b2b6      	uxthmi	r6, r6
 800df8a:	e7e6      	b.n	800df5a <_printf_i+0x182>
 800df8c:	4615      	mov	r5, r2
 800df8e:	e7bb      	b.n	800df08 <_printf_i+0x130>
 800df90:	682b      	ldr	r3, [r5, #0]
 800df92:	6826      	ldr	r6, [r4, #0]
 800df94:	6961      	ldr	r1, [r4, #20]
 800df96:	1d18      	adds	r0, r3, #4
 800df98:	6028      	str	r0, [r5, #0]
 800df9a:	0635      	lsls	r5, r6, #24
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	d501      	bpl.n	800dfa4 <_printf_i+0x1cc>
 800dfa0:	6019      	str	r1, [r3, #0]
 800dfa2:	e002      	b.n	800dfaa <_printf_i+0x1d2>
 800dfa4:	0670      	lsls	r0, r6, #25
 800dfa6:	d5fb      	bpl.n	800dfa0 <_printf_i+0x1c8>
 800dfa8:	8019      	strh	r1, [r3, #0]
 800dfaa:	2300      	movs	r3, #0
 800dfac:	6123      	str	r3, [r4, #16]
 800dfae:	4615      	mov	r5, r2
 800dfb0:	e7ba      	b.n	800df28 <_printf_i+0x150>
 800dfb2:	682b      	ldr	r3, [r5, #0]
 800dfb4:	1d1a      	adds	r2, r3, #4
 800dfb6:	602a      	str	r2, [r5, #0]
 800dfb8:	681d      	ldr	r5, [r3, #0]
 800dfba:	6862      	ldr	r2, [r4, #4]
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	4628      	mov	r0, r5
 800dfc0:	f7f2 f8e6 	bl	8000190 <memchr>
 800dfc4:	b108      	cbz	r0, 800dfca <_printf_i+0x1f2>
 800dfc6:	1b40      	subs	r0, r0, r5
 800dfc8:	6060      	str	r0, [r4, #4]
 800dfca:	6863      	ldr	r3, [r4, #4]
 800dfcc:	6123      	str	r3, [r4, #16]
 800dfce:	2300      	movs	r3, #0
 800dfd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfd4:	e7a8      	b.n	800df28 <_printf_i+0x150>
 800dfd6:	6923      	ldr	r3, [r4, #16]
 800dfd8:	462a      	mov	r2, r5
 800dfda:	4649      	mov	r1, r9
 800dfdc:	4640      	mov	r0, r8
 800dfde:	47d0      	blx	sl
 800dfe0:	3001      	adds	r0, #1
 800dfe2:	d0ab      	beq.n	800df3c <_printf_i+0x164>
 800dfe4:	6823      	ldr	r3, [r4, #0]
 800dfe6:	079b      	lsls	r3, r3, #30
 800dfe8:	d413      	bmi.n	800e012 <_printf_i+0x23a>
 800dfea:	68e0      	ldr	r0, [r4, #12]
 800dfec:	9b03      	ldr	r3, [sp, #12]
 800dfee:	4298      	cmp	r0, r3
 800dff0:	bfb8      	it	lt
 800dff2:	4618      	movlt	r0, r3
 800dff4:	e7a4      	b.n	800df40 <_printf_i+0x168>
 800dff6:	2301      	movs	r3, #1
 800dff8:	4632      	mov	r2, r6
 800dffa:	4649      	mov	r1, r9
 800dffc:	4640      	mov	r0, r8
 800dffe:	47d0      	blx	sl
 800e000:	3001      	adds	r0, #1
 800e002:	d09b      	beq.n	800df3c <_printf_i+0x164>
 800e004:	3501      	adds	r5, #1
 800e006:	68e3      	ldr	r3, [r4, #12]
 800e008:	9903      	ldr	r1, [sp, #12]
 800e00a:	1a5b      	subs	r3, r3, r1
 800e00c:	42ab      	cmp	r3, r5
 800e00e:	dcf2      	bgt.n	800dff6 <_printf_i+0x21e>
 800e010:	e7eb      	b.n	800dfea <_printf_i+0x212>
 800e012:	2500      	movs	r5, #0
 800e014:	f104 0619 	add.w	r6, r4, #25
 800e018:	e7f5      	b.n	800e006 <_printf_i+0x22e>
 800e01a:	bf00      	nop
 800e01c:	0800fead 	.word	0x0800fead
 800e020:	0800febe 	.word	0x0800febe

0800e024 <_putc_r>:
 800e024:	b570      	push	{r4, r5, r6, lr}
 800e026:	460d      	mov	r5, r1
 800e028:	4614      	mov	r4, r2
 800e02a:	4606      	mov	r6, r0
 800e02c:	b118      	cbz	r0, 800e036 <_putc_r+0x12>
 800e02e:	6983      	ldr	r3, [r0, #24]
 800e030:	b90b      	cbnz	r3, 800e036 <_putc_r+0x12>
 800e032:	f7ff fa5b 	bl	800d4ec <__sinit>
 800e036:	4b1c      	ldr	r3, [pc, #112]	; (800e0a8 <_putc_r+0x84>)
 800e038:	429c      	cmp	r4, r3
 800e03a:	d124      	bne.n	800e086 <_putc_r+0x62>
 800e03c:	6874      	ldr	r4, [r6, #4]
 800e03e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e040:	07d8      	lsls	r0, r3, #31
 800e042:	d405      	bmi.n	800e050 <_putc_r+0x2c>
 800e044:	89a3      	ldrh	r3, [r4, #12]
 800e046:	0599      	lsls	r1, r3, #22
 800e048:	d402      	bmi.n	800e050 <_putc_r+0x2c>
 800e04a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e04c:	f7ff faec 	bl	800d628 <__retarget_lock_acquire_recursive>
 800e050:	68a3      	ldr	r3, [r4, #8]
 800e052:	3b01      	subs	r3, #1
 800e054:	2b00      	cmp	r3, #0
 800e056:	60a3      	str	r3, [r4, #8]
 800e058:	da05      	bge.n	800e066 <_putc_r+0x42>
 800e05a:	69a2      	ldr	r2, [r4, #24]
 800e05c:	4293      	cmp	r3, r2
 800e05e:	db1c      	blt.n	800e09a <_putc_r+0x76>
 800e060:	b2eb      	uxtb	r3, r5
 800e062:	2b0a      	cmp	r3, #10
 800e064:	d019      	beq.n	800e09a <_putc_r+0x76>
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	1c5a      	adds	r2, r3, #1
 800e06a:	6022      	str	r2, [r4, #0]
 800e06c:	701d      	strb	r5, [r3, #0]
 800e06e:	b2ed      	uxtb	r5, r5
 800e070:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e072:	07da      	lsls	r2, r3, #31
 800e074:	d405      	bmi.n	800e082 <_putc_r+0x5e>
 800e076:	89a3      	ldrh	r3, [r4, #12]
 800e078:	059b      	lsls	r3, r3, #22
 800e07a:	d402      	bmi.n	800e082 <_putc_r+0x5e>
 800e07c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e07e:	f7ff fad4 	bl	800d62a <__retarget_lock_release_recursive>
 800e082:	4628      	mov	r0, r5
 800e084:	bd70      	pop	{r4, r5, r6, pc}
 800e086:	4b09      	ldr	r3, [pc, #36]	; (800e0ac <_putc_r+0x88>)
 800e088:	429c      	cmp	r4, r3
 800e08a:	d101      	bne.n	800e090 <_putc_r+0x6c>
 800e08c:	68b4      	ldr	r4, [r6, #8]
 800e08e:	e7d6      	b.n	800e03e <_putc_r+0x1a>
 800e090:	4b07      	ldr	r3, [pc, #28]	; (800e0b0 <_putc_r+0x8c>)
 800e092:	429c      	cmp	r4, r3
 800e094:	bf08      	it	eq
 800e096:	68f4      	ldreq	r4, [r6, #12]
 800e098:	e7d1      	b.n	800e03e <_putc_r+0x1a>
 800e09a:	4629      	mov	r1, r5
 800e09c:	4622      	mov	r2, r4
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f7ff f828 	bl	800d0f4 <__swbuf_r>
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	e7e3      	b.n	800e070 <_putc_r+0x4c>
 800e0a8:	0800fe5c 	.word	0x0800fe5c
 800e0ac:	0800fe7c 	.word	0x0800fe7c
 800e0b0:	0800fe3c 	.word	0x0800fe3c

0800e0b4 <_read_r>:
 800e0b4:	b538      	push	{r3, r4, r5, lr}
 800e0b6:	4d07      	ldr	r5, [pc, #28]	; (800e0d4 <_read_r+0x20>)
 800e0b8:	4604      	mov	r4, r0
 800e0ba:	4608      	mov	r0, r1
 800e0bc:	4611      	mov	r1, r2
 800e0be:	2200      	movs	r2, #0
 800e0c0:	602a      	str	r2, [r5, #0]
 800e0c2:	461a      	mov	r2, r3
 800e0c4:	f7f4 fce4 	bl	8002a90 <_read>
 800e0c8:	1c43      	adds	r3, r0, #1
 800e0ca:	d102      	bne.n	800e0d2 <_read_r+0x1e>
 800e0cc:	682b      	ldr	r3, [r5, #0]
 800e0ce:	b103      	cbz	r3, 800e0d2 <_read_r+0x1e>
 800e0d0:	6023      	str	r3, [r4, #0]
 800e0d2:	bd38      	pop	{r3, r4, r5, pc}
 800e0d4:	20002568 	.word	0x20002568

0800e0d8 <strchr>:
 800e0d8:	b2c9      	uxtb	r1, r1
 800e0da:	4603      	mov	r3, r0
 800e0dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0e0:	b11a      	cbz	r2, 800e0ea <strchr+0x12>
 800e0e2:	428a      	cmp	r2, r1
 800e0e4:	d1f9      	bne.n	800e0da <strchr+0x2>
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	4770      	bx	lr
 800e0ea:	2900      	cmp	r1, #0
 800e0ec:	bf18      	it	ne
 800e0ee:	2300      	movne	r3, #0
 800e0f0:	e7f9      	b.n	800e0e6 <strchr+0xe>
	...

0800e0f4 <_fstat_r>:
 800e0f4:	b538      	push	{r3, r4, r5, lr}
 800e0f6:	4d07      	ldr	r5, [pc, #28]	; (800e114 <_fstat_r+0x20>)
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	4604      	mov	r4, r0
 800e0fc:	4608      	mov	r0, r1
 800e0fe:	4611      	mov	r1, r2
 800e100:	602b      	str	r3, [r5, #0]
 800e102:	f7f4 fcee 	bl	8002ae2 <_fstat>
 800e106:	1c43      	adds	r3, r0, #1
 800e108:	d102      	bne.n	800e110 <_fstat_r+0x1c>
 800e10a:	682b      	ldr	r3, [r5, #0]
 800e10c:	b103      	cbz	r3, 800e110 <_fstat_r+0x1c>
 800e10e:	6023      	str	r3, [r4, #0]
 800e110:	bd38      	pop	{r3, r4, r5, pc}
 800e112:	bf00      	nop
 800e114:	20002568 	.word	0x20002568

0800e118 <_isatty_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4d06      	ldr	r5, [pc, #24]	; (800e134 <_isatty_r+0x1c>)
 800e11c:	2300      	movs	r3, #0
 800e11e:	4604      	mov	r4, r0
 800e120:	4608      	mov	r0, r1
 800e122:	602b      	str	r3, [r5, #0]
 800e124:	f7f4 fced 	bl	8002b02 <_isatty>
 800e128:	1c43      	adds	r3, r0, #1
 800e12a:	d102      	bne.n	800e132 <_isatty_r+0x1a>
 800e12c:	682b      	ldr	r3, [r5, #0]
 800e12e:	b103      	cbz	r3, 800e132 <_isatty_r+0x1a>
 800e130:	6023      	str	r3, [r4, #0]
 800e132:	bd38      	pop	{r3, r4, r5, pc}
 800e134:	20002568 	.word	0x20002568

0800e138 <memmove>:
 800e138:	4288      	cmp	r0, r1
 800e13a:	b510      	push	{r4, lr}
 800e13c:	eb01 0402 	add.w	r4, r1, r2
 800e140:	d902      	bls.n	800e148 <memmove+0x10>
 800e142:	4284      	cmp	r4, r0
 800e144:	4623      	mov	r3, r4
 800e146:	d807      	bhi.n	800e158 <memmove+0x20>
 800e148:	1e43      	subs	r3, r0, #1
 800e14a:	42a1      	cmp	r1, r4
 800e14c:	d008      	beq.n	800e160 <memmove+0x28>
 800e14e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e152:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e156:	e7f8      	b.n	800e14a <memmove+0x12>
 800e158:	4402      	add	r2, r0
 800e15a:	4601      	mov	r1, r0
 800e15c:	428a      	cmp	r2, r1
 800e15e:	d100      	bne.n	800e162 <memmove+0x2a>
 800e160:	bd10      	pop	{r4, pc}
 800e162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e16a:	e7f7      	b.n	800e15c <memmove+0x24>

0800e16c <_malloc_usable_size_r>:
 800e16c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e170:	1f18      	subs	r0, r3, #4
 800e172:	2b00      	cmp	r3, #0
 800e174:	bfbc      	itt	lt
 800e176:	580b      	ldrlt	r3, [r1, r0]
 800e178:	18c0      	addlt	r0, r0, r3
 800e17a:	4770      	bx	lr

0800e17c <_init>:
 800e17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e17e:	bf00      	nop
 800e180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e182:	bc08      	pop	{r3}
 800e184:	469e      	mov	lr, r3
 800e186:	4770      	bx	lr

0800e188 <_fini>:
 800e188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18a:	bf00      	nop
 800e18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e18e:	bc08      	pop	{r3}
 800e190:	469e      	mov	lr, r3
 800e192:	4770      	bx	lr
 800e194:	0000      	movs	r0, r0
	...

0800e198 <__FLASH_Program_Fast_veneer>:
 800e198:	f85f f000 	ldr.w	pc, [pc]	; 800e19c <__FLASH_Program_Fast_veneer+0x4>
 800e19c:	20000099 	.word	0x20000099

Disassembly of section .data:

20000008 <SystemCoreClock>:
20000008:	003d0900                                ..=.

2000000c <uwTickPrio>:
2000000c:	00000010                                ....

20000010 <uwTickFreq>:
20000010:	                                         .

20000011 <wifi_state>:
20000011:	                                         .

20000012 <trans_state>:
20000012:	                                         .

20000013 <mqtt_state>:
20000013:	                                         .

20000014 <a_AdvData>:
20000014:	06000a02 69774509 0305656e feedbeef     .....Ewine......
20000024:	0030ff04                                 ..0..

20000029 <SizeGssid>:
20000029:	                                         .

2000002a <SizeGpass>:
2000002a:	                                         ..

2000002c <TaskMask>:
2000002c:	ffffffff                                ....

20000030 <SuperMask>:
20000030:	ffffffff                                ....

20000034 <_impure_ptr>:
20000034:	20000038                                8.. 

20000038 <impure_data>:
20000038:	00000000 0800fe5c 0800fe7c 0800fe3c     ....\...|...<...
	...

20000098 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000098:	b480      	push	{r7}
2000009a:	b089      	sub	sp, #36	; 0x24
2000009c:	af00      	add	r7, sp, #0
2000009e:	6078      	str	r0, [r7, #4]
200000a0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
200000a2:	2380      	movs	r3, #128	; 0x80
200000a4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
200000a6:	687b      	ldr	r3, [r7, #4]
200000a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
200000aa:	683b      	ldr	r3, [r7, #0]
200000ac:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000ae:	4b18      	ldr	r3, [pc, #96]	; (20000110 <FLASH_Program_Fast+0x78>)
200000b0:	695b      	ldr	r3, [r3, #20]
200000b2:	4a17      	ldr	r2, [pc, #92]	; (20000110 <FLASH_Program_Fast+0x78>)
200000b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
200000b8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000ba:	f3ef 8310 	mrs	r3, PRIMASK
200000be:	60fb      	str	r3, [r7, #12]
  return(result);
200000c0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000c4:	b672      	cpsid	i
}
200000c6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
200000c8:	697b      	ldr	r3, [r7, #20]
200000ca:	681a      	ldr	r2, [r3, #0]
200000cc:	69bb      	ldr	r3, [r7, #24]
200000ce:	601a      	str	r2, [r3, #0]
    dest_addr++;
200000d0:	69bb      	ldr	r3, [r7, #24]
200000d2:	3304      	adds	r3, #4
200000d4:	61bb      	str	r3, [r7, #24]
    src_addr++;
200000d6:	697b      	ldr	r3, [r7, #20]
200000d8:	3304      	adds	r3, #4
200000da:	617b      	str	r3, [r7, #20]
    row_index--;
200000dc:	7ffb      	ldrb	r3, [r7, #31]
200000de:	3b01      	subs	r3, #1
200000e0:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
200000e2:	7ffb      	ldrb	r3, [r7, #31]
200000e4:	2b00      	cmp	r3, #0
200000e6:	d1ef      	bne.n	200000c8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200000e8:	bf00      	nop
200000ea:	4b09      	ldr	r3, [pc, #36]	; (20000110 <FLASH_Program_Fast+0x78>)
200000ec:	691b      	ldr	r3, [r3, #16]
200000ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200000f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200000f6:	d0f8      	beq.n	200000ea <FLASH_Program_Fast+0x52>
200000f8:	693b      	ldr	r3, [r7, #16]
200000fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000fc:	68bb      	ldr	r3, [r7, #8]
200000fe:	f383 8810 	msr	PRIMASK, r3
}
20000102:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000104:	bf00      	nop
20000106:	3724      	adds	r7, #36	; 0x24
20000108:	46bd      	mov	sp, r7
2000010a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000010e:	4770      	bx	lr
20000110:	58004000 	.word	0x58004000
