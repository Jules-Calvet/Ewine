
BLE_Ewine_V01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1e4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001600  0800c328  0800c328  0001c328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d928  0800d928  0001d928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d930  0800d930  0001d930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d934  0800d934  0001d934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000008  0800d938  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  20000098  0800d9c8  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  2000091c  0800e24b  0002091c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000954  0800e280  00020954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000006cc  20000968  0800e291  00020968  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001034  0800e291  00021034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020965  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   0002df71  00000000  00000000  00020995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005fb9  00000000  00000000  0004e906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000027b8  00000000  00000000  000548c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002538  00000000  00000000  00057078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002cf38  00000000  00000000  000595b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002b195  00000000  00000000  000864e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f9a42  00000000  00000000  000b167d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001ab0bf  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b2f0  00000000  00000000  001ab110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000968 	.word	0x20000968
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c30c 	.word	0x0800c30c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000096c 	.word	0x2000096c
 800017c:	0800c30c 	.word	0x0800c30c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_uldivmod>:
 8000b08:	b953      	cbnz	r3, 8000b20 <__aeabi_uldivmod+0x18>
 8000b0a:	b94a      	cbnz	r2, 8000b20 <__aeabi_uldivmod+0x18>
 8000b0c:	2900      	cmp	r1, #0
 8000b0e:	bf08      	it	eq
 8000b10:	2800      	cmpeq	r0, #0
 8000b12:	bf1c      	itt	ne
 8000b14:	f04f 31ff 	movne.w	r1, #4294967295
 8000b18:	f04f 30ff 	movne.w	r0, #4294967295
 8000b1c:	f000 b992 	b.w	8000e44 <__aeabi_idiv0>
 8000b20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b28:	f000 f824 	bl	8000b74 <__udivmoddi4>
 8000b2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b34:	b004      	add	sp, #16
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2ulz>:
 8000b38:	b5d0      	push	{r4, r6, r7, lr}
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <__aeabi_d2ulz+0x34>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	4606      	mov	r6, r0
 8000b40:	460f      	mov	r7, r1
 8000b42:	f7ff fd31 	bl	80005a8 <__aeabi_dmul>
 8000b46:	f000 f97f 	bl	8000e48 <__aeabi_d2uiz>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	f7ff fcb2 	bl	80004b4 <__aeabi_ui2d>
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <__aeabi_d2ulz+0x38>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	f7ff fd28 	bl	80005a8 <__aeabi_dmul>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	4639      	mov	r1, r7
 8000b60:	f7ff fb6a 	bl	8000238 <__aeabi_dsub>
 8000b64:	f000 f970 	bl	8000e48 <__aeabi_d2uiz>
 8000b68:	4621      	mov	r1, r4
 8000b6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000b6c:	3df00000 	.word	0x3df00000
 8000b70:	41f00000 	.word	0x41f00000

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468e      	mov	lr, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d14d      	bne.n	8000c1e <__udivmoddi4+0xaa>
 8000b82:	428a      	cmp	r2, r1
 8000b84:	4694      	mov	ip, r2
 8000b86:	d969      	bls.n	8000c5c <__udivmoddi4+0xe8>
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	b152      	cbz	r2, 8000ba4 <__udivmoddi4+0x30>
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	f1c2 0120 	rsb	r1, r2, #32
 8000b96:	fa20 f101 	lsr.w	r1, r0, r1
 8000b9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000ba2:	4094      	lsls	r4, r2
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	0c21      	lsrs	r1, r4, #16
 8000baa:	fbbe f6f8 	udiv	r6, lr, r8
 8000bae:	fa1f f78c 	uxth.w	r7, ip
 8000bb2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bba:	fb06 f107 	mul.w	r1, r6, r7
 8000bbe:	4299      	cmp	r1, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x64>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bca:	f080 811f 	bcs.w	8000e0c <__udivmoddi4+0x298>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 811c 	bls.w	8000e0c <__udivmoddi4+0x298>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be0:	fb08 3310 	mls	r3, r8, r0, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb00 f707 	mul.w	r7, r0, r7
 8000bec:	42a7      	cmp	r7, r4
 8000bee:	d90a      	bls.n	8000c06 <__udivmoddi4+0x92>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf8:	f080 810a 	bcs.w	8000e10 <__udivmoddi4+0x29c>
 8000bfc:	42a7      	cmp	r7, r4
 8000bfe:	f240 8107 	bls.w	8000e10 <__udivmoddi4+0x29c>
 8000c02:	4464      	add	r4, ip
 8000c04:	3802      	subs	r0, #2
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	1be4      	subs	r4, r4, r7
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	b11d      	cbz	r5, 8000c18 <__udivmoddi4+0xa4>
 8000c10:	40d4      	lsrs	r4, r2
 8000c12:	2300      	movs	r3, #0
 8000c14:	e9c5 4300 	strd	r4, r3, [r5]
 8000c18:	4631      	mov	r1, r6
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d909      	bls.n	8000c36 <__udivmoddi4+0xc2>
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	f000 80ef 	beq.w	8000e06 <__udivmoddi4+0x292>
 8000c28:	2600      	movs	r6, #0
 8000c2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c2e:	4630      	mov	r0, r6
 8000c30:	4631      	mov	r1, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	fab3 f683 	clz	r6, r3
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d14a      	bne.n	8000cd4 <__udivmoddi4+0x160>
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xd4>
 8000c42:	4282      	cmp	r2, r0
 8000c44:	f200 80f9 	bhi.w	8000e3a <__udivmoddi4+0x2c6>
 8000c48:	1a84      	subs	r4, r0, r2
 8000c4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	469e      	mov	lr, r3
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	d0e0      	beq.n	8000c18 <__udivmoddi4+0xa4>
 8000c56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c5a:	e7dd      	b.n	8000c18 <__udivmoddi4+0xa4>
 8000c5c:	b902      	cbnz	r2, 8000c60 <__udivmoddi4+0xec>
 8000c5e:	deff      	udf	#255	; 0xff
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f040 8092 	bne.w	8000d8e <__udivmoddi4+0x21a>
 8000c6a:	eba1 010c 	sub.w	r1, r1, ip
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f fe8c 	uxth.w	lr, ip
 8000c76:	2601      	movs	r6, #1
 8000c78:	0c20      	lsrs	r0, r4, #16
 8000c7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c86:	fb0e f003 	mul.w	r0, lr, r3
 8000c8a:	4288      	cmp	r0, r1
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x12c>
 8000c8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x12a>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f200 80cb 	bhi.w	8000e34 <__udivmoddi4+0x2c0>
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	1a09      	subs	r1, r1, r0
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x156>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc0:	d202      	bcs.n	8000cc8 <__udivmoddi4+0x154>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f200 80bb 	bhi.w	8000e3e <__udivmoddi4+0x2ca>
 8000cc8:	4608      	mov	r0, r1
 8000cca:	eba4 040e 	sub.w	r4, r4, lr
 8000cce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cd2:	e79c      	b.n	8000c0e <__udivmoddi4+0x9a>
 8000cd4:	f1c6 0720 	rsb	r7, r6, #32
 8000cd8:	40b3      	lsls	r3, r6
 8000cda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ce6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cea:	431c      	orrs	r4, r3
 8000cec:	40f9      	lsrs	r1, r7
 8000cee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cfa:	0c20      	lsrs	r0, r4, #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fb09 1118 	mls	r1, r9, r8, r1
 8000d04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d08:	fb08 f00e 	mul.w	r0, r8, lr
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d12:	d90b      	bls.n	8000d2c <__udivmoddi4+0x1b8>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d1c:	f080 8088 	bcs.w	8000e30 <__udivmoddi4+0x2bc>
 8000d20:	4288      	cmp	r0, r1
 8000d22:	f240 8085 	bls.w	8000e30 <__udivmoddi4+0x2bc>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	4461      	add	r1, ip
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d34:	fb09 1110 	mls	r1, r9, r0, r1
 8000d38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d40:	458e      	cmp	lr, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1e2>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d4c:	d26c      	bcs.n	8000e28 <__udivmoddi4+0x2b4>
 8000d4e:	458e      	cmp	lr, r1
 8000d50:	d96a      	bls.n	8000e28 <__udivmoddi4+0x2b4>
 8000d52:	3802      	subs	r0, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d5e:	eba1 010e 	sub.w	r1, r1, lr
 8000d62:	42a1      	cmp	r1, r4
 8000d64:	46c8      	mov	r8, r9
 8000d66:	46a6      	mov	lr, r4
 8000d68:	d356      	bcc.n	8000e18 <__udivmoddi4+0x2a4>
 8000d6a:	d053      	beq.n	8000e14 <__udivmoddi4+0x2a0>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x212>
 8000d6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d72:	eb61 010e 	sbc.w	r1, r1, lr
 8000d76:	fa01 f707 	lsl.w	r7, r1, r7
 8000d7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d7e:	40f1      	lsrs	r1, r6
 8000d80:	431f      	orrs	r7, r3
 8000d82:	e9c5 7100 	strd	r7, r1, [r5]
 8000d86:	2600      	movs	r6, #0
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	40d8      	lsrs	r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa21 f303 	lsr.w	r3, r1, r3
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	4301      	orrs	r1, r0
 8000da0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dac:	fb07 3610 	mls	r6, r7, r0, r3
 8000db0:	0c0b      	lsrs	r3, r1, #16
 8000db2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000db6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dba:	429e      	cmp	r6, r3
 8000dbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x260>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dca:	d22f      	bcs.n	8000e2c <__udivmoddi4+0x2b8>
 8000dcc:	429e      	cmp	r6, r3
 8000dce:	d92d      	bls.n	8000e2c <__udivmoddi4+0x2b8>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1b9b      	subs	r3, r3, r6
 8000dd6:	b289      	uxth	r1, r1
 8000dd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ddc:	fb07 3316 	mls	r3, r7, r6, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb06 f30e 	mul.w	r3, r6, lr
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x28a>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df4:	d216      	bcs.n	8000e24 <__udivmoddi4+0x2b0>
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d914      	bls.n	8000e24 <__udivmoddi4+0x2b0>
 8000dfa:	3e02      	subs	r6, #2
 8000dfc:	4461      	add	r1, ip
 8000dfe:	1ac9      	subs	r1, r1, r3
 8000e00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e04:	e738      	b.n	8000c78 <__udivmoddi4+0x104>
 8000e06:	462e      	mov	r6, r5
 8000e08:	4628      	mov	r0, r5
 8000e0a:	e705      	b.n	8000c18 <__udivmoddi4+0xa4>
 8000e0c:	4606      	mov	r6, r0
 8000e0e:	e6e3      	b.n	8000bd8 <__udivmoddi4+0x64>
 8000e10:	4618      	mov	r0, r3
 8000e12:	e6f8      	b.n	8000c06 <__udivmoddi4+0x92>
 8000e14:	454b      	cmp	r3, r9
 8000e16:	d2a9      	bcs.n	8000d6c <__udivmoddi4+0x1f8>
 8000e18:	ebb9 0802 	subs.w	r8, r9, r2
 8000e1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e20:	3801      	subs	r0, #1
 8000e22:	e7a3      	b.n	8000d6c <__udivmoddi4+0x1f8>
 8000e24:	4646      	mov	r6, r8
 8000e26:	e7ea      	b.n	8000dfe <__udivmoddi4+0x28a>
 8000e28:	4620      	mov	r0, r4
 8000e2a:	e794      	b.n	8000d56 <__udivmoddi4+0x1e2>
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	e7d1      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e30:	46d0      	mov	r8, sl
 8000e32:	e77b      	b.n	8000d2c <__udivmoddi4+0x1b8>
 8000e34:	3b02      	subs	r3, #2
 8000e36:	4461      	add	r1, ip
 8000e38:	e732      	b.n	8000ca0 <__udivmoddi4+0x12c>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e709      	b.n	8000c52 <__udivmoddi4+0xde>
 8000e3e:	4464      	add	r4, ip
 8000e40:	3802      	subs	r0, #2
 8000e42:	e742      	b.n	8000cca <__udivmoddi4+0x156>

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <__aeabi_d2uiz>:
 8000e48:	004a      	lsls	r2, r1, #1
 8000e4a:	d211      	bcs.n	8000e70 <__aeabi_d2uiz+0x28>
 8000e4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e50:	d211      	bcs.n	8000e76 <__aeabi_d2uiz+0x2e>
 8000e52:	d50d      	bpl.n	8000e70 <__aeabi_d2uiz+0x28>
 8000e54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e5c:	d40e      	bmi.n	8000e7c <__aeabi_d2uiz+0x34>
 8000e5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000e6e:	4770      	bx	lr
 8000e70:	f04f 0000 	mov.w	r0, #0
 8000e74:	4770      	bx	lr
 8000e76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e7a:	d102      	bne.n	8000e82 <__aeabi_d2uiz+0x3a>
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	4770      	bx	lr
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	4770      	bx	lr

08000e88 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <APPD_EnableCPU2+0x34>)
 8000e90:	1d3c      	adds	r4, r7, #4
 8000e92:	461d      	mov	r5, r3
 8000e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e9c:	c403      	stmia	r4!, {r0, r1}
 8000e9e:	8022      	strh	r2, [r4, #0]
 8000ea0:	3402      	adds	r4, #2
 8000ea2:	0c13      	lsrs	r3, r2, #16
 8000ea4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000ea6:	f007 fa07 	bl	80082b8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 fca2 	bl	80077f6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000eb2:	bf00      	nop
}
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bdb0      	pop	{r4, r5, r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	0800c328 	.word	0x0800c328

08000ec0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ece:	f023 0207 	bic.w	r2, r3, #7
 8000ed2:	4905      	ldr	r1, [pc, #20]	; (8000ee8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	58000400 	.word	0x58000400

08000eec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000ef6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000efa:	4905      	ldr	r1, [pc, #20]	; (8000f10 <LL_EXTI_EnableIT_32_63+0x24>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	58000800 	.word	0x58000800

08000f14 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000f22:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f2e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	cafecafe 	.word	0xcafecafe

08000f50 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	608b      	str	r3, [r1, #8]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000fd0:	d101      	bne.n	8000fd6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ff6:	d101      	bne.n	8000ffc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001024:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102c:	68fb      	ldr	r3, [r7, #12]
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <LL_DBGMCU_GetDeviceID+0x18>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e0042000 	.word	0xe0042000

08001058 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <LL_DBGMCU_GetRevisionID+0x18>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	0c1b      	lsrs	r3, r3, #16
 8001062:	b29b      	uxth	r3, r3
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e0042000 	.word	0xe0042000

08001074 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	431a      	orrs	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	605a      	str	r2, [r3, #4]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	605a      	str	r2, [r3, #4]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695a      	ldr	r2, [r3, #20]
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	041b      	lsls	r3, r3, #16
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	615a      	str	r2, [r3, #20]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	615a      	str	r2, [r3, #20]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	609a      	str	r2, [r3, #8]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	619a      	str	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	22ff      	movs	r2, #255	; 0xff
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	22ca      	movs	r2, #202	; 0xca
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2253      	movs	r2, #83	; 0x53
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 0207 	bic.w	r2, r3, #7
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	431a      	orrs	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	609a      	str	r2, [r3, #8]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <MX_APPE_Config+0x18>)
 800119e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011a2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80011a4:	f000 f824 	bl	80011f0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80011a8:	f000 f864 	bl	8001274 <Config_HSE>

  return;
 80011ac:	bf00      	nop
}
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	58004000 	.word	0x58004000

080011b4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80011b8:	f000 f870 	bl	800129c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80011bc:	f000 f888 	bl	80012d0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80011c0:	4903      	ldr	r1, [pc, #12]	; (80011d0 <MX_APPE_Init+0x1c>)
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 ff0a 	bl	8001fdc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80011c8:	f000 f890 	bl	80012ec <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80011cc:	bf00      	nop
}
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000a60 	.word	0x20000a60

080011d4 <Init_Smps>:

void Init_Smps(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80011d8:	bf00      	nop
}
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <Init_Exti>:

void Init_Exti(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80011e6:	2050      	movs	r0, #80	; 0x50
 80011e8:	f7ff fe80 	bl	8000eec <LL_EXTI_EnableIT_32_63>

  return;
 80011ec:	bf00      	nop
}
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80011f4:	f000 f804 	bl	8001200 <Reset_BackupDomain>

  Reset_IPCC();
 80011f8:	f000 f81a 	bl	8001230 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80011fc:	bf00      	nop
}
 80011fe:	bd80      	pop	{r7, pc}

08001200 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001204:	f7ff feda 	bl	8000fbc <LL_RCC_IsActiveFlag_PINRST>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00d      	beq.n	800122a <Reset_BackupDomain+0x2a>
 800120e:	f7ff fee8 	bl	8000fe2 <LL_RCC_IsActiveFlag_SFTRST>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d108      	bne.n	800122a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001218:	f002 fbe8 	bl	80039ec <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800121c:	f002 fbe6 	bl	80039ec <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001220:	f7ff feaa 	bl	8000f78 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001224:	f7ff feb9 	bl	8000f9a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001228:	bf00      	nop
 800122a:	bf00      	nop
}
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001234:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001238:	f7ff fee6 	bl	8001008 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800123c:	213f      	movs	r1, #63	; 0x3f
 800123e:	480c      	ldr	r0, [pc, #48]	; (8001270 <Reset_IPCC+0x40>)
 8001240:	f7ff ff5e 	bl	8001100 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001244:	213f      	movs	r1, #63	; 0x3f
 8001246:	480a      	ldr	r0, [pc, #40]	; (8001270 <Reset_IPCC+0x40>)
 8001248:	f7ff ff68 	bl	800111c <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800124c:	213f      	movs	r1, #63	; 0x3f
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <Reset_IPCC+0x40>)
 8001250:	f7ff ff10 	bl	8001074 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001254:	213f      	movs	r1, #63	; 0x3f
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <Reset_IPCC+0x40>)
 8001258:	f7ff ff2f 	bl	80010ba <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800125c:	213f      	movs	r1, #63	; 0x3f
 800125e:	4804      	ldr	r0, [pc, #16]	; (8001270 <Reset_IPCC+0x40>)
 8001260:	f7ff ff1a 	bl	8001098 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001264:	213f      	movs	r1, #63	; 0x3f
 8001266:	4802      	ldr	r0, [pc, #8]	; (8001270 <Reset_IPCC+0x40>)
 8001268:	f7ff ff39 	bl	80010de <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800126c:	bf00      	nop
}
 800126e:	bd80      	pop	{r7, pc}
 8001270:	58000c00 	.word	0x58000c00

08001274 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800127a:	2000      	movs	r0, #0
 800127c:	f007 f8d0 	bl	8008420 <OTP_Read>
 8001280:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	799b      	ldrb	r3, [r3, #6]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe41 	bl	8000f14 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001292:	bf00      	nop
 8001294:	bf00      	nop
}
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <System_Init>:

static void System_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  Init_Smps();
 80012a0:	f7ff ff98 	bl	80011d4 <Init_Smps>

  Init_Exti();
 80012a4:	f7ff ff9d 	bl	80011e2 <Init_Exti>

  Init_Rtc();
 80012a8:	f000 f802 	bl	80012b0 <Init_Rtc>

  return;
 80012ac:	bf00      	nop
}
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <Init_Rtc+0x1c>)
 80012b6:	f7ff ff4c 	bl	8001152 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80012ba:	2100      	movs	r1, #0
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <Init_Rtc+0x1c>)
 80012be:	f7ff ff58 	bl	8001172 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80012c2:	4802      	ldr	r0, [pc, #8]	; (80012cc <Init_Rtc+0x1c>)
 80012c4:	f7ff ff38 	bl	8001138 <LL_RTC_EnableWriteProtection>

  return;
 80012c8:	bf00      	nop
}
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40002800 	.word	0x40002800

080012d0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80012d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012d8:	f7ff fe3a 	bl	8000f50 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80012dc:	f008 fdb8 	bl	8009e50 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80012e0:	2004      	movs	r0, #4
 80012e2:	f7ff fded 	bl	8000ec0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80012e6:	bf00      	nop
}
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80012f2:	f006 fe2b 	bl	8007f4c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80012f6:	4a11      	ldr	r2, [pc, #68]	; (800133c <appe_Tl_Init+0x50>)
 80012f8:	2100      	movs	r1, #0
 80012fa:	2004      	movs	r0, #4
 80012fc:	f008 fee6 	bl	800a0cc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <appe_Tl_Init+0x54>)
 8001302:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <appe_Tl_Init+0x58>)
 8001306:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	480e      	ldr	r0, [pc, #56]	; (8001348 <appe_Tl_Init+0x5c>)
 800130e:	f006 fce3 	bl	8007cd8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <appe_Tl_Init+0x60>)
 8001314:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <appe_Tl_Init+0x64>)
 8001318:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <appe_Tl_Init+0x68>)
 800131c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800131e:	f240 533c 	movw	r3, #1340	; 0x53c
 8001322:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	4618      	mov	r0, r3
 800132a:	f006 ff51 	bl	80081d0 <TL_MM_Init>

  TL_Enable();
 800132e:	f006 fe07 	bl	8007f40 <TL_Enable>

  return;
 8001332:	bf00      	nop
}
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	08007d11 	.word	0x08007d11
 8001340:	200005e8 	.word	0x200005e8
 8001344:	08001359 	.word	0x08001359
 8001348:	08001371 	.word	0x08001371
 800134c:	20000800 	.word	0x20000800
 8001350:	200006f4 	.word	0x200006f4
 8001354:	200000ac 	.word	0x200000ac

08001358 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001362:	bf00      	nop
}
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	330b      	adds	r3, #11
 800137e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	b29b      	uxth	r3, r3
 8001386:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800138a:	2b07      	cmp	r3, #7
 800138c:	f200 80d0 	bhi.w	8001530 <APPE_SysUserEvtRx+0x1c0>
 8001390:	a201      	add	r2, pc, #4	; (adr r2, 8001398 <APPE_SysUserEvtRx+0x28>)
 8001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001396:	bf00      	nop
 8001398:	080013b9 	.word	0x080013b9
 800139c:	0800144b 	.word	0x0800144b
 80013a0:	0800146d 	.word	0x0800146d
 80013a4:	08001531 	.word	0x08001531
 80013a8:	080014b1 	.word	0x080014b1
 80013ac:	080014d5 	.word	0x080014d5
 80013b0:	080014f1 	.word	0x080014f1
 80013b4:	08001515 	.word	0x08001515
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	4618      	mov	r0, r3
 80013be:	f006 fa47 	bl	8007850 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80013c2:	485e      	ldr	r0, [pc, #376]	; (800153c <APPE_SysUserEvtRx+0x1cc>)
 80013c4:	f007 f804 	bl	80083d0 <DbgTraceGetFileName>
 80013c8:	4601      	mov	r1, r0
 80013ca:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <APPE_SysUserEvtRx+0x1d0>)
 80013d0:	485c      	ldr	r0, [pc, #368]	; (8001544 <APPE_SysUserEvtRx+0x1d4>)
 80013d2:	f008 fffd 	bl	800a3d0 <iprintf>
 80013d6:	7b3b      	ldrb	r3, [r7, #12]
 80013d8:	4619      	mov	r1, r3
 80013da:	7b7b      	ldrb	r3, [r7, #13]
 80013dc:	461a      	mov	r2, r3
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	4859      	ldr	r0, [pc, #356]	; (8001548 <APPE_SysUserEvtRx+0x1d8>)
 80013e2:	f008 fff5 	bl	800a3d0 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80013e6:	4855      	ldr	r0, [pc, #340]	; (800153c <APPE_SysUserEvtRx+0x1cc>)
 80013e8:	f006 fff2 	bl	80083d0 <DbgTraceGetFileName>
 80013ec:	4601      	mov	r1, r0
 80013ee:	f240 1369 	movw	r3, #361	; 0x169
 80013f2:	4a53      	ldr	r2, [pc, #332]	; (8001540 <APPE_SysUserEvtRx+0x1d0>)
 80013f4:	4853      	ldr	r0, [pc, #332]	; (8001544 <APPE_SysUserEvtRx+0x1d4>)
 80013f6:	f008 ffeb 	bl	800a3d0 <iprintf>
 80013fa:	7c3b      	ldrb	r3, [r7, #16]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4853      	ldr	r0, [pc, #332]	; (800154c <APPE_SysUserEvtRx+0x1dc>)
 8001400:	f008 ffe6 	bl	800a3d0 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001404:	484d      	ldr	r0, [pc, #308]	; (800153c <APPE_SysUserEvtRx+0x1cc>)
 8001406:	f006 ffe3 	bl	80083d0 <DbgTraceGetFileName>
 800140a:	4601      	mov	r1, r0
 800140c:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 8001410:	4a4b      	ldr	r2, [pc, #300]	; (8001540 <APPE_SysUserEvtRx+0x1d0>)
 8001412:	484c      	ldr	r0, [pc, #304]	; (8001544 <APPE_SysUserEvtRx+0x1d4>)
 8001414:	f008 ffdc 	bl	800a3d0 <iprintf>
 8001418:	7dbb      	ldrb	r3, [r7, #22]
 800141a:	4619      	mov	r1, r3
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	461a      	mov	r2, r3
 8001420:	7e3b      	ldrb	r3, [r7, #24]
 8001422:	484b      	ldr	r0, [pc, #300]	; (8001550 <APPE_SysUserEvtRx+0x1e0>)
 8001424:	f008 ffd4 	bl	800a3d0 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001428:	4844      	ldr	r0, [pc, #272]	; (800153c <APPE_SysUserEvtRx+0x1cc>)
 800142a:	f006 ffd1 	bl	80083d0 <DbgTraceGetFileName>
 800142e:	4601      	mov	r1, r0
 8001430:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8001434:	4a42      	ldr	r2, [pc, #264]	; (8001540 <APPE_SysUserEvtRx+0x1d0>)
 8001436:	4843      	ldr	r0, [pc, #268]	; (8001544 <APPE_SysUserEvtRx+0x1d4>)
 8001438:	f008 ffca 	bl	800a3d0 <iprintf>
 800143c:	4845      	ldr	r0, [pc, #276]	; (8001554 <APPE_SysUserEvtRx+0x1e4>)
 800143e:	f008 ffc7 	bl	800a3d0 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f8e0 	bl	8001608 <APPE_SysEvtReadyProcessing>
    break;
 8001448:	e073      	b.n	8001532 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800144a:	483c      	ldr	r0, [pc, #240]	; (800153c <APPE_SysUserEvtRx+0x1cc>)
 800144c:	f006 ffc0 	bl	80083d0 <DbgTraceGetFileName>
 8001450:	4601      	mov	r1, r0
 8001452:	f240 1371 	movw	r3, #369	; 0x171
 8001456:	4a3a      	ldr	r2, [pc, #232]	; (8001540 <APPE_SysUserEvtRx+0x1d0>)
 8001458:	483a      	ldr	r0, [pc, #232]	; (8001544 <APPE_SysUserEvtRx+0x1d4>)
 800145a:	f008 ffb9 	bl	800a3d0 <iprintf>
 800145e:	483e      	ldr	r0, [pc, #248]	; (8001558 <APPE_SysUserEvtRx+0x1e8>)
 8001460:	f008 ffb6 	bl	800a3d0 <iprintf>
    APPE_SysEvtError(pPayload);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f885 	bl	8001574 <APPE_SysEvtError>
    break;
 800146a:	e062      	b.n	8001532 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800146c:	4833      	ldr	r0, [pc, #204]	; (800153c <APPE_SysUserEvtRx+0x1cc>)
 800146e:	f006 ffaf 	bl	80083d0 <DbgTraceGetFileName>
 8001472:	4601      	mov	r1, r0
 8001474:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8001478:	4a31      	ldr	r2, [pc, #196]	; (8001540 <APPE_SysUserEvtRx+0x1d0>)
 800147a:	4832      	ldr	r0, [pc, #200]	; (8001544 <APPE_SysUserEvtRx+0x1d4>)
 800147c:	f008 ffa8 	bl	800a3d0 <iprintf>
 8001480:	4836      	ldr	r0, [pc, #216]	; (800155c <APPE_SysUserEvtRx+0x1ec>)
 8001482:	f009 f841 	bl	800a508 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001486:	482d      	ldr	r0, [pc, #180]	; (800153c <APPE_SysUserEvtRx+0x1cc>)
 8001488:	f006 ffa2 	bl	80083d0 <DbgTraceGetFileName>
 800148c:	4601      	mov	r1, r0
 800148e:	f240 1377 	movw	r3, #375	; 0x177
 8001492:	4a2b      	ldr	r2, [pc, #172]	; (8001540 <APPE_SysUserEvtRx+0x1d0>)
 8001494:	482b      	ldr	r0, [pc, #172]	; (8001544 <APPE_SysUserEvtRx+0x1d4>)
 8001496:	f008 ff9b 	bl	800a3d0 <iprintf>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3302      	adds	r3, #2
 800149e:	6819      	ldr	r1, [r3, #0]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	3302      	adds	r3, #2
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	461a      	mov	r2, r3
 80014a8:	482d      	ldr	r0, [pc, #180]	; (8001560 <APPE_SysUserEvtRx+0x1f0>)
 80014aa:	f008 ff91 	bl	800a3d0 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 80014ae:	e040      	b.n	8001532 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80014b0:	4822      	ldr	r0, [pc, #136]	; (800153c <APPE_SysUserEvtRx+0x1cc>)
 80014b2:	f006 ff8d 	bl	80083d0 <DbgTraceGetFileName>
 80014b6:	4601      	mov	r1, r0
 80014b8:	f240 137d 	movw	r3, #381	; 0x17d
 80014bc:	4a20      	ldr	r2, [pc, #128]	; (8001540 <APPE_SysUserEvtRx+0x1d0>)
 80014be:	4821      	ldr	r0, [pc, #132]	; (8001544 <APPE_SysUserEvtRx+0x1d4>)
 80014c0:	f008 ff86 	bl	800a3d0 <iprintf>
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	3302      	adds	r3, #2
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4825      	ldr	r0, [pc, #148]	; (8001564 <APPE_SysUserEvtRx+0x1f4>)
 80014ce:	f008 ff7f 	bl	800a3d0 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80014d2:	e02e      	b.n	8001532 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80014d4:	4819      	ldr	r0, [pc, #100]	; (800153c <APPE_SysUserEvtRx+0x1cc>)
 80014d6:	f006 ff7b 	bl	80083d0 <DbgTraceGetFileName>
 80014da:	4601      	mov	r1, r0
 80014dc:	f44f 73c1 	mov.w	r3, #386	; 0x182
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <APPE_SysUserEvtRx+0x1d0>)
 80014e2:	4818      	ldr	r0, [pc, #96]	; (8001544 <APPE_SysUserEvtRx+0x1d4>)
 80014e4:	f008 ff74 	bl	800a3d0 <iprintf>
 80014e8:	481f      	ldr	r0, [pc, #124]	; (8001568 <APPE_SysUserEvtRx+0x1f8>)
 80014ea:	f008 ff71 	bl	800a3d0 <iprintf>
    break;
 80014ee:	e020      	b.n	8001532 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80014f0:	4812      	ldr	r0, [pc, #72]	; (800153c <APPE_SysUserEvtRx+0x1cc>)
 80014f2:	f006 ff6d 	bl	80083d0 <DbgTraceGetFileName>
 80014f6:	4601      	mov	r1, r0
 80014f8:	f44f 73c3 	mov.w	r3, #390	; 0x186
 80014fc:	4a10      	ldr	r2, [pc, #64]	; (8001540 <APPE_SysUserEvtRx+0x1d0>)
 80014fe:	4811      	ldr	r0, [pc, #68]	; (8001544 <APPE_SysUserEvtRx+0x1d4>)
 8001500:	f008 ff66 	bl	800a3d0 <iprintf>
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3302      	adds	r3, #2
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4619      	mov	r1, r3
 800150c:	4817      	ldr	r0, [pc, #92]	; (800156c <APPE_SysUserEvtRx+0x1fc>)
 800150e:	f008 ff5f 	bl	800a3d0 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8001512:	e00e      	b.n	8001532 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001514:	4809      	ldr	r0, [pc, #36]	; (800153c <APPE_SysUserEvtRx+0x1cc>)
 8001516:	f006 ff5b 	bl	80083d0 <DbgTraceGetFileName>
 800151a:	4601      	mov	r1, r0
 800151c:	f240 138b 	movw	r3, #395	; 0x18b
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <APPE_SysUserEvtRx+0x1d0>)
 8001522:	4808      	ldr	r0, [pc, #32]	; (8001544 <APPE_SysUserEvtRx+0x1d4>)
 8001524:	f008 ff54 	bl	800a3d0 <iprintf>
 8001528:	4811      	ldr	r0, [pc, #68]	; (8001570 <APPE_SysUserEvtRx+0x200>)
 800152a:	f008 ff51 	bl	800a3d0 <iprintf>
    break;
 800152e:	e000      	b.n	8001532 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001530:	bf00      	nop
  }

  return;
 8001532:	bf00      	nop
}
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0800c344 	.word	0x0800c344
 8001540:	0800d6a8 	.word	0x0800d6a8
 8001544:	0800c35c 	.word	0x0800c35c
 8001548:	0800c370 	.word	0x0800c370
 800154c:	0800c394 	.word	0x0800c394
 8001550:	0800c3b0 	.word	0x0800c3b0
 8001554:	0800c3c8 	.word	0x0800c3c8
 8001558:	0800c3e8 	.word	0x0800c3e8
 800155c:	0800c40c 	.word	0x0800c40c
 8001560:	0800c45c 	.word	0x0800c45c
 8001564:	0800c484 	.word	0x0800c484
 8001568:	0800c4c0 	.word	0x0800c4c0
 800156c:	0800c4e4 	.word	0x0800c4e4
 8001570:	0800c520 	.word	0x0800c520

08001574 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	330b      	adds	r3, #11
 8001582:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3302      	adds	r3, #2
 8001588:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800158a:	4819      	ldr	r0, [pc, #100]	; (80015f0 <APPE_SysEvtError+0x7c>)
 800158c:	f006 ff20 	bl	80083d0 <DbgTraceGetFileName>
 8001590:	4601      	mov	r1, r0
 8001592:	f240 13a3 	movw	r3, #419	; 0x1a3
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <APPE_SysEvtError+0x80>)
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <APPE_SysEvtError+0x84>)
 800159a:	f008 ff19 	bl	800a3d0 <iprintf>
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4815      	ldr	r0, [pc, #84]	; (80015fc <APPE_SysEvtError+0x88>)
 80015a6:	f008 ff13 	bl	800a3d0 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10d      	bne.n	80015ce <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <APPE_SysEvtError+0x7c>)
 80015b4:	f006 ff0c 	bl	80083d0 <DbgTraceGetFileName>
 80015b8:	4601      	mov	r1, r0
 80015ba:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 80015be:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <APPE_SysEvtError+0x80>)
 80015c0:	480d      	ldr	r0, [pc, #52]	; (80015f8 <APPE_SysEvtError+0x84>)
 80015c2:	f008 ff05 	bl	800a3d0 <iprintf>
 80015c6:	480e      	ldr	r0, [pc, #56]	; (8001600 <APPE_SysEvtError+0x8c>)
 80015c8:	f008 ff9e 	bl	800a508 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80015cc:	e00d      	b.n	80015ea <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80015ce:	4808      	ldr	r0, [pc, #32]	; (80015f0 <APPE_SysEvtError+0x7c>)
 80015d0:	f006 fefe 	bl	80083d0 <DbgTraceGetFileName>
 80015d4:	4601      	mov	r1, r0
 80015d6:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 80015da:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <APPE_SysEvtError+0x80>)
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <APPE_SysEvtError+0x84>)
 80015de:	f008 fef7 	bl	800a3d0 <iprintf>
 80015e2:	4808      	ldr	r0, [pc, #32]	; (8001604 <APPE_SysEvtError+0x90>)
 80015e4:	f008 ff90 	bl	800a508 <puts>
  return;
 80015e8:	bf00      	nop
}
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	0800c344 	.word	0x0800c344
 80015f4:	0800d6bc 	.word	0x0800d6bc
 80015f8:	0800c35c 	.word	0x0800c35c
 80015fc:	0800c544 	.word	0x0800c544
 8001600:	0800c574 	.word	0x0800c574
 8001604:	0800c5b0 	.word	0x0800c5b0

08001608 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800161e:	2300      	movs	r3, #0
 8001620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	330b      	adds	r3, #11
 800162c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3302      	adds	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d146      	bne.n	80016ca <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 800163c:	4836      	ldr	r0, [pc, #216]	; (8001718 <APPE_SysEvtReadyProcessing+0x110>)
 800163e:	f006 fec7 	bl	80083d0 <DbgTraceGetFileName>
 8001642:	4601      	mov	r1, r0
 8001644:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8001648:	4a34      	ldr	r2, [pc, #208]	; (800171c <APPE_SysEvtReadyProcessing+0x114>)
 800164a:	4835      	ldr	r0, [pc, #212]	; (8001720 <APPE_SysEvtReadyProcessing+0x118>)
 800164c:	f008 fec0 	bl	800a3d0 <iprintf>
 8001650:	4834      	ldr	r0, [pc, #208]	; (8001724 <APPE_SysEvtReadyProcessing+0x11c>)
 8001652:	f008 ff59 	bl	800a508 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001656:	f7ff fc17 	bl	8000e88 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800165a:	230f      	movs	r3, #15
 800165c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800165e:	237f      	movs	r3, #127	; 0x7f
 8001660:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001662:	f7ff fcf9 	bl	8001058 <LL_DBGMCU_GetRevisionID>
 8001666:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001668:	482b      	ldr	r0, [pc, #172]	; (8001718 <APPE_SysEvtReadyProcessing+0x110>)
 800166a:	f006 feb1 	bl	80083d0 <DbgTraceGetFileName>
 800166e:	4601      	mov	r1, r0
 8001670:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 8001674:	4a29      	ldr	r2, [pc, #164]	; (800171c <APPE_SysEvtReadyProcessing+0x114>)
 8001676:	482a      	ldr	r0, [pc, #168]	; (8001720 <APPE_SysEvtReadyProcessing+0x118>)
 8001678:	f008 feaa 	bl	800a3d0 <iprintf>
 800167c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800167e:	482a      	ldr	r0, [pc, #168]	; (8001728 <APPE_SysEvtReadyProcessing+0x120>)
 8001680:	f008 fea6 	bl	800a3d0 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	b29b      	uxth	r3, r3
 8001688:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800168a:	f7ff fcd7 	bl	800103c <LL_DBGMCU_GetDeviceID>
 800168e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001690:	4821      	ldr	r0, [pc, #132]	; (8001718 <APPE_SysEvtReadyProcessing+0x110>)
 8001692:	f006 fe9d 	bl	80083d0 <DbgTraceGetFileName>
 8001696:	4601      	mov	r1, r0
 8001698:	f240 13df 	movw	r3, #479	; 0x1df
 800169c:	4a1f      	ldr	r2, [pc, #124]	; (800171c <APPE_SysEvtReadyProcessing+0x114>)
 800169e:	4820      	ldr	r0, [pc, #128]	; (8001720 <APPE_SysEvtReadyProcessing+0x118>)
 80016a0:	f008 fe96 	bl	800a3d0 <iprintf>
 80016a4:	6a39      	ldr	r1, [r7, #32]
 80016a6:	4821      	ldr	r0, [pc, #132]	; (800172c <APPE_SysEvtReadyProcessing+0x124>)
 80016a8:	f008 fe92 	bl	800a3d0 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	4618      	mov	r0, r3
 80016b8:	f006 f8b4 	bl	8007824 <SHCI_C2_Config>

    APP_BLE_Init();
 80016bc:	f006 ffba 	bl	8008634 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80016c0:	2100      	movs	r1, #0
 80016c2:	2001      	movs	r0, #1
 80016c4:	f008 fbd6 	bl	8009e74 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80016c8:	e022      	b.n	8001710 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d110      	bne.n	80016f4 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80016d2:	4811      	ldr	r0, [pc, #68]	; (8001718 <APPE_SysEvtReadyProcessing+0x110>)
 80016d4:	f006 fe7c 	bl	80083d0 <DbgTraceGetFileName>
 80016d8:	4601      	mov	r1, r0
 80016da:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 80016de:	4a0f      	ldr	r2, [pc, #60]	; (800171c <APPE_SysEvtReadyProcessing+0x114>)
 80016e0:	480f      	ldr	r0, [pc, #60]	; (8001720 <APPE_SysEvtReadyProcessing+0x118>)
 80016e2:	f008 fe75 	bl	800a3d0 <iprintf>
 80016e6:	4812      	ldr	r0, [pc, #72]	; (8001730 <APPE_SysEvtReadyProcessing+0x128>)
 80016e8:	f008 fe72 	bl	800a3d0 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]
  return;
 80016f2:	e00d      	b.n	8001710 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80016f4:	4808      	ldr	r0, [pc, #32]	; (8001718 <APPE_SysEvtReadyProcessing+0x110>)
 80016f6:	f006 fe6b 	bl	80083d0 <DbgTraceGetFileName>
 80016fa:	4601      	mov	r1, r0
 80016fc:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <APPE_SysEvtReadyProcessing+0x114>)
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <APPE_SysEvtReadyProcessing+0x118>)
 8001704:	f008 fe64 	bl	800a3d0 <iprintf>
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <APPE_SysEvtReadyProcessing+0x12c>)
 800170a:	f008 fe61 	bl	800a3d0 <iprintf>
  return;
 800170e:	bf00      	nop
}
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	0800c344 	.word	0x0800c344
 800171c:	0800d6d0 	.word	0x0800d6d0
 8001720:	0800c35c 	.word	0x0800c35c
 8001724:	0800c5e8 	.word	0x0800c5e8
 8001728:	0800c604 	.word	0x0800c604
 800172c:	0800c628 	.word	0x0800c628
 8001730:	0800c648 	.word	0x0800c648
 8001734:	0800c67c 	.word	0x0800c67c

08001738 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f008 fbc8 	bl	8009ed4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800174c:	bf00      	nop
}
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f008 fbb6 	bl	8009ed4 <UTIL_SEQ_Run>

  return;
 8001768:	bf00      	nop
}
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001778:	2100      	movs	r1, #0
 800177a:	2004      	movs	r0, #4
 800177c:	f008 fcc8 	bl	800a110 <UTIL_SEQ_SetTask>
  return;
 8001780:	bf00      	nop
}
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001790:	2002      	movs	r0, #2
 8001792:	f008 fd29 	bl	800a1e8 <UTIL_SEQ_SetEvt>
  return;
 8001796:	bf00      	nop
}
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017a6:	2002      	movs	r0, #2
 80017a8:	f008 fd3e 	bl	800a228 <UTIL_SEQ_WaitEvt>
  return;
 80017ac:	bf00      	nop
}
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <LL_EXTI_EnableIT_0_31>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80017be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017c2:	4905      	ldr	r1, [pc, #20]	; (80017d8 <LL_EXTI_EnableIT_0_31+0x24>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	58000800 	.word	0x58000800

080017dc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4904      	ldr	r1, [pc, #16]	; (80017fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]

}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	58000800 	.word	0x58000800

08001800 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <ReadRtcSsrValue+0x3c>)
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	b29b      	uxth	r3, r3
 800180c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <ReadRtcSsrValue+0x3c>)
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	b29b      	uxth	r3, r3
 8001814:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001816:	e005      	b.n	8001824 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <ReadRtcSsrValue+0x3c>)
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	b29b      	uxth	r3, r3
 8001822:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d1f5      	bne.n	8001818 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800182c:	683b      	ldr	r3, [r7, #0]
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	40002800 	.word	0x40002800

08001840 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	460a      	mov	r2, r1
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	4613      	mov	r3, r2
 800184e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001850:	79ba      	ldrb	r2, [r7, #6]
 8001852:	491d      	ldr	r1, [pc, #116]	; (80018c8 <LinkTimerAfter+0x88>)
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	3315      	adds	r3, #21
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	2b06      	cmp	r3, #6
 8001868:	d009      	beq.n	800187e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	4916      	ldr	r1, [pc, #88]	; (80018c8 <LinkTimerAfter+0x88>)
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	3314      	adds	r3, #20
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800187e:	79fa      	ldrb	r2, [r7, #7]
 8001880:	4911      	ldr	r1, [pc, #68]	; (80018c8 <LinkTimerAfter+0x88>)
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	3315      	adds	r3, #21
 800188e:	7bfa      	ldrb	r2, [r7, #15]
 8001890:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001892:	79fa      	ldrb	r2, [r7, #7]
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <LinkTimerAfter+0x88>)
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3314      	adds	r3, #20
 80018a2:	79ba      	ldrb	r2, [r7, #6]
 80018a4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80018a6:	79ba      	ldrb	r2, [r7, #6]
 80018a8:	4907      	ldr	r1, [pc, #28]	; (80018c8 <LinkTimerAfter+0x88>)
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	440b      	add	r3, r1
 80018b4:	3315      	adds	r3, #21
 80018b6:	79fa      	ldrb	r2, [r7, #7]
 80018b8:	701a      	strb	r2, [r3, #0]

  return;
 80018ba:	bf00      	nop
}
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000984 	.word	0x20000984

080018cc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	460a      	mov	r2, r1
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	4613      	mov	r3, r2
 80018da:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80018dc:	4b29      	ldr	r3, [pc, #164]	; (8001984 <LinkTimerBefore+0xb8>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	79ba      	ldrb	r2, [r7, #6]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d032      	beq.n	800194e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80018e8:	79ba      	ldrb	r2, [r7, #6]
 80018ea:	4927      	ldr	r1, [pc, #156]	; (8001988 <LinkTimerBefore+0xbc>)
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	3314      	adds	r3, #20
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	4922      	ldr	r1, [pc, #136]	; (8001988 <LinkTimerBefore+0xbc>)
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	3315      	adds	r3, #21
 800190c:	79fa      	ldrb	r2, [r7, #7]
 800190e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001910:	79fa      	ldrb	r2, [r7, #7]
 8001912:	491d      	ldr	r1, [pc, #116]	; (8001988 <LinkTimerBefore+0xbc>)
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	3315      	adds	r3, #21
 8001920:	79ba      	ldrb	r2, [r7, #6]
 8001922:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001924:	79fa      	ldrb	r2, [r7, #7]
 8001926:	4918      	ldr	r1, [pc, #96]	; (8001988 <LinkTimerBefore+0xbc>)
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	3314      	adds	r3, #20
 8001934:	7bfa      	ldrb	r2, [r7, #15]
 8001936:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001938:	79ba      	ldrb	r2, [r7, #6]
 800193a:	4913      	ldr	r1, [pc, #76]	; (8001988 <LinkTimerBefore+0xbc>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	440b      	add	r3, r1
 8001946:	3314      	adds	r3, #20
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800194c:	e014      	b.n	8001978 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800194e:	79fa      	ldrb	r2, [r7, #7]
 8001950:	490d      	ldr	r1, [pc, #52]	; (8001988 <LinkTimerBefore+0xbc>)
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	3315      	adds	r3, #21
 800195e:	79ba      	ldrb	r2, [r7, #6]
 8001960:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001962:	79ba      	ldrb	r2, [r7, #6]
 8001964:	4908      	ldr	r1, [pc, #32]	; (8001988 <LinkTimerBefore+0xbc>)
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	3314      	adds	r3, #20
 8001972:	79fa      	ldrb	r2, [r7, #7]
 8001974:	701a      	strb	r2, [r3, #0]
  return;
 8001976:	bf00      	nop
}
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000a14 	.word	0x20000a14
 8001988:	20000984 	.word	0x20000984

0800198c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001996:	4b4e      	ldr	r3, [pc, #312]	; (8001ad0 <linkTimer+0x144>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	2b06      	cmp	r3, #6
 800199e:	d118      	bne.n	80019d2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80019a0:	4b4b      	ldr	r3, [pc, #300]	; (8001ad0 <linkTimer+0x144>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b4b      	ldr	r3, [pc, #300]	; (8001ad4 <linkTimer+0x148>)
 80019a8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80019aa:	4a49      	ldr	r2, [pc, #292]	; (8001ad0 <linkTimer+0x144>)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	4949      	ldr	r1, [pc, #292]	; (8001ad8 <linkTimer+0x14c>)
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	440b      	add	r3, r1
 80019be:	3315      	adds	r3, #21
 80019c0:	2206      	movs	r2, #6
 80019c2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80019c4:	4b45      	ldr	r3, [pc, #276]	; (8001adc <linkTimer+0x150>)
 80019c6:	f04f 32ff 	mov.w	r2, #4294967295
 80019ca:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	81fb      	strh	r3, [r7, #14]
 80019d0:	e078      	b.n	8001ac4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80019d2:	f000 f909 	bl	8001be8 <ReturnTimeElapsed>
 80019d6:	4603      	mov	r3, r0
 80019d8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	493e      	ldr	r1, [pc, #248]	; (8001ad8 <linkTimer+0x14c>)
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	3308      	adds	r3, #8
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	89fb      	ldrh	r3, [r7, #14]
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	4419      	add	r1, r3
 80019f2:	4839      	ldr	r0, [pc, #228]	; (8001ad8 <linkTimer+0x14c>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4403      	add	r3, r0
 80019fe:	3308      	adds	r3, #8
 8001a00:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001a02:	79fa      	ldrb	r2, [r7, #7]
 8001a04:	4934      	ldr	r1, [pc, #208]	; (8001ad8 <linkTimer+0x14c>)
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	3308      	adds	r3, #8
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001a16:	4b2e      	ldr	r3, [pc, #184]	; (8001ad0 <linkTimer+0x144>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4a2e      	ldr	r2, [pc, #184]	; (8001ad8 <linkTimer+0x14c>)
 8001a20:	460b      	mov	r3, r1
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	440b      	add	r3, r1
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	4413      	add	r3, r2
 8001a2a:	3308      	adds	r3, #8
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d337      	bcc.n	8001aa4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001a34:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <linkTimer+0x144>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001a3a:	7b7a      	ldrb	r2, [r7, #13]
 8001a3c:	4926      	ldr	r1, [pc, #152]	; (8001ad8 <linkTimer+0x14c>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	3315      	adds	r3, #21
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a4e:	e013      	b.n	8001a78 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001a50:	7b7a      	ldrb	r2, [r7, #13]
 8001a52:	4921      	ldr	r1, [pc, #132]	; (8001ad8 <linkTimer+0x14c>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3315      	adds	r3, #21
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001a64:	7b7a      	ldrb	r2, [r7, #13]
 8001a66:	491c      	ldr	r1, [pc, #112]	; (8001ad8 <linkTimer+0x14c>)
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	3315      	adds	r3, #21
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a78:	7b3b      	ldrb	r3, [r7, #12]
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d00b      	beq.n	8001a96 <linkTimer+0x10a>
 8001a7e:	7b3a      	ldrb	r2, [r7, #12]
 8001a80:	4915      	ldr	r1, [pc, #84]	; (8001ad8 <linkTimer+0x14c>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d2dc      	bcs.n	8001a50 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001a96:	7b7a      	ldrb	r2, [r7, #13]
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fecf 	bl	8001840 <LinkTimerAfter>
 8001aa2:	e00f      	b.n	8001ac4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <linkTimer+0x144>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff0c 	bl	80018cc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <linkTimer+0x144>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <linkTimer+0x148>)
 8001abc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <linkTimer+0x144>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001ac4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000a14 	.word	0x20000a14
 8001ad4:	20000a15 	.word	0x20000a15
 8001ad8:	20000984 	.word	0x20000984
 8001adc:	20000a18 	.word	0x20000a18

08001ae0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	460a      	mov	r2, r1
 8001aea:	71fb      	strb	r3, [r7, #7]
 8001aec:	4613      	mov	r3, r2
 8001aee:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001af0:	4b39      	ldr	r3, [pc, #228]	; (8001bd8 <UnlinkTimer+0xf8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	79fa      	ldrb	r2, [r7, #7]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d111      	bne.n	8001b20 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001afc:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <UnlinkTimer+0xf8>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <UnlinkTimer+0xfc>)
 8001b04:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001b06:	79fa      	ldrb	r2, [r7, #7]
 8001b08:	4935      	ldr	r1, [pc, #212]	; (8001be0 <UnlinkTimer+0x100>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	440b      	add	r3, r1
 8001b14:	3315      	adds	r3, #21
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <UnlinkTimer+0xf8>)
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e03e      	b.n	8001b9e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001b20:	79fa      	ldrb	r2, [r7, #7]
 8001b22:	492f      	ldr	r1, [pc, #188]	; (8001be0 <UnlinkTimer+0x100>)
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3314      	adds	r3, #20
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001b34:	79fa      	ldrb	r2, [r7, #7]
 8001b36:	492a      	ldr	r1, [pc, #168]	; (8001be0 <UnlinkTimer+0x100>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	3315      	adds	r3, #21
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001b48:	79f9      	ldrb	r1, [r7, #7]
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	4824      	ldr	r0, [pc, #144]	; (8001be0 <UnlinkTimer+0x100>)
 8001b4e:	460b      	mov	r3, r1
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	440b      	add	r3, r1
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4403      	add	r3, r0
 8001b58:	3315      	adds	r3, #21
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2d8      	uxtb	r0, r3
 8001b5e:	4920      	ldr	r1, [pc, #128]	; (8001be0 <UnlinkTimer+0x100>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	3315      	adds	r3, #21
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b70:	7bbb      	ldrb	r3, [r7, #14]
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d013      	beq.n	8001b9e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001b76:	79f9      	ldrb	r1, [r7, #7]
 8001b78:	7bba      	ldrb	r2, [r7, #14]
 8001b7a:	4819      	ldr	r0, [pc, #100]	; (8001be0 <UnlinkTimer+0x100>)
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	440b      	add	r3, r1
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4403      	add	r3, r0
 8001b86:	3314      	adds	r3, #20
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b2d8      	uxtb	r0, r3
 8001b8c:	4914      	ldr	r1, [pc, #80]	; (8001be0 <UnlinkTimer+0x100>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	3314      	adds	r3, #20
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	490f      	ldr	r1, [pc, #60]	; (8001be0 <UnlinkTimer+0x100>)
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	330c      	adds	r3, #12
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <UnlinkTimer+0xf8>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b06      	cmp	r3, #6
 8001bba:	d107      	bne.n	8001bcc <UnlinkTimer+0xec>
 8001bbc:	79bb      	ldrb	r3, [r7, #6]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d104      	bne.n	8001bcc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <UnlinkTimer+0x104>)
 8001bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  return;
 8001bca:	bf00      	nop
 8001bcc:	bf00      	nop
}
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	20000a14 	.word	0x20000a14
 8001bdc:	20000a15 	.word	0x20000a15
 8001be0:	20000984 	.word	0x20000984
 8001be4:	20000a18 	.word	0x20000a18

08001be8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <ReturnTimeElapsed+0x70>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf6:	d026      	beq.n	8001c46 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001bf8:	f7ff fe02 	bl	8001800 <ReadRtcSsrValue>
 8001bfc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <ReturnTimeElapsed+0x70>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d805      	bhi.n	8001c14 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <ReturnTimeElapsed+0x70>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	e00a      	b.n	8001c2a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <ReturnTimeElapsed+0x74>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <ReturnTimeElapsed+0x70>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <ReturnTimeElapsed+0x78>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <ReturnTimeElapsed+0x7c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	40d3      	lsrs	r3, r2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	e001      	b.n	8001c4a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	b29b      	uxth	r3, r3
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000a18 	.word	0x20000a18
 8001c5c:	20000a20 	.word	0x20000a20
 8001c60:	20000a1e 	.word	0x20000a1e
 8001c64:	20000a1d 	.word	0x20000a1d

08001c68 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d108      	bne.n	8001c8a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001c78:	f7ff fdc2 	bl	8001800 <ReadRtcSsrValue>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <RestartWakeupCounter+0x9c>)
 8001c80:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c82:	2003      	movs	r0, #3
 8001c84:	f001 fa83 	bl	800318e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001c88:	e039      	b.n	8001cfe <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d803      	bhi.n	8001c98 <RestartWakeupCounter+0x30>
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <RestartWakeupCounter+0xa0>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d002      	beq.n	8001c9e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c9e:	bf00      	nop
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <RestartWakeupCounter+0xa4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f8      	beq.n	8001ca0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001cae:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <RestartWakeupCounter+0xa4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <RestartWakeupCounter+0xa4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001cbe:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <RestartWakeupCounter+0xa8>)
 8001cc2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cc6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f001 fa6e 	bl	80031aa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001cce:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <RestartWakeupCounter+0xac>)
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	0c1b      	lsrs	r3, r3, #16
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	88fa      	ldrh	r2, [r7, #6]
 8001cd8:	490e      	ldr	r1, [pc, #56]	; (8001d14 <RestartWakeupCounter+0xac>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001cde:	f7ff fd8f 	bl	8001800 <ReadRtcSsrValue>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <RestartWakeupCounter+0x9c>)
 8001ce6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <RestartWakeupCounter+0xa4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <RestartWakeupCounter+0xa4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cf6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001cf8:	f3af 8000 	nop.w
  return ;
 8001cfc:	bf00      	nop
}
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000a18 	.word	0x20000a18
 8001d08:	20000a1d 	.word	0x20000a1d
 8001d0c:	20000a60 	.word	0x20000a60
 8001d10:	58000800 	.word	0x58000800
 8001d14:	40002800 	.word	0x40002800

08001d18 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d1e:	4b45      	ldr	r3, [pc, #276]	; (8001e34 <RescheduleTimerList+0x11c>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2a:	d107      	bne.n	8001d3c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d2c:	bf00      	nop
 8001d2e:	4b42      	ldr	r3, [pc, #264]	; (8001e38 <RescheduleTimerList+0x120>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f8      	bne.n	8001d2e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001d3c:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <RescheduleTimerList+0x120>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <RescheduleTimerList+0x120>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001d4c:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <RescheduleTimerList+0x124>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	493a      	ldr	r1, [pc, #232]	; (8001e40 <RescheduleTimerList+0x128>)
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	3308      	adds	r3, #8
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001d66:	f7ff ff3f 	bl	8001be8 <ReturnTimeElapsed>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d205      	bcs.n	8001d82 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d7a:	4b32      	ldr	r3, [pc, #200]	; (8001e44 <RescheduleTimerList+0x12c>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	e04d      	b.n	8001e1e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4a30      	ldr	r2, [pc, #192]	; (8001e48 <RescheduleTimerList+0x130>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d906      	bls.n	8001da2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001d94:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <RescheduleTimerList+0x130>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <RescheduleTimerList+0x12c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]
 8001da0:	e03d      	b.n	8001e1e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <RescheduleTimerList+0x12c>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001db2:	e034      	b.n	8001e1e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	4922      	ldr	r1, [pc, #136]	; (8001e40 <RescheduleTimerList+0x128>)
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	440b      	add	r3, r1
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d20a      	bcs.n	8001de2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	491c      	ldr	r1, [pc, #112]	; (8001e40 <RescheduleTimerList+0x128>)
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	3308      	adds	r3, #8
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	e013      	b.n	8001e0a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	4916      	ldr	r1, [pc, #88]	; (8001e40 <RescheduleTimerList+0x128>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	3308      	adds	r3, #8
 8001df2:	6819      	ldr	r1, [r3, #0]
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	1ac9      	subs	r1, r1, r3
 8001dfa:	4811      	ldr	r0, [pc, #68]	; (8001e40 <RescheduleTimerList+0x128>)
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4403      	add	r3, r0
 8001e06:	3308      	adds	r3, #8
 8001e08:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001e0a:	7bfa      	ldrb	r2, [r7, #15]
 8001e0c:	490c      	ldr	r1, [pc, #48]	; (8001e40 <RescheduleTimerList+0x128>)
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	3315      	adds	r3, #21
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2b06      	cmp	r3, #6
 8001e22:	d1c7      	bne.n	8001db4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001e24:	89bb      	ldrh	r3, [r7, #12]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff1e 	bl	8001c68 <RestartWakeupCounter>

  return ;
 8001e2c:	bf00      	nop
}
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40002800 	.word	0x40002800
 8001e38:	20000a60 	.word	0x20000a60
 8001e3c:	20000a14 	.word	0x20000a14
 8001e40:	20000984 	.word	0x20000984
 8001e44:	20000a1c 	.word	0x20000a1c
 8001e48:	20000a22 	.word	0x20000a22

08001e4c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e52:	f3ef 8310 	mrs	r3, PRIMASK
 8001e56:	617b      	str	r3, [r7, #20]
  return(result);
 8001e58:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5c:	b672      	cpsid	i
}
 8001e5e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e60:	4b59      	ldr	r3, [pc, #356]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	22ca      	movs	r2, #202	; 0xca
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2253      	movs	r2, #83	; 0x53
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001e70:	4b55      	ldr	r3, [pc, #340]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	4b54      	ldr	r3, [pc, #336]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001e80:	4b52      	ldr	r3, [pc, #328]	; (8001fcc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001e88:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e8c:	4950      	ldr	r1, [pc, #320]	; (8001fd0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e8e:	4613      	mov	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	330c      	adds	r3, #12
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d16e      	bne.n	8001f80 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001ea2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ea6:	494a      	ldr	r1, [pc, #296]	; (8001fd0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	440b      	add	r3, r1
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001eb6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001eba:	4945      	ldr	r1, [pc, #276]	; (8001fd0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	3310      	adds	r3, #16
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001ecc:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d04c      	beq.n	8001f70 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001ed6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001eda:	493d      	ldr	r1, [pc, #244]	; (8001fd0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	440b      	add	r3, r1
 8001ee6:	330d      	adds	r3, #13
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d124      	bne.n	8001f3a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fdf2 	bl	8001ae0 <UnlinkTimer>
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f383 8810 	msr	PRIMASK, r3
}
 8001f06:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001f08:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f0c:	4930      	ldr	r1, [pc, #192]	; (8001fd0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f0e:	4613      	mov	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	3304      	adds	r3, #4
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f9b8 	bl	8002298 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f28:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	22ca      	movs	r2, #202	; 0xca
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2253      	movs	r2, #83	; 0x53
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24
 8001f38:	e012      	b.n	8001f60 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f383 8810 	msr	PRIMASK, r3
}
 8001f44:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001f46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f920 	bl	8002190 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	22ca      	movs	r2, #202	; 0xca
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
 8001f58:	4b1b      	ldr	r3, [pc, #108]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2253      	movs	r2, #83	; 0x53
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f64:	69fa      	ldr	r2, [r7, #28]
 8001f66:	4619      	mov	r1, r3
 8001f68:	69b8      	ldr	r0, [r7, #24]
 8001f6a:	f000 fa1b 	bl	80023a4 <HW_TS_RTC_Int_AppNot>
 8001f6e:	e022      	b.n	8001fb6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001f70:	f7ff fed2 	bl	8001d18 <RescheduleTimerList>
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f383 8810 	msr	PRIMASK, r3
}
 8001f7e:	e01a      	b.n	8001fb6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f80:	bf00      	nop
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f8      	beq.n	8001f82 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001fa0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001fa2:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001fa4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f383 8810 	msr	PRIMASK, r3
}
 8001fb4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	22ff      	movs	r2, #255	; 0xff
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001fbe:	bf00      	nop
}
 8001fc0:	3728      	adds	r7, #40	; 0x28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000a60 	.word	0x20000a60
 8001fcc:	20000a14 	.word	0x20000a14
 8001fd0:	20000984 	.word	0x20000984
 8001fd4:	20000a1c 	.word	0x20000a1c
 8001fd8:	58000800 	.word	0x58000800

08001fdc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fe8:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <HW_TS_Init+0x188>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	22ca      	movs	r2, #202	; 0xca
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24
 8001ff0:	4b5c      	ldr	r3, [pc, #368]	; (8002164 <HW_TS_Init+0x188>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2253      	movs	r2, #83	; 0x53
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ff8:	4b5b      	ldr	r3, [pc, #364]	; (8002168 <HW_TS_Init+0x18c>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	4a5a      	ldr	r2, [pc, #360]	; (8002168 <HW_TS_Init+0x18c>)
 8001ffe:	f043 0320 	orr.w	r3, r3, #32
 8002002:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <HW_TS_Init+0x18c>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f1c3 0304 	rsb	r3, r3, #4
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b55      	ldr	r3, [pc, #340]	; (800216c <HW_TS_Init+0x190>)
 8002018:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800201a:	4b53      	ldr	r3, [pc, #332]	; (8002168 <HW_TS_Init+0x18c>)
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002022:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002026:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	fa92 f2a2 	rbit	r2, r2
 800202e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	2a00      	cmp	r2, #0
 8002038:	d101      	bne.n	800203e <HW_TS_Init+0x62>
  {
    return 32U;
 800203a:	2220      	movs	r2, #32
 800203c:	e003      	b.n	8002046 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	fab2 f282 	clz	r2, r2
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	40d3      	lsrs	r3, r2
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3301      	adds	r3, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b48      	ldr	r3, [pc, #288]	; (8002170 <HW_TS_Init+0x194>)
 8002050:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002052:	4b45      	ldr	r3, [pc, #276]	; (8002168 <HW_TS_Init+0x18c>)
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	b29b      	uxth	r3, r3
 8002058:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800205c:	b29b      	uxth	r3, r3
 800205e:	3301      	adds	r3, #1
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b44      	ldr	r3, [pc, #272]	; (8002174 <HW_TS_Init+0x198>)
 8002064:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002066:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HW_TS_Init+0x198>)
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	3b01      	subs	r3, #1
 800206c:	4a40      	ldr	r2, [pc, #256]	; (8002170 <HW_TS_Init+0x194>)
 800206e:	7812      	ldrb	r2, [r2, #0]
 8002070:	fb02 f303 	mul.w	r3, r2, r3
 8002074:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002078:	4a3c      	ldr	r2, [pc, #240]	; (800216c <HW_TS_Init+0x190>)
 800207a:	7812      	ldrb	r2, [r2, #0]
 800207c:	40d3      	lsrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002086:	4293      	cmp	r3, r2
 8002088:	d904      	bls.n	8002094 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HW_TS_Init+0x19c>)
 800208c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002090:	801a      	strh	r2, [r3, #0]
 8002092:	e003      	b.n	800209c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	b29a      	uxth	r2, r3
 8002098:	4b37      	ldr	r3, [pc, #220]	; (8002178 <HW_TS_Init+0x19c>)
 800209a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800209c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020a0:	f7ff fb9c 	bl	80017dc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020a8:	f7ff fb84 	bl	80017b4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d13d      	bne.n	800212e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80020b2:	4b32      	ldr	r3, [pc, #200]	; (800217c <HW_TS_Init+0x1a0>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020b8:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HW_TS_Init+0x1a4>)
 80020ba:	f04f 32ff 	mov.w	r2, #4294967295
 80020be:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	77fb      	strb	r3, [r7, #31]
 80020c4:	e00c      	b.n	80020e0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80020c6:	7ffa      	ldrb	r2, [r7, #31]
 80020c8:	492e      	ldr	r1, [pc, #184]	; (8002184 <HW_TS_Init+0x1a8>)
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	330c      	adds	r3, #12
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020da:	7ffb      	ldrb	r3, [r7, #31]
 80020dc:	3301      	adds	r3, #1
 80020de:	77fb      	strb	r3, [r7, #31]
 80020e0:	7ffb      	ldrb	r3, [r7, #31]
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d9ef      	bls.n	80020c6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80020e6:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HW_TS_Init+0x1ac>)
 80020e8:	2206      	movs	r2, #6
 80020ea:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HW_TS_Init+0x188>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HW_TS_Init+0x188>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HW_TS_Init+0x188>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <HW_TS_Init+0x188>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800210c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <HW_TS_Init+0x1b0>)
 8002110:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002114:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002116:	2003      	movs	r0, #3
 8002118:	f001 f847 	bl	80031aa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HW_TS_Init+0x188>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HW_TS_Init+0x188>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	e009      	b.n	8002142 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HW_TS_Init+0x188>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800213c:	2003      	movs	r0, #3
 800213e:	f001 f826 	bl	800318e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HW_TS_Init+0x188>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	22ff      	movs	r2, #255	; 0xff
 8002148:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800214a:	2200      	movs	r2, #0
 800214c:	2103      	movs	r1, #3
 800214e:	2003      	movs	r0, #3
 8002150:	f000 ffdb 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002154:	2003      	movs	r0, #3
 8002156:	f000 fff2 	bl	800313e <HAL_NVIC_EnableIRQ>

  return;
 800215a:	bf00      	nop
}
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000a60 	.word	0x20000a60
 8002168:	40002800 	.word	0x40002800
 800216c:	20000a1d 	.word	0x20000a1d
 8002170:	20000a1e 	.word	0x20000a1e
 8002174:	20000a20 	.word	0x20000a20
 8002178:	20000a22 	.word	0x20000a22
 800217c:	20000a1c 	.word	0x20000a1c
 8002180:	20000a18 	.word	0x20000a18
 8002184:	20000984 	.word	0x20000984
 8002188:	20000a14 	.word	0x20000a14
 800218c:	58000800 	.word	0x58000800

08002190 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219a:	f3ef 8310 	mrs	r3, PRIMASK
 800219e:	60fb      	str	r3, [r7, #12]
  return(result);
 80021a0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021a4:	b672      	cpsid	i
}
 80021a6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021a8:	2003      	movs	r0, #3
 80021aa:	f000 ffd6 	bl	800315a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021ae:	4b34      	ldr	r3, [pc, #208]	; (8002280 <HW_TS_Stop+0xf0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	22ca      	movs	r2, #202	; 0xca
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24
 80021b6:	4b32      	ldr	r3, [pc, #200]	; (8002280 <HW_TS_Stop+0xf0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2253      	movs	r2, #83	; 0x53
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80021be:	79fa      	ldrb	r2, [r7, #7]
 80021c0:	4930      	ldr	r1, [pc, #192]	; (8002284 <HW_TS_Stop+0xf4>)
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	330c      	adds	r3, #12
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d142      	bne.n	800225c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fc80 	bl	8001ae0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80021e0:	4b29      	ldr	r3, [pc, #164]	; (8002288 <HW_TS_Stop+0xf8>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	2b06      	cmp	r3, #6
 80021ea:	d12f      	bne.n	800224c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <HW_TS_Stop+0xfc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f8:	d107      	bne.n	800220a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80021fa:	bf00      	nop
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HW_TS_Stop+0xf0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f8      	bne.n	80021fc <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HW_TS_Stop+0xf0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <HW_TS_Stop+0xf0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002218:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800221a:	bf00      	nop
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HW_TS_Stop+0xf0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0f8      	beq.n	800221c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HW_TS_Stop+0xf0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HW_TS_Stop+0xf0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800223a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800223c:	4b14      	ldr	r3, [pc, #80]	; (8002290 <HW_TS_Stop+0x100>)
 800223e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002242:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002244:	2003      	movs	r0, #3
 8002246:	f000 ffb0 	bl	80031aa <HAL_NVIC_ClearPendingIRQ>
 800224a:	e007      	b.n	800225c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HW_TS_Stop+0x104>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	b2db      	uxtb	r3, r3
 8002252:	7cfa      	ldrb	r2, [r7, #19]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002258:	f7ff fd5e 	bl	8001d18 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800225c:	4b08      	ldr	r3, [pc, #32]	; (8002280 <HW_TS_Stop+0xf0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	22ff      	movs	r2, #255	; 0xff
 8002262:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002264:	2003      	movs	r0, #3
 8002266:	f000 ff6a 	bl	800313e <HAL_NVIC_EnableIRQ>
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f383 8810 	msr	PRIMASK, r3
}
 8002274:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002276:	bf00      	nop
}
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000a60 	.word	0x20000a60
 8002284:	20000984 	.word	0x20000984
 8002288:	20000a14 	.word	0x20000a14
 800228c:	40002800 	.word	0x40002800
 8002290:	58000800 	.word	0x58000800
 8002294:	20000a15 	.word	0x20000a15

08002298 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80022a4:	79fa      	ldrb	r2, [r7, #7]
 80022a6:	493b      	ldr	r1, [pc, #236]	; (8002394 <HW_TS_Start+0xfc>)
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	330c      	adds	r3, #12
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d103      	bne.n	80022c4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff66 	bl	8002190 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022c4:	f3ef 8310 	mrs	r3, PRIMASK
 80022c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80022ca:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80022cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80022ce:	b672      	cpsid	i
}
 80022d0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80022d2:	2003      	movs	r0, #3
 80022d4:	f000 ff41 	bl	800315a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022d8:	4b2f      	ldr	r3, [pc, #188]	; (8002398 <HW_TS_Start+0x100>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	22ca      	movs	r2, #202	; 0xca
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HW_TS_Start+0x100>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2253      	movs	r2, #83	; 0x53
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80022e8:	79fa      	ldrb	r2, [r7, #7]
 80022ea:	492a      	ldr	r1, [pc, #168]	; (8002394 <HW_TS_Start+0xfc>)
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	330c      	adds	r3, #12
 80022f8:	2202      	movs	r2, #2
 80022fa:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80022fc:	79fa      	ldrb	r2, [r7, #7]
 80022fe:	4925      	ldr	r1, [pc, #148]	; (8002394 <HW_TS_Start+0xfc>)
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	3308      	adds	r3, #8
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	4920      	ldr	r1, [pc, #128]	; (8002394 <HW_TS_Start+0xfc>)
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	3304      	adds	r3, #4
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fb30 	bl	800198c <linkTimer>
 800232c:	4603      	mov	r3, r0
 800232e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002330:	4b1a      	ldr	r3, [pc, #104]	; (800239c <HW_TS_Start+0x104>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HW_TS_Start+0x108>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	7c7a      	ldrb	r2, [r7, #17]
 800233e:	429a      	cmp	r2, r3
 8002340:	d002      	beq.n	8002348 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002342:	f7ff fce9 	bl	8001d18 <RescheduleTimerList>
 8002346:	e013      	b.n	8002370 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002348:	79fa      	ldrb	r2, [r7, #7]
 800234a:	4912      	ldr	r1, [pc, #72]	; (8002394 <HW_TS_Start+0xfc>)
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	440b      	add	r3, r1
 8002356:	3308      	adds	r3, #8
 8002358:	6819      	ldr	r1, [r3, #0]
 800235a:	8a7b      	ldrh	r3, [r7, #18]
 800235c:	79fa      	ldrb	r2, [r7, #7]
 800235e:	1ac9      	subs	r1, r1, r3
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <HW_TS_Start+0xfc>)
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4403      	add	r3, r0
 800236c:	3308      	adds	r3, #8
 800236e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HW_TS_Start+0x100>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002378:	2003      	movs	r0, #3
 800237a:	f000 fee0 	bl	800313e <HAL_NVIC_EnableIRQ>
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f383 8810 	msr	PRIMASK, r3
}
 8002388:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800238a:	bf00      	nop
}
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000984 	.word	0x20000984
 8002398:	20000a60 	.word	0x20000a60
 800239c:	20000a14 	.word	0x20000a14
 80023a0:	20000a15 	.word	0x20000a15

080023a4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	460b      	mov	r3, r1
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4798      	blx	r3

  return;
 80023b6:	bf00      	nop
}
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80023c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023ca:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d013      	beq.n	80023fe <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80023d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023da:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80023de:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80023e6:	e000      	b.n	80023ea <ITM_SendChar+0x2c>
    {
      __NOP();
 80023e8:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80023ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f9      	beq.n	80023e8 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80023f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80023fe:	687b      	ldr	r3, [r7, #4]
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_AHB1_GRP1_EnableClock>:
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800241a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4313      	orrs	r3, r2
 8002422:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4013      	ands	r3, r2
 800242e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002430:	68fb      	ldr	r3, [r7, #12]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_AHB2_GRP1_EnableClock>:
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800244c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4313      	orrs	r3, r2
 8002454:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800245a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4013      	ands	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
 8002480:	e009      	b.n	8002496 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	60ba      	str	r2, [r7, #8]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ff97 	bl	80023be <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3301      	adds	r3, #1
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	dbf1      	blt.n	8002482 <_write+0x12>
	}
	return len;
 800249e:	687b      	ldr	r3, [r7, #4]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */  HAL_Init();
 80024ac:	f000 fc6c 	bl	8002d88 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80024b0:	f7fe fe72 	bl	8001198 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024b4:	f000 f814 	bl	80024e0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80024b8:	f000 f86a 	bl	8002590 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80024bc:	f000 f888 	bl	80025d0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024c0:	f000 f936 	bl	8002730 <MX_GPIO_Init>
  MX_DMA_Init();
 80024c4:	f000 f922 	bl	800270c <MX_DMA_Init>
  MX_RF_Init();
 80024c8:	f000 f896 	bl	80025f8 <MX_RF_Init>
  MX_RTC_Init();
 80024cc:	f000 f89c 	bl	8002608 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80024d0:	f000 f8ce 	bl	8002670 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80024d4:	f7fe fe6e 	bl	80011b4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80024d8:	f7ff f92e 	bl	8001738 <MX_APPE_Process>
 80024dc:	e7fc      	b.n	80024d8 <main+0x30>
	...

080024e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b09a      	sub	sp, #104	; 0x68
 80024e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024e6:	f107 0320 	add.w	r3, r7, #32
 80024ea:	2248      	movs	r2, #72	; 0x48
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f007 ff66 	bl	800a3c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]
 8002500:	611a      	str	r2, [r3, #16]
 8002502:	615a      	str	r2, [r3, #20]
 8002504:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002506:	4b21      	ldr	r3, [pc, #132]	; (800258c <SystemClock_Config+0xac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800250e:	4a1f      	ldr	r2, [pc, #124]	; (800258c <SystemClock_Config+0xac>)
 8002510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <SystemClock_Config+0xac>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002522:	230b      	movs	r3, #11
 8002524:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800252c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002532:	2340      	movs	r3, #64	; 0x40
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002536:	2305      	movs	r3, #5
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800253a:	2300      	movs	r3, #0
 800253c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800253e:	f107 0320 	add.w	r3, r7, #32
 8002542:	4618      	mov	r0, r3
 8002544:	f001 fde6 	bl	8004114 <HAL_RCC_OscConfig>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800254e:	f000 f951 	bl	80027f4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002552:	236f      	movs	r3, #111	; 0x6f
 8002554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002556:	2302      	movs	r3, #2
 8002558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800255e:	2300      	movs	r3, #0
 8002560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	2101      	movs	r1, #1
 8002572:	4618      	mov	r0, r3
 8002574:	f002 f942 	bl	80047fc <HAL_RCC_ClockConfig>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800257e:	f000 f939 	bl	80027f4 <Error_Handler>
  }
}
 8002582:	bf00      	nop
 8002584:	3768      	adds	r7, #104	; 0x68
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	58000400 	.word	0x58000400

08002590 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b094      	sub	sp, #80	; 0x50
 8002594:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002596:	463b      	mov	r3, r7
 8002598:	2250      	movs	r2, #80	; 0x50
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f007 ff0f 	bl	800a3c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80025a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025a6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80025a8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80025ac:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80025ae:	2300      	movs	r3, #0
 80025b0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025b6:	463b      	mov	r3, r7
 80025b8:	4618      	mov	r0, r3
 80025ba:	f002 fd5c 	bl	8005076 <HAL_RCCEx_PeriphCLKConfig>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80025c4:	f000 f916 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80025c8:	bf00      	nop
 80025ca:	3750      	adds	r7, #80	; 0x50
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <MX_IPCC_Init+0x20>)
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <MX_IPCC_Init+0x24>)
 80025d8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80025da:	4805      	ldr	r0, [pc, #20]	; (80025f0 <MX_IPCC_Init+0x20>)
 80025dc:	f001 f980 	bl	80038e0 <HAL_IPCC_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80025e6:	f000 f905 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000a24 	.word	0x20000a24
 80025f4:	58000c00 	.word	0x58000c00

080025f8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
	...

08002608 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800260c:	4b16      	ldr	r3, [pc, #88]	; (8002668 <MX_RTC_Init+0x60>)
 800260e:	4a17      	ldr	r2, [pc, #92]	; (800266c <MX_RTC_Init+0x64>)
 8002610:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <MX_RTC_Init+0x60>)
 8002614:	2200      	movs	r2, #0
 8002616:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <MX_RTC_Init+0x60>)
 800261a:	220f      	movs	r2, #15
 800261c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <MX_RTC_Init+0x60>)
 8002620:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002624:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <MX_RTC_Init+0x60>)
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <MX_RTC_Init+0x60>)
 800262e:	2200      	movs	r2, #0
 8002630:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <MX_RTC_Init+0x60>)
 8002634:	2200      	movs	r2, #0
 8002636:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <MX_RTC_Init+0x60>)
 800263a:	2200      	movs	r2, #0
 800263c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800263e:	480a      	ldr	r0, [pc, #40]	; (8002668 <MX_RTC_Init+0x60>)
 8002640:	f002 ffa0 	bl	8005584 <HAL_RTC_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800264a:	f000 f8d3 	bl	80027f4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	4805      	ldr	r0, [pc, #20]	; (8002668 <MX_RTC_Init+0x60>)
 8002654:	f003 f896 	bl	8005784 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800265e:	f000 f8c9 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000a60 	.word	0x20000a60
 800266c:	40002800 	.word	0x40002800

08002670 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002674:	4b23      	ldr	r3, [pc, #140]	; (8002704 <MX_USART1_UART_Init+0x94>)
 8002676:	4a24      	ldr	r2, [pc, #144]	; (8002708 <MX_USART1_UART_Init+0x98>)
 8002678:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800267a:	4b22      	ldr	r3, [pc, #136]	; (8002704 <MX_USART1_UART_Init+0x94>)
 800267c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002680:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <MX_USART1_UART_Init+0x94>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002688:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <MX_USART1_UART_Init+0x94>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <MX_USART1_UART_Init+0x94>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <MX_USART1_UART_Init+0x94>)
 8002696:	220c      	movs	r2, #12
 8002698:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800269a:	4b1a      	ldr	r3, [pc, #104]	; (8002704 <MX_USART1_UART_Init+0x94>)
 800269c:	2200      	movs	r2, #0
 800269e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80026a0:	4b18      	ldr	r3, [pc, #96]	; (8002704 <MX_USART1_UART_Init+0x94>)
 80026a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026a6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <MX_USART1_UART_Init+0x94>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <MX_USART1_UART_Init+0x94>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026b4:	4b13      	ldr	r3, [pc, #76]	; (8002704 <MX_USART1_UART_Init+0x94>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026ba:	4812      	ldr	r0, [pc, #72]	; (8002704 <MX_USART1_UART_Init+0x94>)
 80026bc:	f003 f93e 	bl	800593c <HAL_UART_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80026c6:	f000 f895 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ca:	2100      	movs	r1, #0
 80026cc:	480d      	ldr	r0, [pc, #52]	; (8002704 <MX_USART1_UART_Init+0x94>)
 80026ce:	f003 fd9e 	bl	800620e <HAL_UARTEx_SetTxFifoThreshold>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80026d8:	f000 f88c 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026dc:	2100      	movs	r1, #0
 80026de:	4809      	ldr	r0, [pc, #36]	; (8002704 <MX_USART1_UART_Init+0x94>)
 80026e0:	f003 fdd3 	bl	800628a <HAL_UARTEx_SetRxFifoThreshold>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80026ea:	f000 f883 	bl	80027f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80026ee:	4805      	ldr	r0, [pc, #20]	; (8002704 <MX_USART1_UART_Init+0x94>)
 80026f0:	f003 fd54 	bl	800619c <HAL_UARTEx_DisableFifoMode>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80026fa:	f000 f87b 	bl	80027f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	20000a84 	.word	0x20000a84
 8002708:	40013800 	.word	0x40013800

0800270c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002710:	2004      	movs	r0, #4
 8002712:	f7ff fe7b 	bl	800240c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002716:	2002      	movs	r0, #2
 8002718:	f7ff fe78 	bl	800240c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2100      	movs	r1, #0
 8002720:	203a      	movs	r0, #58	; 0x3a
 8002722:	f000 fcf2 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002726:	203a      	movs	r0, #58	; 0x3a
 8002728:	f000 fd09 	bl	800313e <HAL_NVIC_EnableIRQ>

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}

08002730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002744:	2004      	movs	r0, #4
 8002746:	f7ff fe7a 	bl	800243e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	2002      	movs	r0, #2
 800274c:	f7ff fe77 	bl	800243e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002750:	2001      	movs	r0, #1
 8002752:	f7ff fe74 	bl	800243e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002756:	2008      	movs	r0, #8
 8002758:	f7ff fe71 	bl	800243e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800275c:	2200      	movs	r2, #0
 800275e:	2123      	movs	r1, #35	; 0x23
 8002760:	4821      	ldr	r0, [pc, #132]	; (80027e8 <MX_GPIO_Init+0xb8>)
 8002762:	f001 f85d 	bl	8003820 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002766:	2310      	movs	r3, #16
 8002768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800276a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800276e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002770:	2301      	movs	r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	4619      	mov	r1, r3
 8002778:	481c      	ldr	r0, [pc, #112]	; (80027ec <MX_GPIO_Init+0xbc>)
 800277a:	f000 fee1 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800277e:	2323      	movs	r3, #35	; 0x23
 8002780:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002782:	2301      	movs	r3, #1
 8002784:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	4619      	mov	r1, r3
 8002792:	4815      	ldr	r0, [pc, #84]	; (80027e8 <MX_GPIO_Init+0xb8>)
 8002794:	f000 fed4 	bl	8003540 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002798:	2303      	movs	r3, #3
 800279a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800279c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80027a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027a2:	2301      	movs	r3, #1
 80027a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4811      	ldr	r0, [pc, #68]	; (80027f0 <MX_GPIO_Init+0xc0>)
 80027ac:	f000 fec8 	bl	8003540 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	2006      	movs	r0, #6
 80027b6:	f000 fca8 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80027ba:	2006      	movs	r0, #6
 80027bc:	f000 fcbf 	bl	800313e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80027c0:	2200      	movs	r2, #0
 80027c2:	2100      	movs	r1, #0
 80027c4:	2007      	movs	r0, #7
 80027c6:	f000 fca0 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80027ca:	2007      	movs	r0, #7
 80027cc:	f000 fcb7 	bl	800313e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2100      	movs	r1, #0
 80027d4:	200a      	movs	r0, #10
 80027d6:	f000 fc98 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80027da:	200a      	movs	r0, #10
 80027dc:	f000 fcaf 	bl	800313e <HAL_NVIC_EnableIRQ>

}
 80027e0:	bf00      	nop
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	48000400 	.word	0x48000400
 80027ec:	48000800 	.word	0x48000800
 80027f0:	48000c00 	.word	0x48000c00

080027f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027f8:	b672      	cpsid	i
}
 80027fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027fc:	e7fe      	b.n	80027fc <Error_Handler+0x8>

080027fe <LL_RCC_EnableRTC>:
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800280e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002816:	bf00      	nop
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_AHB2_GRP1_EnableClock>:
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800282e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4313      	orrs	r3, r2
 8002836:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4013      	ands	r3, r2
 8002842:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002844:	68fb      	ldr	r3, [r7, #12]
}
 8002846:	bf00      	nop
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_AHB3_GRP1_EnableClock>:
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800285a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800285e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002860:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4313      	orrs	r3, r2
 8002868:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4013      	ands	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002876:	68fb      	ldr	r3, [r7, #12]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800288c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002890:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4313      	orrs	r3, r2
 800289a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80028be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4013      	ands	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80028ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028f0:	f7ff ffaf 	bl	8002852 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80028f4:	2200      	movs	r2, #0
 80028f6:	2100      	movs	r1, #0
 80028f8:	202e      	movs	r0, #46	; 0x2e
 80028fa:	f000 fc06 	bl	800310a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80028fe:	202e      	movs	r0, #46	; 0x2e
 8002900:	f000 fc1d 	bl	800313e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002904:	bf00      	nop
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0d      	ldr	r2, [pc, #52]	; (800294c <HAL_IPCC_MspInit+0x44>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d113      	bne.n	8002942 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800291a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800291e:	f7ff ff98 	bl	8002852 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	202c      	movs	r0, #44	; 0x2c
 8002928:	f000 fbef 	bl	800310a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800292c:	202c      	movs	r0, #44	; 0x2c
 800292e:	f000 fc06 	bl	800313e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	202d      	movs	r0, #45	; 0x2d
 8002938:	f000 fbe7 	bl	800310a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800293c:	202d      	movs	r0, #45	; 0x2d
 800293e:	f000 fbfe 	bl	800313e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	58000c00 	.word	0x58000c00

08002950 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b096      	sub	sp, #88	; 0x58
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002958:	f107 0308 	add.w	r3, r7, #8
 800295c:	2250      	movs	r2, #80	; 0x50
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f007 fd2d 	bl	800a3c0 <memset>
  if(hrtc->Instance==RTC)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a12      	ldr	r2, [pc, #72]	; (80029b4 <HAL_RTC_MspInit+0x64>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d11d      	bne.n	80029ac <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002970:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002974:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800297a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800297c:	f107 0308 	add.w	r3, r7, #8
 8002980:	4618      	mov	r0, r3
 8002982:	f002 fb78 	bl	8005076 <HAL_RCCEx_PeriphCLKConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800298c:	f7ff ff32 	bl	80027f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002990:	f7ff ff35 	bl	80027fe <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002994:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002998:	f7ff ff74 	bl	8002884 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800299c:	2200      	movs	r2, #0
 800299e:	2100      	movs	r1, #0
 80029a0:	2003      	movs	r0, #3
 80029a2:	f000 fbb2 	bl	800310a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80029a6:	2003      	movs	r0, #3
 80029a8:	f000 fbc9 	bl	800313e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80029ac:	bf00      	nop
 80029ae:	3758      	adds	r7, #88	; 0x58
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40002800 	.word	0x40002800

080029b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b09c      	sub	sp, #112	; 0x70
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	2250      	movs	r2, #80	; 0x50
 80029d6:	2100      	movs	r1, #0
 80029d8:	4618      	mov	r0, r3
 80029da:	f007 fcf1 	bl	800a3c0 <memset>
  if(huart->Instance==USART1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2a      	ldr	r2, [pc, #168]	; (8002a8c <HAL_UART_MspInit+0xd4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d14d      	bne.n	8002a84 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029e8:	2301      	movs	r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029f0:	f107 030c 	add.w	r3, r7, #12
 80029f4:	4618      	mov	r0, r3
 80029f6:	f002 fb3e 	bl	8005076 <HAL_RCCEx_PeriphCLKConfig>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a00:	f7ff fef8 	bl	80027f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a08:	f7ff ff55 	bl	80028b6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f7ff ff07 	bl	8002820 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a12:	23c0      	movs	r3, #192	; 0xc0
 8002a14:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a22:	2307      	movs	r3, #7
 8002a24:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4818      	ldr	r0, [pc, #96]	; (8002a90 <HAL_UART_MspInit+0xd8>)
 8002a2e:	f000 fd87 	bl	8003540 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002a32:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a34:	4a18      	ldr	r2, [pc, #96]	; (8002a98 <HAL_UART_MspInit+0xe0>)
 8002a36:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002a38:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a40:	2210      	movs	r2, #16
 8002a42:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a44:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a68:	480a      	ldr	r0, [pc, #40]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a6a:	f000 fbad 	bl	80031c8 <HAL_DMA_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002a74:	f7ff febe 	bl	80027f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a06      	ldr	r2, [pc, #24]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a7c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002a7e:	4a05      	ldr	r2, [pc, #20]	; (8002a94 <HAL_UART_MspInit+0xdc>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a84:	bf00      	nop
 8002a86:	3770      	adds	r7, #112	; 0x70
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	48000400 	.word	0x48000400
 8002a94:	20000b18 	.word	0x20000b18
 8002a98:	40020444 	.word	0x40020444

08002a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <NMI_Handler+0x4>

08002aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aa6:	e7fe      	b.n	8002aa6 <HardFault_Handler+0x4>

08002aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aac:	e7fe      	b.n	8002aac <MemManage_Handler+0x4>

08002aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab2:	e7fe      	b.n	8002ab2 <BusFault_Handler+0x4>

08002ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <UsageFault_Handler+0x4>

08002aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae8:	f000 f9a8 	bl	8002e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002af4:	f7ff f9aa 	bl	8001e4c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}

08002afc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8002b00:	2001      	movs	r0, #1
 8002b02:	f000 fea5 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8002b0e:	2002      	movs	r0, #2
 8002b10:	f000 fe9e 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002b1c:	2010      	movs	r0, #16
 8002b1e:	f000 fe97 	bl	8003850 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002b2a:	f007 f84d 	bl	8009bc8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002b36:	f007 f87f 	bl	8009c38 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002b42:	f000 fea9 	bl	8003898 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002b50:	4802      	ldr	r0, [pc, #8]	; (8002b5c <DMA2_Channel4_IRQHandler+0x10>)
 8002b52:	f000 fbe1 	bl	8003318 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000b18 	.word	0x20000b18

08002b60 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	e00a      	b.n	8002b88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b72:	f3af 8000 	nop.w
 8002b76:	4601      	mov	r1, r0
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	60ba      	str	r2, [r7, #8]
 8002b7e:	b2ca      	uxtb	r2, r1
 8002b80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	3301      	adds	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	dbf0      	blt.n	8002b72 <_read+0x12>
  }

  return len;
 8002b90:	687b      	ldr	r3, [r7, #4]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bc2:	605a      	str	r2, [r3, #4]
  return 0;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <_isatty>:

int _isatty(int file)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bda:	2301      	movs	r3, #1
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <_sbrk+0x5c>)
 8002c0e:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <_sbrk+0x60>)
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <_sbrk+0x64>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <_sbrk+0x64>)
 8002c22:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <_sbrk+0x68>)
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <_sbrk+0x64>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d207      	bcs.n	8002c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c34:	f007 fb8c 	bl	800a350 <__errno>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	220c      	movs	r2, #12
 8002c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c42:	e009      	b.n	8002c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c44:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <_sbrk+0x64>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <_sbrk+0x64>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	4a05      	ldr	r2, [pc, #20]	; (8002c68 <_sbrk+0x64>)
 8002c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c56:	68fb      	ldr	r3, [r7, #12]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20030000 	.word	0x20030000
 8002c64:	00000400 	.word	0x00000400
 8002c68:	20000b78 	.word	0x20000b78
 8002c6c:	20001038 	.word	0x20001038

08002c70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <SystemInit+0x98>)
 8002c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7a:	4a23      	ldr	r2, [pc, #140]	; (8002d08 <SystemInit+0x98>)
 8002c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002c9c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <SystemInit+0x9c>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cba:	f023 0305 	bic.w	r3, r3, #5
 8002cbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cda:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <SystemInit+0xa0>)
 8002cdc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce2:	4a0b      	ldr	r2, [pc, #44]	; (8002d10 <SystemInit+0xa0>)
 8002ce4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	619a      	str	r2, [r3, #24]
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00
 8002d0c:	faf6fefb 	.word	0xfaf6fefb
 8002d10:	22041000 	.word	0x22041000

08002d14 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002d14:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d16:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d18:	3304      	adds	r3, #4

08002d1a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d1a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002d1e:	d3f9      	bcc.n	8002d14 <CopyDataInit>
  bx lr
 8002d20:	4770      	bx	lr

08002d22 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002d22:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002d24:	3004      	adds	r0, #4

08002d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002d26:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002d28:	d3fb      	bcc.n	8002d22 <FillZerobss>
  bx lr
 8002d2a:	4770      	bx	lr

08002d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d2c:	480c      	ldr	r0, [pc, #48]	; (8002d60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d30:	f7ff ff9e 	bl	8002c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002d34:	480b      	ldr	r0, [pc, #44]	; (8002d64 <LoopForever+0x6>)
 8002d36:	490c      	ldr	r1, [pc, #48]	; (8002d68 <LoopForever+0xa>)
 8002d38:	4a0c      	ldr	r2, [pc, #48]	; (8002d6c <LoopForever+0xe>)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f7ff ffed 	bl	8002d1a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002d40:	480b      	ldr	r0, [pc, #44]	; (8002d70 <LoopForever+0x12>)
 8002d42:	490c      	ldr	r1, [pc, #48]	; (8002d74 <LoopForever+0x16>)
 8002d44:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <LoopForever+0x1a>)
 8002d46:	2300      	movs	r3, #0
 8002d48:	f7ff ffe7 	bl	8002d1a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002d4c:	480b      	ldr	r0, [pc, #44]	; (8002d7c <LoopForever+0x1e>)
 8002d4e:	490c      	ldr	r1, [pc, #48]	; (8002d80 <LoopForever+0x22>)
 8002d50:	2300      	movs	r3, #0
 8002d52:	f7ff ffe8 	bl	8002d26 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d56:	f007 fb01 	bl	800a35c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002d5a:	f7ff fba5 	bl	80024a8 <main>

08002d5e <LoopForever>:

LoopForever:
  b LoopForever
 8002d5e:	e7fe      	b.n	8002d5e <LoopForever>
  ldr   r0, =_estack
 8002d60:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002d64:	20000008 	.word	0x20000008
 8002d68:	20000098 	.word	0x20000098
 8002d6c:	0800d938 	.word	0x0800d938
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002d70:	200301e3 	.word	0x200301e3
 8002d74:	200301e3 	.word	0x200301e3
 8002d78:	0800e291 	.word	0x0800e291
  INIT_BSS _sbss, _ebss
 8002d7c:	20000968 	.word	0x20000968
 8002d80:	20001034 	.word	0x20001034

08002d84 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d84:	e7fe      	b.n	8002d84 <ADC1_IRQHandler>
	...

08002d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_Init+0x3c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a0b      	ldr	r2, [pc, #44]	; (8002dc4 <HAL_Init+0x3c>)
 8002d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9e:	2003      	movs	r0, #3
 8002da0:	f000 f9a8 	bl	80030f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002da4:	2000      	movs	r0, #0
 8002da6:	f000 f80f 	bl	8002dc8 <HAL_InitTick>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	71fb      	strb	r3, [r7, #7]
 8002db4:	e001      	b.n	8002dba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002db6:	f7ff fd97 	bl	80028e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dba:	79fb      	ldrb	r3, [r7, #7]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	58004000 	.word	0x58004000

08002dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <HAL_InitTick+0x6c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d024      	beq.n	8002e26 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ddc:	f001 feba 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8002de0:	4602      	mov	r2, r0
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <HAL_InitTick+0x6c>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	4619      	mov	r1, r3
 8002de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dec:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f9be 	bl	8003176 <HAL_SYSTICK_Config>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10f      	bne.n	8002e20 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b0f      	cmp	r3, #15
 8002e04:	d809      	bhi.n	8002e1a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e06:	2200      	movs	r2, #0
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0e:	f000 f97c 	bl	800310a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e12:	4a09      	ldr	r2, [pc, #36]	; (8002e38 <HAL_InitTick+0x70>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6013      	str	r3, [r2, #0]
 8002e18:	e007      	b.n	8002e2a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	e004      	b.n	8002e2a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	e001      	b.n	8002e2a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000010 	.word	0x20000010
 8002e38:	2000000c 	.word	0x2000000c

08002e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_IncTick+0x20>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_IncTick+0x24>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <HAL_IncTick+0x24>)
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000010 	.word	0x20000010
 8002e60:	20000b7c 	.word	0x20000b7c

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_GetTick+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000b7c 	.word	0x20000b7c

08002e7c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_GetTickPrio+0x14>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	2000000c 	.word	0x2000000c

08002e94 <__NVIC_SetPriorityGrouping>:
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	60d3      	str	r3, [r2, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <__NVIC_GetPriorityGrouping>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	0a1b      	lsrs	r3, r3, #8
 8002ee6:	f003 0307 	and.w	r3, r3, #7
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <__NVIC_EnableIRQ>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	db0b      	blt.n	8002f22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4907      	ldr	r1, [pc, #28]	; (8002f30 <__NVIC_EnableIRQ+0x38>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	2001      	movs	r0, #1
 8002f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000e100 	.word	0xe000e100

08002f34 <__NVIC_DisableIRQ>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	db12      	blt.n	8002f6c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f46:	79fb      	ldrb	r3, [r7, #7]
 8002f48:	f003 021f 	and.w	r2, r3, #31
 8002f4c:	490a      	ldr	r1, [pc, #40]	; (8002f78 <__NVIC_DisableIRQ+0x44>)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	2001      	movs	r0, #1
 8002f56:	fa00 f202 	lsl.w	r2, r0, r2
 8002f5a:	3320      	adds	r3, #32
 8002f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002f60:	f3bf 8f4f 	dsb	sy
}
 8002f64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002f66:	f3bf 8f6f 	isb	sy
}
 8002f6a:	bf00      	nop
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100

08002f7c <__NVIC_SetPendingIRQ>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db0c      	blt.n	8002fa8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4907      	ldr	r1, [pc, #28]	; (8002fb4 <__NVIC_SetPendingIRQ+0x38>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002fa2:	3340      	adds	r3, #64	; 0x40
 8002fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100

08002fb8 <__NVIC_ClearPendingIRQ>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	db0c      	blt.n	8002fe4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	f003 021f 	and.w	r2, r3, #31
 8002fd0:	4907      	ldr	r1, [pc, #28]	; (8002ff0 <__NVIC_ClearPendingIRQ+0x38>)
 8002fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd6:	095b      	lsrs	r3, r3, #5
 8002fd8:	2001      	movs	r0, #1
 8002fda:	fa00 f202 	lsl.w	r2, r0, r2
 8002fde:	3360      	adds	r3, #96	; 0x60
 8002fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	e000e100 	.word	0xe000e100

08002ff4 <__NVIC_SetPriority>:
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	6039      	str	r1, [r7, #0]
 8002ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003004:	2b00      	cmp	r3, #0
 8003006:	db0a      	blt.n	800301e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	b2da      	uxtb	r2, r3
 800300c:	490c      	ldr	r1, [pc, #48]	; (8003040 <__NVIC_SetPriority+0x4c>)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	0112      	lsls	r2, r2, #4
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	440b      	add	r3, r1
 8003018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800301c:	e00a      	b.n	8003034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	b2da      	uxtb	r2, r3
 8003022:	4908      	ldr	r1, [pc, #32]	; (8003044 <__NVIC_SetPriority+0x50>)
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	3b04      	subs	r3, #4
 800302c:	0112      	lsls	r2, r2, #4
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	440b      	add	r3, r1
 8003032:	761a      	strb	r2, [r3, #24]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000e100 	.word	0xe000e100
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <NVIC_EncodePriority>:
{
 8003048:	b480      	push	{r7}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f1c3 0307 	rsb	r3, r3, #7
 8003062:	2b04      	cmp	r3, #4
 8003064:	bf28      	it	cs
 8003066:	2304      	movcs	r3, #4
 8003068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3304      	adds	r3, #4
 800306e:	2b06      	cmp	r3, #6
 8003070:	d902      	bls.n	8003078 <NVIC_EncodePriority+0x30>
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3b03      	subs	r3, #3
 8003076:	e000      	b.n	800307a <NVIC_EncodePriority+0x32>
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800307c:	f04f 32ff 	mov.w	r2, #4294967295
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	401a      	ands	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003090:	f04f 31ff 	mov.w	r1, #4294967295
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	43d9      	mvns	r1, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	4313      	orrs	r3, r2
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <SysTick_Config>:
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c0:	d301      	bcc.n	80030c6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80030c2:	2301      	movs	r3, #1
 80030c4:	e00f      	b.n	80030e6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <SysTick_Config+0x40>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ce:	210f      	movs	r1, #15
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	f7ff ff8e 	bl	8002ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <SysTick_Config+0x40>)
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <SysTick_Config+0x40>)
 80030e0:	2207      	movs	r2, #7
 80030e2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010

080030f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fec9 	bl	8002e94 <__NVIC_SetPriorityGrouping>
}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	4603      	mov	r3, r0
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003118:	f7ff fee0 	bl	8002edc <__NVIC_GetPriorityGrouping>
 800311c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	6978      	ldr	r0, [r7, #20]
 8003124:	f7ff ff90 	bl	8003048 <NVIC_EncodePriority>
 8003128:	4602      	mov	r2, r0
 800312a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff5f 	bl	8002ff4 <__NVIC_SetPriority>
}
 8003136:	bf00      	nop
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fed3 	bl	8002ef8 <__NVIC_EnableIRQ>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fee3 	bl	8002f34 <__NVIC_DisableIRQ>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ff96 	bl	80030b0 <SysTick_Config>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff feed 	bl	8002f7c <__NVIC_SetPendingIRQ>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fefd 	bl	8002fb8 <__NVIC_ClearPendingIRQ>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e08e      	b.n	80032f8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	4b47      	ldr	r3, [pc, #284]	; (8003300 <HAL_DMA_Init+0x138>)
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d80f      	bhi.n	8003206 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b45      	ldr	r3, [pc, #276]	; (8003304 <HAL_DMA_Init+0x13c>)
 80031ee:	4413      	add	r3, r2
 80031f0:	4a45      	ldr	r2, [pc, #276]	; (8003308 <HAL_DMA_Init+0x140>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	091b      	lsrs	r3, r3, #4
 80031f8:	009a      	lsls	r2, r3, #2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a42      	ldr	r2, [pc, #264]	; (800330c <HAL_DMA_Init+0x144>)
 8003202:	641a      	str	r2, [r3, #64]	; 0x40
 8003204:	e00e      	b.n	8003224 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_DMA_Init+0x148>)
 800320e:	4413      	add	r3, r2
 8003210:	4a3d      	ldr	r2, [pc, #244]	; (8003308 <HAL_DMA_Init+0x140>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	009a      	lsls	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <HAL_DMA_Init+0x14c>)
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f8fe 	bl	8003478 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003284:	d102      	bne.n	800328c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003294:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003298:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <HAL_DMA_Init+0x106>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d80c      	bhi.n	80032ce <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f91d 	bl	80034f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	e008      	b.n	80032e0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40020407 	.word	0x40020407
 8003304:	bffdfff8 	.word	0xbffdfff8
 8003308:	cccccccd 	.word	0xcccccccd
 800330c:	40020000 	.word	0x40020000
 8003310:	bffdfbf8 	.word	0xbffdfbf8
 8003314:	40020400 	.word	0x40020400

08003318 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003334:	f003 031c 	and.w	r3, r3, #28
 8003338:	2204      	movs	r2, #4
 800333a:	409a      	lsls	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4013      	ands	r3, r2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d026      	beq.n	8003392 <HAL_DMA_IRQHandler+0x7a>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d021      	beq.n	8003392 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	2b00      	cmp	r3, #0
 800335a:	d107      	bne.n	800336c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0204 	bic.w	r2, r2, #4
 800336a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f003 021c 	and.w	r2, r3, #28
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	2104      	movs	r1, #4
 800337a:	fa01 f202 	lsl.w	r2, r1, r2
 800337e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	2b00      	cmp	r3, #0
 8003386:	d071      	beq.n	800346c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003390:	e06c      	b.n	800346c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f003 031c 	and.w	r3, r3, #28
 800339a:	2202      	movs	r2, #2
 800339c:	409a      	lsls	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d02e      	beq.n	8003404 <HAL_DMA_IRQHandler+0xec>
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d029      	beq.n	8003404 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 020a 	bic.w	r2, r2, #10
 80033cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f003 021c 	and.w	r2, r3, #28
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2102      	movs	r1, #2
 80033e4:	fa01 f202 	lsl.w	r2, r1, r2
 80033e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d038      	beq.n	800346c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003402:	e033      	b.n	800346c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f003 031c 	and.w	r3, r3, #28
 800340c:	2208      	movs	r2, #8
 800340e:	409a      	lsls	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d02a      	beq.n	800346e <HAL_DMA_IRQHandler+0x156>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d025      	beq.n	800346e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 020e 	bic.w	r2, r2, #14
 8003430:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f003 021c 	and.w	r2, r3, #28
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	2b00      	cmp	r3, #0
 8003462:	d004      	beq.n	800346e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800346c:	bf00      	nop
 800346e:	bf00      	nop
}
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	4b17      	ldr	r3, [pc, #92]	; (80034e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003488:	429a      	cmp	r2, r3
 800348a:	d80a      	bhi.n	80034a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003490:	089b      	lsrs	r3, r3, #2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003498:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6493      	str	r3, [r2, #72]	; 0x48
 80034a0:	e007      	b.n	80034b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	089b      	lsrs	r3, r3, #2
 80034a8:	009a      	lsls	r2, r3, #2
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80034ac:	4413      	add	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	3b08      	subs	r3, #8
 80034ba:	4a0c      	ldr	r2, [pc, #48]	; (80034ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80034c8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2201      	movs	r2, #1
 80034d2:	409a      	lsls	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40020407 	.word	0x40020407
 80034e8:	4002081c 	.word	0x4002081c
 80034ec:	cccccccd 	.word	0xcccccccd
 80034f0:	40020880 	.word	0x40020880

080034f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003504:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	461a      	mov	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003518:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	3b01      	subs	r3, #1
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2201      	movs	r2, #1
 8003524:	409a      	lsls	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	1000823f 	.word	0x1000823f
 800353c:	40020940 	.word	0x40020940

08003540 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800354e:	e14c      	b.n	80037ea <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	2101      	movs	r1, #1
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fa01 f303 	lsl.w	r3, r1, r3
 800355c:	4013      	ands	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 813e 	beq.w	80037e4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d005      	beq.n	8003580 <HAL_GPIO_Init+0x40>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 0303 	and.w	r3, r3, #3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d130      	bne.n	80035e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	2203      	movs	r2, #3
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035b6:	2201      	movs	r2, #1
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	091b      	lsrs	r3, r3, #4
 80035cc:	f003 0201 	and.w	r2, r3, #1
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d017      	beq.n	800361e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	2203      	movs	r2, #3
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d123      	bne.n	8003672 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	08da      	lsrs	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3208      	adds	r2, #8
 8003632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003636:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	220f      	movs	r2, #15
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	691a      	ldr	r2, [r3, #16]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	08da      	lsrs	r2, r3, #3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3208      	adds	r2, #8
 800366c:	6939      	ldr	r1, [r7, #16]
 800366e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	2203      	movs	r2, #3
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4013      	ands	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f003 0203 	and.w	r2, r3, #3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8098 	beq.w	80037e4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80036b4:	4a54      	ldr	r2, [pc, #336]	; (8003808 <HAL_GPIO_Init+0x2c8>)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	3302      	adds	r3, #2
 80036bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	220f      	movs	r2, #15
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036de:	d019      	beq.n	8003714 <HAL_GPIO_Init+0x1d4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a4a      	ldr	r2, [pc, #296]	; (800380c <HAL_GPIO_Init+0x2cc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d013      	beq.n	8003710 <HAL_GPIO_Init+0x1d0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a49      	ldr	r2, [pc, #292]	; (8003810 <HAL_GPIO_Init+0x2d0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00d      	beq.n	800370c <HAL_GPIO_Init+0x1cc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a48      	ldr	r2, [pc, #288]	; (8003814 <HAL_GPIO_Init+0x2d4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d007      	beq.n	8003708 <HAL_GPIO_Init+0x1c8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a47      	ldr	r2, [pc, #284]	; (8003818 <HAL_GPIO_Init+0x2d8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <HAL_GPIO_Init+0x1c4>
 8003700:	2304      	movs	r3, #4
 8003702:	e008      	b.n	8003716 <HAL_GPIO_Init+0x1d6>
 8003704:	2307      	movs	r3, #7
 8003706:	e006      	b.n	8003716 <HAL_GPIO_Init+0x1d6>
 8003708:	2303      	movs	r3, #3
 800370a:	e004      	b.n	8003716 <HAL_GPIO_Init+0x1d6>
 800370c:	2302      	movs	r3, #2
 800370e:	e002      	b.n	8003716 <HAL_GPIO_Init+0x1d6>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <HAL_GPIO_Init+0x1d6>
 8003714:	2300      	movs	r3, #0
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	f002 0203 	and.w	r2, r2, #3
 800371c:	0092      	lsls	r2, r2, #2
 800371e:	4093      	lsls	r3, r2
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003726:	4938      	ldr	r1, [pc, #224]	; (8003808 <HAL_GPIO_Init+0x2c8>)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	3302      	adds	r3, #2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003734:	4b39      	ldr	r3, [pc, #228]	; (800381c <HAL_GPIO_Init+0x2dc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	43db      	mvns	r3, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003758:	4a30      	ldr	r2, [pc, #192]	; (800381c <HAL_GPIO_Init+0x2dc>)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800375e:	4b2f      	ldr	r3, [pc, #188]	; (800381c <HAL_GPIO_Init+0x2dc>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	43db      	mvns	r3, r3
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4013      	ands	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003782:	4a26      	ldr	r2, [pc, #152]	; (800381c <HAL_GPIO_Init+0x2dc>)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003788:	4b24      	ldr	r3, [pc, #144]	; (800381c <HAL_GPIO_Init+0x2dc>)
 800378a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800378e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	43db      	mvns	r3, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037ae:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_GPIO_Init+0x2dc>)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_GPIO_Init+0x2dc>)
 80037b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	43db      	mvns	r3, r3
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037dc:	4a0f      	ldr	r2, [pc, #60]	; (800381c <HAL_GPIO_Init+0x2dc>)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	3301      	adds	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f47f aeab 	bne.w	8003550 <HAL_GPIO_Init+0x10>
  }
}
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	40010000 	.word	0x40010000
 800380c:	48000400 	.word	0x48000400
 8003810:	48000800 	.word	0x48000800
 8003814:	48000c00 	.word	0x48000c00
 8003818:	48001000 	.word	0x48001000
 800381c:	58000800 	.word	0x58000800

08003820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
 800382c:	4613      	mov	r3, r2
 800382e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003830:	787b      	ldrb	r3, [r7, #1]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800383c:	e002      	b.n	8003844 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800383e:	887a      	ldrh	r2, [r7, #2]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	4013      	ands	r3, r2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d006      	beq.n	8003874 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003866:	4a05      	ldr	r2, [pc, #20]	; (800387c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f806 	bl	8003880 <HAL_GPIO_EXTI_Callback>
  }
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	58000800 	.word	0x58000800

08003880 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800389e:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <HAL_HSEM_IRQHandler+0x30>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80038a4:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <HAL_HSEM_IRQHandler+0x30>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	4906      	ldr	r1, [pc, #24]	; (80038c8 <HAL_HSEM_IRQHandler+0x30>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80038b2:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <HAL_HSEM_IRQHandler+0x30>)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f807 	bl	80038cc <HAL_HSEM_FreeCallback>
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	58001500 	.word	0x58001500

080038cc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d01e      	beq.n	8003930 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <HAL_IPCC_Init+0x60>)
 80038f4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d102      	bne.n	8003908 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff f800 	bl	8002908 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003908:	68b8      	ldr	r0, [r7, #8]
 800390a:	f000 f85b 	bl	80039c4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f82c 	bl	8003978 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800392e:	e001      	b.n	8003934 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	58000c00 	.word	0x58000c00

08003944 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	4613      	mov	r3, r2
 8003950:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800395e:	b480      	push	{r7}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	60b9      	str	r1, [r7, #8]
 8003968:	4613      	mov	r3, r2
 800396a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e00f      	b.n	80039a6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	4a0b      	ldr	r2, [pc, #44]	; (80039bc <IPCC_SetDefaultCallbacks+0x44>)
 8003990:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3306      	adds	r3, #6
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	4a08      	ldr	r2, [pc, #32]	; (80039c0 <IPCC_SetDefaultCallbacks+0x48>)
 800399e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	3301      	adds	r3, #1
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b05      	cmp	r3, #5
 80039aa:	d9ec      	bls.n	8003986 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	08003945 	.word	0x08003945
 80039c0:	0800395f 	.word	0x0800395f

080039c4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80039d8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	223f      	movs	r2, #63	; 0x3f
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039fa:	6013      	str	r3, [r2, #0]
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	58000400 	.word	0x58000400

08003a0c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	58000400 	.word	0x58000400

08003a28 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a3a:	d101      	bne.n	8003a40 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <LL_RCC_HSE_Enable>:
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <LL_RCC_HSE_Disable>:
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <LL_RCC_HSE_IsReady>:
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a9a:	d101      	bne.n	8003aa0 <LL_RCC_HSE_IsReady+0x18>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <LL_RCC_HSE_IsReady+0x1a>
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_RCC_HSI_Enable>:
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003abe:	6013      	str	r3, [r2, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <LL_RCC_HSI_Disable>:
{
 8003aca:	b480      	push	{r7}
 8003acc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003adc:	6013      	str	r3, [r2, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_RCC_HSI_IsReady>:
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003afa:	d101      	bne.n	8003b00 <LL_RCC_HSI_IsReady+0x18>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <LL_RCC_HSI_IsReady+0x1a>
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <LL_RCC_HSI_SetCalibTrimming>:
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	061b      	lsls	r3, r3, #24
 8003b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b26:	4313      	orrs	r3, r2
 8003b28:	604b      	str	r3, [r1, #4]
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LL_RCC_HSI48_Enable>:
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_RCC_HSI48_Disable>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <LL_RCC_HSI48_IsReady>:
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d101      	bne.n	8003b92 <LL_RCC_HSI48_IsReady+0x18>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <LL_RCC_HSI48_IsReady+0x1a>
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_RCC_LSE_Enable>:
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bb6:	bf00      	nop
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_RCC_LSE_Disable>:
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_RCC_LSE_EnableBypass>:
{
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bfa:	bf00      	nop
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_RCC_LSE_DisableBypass>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c14:	f023 0304 	bic.w	r3, r3, #4
 8003c18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c1c:	bf00      	nop
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_RCC_LSE_IsReady>:
{
 8003c26:	b480      	push	{r7}
 8003c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d101      	bne.n	8003c3e <LL_RCC_LSE_IsReady+0x18>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_RCC_LSE_IsReady+0x1a>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <LL_RCC_LSI1_Enable>:
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c62:	bf00      	nop
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_RCC_LSI1_Disable>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <LL_RCC_LSI1_IsReady>:
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d101      	bne.n	8003ca6 <LL_RCC_LSI1_IsReady+0x18>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <LL_RCC_LSI1_IsReady+0x1a>
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <LL_RCC_LSI2_Enable>:
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cc2:	f043 0304 	orr.w	r3, r3, #4
 8003cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cca:	bf00      	nop
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <LL_RCC_LSI2_Disable>:
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <LL_RCC_LSI2_IsReady>:
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d101      	bne.n	8003d0e <LL_RCC_LSI2_IsReady+0x18>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e000      	b.n	8003d10 <LL_RCC_LSI2_IsReady+0x1a>
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <LL_RCC_LSI2_SetTrimming>:
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <LL_RCC_MSI_Enable>:
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6013      	str	r3, [r2, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <LL_RCC_MSI_Disable>:
{
 8003d66:	b480      	push	{r7}
 8003d68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6013      	str	r3, [r2, #0]
}
 8003d7a:	bf00      	nop
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_RCC_MSI_IsReady>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d101      	bne.n	8003d9a <LL_RCC_MSI_IsReady+0x16>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <LL_RCC_MSI_IsReady+0x18>
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <LL_RCC_MSI_SetRange>:
{
 8003da6:	b480      	push	{r7}
 8003da8:	b083      	sub	sp, #12
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	600b      	str	r3, [r1, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <LL_RCC_MSI_GetRange>:
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dde:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2bb0      	cmp	r3, #176	; 0xb0
 8003de4:	d901      	bls.n	8003dea <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003de6:	23b0      	movs	r3, #176	; 0xb0
 8003de8:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003dea:	687b      	ldr	r3, [r7, #4]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	021b      	lsls	r3, r3, #8
 8003e0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e12:	4313      	orrs	r3, r2
 8003e14:	604b      	str	r3, [r1, #4]
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <LL_RCC_SetSysClkSource>:
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f023 0203 	bic.w	r2, r3, #3
 8003e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_RCC_GetSysClkSource>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LL_RCC_SetAHBPrescaler>:
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	608b      	str	r3, [r1, #8]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_C2_RCC_SetAHBPrescaler>:
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e96:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <LL_RCC_SetAHB4Prescaler>:
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ec6:	f023 020f 	bic.w	r2, r3, #15
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_RCC_SetAPB1Prescaler>:
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_RCC_SetAPB2Prescaler>:
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	608b      	str	r3, [r1, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_RCC_GetAHBPrescaler>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <LL_RCC_GetAHB4Prescaler>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_RCC_GetAPB1Prescaler>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_RCC_GetAPB2Prescaler>:
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <LL_RCC_PLL_Enable>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003faa:	6013      	str	r3, [r2, #0]
}
 8003fac:	bf00      	nop
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <LL_RCC_PLL_Disable>:
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fc8:	6013      	str	r3, [r2, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_RCC_PLL_IsReady>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fe6:	d101      	bne.n	8003fec <LL_RCC_PLL_IsReady+0x18>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <LL_RCC_PLL_IsReady+0x1a>
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_RCC_PLL_GetN>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <LL_RCC_PLL_GetR>:
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004020:	4618      	mov	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <LL_RCC_PLL_GetDivider>:
{
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <LL_RCC_PLL_GetMainSource>:
{
 8004042:	b480      	push	{r7}
 8004044:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f003 0303 	and.w	r3, r3, #3
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <LL_RCC_IsActiveFlag_HPRE>:
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800405e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406c:	d101      	bne.n	8004072 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800407e:	b480      	push	{r7}
 8004080:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004086:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004092:	d101      	bne.n	8004098 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b8:	d101      	bne.n	80040be <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e000      	b.n	80040c0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_RCC_IsActiveFlag_PPRE1>:
{
 80040ca:	b480      	push	{r7}
 80040cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040dc:	d101      	bne.n	80040e2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <LL_RCC_IsActiveFlag_PPRE2>:
{
 80040ee:	b480      	push	{r7}
 80040f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80040f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004100:	d101      	bne.n	8004106 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b08d      	sub	sp, #52	; 0x34
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e363      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 808d 	beq.w	800424e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004134:	f7ff fe89 	bl	8003e4a <LL_RCC_GetSysClkSource>
 8004138:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800413a:	f7ff ff82 	bl	8004042 <LL_RCC_PLL_GetMainSource>
 800413e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_RCC_OscConfig+0x3e>
 8004146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004148:	2b0c      	cmp	r3, #12
 800414a:	d147      	bne.n	80041dc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	2b01      	cmp	r3, #1
 8004150:	d144      	bne.n	80041dc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e347      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004162:	f7ff fe34 	bl	8003dce <LL_RCC_MSI_GetRange>
 8004166:	4603      	mov	r3, r0
 8004168:	429c      	cmp	r4, r3
 800416a:	d914      	bls.n	8004196 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fd2f 	bl	8004bd4 <RCC_SetFlashLatencyFromMSIRange>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e336      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fe0e 	bl	8003da6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fe32 	bl	8003df8 <LL_RCC_MSI_SetCalibTrimming>
 8004194:	e013      	b.n	80041be <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fe03 	bl	8003da6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fe27 	bl	8003df8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fd10 	bl	8004bd4 <RCC_SetFlashLatencyFromMSIRange>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e317      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80041be:	f000 fcc9 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 80041c2:	4603      	mov	r3, r0
 80041c4:	4aa4      	ldr	r2, [pc, #656]	; (8004458 <HAL_RCC_OscConfig+0x344>)
 80041c6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041c8:	4ba4      	ldr	r3, [pc, #656]	; (800445c <HAL_RCC_OscConfig+0x348>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fe fdfb 	bl	8002dc8 <HAL_InitTick>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d039      	beq.n	800424c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e308      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01e      	beq.n	8004222 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041e4:	f7ff fdb0 	bl	8003d48 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041e8:	f7fe fe3c 	bl	8002e64 <HAL_GetTick>
 80041ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f0:	f7fe fe38 	bl	8002e64 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e2f5      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004202:	f7ff fdbf 	bl	8003d84 <LL_RCC_MSI_IsReady>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f1      	beq.n	80041f0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fdc8 	bl	8003da6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fdec 	bl	8003df8 <LL_RCC_MSI_SetCalibTrimming>
 8004220:	e015      	b.n	800424e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004222:	f7ff fda0 	bl	8003d66 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004226:	f7fe fe1d 	bl	8002e64 <HAL_GetTick>
 800422a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800422e:	f7fe fe19 	bl	8002e64 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e2d6      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004240:	f7ff fda0 	bl	8003d84 <LL_RCC_MSI_IsReady>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f1      	bne.n	800422e <HAL_RCC_OscConfig+0x11a>
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800424c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d047      	beq.n	80042ea <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425a:	f7ff fdf6 	bl	8003e4a <LL_RCC_GetSysClkSource>
 800425e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004260:	f7ff feef 	bl	8004042 <LL_RCC_PLL_GetMainSource>
 8004264:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d005      	beq.n	8004278 <HAL_RCC_OscConfig+0x164>
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	2b0c      	cmp	r3, #12
 8004270:	d108      	bne.n	8004284 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b03      	cmp	r3, #3
 8004276:	d105      	bne.n	8004284 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d134      	bne.n	80042ea <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e2b4      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d102      	bne.n	8004294 <HAL_RCC_OscConfig+0x180>
 800428e:	f7ff fbdd 	bl	8003a4c <LL_RCC_HSE_Enable>
 8004292:	e001      	b.n	8004298 <HAL_RCC_OscConfig+0x184>
 8004294:	f7ff fbe9 	bl	8003a6a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d012      	beq.n	80042c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fe fde0 	bl	8002e64 <HAL_GetTick>
 80042a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fe fddc 	bl	8002e64 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e299      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80042ba:	f7ff fbe5 	bl	8003a88 <LL_RCC_HSE_IsReady>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d0f1      	beq.n	80042a8 <HAL_RCC_OscConfig+0x194>
 80042c4:	e011      	b.n	80042ea <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fe fdcd 	bl	8002e64 <HAL_GetTick>
 80042ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042ce:	f7fe fdc9 	bl	8002e64 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b64      	cmp	r3, #100	; 0x64
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e286      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80042e0:	f7ff fbd2 	bl	8003a88 <LL_RCC_HSE_IsReady>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f1      	bne.n	80042ce <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d04c      	beq.n	8004390 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f6:	f7ff fda8 	bl	8003e4a <LL_RCC_GetSysClkSource>
 80042fa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042fc:	f7ff fea1 	bl	8004042 <LL_RCC_PLL_GetMainSource>
 8004300:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d005      	beq.n	8004314 <HAL_RCC_OscConfig+0x200>
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b0c      	cmp	r3, #12
 800430c:	d10e      	bne.n	800432c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d10b      	bne.n	800432c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e266      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fbf1 	bl	8003b0c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800432a:	e031      	b.n	8004390 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d019      	beq.n	8004368 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004334:	f7ff fbba 	bl	8003aac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fe fd94 	bl	8002e64 <HAL_GetTick>
 800433c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004340:	f7fe fd90 	bl	8002e64 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e24d      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004352:	f7ff fbc9 	bl	8003ae8 <LL_RCC_HSI_IsReady>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f1      	beq.n	8004340 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fbd3 	bl	8003b0c <LL_RCC_HSI_SetCalibTrimming>
 8004366:	e013      	b.n	8004390 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004368:	f7ff fbaf 	bl	8003aca <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436c:	f7fe fd7a 	bl	8002e64 <HAL_GetTick>
 8004370:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004374:	f7fe fd76 	bl	8002e64 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e233      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004386:	f7ff fbaf 	bl	8003ae8 <LL_RCC_HSI_IsReady>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1f1      	bne.n	8004374 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d106      	bne.n	80043aa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 80a3 	beq.w	80044f0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d076      	beq.n	80044a0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0310 	and.w	r3, r3, #16
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d046      	beq.n	800444c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80043be:	f7ff fc66 	bl	8003c8e <LL_RCC_LSI1_IsReady>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d113      	bne.n	80043f0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80043c8:	f7ff fc3f 	bl	8003c4a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043cc:	f7fe fd4a 	bl	8002e64 <HAL_GetTick>
 80043d0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80043d4:	f7fe fd46 	bl	8002e64 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e203      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80043e6:	f7ff fc52 	bl	8003c8e <LL_RCC_LSI1_IsReady>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f1      	beq.n	80043d4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80043f0:	f7ff fc5f 	bl	8003cb2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fe fd36 	bl	8002e64 <HAL_GetTick>
 80043f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80043fc:	f7fe fd32 	bl	8002e64 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b03      	cmp	r3, #3
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e1ef      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800440e:	f7ff fc72 	bl	8003cf6 <LL_RCC_LSI2_IsReady>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f1      	beq.n	80043fc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fc7c 	bl	8003d1a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004422:	f7ff fc23 	bl	8003c6c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004426:	f7fe fd1d 	bl	8002e64 <HAL_GetTick>
 800442a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800442e:	f7fe fd19 	bl	8002e64 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e1d6      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004440:	f7ff fc25 	bl	8003c8e <LL_RCC_LSI1_IsReady>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f1      	bne.n	800442e <HAL_RCC_OscConfig+0x31a>
 800444a:	e051      	b.n	80044f0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800444c:	f7ff fbfd 	bl	8003c4a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fe fd08 	bl	8002e64 <HAL_GetTick>
 8004454:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004456:	e00c      	b.n	8004472 <HAL_RCC_OscConfig+0x35e>
 8004458:	20000008 	.word	0x20000008
 800445c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004460:	f7fe fd00 	bl	8002e64 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e1bd      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004472:	f7ff fc0c 	bl	8003c8e <LL_RCC_LSI1_IsReady>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f1      	beq.n	8004460 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800447c:	f7ff fc2a 	bl	8003cd4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004482:	f7fe fcef 	bl	8002e64 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b03      	cmp	r3, #3
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e1ac      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004494:	f7ff fc2f 	bl	8003cf6 <LL_RCC_LSI2_IsReady>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f1      	bne.n	8004482 <HAL_RCC_OscConfig+0x36e>
 800449e:	e027      	b.n	80044f0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80044a0:	f7ff fc18 	bl	8003cd4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a4:	f7fe fcde 	bl	8002e64 <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044ac:	f7fe fcda 	bl	8002e64 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e197      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80044be:	f7ff fc1a 	bl	8003cf6 <LL_RCC_LSI2_IsReady>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f1      	bne.n	80044ac <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80044c8:	f7ff fbd0 	bl	8003c6c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fe fcca 	bl	8002e64 <HAL_GetTick>
 80044d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044d4:	f7fe fcc6 	bl	8002e64 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e183      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80044e6:	f7ff fbd2 	bl	8003c8e <LL_RCC_LSI1_IsReady>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f1      	bne.n	80044d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d05b      	beq.n	80045b4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044fc:	4ba7      	ldr	r3, [pc, #668]	; (800479c <HAL_RCC_OscConfig+0x688>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d114      	bne.n	8004532 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004508:	f7ff fa70 	bl	80039ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800450c:	f7fe fcaa 	bl	8002e64 <HAL_GetTick>
 8004510:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004514:	f7fe fca6 	bl	8002e64 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e163      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004526:	4b9d      	ldr	r3, [pc, #628]	; (800479c <HAL_RCC_OscConfig+0x688>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d102      	bne.n	8004540 <HAL_RCC_OscConfig+0x42c>
 800453a:	f7ff fb30 	bl	8003b9e <LL_RCC_LSE_Enable>
 800453e:	e00c      	b.n	800455a <HAL_RCC_OscConfig+0x446>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b05      	cmp	r3, #5
 8004546:	d104      	bne.n	8004552 <HAL_RCC_OscConfig+0x43e>
 8004548:	f7ff fb4b 	bl	8003be2 <LL_RCC_LSE_EnableBypass>
 800454c:	f7ff fb27 	bl	8003b9e <LL_RCC_LSE_Enable>
 8004550:	e003      	b.n	800455a <HAL_RCC_OscConfig+0x446>
 8004552:	f7ff fb35 	bl	8003bc0 <LL_RCC_LSE_Disable>
 8004556:	f7ff fb55 	bl	8003c04 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d014      	beq.n	800458c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fe fc7f 	bl	8002e64 <HAL_GetTick>
 8004566:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fe fc7b 	bl	8002e64 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e136      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004580:	f7ff fb51 	bl	8003c26 <LL_RCC_LSE_IsReady>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0ef      	beq.n	800456a <HAL_RCC_OscConfig+0x456>
 800458a:	e013      	b.n	80045b4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fe fc6a 	bl	8002e64 <HAL_GetTick>
 8004590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004592:	e00a      	b.n	80045aa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004594:	f7fe fc66 	bl	8002e64 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e121      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80045aa:	f7ff fb3c 	bl	8003c26 <LL_RCC_LSE_IsReady>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1ef      	bne.n	8004594 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d02c      	beq.n	800461a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d014      	beq.n	80045f2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045c8:	f7ff fab5 	bl	8003b36 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fe fc4a 	bl	8002e64 <HAL_GetTick>
 80045d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045d2:	e008      	b.n	80045e6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045d4:	f7fe fc46 	bl	8002e64 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e103      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80045e6:	f7ff fac8 	bl	8003b7a <LL_RCC_HSI48_IsReady>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f1      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4c0>
 80045f0:	e013      	b.n	800461a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045f2:	f7ff fab1 	bl	8003b58 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fe fc35 	bl	8002e64 <HAL_GetTick>
 80045fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045fe:	f7fe fc31 	bl	8002e64 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e0ee      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004610:	f7ff fab3 	bl	8003b7a <LL_RCC_HSI48_IsReady>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f1      	bne.n	80045fe <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80e4 	beq.w	80047ec <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004624:	f7ff fc11 	bl	8003e4a <LL_RCC_GetSysClkSource>
 8004628:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800462a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	2b02      	cmp	r3, #2
 8004638:	f040 80b4 	bne.w	80047a4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0203 	and.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	429a      	cmp	r2, r3
 8004648:	d123      	bne.n	8004692 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d11c      	bne.n	8004692 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d114      	bne.n	8004692 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d10d      	bne.n	8004692 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d05d      	beq.n	800474e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b0c      	cmp	r3, #12
 8004696:	d058      	beq.n	800474a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e0a1      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046aa:	f7ff fc84 	bl	8003fb6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046ae:	f7fe fbd9 	bl	8002e64 <HAL_GetTick>
 80046b2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b6:	f7fe fbd5 	bl	8002e64 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e092      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1ef      	bne.n	80046b6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	4b30      	ldr	r3, [pc, #192]	; (80047a0 <HAL_RCC_OscConfig+0x68c>)
 80046de:	4013      	ands	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046e8:	4311      	orrs	r1, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046ee:	0212      	lsls	r2, r2, #8
 80046f0:	4311      	orrs	r1, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046f6:	4311      	orrs	r1, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046fc:	4311      	orrs	r1, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004702:	430a      	orrs	r2, r1
 8004704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004708:	4313      	orrs	r3, r2
 800470a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800470c:	f7ff fc44 	bl	8003f98 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800471a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800471e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004720:	f7fe fba0 	bl	8002e64 <HAL_GetTick>
 8004724:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004728:	f7fe fb9c 	bl	8002e64 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e059      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0ef      	beq.n	8004728 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004748:	e050      	b.n	80047ec <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e04f      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d147      	bne.n	80047ec <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800475c:	f7ff fc1c 	bl	8003f98 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800476a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004770:	f7fe fb78 	bl	8002e64 <HAL_GetTick>
 8004774:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004778:	f7fe fb74 	bl	8002e64 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e031      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800478a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0ef      	beq.n	8004778 <HAL_RCC_OscConfig+0x664>
 8004798:	e028      	b.n	80047ec <HAL_RCC_OscConfig+0x6d8>
 800479a:	bf00      	nop
 800479c:	58000400 	.word	0x58000400
 80047a0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b0c      	cmp	r3, #12
 80047a8:	d01e      	beq.n	80047e8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047aa:	f7ff fc04 	bl	8003fb6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ae:	f7fe fb59 	bl	8002e64 <HAL_GetTick>
 80047b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fe fb55 	bl	8002e64 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e012      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1ef      	bne.n	80047b6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCC_OscConfig+0x6e4>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	60cb      	str	r3, [r1, #12]
 80047e6:	e001      	b.n	80047ec <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3734      	adds	r7, #52	; 0x34
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd90      	pop	{r4, r7, pc}
 80047f6:	bf00      	nop
 80047f8:	eefefffc 	.word	0xeefefffc

080047fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e12d      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004810:	4b98      	ldr	r3, [pc, #608]	; (8004a74 <HAL_RCC_ClockConfig+0x278>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d91b      	bls.n	8004856 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b95      	ldr	r3, [pc, #596]	; (8004a74 <HAL_RCC_ClockConfig+0x278>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 0207 	bic.w	r2, r3, #7
 8004826:	4993      	ldr	r1, [pc, #588]	; (8004a74 <HAL_RCC_ClockConfig+0x278>)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	4313      	orrs	r3, r2
 800482c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800482e:	f7fe fb19 	bl	8002e64 <HAL_GetTick>
 8004832:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004834:	e008      	b.n	8004848 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004836:	f7fe fb15 	bl	8002e64 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e111      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004848:	4b8a      	ldr	r3, [pc, #552]	; (8004a74 <HAL_RCC_ClockConfig+0x278>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d1ef      	bne.n	8004836 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d016      	beq.n	8004890 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff fafb 	bl	8003e62 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800486c:	f7fe fafa 	bl	8002e64 <HAL_GetTick>
 8004870:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004874:	f7fe faf6 	bl	8002e64 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e0f2      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004886:	f7ff fbe8 	bl	800405a <LL_RCC_IsActiveFlag_HPRE>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f1      	beq.n	8004874 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d016      	beq.n	80048ca <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff faf2 	bl	8003e8a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048a6:	f7fe fadd 	bl	8002e64 <HAL_GetTick>
 80048aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048ae:	f7fe fad9 	bl	8002e64 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e0d5      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80048c0:	f7ff fbdd 	bl	800407e <LL_RCC_IsActiveFlag_C2HPRE>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f1      	beq.n	80048ae <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff faeb 	bl	8003eb6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048e0:	f7fe fac0 	bl	8002e64 <HAL_GetTick>
 80048e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048e8:	f7fe fabc 	bl	8002e64 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e0b8      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80048fa:	f7ff fbd3 	bl	80040a4 <LL_RCC_IsActiveFlag_SHDHPRE>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f1      	beq.n	80048e8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d016      	beq.n	800493e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff fae5 	bl	8003ee4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800491a:	f7fe faa3 	bl	8002e64 <HAL_GetTick>
 800491e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004920:	e008      	b.n	8004934 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004922:	f7fe fa9f 	bl	8002e64 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d901      	bls.n	8004934 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e09b      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004934:	f7ff fbc9 	bl	80040ca <LL_RCC_IsActiveFlag_PPRE1>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f1      	beq.n	8004922 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d017      	beq.n	800497a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff fadb 	bl	8003f0c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004956:	f7fe fa85 	bl	8002e64 <HAL_GetTick>
 800495a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800495c:	e008      	b.n	8004970 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800495e:	f7fe fa81 	bl	8002e64 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e07d      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004970:	f7ff fbbd 	bl	80040ee <LL_RCC_IsActiveFlag_PPRE2>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f1      	beq.n	800495e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d043      	beq.n	8004a0e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d106      	bne.n	800499c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800498e:	f7ff f87b 	bl	8003a88 <LL_RCC_HSE_IsReady>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d11e      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e067      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d106      	bne.n	80049b2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80049a4:	f7ff fb16 	bl	8003fd4 <LL_RCC_PLL_IsReady>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d113      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e05c      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80049ba:	f7ff f9e3 	bl	8003d84 <LL_RCC_MSI_IsReady>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d108      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e051      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80049c8:	f7ff f88e 	bl	8003ae8 <LL_RCC_HSI_IsReady>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e04a      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fa21 	bl	8003e22 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e0:	f7fe fa40 	bl	8002e64 <HAL_GetTick>
 80049e4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049e6:	e00a      	b.n	80049fe <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e8:	f7fe fa3c 	bl	8002e64 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e036      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fe:	f7ff fa24 	bl	8003e4a <LL_RCC_GetSysClkSource>
 8004a02:	4602      	mov	r2, r0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d1ec      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a0e:	4b19      	ldr	r3, [pc, #100]	; (8004a74 <HAL_RCC_ClockConfig+0x278>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d21b      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1c:	4b15      	ldr	r3, [pc, #84]	; (8004a74 <HAL_RCC_ClockConfig+0x278>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f023 0207 	bic.w	r2, r3, #7
 8004a24:	4913      	ldr	r1, [pc, #76]	; (8004a74 <HAL_RCC_ClockConfig+0x278>)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2c:	f7fe fa1a 	bl	8002e64 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a34:	f7fe fa16 	bl	8002e64 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e012      	b.n	8004a6c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a46:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_RCC_ClockConfig+0x278>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d1ef      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a54:	f000 f87e 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	4a07      	ldr	r2, [pc, #28]	; (8004a78 <HAL_RCC_ClockConfig+0x27c>)
 8004a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004a5e:	f7fe fa0d 	bl	8002e7c <HAL_GetTickPrio>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fe f9af 	bl	8002dc8 <HAL_InitTick>
 8004a6a:	4603      	mov	r3, r0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3710      	adds	r7, #16
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	58004000 	.word	0x58004000
 8004a78:	20000008 	.word	0x20000008

08004a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a82:	f7ff f9e2 	bl	8003e4a <LL_RCC_GetSysClkSource>
 8004a86:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10a      	bne.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004a8e:	f7ff f99e 	bl	8003dce <LL_RCC_MSI_GetRange>
 8004a92:	4603      	mov	r3, r0
 8004a94:	091b      	lsrs	r3, r3, #4
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	4a2b      	ldr	r2, [pc, #172]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e04b      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d102      	bne.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aaa:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e045      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b08      	cmp	r3, #8
 8004ab4:	d10a      	bne.n	8004acc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ab6:	f7fe ffb7 	bl	8003a28 <LL_RCC_HSE_IsEnabledDiv2>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d102      	bne.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004ac0:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e03a      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004ac6:	4b22      	ldr	r3, [pc, #136]	; (8004b50 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e037      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004acc:	f7ff fab9 	bl	8004042 <LL_RCC_PLL_GetMainSource>
 8004ad0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d003      	beq.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x64>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x6a>
 8004ade:	e00d      	b.n	8004afc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004ae0:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ae2:	60bb      	str	r3, [r7, #8]
        break;
 8004ae4:	e015      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ae6:	f7fe ff9f 	bl	8003a28 <LL_RCC_HSE_IsEnabledDiv2>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d102      	bne.n	8004af6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004af0:	4b16      	ldr	r3, [pc, #88]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004af2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004af4:	e00d      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004af6:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004af8:	60bb      	str	r3, [r7, #8]
        break;
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004afc:	f7ff f967 	bl	8003dce <LL_RCC_MSI_GetRange>
 8004b00:	4603      	mov	r3, r0
 8004b02:	091b      	lsrs	r3, r3, #4
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	4a0f      	ldr	r2, [pc, #60]	; (8004b48 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b0e:	60bb      	str	r3, [r7, #8]
        break;
 8004b10:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004b12:	f7ff fa71 	bl	8003ff8 <LL_RCC_PLL_GetN>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	fb03 f402 	mul.w	r4, r3, r2
 8004b1e:	f7ff fa84 	bl	800402a <LL_RCC_PLL_GetDivider>
 8004b22:	4603      	mov	r3, r0
 8004b24:	091b      	lsrs	r3, r3, #4
 8004b26:	3301      	adds	r3, #1
 8004b28:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b2c:	f7ff fa71 	bl	8004012 <LL_RCC_PLL_GetR>
 8004b30:	4603      	mov	r3, r0
 8004b32:	0f5b      	lsrs	r3, r3, #29
 8004b34:	3301      	adds	r3, #1
 8004b36:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b3a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd90      	pop	{r4, r7, pc}
 8004b46:	bf00      	nop
 8004b48:	0800d74c 	.word	0x0800d74c
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	01e84800 	.word	0x01e84800

08004b54 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b54:	b598      	push	{r3, r4, r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004b58:	f7ff ff90 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8004b5c:	4604      	mov	r4, r0
 8004b5e:	f7ff f9e9 	bl	8003f34 <LL_RCC_GetAHBPrescaler>
 8004b62:	4603      	mov	r3, r0
 8004b64:	091b      	lsrs	r3, r3, #4
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	4a03      	ldr	r2, [pc, #12]	; (8004b78 <HAL_RCC_GetHCLKFreq+0x24>)
 8004b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b70:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	bd98      	pop	{r3, r4, r7, pc}
 8004b78:	0800d6ec 	.word	0x0800d6ec

08004b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b7c:	b598      	push	{r3, r4, r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b80:	f7ff ffe8 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b84:	4604      	mov	r4, r0
 8004b86:	f7ff f9ef 	bl	8003f68 <LL_RCC_GetAPB1Prescaler>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	0a1b      	lsrs	r3, r3, #8
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	4a04      	ldr	r2, [pc, #16]	; (8004ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd98      	pop	{r3, r4, r7, pc}
 8004ba4:	0800d72c 	.word	0x0800d72c

08004ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ba8:	b598      	push	{r3, r4, r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004bac:	f7ff ffd2 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	f7ff f9e5 	bl	8003f80 <LL_RCC_GetAPB2Prescaler>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	0adb      	lsrs	r3, r3, #11
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	4a04      	ldr	r2, [pc, #16]	; (8004bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd98      	pop	{r3, r4, r7, pc}
 8004bd0:	0800d72c 	.word	0x0800d72c

08004bd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2bb0      	cmp	r3, #176	; 0xb0
 8004be0:	d903      	bls.n	8004bea <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004be2:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	e007      	b.n	8004bfa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	4a11      	ldr	r2, [pc, #68]	; (8004c38 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004bfa:	f7ff f9a7 	bl	8003f4c <LL_RCC_GetAHB4Prescaler>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	091b      	lsrs	r3, r3, #4
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	4a0d      	ldr	r2, [pc, #52]	; (8004c3c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	0c9c      	lsrs	r4, r3, #18
 8004c1e:	f7fe fef5 	bl	8003a0c <HAL_PWREx_GetVoltageRange>
 8004c22:	4603      	mov	r3, r0
 8004c24:	4619      	mov	r1, r3
 8004c26:	4620      	mov	r0, r4
 8004c28:	f000 f80c 	bl	8004c44 <RCC_SetFlashLatency>
 8004c2c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd90      	pop	{r4, r7, pc}
 8004c36:	bf00      	nop
 8004c38:	0800d74c 	.word	0x0800d74c
 8004c3c:	0800d6ec 	.word	0x0800d6ec
 8004c40:	431bde83 	.word	0x431bde83

08004c44 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b093      	sub	sp, #76	; 0x4c
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c4e:	4b37      	ldr	r3, [pc, #220]	; (8004d2c <RCC_SetFlashLatency+0xe8>)
 8004c50:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004c54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004c5a:	4a35      	ldr	r2, [pc, #212]	; (8004d30 <RCC_SetFlashLatency+0xec>)
 8004c5c:	f107 031c 	add.w	r3, r7, #28
 8004c60:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004c66:	4b33      	ldr	r3, [pc, #204]	; (8004d34 <RCC_SetFlashLatency+0xf0>)
 8004c68:	f107 040c 	add.w	r4, r7, #12
 8004c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004c72:	2300      	movs	r3, #0
 8004c74:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7c:	d11a      	bne.n	8004cb4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004c7e:	2300      	movs	r3, #0
 8004c80:	643b      	str	r3, [r7, #64]	; 0x40
 8004c82:	e013      	b.n	8004cac <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	3348      	adds	r3, #72	; 0x48
 8004c8a:	443b      	add	r3, r7
 8004c8c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d807      	bhi.n	8004ca6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	3348      	adds	r3, #72	; 0x48
 8004c9c:	443b      	add	r3, r7
 8004c9e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ca2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004ca4:	e020      	b.n	8004ce8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca8:	3301      	adds	r3, #1
 8004caa:	643b      	str	r3, [r7, #64]	; 0x40
 8004cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d9e8      	bls.n	8004c84 <RCC_SetFlashLatency+0x40>
 8004cb2:	e019      	b.n	8004ce8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb8:	e013      	b.n	8004ce2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	3348      	adds	r3, #72	; 0x48
 8004cc0:	443b      	add	r3, r7
 8004cc2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d807      	bhi.n	8004cdc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	3348      	adds	r3, #72	; 0x48
 8004cd2:	443b      	add	r3, r7
 8004cd4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004cd8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004cda:	e005      	b.n	8004ce8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cde:	3301      	adds	r3, #1
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d9e8      	bls.n	8004cba <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004ce8:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <RCC_SetFlashLatency+0xf4>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f023 0207 	bic.w	r2, r3, #7
 8004cf0:	4911      	ldr	r1, [pc, #68]	; (8004d38 <RCC_SetFlashLatency+0xf4>)
 8004cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cf8:	f7fe f8b4 	bl	8002e64 <HAL_GetTick>
 8004cfc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004cfe:	e008      	b.n	8004d12 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d00:	f7fe f8b0 	bl	8002e64 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d901      	bls.n	8004d12 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e007      	b.n	8004d22 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d12:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <RCC_SetFlashLatency+0xf4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d1ef      	bne.n	8004d00 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	374c      	adds	r7, #76	; 0x4c
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd90      	pop	{r4, r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	0800c6b0 	.word	0x0800c6b0
 8004d30:	0800c6c0 	.word	0x0800c6c0
 8004d34:	0800c6cc 	.word	0x0800c6cc
 8004d38:	58004000 	.word	0x58004000

08004d3c <LL_RCC_LSE_IsEnabled>:
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <LL_RCC_LSE_IsEnabled+0x18>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <LL_RCC_LSE_IsEnabled+0x1a>
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <LL_RCC_LSE_IsReady>:
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d101      	bne.n	8004d78 <LL_RCC_LSE_IsReady+0x18>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <LL_RCC_LSE_IsReady+0x1a>
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <LL_RCC_SetRFWKPClockSource>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <LL_RCC_SetSMPSClockSource>:
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	f023 0203 	bic.w	r2, r3, #3
 8004dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <LL_RCC_SetSMPSPrescaler>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <LL_RCC_SetUSARTClockSource>:
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e10:	f023 0203 	bic.w	r2, r3, #3
 8004e14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <LL_RCC_SetLPUARTClockSource>:
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <LL_RCC_SetI2CClockSource>:
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	091b      	lsrs	r3, r3, #4
 8004e6c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e70:	43db      	mvns	r3, r3
 8004e72:	401a      	ands	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <LL_RCC_SetLPTIMClockSource>:
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	041b      	lsls	r3, r3, #16
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	401a      	ands	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	041b      	lsls	r3, r3, #16
 8004eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <LL_RCC_SetSAIClockSource>:
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <LL_RCC_SetRNGClockSource>:
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f02:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <LL_RCC_SetCLK48ClockSource>:
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_RCC_SetUSBClockSource>:
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff ffe3 	bl	8004f1e <LL_RCC_SetCLK48ClockSource>
}
 8004f58:	bf00      	nop
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <LL_RCC_SetADCClockSource>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f70:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <LL_RCC_SetRTCClockSource>:
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_RCC_GetRTCClockSource>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <LL_RCC_ForceBackupDomainReset>:
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fea:	bf00      	nop
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <LL_RCC_PLLSAI1_Enable>:
{
 8005016:	b480      	push	{r7}
 8005018:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800501a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005024:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005028:	6013      	str	r3, [r2, #0]
}
 800502a:	bf00      	nop
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <LL_RCC_PLLSAI1_Disable>:
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005046:	6013      	str	r3, [r2, #0]
}
 8005048:	bf00      	nop
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <LL_RCC_PLLSAI1_IsReady>:
{
 8005052:	b480      	push	{r7}
 8005054:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005064:	d101      	bne.n	800506a <LL_RCC_PLLSAI1_IsReady+0x18>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b088      	sub	sp, #32
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800507e:	2300      	movs	r3, #0
 8005080:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005082:	2300      	movs	r3, #0
 8005084:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d034      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800509a:	d021      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800509c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050a0:	d81b      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050a6:	d01d      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80050a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ac:	d815      	bhi.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00b      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x54>
 80050b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050b6:	d110      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80050b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80050c8:	e00d      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3304      	adds	r3, #4
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f947 	bl	8005362 <RCCEx_PLLSAI1_ConfigNP>
 80050d4:	4603      	mov	r3, r0
 80050d6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80050d8:	e005      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	77fb      	strb	r3, [r7, #31]
        break;
 80050de:	e002      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050e0:	bf00      	nop
 80050e2:	e000      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80050e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e6:	7ffb      	ldrb	r3, [r7, #31]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff fee8 	bl	8004ec6 <LL_RCC_SetSAIClockSource>
 80050f6:	e001      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f8:	7ffb      	ldrb	r3, [r7, #31]
 80050fa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005104:	2b00      	cmp	r3, #0
 8005106:	d046      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005108:	f7ff ff56 	bl	8004fb8 <LL_RCC_GetRTCClockSource>
 800510c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	429a      	cmp	r2, r3
 8005116:	d03c      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005118:	f7fe fc68 	bl	80039ec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d105      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff ff30 	bl	8004f8c <LL_RCC_SetRTCClockSource>
 800512c:	e02e      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005138:	f7ff ff4b 	bl	8004fd2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800513c:	f7ff ff5a 	bl	8004ff4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800514e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005158:	f7ff fdf0 	bl	8004d3c <LL_RCC_LSE_IsEnabled>
 800515c:	4603      	mov	r3, r0
 800515e:	2b01      	cmp	r3, #1
 8005160:	d114      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005162:	f7fd fe7f 	bl	8002e64 <HAL_GetTick>
 8005166:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005168:	e00b      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516a:	f7fd fe7b 	bl	8002e64 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	f241 3288 	movw	r2, #5000	; 0x1388
 8005178:	4293      	cmp	r3, r2
 800517a:	d902      	bls.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	77fb      	strb	r3, [r7, #31]
              break;
 8005180:	e004      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005182:	f7ff fded 	bl	8004d60 <LL_RCC_LSE_IsReady>
 8005186:	4603      	mov	r3, r0
 8005188:	2b01      	cmp	r3, #1
 800518a:	d1ee      	bne.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800518c:	7ffb      	ldrb	r3, [r7, #31]
 800518e:	77bb      	strb	r3, [r7, #30]
 8005190:	e001      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005192:	7ffb      	ldrb	r3, [r7, #31]
 8005194:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d004      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fe2a 	bl	8004e00 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7ff fe35 	bl	8004e2c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d004      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7ff fe5d 	bl	8004e92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d004      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fe52 	bl	8004e92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d004      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff fe2a 	bl	8004e58 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	4618      	mov	r0, r3
 8005216:	f7ff fe1f 	bl	8004e58 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d022      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fe8d 	bl	8004f4a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005238:	d107      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800523a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005248:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005252:	d10b      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	4618      	mov	r0, r3
 800525a:	f000 f8dd 	bl	8005418 <RCCEx_PLLSAI1_ConfigNQ>
 800525e:	4603      	mov	r3, r0
 8005260:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005262:	7ffb      	ldrb	r3, [r7, #31]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005268:	7ffb      	ldrb	r3, [r7, #31]
 800526a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005274:	2b00      	cmp	r3, #0
 8005276:	d02b      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005280:	d008      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005286:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800528a:	d003      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff fe2a 	bl	8004ef2 <LL_RCC_SetRNGClockSource>
 800529e:	e00a      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	2000      	movs	r0, #0
 80052ac:	f7ff fe21 	bl	8004ef2 <LL_RCC_SetRNGClockSource>
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff fe34 	bl	8004f1e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80052be:	d107      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80052c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d022      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fe3d 	bl	8004f60 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ee:	d107      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052fe:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005304:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005308:	d10b      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3304      	adds	r3, #4
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f8dd 	bl	80054ce <RCCEx_PLLSAI1_ConfigNR>
 8005314:	4603      	mov	r3, r0
 8005316:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005318:	7ffb      	ldrb	r3, [r7, #31]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800531e:	7ffb      	ldrb	r3, [r7, #31]
 8005320:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff fd26 	bl	8004d84 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d009      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff fd45 	bl	8004dd8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fd2c 	bl	8004db0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005358:	7fbb      	ldrb	r3, [r7, #30]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800536e:	f7ff fe61 	bl	8005034 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005372:	f7fd fd77 	bl	8002e64 <HAL_GetTick>
 8005376:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005378:	e009      	b.n	800538e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800537a:	f7fd fd73 	bl	8002e64 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d902      	bls.n	800538e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	73fb      	strb	r3, [r7, #15]
      break;
 800538c:	e004      	b.n	8005398 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800538e:	f7ff fe60 	bl	8005052 <LL_RCC_PLLSAI1_IsReady>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d137      	bne.n	800540e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800539e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053b2:	4313      	orrs	r3, r2
 80053b4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80053b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053c8:	4313      	orrs	r3, r2
 80053ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80053cc:	f7ff fe23 	bl	8005016 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d0:	f7fd fd48 	bl	8002e64 <HAL_GetTick>
 80053d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053d6:	e009      	b.n	80053ec <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053d8:	f7fd fd44 	bl	8002e64 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d902      	bls.n	80053ec <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	73fb      	strb	r3, [r7, #15]
        break;
 80053ea:	e004      	b.n	80053f6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80053ec:	f7ff fe31 	bl	8005052 <LL_RCC_PLLSAI1_IsReady>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d1f0      	bne.n	80053d8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80053f6:	7bfb      	ldrb	r3, [r7, #15]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d108      	bne.n	800540e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80053fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005400:	691a      	ldr	r2, [r3, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800540a:	4313      	orrs	r3, r2
 800540c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005424:	f7ff fe06 	bl	8005034 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005428:	f7fd fd1c 	bl	8002e64 <HAL_GetTick>
 800542c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800542e:	e009      	b.n	8005444 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005430:	f7fd fd18 	bl	8002e64 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d902      	bls.n	8005444 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	73fb      	strb	r3, [r7, #15]
      break;
 8005442:	e004      	b.n	800544e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005444:	f7ff fe05 	bl	8005052 <LL_RCC_PLLSAI1_IsReady>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d137      	bne.n	80054c4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	021b      	lsls	r3, r3, #8
 8005464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005468:	4313      	orrs	r3, r2
 800546a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800546c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800547e:	4313      	orrs	r3, r2
 8005480:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005482:	f7ff fdc8 	bl	8005016 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005486:	f7fd fced 	bl	8002e64 <HAL_GetTick>
 800548a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800548c:	e009      	b.n	80054a2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800548e:	f7fd fce9 	bl	8002e64 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d902      	bls.n	80054a2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	73fb      	strb	r3, [r7, #15]
        break;
 80054a0:	e004      	b.n	80054ac <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054a2:	f7ff fdd6 	bl	8005052 <LL_RCC_PLLSAI1_IsReady>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d1f0      	bne.n	800548e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d108      	bne.n	80054c4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80054b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054c0:	4313      	orrs	r3, r2
 80054c2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80054da:	f7ff fdab 	bl	8005034 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054de:	f7fd fcc1 	bl	8002e64 <HAL_GetTick>
 80054e2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054e4:	e009      	b.n	80054fa <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054e6:	f7fd fcbd 	bl	8002e64 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d902      	bls.n	80054fa <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	73fb      	strb	r3, [r7, #15]
      break;
 80054f8:	e004      	b.n	8005504 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80054fa:	f7ff fdaa 	bl	8005052 <LL_RCC_PLLSAI1_IsReady>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1f0      	bne.n	80054e6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005504:	7bfb      	ldrb	r3, [r7, #15]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d137      	bne.n	800557a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800550a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800551e:	4313      	orrs	r3, r2
 8005520:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005534:	4313      	orrs	r3, r2
 8005536:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005538:	f7ff fd6d 	bl	8005016 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800553c:	f7fd fc92 	bl	8002e64 <HAL_GetTick>
 8005540:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005542:	e009      	b.n	8005558 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005544:	f7fd fc8e 	bl	8002e64 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d902      	bls.n	8005558 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	73fb      	strb	r3, [r7, #15]
        break;
 8005556:	e004      	b.n	8005562 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005558:	f7ff fd7b 	bl	8005052 <LL_RCC_PLLSAI1_IsReady>
 800555c:	4603      	mov	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d1f0      	bne.n	8005544 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d108      	bne.n	800557a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005576:	4313      	orrs	r3, r2
 8005578:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800557a:	7bfb      	ldrb	r3, [r7, #15]
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e09f      	b.n	80056d6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fd f9d0 	bl	8002950 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055b8:	4b49      	ldr	r3, [pc, #292]	; (80056e0 <HAL_RTC_Init+0x15c>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0310 	and.w	r3, r3, #16
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d07e      	beq.n	80056c2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	22ca      	movs	r2, #202	; 0xca
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2253      	movs	r2, #83	; 0x53
 80055d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f8ab 	bl	8005730 <RTC_EnterInitMode>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00a      	beq.n	80055f6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	22ff      	movs	r2, #255	; 0xff
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2204      	movs	r2, #4
 80055ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
 80055f4:	e067      	b.n	80056c6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005608:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6899      	ldr	r1, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68d2      	ldr	r2, [r2, #12]
 8005630:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6919      	ldr	r1, [r3, #16]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	041a      	lsls	r2, r3, #16
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005654:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0203 	bic.w	r2, r2, #3
 8005664:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d113      	bne.n	80056b4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f829 	bl	80056e4 <HAL_RTC_WaitForSynchro>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00d      	beq.n	80056b4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	22ff      	movs	r2, #255	; 0xff
 800569e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2204      	movs	r2, #4
 80056a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e010      	b.n	80056d6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	22ff      	movs	r2, #255	; 0xff
 80056ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]
 80056c0:	e001      	b.n	80056c6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d103      	bne.n	80056d4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40002800 	.word	0x40002800

080056e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056fa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80056fc:	f7fd fbb2 	bl	8002e64 <HAL_GetTick>
 8005700:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005702:	e009      	b.n	8005718 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005704:	f7fd fbae 	bl	8002e64 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005712:	d901      	bls.n	8005718 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e007      	b.n	8005728 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0ee      	beq.n	8005704 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d119      	bne.n	800577a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f04f 32ff 	mov.w	r2, #4294967295
 800574e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005750:	f7fd fb88 	bl	8002e64 <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005756:	e009      	b.n	800576c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005758:	f7fd fb84 	bl	8002e64 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005766:	d901      	bls.n	800576c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e007      	b.n	800577c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d0ee      	beq.n	8005758 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800579a:	2302      	movs	r3, #2
 800579c:	e0a8      	b.n	80058f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	22ca      	movs	r2, #202	; 0xca
 80057b4:	625a      	str	r2, [r3, #36]	; 0x24
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2253      	movs	r2, #83	; 0x53
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d020      	beq.n	800580e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80057cc:	f7fd fb4a 	bl	8002e64 <HAL_GetTick>
 80057d0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80057d2:	e015      	b.n	8005800 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057d4:	f7fd fb46 	bl	8002e64 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057e2:	d90d      	bls.n	8005800 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	22ff      	movs	r2, #255	; 0xff
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2203      	movs	r2, #3
 80057f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e077      	b.n	80058f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e2      	bne.n	80057d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800581c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	b2da      	uxtb	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800582e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005830:	f7fd fb18 	bl	8002e64 <HAL_GetTick>
 8005834:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005836:	e015      	b.n	8005864 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005838:	f7fd fb14 	bl	8002e64 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005846:	d90d      	bls.n	8005864 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	22ff      	movs	r2, #255	; 0xff
 800584e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2203      	movs	r2, #3
 8005854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e045      	b.n	80058f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d0e2      	beq.n	8005838 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0207 	bic.w	r2, r2, #7
 8005888:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6899      	ldr	r1, [r3, #8]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	430a      	orrs	r2, r1
 8005898:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800589a:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800589c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a0:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a12      	ldr	r2, [pc, #72]	; (80058f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058b4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058c4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80058d4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	22ff      	movs	r2, #255	; 0xff
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	58000800 	.word	0x58000800

080058fc <LL_RCC_GetUSARTClockSource>:
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005908:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4013      	ands	r3, r2
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <LL_RCC_GetLPUARTClockSource>:
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005928:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4013      	ands	r3, r2
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e042      	b.n	80059d4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fd f829 	bl	80029b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2224      	movs	r2, #36	; 0x24
 800596a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f82c 	bl	80059dc <UART_SetConfig>
 8005984:	4603      	mov	r3, r0
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e022      	b.n	80059d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa48 	bl	8005e2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 facf 	bl	8005f70 <UART_CheckIdleState>
 80059d2:	4603      	mov	r3, r0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e0:	b08c      	sub	sp, #48	; 0x30
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	689a      	ldr	r2, [r3, #8]
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	431a      	orrs	r2, r3
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	431a      	orrs	r2, r3
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	4baf      	ldr	r3, [pc, #700]	; (8005cc8 <UART_SetConfig+0x2ec>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	6812      	ldr	r2, [r2, #0]
 8005a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a14:	430b      	orrs	r3, r1
 8005a16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4aa4      	ldr	r2, [pc, #656]	; (8005ccc <UART_SetConfig+0x2f0>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d004      	beq.n	8005a48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a44:	4313      	orrs	r3, r2
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005a52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	6812      	ldr	r2, [r2, #0]
 8005a5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a66:	f023 010f 	bic.w	r1, r3, #15
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	430a      	orrs	r2, r1
 8005a74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a95      	ldr	r2, [pc, #596]	; (8005cd0 <UART_SetConfig+0x2f4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d125      	bne.n	8005acc <UART_SetConfig+0xf0>
 8005a80:	2003      	movs	r0, #3
 8005a82:	f7ff ff3b 	bl	80058fc <LL_RCC_GetUSARTClockSource>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d81b      	bhi.n	8005ac4 <UART_SetConfig+0xe8>
 8005a8c:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0xb8>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005aa5 	.word	0x08005aa5
 8005a98:	08005ab5 	.word	0x08005ab5
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005abd 	.word	0x08005abd
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aaa:	e042      	b.n	8005b32 <UART_SetConfig+0x156>
 8005aac:	2302      	movs	r3, #2
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab2:	e03e      	b.n	8005b32 <UART_SetConfig+0x156>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aba:	e03a      	b.n	8005b32 <UART_SetConfig+0x156>
 8005abc:	2308      	movs	r3, #8
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac2:	e036      	b.n	8005b32 <UART_SetConfig+0x156>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aca:	e032      	b.n	8005b32 <UART_SetConfig+0x156>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a7e      	ldr	r2, [pc, #504]	; (8005ccc <UART_SetConfig+0x2f0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d12a      	bne.n	8005b2c <UART_SetConfig+0x150>
 8005ad6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005ada:	f7ff ff1f 	bl	800591c <LL_RCC_GetLPUARTClockSource>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ae4:	d01a      	beq.n	8005b1c <UART_SetConfig+0x140>
 8005ae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aea:	d81b      	bhi.n	8005b24 <UART_SetConfig+0x148>
 8005aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af0:	d00c      	beq.n	8005b0c <UART_SetConfig+0x130>
 8005af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af6:	d815      	bhi.n	8005b24 <UART_SetConfig+0x148>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <UART_SetConfig+0x128>
 8005afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b00:	d008      	beq.n	8005b14 <UART_SetConfig+0x138>
 8005b02:	e00f      	b.n	8005b24 <UART_SetConfig+0x148>
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0a:	e012      	b.n	8005b32 <UART_SetConfig+0x156>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b12:	e00e      	b.n	8005b32 <UART_SetConfig+0x156>
 8005b14:	2304      	movs	r3, #4
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1a:	e00a      	b.n	8005b32 <UART_SetConfig+0x156>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b22:	e006      	b.n	8005b32 <UART_SetConfig+0x156>
 8005b24:	2310      	movs	r3, #16
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b2a:	e002      	b.n	8005b32 <UART_SetConfig+0x156>
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a65      	ldr	r2, [pc, #404]	; (8005ccc <UART_SetConfig+0x2f0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	f040 8097 	bne.w	8005c6c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d823      	bhi.n	8005b8e <UART_SetConfig+0x1b2>
 8005b46:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0x170>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b8f 	.word	0x08005b8f
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b8f 	.word	0x08005b8f
 8005b5c:	08005b7f 	.word	0x08005b7f
 8005b60:	08005b8f 	.word	0x08005b8f
 8005b64:	08005b8f 	.word	0x08005b8f
 8005b68:	08005b8f 	.word	0x08005b8f
 8005b6c:	08005b87 	.word	0x08005b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7ff f804 	bl	8004b7c <HAL_RCC_GetPCLK1Freq>
 8005b74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b76:	e010      	b.n	8005b9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b78:	4b56      	ldr	r3, [pc, #344]	; (8005cd4 <UART_SetConfig+0x2f8>)
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b7c:	e00d      	b.n	8005b9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7e:	f7fe ff7d 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8005b82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b84:	e009      	b.n	8005b9a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b8c:	e005      	b.n	8005b9a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 812b 	beq.w	8005df8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	4a4c      	ldr	r2, [pc, #304]	; (8005cd8 <UART_SetConfig+0x2fc>)
 8005ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d305      	bcc.n	8005bd2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d903      	bls.n	8005bda <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bd8:	e10e      	b.n	8005df8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	2200      	movs	r2, #0
 8005bde:	60bb      	str	r3, [r7, #8]
 8005be0:	60fa      	str	r2, [r7, #12]
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	4a3c      	ldr	r2, [pc, #240]	; (8005cd8 <UART_SetConfig+0x2fc>)
 8005be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2200      	movs	r2, #0
 8005bf0:	603b      	str	r3, [r7, #0]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bf8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bfc:	f7fa ff84 	bl	8000b08 <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4610      	mov	r0, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	020b      	lsls	r3, r1, #8
 8005c12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c16:	0202      	lsls	r2, r0, #8
 8005c18:	6979      	ldr	r1, [r7, #20]
 8005c1a:	6849      	ldr	r1, [r1, #4]
 8005c1c:	0849      	lsrs	r1, r1, #1
 8005c1e:	2000      	movs	r0, #0
 8005c20:	460c      	mov	r4, r1
 8005c22:	4605      	mov	r5, r0
 8005c24:	eb12 0804 	adds.w	r8, r2, r4
 8005c28:	eb43 0905 	adc.w	r9, r3, r5
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	469a      	mov	sl, r3
 8005c34:	4693      	mov	fp, r2
 8005c36:	4652      	mov	r2, sl
 8005c38:	465b      	mov	r3, fp
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	f7fa ff63 	bl	8000b08 <__aeabi_uldivmod>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4613      	mov	r3, r2
 8005c48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c50:	d308      	bcc.n	8005c64 <UART_SetConfig+0x288>
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c58:	d204      	bcs.n	8005c64 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6a3a      	ldr	r2, [r7, #32]
 8005c60:	60da      	str	r2, [r3, #12]
 8005c62:	e0c9      	b.n	8005df8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c6a:	e0c5      	b.n	8005df8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c74:	d16d      	bne.n	8005d52 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005c76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	2b07      	cmp	r3, #7
 8005c7e:	d82d      	bhi.n	8005cdc <UART_SetConfig+0x300>
 8005c80:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <UART_SetConfig+0x2ac>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005ca9 	.word	0x08005ca9
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cdd 	.word	0x08005cdd
 8005c94:	08005cb7 	.word	0x08005cb7
 8005c98:	08005cdd 	.word	0x08005cdd
 8005c9c:	08005cdd 	.word	0x08005cdd
 8005ca0:	08005cdd 	.word	0x08005cdd
 8005ca4:	08005cbf 	.word	0x08005cbf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca8:	f7fe ff7e 	bl	8004ba8 <HAL_RCC_GetPCLK2Freq>
 8005cac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cae:	e01b      	b.n	8005ce8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb0:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <UART_SetConfig+0x2f8>)
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cb4:	e018      	b.n	8005ce8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb6:	f7fe fee1 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8005cba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cbc:	e014      	b.n	8005ce8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cc4:	e010      	b.n	8005ce8 <UART_SetConfig+0x30c>
 8005cc6:	bf00      	nop
 8005cc8:	cfff69f3 	.word	0xcfff69f3
 8005ccc:	40008000 	.word	0x40008000
 8005cd0:	40013800 	.word	0x40013800
 8005cd4:	00f42400 	.word	0x00f42400
 8005cd8:	0800d78c 	.word	0x0800d78c
      default:
        pclk = 0U;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ce6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 8084 	beq.w	8005df8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	4a4b      	ldr	r2, [pc, #300]	; (8005e24 <UART_SetConfig+0x448>)
 8005cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d02:	005a      	lsls	r2, r3, #1
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	085b      	lsrs	r3, r3, #1
 8005d0a:	441a      	add	r2, r3
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d14:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	2b0f      	cmp	r3, #15
 8005d1a:	d916      	bls.n	8005d4a <UART_SetConfig+0x36e>
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d22:	d212      	bcs.n	8005d4a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	f023 030f 	bic.w	r3, r3, #15
 8005d2c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f003 0307 	and.w	r3, r3, #7
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	8bfb      	ldrh	r3, [r7, #30]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	8bfa      	ldrh	r2, [r7, #30]
 8005d46:	60da      	str	r2, [r3, #12]
 8005d48:	e056      	b.n	8005df8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d50:	e052      	b.n	8005df8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d56:	3b01      	subs	r3, #1
 8005d58:	2b07      	cmp	r3, #7
 8005d5a:	d822      	bhi.n	8005da2 <UART_SetConfig+0x3c6>
 8005d5c:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <UART_SetConfig+0x388>)
 8005d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d62:	bf00      	nop
 8005d64:	08005d85 	.word	0x08005d85
 8005d68:	08005d8d 	.word	0x08005d8d
 8005d6c:	08005da3 	.word	0x08005da3
 8005d70:	08005d93 	.word	0x08005d93
 8005d74:	08005da3 	.word	0x08005da3
 8005d78:	08005da3 	.word	0x08005da3
 8005d7c:	08005da3 	.word	0x08005da3
 8005d80:	08005d9b 	.word	0x08005d9b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d84:	f7fe ff10 	bl	8004ba8 <HAL_RCC_GetPCLK2Freq>
 8005d88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d8a:	e010      	b.n	8005dae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d8c:	4b26      	ldr	r3, [pc, #152]	; (8005e28 <UART_SetConfig+0x44c>)
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d90:	e00d      	b.n	8005dae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d92:	f7fe fe73 	bl	8004a7c <HAL_RCC_GetSysClockFreq>
 8005d96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d98:	e009      	b.n	8005dae <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005da0:	e005      	b.n	8005dae <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dac:	bf00      	nop
    }

    if (pclk != 0U)
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d021      	beq.n	8005df8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	4a1a      	ldr	r2, [pc, #104]	; (8005e24 <UART_SetConfig+0x448>)
 8005dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	441a      	add	r2, r3
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	2b0f      	cmp	r3, #15
 8005ddc:	d909      	bls.n	8005df2 <UART_SetConfig+0x416>
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de4:	d205      	bcs.n	8005df2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60da      	str	r2, [r3, #12]
 8005df0:	e002      	b.n	8005df8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2200      	movs	r2, #0
 8005e12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005e14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3730      	adds	r7, #48	; 0x30
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e22:	bf00      	nop
 8005e24:	0800d78c 	.word	0x0800d78c
 8005e28:	00f42400 	.word	0x00f42400

08005e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01a      	beq.n	8005f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f2a:	d10a      	bne.n	8005f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
  }
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f80:	f7fc ff70 	bl	8002e64 <HAL_GetTick>
 8005f84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d10e      	bne.n	8005fb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f832 	bl	800600c <UART_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e028      	b.n	8006004 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d10e      	bne.n	8005fde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f81c 	bl	800600c <UART_WaitOnFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e012      	b.n	8006004 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b09c      	sub	sp, #112	; 0x70
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800601c:	e0a9      	b.n	8006172 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800601e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	f000 80a5 	beq.w	8006172 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006028:	f7fc ff1c 	bl	8002e64 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006034:	429a      	cmp	r2, r3
 8006036:	d302      	bcc.n	800603e <UART_WaitOnFlagUntilTimeout+0x32>
 8006038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800603a:	2b00      	cmp	r3, #0
 800603c:	d140      	bne.n	80060c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800604c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800604e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006052:	667b      	str	r3, [r7, #100]	; 0x64
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800605e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006062:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800606a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e6      	bne.n	800603e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	663b      	str	r3, [r7, #96]	; 0x60
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006090:	64ba      	str	r2, [r7, #72]	; 0x48
 8006092:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006094:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006098:	e841 2300 	strex	r3, r2, [r1]
 800609c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800609e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1e5      	bne.n	8006070 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e069      	b.n	8006194 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d051      	beq.n	8006172 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060dc:	d149      	bne.n	8006172 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	e853 3f00 	ldrex	r3, [r3]
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006106:	637b      	str	r3, [r7, #52]	; 0x34
 8006108:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800610c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1e6      	bne.n	80060e8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	3308      	adds	r3, #8
 8006120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	613b      	str	r3, [r7, #16]
   return(result);
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f023 0301 	bic.w	r3, r3, #1
 8006130:	66bb      	str	r3, [r7, #104]	; 0x68
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	3308      	adds	r3, #8
 8006138:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800613a:	623a      	str	r2, [r7, #32]
 800613c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613e:	69f9      	ldr	r1, [r7, #28]
 8006140:	6a3a      	ldr	r2, [r7, #32]
 8006142:	e841 2300 	strex	r3, r2, [r1]
 8006146:	61bb      	str	r3, [r7, #24]
   return(result);
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e5      	bne.n	800611a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2220      	movs	r2, #32
 8006152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e010      	b.n	8006194 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4013      	ands	r3, r2
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	429a      	cmp	r2, r3
 8006180:	bf0c      	ite	eq
 8006182:	2301      	moveq	r3, #1
 8006184:	2300      	movne	r3, #0
 8006186:	b2db      	uxtb	r3, r3
 8006188:	461a      	mov	r2, r3
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	429a      	cmp	r2, r3
 800618e:	f43f af46 	beq.w	800601e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3770      	adds	r7, #112	; 0x70
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e027      	b.n	8006202 <HAL_UARTEx_DisableFifoMode+0x66>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2224      	movs	r2, #36	; 0x24
 80061be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0201 	bic.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006222:	2302      	movs	r3, #2
 8006224:	e02d      	b.n	8006282 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2224      	movs	r2, #36	; 0x24
 8006232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0201 	bic.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	430a      	orrs	r2, r1
 8006260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f850 	bl	8006308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800629a:	2b01      	cmp	r3, #1
 800629c:	d101      	bne.n	80062a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800629e:	2302      	movs	r3, #2
 80062a0:	e02d      	b.n	80062fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2224      	movs	r2, #36	; 0x24
 80062ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0201 	bic.w	r2, r2, #1
 80062c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f812 	bl	8006308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006314:	2b00      	cmp	r3, #0
 8006316:	d108      	bne.n	800632a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006328:	e031      	b.n	800638e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800632a:	2308      	movs	r3, #8
 800632c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800632e:	2308      	movs	r3, #8
 8006330:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	0e5b      	lsrs	r3, r3, #25
 800633a:	b2db      	uxtb	r3, r3
 800633c:	f003 0307 	and.w	r3, r3, #7
 8006340:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	0f5b      	lsrs	r3, r3, #29
 800634a:	b2db      	uxtb	r3, r3
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	7b3a      	ldrb	r2, [r7, #12]
 8006356:	4911      	ldr	r1, [pc, #68]	; (800639c <UARTEx_SetNbDataToProcess+0x94>)
 8006358:	5c8a      	ldrb	r2, [r1, r2]
 800635a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800635e:	7b3a      	ldrb	r2, [r7, #12]
 8006360:	490f      	ldr	r1, [pc, #60]	; (80063a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006362:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006364:	fb93 f3f2 	sdiv	r3, r3, r2
 8006368:	b29a      	uxth	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	7b7a      	ldrb	r2, [r7, #13]
 8006374:	4909      	ldr	r1, [pc, #36]	; (800639c <UARTEx_SetNbDataToProcess+0x94>)
 8006376:	5c8a      	ldrb	r2, [r1, r2]
 8006378:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800637c:	7b7a      	ldrb	r2, [r7, #13]
 800637e:	4908      	ldr	r1, [pc, #32]	; (80063a0 <UARTEx_SetNbDataToProcess+0x98>)
 8006380:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006382:	fb93 f3f2 	sdiv	r3, r3, r2
 8006386:	b29a      	uxth	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800638e:	bf00      	nop
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	0800d7a4 	.word	0x0800d7a4
 80063a0:	0800d7ac 	.word	0x0800d7ac

080063a4 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063ae:	f107 0308 	add.w	r3, r7, #8
 80063b2:	2218      	movs	r2, #24
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 f8d8 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 80063bc:	233f      	movs	r3, #63	; 0x3f
 80063be:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80063c0:	2381      	movs	r3, #129	; 0x81
 80063c2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80063c4:	1dfb      	adds	r3, r7, #7
 80063c6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80063c8:	2301      	movs	r3, #1
 80063ca:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063cc:	f107 0308 	add.w	r3, r7, #8
 80063d0:	2100      	movs	r1, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 fb54 	bl	8007a80 <hci_send_req>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	da01      	bge.n	80063e2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80063de:	23ff      	movs	r3, #255	; 0xff
 80063e0:	e000      	b.n	80063e4 <aci_gap_set_non_discoverable+0x40>
  return status;
 80063e2:	79fb      	ldrb	r3, [r7, #7]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80063ec:	b5b0      	push	{r4, r5, r7, lr}
 80063ee:	b0ce      	sub	sp, #312	; 0x138
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	4605      	mov	r5, r0
 80063f4:	460c      	mov	r4, r1
 80063f6:	4610      	mov	r0, r2
 80063f8:	4619      	mov	r1, r3
 80063fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80063fe:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006402:	462a      	mov	r2, r5
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800640a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800640e:	4622      	mov	r2, r4
 8006410:	801a      	strh	r2, [r3, #0]
 8006412:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006416:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800641a:	4602      	mov	r2, r0
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006422:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006426:	460a      	mov	r2, r1
 8006428:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800642a:	f107 0310 	add.w	r3, r7, #16
 800642e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006432:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006436:	3308      	adds	r3, #8
 8006438:	f107 0210 	add.w	r2, r7, #16
 800643c:	4413      	add	r3, r2
 800643e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006442:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006446:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800644a:	4413      	add	r3, r2
 800644c:	3309      	adds	r3, #9
 800644e:	f107 0210 	add.w	r2, r7, #16
 8006452:	4413      	add	r3, r2
 8006454:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006458:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800645c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006460:	2200      	movs	r2, #0
 8006462:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800646a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800646e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006472:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006476:	7812      	ldrb	r2, [r2, #0]
 8006478:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800647a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800647e:	3301      	adds	r3, #1
 8006480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006484:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006488:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800648c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006490:	8812      	ldrh	r2, [r2, #0]
 8006492:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800649a:	3302      	adds	r3, #2
 800649c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80064a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064a4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80064a8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80064ac:	8812      	ldrh	r2, [r2, #0]
 80064ae:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80064b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064b6:	3302      	adds	r3, #2
 80064b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80064bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064c0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80064c4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80064c8:	7812      	ldrb	r2, [r2, #0]
 80064ca:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80064cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064d0:	3301      	adds	r3, #1
 80064d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80064d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064da:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80064de:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80064e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064e4:	3301      	adds	r3, #1
 80064e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80064ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064ee:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80064f2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80064f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064f8:	3301      	adds	r3, #1
 80064fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80064fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006502:	3308      	adds	r3, #8
 8006504:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006508:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800650c:	4618      	mov	r0, r3
 800650e:	f001 f81d 	bl	800754c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006512:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006516:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800651a:	4413      	add	r3, r2
 800651c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006520:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006524:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006528:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800652a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800652e:	3301      	adds	r3, #1
 8006530:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006534:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006538:	3301      	adds	r3, #1
 800653a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800653e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006542:	4618      	mov	r0, r3
 8006544:	f001 f802 	bl	800754c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006548:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800654c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006550:	4413      	add	r3, r2
 8006552:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8006556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800655e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006560:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006564:	3302      	adds	r3, #2
 8006566:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800656a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800656e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006572:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006574:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006578:	3302      	adds	r3, #2
 800657a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800657e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006582:	2218      	movs	r2, #24
 8006584:	2100      	movs	r1, #0
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fff0 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 800658c:	233f      	movs	r3, #63	; 0x3f
 800658e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006592:	2383      	movs	r3, #131	; 0x83
 8006594:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006598:	f107 0310 	add.w	r3, r7, #16
 800659c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80065a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80065a8:	f107 030f 	add.w	r3, r7, #15
 80065ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80065b0:	2301      	movs	r3, #1
 80065b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80065b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065ba:	2100      	movs	r1, #0
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fa5f 	bl	8007a80 <hci_send_req>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	da01      	bge.n	80065cc <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80065c8:	23ff      	movs	r3, #255	; 0xff
 80065ca:	e004      	b.n	80065d6 <aci_gap_set_discoverable+0x1ea>
  return status;
 80065cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80065d0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80065d4:	781b      	ldrb	r3, [r3, #0]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80065dc:	46bd      	mov	sp, r7
 80065de:	bdb0      	pop	{r4, r5, r7, pc}

080065e0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b0cc      	sub	sp, #304	; 0x130
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4602      	mov	r2, r0
 80065e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ec:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80065f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80065f2:	f107 0310 	add.w	r3, r7, #16
 80065f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80065fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800660c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006610:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006614:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800661c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006620:	3301      	adds	r3, #1
 8006622:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800662a:	2218      	movs	r2, #24
 800662c:	2100      	movs	r1, #0
 800662e:	4618      	mov	r0, r3
 8006630:	f000 ff9c 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006634:	233f      	movs	r3, #63	; 0x3f
 8006636:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800663a:	2385      	movs	r3, #133	; 0x85
 800663c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006640:	f107 0310 	add.w	r3, r7, #16
 8006644:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800664c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006650:	f107 030f 	add.w	r3, r7, #15
 8006654:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006658:	2301      	movs	r3, #1
 800665a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800665e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006662:	2100      	movs	r1, #0
 8006664:	4618      	mov	r0, r3
 8006666:	f001 fa0b 	bl	8007a80 <hci_send_req>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	da01      	bge.n	8006674 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006670:	23ff      	movs	r3, #255	; 0xff
 8006672:	e004      	b.n	800667e <aci_gap_set_io_capability+0x9e>
  return status;
 8006674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006678:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800667c:	781b      	ldrb	r3, [r3, #0]
}
 800667e:	4618      	mov	r0, r3
 8006680:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006688:	b5b0      	push	{r4, r5, r7, lr}
 800668a:	b0cc      	sub	sp, #304	; 0x130
 800668c:	af00      	add	r7, sp, #0
 800668e:	4605      	mov	r5, r0
 8006690:	460c      	mov	r4, r1
 8006692:	4610      	mov	r0, r2
 8006694:	4619      	mov	r1, r3
 8006696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800669e:	462a      	mov	r2, r5
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80066aa:	4622      	mov	r2, r4
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80066b6:	4602      	mov	r2, r0
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066c2:	460a      	mov	r2, r1
 80066c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80066c6:	f107 0310 	add.w	r3, r7, #16
 80066ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80066ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80066d6:	2200      	movs	r2, #0
 80066d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80066e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066e8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80066ec:	7812      	ldrb	r2, [r2, #0]
 80066ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80066f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066f4:	3301      	adds	r3, #1
 80066f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80066fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006702:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006706:	7812      	ldrb	r2, [r2, #0]
 8006708:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800670a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800670e:	3301      	adds	r3, #1
 8006710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8006714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006718:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800671c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006720:	7812      	ldrb	r2, [r2, #0]
 8006722:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006724:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006728:	3301      	adds	r3, #1
 800672a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800672e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006732:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006736:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800673a:	7812      	ldrb	r2, [r2, #0]
 800673c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800673e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006742:	3301      	adds	r3, #1
 8006744:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006750:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006752:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006756:	3301      	adds	r3, #1
 8006758:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800675c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006760:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006764:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800676a:	3301      	adds	r3, #1
 800676c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006774:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006778:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800677a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800677e:	3301      	adds	r3, #1
 8006780:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006788:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800678c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006790:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006794:	3304      	adds	r3, #4
 8006796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800679a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800679e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80067a2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80067a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067a8:	3301      	adds	r3, #1
 80067aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067b2:	2218      	movs	r2, #24
 80067b4:	2100      	movs	r1, #0
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 fed8 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 80067bc:	233f      	movs	r3, #63	; 0x3f
 80067be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80067c2:	2386      	movs	r3, #134	; 0x86
 80067c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80067c8:	f107 0310 	add.w	r3, r7, #16
 80067cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80067d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80067d8:	f107 030f 	add.w	r3, r7, #15
 80067dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80067e0:	2301      	movs	r3, #1
 80067e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067ea:	2100      	movs	r1, #0
 80067ec:	4618      	mov	r0, r3
 80067ee:	f001 f947 	bl	8007a80 <hci_send_req>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	da01      	bge.n	80067fc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80067f8:	23ff      	movs	r3, #255	; 0xff
 80067fa:	e004      	b.n	8006806 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80067fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006800:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006804:	781b      	ldrb	r3, [r3, #0]
}
 8006806:	4618      	mov	r0, r3
 8006808:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800680c:	46bd      	mov	sp, r7
 800680e:	bdb0      	pop	{r4, r5, r7, pc}

08006810 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b0cc      	sub	sp, #304	; 0x130
 8006814:	af00      	add	r7, sp, #0
 8006816:	4602      	mov	r2, r0
 8006818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006820:	6019      	str	r1, [r3, #0]
 8006822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006826:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800682a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800682c:	f107 0310 	add.w	r3, r7, #16
 8006830:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006838:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800683c:	2200      	movs	r2, #0
 800683e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006840:	2300      	movs	r3, #0
 8006842:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800684a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800684e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006852:	8812      	ldrh	r2, [r2, #0]
 8006854:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006856:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800685a:	3302      	adds	r3, #2
 800685c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8006860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006864:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006868:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006876:	3304      	adds	r3, #4
 8006878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800687c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006880:	2218      	movs	r2, #24
 8006882:	2100      	movs	r1, #0
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fe71 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 800688a:	233f      	movs	r3, #63	; 0x3f
 800688c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8006890:	2388      	movs	r3, #136	; 0x88
 8006892:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006896:	f107 0310 	add.w	r3, r7, #16
 800689a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800689e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80068a6:	f107 030f 	add.w	r3, r7, #15
 80068aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80068ae:	2301      	movs	r3, #1
 80068b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068b8:	2100      	movs	r1, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 f8e0 	bl	8007a80 <hci_send_req>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da01      	bge.n	80068ca <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80068c6:	23ff      	movs	r3, #255	; 0xff
 80068c8:	e004      	b.n	80068d4 <aci_gap_pass_key_resp+0xc4>
  return status;
 80068ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80068d2:	781b      	ldrb	r3, [r3, #0]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80068de:	b590      	push	{r4, r7, lr}
 80068e0:	b0cd      	sub	sp, #308	; 0x134
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	4604      	mov	r4, r0
 80068e6:	4608      	mov	r0, r1
 80068e8:	4611      	mov	r1, r2
 80068ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068ee:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80068fc:	4622      	mov	r2, r4
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006904:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006908:	4602      	mov	r2, r0
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006910:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006914:	460a      	mov	r2, r1
 8006916:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006918:	f107 0310 	add.w	r3, r7, #16
 800691c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006920:	f107 0308 	add.w	r3, r7, #8
 8006924:	2207      	movs	r2, #7
 8006926:	2100      	movs	r1, #0
 8006928:	4618      	mov	r0, r3
 800692a:	f000 fe1f 	bl	800756c <Osal_MemSet>
  int index_input = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006934:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006938:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800693c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006940:	7812      	ldrb	r2, [r2, #0]
 8006942:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006944:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006948:	3301      	adds	r3, #1
 800694a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800694e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006952:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006956:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800695a:	7812      	ldrb	r2, [r2, #0]
 800695c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800695e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006962:	3301      	adds	r3, #1
 8006964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006970:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006974:	7812      	ldrb	r2, [r2, #0]
 8006976:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006978:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800697c:	3301      	adds	r3, #1
 800697e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006982:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006986:	2218      	movs	r2, #24
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fdee 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006990:	233f      	movs	r3, #63	; 0x3f
 8006992:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006996:	238a      	movs	r3, #138	; 0x8a
 8006998:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800699c:	f107 0310 	add.w	r3, r7, #16
 80069a0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80069a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80069ac:	f107 0308 	add.w	r3, r7, #8
 80069b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80069b4:	2307      	movs	r3, #7
 80069b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069be:	2100      	movs	r1, #0
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 f85d 	bl	8007a80 <hci_send_req>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da01      	bge.n	80069d0 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80069cc:	23ff      	movs	r3, #255	; 0xff
 80069ce:	e02e      	b.n	8006a2e <aci_gap_init+0x150>
  if ( resp.Status )
 80069d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <aci_gap_init+0x10c>
    return resp.Status;
 80069de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	e021      	b.n	8006a2e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80069ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80069f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a08:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006a0c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006a16:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006a20:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006a2a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd90      	pop	{r4, r7, pc}

08006a38 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b0cc      	sub	sp, #304	; 0x130
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4602      	mov	r2, r0
 8006a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a48:	6019      	str	r1, [r3, #0]
 8006a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006a52:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006a54:	f107 0310 	add.w	r3, r7, #16
 8006a58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a60:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006a64:	2200      	movs	r2, #0
 8006a66:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a76:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006a7a:	7812      	ldrb	r2, [r2, #0]
 8006a7c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a82:	3301      	adds	r3, #1
 8006a84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a8c:	1c58      	adds	r0, r3, #1
 8006a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a92:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aa0:	6819      	ldr	r1, [r3, #0]
 8006aa2:	f000 fd53 	bl	800754c <Osal_MemCpy>
  index_input += AdvDataLen;
 8006aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aaa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006aba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006abe:	2218      	movs	r2, #24
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fd52 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ac8:	233f      	movs	r3, #63	; 0x3f
 8006aca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006ace:	238e      	movs	r3, #142	; 0x8e
 8006ad0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006ad4:	f107 0310 	add.w	r3, r7, #16
 8006ad8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006adc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ae0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006ae4:	f107 030f 	add.w	r3, r7, #15
 8006ae8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006af2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006af6:	2100      	movs	r1, #0
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 ffc1 	bl	8007a80 <hci_send_req>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	da01      	bge.n	8006b08 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006b04:	23ff      	movs	r3, #255	; 0xff
 8006b06:	e004      	b.n	8006b12 <aci_gap_update_adv_data+0xda>
  return status;
 8006b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006b10:	781b      	ldrb	r3, [r3, #0]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b26:	f107 0308 	add.w	r3, r7, #8
 8006b2a:	2218      	movs	r2, #24
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fd1c 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b34:	233f      	movs	r3, #63	; 0x3f
 8006b36:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006b38:	2392      	movs	r3, #146	; 0x92
 8006b3a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006b3c:	1dfb      	adds	r3, r7, #7
 8006b3e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006b40:	2301      	movs	r3, #1
 8006b42:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b44:	f107 0308 	add.w	r3, r7, #8
 8006b48:	2100      	movs	r1, #0
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 ff98 	bl	8007a80 <hci_send_req>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	da01      	bge.n	8006b5a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006b56:	23ff      	movs	r3, #255	; 0xff
 8006b58:	e000      	b.n	8006b5c <aci_gap_configure_whitelist+0x40>
  return status;
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3720      	adds	r7, #32
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b0cc      	sub	sp, #304	; 0x130
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b70:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006b74:	801a      	strh	r2, [r3, #0]
 8006b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006b7e:	460a      	mov	r2, r1
 8006b80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006b82:	f107 0310 	add.w	r3, r7, #16
 8006b86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006b92:	2200      	movs	r2, #0
 8006b94:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ba4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006ba8:	8812      	ldrh	r2, [r2, #0]
 8006baa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006bac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bbe:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006bc2:	7812      	ldrb	r2, [r2, #0]
 8006bc4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bca:	3301      	adds	r3, #1
 8006bcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006bd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bd4:	2218      	movs	r2, #24
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fcc7 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006bde:	233f      	movs	r3, #63	; 0x3f
 8006be0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8006be4:	23a5      	movs	r3, #165	; 0xa5
 8006be6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006bea:	f107 0310 	add.w	r3, r7, #16
 8006bee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006bf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006bfa:	f107 030f 	add.w	r3, r7, #15
 8006bfe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 ff36 	bl	8007a80 <hci_send_req>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da01      	bge.n	8006c1e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8006c1a:	23ff      	movs	r3, #255	; 0xff
 8006c1c:	e004      	b.n	8006c28 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8006c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c22:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006c26:	781b      	ldrb	r3, [r3, #0]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b088      	sub	sp, #32
 8006c36:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c3c:	f107 0308 	add.w	r3, r7, #8
 8006c40:	2218      	movs	r2, #24
 8006c42:	2100      	movs	r1, #0
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fc91 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c4a:	233f      	movs	r3, #63	; 0x3f
 8006c4c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006c4e:	f240 1301 	movw	r3, #257	; 0x101
 8006c52:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006c54:	1dfb      	adds	r3, r7, #7
 8006c56:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c5c:	f107 0308 	add.w	r3, r7, #8
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 ff0c 	bl	8007a80 <hci_send_req>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da01      	bge.n	8006c72 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006c6e:	23ff      	movs	r3, #255	; 0xff
 8006c70:	e000      	b.n	8006c74 <aci_gatt_init+0x42>
  return status;
 8006c72:	79fb      	ldrb	r3, [r7, #7]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006c7c:	b590      	push	{r4, r7, lr}
 8006c7e:	b0cf      	sub	sp, #316	; 0x13c
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4604      	mov	r4, r0
 8006c84:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006c88:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8006c8c:	6001      	str	r1, [r0, #0]
 8006c8e:	4610      	mov	r0, r2
 8006c90:	4619      	mov	r1, r3
 8006c92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006c96:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ca2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	701a      	strb	r2, [r3, #0]
 8006caa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006cae:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006cb2:	460a      	mov	r2, r1
 8006cb4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006cb6:	f107 0310 	add.w	r3, r7, #16
 8006cba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006cbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006cc2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d00a      	beq.n	8006ce2 <aci_gatt_add_service+0x66>
 8006ccc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006cd0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d101      	bne.n	8006cde <aci_gatt_add_service+0x62>
 8006cda:	2311      	movs	r3, #17
 8006cdc:	e002      	b.n	8006ce4 <aci_gatt_add_service+0x68>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <aci_gatt_add_service+0x68>
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	f107 0210 	add.w	r2, r7, #16
 8006ce8:	4413      	add	r3, r2
 8006cea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006cee:	f107 030c 	add.w	r3, r7, #12
 8006cf2:	2203      	movs	r2, #3
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fc38 	bl	800756c <Osal_MemSet>
  int index_input = 0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006d02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d06:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006d0a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006d0e:	7812      	ldrb	r2, [r2, #0]
 8006d10:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006d12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d16:	3301      	adds	r3, #1
 8006d18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006d1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006d20:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d002      	beq.n	8006d30 <aci_gatt_add_service+0xb4>
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d004      	beq.n	8006d38 <aci_gatt_add_service+0xbc>
 8006d2e:	e007      	b.n	8006d40 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8006d30:	2302      	movs	r3, #2
 8006d32:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006d36:	e005      	b.n	8006d44 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006d38:	2310      	movs	r3, #16
 8006d3a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006d3e:	e001      	b.n	8006d44 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006d40:	2397      	movs	r3, #151	; 0x97
 8006d42:	e06c      	b.n	8006e1e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006d44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d48:	1c58      	adds	r0, r3, #1
 8006d4a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006d4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006d52:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006d56:	6819      	ldr	r1, [r3, #0]
 8006d58:	f000 fbf8 	bl	800754c <Osal_MemCpy>
    index_input += size;
 8006d5c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006d60:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006d64:	4413      	add	r3, r2
 8006d66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8006d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d6e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006d72:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006d76:	7812      	ldrb	r2, [r2, #0]
 8006d78:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006d7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d7e:	3301      	adds	r3, #1
 8006d80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d88:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006d8c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006d90:	7812      	ldrb	r2, [r2, #0]
 8006d92:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006d94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d98:	3301      	adds	r3, #1
 8006d9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006da2:	2218      	movs	r2, #24
 8006da4:	2100      	movs	r1, #0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fbe0 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006dac:	233f      	movs	r3, #63	; 0x3f
 8006dae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006db2:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006db6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006dba:	f107 0310 	add.w	r3, r7, #16
 8006dbe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dc6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006dca:	f107 030c 	add.w	r3, r7, #12
 8006dce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006dd8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ddc:	2100      	movs	r1, #0
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fe4e 	bl	8007a80 <hci_send_req>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	da01      	bge.n	8006dee <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006dea:	23ff      	movs	r3, #255	; 0xff
 8006dec:	e017      	b.n	8006e1e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8006dee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006df2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006dfc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	e00a      	b.n	8006e1e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8006e08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e10:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006e1a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd90      	pop	{r4, r7, pc}

08006e28 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006e28:	b590      	push	{r4, r7, lr}
 8006e2a:	b0d1      	sub	sp, #324	; 0x144
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4604      	mov	r4, r0
 8006e30:	4608      	mov	r0, r1
 8006e32:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8006e36:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8006e3a:	600a      	str	r2, [r1, #0]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006e42:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006e46:	4622      	mov	r2, r4
 8006e48:	801a      	strh	r2, [r3, #0]
 8006e4a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006e4e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006e52:	4602      	mov	r2, r0
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006e5a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8006e5e:	460a      	mov	r2, r1
 8006e60:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006e62:	f107 0318 	add.w	r3, r7, #24
 8006e66:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006e6a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006e6e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d00a      	beq.n	8006e8e <aci_gatt_add_char+0x66>
 8006e78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006e7c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d101      	bne.n	8006e8a <aci_gatt_add_char+0x62>
 8006e86:	2313      	movs	r3, #19
 8006e88:	e002      	b.n	8006e90 <aci_gatt_add_char+0x68>
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e000      	b.n	8006e90 <aci_gatt_add_char+0x68>
 8006e8e:	2305      	movs	r3, #5
 8006e90:	f107 0218 	add.w	r2, r7, #24
 8006e94:	4413      	add	r3, r2
 8006e96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006e9a:	f107 0314 	add.w	r3, r7, #20
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fb62 	bl	800756c <Osal_MemSet>
  int index_input = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8006eae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006eb2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006eb6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006eba:	8812      	ldrh	r2, [r2, #0]
 8006ebc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006ebe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ec2:	3302      	adds	r3, #2
 8006ec4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006ec8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006ecc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006ed0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006ed4:	7812      	ldrb	r2, [r2, #0]
 8006ed6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006ed8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006edc:	3301      	adds	r3, #1
 8006ede:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8006ee2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006ee6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d002      	beq.n	8006ef6 <aci_gatt_add_char+0xce>
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d004      	beq.n	8006efe <aci_gatt_add_char+0xd6>
 8006ef4:	e007      	b.n	8006f06 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006efc:	e005      	b.n	8006f0a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8006efe:	2310      	movs	r3, #16
 8006f00:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006f04:	e001      	b.n	8006f0a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8006f06:	2397      	movs	r3, #151	; 0x97
 8006f08:	e091      	b.n	800702e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006f0a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006f0e:	1cd8      	adds	r0, r3, #3
 8006f10:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006f14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006f18:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006f1c:	6819      	ldr	r1, [r3, #0]
 8006f1e:	f000 fb15 	bl	800754c <Osal_MemCpy>
    index_input += size;
 8006f22:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006f26:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8006f30:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f34:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006f38:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8006f3c:	8812      	ldrh	r2, [r2, #0]
 8006f3e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006f40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f44:	3302      	adds	r3, #2
 8006f46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006f4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f4e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006f52:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006f54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f58:	3301      	adds	r3, #1
 8006f5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8006f5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f62:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006f66:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006f68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006f72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f76:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8006f7a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006f7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f80:	3301      	adds	r3, #1
 8006f82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006f86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f8a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8006f8e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006f90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f94:	3301      	adds	r3, #1
 8006f96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f9e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8006fa2:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006fa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006fa8:	3301      	adds	r3, #1
 8006faa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006fb2:	2218      	movs	r2, #24
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fad8 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fbc:	233f      	movs	r3, #63	; 0x3f
 8006fbe:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8006fc2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006fc6:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006fca:	f107 0318 	add.w	r3, r7, #24
 8006fce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006fd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006fd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006fda:	f107 0314 	add.w	r3, r7, #20
 8006fde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006fe8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006fec:	2100      	movs	r1, #0
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fd46 	bl	8007a80 <hci_send_req>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da01      	bge.n	8006ffe <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8006ffa:	23ff      	movs	r3, #255	; 0xff
 8006ffc:	e017      	b.n	800702e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8006ffe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007002:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d005      	beq.n	8007018 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800700c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	e00a      	b.n	800702e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8007018:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800701c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007020:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007024:	b29a      	uxth	r2, r3
 8007026:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800702a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007034:	46bd      	mov	sp, r7
 8007036:	bd90      	pop	{r4, r7, pc}

08007038 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007038:	b5b0      	push	{r4, r5, r7, lr}
 800703a:	b0cc      	sub	sp, #304	; 0x130
 800703c:	af00      	add	r7, sp, #0
 800703e:	4605      	mov	r5, r0
 8007040:	460c      	mov	r4, r1
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800704e:	462a      	mov	r2, r5
 8007050:	801a      	strh	r2, [r3, #0]
 8007052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007056:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800705a:	4622      	mov	r2, r4
 800705c:	801a      	strh	r2, [r3, #0]
 800705e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007062:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007066:	4602      	mov	r2, r0
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007072:	460a      	mov	r2, r1
 8007074:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007076:	f107 0310 	add.w	r3, r7, #16
 800707a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800707e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007082:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007094:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007098:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800709c:	8812      	ldrh	r2, [r2, #0]
 800709e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80070a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070a4:	3302      	adds	r3, #2
 80070a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80070aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070b2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070b6:	8812      	ldrh	r2, [r2, #0]
 80070b8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80070ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070be:	3302      	adds	r3, #2
 80070c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80070c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070cc:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80070d0:	7812      	ldrb	r2, [r2, #0]
 80070d2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80070d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070d8:	3301      	adds	r3, #1
 80070da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80070de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070e6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80070ea:	7812      	ldrb	r2, [r2, #0]
 80070ec:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80070ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070f2:	3301      	adds	r3, #1
 80070f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80070f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fc:	1d98      	adds	r0, r3, #6
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	461a      	mov	r2, r3
 800710a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800710e:	f000 fa1d 	bl	800754c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007116:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007120:	4413      	add	r3, r2
 8007122:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007126:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800712a:	2218      	movs	r2, #24
 800712c:	2100      	movs	r1, #0
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fa1c 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007134:	233f      	movs	r3, #63	; 0x3f
 8007136:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800713a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800713e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007142:	f107 0310 	add.w	r3, r7, #16
 8007146:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800714a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800714e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007152:	f107 030f 	add.w	r3, r7, #15
 8007156:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800715a:	2301      	movs	r3, #1
 800715c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007160:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007164:	2100      	movs	r1, #0
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fc8a 	bl	8007a80 <hci_send_req>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	da01      	bge.n	8007176 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007172:	23ff      	movs	r3, #255	; 0xff
 8007174:	e004      	b.n	8007180 <aci_gatt_update_char_value+0x148>
  return status;
 8007176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800717e:	781b      	ldrb	r3, [r3, #0]
}
 8007180:	4618      	mov	r0, r3
 8007182:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007186:	46bd      	mov	sp, r7
 8007188:	bdb0      	pop	{r4, r5, r7, pc}

0800718a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b0cc      	sub	sp, #304	; 0x130
 800718e:	af00      	add	r7, sp, #0
 8007190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80071a2:	4602      	mov	r2, r0
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071aa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80071ae:	460a      	mov	r2, r1
 80071b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80071b2:	f107 0310 	add.w	r3, r7, #16
 80071b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80071c2:	2200      	movs	r2, #0
 80071c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80071c6:	2300      	movs	r3, #0
 80071c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80071cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071d4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80071d8:	7812      	ldrb	r2, [r2, #0]
 80071da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80071dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071e0:	3301      	adds	r3, #1
 80071e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80071e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071ee:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80071f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071fa:	3301      	adds	r3, #1
 80071fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007204:	1c98      	adds	r0, r3, #2
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800720e:	781a      	ldrb	r2, [r3, #0]
 8007210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007218:	6819      	ldr	r1, [r3, #0]
 800721a:	f000 f997 	bl	800754c <Osal_MemCpy>
  index_input += Length;
 800721e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007222:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800722c:	4413      	add	r3, r2
 800722e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007232:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007236:	2218      	movs	r2, #24
 8007238:	2100      	movs	r1, #0
 800723a:	4618      	mov	r0, r3
 800723c:	f000 f996 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007240:	233f      	movs	r3, #63	; 0x3f
 8007242:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007246:	230c      	movs	r3, #12
 8007248:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800724c:	f107 0310 	add.w	r3, r7, #16
 8007250:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007254:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007258:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800725c:	f107 030f 	add.w	r3, r7, #15
 8007260:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007264:	2301      	movs	r3, #1
 8007266:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800726a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800726e:	2100      	movs	r1, #0
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fc05 	bl	8007a80 <hci_send_req>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	da01      	bge.n	8007280 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800727c:	23ff      	movs	r3, #255	; 0xff
 800727e:	e004      	b.n	800728a <aci_hal_write_config_data+0x100>
  return status;
 8007280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007284:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007288:	781b      	ldrb	r3, [r3, #0]
}
 800728a:	4618      	mov	r0, r3
 800728c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b0cc      	sub	sp, #304	; 0x130
 8007298:	af00      	add	r7, sp, #0
 800729a:	4602      	mov	r2, r0
 800729c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80072a4:	701a      	strb	r2, [r3, #0]
 80072a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072aa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80072ae:	460a      	mov	r2, r1
 80072b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80072b2:	f107 0310 	add.w	r3, r7, #16
 80072b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80072ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072be:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80072c2:	2200      	movs	r2, #0
 80072c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80072cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072d4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80072d8:	7812      	ldrb	r2, [r2, #0]
 80072da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80072dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072e0:	3301      	adds	r3, #1
 80072e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80072e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ea:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072ee:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80072f2:	7812      	ldrb	r2, [r2, #0]
 80072f4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80072f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072fa:	3301      	adds	r3, #1
 80072fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007304:	2218      	movs	r2, #24
 8007306:	2100      	movs	r1, #0
 8007308:	4618      	mov	r0, r3
 800730a:	f000 f92f 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 800730e:	233f      	movs	r3, #63	; 0x3f
 8007310:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007314:	230f      	movs	r3, #15
 8007316:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800731a:	f107 0310 	add.w	r3, r7, #16
 800731e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007322:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007326:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800732a:	f107 030f 	add.w	r3, r7, #15
 800732e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007332:	2301      	movs	r3, #1
 8007334:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007338:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800733c:	2100      	movs	r1, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fb9e 	bl	8007a80 <hci_send_req>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	da01      	bge.n	800734e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800734a:	23ff      	movs	r3, #255	; 0xff
 800734c:	e004      	b.n	8007358 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800734e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007352:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007356:	781b      	ldrb	r3, [r3, #0]
}
 8007358:	4618      	mov	r0, r3
 800735a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b0cc      	sub	sp, #304	; 0x130
 8007366:	af00      	add	r7, sp, #0
 8007368:	4602      	mov	r2, r0
 800736a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007372:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007374:	f107 0310 	add.w	r3, r7, #16
 8007378:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800737c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007380:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007384:	2200      	movs	r2, #0
 8007386:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007388:	2300      	movs	r3, #0
 800738a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800738e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007392:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007396:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800739a:	8812      	ldrh	r2, [r2, #0]
 800739c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800739e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073a2:	3302      	adds	r3, #2
 80073a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073ac:	2218      	movs	r2, #24
 80073ae:	2100      	movs	r1, #0
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 f8db 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x3f;
 80073b6:	233f      	movs	r3, #63	; 0x3f
 80073b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80073bc:	2318      	movs	r3, #24
 80073be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073c2:	f107 0310 	add.w	r3, r7, #16
 80073c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80073d2:	f107 030f 	add.w	r3, r7, #15
 80073d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80073da:	2301      	movs	r3, #1
 80073dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073e4:	2100      	movs	r1, #0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 fb4a 	bl	8007a80 <hci_send_req>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da01      	bge.n	80073f6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80073f2:	23ff      	movs	r3, #255	; 0xff
 80073f4:	e004      	b.n	8007400 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80073f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80073fe:	781b      	ldrb	r3, [r3, #0]
}
 8007400:	4618      	mov	r0, r3
 8007402:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b088      	sub	sp, #32
 800740e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007414:	f107 0308 	add.w	r3, r7, #8
 8007418:	2218      	movs	r2, #24
 800741a:	2100      	movs	r1, #0
 800741c:	4618      	mov	r0, r3
 800741e:	f000 f8a5 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x03;
 8007422:	2303      	movs	r3, #3
 8007424:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007426:	2303      	movs	r3, #3
 8007428:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800742a:	1dfb      	adds	r3, r7, #7
 800742c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800742e:	2301      	movs	r3, #1
 8007430:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007432:	f107 0308 	add.w	r3, r7, #8
 8007436:	2100      	movs	r1, #0
 8007438:	4618      	mov	r0, r3
 800743a:	f000 fb21 	bl	8007a80 <hci_send_req>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	da01      	bge.n	8007448 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007444:	23ff      	movs	r3, #255	; 0xff
 8007446:	e000      	b.n	800744a <hci_reset+0x40>
  return status;
 8007448:	79fb      	ldrb	r3, [r7, #7]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3720      	adds	r7, #32
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007452:	b590      	push	{r4, r7, lr}
 8007454:	b0cd      	sub	sp, #308	; 0x134
 8007456:	af00      	add	r7, sp, #0
 8007458:	4604      	mov	r4, r0
 800745a:	4608      	mov	r0, r1
 800745c:	4611      	mov	r1, r2
 800745e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007462:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007466:	4622      	mov	r2, r4
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007472:	4602      	mov	r2, r0
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800747e:	460a      	mov	r2, r1
 8007480:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007482:	f107 0310 	add.w	r3, r7, #16
 8007486:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800748a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007492:	2200      	movs	r2, #0
 8007494:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800749c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074a4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80074a8:	7812      	ldrb	r2, [r2, #0]
 80074aa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80074ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074b0:	3301      	adds	r3, #1
 80074b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80074b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074be:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80074c2:	7812      	ldrb	r2, [r2, #0]
 80074c4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80074c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074ca:	3301      	adds	r3, #1
 80074cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80074d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074d8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80074dc:	7812      	ldrb	r2, [r2, #0]
 80074de:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80074e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074e4:	3301      	adds	r3, #1
 80074e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074ee:	2218      	movs	r2, #24
 80074f0:	2100      	movs	r1, #0
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 f83a 	bl	800756c <Osal_MemSet>
  rq.ogf = 0x08;
 80074f8:	2308      	movs	r3, #8
 80074fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80074fe:	2331      	movs	r3, #49	; 0x31
 8007500:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007504:	f107 0310 	add.w	r3, r7, #16
 8007508:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800750c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007510:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007514:	f107 030f 	add.w	r3, r7, #15
 8007518:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800751c:	2301      	movs	r3, #1
 800751e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007526:	2100      	movs	r1, #0
 8007528:	4618      	mov	r0, r3
 800752a:	f000 faa9 	bl	8007a80 <hci_send_req>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	da01      	bge.n	8007538 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007534:	23ff      	movs	r3, #255	; 0xff
 8007536:	e004      	b.n	8007542 <hci_le_set_default_phy+0xf0>
  return status;
 8007538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007540:	781b      	ldrb	r3, [r3, #0]
}
 8007542:	4618      	mov	r0, r3
 8007544:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007548:	46bd      	mov	sp, r7
 800754a:	bd90      	pop	{r4, r7, pc}

0800754c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	68b9      	ldr	r1, [r7, #8]
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f002 ff21 	bl	800a3a4 <memcpy>
 8007562:	4603      	mov	r3, r0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	68b9      	ldr	r1, [r7, #8]
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f002 ff1f 	bl	800a3c0 <memset>
 8007582:	4603      	mov	r3, r0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0
  return;
 8007590:	bf00      	nop
}
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800759a:	b480      	push	{r7}
 800759c:	af00      	add	r7, sp, #0
  return;
 800759e:	bf00      	nop
}
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
  return;
 80075ac:	bf00      	nop
}
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80075b6:	b480      	push	{r7}
 80075b8:	af00      	add	r7, sp, #0
  return;
 80075ba:	bf00      	nop
}
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  return;
 80075c8:	bf00      	nop
}
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80075d2:	b480      	push	{r7}
 80075d4:	af00      	add	r7, sp, #0
  return;
 80075d6:	bf00      	nop
}
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  return;
 80075e4:	bf00      	nop
}
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80075ee:	b480      	push	{r7}
 80075f0:	af00      	add	r7, sp, #0
  return;
 80075f2:	bf00      	nop
}
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0
  return;
 8007600:	bf00      	nop
}
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800760a:	b480      	push	{r7}
 800760c:	af00      	add	r7, sp, #0
  return;
 800760e:	bf00      	nop
}
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
  return;
 800761c:	bf00      	nop
}
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007626:	b480      	push	{r7}
 8007628:	af00      	add	r7, sp, #0
  return;
 800762a:	bf00      	nop
}
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
  return;
 8007638:	bf00      	nop
}
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr

08007642 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007642:	b480      	push	{r7}
 8007644:	af00      	add	r7, sp, #0
  return;
 8007646:	bf00      	nop
}
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
  return;
 8007654:	bf00      	nop
}
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800765e:	b480      	push	{r7}
 8007660:	af00      	add	r7, sp, #0
  return;
 8007662:	bf00      	nop
}
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800766c:	b480      	push	{r7}
 800766e:	af00      	add	r7, sp, #0
  return;
 8007670:	bf00      	nop
}
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
	...

0800767c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007680:	4b04      	ldr	r3, [pc, #16]	; (8007694 <SVCCTL_Init+0x18>)
 8007682:	2200      	movs	r2, #0
 8007684:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007686:	4b04      	ldr	r3, [pc, #16]	; (8007698 <SVCCTL_Init+0x1c>)
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800768c:	f000 f806 	bl	800769c <SVCCTL_SvcInit>

  return;
 8007690:	bf00      	nop
}
 8007692:	bd80      	pop	{r7, pc}
 8007694:	2000091c 	.word	0x2000091c
 8007698:	2000093c 	.word	0x2000093c

0800769c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  BAS_Init();
 80076a0:	f7ff ff74 	bl	800758c <BAS_Init>

  BLS_Init();
 80076a4:	f7ff ff79 	bl	800759a <BLS_Init>

  CRS_STM_Init();
 80076a8:	f7ff ff7e 	bl	80075a8 <CRS_STM_Init>

  DIS_Init();
 80076ac:	f7ff ff83 	bl	80075b6 <DIS_Init>

  EDS_STM_Init();
 80076b0:	f7ff ff88 	bl	80075c4 <EDS_STM_Init>

  HIDS_Init();
 80076b4:	f7ff ff8d 	bl	80075d2 <HIDS_Init>

  HRS_Init();
 80076b8:	f7ff ff92 	bl	80075e0 <HRS_Init>

  HTS_Init();
 80076bc:	f7ff ff97 	bl	80075ee <HTS_Init>

  IAS_Init();
 80076c0:	f7ff ff9c 	bl	80075fc <IAS_Init>

  LLS_Init();
 80076c4:	f7ff ffa1 	bl	800760a <LLS_Init>

  TPS_Init();
 80076c8:	f7ff ffa6 	bl	8007618 <TPS_Init>

  MOTENV_STM_Init();
 80076cc:	f7ff ffab 	bl	8007626 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80076d0:	f7ff ffb0 	bl	8007634 <P2PS_STM_Init>

  ZDD_STM_Init();
 80076d4:	f7ff ffb5 	bl	8007642 <ZDD_STM_Init>

  OTAS_STM_Init();
 80076d8:	f7ff ffba 	bl	8007650 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80076dc:	f7ff ffc6 	bl	800766c <BVOPUS_STM_Init>

  MESH_Init();
 80076e0:	f7ff ffbd 	bl	800765e <MESH_Init>

  SVCCTL_InitCustomSvc();
 80076e4:	f002 f844 	bl	8009770 <SVCCTL_InitCustomSvc>
  
  return;
 80076e8:	bf00      	nop
}
 80076ea:	bd80      	pop	{r7, pc}

080076ec <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80076f4:	4b09      	ldr	r3, [pc, #36]	; (800771c <SVCCTL_RegisterSvcHandler+0x30>)
 80076f6:	7f1b      	ldrb	r3, [r3, #28]
 80076f8:	4619      	mov	r1, r3
 80076fa:	4a08      	ldr	r2, [pc, #32]	; (800771c <SVCCTL_RegisterSvcHandler+0x30>)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007702:	4b06      	ldr	r3, [pc, #24]	; (800771c <SVCCTL_RegisterSvcHandler+0x30>)
 8007704:	7f1b      	ldrb	r3, [r3, #28]
 8007706:	3301      	adds	r3, #1
 8007708:	b2da      	uxtb	r2, r3
 800770a:	4b04      	ldr	r3, [pc, #16]	; (800771c <SVCCTL_RegisterSvcHandler+0x30>)
 800770c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800770e:	bf00      	nop
}
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	2000091c 	.word	0x2000091c

08007720 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	3301      	adds	r3, #1
 800772c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800772e:	2300      	movs	r3, #0
 8007730:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	2bff      	cmp	r3, #255	; 0xff
 8007738:	d125      	bne.n	8007786 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	3302      	adds	r3, #2
 800773e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800774a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800774e:	d118      	bne.n	8007782 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007750:	2300      	movs	r3, #0
 8007752:	757b      	strb	r3, [r7, #21]
 8007754:	e00d      	b.n	8007772 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007756:	7d7b      	ldrb	r3, [r7, #21]
 8007758:	4a1a      	ldr	r2, [pc, #104]	; (80077c4 <SVCCTL_UserEvtRx+0xa4>)
 800775a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	4798      	blx	r3
 8007762:	4603      	mov	r3, r0
 8007764:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007766:	7dfb      	ldrb	r3, [r7, #23]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d108      	bne.n	800777e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800776c:	7d7b      	ldrb	r3, [r7, #21]
 800776e:	3301      	adds	r3, #1
 8007770:	757b      	strb	r3, [r7, #21]
 8007772:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <SVCCTL_UserEvtRx+0xa4>)
 8007774:	7f1b      	ldrb	r3, [r3, #28]
 8007776:	7d7a      	ldrb	r2, [r7, #21]
 8007778:	429a      	cmp	r2, r3
 800777a:	d3ec      	bcc.n	8007756 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800777c:	e002      	b.n	8007784 <SVCCTL_UserEvtRx+0x64>
              break;
 800777e:	bf00      	nop
          break;
 8007780:	e000      	b.n	8007784 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007782:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007784:	e000      	b.n	8007788 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007786:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b02      	cmp	r3, #2
 800778c:	d00f      	beq.n	80077ae <SVCCTL_UserEvtRx+0x8e>
 800778e:	2b02      	cmp	r3, #2
 8007790:	dc10      	bgt.n	80077b4 <SVCCTL_UserEvtRx+0x94>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <SVCCTL_UserEvtRx+0x7c>
 8007796:	2b01      	cmp	r3, #1
 8007798:	d006      	beq.n	80077a8 <SVCCTL_UserEvtRx+0x88>
 800779a:	e00b      	b.n	80077b4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 fff1 	bl	8008784 <SVCCTL_App_Notification>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75bb      	strb	r3, [r7, #22]
      break;
 80077a6:	e008      	b.n	80077ba <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80077a8:	2301      	movs	r3, #1
 80077aa:	75bb      	strb	r3, [r7, #22]
      break;
 80077ac:	e005      	b.n	80077ba <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80077ae:	2300      	movs	r3, #0
 80077b0:	75bb      	strb	r3, [r7, #22]
      break;
 80077b2:	e002      	b.n	80077ba <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80077b4:	2301      	movs	r3, #1
 80077b6:	75bb      	strb	r3, [r7, #22]
      break;
 80077b8:	bf00      	nop
  }

  return (return_status);
 80077ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	2000091c 	.word	0x2000091c

080077c8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b088      	sub	sp, #32
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80077d0:	f107 030c 	add.w	r3, r7, #12
 80077d4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	212d      	movs	r1, #45	; 0x2d
 80077e0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80077e4:	f000 fae2 	bl	8007dac <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	330b      	adds	r3, #11
 80077ec:	78db      	ldrb	r3, [r3, #3]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3720      	adds	r7, #32
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b088      	sub	sp, #32
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80077fe:	f107 030c 	add.w	r3, r7, #12
 8007802:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	210f      	movs	r1, #15
 800780e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007812:	f000 facb 	bl	8007dac <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	330b      	adds	r3, #11
 800781a:	78db      	ldrb	r3, [r3, #3]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3720      	adds	r7, #32
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800782c:	f107 030c 	add.w	r3, r7, #12
 8007830:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	2110      	movs	r1, #16
 8007838:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800783c:	f000 fab6 	bl	8007dac <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	330b      	adds	r3, #11
 8007844:	78db      	ldrb	r3, [r3, #3]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3720      	adds	r7, #32
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007850:	b480      	push	{r7}
 8007852:	b08b      	sub	sp, #44	; 0x2c
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007858:	2300      	movs	r3, #0
 800785a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007860:	2300      	movs	r3, #0
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800786c:	2300      	movs	r3, #0
 800786e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007878:	4b4a      	ldr	r3, [pc, #296]	; (80079a4 <SHCI_GetWirelessFwInfo+0x154>)
 800787a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007880:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800788a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a44      	ldr	r2, [pc, #272]	; (80079a8 <SHCI_GetWirelessFwInfo+0x158>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d10f      	bne.n	80078bc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e01a      	b.n	80078f2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80078c4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80078c8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	0e1b      	lsrs	r3, r3, #24
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	0c1b      	lsrs	r3, r3, #16
 8007900:	b2da      	uxtb	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	0a1b      	lsrs	r3, r3, #8
 800790a:	b2da      	uxtb	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	091b      	lsrs	r3, r3, #4
 8007914:	b2db      	uxtb	r3, r3
 8007916:	f003 030f 	and.w	r3, r3, #15
 800791a:	b2da      	uxtb	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	b2da      	uxtb	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800792e:	6a3b      	ldr	r3, [r7, #32]
 8007930:	0e1b      	lsrs	r3, r3, #24
 8007932:	b2da      	uxtb	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	0c1b      	lsrs	r3, r3, #16
 800793c:	b2da      	uxtb	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007942:	6a3b      	ldr	r3, [r7, #32]
 8007944:	0a1b      	lsrs	r3, r3, #8
 8007946:	b2da      	uxtb	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	b2da      	uxtb	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	b2da      	uxtb	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	0e1b      	lsrs	r3, r3, #24
 8007960:	b2da      	uxtb	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	0c1b      	lsrs	r3, r3, #16
 800796a:	b2da      	uxtb	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	0a1b      	lsrs	r3, r3, #8
 8007974:	b2da      	uxtb	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	0e1b      	lsrs	r3, r3, #24
 800797e:	b2da      	uxtb	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	0c1b      	lsrs	r3, r3, #16
 8007988:	b2da      	uxtb	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	b2da      	uxtb	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	372c      	adds	r7, #44	; 0x2c
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	58004000 	.word	0x58004000
 80079a8:	a94656b9 	.word	0xa94656b9

080079ac <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	4a08      	ldr	r2, [pc, #32]	; (80079dc <hci_init+0x30>)
 80079bc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80079be:	4a08      	ldr	r2, [pc, #32]	; (80079e0 <hci_init+0x34>)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80079c4:	4806      	ldr	r0, [pc, #24]	; (80079e0 <hci_init+0x34>)
 80079c6:	f000 f973 	bl	8007cb0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f8d4 	bl	8007b7c <TlInit>

  return;
 80079d4:	bf00      	nop
}
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	20000ba8 	.word	0x20000ba8
 80079e0:	20000b80 	.word	0x20000b80

080079e4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80079ea:	4822      	ldr	r0, [pc, #136]	; (8007a74 <hci_user_evt_proc+0x90>)
 80079ec:	f000 fd50 	bl	8008490 <LST_is_empty>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d12b      	bne.n	8007a4e <hci_user_evt_proc+0x6a>
 80079f6:	4b20      	ldr	r3, [pc, #128]	; (8007a78 <hci_user_evt_proc+0x94>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d027      	beq.n	8007a4e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80079fe:	f107 030c 	add.w	r3, r7, #12
 8007a02:	4619      	mov	r1, r3
 8007a04:	481b      	ldr	r0, [pc, #108]	; (8007a74 <hci_user_evt_proc+0x90>)
 8007a06:	f000 fdd2 	bl	80085ae <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007a0a:	4b1c      	ldr	r3, [pc, #112]	; (8007a7c <hci_user_evt_proc+0x98>)
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00c      	beq.n	8007a2c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007a16:	2301      	movs	r3, #1
 8007a18:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007a1a:	4b18      	ldr	r3, [pc, #96]	; (8007a7c <hci_user_evt_proc+0x98>)
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	1d3a      	adds	r2, r7, #4
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007a24:	793a      	ldrb	r2, [r7, #4]
 8007a26:	4b14      	ldr	r3, [pc, #80]	; (8007a78 <hci_user_evt_proc+0x94>)
 8007a28:	701a      	strb	r2, [r3, #0]
 8007a2a:	e002      	b.n	8007a32 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007a2c:	4b12      	ldr	r3, [pc, #72]	; (8007a78 <hci_user_evt_proc+0x94>)
 8007a2e:	2201      	movs	r2, #1
 8007a30:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007a32:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <hci_user_evt_proc+0x94>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d004      	beq.n	8007a44 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 fc03 	bl	8008248 <TL_MM_EvtDone>
 8007a42:	e004      	b.n	8007a4e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4619      	mov	r1, r3
 8007a48:	480a      	ldr	r0, [pc, #40]	; (8007a74 <hci_user_evt_proc+0x90>)
 8007a4a:	f000 fd43 	bl	80084d4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007a4e:	4809      	ldr	r0, [pc, #36]	; (8007a74 <hci_user_evt_proc+0x90>)
 8007a50:	f000 fd1e 	bl	8008490 <LST_is_empty>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d107      	bne.n	8007a6a <hci_user_evt_proc+0x86>
 8007a5a:	4b07      	ldr	r3, [pc, #28]	; (8007a78 <hci_user_evt_proc+0x94>)
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007a62:	4804      	ldr	r0, [pc, #16]	; (8007a74 <hci_user_evt_proc+0x90>)
 8007a64:	f001 fcee 	bl	8009444 <hci_notify_asynch_evt>
  }


  return;
 8007a68:	bf00      	nop
 8007a6a:	bf00      	nop
}
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	20000944 	.word	0x20000944
 8007a78:	20000950 	.word	0x20000950
 8007a7c:	20000b80 	.word	0x20000b80

08007a80 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	f000 f8cb 	bl	8007c28 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007a92:	2300      	movs	r3, #0
 8007a94:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	885b      	ldrh	r3, [r3, #2]
 8007a9a:	b21b      	sxth	r3, r3
 8007a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aa0:	b21a      	sxth	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	029b      	lsls	r3, r3, #10
 8007aa8:	b21b      	sxth	r3, r3
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	b21b      	sxth	r3, r3
 8007aae:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	b2d9      	uxtb	r1, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689a      	ldr	r2, [r3, #8]
 8007aba:	8bbb      	ldrh	r3, [r7, #28]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f88d 	bl	8007bdc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007ac2:	e04e      	b.n	8007b62 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007ac4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007ac8:	f001 fcd3 	bl	8009472 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007acc:	e043      	b.n	8007b56 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007ace:	f107 030c 	add.w	r3, r7, #12
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4828      	ldr	r0, [pc, #160]	; (8007b78 <hci_send_req+0xf8>)
 8007ad6:	f000 fd6a 	bl	80085ae <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	7a5b      	ldrb	r3, [r3, #9]
 8007ade:	2b0f      	cmp	r3, #15
 8007ae0:	d114      	bne.n	8007b0c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	330b      	adds	r3, #11
 8007ae6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	885b      	ldrh	r3, [r3, #2]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	8bba      	ldrh	r2, [r7, #28]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d104      	bne.n	8007afe <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	7812      	ldrb	r2, [r2, #0]
 8007afc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d027      	beq.n	8007b56 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007b06:	2301      	movs	r3, #1
 8007b08:	77fb      	strb	r3, [r7, #31]
 8007b0a:	e024      	b.n	8007b56 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	330b      	adds	r3, #11
 8007b10:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	8bba      	ldrh	r2, [r7, #28]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d114      	bne.n	8007b4a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	7a9b      	ldrb	r3, [r3, #10]
 8007b24:	3b03      	subs	r3, #3
 8007b26:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	695a      	ldr	r2, [r3, #20]
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	bfa8      	it	ge
 8007b32:	461a      	movge	r2, r3
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6918      	ldr	r0, [r3, #16]
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	1cd9      	adds	r1, r3, #3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	461a      	mov	r2, r3
 8007b46:	f002 fc2d 	bl	800a3a4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007b52:	2301      	movs	r3, #1
 8007b54:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007b56:	4808      	ldr	r0, [pc, #32]	; (8007b78 <hci_send_req+0xf8>)
 8007b58:	f000 fc9a 	bl	8008490 <LST_is_empty>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0b5      	beq.n	8007ace <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007b62:	7ffb      	ldrb	r3, [r7, #31]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0ad      	beq.n	8007ac4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007b68:	2001      	movs	r0, #1
 8007b6a:	f000 f85d 	bl	8007c28 <NotifyCmdStatus>

  return 0;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3720      	adds	r7, #32
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20000ba0 	.word	0x20000ba0

08007b7c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007b84:	480f      	ldr	r0, [pc, #60]	; (8007bc4 <TlInit+0x48>)
 8007b86:	f000 fc73 	bl	8008470 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007b8a:	4a0f      	ldr	r2, [pc, #60]	; (8007bc8 <TlInit+0x4c>)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007b90:	480e      	ldr	r0, [pc, #56]	; (8007bcc <TlInit+0x50>)
 8007b92:	f000 fc6d 	bl	8008470 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007b96:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <TlInit+0x54>)
 8007b98:	2201      	movs	r2, #1
 8007b9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007b9c:	4b0d      	ldr	r3, [pc, #52]	; (8007bd4 <TlInit+0x58>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007ba8:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <TlInit+0x5c>)
 8007baa:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007bac:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <TlInit+0x58>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f107 0208 	add.w	r2, r7, #8
 8007bb4:	4610      	mov	r0, r2
 8007bb6:	4798      	blx	r3
  }

  return;
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
}
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20000ba0 	.word	0x20000ba0
 8007bc8:	2000094c 	.word	0x2000094c
 8007bcc:	20000944 	.word	0x20000944
 8007bd0:	20000950 	.word	0x20000950
 8007bd4:	20000b80 	.word	0x20000b80
 8007bd8:	08007c69 	.word	0x08007c69

08007bdc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	603a      	str	r2, [r7, #0]
 8007be6:	80fb      	strh	r3, [r7, #6]
 8007be8:	460b      	mov	r3, r1
 8007bea:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007bec:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <SendCmd+0x44>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	88fa      	ldrh	r2, [r7, #6]
 8007bf2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007bf6:	4b0a      	ldr	r3, [pc, #40]	; (8007c20 <SendCmd+0x44>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	797a      	ldrb	r2, [r7, #5]
 8007bfc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007bfe:	4b08      	ldr	r3, [pc, #32]	; (8007c20 <SendCmd+0x44>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	330c      	adds	r3, #12
 8007c04:	797a      	ldrb	r2, [r7, #5]
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f002 fbcb 	bl	800a3a4 <memcpy>

  hciContext.io.Send(0,0);
 8007c0e:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <SendCmd+0x48>)
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	2100      	movs	r1, #0
 8007c14:	2000      	movs	r0, #0
 8007c16:	4798      	blx	r3

  return;
 8007c18:	bf00      	nop
}
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	2000094c 	.word	0x2000094c
 8007c24:	20000b80 	.word	0x20000b80

08007c28 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d108      	bne.n	8007c4a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007c38:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <NotifyCmdStatus+0x3c>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00d      	beq.n	8007c5c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007c40:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <NotifyCmdStatus+0x3c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2000      	movs	r0, #0
 8007c46:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007c48:	e008      	b.n	8007c5c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007c4a:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <NotifyCmdStatus+0x3c>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d004      	beq.n	8007c5c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007c52:	4b04      	ldr	r3, [pc, #16]	; (8007c64 <NotifyCmdStatus+0x3c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2001      	movs	r0, #1
 8007c58:	4798      	blx	r3
  return;
 8007c5a:	bf00      	nop
 8007c5c:	bf00      	nop
}
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	20000ba8 	.word	0x20000ba8

08007c68 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	7a5b      	ldrb	r3, [r3, #9]
 8007c74:	2b0f      	cmp	r3, #15
 8007c76:	d003      	beq.n	8007c80 <TlEvtReceived+0x18>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7a5b      	ldrb	r3, [r3, #9]
 8007c7c:	2b0e      	cmp	r3, #14
 8007c7e:	d107      	bne.n	8007c90 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007c80:	6879      	ldr	r1, [r7, #4]
 8007c82:	4809      	ldr	r0, [pc, #36]	; (8007ca8 <TlEvtReceived+0x40>)
 8007c84:	f000 fc4c 	bl	8008520 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007c88:	2000      	movs	r0, #0
 8007c8a:	f001 fbe7 	bl	800945c <hci_cmd_resp_release>
 8007c8e:	e006      	b.n	8007c9e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	4806      	ldr	r0, [pc, #24]	; (8007cac <TlEvtReceived+0x44>)
 8007c94:	f000 fc44 	bl	8008520 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007c98:	4804      	ldr	r0, [pc, #16]	; (8007cac <TlEvtReceived+0x44>)
 8007c9a:	f001 fbd3 	bl	8009444 <hci_notify_asynch_evt>
  }

  return;
 8007c9e:	bf00      	nop
}
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20000ba0 	.word	0x20000ba0
 8007cac:	20000944 	.word	0x20000944

08007cb0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a05      	ldr	r2, [pc, #20]	; (8007cd0 <hci_register_io_bus+0x20>)
 8007cbc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a04      	ldr	r2, [pc, #16]	; (8007cd4 <hci_register_io_bus+0x24>)
 8007cc2:	611a      	str	r2, [r3, #16]

  return;
 8007cc4:	bf00      	nop
}
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	08007fc1 	.word	0x08007fc1
 8007cd4:	08008029 	.word	0x08008029

08007cd8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	4a08      	ldr	r2, [pc, #32]	; (8007d08 <shci_init+0x30>)
 8007ce8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007cea:	4a08      	ldr	r2, [pc, #32]	; (8007d0c <shci_init+0x34>)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007cf0:	4806      	ldr	r0, [pc, #24]	; (8007d0c <shci_init+0x34>)
 8007cf2:	f000 f911 	bl	8007f18 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 f894 	bl	8007e28 <TlInit>

  return;
 8007d00:	bf00      	nop
}
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20000bcc 	.word	0x20000bcc
 8007d0c:	20000bac 	.word	0x20000bac

08007d10 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007d16:	4822      	ldr	r0, [pc, #136]	; (8007da0 <shci_user_evt_proc+0x90>)
 8007d18:	f000 fbba 	bl	8008490 <LST_is_empty>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d12b      	bne.n	8007d7a <shci_user_evt_proc+0x6a>
 8007d22:	4b20      	ldr	r3, [pc, #128]	; (8007da4 <shci_user_evt_proc+0x94>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d027      	beq.n	8007d7a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007d2a:	f107 030c 	add.w	r3, r7, #12
 8007d2e:	4619      	mov	r1, r3
 8007d30:	481b      	ldr	r0, [pc, #108]	; (8007da0 <shci_user_evt_proc+0x90>)
 8007d32:	f000 fc3c 	bl	80085ae <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007d36:	4b1c      	ldr	r3, [pc, #112]	; (8007da8 <shci_user_evt_proc+0x98>)
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00c      	beq.n	8007d58 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007d42:	2301      	movs	r3, #1
 8007d44:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007d46:	4b18      	ldr	r3, [pc, #96]	; (8007da8 <shci_user_evt_proc+0x98>)
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	1d3a      	adds	r2, r7, #4
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007d50:	793a      	ldrb	r2, [r7, #4]
 8007d52:	4b14      	ldr	r3, [pc, #80]	; (8007da4 <shci_user_evt_proc+0x94>)
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e002      	b.n	8007d5e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007d58:	4b12      	ldr	r3, [pc, #72]	; (8007da4 <shci_user_evt_proc+0x94>)
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007d5e:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <shci_user_evt_proc+0x94>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d004      	beq.n	8007d70 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 fa6d 	bl	8008248 <TL_MM_EvtDone>
 8007d6e:	e004      	b.n	8007d7a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4619      	mov	r1, r3
 8007d74:	480a      	ldr	r0, [pc, #40]	; (8007da0 <shci_user_evt_proc+0x90>)
 8007d76:	f000 fbad 	bl	80084d4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007d7a:	4809      	ldr	r0, [pc, #36]	; (8007da0 <shci_user_evt_proc+0x90>)
 8007d7c:	f000 fb88 	bl	8008490 <LST_is_empty>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d107      	bne.n	8007d96 <shci_user_evt_proc+0x86>
 8007d86:	4b07      	ldr	r3, [pc, #28]	; (8007da4 <shci_user_evt_proc+0x94>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007d8e:	4804      	ldr	r0, [pc, #16]	; (8007da0 <shci_user_evt_proc+0x90>)
 8007d90:	f7f9 fcee 	bl	8001770 <shci_notify_asynch_evt>
  }


  return;
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
}
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	20000954 	.word	0x20000954
 8007da4:	20000964 	.word	0x20000964
 8007da8:	20000bac 	.word	0x20000bac

08007dac <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60ba      	str	r2, [r7, #8]
 8007db4:	607b      	str	r3, [r7, #4]
 8007db6:	4603      	mov	r3, r0
 8007db8:	81fb      	strh	r3, [r7, #14]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	f000 f864 	bl	8007e8c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007dc4:	4b16      	ldr	r3, [pc, #88]	; (8007e20 <shci_send+0x74>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	89fa      	ldrh	r2, [r7, #14]
 8007dca:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007dce:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <shci_send+0x74>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	7b7a      	ldrb	r2, [r7, #13]
 8007dd4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007dd6:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <shci_send+0x74>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	330c      	adds	r3, #12
 8007ddc:	7b7a      	ldrb	r2, [r7, #13]
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f002 fadf 	bl	800a3a4 <memcpy>

  shciContext.io.Send(0,0);
 8007de6:	4b0f      	ldr	r3, [pc, #60]	; (8007e24 <shci_send+0x78>)
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2100      	movs	r1, #0
 8007dec:	2000      	movs	r0, #0
 8007dee:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007df0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007df4:	f7f9 fcd3 	bl	800179e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f103 0008 	add.w	r0, r3, #8
 8007dfe:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <shci_send+0x74>)
 8007e00:	6819      	ldr	r1, [r3, #0]
 8007e02:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <shci_send+0x74>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	789b      	ldrb	r3, [r3, #2]
 8007e08:	3303      	adds	r3, #3
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	f002 faca 	bl	800a3a4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007e10:	2001      	movs	r0, #1
 8007e12:	f000 f83b 	bl	8007e8c <Cmd_SetStatus>

  return;
 8007e16:	bf00      	nop
}
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000960 	.word	0x20000960
 8007e24:	20000bac 	.word	0x20000bac

08007e28 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007e30:	4a10      	ldr	r2, [pc, #64]	; (8007e74 <TlInit+0x4c>)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007e36:	4810      	ldr	r0, [pc, #64]	; (8007e78 <TlInit+0x50>)
 8007e38:	f000 fb1a 	bl	8008470 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	f000 f825 	bl	8007e8c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007e42:	4b0e      	ldr	r3, [pc, #56]	; (8007e7c <TlInit+0x54>)
 8007e44:	2201      	movs	r2, #1
 8007e46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007e48:	4b0d      	ldr	r3, [pc, #52]	; (8007e80 <TlInit+0x58>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00c      	beq.n	8007e6a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007e54:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <TlInit+0x5c>)
 8007e56:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007e58:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <TlInit+0x60>)
 8007e5a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007e5c:	4b08      	ldr	r3, [pc, #32]	; (8007e80 <TlInit+0x58>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f107 020c 	add.w	r2, r7, #12
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
  }

  return;
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
}
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20000960 	.word	0x20000960
 8007e78:	20000954 	.word	0x20000954
 8007e7c:	20000964 	.word	0x20000964
 8007e80:	20000bac 	.word	0x20000bac
 8007e84:	08007edd 	.word	0x08007edd
 8007e88:	08007ef5 	.word	0x08007ef5

08007e8c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10b      	bne.n	8007eb4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007e9c:	4b0d      	ldr	r3, [pc, #52]	; (8007ed4 <Cmd_SetStatus+0x48>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007ea4:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <Cmd_SetStatus+0x48>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <Cmd_SetStatus+0x4c>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007eb2:	e00b      	b.n	8007ecc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <Cmd_SetStatus+0x4c>)
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007eba:	4b06      	ldr	r3, [pc, #24]	; (8007ed4 <Cmd_SetStatus+0x48>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d004      	beq.n	8007ecc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007ec2:	4b04      	ldr	r3, [pc, #16]	; (8007ed4 <Cmd_SetStatus+0x48>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2001      	movs	r0, #1
 8007ec8:	4798      	blx	r3
  return;
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
}
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	20000bcc 	.word	0x20000bcc
 8007ed8:	2000095c 	.word	0x2000095c

08007edc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	f7f9 fc4f 	bl	8001788 <shci_cmd_resp_release>

  return;
 8007eea:	bf00      	nop
}
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	4805      	ldr	r0, [pc, #20]	; (8007f14 <TlUserEvtReceived+0x20>)
 8007f00:	f000 fb0e 	bl	8008520 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007f04:	4803      	ldr	r0, [pc, #12]	; (8007f14 <TlUserEvtReceived+0x20>)
 8007f06:	f7f9 fc33 	bl	8001770 <shci_notify_asynch_evt>

  return;
 8007f0a:	bf00      	nop
}
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	20000954 	.word	0x20000954

08007f18 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a05      	ldr	r2, [pc, #20]	; (8007f38 <shci_register_io_bus+0x20>)
 8007f24:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a04      	ldr	r2, [pc, #16]	; (8007f3c <shci_register_io_bus+0x24>)
 8007f2a:	611a      	str	r2, [r3, #16]

  return;
 8007f2c:	bf00      	nop
}
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	080080d5 	.word	0x080080d5
 8007f3c:	08008129 	.word	0x08008129

08007f40 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007f44:	f001 feb2 	bl	8009cac <HW_IPCC_Enable>

  return;
 8007f48:	bf00      	nop
}
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <TL_Init>:


void TL_Init( void )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007f50:	4b10      	ldr	r3, [pc, #64]	; (8007f94 <TL_Init+0x48>)
 8007f52:	4a11      	ldr	r2, [pc, #68]	; (8007f98 <TL_Init+0x4c>)
 8007f54:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007f56:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <TL_Init+0x48>)
 8007f58:	4a10      	ldr	r2, [pc, #64]	; (8007f9c <TL_Init+0x50>)
 8007f5a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007f5c:	4b0d      	ldr	r3, [pc, #52]	; (8007f94 <TL_Init+0x48>)
 8007f5e:	4a10      	ldr	r2, [pc, #64]	; (8007fa0 <TL_Init+0x54>)
 8007f60:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007f62:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <TL_Init+0x48>)
 8007f64:	4a0f      	ldr	r2, [pc, #60]	; (8007fa4 <TL_Init+0x58>)
 8007f66:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007f68:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <TL_Init+0x48>)
 8007f6a:	4a0f      	ldr	r2, [pc, #60]	; (8007fa8 <TL_Init+0x5c>)
 8007f6c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007f6e:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <TL_Init+0x48>)
 8007f70:	4a0e      	ldr	r2, [pc, #56]	; (8007fac <TL_Init+0x60>)
 8007f72:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007f74:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <TL_Init+0x48>)
 8007f76:	4a0e      	ldr	r2, [pc, #56]	; (8007fb0 <TL_Init+0x64>)
 8007f78:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007f7a:	4b06      	ldr	r3, [pc, #24]	; (8007f94 <TL_Init+0x48>)
 8007f7c:	4a0d      	ldr	r2, [pc, #52]	; (8007fb4 <TL_Init+0x68>)
 8007f7e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <TL_Init+0x48>)
 8007f82:	4a0d      	ldr	r2, [pc, #52]	; (8007fb8 <TL_Init+0x6c>)
 8007f84:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007f86:	4b03      	ldr	r3, [pc, #12]	; (8007f94 <TL_Init+0x48>)
 8007f88:	4a0c      	ldr	r2, [pc, #48]	; (8007fbc <TL_Init+0x70>)
 8007f8a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007f8c:	f001 fea2 	bl	8009cd4 <HW_IPCC_Init>

  return;
 8007f90:	bf00      	nop
}
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20030000 	.word	0x20030000
 8007f98:	20030028 	.word	0x20030028
 8007f9c:	20030048 	.word	0x20030048
 8007fa0:	20030058 	.word	0x20030058
 8007fa4:	20030068 	.word	0x20030068
 8007fa8:	20030070 	.word	0x20030070
 8007fac:	20030078 	.word	0x20030078
 8007fb0:	20030080 	.word	0x20030080
 8007fb4:	2003009c 	.word	0x2003009c
 8007fb8:	200300a0 	.word	0x200300a0
 8007fbc:	200300ac 	.word	0x200300ac

08007fc0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007fcc:	4811      	ldr	r0, [pc, #68]	; (8008014 <TL_BLE_Init+0x54>)
 8007fce:	f000 fa4f 	bl	8008470 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007fd2:	4b11      	ldr	r3, [pc, #68]	; (8008018 <TL_BLE_Init+0x58>)
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	4a0c      	ldr	r2, [pc, #48]	; (800801c <TL_BLE_Init+0x5c>)
 8007fec:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	4a08      	ldr	r2, [pc, #32]	; (8008014 <TL_BLE_Init+0x54>)
 8007ff2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007ff4:	f001 fe84 	bl	8009d00 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a08      	ldr	r2, [pc, #32]	; (8008020 <TL_BLE_Init+0x60>)
 8007ffe:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	4a07      	ldr	r2, [pc, #28]	; (8008024 <TL_BLE_Init+0x64>)
 8008006:	6013      	str	r3, [r2, #0]

  return 0;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	200300c8 	.word	0x200300c8
 8008018:	20030000 	.word	0x20030000
 800801c:	2000090c 	.word	0x2000090c
 8008020:	20000bd8 	.word	0x20000bd8
 8008024:	20000bdc 	.word	0x20000bdc

08008028 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008034:	4b09      	ldr	r3, [pc, #36]	; (800805c <TL_BLE_SendCmd+0x34>)
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2201      	movs	r2, #1
 800803c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800803e:	4b07      	ldr	r3, [pc, #28]	; (800805c <TL_BLE_SendCmd+0x34>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4619      	mov	r1, r3
 8008046:	2001      	movs	r0, #1
 8008048:	f000 f96c 	bl	8008324 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800804c:	f001 fe62 	bl	8009d14 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20030000 	.word	0x20030000

08008060 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008066:	e01c      	b.n	80080a2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008068:	1d3b      	adds	r3, r7, #4
 800806a:	4619      	mov	r1, r3
 800806c:	4812      	ldr	r0, [pc, #72]	; (80080b8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800806e:	f000 fa9e 	bl	80085ae <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	7a5b      	ldrb	r3, [r3, #9]
 8008076:	2b0f      	cmp	r3, #15
 8008078:	d003      	beq.n	8008082 <HW_IPCC_BLE_RxEvtNot+0x22>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	7a5b      	ldrb	r3, [r3, #9]
 800807e:	2b0e      	cmp	r3, #14
 8008080:	d105      	bne.n	800808e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4619      	mov	r1, r3
 8008086:	2002      	movs	r0, #2
 8008088:	f000 f94c 	bl	8008324 <OutputDbgTrace>
 800808c:	e004      	b.n	8008098 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4619      	mov	r1, r3
 8008092:	2003      	movs	r0, #3
 8008094:	f000 f946 	bl	8008324 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008098:	4b08      	ldr	r3, [pc, #32]	; (80080bc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	4610      	mov	r0, r2
 80080a0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80080a2:	4805      	ldr	r0, [pc, #20]	; (80080b8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80080a4:	f000 f9f4 	bl	8008490 <LST_is_empty>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0dc      	beq.n	8008068 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80080ae:	bf00      	nop
}
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	200300c8 	.word	0x200300c8
 80080bc:	20000bd8 	.word	0x20000bd8

080080c0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80080c4:	4b02      	ldr	r3, [pc, #8]	; (80080d0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4798      	blx	r3

  return;
 80080ca:	bf00      	nop
}
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	20000bdc 	.word	0x20000bdc

080080d4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80080e0:	480d      	ldr	r0, [pc, #52]	; (8008118 <TL_SYS_Init+0x44>)
 80080e2:	f000 f9c5 	bl	8008470 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80080e6:	4b0d      	ldr	r3, [pc, #52]	; (800811c <TL_SYS_Init+0x48>)
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4a08      	ldr	r2, [pc, #32]	; (8008118 <TL_SYS_Init+0x44>)
 80080f8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80080fa:	f001 fe2d 	bl	8009d58 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a07      	ldr	r2, [pc, #28]	; (8008120 <TL_SYS_Init+0x4c>)
 8008104:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	4a06      	ldr	r2, [pc, #24]	; (8008124 <TL_SYS_Init+0x50>)
 800810c:	6013      	str	r3, [r2, #0]

  return 0;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	200300d0 	.word	0x200300d0
 800811c:	20030000 	.word	0x20030000
 8008120:	20000be0 	.word	0x20000be0
 8008124:	20000be4 	.word	0x20000be4

08008128 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008134:	4b09      	ldr	r3, [pc, #36]	; (800815c <TL_SYS_SendCmd+0x34>)
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2210      	movs	r2, #16
 800813c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800813e:	4b07      	ldr	r3, [pc, #28]	; (800815c <TL_SYS_SendCmd+0x34>)
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4619      	mov	r1, r3
 8008146:	2004      	movs	r0, #4
 8008148:	f000 f8ec 	bl	8008324 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800814c:	f001 fe0e 	bl	8009d6c <HW_IPCC_SYS_SendCmd>

  return 0;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20030000 	.word	0x20030000

08008160 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008164:	4b07      	ldr	r3, [pc, #28]	; (8008184 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4619      	mov	r1, r3
 800816c:	2005      	movs	r0, #5
 800816e:	f000 f8d9 	bl	8008324 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008172:	4b05      	ldr	r3, [pc, #20]	; (8008188 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a03      	ldr	r2, [pc, #12]	; (8008184 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008178:	68d2      	ldr	r2, [r2, #12]
 800817a:	6812      	ldr	r2, [r2, #0]
 800817c:	4610      	mov	r0, r2
 800817e:	4798      	blx	r3

  return;
 8008180:	bf00      	nop
}
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20030000 	.word	0x20030000
 8008188:	20000be0 	.word	0x20000be0

0800818c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008192:	e00e      	b.n	80081b2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008194:	1d3b      	adds	r3, r7, #4
 8008196:	4619      	mov	r1, r3
 8008198:	480b      	ldr	r0, [pc, #44]	; (80081c8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800819a:	f000 fa08 	bl	80085ae <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4619      	mov	r1, r3
 80081a2:	2006      	movs	r0, #6
 80081a4:	f000 f8be 	bl	8008324 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80081a8:	4b08      	ldr	r3, [pc, #32]	; (80081cc <HW_IPCC_SYS_EvtNot+0x40>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	4610      	mov	r0, r2
 80081b0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80081b2:	4805      	ldr	r0, [pc, #20]	; (80081c8 <HW_IPCC_SYS_EvtNot+0x3c>)
 80081b4:	f000 f96c 	bl	8008490 <LST_is_empty>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0ea      	beq.n	8008194 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80081be:	bf00      	nop
}
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	200300d0 	.word	0x200300d0
 80081cc:	20000be4 	.word	0x20000be4

080081d0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80081d8:	4817      	ldr	r0, [pc, #92]	; (8008238 <TL_MM_Init+0x68>)
 80081da:	f000 f949 	bl	8008470 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80081de:	4817      	ldr	r0, [pc, #92]	; (800823c <TL_MM_Init+0x6c>)
 80081e0:	f000 f946 	bl	8008470 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80081e4:	4b16      	ldr	r3, [pc, #88]	; (8008240 <TL_MM_Init+0x70>)
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	4a16      	ldr	r2, [pc, #88]	; (8008244 <TL_MM_Init+0x74>)
 80081ea:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80081ec:	4b15      	ldr	r3, [pc, #84]	; (8008244 <TL_MM_Init+0x74>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6892      	ldr	r2, [r2, #8]
 80081f4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80081f6:	4b13      	ldr	r3, [pc, #76]	; (8008244 <TL_MM_Init+0x74>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	68d2      	ldr	r2, [r2, #12]
 80081fe:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008200:	4b10      	ldr	r3, [pc, #64]	; (8008244 <TL_MM_Init+0x74>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a0c      	ldr	r2, [pc, #48]	; (8008238 <TL_MM_Init+0x68>)
 8008206:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008208:	4b0e      	ldr	r3, [pc, #56]	; (8008244 <TL_MM_Init+0x74>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008212:	4b0c      	ldr	r3, [pc, #48]	; (8008244 <TL_MM_Init+0x74>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6852      	ldr	r2, [r2, #4]
 800821a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800821c:	4b09      	ldr	r3, [pc, #36]	; (8008244 <TL_MM_Init+0x74>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6912      	ldr	r2, [r2, #16]
 8008224:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008226:	4b07      	ldr	r3, [pc, #28]	; (8008244 <TL_MM_Init+0x74>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	6952      	ldr	r2, [r2, #20]
 800822e:	619a      	str	r2, [r3, #24]

  return;
 8008230:	bf00      	nop
}
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	200300b8 	.word	0x200300b8
 800823c:	20000bd0 	.word	0x20000bd0
 8008240:	20030000 	.word	0x20030000
 8008244:	20000be8 	.word	0x20000be8

08008248 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	4807      	ldr	r0, [pc, #28]	; (8008270 <TL_MM_EvtDone+0x28>)
 8008254:	f000 f964 	bl	8008520 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	2000      	movs	r0, #0
 800825c:	f000 f862 	bl	8008324 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008260:	4804      	ldr	r0, [pc, #16]	; (8008274 <TL_MM_EvtDone+0x2c>)
 8008262:	f001 fda9 	bl	8009db8 <HW_IPCC_MM_SendFreeBuf>

  return;
 8008266:	bf00      	nop
}
 8008268:	3708      	adds	r7, #8
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000bd0 	.word	0x20000bd0
 8008274:	08008279 	.word	0x08008279

08008278 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800827e:	e00c      	b.n	800829a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008280:	1d3b      	adds	r3, r7, #4
 8008282:	4619      	mov	r1, r3
 8008284:	480a      	ldr	r0, [pc, #40]	; (80082b0 <SendFreeBuf+0x38>)
 8008286:	f000 f992 	bl	80085ae <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800828a:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <SendFreeBuf+0x3c>)
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	4611      	mov	r1, r2
 8008294:	4618      	mov	r0, r3
 8008296:	f000 f943 	bl	8008520 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800829a:	4805      	ldr	r0, [pc, #20]	; (80082b0 <SendFreeBuf+0x38>)
 800829c:	f000 f8f8 	bl	8008490 <LST_is_empty>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0ec      	beq.n	8008280 <SendFreeBuf+0x8>
  }

  return;
 80082a6:	bf00      	nop
}
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20000bd0 	.word	0x20000bd0
 80082b4:	20030000 	.word	0x20030000

080082b8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80082bc:	4805      	ldr	r0, [pc, #20]	; (80082d4 <TL_TRACES_Init+0x1c>)
 80082be:	f000 f8d7 	bl	8008470 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80082c2:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <TL_TRACES_Init+0x20>)
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	4a03      	ldr	r2, [pc, #12]	; (80082d4 <TL_TRACES_Init+0x1c>)
 80082c8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80082ca:	f001 fdab 	bl	8009e24 <HW_IPCC_TRACES_Init>

  return;
 80082ce:	bf00      	nop
}
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	200300c0 	.word	0x200300c0
 80082d8:	20030000 	.word	0x20030000

080082dc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80082e2:	e008      	b.n	80082f6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80082e4:	1d3b      	adds	r3, r7, #4
 80082e6:	4619      	mov	r1, r3
 80082e8:	4808      	ldr	r0, [pc, #32]	; (800830c <HW_IPCC_TRACES_EvtNot+0x30>)
 80082ea:	f000 f960 	bl	80085ae <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 f80d 	bl	8008310 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80082f6:	4805      	ldr	r0, [pc, #20]	; (800830c <HW_IPCC_TRACES_EvtNot+0x30>)
 80082f8:	f000 f8ca 	bl	8008490 <LST_is_empty>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0f0      	beq.n	80082e4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008302:	bf00      	nop
}
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	200300c0 	.word	0x200300c0

08008310 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008324:	b480      	push	{r7}
 8008326:	b085      	sub	sp, #20
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	6039      	str	r1, [r7, #0]
 800832e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	2b06      	cmp	r3, #6
 8008334:	d845      	bhi.n	80083c2 <OutputDbgTrace+0x9e>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <OutputDbgTrace+0x18>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008359 	.word	0x08008359
 8008340:	0800837d 	.word	0x0800837d
 8008344:	08008383 	.word	0x08008383
 8008348:	08008397 	.word	0x08008397
 800834c:	080083a3 	.word	0x080083a3
 8008350:	080083a9 	.word	0x080083a9
 8008354:	080083b7 	.word	0x080083b7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	7a5b      	ldrb	r3, [r3, #9]
 8008360:	2bff      	cmp	r3, #255	; 0xff
 8008362:	d005      	beq.n	8008370 <OutputDbgTrace+0x4c>
 8008364:	2bff      	cmp	r3, #255	; 0xff
 8008366:	dc05      	bgt.n	8008374 <OutputDbgTrace+0x50>
 8008368:	2b0e      	cmp	r3, #14
 800836a:	d005      	beq.n	8008378 <OutputDbgTrace+0x54>
 800836c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800836e:	e001      	b.n	8008374 <OutputDbgTrace+0x50>
          break;
 8008370:	bf00      	nop
 8008372:	e027      	b.n	80083c4 <OutputDbgTrace+0xa0>
          break;
 8008374:	bf00      	nop
 8008376:	e025      	b.n	80083c4 <OutputDbgTrace+0xa0>
          break;
 8008378:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800837a:	e023      	b.n	80083c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008380:	e020      	b.n	80083c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	7a5b      	ldrb	r3, [r3, #9]
 800838a:	2b0e      	cmp	r3, #14
 800838c:	d001      	beq.n	8008392 <OutputDbgTrace+0x6e>
 800838e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008390:	e000      	b.n	8008394 <OutputDbgTrace+0x70>
          break;
 8008392:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008394:	e016      	b.n	80083c4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	7a5b      	ldrb	r3, [r3, #9]
 800839e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80083a0:	e010      	b.n	80083c4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80083a6:	e00d      	b.n	80083c4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	7a5b      	ldrb	r3, [r3, #9]
 80083b0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80083b2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80083b4:	e006      	b.n	80083c4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	7a5b      	ldrb	r3, [r3, #9]
 80083be:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80083c0:	e000      	b.n	80083c4 <OutputDbgTrace+0xa0>

    default:
      break;
 80083c2:	bf00      	nop
  }

  return;
 80083c4:	bf00      	nop
}
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 80083dc:	215c      	movs	r1, #92	; 0x5c
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f002 f89a 	bl	800a518 <strrchr>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 80083ea:	215c      	movs	r1, #92	; 0x5c
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f002 f893 	bl	800a518 <strrchr>
 80083f2:	4603      	mov	r3, r0
 80083f4:	3301      	adds	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	e00d      	b.n	8008416 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 80083fa:	212f      	movs	r1, #47	; 0x2f
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f002 f88b 	bl	800a518 <strrchr>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d006      	beq.n	8008416 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8008408:	212f      	movs	r1, #47	; 0x2f
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f002 f884 	bl	800a518 <strrchr>
 8008410:	4603      	mov	r3, r0
 8008412:	3301      	adds	r3, #1
 8008414:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008416:	68fb      	ldr	r3, [r7, #12]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3710      	adds	r7, #16
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}

08008420 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800842a:	4b0f      	ldr	r3, [pc, #60]	; (8008468 <OTP_Read+0x48>)
 800842c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800842e:	e002      	b.n	8008436 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3b08      	subs	r3, #8
 8008434:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3307      	adds	r3, #7
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	79fa      	ldrb	r2, [r7, #7]
 800843e:	429a      	cmp	r2, r3
 8008440:	d003      	beq.n	800844a <OTP_Read+0x2a>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	4a09      	ldr	r2, [pc, #36]	; (800846c <OTP_Read+0x4c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d1f2      	bne.n	8008430 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	3307      	adds	r3, #7
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	79fa      	ldrb	r2, [r7, #7]
 8008452:	429a      	cmp	r2, r3
 8008454:	d001      	beq.n	800845a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800845a:	68fb      	ldr	r3, [r7, #12]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	1fff73f8 	.word	0x1fff73f8
 800846c:	1fff7000 	.word	0x1fff7000

08008470 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	605a      	str	r2, [r3, #4]
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008498:	f3ef 8310 	mrs	r3, PRIMASK
 800849c:	60fb      	str	r3, [r7, #12]
  return(result);
 800849e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80084a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80084a2:	b672      	cpsid	i
}
 80084a4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d102      	bne.n	80084b6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80084b0:	2301      	movs	r3, #1
 80084b2:	75fb      	strb	r3, [r7, #23]
 80084b4:	e001      	b.n	80084ba <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80084b6:	2300      	movs	r3, #0
 80084b8:	75fb      	strb	r3, [r7, #23]
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f383 8810 	msr	PRIMASK, r3
}
 80084c4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	371c      	adds	r7, #28
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084de:	f3ef 8310 	mrs	r3, PRIMASK
 80084e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80084e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80084e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80084e8:	b672      	cpsid	i
}
 80084ea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	605a      	str	r2, [r3, #4]
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f383 8810 	msr	PRIMASK, r3
}
 8008512:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008514:	bf00      	nop
 8008516:	371c      	adds	r7, #28
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800852a:	f3ef 8310 	mrs	r3, PRIMASK
 800852e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008530:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008532:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008534:	b672      	cpsid	i
}
 8008536:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f383 8810 	msr	PRIMASK, r3
}
 800855e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008560:	bf00      	nop
 8008562:	371c      	adds	r7, #28
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008574:	f3ef 8310 	mrs	r3, PRIMASK
 8008578:	60fb      	str	r3, [r7, #12]
  return(result);
 800857a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800857c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800857e:	b672      	cpsid	i
}
 8008580:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	6812      	ldr	r2, [r2, #0]
 800858a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6852      	ldr	r2, [r2, #4]
 8008594:	605a      	str	r2, [r3, #4]
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	f383 8810 	msr	PRIMASK, r3
}
 80085a0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80085a2:	bf00      	nop
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b086      	sub	sp, #24
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
 80085b6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b8:	f3ef 8310 	mrs	r3, PRIMASK
 80085bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80085be:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80085c2:	b672      	cpsid	i
}
 80085c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7ff ffca 	bl	800856c <LST_remove_node>
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f383 8810 	msr	PRIMASK, r3
}
 80085e2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80085e4:	bf00      	nop
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80085f0:	4b03      	ldr	r3, [pc, #12]	; (8008600 <LL_FLASH_GetUDN+0x14>)
 80085f2:	681b      	ldr	r3, [r3, #0]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	1fff7580 	.word	0x1fff7580

08008604 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008604:	b480      	push	{r7}
 8008606:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008608:	4b03      	ldr	r3, [pc, #12]	; (8008618 <LL_FLASH_GetDeviceID+0x14>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	b2db      	uxtb	r3, r3
}
 800860e:	4618      	mov	r0, r3
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	1fff7584 	.word	0x1fff7584

0800861c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008620:	4b03      	ldr	r3, [pc, #12]	; (8008630 <LL_FLASH_GetSTCompanyID+0x14>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	0a1b      	lsrs	r3, r3, #8
}
 8008626:	4618      	mov	r0, r3
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	1fff7584 	.word	0x1fff7584

08008634 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008634:	b5b0      	push	{r4, r5, r7, lr}
 8008636:	b090      	sub	sp, #64	; 0x40
 8008638:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800863a:	2392      	movs	r3, #146	; 0x92
 800863c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008640:	4b45      	ldr	r3, [pc, #276]	; (8008758 <APP_BLE_Init+0x124>)
 8008642:	1d3c      	adds	r4, r7, #4
 8008644:	461d      	mov	r5, r3
 8008646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800864a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800864c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800864e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008652:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008656:	c403      	stmia	r4!, {r0, r1}
 8008658:	7022      	strb	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800865a:	f000 fb37 	bl	8008ccc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800865e:	2101      	movs	r1, #1
 8008660:	2002      	movs	r0, #2
 8008662:	f001 fc07 	bl	8009e74 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008666:	4a3d      	ldr	r2, [pc, #244]	; (800875c <APP_BLE_Init+0x128>)
 8008668:	2100      	movs	r1, #0
 800866a:	2002      	movs	r0, #2
 800866c:	f001 fd2e 	bl	800a0cc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008670:	1d3b      	adds	r3, r7, #4
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff f8a8 	bl	80077c8 <SHCI_C2_BLE_Init>
 8008678:	4603      	mov	r3, r0
 800867a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800867e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008682:	2b00      	cmp	r3, #0
 8008684:	d012      	beq.n	80086ac <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8008686:	4836      	ldr	r0, [pc, #216]	; (8008760 <APP_BLE_Init+0x12c>)
 8008688:	f7ff fea2 	bl	80083d0 <DbgTraceGetFileName>
 800868c:	4601      	mov	r1, r0
 800868e:	f240 1347 	movw	r3, #327	; 0x147
 8008692:	4a34      	ldr	r2, [pc, #208]	; (8008764 <APP_BLE_Init+0x130>)
 8008694:	4834      	ldr	r0, [pc, #208]	; (8008768 <APP_BLE_Init+0x134>)
 8008696:	f001 fe9b 	bl	800a3d0 <iprintf>
 800869a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800869e:	4619      	mov	r1, r3
 80086a0:	4832      	ldr	r0, [pc, #200]	; (800876c <APP_BLE_Init+0x138>)
 80086a2:	f001 fe95 	bl	800a3d0 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80086a6:	f7fa f8a5 	bl	80027f4 <Error_Handler>
 80086aa:	e00c      	b.n	80086c6 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80086ac:	482c      	ldr	r0, [pc, #176]	; (8008760 <APP_BLE_Init+0x12c>)
 80086ae:	f7ff fe8f 	bl	80083d0 <DbgTraceGetFileName>
 80086b2:	4601      	mov	r1, r0
 80086b4:	f240 134d 	movw	r3, #333	; 0x14d
 80086b8:	4a2a      	ldr	r2, [pc, #168]	; (8008764 <APP_BLE_Init+0x130>)
 80086ba:	482b      	ldr	r0, [pc, #172]	; (8008768 <APP_BLE_Init+0x134>)
 80086bc:	f001 fe88 	bl	800a3d0 <iprintf>
 80086c0:	482b      	ldr	r0, [pc, #172]	; (8008770 <APP_BLE_Init+0x13c>)
 80086c2:	f001 fe85 	bl	800a3d0 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80086c6:	f000 fb17 	bl	8008cf8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80086ca:	f7fe ffd7 	bl	800767c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80086ce:	4b29      	ldr	r3, [pc, #164]	; (8008774 <APP_BLE_Init+0x140>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80086d6:	4b27      	ldr	r3, [pc, #156]	; (8008774 <APP_BLE_Init+0x140>)
 80086d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80086dc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80086de:	4a26      	ldr	r2, [pc, #152]	; (8008778 <APP_BLE_Init+0x144>)
 80086e0:	2100      	movs	r1, #0
 80086e2:	2001      	movs	r0, #1
 80086e4:	f001 fcf2 	bl	800a0cc <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80086e8:	2006      	movs	r0, #6
 80086ea:	f7fe fe3a 	bl	8007362 <aci_hal_set_radio_activity_mask>
 80086ee:	4603      	mov	r3, r0
 80086f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 80086f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d010      	beq.n	800871e <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 80086fc:	4818      	ldr	r0, [pc, #96]	; (8008760 <APP_BLE_Init+0x12c>)
 80086fe:	f7ff fe67 	bl	80083d0 <DbgTraceGetFileName>
 8008702:	4601      	mov	r1, r0
 8008704:	f240 1371 	movw	r3, #369	; 0x171
 8008708:	4a16      	ldr	r2, [pc, #88]	; (8008764 <APP_BLE_Init+0x130>)
 800870a:	4817      	ldr	r0, [pc, #92]	; (8008768 <APP_BLE_Init+0x134>)
 800870c:	f001 fe60 	bl	800a3d0 <iprintf>
 8008710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008714:	4619      	mov	r1, r3
 8008716:	4819      	ldr	r0, [pc, #100]	; (800877c <APP_BLE_Init+0x148>)
 8008718:	f001 fe5a 	bl	800a3d0 <iprintf>
 800871c:	e00c      	b.n	8008738 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800871e:	4810      	ldr	r0, [pc, #64]	; (8008760 <APP_BLE_Init+0x12c>)
 8008720:	f7ff fe56 	bl	80083d0 <DbgTraceGetFileName>
 8008724:	4601      	mov	r1, r0
 8008726:	f240 1375 	movw	r3, #373	; 0x175
 800872a:	4a0e      	ldr	r2, [pc, #56]	; (8008764 <APP_BLE_Init+0x130>)
 800872c:	480e      	ldr	r0, [pc, #56]	; (8008768 <APP_BLE_Init+0x134>)
 800872e:	f001 fe4f 	bl	800a3d0 <iprintf>
 8008732:	4813      	ldr	r0, [pc, #76]	; (8008780 <APP_BLE_Init+0x14c>)
 8008734:	f001 fe4c 	bl	800a3d0 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008738:	f000 ffb2 	bl	80096a0 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800873c:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <APP_BLE_Init+0x140>)
 800873e:	2200      	movs	r2, #0
 8008740:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008742:	4b0c      	ldr	r3, [pc, #48]	; (8008774 <APP_BLE_Init+0x140>)
 8008744:	2200      	movs	r2, #0
 8008746:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008748:	2001      	movs	r0, #1
 800874a:	f000 fd69 	bl	8009220 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800874e:	bf00      	nop
}
 8008750:	3740      	adds	r7, #64	; 0x40
 8008752:	46bd      	mov	sp, r7
 8008754:	bdb0      	pop	{r4, r5, r7, pc}
 8008756:	bf00      	nop
 8008758:	0800c7e8 	.word	0x0800c7e8
 800875c:	080079e5 	.word	0x080079e5
 8008760:	0800c6dc 	.word	0x0800c6dc
 8008764:	0800d7dc 	.word	0x0800d7dc
 8008768:	0800c6f8 	.word	0x0800c6f8
 800876c:	0800c70c 	.word	0x0800c70c
 8008770:	0800c744 	.word	0x0800c744
 8008774:	20000bf4 	.word	0x20000bf4
 8008778:	080093a5 	.word	0x080093a5
 800877c:	0800c76c 	.word	0x0800c76c
 8008780:	0800c7b0 	.word	0x0800c7b0

08008784 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008784:	b5b0      	push	{r4, r5, r7, lr}
 8008786:	b08e      	sub	sp, #56	; 0x38
 8008788:	af04      	add	r7, sp, #16
 800878a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800878c:	2392      	movs	r3, #146	; 0x92
 800878e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	3301      	adds	r3, #1
 8008796:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2bff      	cmp	r3, #255	; 0xff
 800879e:	f000 811d 	beq.w	80089dc <SVCCTL_App_Notification+0x258>
 80087a2:	2bff      	cmp	r3, #255	; 0xff
 80087a4:	f300 8269 	bgt.w	8008c7a <SVCCTL_App_Notification+0x4f6>
 80087a8:	2b05      	cmp	r3, #5
 80087aa:	d002      	beq.n	80087b2 <SVCCTL_App_Notification+0x2e>
 80087ac:	2b3e      	cmp	r3, #62	; 0x3e
 80087ae:	d042      	beq.n	8008836 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80087b0:	e263      	b.n	8008c7a <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	3302      	adds	r3, #2
 80087b6:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	4bb1      	ldr	r3, [pc, #708]	; (8008a88 <SVCCTL_App_Notification+0x304>)
 80087c2:	8adb      	ldrh	r3, [r3, #22]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d128      	bne.n	800881a <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80087c8:	4baf      	ldr	r3, [pc, #700]	; (8008a88 <SVCCTL_App_Notification+0x304>)
 80087ca:	2200      	movs	r2, #0
 80087cc:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80087ce:	4bae      	ldr	r3, [pc, #696]	; (8008a88 <SVCCTL_App_Notification+0x304>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 80087d6:	48ad      	ldr	r0, [pc, #692]	; (8008a8c <SVCCTL_App_Notification+0x308>)
 80087d8:	f7ff fdfa 	bl	80083d0 <DbgTraceGetFileName>
 80087dc:	4601      	mov	r1, r0
 80087de:	f240 13b9 	movw	r3, #441	; 0x1b9
 80087e2:	4aab      	ldr	r2, [pc, #684]	; (8008a90 <SVCCTL_App_Notification+0x30c>)
 80087e4:	48ab      	ldr	r0, [pc, #684]	; (8008a94 <SVCCTL_App_Notification+0x310>)
 80087e6:	f001 fdf3 	bl	800a3d0 <iprintf>
 80087ea:	48ab      	ldr	r0, [pc, #684]	; (8008a98 <SVCCTL_App_Notification+0x314>)
 80087ec:	f001 fe8c 	bl	800a508 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 80087f0:	48a6      	ldr	r0, [pc, #664]	; (8008a8c <SVCCTL_App_Notification+0x308>)
 80087f2:	f7ff fded 	bl	80083d0 <DbgTraceGetFileName>
 80087f6:	4601      	mov	r1, r0
 80087f8:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 80087fc:	4aa4      	ldr	r2, [pc, #656]	; (8008a90 <SVCCTL_App_Notification+0x30c>)
 80087fe:	48a5      	ldr	r0, [pc, #660]	; (8008a94 <SVCCTL_App_Notification+0x310>)
 8008800:	f001 fde6 	bl	800a3d0 <iprintf>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800880a:	b29b      	uxth	r3, r3
 800880c:	4619      	mov	r1, r3
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	78db      	ldrb	r3, [r3, #3]
 8008812:	461a      	mov	r2, r3
 8008814:	48a1      	ldr	r0, [pc, #644]	; (8008a9c <SVCCTL_App_Notification+0x318>)
 8008816:	f001 fddb 	bl	800a3d0 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800881a:	2001      	movs	r0, #1
 800881c:	f000 fd00 	bl	8009220 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008820:	4b9f      	ldr	r3, [pc, #636]	; (8008aa0 <SVCCTL_App_Notification+0x31c>)
 8008822:	2201      	movs	r2, #1
 8008824:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008826:	4b98      	ldr	r3, [pc, #608]	; (8008a88 <SVCCTL_App_Notification+0x304>)
 8008828:	8ada      	ldrh	r2, [r3, #22]
 800882a:	4b9d      	ldr	r3, [pc, #628]	; (8008aa0 <SVCCTL_App_Notification+0x31c>)
 800882c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800882e:	489c      	ldr	r0, [pc, #624]	; (8008aa0 <SVCCTL_App_Notification+0x31c>)
 8008830:	f000 ff22 	bl	8009678 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008834:	e224      	b.n	8008c80 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	3302      	adds	r3, #2
 800883a:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d042      	beq.n	80088ca <SVCCTL_App_Notification+0x146>
 8008844:	2b03      	cmp	r3, #3
 8008846:	f040 80c7 	bne.w	80089d8 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	3301      	adds	r3, #1
 800884e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8008850:	488e      	ldr	r0, [pc, #568]	; (8008a8c <SVCCTL_App_Notification+0x308>)
 8008852:	f7ff fdbd 	bl	80083d0 <DbgTraceGetFileName>
 8008856:	4601      	mov	r1, r0
 8008858:	f240 13e1 	movw	r3, #481	; 0x1e1
 800885c:	4a8c      	ldr	r2, [pc, #560]	; (8008a90 <SVCCTL_App_Notification+0x30c>)
 800885e:	488d      	ldr	r0, [pc, #564]	; (8008a94 <SVCCTL_App_Notification+0x310>)
 8008860:	f001 fdb6 	bl	800a3d0 <iprintf>
 8008864:	488f      	ldr	r0, [pc, #572]	; (8008aa4 <SVCCTL_App_Notification+0x320>)
 8008866:	f001 fe4f 	bl	800a508 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800886a:	4888      	ldr	r0, [pc, #544]	; (8008a8c <SVCCTL_App_Notification+0x308>)
 800886c:	f7ff fdb0 	bl	80083d0 <DbgTraceGetFileName>
 8008870:	4601      	mov	r1, r0
 8008872:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8008876:	4a86      	ldr	r2, [pc, #536]	; (8008a90 <SVCCTL_App_Notification+0x30c>)
 8008878:	4886      	ldr	r0, [pc, #536]	; (8008a94 <SVCCTL_App_Notification+0x310>)
 800887a:	f001 fda9 	bl	800a3d0 <iprintf>
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008884:	b29b      	uxth	r3, r3
 8008886:	4618      	mov	r0, r3
 8008888:	f7f7 fe24 	bl	80004d4 <__aeabi_i2d>
 800888c:	f04f 0200 	mov.w	r2, #0
 8008890:	4b85      	ldr	r3, [pc, #532]	; (8008aa8 <SVCCTL_App_Notification+0x324>)
 8008892:	f7f7 fe89 	bl	80005a8 <__aeabi_dmul>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4610      	mov	r0, r2
 800889c:	4619      	mov	r1, r3
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	461c      	mov	r4, r3
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	461a      	mov	r2, r3
 80088b2:	4613      	mov	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4413      	add	r3, r2
 80088b8:	005b      	lsls	r3, r3, #1
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	9400      	str	r4, [sp, #0]
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	487a      	ldr	r0, [pc, #488]	; (8008aac <SVCCTL_App_Notification+0x328>)
 80088c4:	f001 fd84 	bl	800a3d0 <iprintf>
          break;
 80088c8:	e087      	b.n	80089da <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	3301      	adds	r3, #1
 80088ce:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 80088d0:	486e      	ldr	r0, [pc, #440]	; (8008a8c <SVCCTL_App_Notification+0x308>)
 80088d2:	f7ff fd7d 	bl	80083d0 <DbgTraceGetFileName>
 80088d6:	4601      	mov	r1, r0
 80088d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80088dc:	4a6c      	ldr	r2, [pc, #432]	; (8008a90 <SVCCTL_App_Notification+0x30c>)
 80088de:	486d      	ldr	r0, [pc, #436]	; (8008a94 <SVCCTL_App_Notification+0x310>)
 80088e0:	f001 fd76 	bl	800a3d0 <iprintf>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	4619      	mov	r1, r3
 80088ee:	4870      	ldr	r0, [pc, #448]	; (8008ab0 <SVCCTL_App_Notification+0x32c>)
 80088f0:	f001 fd6e 	bl	800a3d0 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80088f4:	4865      	ldr	r0, [pc, #404]	; (8008a8c <SVCCTL_App_Notification+0x308>)
 80088f6:	f7ff fd6b 	bl	80083d0 <DbgTraceGetFileName>
 80088fa:	4601      	mov	r1, r0
 80088fc:	f240 13f5 	movw	r3, #501	; 0x1f5
 8008900:	4a63      	ldr	r2, [pc, #396]	; (8008a90 <SVCCTL_App_Notification+0x30c>)
 8008902:	4864      	ldr	r0, [pc, #400]	; (8008a94 <SVCCTL_App_Notification+0x310>)
 8008904:	f001 fd64 	bl	800a3d0 <iprintf>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	7a9b      	ldrb	r3, [r3, #10]
 800890c:	4618      	mov	r0, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	7a5b      	ldrb	r3, [r3, #9]
 8008912:	461c      	mov	r4, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	7a1b      	ldrb	r3, [r3, #8]
 8008918:	461d      	mov	r5, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	79db      	ldrb	r3, [r3, #7]
 800891e:	461a      	mov	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	799b      	ldrb	r3, [r3, #6]
 8008924:	4619      	mov	r1, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	795b      	ldrb	r3, [r3, #5]
 800892a:	9302      	str	r3, [sp, #8]
 800892c:	9101      	str	r1, [sp, #4]
 800892e:	9200      	str	r2, [sp, #0]
 8008930:	462b      	mov	r3, r5
 8008932:	4622      	mov	r2, r4
 8008934:	4601      	mov	r1, r0
 8008936:	485f      	ldr	r0, [pc, #380]	; (8008ab4 <SVCCTL_App_Notification+0x330>)
 8008938:	f001 fd4a 	bl	800a3d0 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800893c:	4853      	ldr	r0, [pc, #332]	; (8008a8c <SVCCTL_App_Notification+0x308>)
 800893e:	f7ff fd47 	bl	80083d0 <DbgTraceGetFileName>
 8008942:	4601      	mov	r1, r0
 8008944:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8008948:	4a51      	ldr	r2, [pc, #324]	; (8008a90 <SVCCTL_App_Notification+0x30c>)
 800894a:	4852      	ldr	r0, [pc, #328]	; (8008a94 <SVCCTL_App_Notification+0x310>)
 800894c:	f001 fd40 	bl	800a3d0 <iprintf>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8008956:	b29b      	uxth	r3, r3
 8008958:	4618      	mov	r0, r3
 800895a:	f7f7 fdbb 	bl	80004d4 <__aeabi_i2d>
 800895e:	f04f 0200 	mov.w	r2, #0
 8008962:	4b51      	ldr	r3, [pc, #324]	; (8008aa8 <SVCCTL_App_Notification+0x324>)
 8008964:	f7f7 fe20 	bl	80005a8 <__aeabi_dmul>
 8008968:	4602      	mov	r2, r0
 800896a:	460b      	mov	r3, r1
 800896c:	4610      	mov	r0, r2
 800896e:	4619      	mov	r1, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8008976:	b29b      	uxth	r3, r3
 8008978:	461c      	mov	r4, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8008980:	b29b      	uxth	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	4613      	mov	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4413      	add	r3, r2
 800898a:	005b      	lsls	r3, r3, #1
 800898c:	9301      	str	r3, [sp, #4]
 800898e:	9400      	str	r4, [sp, #0]
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4845      	ldr	r0, [pc, #276]	; (8008aac <SVCCTL_App_Notification+0x328>)
 8008996:	f001 fd1b 	bl	800a3d0 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800899a:	4b3b      	ldr	r3, [pc, #236]	; (8008a88 <SVCCTL_App_Notification+0x304>)
 800899c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089a0:	2b04      	cmp	r3, #4
 80089a2:	d104      	bne.n	80089ae <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80089a4:	4b38      	ldr	r3, [pc, #224]	; (8008a88 <SVCCTL_App_Notification+0x304>)
 80089a6:	2206      	movs	r2, #6
 80089a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80089ac:	e003      	b.n	80089b6 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80089ae:	4b36      	ldr	r3, [pc, #216]	; (8008a88 <SVCCTL_App_Notification+0x304>)
 80089b0:	2205      	movs	r2, #5
 80089b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80089bc:	b29a      	uxth	r2, r3
 80089be:	4b32      	ldr	r3, [pc, #200]	; (8008a88 <SVCCTL_App_Notification+0x304>)
 80089c0:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80089c2:	4b37      	ldr	r3, [pc, #220]	; (8008aa0 <SVCCTL_App_Notification+0x31c>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80089c8:	4b2f      	ldr	r3, [pc, #188]	; (8008a88 <SVCCTL_App_Notification+0x304>)
 80089ca:	8ada      	ldrh	r2, [r3, #22]
 80089cc:	4b34      	ldr	r3, [pc, #208]	; (8008aa0 <SVCCTL_App_Notification+0x31c>)
 80089ce:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80089d0:	4833      	ldr	r0, [pc, #204]	; (8008aa0 <SVCCTL_App_Notification+0x31c>)
 80089d2:	f000 fe51 	bl	8009678 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80089d6:	e000      	b.n	80089da <SVCCTL_App_Notification+0x256>
          break;
 80089d8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80089da:	e151      	b.n	8008c80 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	3302      	adds	r3, #2
 80089e0:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ec:	f000 8141 	beq.w	8008c72 <SVCCTL_App_Notification+0x4ee>
 80089f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089f4:	f300 8143 	bgt.w	8008c7e <SVCCTL_App_Notification+0x4fa>
 80089f8:	2b04      	cmp	r3, #4
 80089fa:	f000 813c 	beq.w	8008c76 <SVCCTL_App_Notification+0x4f2>
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	f2c0 813d 	blt.w	8008c7e <SVCCTL_App_Notification+0x4fa>
 8008a04:	f240 420a 	movw	r2, #1034	; 0x40a
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	f300 8138 	bgt.w	8008c7e <SVCCTL_App_Notification+0x4fa>
 8008a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a12:	f340 8134 	ble.w	8008c7e <SVCCTL_App_Notification+0x4fa>
 8008a16:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8008a1a:	2b09      	cmp	r3, #9
 8008a1c:	f200 812f 	bhi.w	8008c7e <SVCCTL_App_Notification+0x4fa>
 8008a20:	a201      	add	r2, pc, #4	; (adr r2, 8008a28 <SVCCTL_App_Notification+0x2a4>)
 8008a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a26:	bf00      	nop
 8008a28:	08008bed 	.word	0x08008bed
 8008a2c:	08008ac1 	.word	0x08008ac1
 8008a30:	08008c7f 	.word	0x08008c7f
 8008a34:	08008c7f 	.word	0x08008c7f
 8008a38:	08008c7f 	.word	0x08008c7f
 8008a3c:	08008c7f 	.word	0x08008c7f
 8008a40:	08008a51 	.word	0x08008a51
 8008a44:	08008c7f 	.word	0x08008c7f
 8008a48:	08008b33 	.word	0x08008b33
 8008a4c:	08008a6d 	.word	0x08008a6d
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8008a50:	480e      	ldr	r0, [pc, #56]	; (8008a8c <SVCCTL_App_Notification+0x308>)
 8008a52:	f7ff fcbd 	bl	80083d0 <DbgTraceGetFileName>
 8008a56:	4601      	mov	r1, r0
 8008a58:	f240 233e 	movw	r3, #574	; 0x23e
 8008a5c:	4a0c      	ldr	r2, [pc, #48]	; (8008a90 <SVCCTL_App_Notification+0x30c>)
 8008a5e:	480d      	ldr	r0, [pc, #52]	; (8008a94 <SVCCTL_App_Notification+0x310>)
 8008a60:	f001 fcb6 	bl	800a3d0 <iprintf>
 8008a64:	4814      	ldr	r0, [pc, #80]	; (8008ab8 <SVCCTL_App_Notification+0x334>)
 8008a66:	f001 fcb3 	bl	800a3d0 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008a6a:	e105      	b.n	8008c78 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8008a6c:	4807      	ldr	r0, [pc, #28]	; (8008a8c <SVCCTL_App_Notification+0x308>)
 8008a6e:	f7ff fcaf 	bl	80083d0 <DbgTraceGetFileName>
 8008a72:	4601      	mov	r1, r0
 8008a74:	f240 234e 	movw	r3, #590	; 0x24e
 8008a78:	4a05      	ldr	r2, [pc, #20]	; (8008a90 <SVCCTL_App_Notification+0x30c>)
 8008a7a:	4806      	ldr	r0, [pc, #24]	; (8008a94 <SVCCTL_App_Notification+0x310>)
 8008a7c:	f001 fca8 	bl	800a3d0 <iprintf>
 8008a80:	480e      	ldr	r0, [pc, #56]	; (8008abc <SVCCTL_App_Notification+0x338>)
 8008a82:	f001 fd41 	bl	800a508 <puts>
          break;
 8008a86:	e0f7      	b.n	8008c78 <SVCCTL_App_Notification+0x4f4>
 8008a88:	20000bf4 	.word	0x20000bf4
 8008a8c:	0800c6dc 	.word	0x0800c6dc
 8008a90:	0800d7ec 	.word	0x0800d7ec
 8008a94:	0800c6f8 	.word	0x0800c6f8
 8008a98:	0800c824 	.word	0x0800c824
 8008a9c:	0800c850 	.word	0x0800c850
 8008aa0:	20000c78 	.word	0x20000c78
 8008aa4:	0800c88c 	.word	0x0800c88c
 8008aa8:	3ff40000 	.word	0x3ff40000
 8008aac:	0800c8c0 	.word	0x0800c8c0
 8008ab0:	0800c92c 	.word	0x0800c92c
 8008ab4:	0800c974 	.word	0x0800c974
 8008ab8:	0800c9c4 	.word	0x0800c9c4
 8008abc:	0800c9ec 	.word	0x0800c9ec
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8008ac0:	4872      	ldr	r0, [pc, #456]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008ac2:	f7ff fc85 	bl	80083d0 <DbgTraceGetFileName>
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	f240 2355 	movw	r3, #597	; 0x255
 8008acc:	4a70      	ldr	r2, [pc, #448]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008ace:	4871      	ldr	r0, [pc, #452]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008ad0:	f001 fc7e 	bl	800a3d0 <iprintf>
 8008ad4:	4870      	ldr	r0, [pc, #448]	; (8008c98 <SVCCTL_App_Notification+0x514>)
 8008ad6:	f001 fd17 	bl	800a508 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008ada:	4b70      	ldr	r3, [pc, #448]	; (8008c9c <SVCCTL_App_Notification+0x518>)
 8008adc:	8adb      	ldrh	r3, [r3, #22]
 8008ade:	4970      	ldr	r1, [pc, #448]	; (8008ca0 <SVCCTL_App_Notification+0x51c>)
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fd fe95 	bl	8006810 <aci_gap_pass_key_resp>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8008aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d010      	beq.n	8008b16 <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8008af4:	4865      	ldr	r0, [pc, #404]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008af6:	f7ff fc6b 	bl	80083d0 <DbgTraceGetFileName>
 8008afa:	4601      	mov	r1, r0
 8008afc:	f240 235a 	movw	r3, #602	; 0x25a
 8008b00:	4a63      	ldr	r2, [pc, #396]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008b02:	4864      	ldr	r0, [pc, #400]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008b04:	f001 fc64 	bl	800a3d0 <iprintf>
 8008b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4865      	ldr	r0, [pc, #404]	; (8008ca4 <SVCCTL_App_Notification+0x520>)
 8008b10:	f001 fc5e 	bl	800a3d0 <iprintf>
          break;
 8008b14:	e0b0      	b.n	8008c78 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8008b16:	485d      	ldr	r0, [pc, #372]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008b18:	f7ff fc5a 	bl	80083d0 <DbgTraceGetFileName>
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	f240 235e 	movw	r3, #606	; 0x25e
 8008b22:	4a5b      	ldr	r2, [pc, #364]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008b24:	485b      	ldr	r0, [pc, #364]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008b26:	f001 fc53 	bl	800a3d0 <iprintf>
 8008b2a:	485f      	ldr	r0, [pc, #380]	; (8008ca8 <SVCCTL_App_Notification+0x524>)
 8008b2c:	f001 fcec 	bl	800a508 <puts>
          break;
 8008b30:	e0a2      	b.n	8008c78 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8008b32:	4856      	ldr	r0, [pc, #344]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008b34:	f7ff fc4c 	bl	80083d0 <DbgTraceGetFileName>
 8008b38:	4601      	mov	r1, r0
 8008b3a:	f240 2366 	movw	r3, #614	; 0x266
 8008b3e:	4a54      	ldr	r2, [pc, #336]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008b40:	4854      	ldr	r0, [pc, #336]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008b42:	f001 fc45 	bl	800a3d0 <iprintf>
 8008b46:	4859      	ldr	r0, [pc, #356]	; (8008cac <SVCCTL_App_Notification+0x528>)
 8008b48:	f001 fcde 	bl	800a508 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8008b4c:	484f      	ldr	r0, [pc, #316]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008b4e:	f7ff fc3f 	bl	80083d0 <DbgTraceGetFileName>
 8008b52:	4601      	mov	r1, r0
 8008b54:	f240 2367 	movw	r3, #615	; 0x267
 8008b58:	4a4d      	ldr	r2, [pc, #308]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008b5a:	484e      	ldr	r0, [pc, #312]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008b5c:	f001 fc38 	bl	800a3d0 <iprintf>
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	3302      	adds	r3, #2
 8008b64:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4851      	ldr	r0, [pc, #324]	; (8008cb0 <SVCCTL_App_Notification+0x52c>)
 8008b6c:	f001 fc30 	bl	800a3d0 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8008b70:	4846      	ldr	r0, [pc, #280]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008b72:	f7ff fc2d 	bl	80083d0 <DbgTraceGetFileName>
 8008b76:	4601      	mov	r1, r0
 8008b78:	f240 2369 	movw	r3, #617	; 0x269
 8008b7c:	4a44      	ldr	r2, [pc, #272]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008b7e:	4845      	ldr	r0, [pc, #276]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008b80:	f001 fc26 	bl	800a3d0 <iprintf>
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	3302      	adds	r3, #2
 8008b88:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4849      	ldr	r0, [pc, #292]	; (8008cb4 <SVCCTL_App_Notification+0x530>)
 8008b90:	f001 fc1e 	bl	800a3d0 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008b94:	4b41      	ldr	r3, [pc, #260]	; (8008c9c <SVCCTL_App_Notification+0x518>)
 8008b96:	8adb      	ldrh	r3, [r3, #22]
 8008b98:	2101      	movs	r1, #1
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fd ffe2 	bl	8006b64 <aci_gap_numeric_comparison_value_confirm_yesno>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8008ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d010      	beq.n	8008bd0 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8008bae:	4837      	ldr	r0, [pc, #220]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008bb0:	f7ff fc0e 	bl	80083d0 <DbgTraceGetFileName>
 8008bb4:	4601      	mov	r1, r0
 8008bb6:	f240 236e 	movw	r3, #622	; 0x26e
 8008bba:	4a35      	ldr	r2, [pc, #212]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008bbc:	4835      	ldr	r0, [pc, #212]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008bbe:	f001 fc07 	bl	800a3d0 <iprintf>
 8008bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	483b      	ldr	r0, [pc, #236]	; (8008cb8 <SVCCTL_App_Notification+0x534>)
 8008bca:	f001 fc01 	bl	800a3d0 <iprintf>
          break;
 8008bce:	e053      	b.n	8008c78 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8008bd0:	482e      	ldr	r0, [pc, #184]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008bd2:	f7ff fbfd 	bl	80083d0 <DbgTraceGetFileName>
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	f240 2372 	movw	r3, #626	; 0x272
 8008bdc:	4a2c      	ldr	r2, [pc, #176]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008bde:	482d      	ldr	r0, [pc, #180]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008be0:	f001 fbf6 	bl	800a3d0 <iprintf>
 8008be4:	4835      	ldr	r0, [pc, #212]	; (8008cbc <SVCCTL_App_Notification+0x538>)
 8008be6:	f001 fc8f 	bl	800a508 <puts>
          break;
 8008bea:	e045      	b.n	8008c78 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	3302      	adds	r3, #2
 8008bf0:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8008bf2:	4826      	ldr	r0, [pc, #152]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008bf4:	f7ff fbec 	bl	80083d0 <DbgTraceGetFileName>
 8008bf8:	4601      	mov	r1, r0
 8008bfa:	f44f 731f 	mov.w	r3, #636	; 0x27c
 8008bfe:	4a24      	ldr	r2, [pc, #144]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008c00:	4824      	ldr	r0, [pc, #144]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008c02:	f001 fbe5 	bl	800a3d0 <iprintf>
 8008c06:	482e      	ldr	r0, [pc, #184]	; (8008cc0 <SVCCTL_App_Notification+0x53c>)
 8008c08:	f001 fc7e 	bl	800a508 <puts>
          if (p_pairing_complete->Status != 0)
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	789b      	ldrb	r3, [r3, #2]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d013      	beq.n	8008c3c <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8008c14:	481d      	ldr	r0, [pc, #116]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008c16:	f7ff fbdb 	bl	80083d0 <DbgTraceGetFileName>
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	f240 237f 	movw	r3, #639	; 0x27f
 8008c20:	4a1b      	ldr	r2, [pc, #108]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008c22:	481c      	ldr	r0, [pc, #112]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008c24:	f001 fbd4 	bl	800a3d0 <iprintf>
 8008c28:	69bb      	ldr	r3, [r7, #24]
 8008c2a:	789b      	ldrb	r3, [r3, #2]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	78db      	ldrb	r3, [r3, #3]
 8008c32:	461a      	mov	r2, r3
 8008c34:	4823      	ldr	r0, [pc, #140]	; (8008cc4 <SVCCTL_App_Notification+0x540>)
 8008c36:	f001 fbcb 	bl	800a3d0 <iprintf>
 8008c3a:	e00c      	b.n	8008c56 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 8008c3c:	4813      	ldr	r0, [pc, #76]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008c3e:	f7ff fbc7 	bl	80083d0 <DbgTraceGetFileName>
 8008c42:	4601      	mov	r1, r0
 8008c44:	f240 2383 	movw	r3, #643	; 0x283
 8008c48:	4a11      	ldr	r2, [pc, #68]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008c4a:	4812      	ldr	r0, [pc, #72]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008c4c:	f001 fbc0 	bl	800a3d0 <iprintf>
 8008c50:	481d      	ldr	r0, [pc, #116]	; (8008cc8 <SVCCTL_App_Notification+0x544>)
 8008c52:	f001 fc59 	bl	800a508 <puts>
          APP_DBG_MSG("\n");
 8008c56:	480d      	ldr	r0, [pc, #52]	; (8008c8c <SVCCTL_App_Notification+0x508>)
 8008c58:	f7ff fbba 	bl	80083d0 <DbgTraceGetFileName>
 8008c5c:	4601      	mov	r1, r0
 8008c5e:	f240 2385 	movw	r3, #645	; 0x285
 8008c62:	4a0b      	ldr	r2, [pc, #44]	; (8008c90 <SVCCTL_App_Notification+0x50c>)
 8008c64:	480b      	ldr	r0, [pc, #44]	; (8008c94 <SVCCTL_App_Notification+0x510>)
 8008c66:	f001 fbb3 	bl	800a3d0 <iprintf>
 8008c6a:	200a      	movs	r0, #10
 8008c6c:	f001 fbc8 	bl	800a400 <putchar>
          break;
 8008c70:	e002      	b.n	8008c78 <SVCCTL_App_Notification+0x4f4>
          break;
 8008c72:	bf00      	nop
 8008c74:	e003      	b.n	8008c7e <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008c76:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008c78:	e001      	b.n	8008c7e <SVCCTL_App_Notification+0x4fa>
      break;
 8008c7a:	bf00      	nop
 8008c7c:	e000      	b.n	8008c80 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008c7e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008c80:	2301      	movs	r3, #1
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3728      	adds	r7, #40	; 0x28
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bdb0      	pop	{r4, r5, r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	0800c6dc 	.word	0x0800c6dc
 8008c90:	0800d7ec 	.word	0x0800d7ec
 8008c94:	0800c6f8 	.word	0x0800c6f8
 8008c98:	0800ca1c 	.word	0x0800ca1c
 8008c9c:	20000bf4 	.word	0x20000bf4
 8008ca0:	0001b207 	.word	0x0001b207
 8008ca4:	0800ca44 	.word	0x0800ca44
 8008ca8:	0800ca78 	.word	0x0800ca78
 8008cac:	0800caa0 	.word	0x0800caa0
 8008cb0:	0800cad4 	.word	0x0800cad4
 8008cb4:	0800caf0 	.word	0x0800caf0
 8008cb8:	0800cb08 	.word	0x0800cb08
 8008cbc:	0800cb58 	.word	0x0800cb58
 8008cc0:	0800cba0 	.word	0x0800cba0
 8008cc4:	0800cbcc 	.word	0x0800cbcc
 8008cc8:	0800cc08 	.word	0x0800cc08

08008ccc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008cd2:	4b06      	ldr	r3, [pc, #24]	; (8008cec <Ble_Tl_Init+0x20>)
 8008cd4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008cd6:	4b06      	ldr	r3, [pc, #24]	; (8008cf0 <Ble_Tl_Init+0x24>)
 8008cd8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008cda:	463b      	mov	r3, r7
 8008cdc:	4619      	mov	r1, r3
 8008cde:	4805      	ldr	r0, [pc, #20]	; (8008cf4 <Ble_Tl_Init+0x28>)
 8008ce0:	f7fe fe64 	bl	80079ac <hci_init>

  return;
 8008ce4:	bf00      	nop
}
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	200300d8 	.word	0x200300d8
 8008cf0:	080094c1 	.word	0x080094c1
 8008cf4:	08009489 	.word	0x08009489

08008cf8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cfa:	b08d      	sub	sp, #52	; 0x34
 8008cfc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008cfe:	2300      	movs	r3, #0
 8008d00:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008d02:	2392      	movs	r3, #146	; 0x92
 8008d04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8008d06:	48a3      	ldr	r0, [pc, #652]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008d08:	f7ff fb62 	bl	80083d0 <DbgTraceGetFileName>
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	f240 23c5 	movw	r3, #709	; 0x2c5
 8008d12:	4aa1      	ldr	r2, [pc, #644]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008d14:	48a1      	ldr	r0, [pc, #644]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008d16:	f001 fb5b 	bl	800a3d0 <iprintf>
 8008d1a:	48a1      	ldr	r0, [pc, #644]	; (8008fa0 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8008d1c:	f001 fbf4 	bl	800a508 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008d20:	f7fe fb73 	bl	800740a <hci_reset>
 8008d24:	4603      	mov	r3, r0
 8008d26:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008d28:	7dfb      	ldrb	r3, [r7, #23]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00f      	beq.n	8008d4e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8008d2e:	4899      	ldr	r0, [pc, #612]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008d30:	f7ff fb4e 	bl	80083d0 <DbgTraceGetFileName>
 8008d34:	4601      	mov	r1, r0
 8008d36:	f240 23ce 	movw	r3, #718	; 0x2ce
 8008d3a:	4a97      	ldr	r2, [pc, #604]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008d3c:	4897      	ldr	r0, [pc, #604]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008d3e:	f001 fb47 	bl	800a3d0 <iprintf>
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	4619      	mov	r1, r3
 8008d46:	4897      	ldr	r0, [pc, #604]	; (8008fa4 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8008d48:	f001 fb42 	bl	800a3d0 <iprintf>
 8008d4c:	e00c      	b.n	8008d68 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8008d4e:	4891      	ldr	r0, [pc, #580]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008d50:	f7ff fb3e 	bl	80083d0 <DbgTraceGetFileName>
 8008d54:	4601      	mov	r1, r0
 8008d56:	f240 23d2 	movw	r3, #722	; 0x2d2
 8008d5a:	4a8f      	ldr	r2, [pc, #572]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008d5c:	488f      	ldr	r0, [pc, #572]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008d5e:	f001 fb37 	bl	800a3d0 <iprintf>
 8008d62:	4891      	ldr	r0, [pc, #580]	; (8008fa8 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8008d64:	f001 fbd0 	bl	800a508 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008d68:	f000 fad8 	bl	800931c <BleGetBdAddress>
 8008d6c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	2106      	movs	r1, #6
 8008d72:	2000      	movs	r0, #0
 8008d74:	f7fe fa09 	bl	800718a <aci_hal_write_config_data>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00f      	beq.n	8008da2 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8008d82:	4884      	ldr	r0, [pc, #528]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008d84:	f7ff fb24 	bl	80083d0 <DbgTraceGetFileName>
 8008d88:	4601      	mov	r1, r0
 8008d8a:	f44f 7337 	mov.w	r3, #732	; 0x2dc
 8008d8e:	4a82      	ldr	r2, [pc, #520]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008d90:	4882      	ldr	r0, [pc, #520]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008d92:	f001 fb1d 	bl	800a3d0 <iprintf>
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4884      	ldr	r0, [pc, #528]	; (8008fac <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8008d9c:	f001 fb18 	bl	800a3d0 <iprintf>
 8008da0:	e035      	b.n	8008e0e <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8008da2:	487c      	ldr	r0, [pc, #496]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008da4:	f7ff fb14 	bl	80083d0 <DbgTraceGetFileName>
 8008da8:	4601      	mov	r1, r0
 8008daa:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8008dae:	4a7a      	ldr	r2, [pc, #488]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008db0:	487a      	ldr	r0, [pc, #488]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008db2:	f001 fb0d 	bl	800a3d0 <iprintf>
 8008db6:	487e      	ldr	r0, [pc, #504]	; (8008fb0 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8008db8:	f001 fba6 	bl	800a508 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8008dbc:	4875      	ldr	r0, [pc, #468]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008dbe:	f7ff fb07 	bl	80083d0 <DbgTraceGetFileName>
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	f240 23e1 	movw	r3, #737	; 0x2e1
 8008dc8:	4a73      	ldr	r2, [pc, #460]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008dca:	4874      	ldr	r0, [pc, #464]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008dcc:	f001 fb00 	bl	800a3d0 <iprintf>
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	3305      	adds	r3, #5
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	461c      	mov	r4, r3
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	3303      	adds	r3, #3
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	461d      	mov	r5, r3
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	3302      	adds	r3, #2
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	461a      	mov	r2, r3
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	3301      	adds	r3, #1
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	4619      	mov	r1, r3
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	9302      	str	r3, [sp, #8]
 8008dfe:	9101      	str	r1, [sp, #4]
 8008e00:	9200      	str	r2, [sp, #0]
 8008e02:	462b      	mov	r3, r5
 8008e04:	4622      	mov	r2, r4
 8008e06:	4601      	mov	r1, r0
 8008e08:	486a      	ldr	r0, [pc, #424]	; (8008fb4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8008e0a:	f001 fae1 	bl	800a3d0 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008e0e:	4a6a      	ldr	r2, [pc, #424]	; (8008fb8 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8008e10:	2110      	movs	r1, #16
 8008e12:	2018      	movs	r0, #24
 8008e14:	f7fe f9b9 	bl	800718a <aci_hal_write_config_data>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00f      	beq.n	8008e42 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8008e22:	485c      	ldr	r0, [pc, #368]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008e24:	f7ff fad4 	bl	80083d0 <DbgTraceGetFileName>
 8008e28:	4601      	mov	r1, r0
 8008e2a:	f240 332b 	movw	r3, #811	; 0x32b
 8008e2e:	4a5a      	ldr	r2, [pc, #360]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008e30:	485a      	ldr	r0, [pc, #360]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008e32:	f001 facd 	bl	800a3d0 <iprintf>
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4860      	ldr	r0, [pc, #384]	; (8008fbc <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8008e3c:	f001 fac8 	bl	800a3d0 <iprintf>
 8008e40:	e00c      	b.n	8008e5c <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8008e42:	4854      	ldr	r0, [pc, #336]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008e44:	f7ff fac4 	bl	80083d0 <DbgTraceGetFileName>
 8008e48:	4601      	mov	r1, r0
 8008e4a:	f240 332f 	movw	r3, #815	; 0x32f
 8008e4e:	4a52      	ldr	r2, [pc, #328]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008e50:	4852      	ldr	r0, [pc, #328]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008e52:	f001 fabd 	bl	800a3d0 <iprintf>
 8008e56:	485a      	ldr	r0, [pc, #360]	; (8008fc0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8008e58:	f001 fb56 	bl	800a508 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008e5c:	4a59      	ldr	r2, [pc, #356]	; (8008fc4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8008e5e:	2110      	movs	r1, #16
 8008e60:	2008      	movs	r0, #8
 8008e62:	f7fe f992 	bl	800718a <aci_hal_write_config_data>
 8008e66:	4603      	mov	r3, r0
 8008e68:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00f      	beq.n	8008e90 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8008e70:	4848      	ldr	r0, [pc, #288]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008e72:	f7ff faad 	bl	80083d0 <DbgTraceGetFileName>
 8008e76:	4601      	mov	r1, r0
 8008e78:	f44f 734e 	mov.w	r3, #824	; 0x338
 8008e7c:	4a46      	ldr	r2, [pc, #280]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008e7e:	4847      	ldr	r0, [pc, #284]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008e80:	f001 faa6 	bl	800a3d0 <iprintf>
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
 8008e86:	4619      	mov	r1, r3
 8008e88:	484f      	ldr	r0, [pc, #316]	; (8008fc8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8008e8a:	f001 faa1 	bl	800a3d0 <iprintf>
 8008e8e:	e00c      	b.n	8008eaa <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8008e90:	4840      	ldr	r0, [pc, #256]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008e92:	f7ff fa9d 	bl	80083d0 <DbgTraceGetFileName>
 8008e96:	4601      	mov	r1, r0
 8008e98:	f44f 734f 	mov.w	r3, #828	; 0x33c
 8008e9c:	4a3e      	ldr	r2, [pc, #248]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008e9e:	483f      	ldr	r0, [pc, #252]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008ea0:	f001 fa96 	bl	800a3d0 <iprintf>
 8008ea4:	4849      	ldr	r0, [pc, #292]	; (8008fcc <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8008ea6:	f001 fb2f 	bl	800a508 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008eaa:	2118      	movs	r1, #24
 8008eac:	2001      	movs	r0, #1
 8008eae:	f7fe f9f1 	bl	8007294 <aci_hal_set_tx_power_level>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00f      	beq.n	8008edc <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8008ebc:	4835      	ldr	r0, [pc, #212]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008ebe:	f7ff fa87 	bl	80083d0 <DbgTraceGetFileName>
 8008ec2:	4601      	mov	r1, r0
 8008ec4:	f240 3345 	movw	r3, #837	; 0x345
 8008ec8:	4a33      	ldr	r2, [pc, #204]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008eca:	4834      	ldr	r0, [pc, #208]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008ecc:	f001 fa80 	bl	800a3d0 <iprintf>
 8008ed0:	7dfb      	ldrb	r3, [r7, #23]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	483e      	ldr	r0, [pc, #248]	; (8008fd0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8008ed6:	f001 fa7b 	bl	800a3d0 <iprintf>
 8008eda:	e00c      	b.n	8008ef6 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8008edc:	482d      	ldr	r0, [pc, #180]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008ede:	f7ff fa77 	bl	80083d0 <DbgTraceGetFileName>
 8008ee2:	4601      	mov	r1, r0
 8008ee4:	f240 3349 	movw	r3, #841	; 0x349
 8008ee8:	4a2b      	ldr	r2, [pc, #172]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008eea:	482c      	ldr	r0, [pc, #176]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008eec:	f001 fa70 	bl	800a3d0 <iprintf>
 8008ef0:	4838      	ldr	r0, [pc, #224]	; (8008fd4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8008ef2:	f001 fb09 	bl	800a508 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008ef6:	f7fd fe9c 	bl	8006c32 <aci_gatt_init>
 8008efa:	4603      	mov	r3, r0
 8008efc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00f      	beq.n	8008f24 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8008f04:	4823      	ldr	r0, [pc, #140]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008f06:	f7ff fa63 	bl	80083d0 <DbgTraceGetFileName>
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	f240 3352 	movw	r3, #850	; 0x352
 8008f10:	4a21      	ldr	r2, [pc, #132]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008f12:	4822      	ldr	r0, [pc, #136]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008f14:	f001 fa5c 	bl	800a3d0 <iprintf>
 8008f18:	7dfb      	ldrb	r3, [r7, #23]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	482e      	ldr	r0, [pc, #184]	; (8008fd8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8008f1e:	f001 fa57 	bl	800a3d0 <iprintf>
 8008f22:	e00c      	b.n	8008f3e <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8008f24:	481b      	ldr	r0, [pc, #108]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008f26:	f7ff fa53 	bl	80083d0 <DbgTraceGetFileName>
 8008f2a:	4601      	mov	r1, r0
 8008f2c:	f240 3356 	movw	r3, #854	; 0x356
 8008f30:	4a19      	ldr	r2, [pc, #100]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008f32:	481a      	ldr	r0, [pc, #104]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008f34:	f001 fa4c 	bl	800a3d0 <iprintf>
 8008f38:	4828      	ldr	r0, [pc, #160]	; (8008fdc <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8008f3a:	f001 fae5 	bl	800a508 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
 8008f44:	f043 0301 	orr.w	r3, r3, #1
 8008f48:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d069      	beq.n	8009024 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008f50:	4b23      	ldr	r3, [pc, #140]	; (8008fe0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8008f52:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008f54:	1dba      	adds	r2, r7, #6
 8008f56:	7bf8      	ldrb	r0, [r7, #15]
 8008f58:	1cbb      	adds	r3, r7, #2
 8008f5a:	9301      	str	r3, [sp, #4]
 8008f5c:	1d3b      	adds	r3, r7, #4
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	4613      	mov	r3, r2
 8008f62:	2205      	movs	r2, #5
 8008f64:	2100      	movs	r1, #0
 8008f66:	f7fd fcba 	bl	80068de <aci_gap_init>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d039      	beq.n	8008fe8 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8008f74:	4807      	ldr	r0, [pc, #28]	; (8008f94 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8008f76:	f7ff fa2b 	bl	80083d0 <DbgTraceGetFileName>
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	f240 3376 	movw	r3, #886	; 0x376
 8008f80:	4a05      	ldr	r2, [pc, #20]	; (8008f98 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8008f82:	4806      	ldr	r0, [pc, #24]	; (8008f9c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8008f84:	f001 fa24 	bl	800a3d0 <iprintf>
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	4815      	ldr	r0, [pc, #84]	; (8008fe4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8008f8e:	f001 fa1f 	bl	800a3d0 <iprintf>
 8008f92:	e036      	b.n	8009002 <Ble_Hci_Gap_Gatt_Init+0x30a>
 8008f94:	0800c6dc 	.word	0x0800c6dc
 8008f98:	0800d804 	.word	0x0800d804
 8008f9c:	0800c6f8 	.word	0x0800c6f8
 8008fa0:	0800cc20 	.word	0x0800cc20
 8008fa4:	0800cc4c 	.word	0x0800cc4c
 8008fa8:	0800cc7c 	.word	0x0800cc7c
 8008fac:	0800cc9c 	.word	0x0800cc9c
 8008fb0:	0800ccf8 	.word	0x0800ccf8
 8008fb4:	0800cd44 	.word	0x0800cd44
 8008fb8:	0800d7bc 	.word	0x0800d7bc
 8008fbc:	0800cd80 	.word	0x0800cd80
 8008fc0:	0800cdd8 	.word	0x0800cdd8
 8008fc4:	0800d7cc 	.word	0x0800d7cc
 8008fc8:	0800ce20 	.word	0x0800ce20
 8008fcc:	0800ce78 	.word	0x0800ce78
 8008fd0:	0800cec0 	.word	0x0800cec0
 8008fd4:	0800cf00 	.word	0x0800cf00
 8008fd8:	0800cf30 	.word	0x0800cf30
 8008fdc:	0800cf64 	.word	0x0800cf64
 8008fe0:	0800cf88 	.word	0x0800cf88
 8008fe4:	0800cf90 	.word	0x0800cf90
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8008fe8:	487e      	ldr	r0, [pc, #504]	; (80091e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8008fea:	f7ff f9f1 	bl	80083d0 <DbgTraceGetFileName>
 8008fee:	4601      	mov	r1, r0
 8008ff0:	f240 337a 	movw	r3, #890	; 0x37a
 8008ff4:	4a7c      	ldr	r2, [pc, #496]	; (80091e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8008ff6:	487d      	ldr	r0, [pc, #500]	; (80091ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8008ff8:	f001 f9ea 	bl	800a3d0 <iprintf>
 8008ffc:	487c      	ldr	r0, [pc, #496]	; (80091f0 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 8008ffe:	f001 fa83 	bl	800a508 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8009002:	88fc      	ldrh	r4, [r7, #6]
 8009004:	88bd      	ldrh	r5, [r7, #4]
 8009006:	68b8      	ldr	r0, [r7, #8]
 8009008:	f7f7 f8ba 	bl	8000180 <strlen>
 800900c:	4603      	mov	r3, r0
 800900e:	b2da      	uxtb	r2, r3
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	4613      	mov	r3, r2
 8009016:	2200      	movs	r2, #0
 8009018:	4629      	mov	r1, r5
 800901a:	4620      	mov	r0, r4
 800901c:	f7fe f80c 	bl	8007038 <aci_gatt_update_char_value>
 8009020:	4603      	mov	r3, r0
 8009022:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8009024:	88f8      	ldrh	r0, [r7, #6]
 8009026:	8879      	ldrh	r1, [r7, #2]
 8009028:	463b      	mov	r3, r7
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	2302      	movs	r3, #2
 800902e:	2200      	movs	r2, #0
 8009030:	f7fe f802 	bl	8007038 <aci_gatt_update_char_value>
 8009034:	4603      	mov	r3, r0
 8009036:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8009038:	2202      	movs	r2, #2
 800903a:	2102      	movs	r1, #2
 800903c:	2000      	movs	r0, #0
 800903e:	f7fe fa08 	bl	8007452 <hci_le_set_default_phy>
 8009042:	4603      	mov	r3, r0
 8009044:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00f      	beq.n	800906c <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800904c:	4865      	ldr	r0, [pc, #404]	; (80091e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800904e:	f7ff f9bf 	bl	80083d0 <DbgTraceGetFileName>
 8009052:	4601      	mov	r1, r0
 8009054:	f44f 7367 	mov.w	r3, #924	; 0x39c
 8009058:	4a63      	ldr	r2, [pc, #396]	; (80091e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800905a:	4864      	ldr	r0, [pc, #400]	; (80091ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800905c:	f001 f9b8 	bl	800a3d0 <iprintf>
 8009060:	7dfb      	ldrb	r3, [r7, #23]
 8009062:	4619      	mov	r1, r3
 8009064:	4863      	ldr	r0, [pc, #396]	; (80091f4 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 8009066:	f001 f9b3 	bl	800a3d0 <iprintf>
 800906a:	e00c      	b.n	8009086 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800906c:	485d      	ldr	r0, [pc, #372]	; (80091e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800906e:	f7ff f9af 	bl	80083d0 <DbgTraceGetFileName>
 8009072:	4601      	mov	r1, r0
 8009074:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8009078:	4a5b      	ldr	r2, [pc, #364]	; (80091e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800907a:	485c      	ldr	r0, [pc, #368]	; (80091ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800907c:	f001 f9a8 	bl	800a3d0 <iprintf>
 8009080:	485d      	ldr	r0, [pc, #372]	; (80091f8 <Ble_Hci_Gap_Gatt_Init+0x500>)
 8009082:	f001 fa41 	bl	800a508 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009086:	4b5d      	ldr	r3, [pc, #372]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8009088:	2201      	movs	r2, #1
 800908a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800908c:	4b5b      	ldr	r3, [pc, #364]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	4618      	mov	r0, r3
 8009092:	f7fd faa5 	bl	80065e0 <aci_gap_set_io_capability>
 8009096:	4603      	mov	r3, r0
 8009098:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800909a:	7dfb      	ldrb	r3, [r7, #23]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00f      	beq.n	80090c0 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80090a0:	4850      	ldr	r0, [pc, #320]	; (80091e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80090a2:	f7ff f995 	bl	80083d0 <DbgTraceGetFileName>
 80090a6:	4601      	mov	r1, r0
 80090a8:	f240 33aa 	movw	r3, #938	; 0x3aa
 80090ac:	4a4e      	ldr	r2, [pc, #312]	; (80091e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80090ae:	484f      	ldr	r0, [pc, #316]	; (80091ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80090b0:	f001 f98e 	bl	800a3d0 <iprintf>
 80090b4:	7dfb      	ldrb	r3, [r7, #23]
 80090b6:	4619      	mov	r1, r3
 80090b8:	4851      	ldr	r0, [pc, #324]	; (8009200 <Ble_Hci_Gap_Gatt_Init+0x508>)
 80090ba:	f001 f989 	bl	800a3d0 <iprintf>
 80090be:	e00c      	b.n	80090da <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 80090c0:	4848      	ldr	r0, [pc, #288]	; (80091e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80090c2:	f7ff f985 	bl	80083d0 <DbgTraceGetFileName>
 80090c6:	4601      	mov	r1, r0
 80090c8:	f240 33ae 	movw	r3, #942	; 0x3ae
 80090cc:	4a46      	ldr	r2, [pc, #280]	; (80091e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80090ce:	4847      	ldr	r0, [pc, #284]	; (80091ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80090d0:	f001 f97e 	bl	800a3d0 <iprintf>
 80090d4:	484b      	ldr	r0, [pc, #300]	; (8009204 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 80090d6:	f001 fa17 	bl	800a508 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80090da:	4b48      	ldr	r3, [pc, #288]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80090dc:	2201      	movs	r2, #1
 80090de:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80090e0:	4b46      	ldr	r3, [pc, #280]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80090e2:	2208      	movs	r2, #8
 80090e4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80090e6:	4b45      	ldr	r3, [pc, #276]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80090e8:	2210      	movs	r2, #16
 80090ea:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80090ec:	4b43      	ldr	r3, [pc, #268]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80090ee:	2200      	movs	r2, #0
 80090f0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80090f2:	4b42      	ldr	r3, [pc, #264]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80090f4:	4a44      	ldr	r2, [pc, #272]	; (8009208 <Ble_Hci_Gap_Gatt_Init+0x510>)
 80090f6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80090f8:	4b40      	ldr	r3, [pc, #256]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80090fe:	4b3f      	ldr	r3, [pc, #252]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8009100:	789c      	ldrb	r4, [r3, #2]
 8009102:	4b3e      	ldr	r3, [pc, #248]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8009104:	785d      	ldrb	r5, [r3, #1]
 8009106:	4b3d      	ldr	r3, [pc, #244]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8009108:	791b      	ldrb	r3, [r3, #4]
 800910a:	4a3c      	ldr	r2, [pc, #240]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 800910c:	7952      	ldrb	r2, [r2, #5]
 800910e:	493b      	ldr	r1, [pc, #236]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8009110:	78c9      	ldrb	r1, [r1, #3]
 8009112:	483a      	ldr	r0, [pc, #232]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8009114:	6880      	ldr	r0, [r0, #8]
 8009116:	2600      	movs	r6, #0
 8009118:	9604      	str	r6, [sp, #16]
 800911a:	9003      	str	r0, [sp, #12]
 800911c:	9102      	str	r1, [sp, #8]
 800911e:	9201      	str	r2, [sp, #4]
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	2300      	movs	r3, #0
 8009124:	2201      	movs	r2, #1
 8009126:	4629      	mov	r1, r5
 8009128:	4620      	mov	r0, r4
 800912a:	f7fd faad 	bl	8006688 <aci_gap_set_authentication_requirement>
 800912e:	4603      	mov	r3, r0
 8009130:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00f      	beq.n	8009158 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8009138:	482a      	ldr	r0, [pc, #168]	; (80091e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800913a:	f7ff f949 	bl	80083d0 <DbgTraceGetFileName>
 800913e:	4601      	mov	r1, r0
 8009140:	f240 33c9 	movw	r3, #969	; 0x3c9
 8009144:	4a28      	ldr	r2, [pc, #160]	; (80091e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8009146:	4829      	ldr	r0, [pc, #164]	; (80091ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8009148:	f001 f942 	bl	800a3d0 <iprintf>
 800914c:	7dfb      	ldrb	r3, [r7, #23]
 800914e:	4619      	mov	r1, r3
 8009150:	482e      	ldr	r0, [pc, #184]	; (800920c <Ble_Hci_Gap_Gatt_Init+0x514>)
 8009152:	f001 f93d 	bl	800a3d0 <iprintf>
 8009156:	e00c      	b.n	8009172 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8009158:	4822      	ldr	r0, [pc, #136]	; (80091e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800915a:	f7ff f939 	bl	80083d0 <DbgTraceGetFileName>
 800915e:	4601      	mov	r1, r0
 8009160:	f240 33cd 	movw	r3, #973	; 0x3cd
 8009164:	4a20      	ldr	r2, [pc, #128]	; (80091e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8009166:	4821      	ldr	r0, [pc, #132]	; (80091ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8009168:	f001 f932 	bl	800a3d0 <iprintf>
 800916c:	4828      	ldr	r0, [pc, #160]	; (8009210 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800916e:	f001 f9cb 	bl	800a508 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8009172:	4b22      	ldr	r3, [pc, #136]	; (80091fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8009174:	789b      	ldrb	r3, [r3, #2]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d023      	beq.n	80091c2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800917a:	f7fd fccf 	bl	8006b1c <aci_gap_configure_whitelist>
 800917e:	4603      	mov	r3, r0
 8009180:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8009182:	7dfb      	ldrb	r3, [r7, #23]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00f      	beq.n	80091a8 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8009188:	4816      	ldr	r0, [pc, #88]	; (80091e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800918a:	f7ff f921 	bl	80083d0 <DbgTraceGetFileName>
 800918e:	4601      	mov	r1, r0
 8009190:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 8009194:	4a14      	ldr	r2, [pc, #80]	; (80091e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8009196:	4815      	ldr	r0, [pc, #84]	; (80091ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8009198:	f001 f91a 	bl	800a3d0 <iprintf>
 800919c:	7dfb      	ldrb	r3, [r7, #23]
 800919e:	4619      	mov	r1, r3
 80091a0:	481c      	ldr	r0, [pc, #112]	; (8009214 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 80091a2:	f001 f915 	bl	800a3d0 <iprintf>
 80091a6:	e00c      	b.n	80091c2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80091a8:	480e      	ldr	r0, [pc, #56]	; (80091e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80091aa:	f7ff f911 	bl	80083d0 <DbgTraceGetFileName>
 80091ae:	4601      	mov	r1, r0
 80091b0:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 80091b4:	4a0c      	ldr	r2, [pc, #48]	; (80091e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80091b6:	480d      	ldr	r0, [pc, #52]	; (80091ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80091b8:	f001 f90a 	bl	800a3d0 <iprintf>
 80091bc:	4816      	ldr	r0, [pc, #88]	; (8009218 <Ble_Hci_Gap_Gatt_Init+0x520>)
 80091be:	f001 f9a3 	bl	800a508 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 80091c2:	4808      	ldr	r0, [pc, #32]	; (80091e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80091c4:	f7ff f904 	bl	80083d0 <DbgTraceGetFileName>
 80091c8:	4601      	mov	r1, r0
 80091ca:	f240 33df 	movw	r3, #991	; 0x3df
 80091ce:	4a06      	ldr	r2, [pc, #24]	; (80091e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80091d0:	4806      	ldr	r0, [pc, #24]	; (80091ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80091d2:	f001 f8fd 	bl	800a3d0 <iprintf>
 80091d6:	4811      	ldr	r0, [pc, #68]	; (800921c <Ble_Hci_Gap_Gatt_Init+0x524>)
 80091d8:	f001 f8fa 	bl	800a3d0 <iprintf>
}
 80091dc:	bf00      	nop
 80091de:	371c      	adds	r7, #28
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e4:	0800c6dc 	.word	0x0800c6dc
 80091e8:	0800d804 	.word	0x0800d804
 80091ec:	0800c6f8 	.word	0x0800c6f8
 80091f0:	0800cfc0 	.word	0x0800cfc0
 80091f4:	0800cfe0 	.word	0x0800cfe0
 80091f8:	0800d01c 	.word	0x0800d01c
 80091fc:	20000bf4 	.word	0x20000bf4
 8009200:	0800d048 	.word	0x0800d048
 8009204:	0800d088 	.word	0x0800d088
 8009208:	0001b207 	.word	0x0001b207
 800920c:	0800d0b8 	.word	0x0800d0b8
 8009210:	0800d104 	.word	0x0800d104
 8009214:	0800d140 	.word	0x0800d140
 8009218:	0800d180 	.word	0x0800d180
 800921c:	0800d1b0 	.word	0x0800d1b0

08009220 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08c      	sub	sp, #48	; 0x30
 8009224:	af08      	add	r7, sp, #32
 8009226:	4603      	mov	r3, r0
 8009228:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800922a:	2392      	movs	r3, #146	; 0x92
 800922c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800922e:	4a32      	ldr	r2, [pc, #200]	; (80092f8 <Adv_Request+0xd8>)
 8009230:	79fb      	ldrb	r3, [r7, #7]
 8009232:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8009236:	2300      	movs	r3, #0
 8009238:	9306      	str	r3, [sp, #24]
 800923a:	2300      	movs	r3, #0
 800923c:	9305      	str	r3, [sp, #20]
 800923e:	2300      	movs	r3, #0
 8009240:	9304      	str	r3, [sp, #16]
 8009242:	2300      	movs	r3, #0
 8009244:	9303      	str	r3, [sp, #12]
 8009246:	2300      	movs	r3, #0
 8009248:	9302      	str	r3, [sp, #8]
 800924a:	2300      	movs	r3, #0
 800924c:	9301      	str	r3, [sp, #4]
 800924e:	2300      	movs	r3, #0
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	2300      	movs	r3, #0
 8009254:	22a0      	movs	r2, #160	; 0xa0
 8009256:	2180      	movs	r1, #128	; 0x80
 8009258:	2000      	movs	r0, #0
 800925a:	f7fd f8c7 	bl	80063ec <aci_gap_set_discoverable>
 800925e:	4603      	mov	r3, r0
 8009260:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00f      	beq.n	8009288 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8009268:	4824      	ldr	r0, [pc, #144]	; (80092fc <Adv_Request+0xdc>)
 800926a:	f7ff f8b1 	bl	80083d0 <DbgTraceGetFileName>
 800926e:	4601      	mov	r1, r0
 8009270:	f240 33f5 	movw	r3, #1013	; 0x3f5
 8009274:	4a22      	ldr	r2, [pc, #136]	; (8009300 <Adv_Request+0xe0>)
 8009276:	4823      	ldr	r0, [pc, #140]	; (8009304 <Adv_Request+0xe4>)
 8009278:	f001 f8aa 	bl	800a3d0 <iprintf>
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	4619      	mov	r1, r3
 8009280:	4821      	ldr	r0, [pc, #132]	; (8009308 <Adv_Request+0xe8>)
 8009282:	f001 f8a5 	bl	800a3d0 <iprintf>
 8009286:	e00c      	b.n	80092a2 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8009288:	481c      	ldr	r0, [pc, #112]	; (80092fc <Adv_Request+0xdc>)
 800928a:	f7ff f8a1 	bl	80083d0 <DbgTraceGetFileName>
 800928e:	4601      	mov	r1, r0
 8009290:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8009294:	4a1a      	ldr	r2, [pc, #104]	; (8009300 <Adv_Request+0xe0>)
 8009296:	481b      	ldr	r0, [pc, #108]	; (8009304 <Adv_Request+0xe4>)
 8009298:	f001 f89a 	bl	800a3d0 <iprintf>
 800929c:	481b      	ldr	r0, [pc, #108]	; (800930c <Adv_Request+0xec>)
 800929e:	f001 f933 	bl	800a508 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80092a2:	491b      	ldr	r1, [pc, #108]	; (8009310 <Adv_Request+0xf0>)
 80092a4:	2015      	movs	r0, #21
 80092a6:	f7fd fbc7 	bl	8006a38 <aci_gap_update_adv_data>
 80092aa:	4603      	mov	r3, r0
 80092ac:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00f      	beq.n	80092d4 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 80092b4:	4811      	ldr	r0, [pc, #68]	; (80092fc <Adv_Request+0xdc>)
 80092b6:	f7ff f88b 	bl	80083d0 <DbgTraceGetFileName>
 80092ba:	4601      	mov	r1, r0
 80092bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092c0:	4a0f      	ldr	r2, [pc, #60]	; (8009300 <Adv_Request+0xe0>)
 80092c2:	4810      	ldr	r0, [pc, #64]	; (8009304 <Adv_Request+0xe4>)
 80092c4:	f001 f884 	bl	800a3d0 <iprintf>
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
 80092ca:	4619      	mov	r1, r3
 80092cc:	4811      	ldr	r0, [pc, #68]	; (8009314 <Adv_Request+0xf4>)
 80092ce:	f001 f87f 	bl	800a3d0 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80092d2:	e00d      	b.n	80092f0 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 80092d4:	4809      	ldr	r0, [pc, #36]	; (80092fc <Adv_Request+0xdc>)
 80092d6:	f7ff f87b 	bl	80083d0 <DbgTraceGetFileName>
 80092da:	4601      	mov	r1, r0
 80092dc:	f240 4304 	movw	r3, #1028	; 0x404
 80092e0:	4a07      	ldr	r2, [pc, #28]	; (8009300 <Adv_Request+0xe0>)
 80092e2:	4808      	ldr	r0, [pc, #32]	; (8009304 <Adv_Request+0xe4>)
 80092e4:	f001 f874 	bl	800a3d0 <iprintf>
 80092e8:	480b      	ldr	r0, [pc, #44]	; (8009318 <Adv_Request+0xf8>)
 80092ea:	f001 f871 	bl	800a3d0 <iprintf>
  return;
 80092ee:	bf00      	nop
}
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20000bf4 	.word	0x20000bf4
 80092fc:	0800c6dc 	.word	0x0800c6dc
 8009300:	0800d81c 	.word	0x0800d81c
 8009304:	0800c6f8 	.word	0x0800c6f8
 8009308:	0800d1dc 	.word	0x0800d1dc
 800930c:	0800d214 	.word	0x0800d214
 8009310:	20000014 	.word	0x20000014
 8009314:	0800d23c 	.word	0x0800d23c
 8009318:	0800d270 	.word	0x0800d270

0800931c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8009322:	f7ff f963 	bl	80085ec <LL_FLASH_GetUDN>
 8009326:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932e:	d023      	beq.n	8009378 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8009330:	f7ff f974 	bl	800861c <LL_FLASH_GetSTCompanyID>
 8009334:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8009336:	f7ff f965 	bl	8008604 <LL_FLASH_GetDeviceID>
 800933a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	b2da      	uxtb	r2, r3
 8009340:	4b16      	ldr	r3, [pc, #88]	; (800939c <BleGetBdAddress+0x80>)
 8009342:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	0a1b      	lsrs	r3, r3, #8
 8009348:	b2da      	uxtb	r2, r3
 800934a:	4b14      	ldr	r3, [pc, #80]	; (800939c <BleGetBdAddress+0x80>)
 800934c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	b2da      	uxtb	r2, r3
 8009352:	4b12      	ldr	r3, [pc, #72]	; (800939c <BleGetBdAddress+0x80>)
 8009354:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	b2da      	uxtb	r2, r3
 800935a:	4b10      	ldr	r3, [pc, #64]	; (800939c <BleGetBdAddress+0x80>)
 800935c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	0a1b      	lsrs	r3, r3, #8
 8009362:	b2da      	uxtb	r2, r3
 8009364:	4b0d      	ldr	r3, [pc, #52]	; (800939c <BleGetBdAddress+0x80>)
 8009366:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	0c1b      	lsrs	r3, r3, #16
 800936c:	b2da      	uxtb	r2, r3
 800936e:	4b0b      	ldr	r3, [pc, #44]	; (800939c <BleGetBdAddress+0x80>)
 8009370:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009372:	4b0a      	ldr	r3, [pc, #40]	; (800939c <BleGetBdAddress+0x80>)
 8009374:	617b      	str	r3, [r7, #20]
 8009376:	e00b      	b.n	8009390 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8009378:	2000      	movs	r0, #0
 800937a:	f7ff f851 	bl	8008420 <OTP_Read>
 800937e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	617b      	str	r3, [r7, #20]
 800938a:	e001      	b.n	8009390 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800938c:	4b04      	ldr	r3, [pc, #16]	; (80093a0 <BleGetBdAddress+0x84>)
 800938e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009390:	697b      	ldr	r3, [r7, #20]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20000bec 	.word	0x20000bec
 80093a0:	0800d7b4 	.word	0x0800d7b4

080093a4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80093aa:	4b1f      	ldr	r3, [pc, #124]	; (8009428 <Adv_Cancel+0x84>)
 80093ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093b0:	2b05      	cmp	r3, #5
 80093b2:	d035      	beq.n	8009420 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80093b4:	2392      	movs	r3, #146	; 0x92
 80093b6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80093b8:	f7fc fff4 	bl	80063a4 <aci_gap_set_non_discoverable>
 80093bc:	4603      	mov	r3, r0
 80093be:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80093c0:	4b19      	ldr	r3, [pc, #100]	; (8009428 <Adv_Cancel+0x84>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 80093c8:	79fb      	ldrb	r3, [r7, #7]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00d      	beq.n	80093ea <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 80093ce:	4817      	ldr	r0, [pc, #92]	; (800942c <Adv_Cancel+0x88>)
 80093d0:	f7fe fffe 	bl	80083d0 <DbgTraceGetFileName>
 80093d4:	4601      	mov	r1, r0
 80093d6:	f240 4352 	movw	r3, #1106	; 0x452
 80093da:	4a15      	ldr	r2, [pc, #84]	; (8009430 <Adv_Cancel+0x8c>)
 80093dc:	4815      	ldr	r0, [pc, #84]	; (8009434 <Adv_Cancel+0x90>)
 80093de:	f000 fff7 	bl	800a3d0 <iprintf>
 80093e2:	4815      	ldr	r0, [pc, #84]	; (8009438 <Adv_Cancel+0x94>)
 80093e4:	f000 fff4 	bl	800a3d0 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80093e8:	e01a      	b.n	8009420 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 80093ea:	4810      	ldr	r0, [pc, #64]	; (800942c <Adv_Cancel+0x88>)
 80093ec:	f7fe fff0 	bl	80083d0 <DbgTraceGetFileName>
 80093f0:	4601      	mov	r1, r0
 80093f2:	f240 4356 	movw	r3, #1110	; 0x456
 80093f6:	4a0e      	ldr	r2, [pc, #56]	; (8009430 <Adv_Cancel+0x8c>)
 80093f8:	480e      	ldr	r0, [pc, #56]	; (8009434 <Adv_Cancel+0x90>)
 80093fa:	f000 ffe9 	bl	800a3d0 <iprintf>
 80093fe:	480f      	ldr	r0, [pc, #60]	; (800943c <Adv_Cancel+0x98>)
 8009400:	f000 ffe6 	bl	800a3d0 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8009404:	4809      	ldr	r0, [pc, #36]	; (800942c <Adv_Cancel+0x88>)
 8009406:	f7fe ffe3 	bl	80083d0 <DbgTraceGetFileName>
 800940a:	4601      	mov	r1, r0
 800940c:	f240 4357 	movw	r3, #1111	; 0x457
 8009410:	4a07      	ldr	r2, [pc, #28]	; (8009430 <Adv_Cancel+0x8c>)
 8009412:	4808      	ldr	r0, [pc, #32]	; (8009434 <Adv_Cancel+0x90>)
 8009414:	f000 ffdc 	bl	800a3d0 <iprintf>
 8009418:	4809      	ldr	r0, [pc, #36]	; (8009440 <Adv_Cancel+0x9c>)
 800941a:	f000 ffd9 	bl	800a3d0 <iprintf>
  return;
 800941e:	bf00      	nop
 8009420:	bf00      	nop
}
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	20000bf4 	.word	0x20000bf4
 800942c:	0800c6dc 	.word	0x0800c6dc
 8009430:	0800d828 	.word	0x0800d828
 8009434:	0800c6f8 	.word	0x0800c6f8
 8009438:	0800d298 	.word	0x0800d298
 800943c:	0800d2bc 	.word	0x0800d2bc
 8009440:	0800d2c4 	.word	0x0800d2c4

08009444 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800944c:	2100      	movs	r1, #0
 800944e:	2002      	movs	r0, #2
 8009450:	f000 fe5e 	bl	800a110 <UTIL_SEQ_SetTask>

  return;
 8009454:	bf00      	nop
}
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009464:	2001      	movs	r0, #1
 8009466:	f000 febf 	bl	800a1e8 <UTIL_SEQ_SetEvt>

  return;
 800946a:	bf00      	nop
}
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b082      	sub	sp, #8
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800947a:	2001      	movs	r0, #1
 800947c:	f000 fed4 	bl	800a228 <UTIL_SEQ_WaitEvt>

  return;
 8009480:	bf00      	nop
}
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	3308      	adds	r3, #8
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe f940 	bl	8007720 <SVCCTL_UserEvtRx>
 80094a0:	4603      	mov	r3, r0
 80094a2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80094a4:	7afb      	ldrb	r3, [r7, #11]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d003      	beq.n	80094b2 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2201      	movs	r2, #1
 80094ae:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80094b0:	e003      	b.n	80094ba <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	701a      	strb	r2, [r3, #0]
  return;
 80094b8:	bf00      	nop
}
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80094ca:	79fb      	ldrb	r3, [r7, #7]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <BLE_StatusNot+0x16>
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d006      	beq.n	80094e2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80094d4:	e00b      	b.n	80094ee <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80094d6:	2303      	movs	r3, #3
 80094d8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 fe44 	bl	800a168 <UTIL_SEQ_PauseTask>
      break;
 80094e0:	e005      	b.n	80094ee <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80094e2:	2303      	movs	r3, #3
 80094e4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 fe5e 	bl	800a1a8 <UTIL_SEQ_ResumeTask>
      break;
 80094ec:	bf00      	nop
  }

  return;
 80094ee:	bf00      	nop
}
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80094f8:	b5b0      	push	{r4, r5, r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	int i = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	60fb      	str	r3, [r7, #12]
	// copy data update buffer +BCH
	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6859      	ldr	r1, [r3, #4]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	7a1b      	ldrb	r3, [r3, #8]
 800950c:	461a      	mov	r2, r3
 800950e:	4854      	ldr	r0, [pc, #336]	; (8009660 <Custom_STM_App_Notification+0x168>)
 8009510:	f000 ff48 	bl	800a3a4 <memcpy>
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	2b03      	cmp	r3, #3
 800951a:	f200 8097 	bhi.w	800964c <Custom_STM_App_Notification+0x154>
 800951e:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <Custom_STM_App_Notification+0x2c>)
 8009520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009524:	0800964d 	.word	0x0800964d
 8009528:	08009535 	.word	0x08009535
 800952c:	0800964d 	.word	0x0800964d
 8009530:	0800964d 	.word	0x0800964d
      /* USER CODE END CUSTOM_STM_GSSID_READ_EVT */
      break;

    case CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT */
    	error = 0;
 8009534:	494b      	ldr	r1, [pc, #300]	; (8009664 <Custom_STM_App_Notification+0x16c>)
 8009536:	f04f 0200 	mov.w	r2, #0
 800953a:	f04f 0300 	mov.w	r3, #0
 800953e:	e9c1 2300 	strd	r2, r3, [r1]
    	while(UpdateCharData[i] != 0x00) {
 8009542:	e019      	b.n	8009578 <Custom_STM_App_Notification+0x80>
    		Custom_App_Context.ssid[i] = UpdateCharData[i];
 8009544:	4a46      	ldr	r2, [pc, #280]	; (8009660 <Custom_STM_App_Notification+0x168>)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4413      	add	r3, r2
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2200      	movs	r2, #0
 8009550:	461c      	mov	r4, r3
 8009552:	4615      	mov	r5, r2
 8009554:	4a44      	ldr	r2, [pc, #272]	; (8009668 <Custom_STM_App_Notification+0x170>)
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	4413      	add	r3, r2
 800955c:	e9c3 4500 	strd	r4, r5, [r3]
    		i++;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3301      	adds	r3, #1
 8009564:	60fb      	str	r3, [r7, #12]
    		if(nb != 0 && i >= nb) {
 8009566:	4b41      	ldr	r3, [pc, #260]	; (800966c <Custom_STM_App_Notification+0x174>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d004      	beq.n	8009578 <Custom_STM_App_Notification+0x80>
 800956e:	4b3f      	ldr	r3, [pc, #252]	; (800966c <Custom_STM_App_Notification+0x174>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	429a      	cmp	r2, r3
 8009576:	da06      	bge.n	8009586 <Custom_STM_App_Notification+0x8e>
    	while(UpdateCharData[i] != 0x00) {
 8009578:	4a39      	ldr	r2, [pc, #228]	; (8009660 <Custom_STM_App_Notification+0x168>)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	4413      	add	r3, r2
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1df      	bne.n	8009544 <Custom_STM_App_Notification+0x4c>
 8009584:	e000      	b.n	8009588 <Custom_STM_App_Notification+0x90>
    			break;
 8009586:	bf00      	nop
    		}
    	}
    	nb = i;
 8009588:	4a38      	ldr	r2, [pc, #224]	; (800966c <Custom_STM_App_Notification+0x174>)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6013      	str	r3, [r2, #0]
    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800958e:	2201      	movs	r2, #1
 8009590:	2101      	movs	r1, #1
 8009592:	4837      	ldr	r0, [pc, #220]	; (8009670 <Custom_STM_App_Notification+0x178>)
 8009594:	f7fa f944 	bl	8003820 <HAL_GPIO_WritePin>
    	for(int pos=0; pos < i; pos++) {
 8009598:	2300      	movs	r3, #0
 800959a:	60bb      	str	r3, [r7, #8]
 800959c:	e040      	b.n	8009620 <Custom_STM_App_Notification+0x128>
    		error += Custom_App_Context.ssid[i-1-pos]*pow(16, pos*2);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	1e5a      	subs	r2, r3, #1
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	4a30      	ldr	r2, [pc, #192]	; (8009668 <Custom_STM_App_Notification+0x170>)
 80095a8:	00db      	lsls	r3, r3, #3
 80095aa:	4413      	add	r3, r2
 80095ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b0:	4610      	mov	r0, r2
 80095b2:	4619      	mov	r1, r3
 80095b4:	f7f6 ffc2 	bl	800053c <__aeabi_ul2d>
 80095b8:	4604      	mov	r4, r0
 80095ba:	460d      	mov	r5, r1
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7f6 ff87 	bl	80004d4 <__aeabi_i2d>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	ec43 2b11 	vmov	d1, r2, r3
 80095ce:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009658 <Custom_STM_App_Notification+0x160>
 80095d2:	f001 ff7f 	bl	800b4d4 <pow>
 80095d6:	ec53 2b10 	vmov	r2, r3, d0
 80095da:	4620      	mov	r0, r4
 80095dc:	4629      	mov	r1, r5
 80095de:	f7f6 ffe3 	bl	80005a8 <__aeabi_dmul>
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	4614      	mov	r4, r2
 80095e8:	461d      	mov	r5, r3
 80095ea:	4b1e      	ldr	r3, [pc, #120]	; (8009664 <Custom_STM_App_Notification+0x16c>)
 80095ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f0:	4610      	mov	r0, r2
 80095f2:	4619      	mov	r1, r3
 80095f4:	f7f6 ffa2 	bl	800053c <__aeabi_ul2d>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4620      	mov	r0, r4
 80095fe:	4629      	mov	r1, r5
 8009600:	f7f6 fe1c 	bl	800023c <__adddf3>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	4610      	mov	r0, r2
 800960a:	4619      	mov	r1, r3
 800960c:	f7f7 fa94 	bl	8000b38 <__aeabi_d2ulz>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	4913      	ldr	r1, [pc, #76]	; (8009664 <Custom_STM_App_Notification+0x16c>)
 8009616:	e9c1 2300 	strd	r2, r3, [r1]
    	for(int pos=0; pos < i; pos++) {
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	3301      	adds	r3, #1
 800961e:	60bb      	str	r3, [r7, #8]
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	429a      	cmp	r2, r3
 8009626:	dbba      	blt.n	800959e <Custom_STM_App_Notification+0xa6>
    	}
    	if(error == SSID) {
 8009628:	4b0e      	ldr	r3, [pc, #56]	; (8009664 <Custom_STM_App_Notification+0x16c>)
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	4b11      	ldr	r3, [pc, #68]	; (8009674 <Custom_STM_App_Notification+0x17c>)
 8009630:	429a      	cmp	r2, r3
 8009632:	d105      	bne.n	8009640 <Custom_STM_App_Notification+0x148>
    		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8009634:	2201      	movs	r2, #1
 8009636:	2120      	movs	r1, #32
 8009638:	480d      	ldr	r0, [pc, #52]	; (8009670 <Custom_STM_App_Notification+0x178>)
 800963a:	f7fa f8f1 	bl	8003820 <HAL_GPIO_WritePin>
    	} else {
    		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
    	}

    	/* USER CODE END CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT */
      break;
 800963e:	e006      	b.n	800964e <Custom_STM_App_Notification+0x156>
    		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8009640:	2200      	movs	r2, #0
 8009642:	2120      	movs	r1, #32
 8009644:	480a      	ldr	r0, [pc, #40]	; (8009670 <Custom_STM_App_Notification+0x178>)
 8009646:	f7fa f8eb 	bl	8003820 <HAL_GPIO_WritePin>
      break;
 800964a:	e000      	b.n	800964e <Custom_STM_App_Notification+0x156>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800964c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800964e:	bf00      	nop
}
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bdb0      	pop	{r4, r5, r7, pc}
 8009656:	bf00      	nop
 8009658:	00000000 	.word	0x00000000
 800965c:	40300000 	.word	0x40300000
 8009660:	20000e68 	.word	0x20000e68
 8009664:	20000f68 	.word	0x20000f68
 8009668:	20000c80 	.word	0x20000c80
 800966c:	20000f60 	.word	0x20000f60
 8009670:	48000400 	.word	0x48000400
 8009674:	73736964 	.word	0x73736964

08009678 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8009678:	b480      	push	{r7}
 800967a:	b083      	sub	sp, #12
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d002      	beq.n	800968e <Custom_APP_Notification+0x16>
 8009688:	2b01      	cmp	r3, #1
 800968a:	d002      	beq.n	8009692 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800968c:	e002      	b.n	8009694 <Custom_APP_Notification+0x1c>
      break;
 800968e:	bf00      	nop
 8009690:	e000      	b.n	8009694 <Custom_APP_Notification+0x1c>
      break;
 8009692:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009694:	bf00      	nop
}
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80096a4:	bf00      	nop
}
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
	...

080096b0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08a      	sub	sp, #40	; 0x28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80096b8:	2300      	movs	r3, #0
 80096ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	3301      	adds	r3, #1
 80096c2:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	2bff      	cmp	r3, #255	; 0xff
 80096ca:	d147      	bne.n	800975c <Custom_STM_Event_Handler+0xac>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	3302      	adds	r3, #2
 80096d0:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	f640 4214 	movw	r2, #3092	; 0xc14
 80096dc:	4293      	cmp	r3, r2
 80096de:	d037      	beq.n	8009750 <Custom_STM_Event_Handler+0xa0>
 80096e0:	f640 4214 	movw	r2, #3092	; 0xc14
 80096e4:	4293      	cmp	r3, r2
 80096e6:	dc35      	bgt.n	8009754 <Custom_STM_Event_Handler+0xa4>
 80096e8:	f640 4201 	movw	r2, #3073	; 0xc01
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d003      	beq.n	80096f8 <Custom_STM_Event_Handler+0x48>
 80096f0:	f640 4213 	movw	r2, #3091	; 0xc13
 80096f4:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 80096f6:	e030      	b.n	800975a <Custom_STM_Event_Handler+0xaa>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	3302      	adds	r3, #2
 80096fc:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomGssidHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	885b      	ldrh	r3, [r3, #2]
 8009702:	b29b      	uxth	r3, r3
 8009704:	461a      	mov	r2, r3
 8009706:	4b19      	ldr	r3, [pc, #100]	; (800976c <Custom_STM_Event_Handler+0xbc>)
 8009708:	885b      	ldrh	r3, [r3, #2]
 800970a:	3301      	adds	r3, #1
 800970c:	429a      	cmp	r2, r3
 800970e:	d112      	bne.n	8009736 <Custom_STM_Event_Handler+0x86>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009710:	2301      	movs	r3, #1
 8009712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT;
 8009716:	2301      	movs	r3, #1
 8009718:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	88db      	ldrh	r3, [r3, #6]
 800971e:	b29b      	uxth	r3, r3
 8009720:	b2db      	uxtb	r3, r3
 8009722:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8009724:	69bb      	ldr	r3, [r7, #24]
 8009726:	3308      	adds	r3, #8
 8009728:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 800972a:	f107 0308 	add.w	r3, r7, #8
 800972e:	4618      	mov	r0, r3
 8009730:	f7ff fee2 	bl	80094f8 <Custom_STM_App_Notification>
          break;
 8009734:	e010      	b.n	8009758 <Custom_STM_Event_Handler+0xa8>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGpassHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	885b      	ldrh	r3, [r3, #2]
 800973a:	b29b      	uxth	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	4b0b      	ldr	r3, [pc, #44]	; (800976c <Custom_STM_Event_Handler+0xbc>)
 8009740:	889b      	ldrh	r3, [r3, #4]
 8009742:	3301      	adds	r3, #1
 8009744:	429a      	cmp	r2, r3
 8009746:	d107      	bne.n	8009758 <Custom_STM_Event_Handler+0xa8>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009748:	2301      	movs	r3, #1
 800974a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800974e:	e003      	b.n	8009758 <Custom_STM_Event_Handler+0xa8>
          break;
 8009750:	bf00      	nop
 8009752:	e004      	b.n	800975e <Custom_STM_Event_Handler+0xae>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009754:	bf00      	nop
 8009756:	e002      	b.n	800975e <Custom_STM_Event_Handler+0xae>
          break;
 8009758:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800975a:	e000      	b.n	800975e <Custom_STM_Event_Handler+0xae>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800975c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800975e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8009762:	4618      	mov	r0, r3
 8009764:	3728      	adds	r7, #40	; 0x28
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000f70 	.word	0x20000f70

08009770 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b08c      	sub	sp, #48	; 0x30
 8009774:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009776:	2392      	movs	r3, #146	; 0x92
 8009778:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800977a:	487f      	ldr	r0, [pc, #508]	; (8009978 <SVCCTL_InitCustomSvc+0x208>)
 800977c:	f7fd ffb6 	bl	80076ec <SVCCTL_RegisterSvcHandler>
   *                                2 for get_ssid +
   *                                2 for get_password +
   *                              = 5
   */

  COPY_FIRST_SERVICE_UUID(uuid.Char_UUID_128);
 8009780:	238f      	movs	r3, #143	; 0x8f
 8009782:	713b      	strb	r3, [r7, #4]
 8009784:	23e5      	movs	r3, #229	; 0xe5
 8009786:	717b      	strb	r3, [r7, #5]
 8009788:	23b3      	movs	r3, #179	; 0xb3
 800978a:	71bb      	strb	r3, [r7, #6]
 800978c:	23d5      	movs	r3, #213	; 0xd5
 800978e:	71fb      	strb	r3, [r7, #7]
 8009790:	232e      	movs	r3, #46	; 0x2e
 8009792:	723b      	strb	r3, [r7, #8]
 8009794:	237f      	movs	r3, #127	; 0x7f
 8009796:	727b      	strb	r3, [r7, #9]
 8009798:	234a      	movs	r3, #74	; 0x4a
 800979a:	72bb      	strb	r3, [r7, #10]
 800979c:	2398      	movs	r3, #152	; 0x98
 800979e:	72fb      	strb	r3, [r7, #11]
 80097a0:	232a      	movs	r3, #42	; 0x2a
 80097a2:	733b      	strb	r3, [r7, #12]
 80097a4:	2348      	movs	r3, #72	; 0x48
 80097a6:	737b      	strb	r3, [r7, #13]
 80097a8:	237a      	movs	r3, #122	; 0x7a
 80097aa:	73bb      	strb	r3, [r7, #14]
 80097ac:	23cc      	movs	r3, #204	; 0xcc
 80097ae:	73fb      	strb	r3, [r7, #15]
 80097b0:	23ed      	movs	r3, #237	; 0xed
 80097b2:	743b      	strb	r3, [r7, #16]
 80097b4:	23fe      	movs	r3, #254	; 0xfe
 80097b6:	747b      	strb	r3, [r7, #17]
 80097b8:	2300      	movs	r3, #0
 80097ba:	74bb      	strb	r3, [r7, #18]
 80097bc:	2300      	movs	r3, #0
 80097be:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80097c0:	1d39      	adds	r1, r7, #4
 80097c2:	4b6e      	ldr	r3, [pc, #440]	; (800997c <SVCCTL_InitCustomSvc+0x20c>)
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	2305      	movs	r3, #5
 80097c8:	2201      	movs	r2, #1
 80097ca:	2002      	movs	r0, #2
 80097cc:	f7fd fa56 	bl	8006c7c <aci_gatt_add_service>
 80097d0:	4603      	mov	r3, r0
 80097d2:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             5,
                             &(CustomContext.CustomFsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00f      	beq.n	80097fa <SVCCTL_InitCustomSvc+0x8a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: fs, error code: 0x%x \n\r", ret);
 80097da:	4869      	ldr	r0, [pc, #420]	; (8009980 <SVCCTL_InitCustomSvc+0x210>)
 80097dc:	f7fe fdf8 	bl	80083d0 <DbgTraceGetFileName>
 80097e0:	4601      	mov	r1, r0
 80097e2:	f240 1301 	movw	r3, #257	; 0x101
 80097e6:	4a67      	ldr	r2, [pc, #412]	; (8009984 <SVCCTL_InitCustomSvc+0x214>)
 80097e8:	4867      	ldr	r0, [pc, #412]	; (8009988 <SVCCTL_InitCustomSvc+0x218>)
 80097ea:	f000 fdf1 	bl	800a3d0 <iprintf>
 80097ee:	7dfb      	ldrb	r3, [r7, #23]
 80097f0:	4619      	mov	r1, r3
 80097f2:	4866      	ldr	r0, [pc, #408]	; (800998c <SVCCTL_InitCustomSvc+0x21c>)
 80097f4:	f000 fdec 	bl	800a3d0 <iprintf>
 80097f8:	e00c      	b.n	8009814 <SVCCTL_InitCustomSvc+0xa4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: fs \n\r");
 80097fa:	4861      	ldr	r0, [pc, #388]	; (8009980 <SVCCTL_InitCustomSvc+0x210>)
 80097fc:	f7fe fde8 	bl	80083d0 <DbgTraceGetFileName>
 8009800:	4601      	mov	r1, r0
 8009802:	f240 1305 	movw	r3, #261	; 0x105
 8009806:	4a5f      	ldr	r2, [pc, #380]	; (8009984 <SVCCTL_InitCustomSvc+0x214>)
 8009808:	485f      	ldr	r0, [pc, #380]	; (8009988 <SVCCTL_InitCustomSvc+0x218>)
 800980a:	f000 fde1 	bl	800a3d0 <iprintf>
 800980e:	4860      	ldr	r0, [pc, #384]	; (8009990 <SVCCTL_InitCustomSvc+0x220>)
 8009810:	f000 fdde 	bl	800a3d0 <iprintf>
  }

  /**
   *  get_ssid
   */
  COPY_GET_SSID_UUID(uuid.Char_UUID_128);
 8009814:	2319      	movs	r3, #25
 8009816:	713b      	strb	r3, [r7, #4]
 8009818:	23ed      	movs	r3, #237	; 0xed
 800981a:	717b      	strb	r3, [r7, #5]
 800981c:	2382      	movs	r3, #130	; 0x82
 800981e:	71bb      	strb	r3, [r7, #6]
 8009820:	23ae      	movs	r3, #174	; 0xae
 8009822:	71fb      	strb	r3, [r7, #7]
 8009824:	23ed      	movs	r3, #237	; 0xed
 8009826:	723b      	strb	r3, [r7, #8]
 8009828:	2321      	movs	r3, #33	; 0x21
 800982a:	727b      	strb	r3, [r7, #9]
 800982c:	234c      	movs	r3, #76	; 0x4c
 800982e:	72bb      	strb	r3, [r7, #10]
 8009830:	239d      	movs	r3, #157	; 0x9d
 8009832:	72fb      	strb	r3, [r7, #11]
 8009834:	2341      	movs	r3, #65	; 0x41
 8009836:	733b      	strb	r3, [r7, #12]
 8009838:	2345      	movs	r3, #69	; 0x45
 800983a:	737b      	strb	r3, [r7, #13]
 800983c:	2322      	movs	r3, #34	; 0x22
 800983e:	73bb      	strb	r3, [r7, #14]
 8009840:	238e      	movs	r3, #142	; 0x8e
 8009842:	73fb      	strb	r3, [r7, #15]
 8009844:	23cd      	movs	r3, #205	; 0xcd
 8009846:	743b      	strb	r3, [r7, #16]
 8009848:	23ab      	movs	r3, #171	; 0xab
 800984a:	747b      	strb	r3, [r7, #17]
 800984c:	2300      	movs	r3, #0
 800984e:	74bb      	strb	r3, [r7, #18]
 8009850:	2300      	movs	r3, #0
 8009852:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 8009854:	4b49      	ldr	r3, [pc, #292]	; (800997c <SVCCTL_InitCustomSvc+0x20c>)
 8009856:	8818      	ldrh	r0, [r3, #0]
 8009858:	4b4e      	ldr	r3, [pc, #312]	; (8009994 <SVCCTL_InitCustomSvc+0x224>)
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	b29b      	uxth	r3, r3
 800985e:	1d3a      	adds	r2, r7, #4
 8009860:	494d      	ldr	r1, [pc, #308]	; (8009998 <SVCCTL_InitCustomSvc+0x228>)
 8009862:	9105      	str	r1, [sp, #20]
 8009864:	2101      	movs	r1, #1
 8009866:	9104      	str	r1, [sp, #16]
 8009868:	2110      	movs	r1, #16
 800986a:	9103      	str	r1, [sp, #12]
 800986c:	2101      	movs	r1, #1
 800986e:	9102      	str	r1, [sp, #8]
 8009870:	2100      	movs	r1, #0
 8009872:	9101      	str	r1, [sp, #4]
 8009874:	2106      	movs	r1, #6
 8009876:	9100      	str	r1, [sp, #0]
 8009878:	2102      	movs	r1, #2
 800987a:	f7fd fad5 	bl	8006e28 <aci_gatt_add_char>
 800987e:	4603      	mov	r3, r0
 8009880:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGssidHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00f      	beq.n	80098a8 <SVCCTL_InitCustomSvc+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GSSID, error code: 0x%x \n\r", ret);
 8009888:	483d      	ldr	r0, [pc, #244]	; (8009980 <SVCCTL_InitCustomSvc+0x210>)
 800988a:	f7fe fda1 	bl	80083d0 <DbgTraceGetFileName>
 800988e:	4601      	mov	r1, r0
 8009890:	f240 1317 	movw	r3, #279	; 0x117
 8009894:	4a3b      	ldr	r2, [pc, #236]	; (8009984 <SVCCTL_InitCustomSvc+0x214>)
 8009896:	483c      	ldr	r0, [pc, #240]	; (8009988 <SVCCTL_InitCustomSvc+0x218>)
 8009898:	f000 fd9a 	bl	800a3d0 <iprintf>
 800989c:	7dfb      	ldrb	r3, [r7, #23]
 800989e:	4619      	mov	r1, r3
 80098a0:	483e      	ldr	r0, [pc, #248]	; (800999c <SVCCTL_InitCustomSvc+0x22c>)
 80098a2:	f000 fd95 	bl	800a3d0 <iprintf>
 80098a6:	e00c      	b.n	80098c2 <SVCCTL_InitCustomSvc+0x152>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GSSID \n\r");
 80098a8:	4835      	ldr	r0, [pc, #212]	; (8009980 <SVCCTL_InitCustomSvc+0x210>)
 80098aa:	f7fe fd91 	bl	80083d0 <DbgTraceGetFileName>
 80098ae:	4601      	mov	r1, r0
 80098b0:	f240 131b 	movw	r3, #283	; 0x11b
 80098b4:	4a33      	ldr	r2, [pc, #204]	; (8009984 <SVCCTL_InitCustomSvc+0x214>)
 80098b6:	4834      	ldr	r0, [pc, #208]	; (8009988 <SVCCTL_InitCustomSvc+0x218>)
 80098b8:	f000 fd8a 	bl	800a3d0 <iprintf>
 80098bc:	4838      	ldr	r0, [pc, #224]	; (80099a0 <SVCCTL_InitCustomSvc+0x230>)
 80098be:	f000 fd87 	bl	800a3d0 <iprintf>
  }
  /**
   *  get_password
   */
  COPY_GET_PASSWORD_UUID(uuid.Char_UUID_128);
 80098c2:	2319      	movs	r3, #25
 80098c4:	713b      	strb	r3, [r7, #4]
 80098c6:	23ed      	movs	r3, #237	; 0xed
 80098c8:	717b      	strb	r3, [r7, #5]
 80098ca:	2382      	movs	r3, #130	; 0x82
 80098cc:	71bb      	strb	r3, [r7, #6]
 80098ce:	23ae      	movs	r3, #174	; 0xae
 80098d0:	71fb      	strb	r3, [r7, #7]
 80098d2:	23ed      	movs	r3, #237	; 0xed
 80098d4:	723b      	strb	r3, [r7, #8]
 80098d6:	2321      	movs	r3, #33	; 0x21
 80098d8:	727b      	strb	r3, [r7, #9]
 80098da:	234c      	movs	r3, #76	; 0x4c
 80098dc:	72bb      	strb	r3, [r7, #10]
 80098de:	239d      	movs	r3, #157	; 0x9d
 80098e0:	72fb      	strb	r3, [r7, #11]
 80098e2:	2341      	movs	r3, #65	; 0x41
 80098e4:	733b      	strb	r3, [r7, #12]
 80098e6:	2345      	movs	r3, #69	; 0x45
 80098e8:	737b      	strb	r3, [r7, #13]
 80098ea:	2322      	movs	r3, #34	; 0x22
 80098ec:	73bb      	strb	r3, [r7, #14]
 80098ee:	238e      	movs	r3, #142	; 0x8e
 80098f0:	73fb      	strb	r3, [r7, #15]
 80098f2:	2334      	movs	r3, #52	; 0x34
 80098f4:	743b      	strb	r3, [r7, #16]
 80098f6:	2312      	movs	r3, #18
 80098f8:	747b      	strb	r3, [r7, #17]
 80098fa:	2300      	movs	r3, #0
 80098fc:	74bb      	strb	r3, [r7, #18]
 80098fe:	2300      	movs	r3, #0
 8009900:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 8009902:	4b1e      	ldr	r3, [pc, #120]	; (800997c <SVCCTL_InitCustomSvc+0x20c>)
 8009904:	8818      	ldrh	r0, [r3, #0]
 8009906:	4b27      	ldr	r3, [pc, #156]	; (80099a4 <SVCCTL_InitCustomSvc+0x234>)
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	b29b      	uxth	r3, r3
 800990c:	1d3a      	adds	r2, r7, #4
 800990e:	4926      	ldr	r1, [pc, #152]	; (80099a8 <SVCCTL_InitCustomSvc+0x238>)
 8009910:	9105      	str	r1, [sp, #20]
 8009912:	2101      	movs	r1, #1
 8009914:	9104      	str	r1, [sp, #16]
 8009916:	2110      	movs	r1, #16
 8009918:	9103      	str	r1, [sp, #12]
 800991a:	2101      	movs	r1, #1
 800991c:	9102      	str	r1, [sp, #8]
 800991e:	2100      	movs	r1, #0
 8009920:	9101      	str	r1, [sp, #4]
 8009922:	2106      	movs	r1, #6
 8009924:	9100      	str	r1, [sp, #0]
 8009926:	2102      	movs	r1, #2
 8009928:	f7fd fa7e 	bl	8006e28 <aci_gatt_add_char>
 800992c:	4603      	mov	r3, r0
 800992e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGpassHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8009930:	7dfb      	ldrb	r3, [r7, #23]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00f      	beq.n	8009956 <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GPASS, error code: 0x%x \n\r", ret);
 8009936:	4812      	ldr	r0, [pc, #72]	; (8009980 <SVCCTL_InitCustomSvc+0x210>)
 8009938:	f7fe fd4a 	bl	80083d0 <DbgTraceGetFileName>
 800993c:	4601      	mov	r1, r0
 800993e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8009942:	4a10      	ldr	r2, [pc, #64]	; (8009984 <SVCCTL_InitCustomSvc+0x214>)
 8009944:	4810      	ldr	r0, [pc, #64]	; (8009988 <SVCCTL_InitCustomSvc+0x218>)
 8009946:	f000 fd43 	bl	800a3d0 <iprintf>
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	4619      	mov	r1, r3
 800994e:	4817      	ldr	r0, [pc, #92]	; (80099ac <SVCCTL_InitCustomSvc+0x23c>)
 8009950:	f000 fd3e 	bl	800a3d0 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009954:	e00d      	b.n	8009972 <SVCCTL_InitCustomSvc+0x202>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GPASS \n\r");
 8009956:	480a      	ldr	r0, [pc, #40]	; (8009980 <SVCCTL_InitCustomSvc+0x210>)
 8009958:	f7fe fd3a 	bl	80083d0 <DbgTraceGetFileName>
 800995c:	4601      	mov	r1, r0
 800995e:	f44f 7398 	mov.w	r3, #304	; 0x130
 8009962:	4a08      	ldr	r2, [pc, #32]	; (8009984 <SVCCTL_InitCustomSvc+0x214>)
 8009964:	4808      	ldr	r0, [pc, #32]	; (8009988 <SVCCTL_InitCustomSvc+0x218>)
 8009966:	f000 fd33 	bl	800a3d0 <iprintf>
 800996a:	4811      	ldr	r0, [pc, #68]	; (80099b0 <SVCCTL_InitCustomSvc+0x240>)
 800996c:	f000 fd30 	bl	800a3d0 <iprintf>
  return;
 8009970:	bf00      	nop
}
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	080096b1 	.word	0x080096b1
 800997c:	20000f70 	.word	0x20000f70
 8009980:	0800d2e0 	.word	0x0800d2e0
 8009984:	0800d834 	.word	0x0800d834
 8009988:	0800d300 	.word	0x0800d300
 800998c:	0800d314 	.word	0x0800d314
 8009990:	0800d358 	.word	0x0800d358
 8009994:	20000029 	.word	0x20000029
 8009998:	20000f72 	.word	0x20000f72
 800999c:	0800d388 	.word	0x0800d388
 80099a0:	0800d3cc 	.word	0x0800d3cc
 80099a4:	2000002a 	.word	0x2000002a
 80099a8:	20000f74 	.word	0x20000f74
 80099ac:	0800d400 	.word	0x0800d400
 80099b0:	0800d444 	.word	0x0800d444

080099b4 <LL_PWR_EnableBootC2>:
{
 80099b4:	b480      	push	{r7}
 80099b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80099b8:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <LL_PWR_EnableBootC2+0x1c>)
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	4a04      	ldr	r2, [pc, #16]	; (80099d0 <LL_PWR_EnableBootC2+0x1c>)
 80099be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099c2:	60d3      	str	r3, [r2, #12]
}
 80099c4:	bf00      	nop
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	58000400 	.word	0x58000400

080099d4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80099dc:	4b06      	ldr	r3, [pc, #24]	; (80099f8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80099de:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80099e2:	4905      	ldr	r1, [pc, #20]	; (80099f8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80099ec:	bf00      	nop
 80099ee:	370c      	adds	r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr
 80099f8:	58000800 	.word	0x58000800

080099fc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009a04:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009a06:	6a1a      	ldr	r2, [r3, #32]
 8009a08:	4904      	ldr	r1, [pc, #16]	; (8009a1c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	620b      	str	r3, [r1, #32]
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	58000800 	.word	0x58000800

08009a20 <LL_AHB3_GRP1_EnableClock>:
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4013      	ands	r3, r2
 8009a42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009a44:	68fb      	ldr	r3, [r7, #12]
}
 8009a46:	bf00      	nop
 8009a48:	3714      	adds	r7, #20
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b085      	sub	sp, #20
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8009a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a5e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a72:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4013      	ands	r3, r2
 8009a7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
}
 8009a7e:	bf00      	nop
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <LL_C1_IPCC_EnableIT_TXF>:
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	601a      	str	r2, [r3, #0]
}
 8009a9e:	bf00      	nop
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <LL_C1_IPCC_EnableIT_RXO>:
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b083      	sub	sp, #12
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f043 0201 	orr.w	r2, r3, #1
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	601a      	str	r2, [r3, #0]
}
 8009abe:	bf00      	nop
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <LL_C1_IPCC_EnableTransmitChannel>:
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	041b      	lsls	r3, r3, #16
 8009adc:	43db      	mvns	r3, r3
 8009ade:	401a      	ands	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	605a      	str	r2, [r3, #4]
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	431a      	orrs	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	605a      	str	r2, [r3, #4]
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	685a      	ldr	r2, [r3, #4]
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	43db      	mvns	r3, r3
 8009b26:	401a      	ands	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	605a      	str	r2, [r3, #4]
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	609a      	str	r2, [r3, #8]
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	041a      	lsls	r2, r3, #16
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	609a      	str	r2, [r3, #8]
}
 8009b66:	bf00      	nop
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009b72:	b480      	push	{r7}
 8009b74:	b083      	sub	sp, #12
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	68da      	ldr	r2, [r3, #12]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	4013      	ands	r3, r2
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d101      	bne.n	8009b8e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e000      	b.n	8009b90 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	69da      	ldr	r2, [r3, #28]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	4013      	ands	r3, r2
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d101      	bne.n	8009bb8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e000      	b.n	8009bba <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	370c      	adds	r7, #12
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
	...

08009bc8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009bcc:	2102      	movs	r1, #2
 8009bce:	4819      	ldr	r0, [pc, #100]	; (8009c34 <HW_IPCC_Rx_Handler+0x6c>)
 8009bd0:	f7ff ffe4 	bl	8009b9c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d009      	beq.n	8009bee <HW_IPCC_Rx_Handler+0x26>
 8009bda:	4b16      	ldr	r3, [pc, #88]	; (8009c34 <HW_IPCC_Rx_Handler+0x6c>)
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	43db      	mvns	r3, r3
 8009be0:	f003 0302 	and.w	r3, r3, #2
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8009be8:	f000 f8da 	bl	8009da0 <HW_IPCC_SYS_EvtHandler>
 8009bec:	e01f      	b.n	8009c2e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009bee:	2101      	movs	r1, #1
 8009bf0:	4810      	ldr	r0, [pc, #64]	; (8009c34 <HW_IPCC_Rx_Handler+0x6c>)
 8009bf2:	f7ff ffd3 	bl	8009b9c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d008      	beq.n	8009c0e <HW_IPCC_Rx_Handler+0x46>
 8009bfc:	4b0d      	ldr	r3, [pc, #52]	; (8009c34 <HW_IPCC_Rx_Handler+0x6c>)
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8009c08:	f000 f88e 	bl	8009d28 <HW_IPCC_BLE_EvtHandler>
 8009c0c:	e00f      	b.n	8009c2e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009c0e:	2108      	movs	r1, #8
 8009c10:	4808      	ldr	r0, [pc, #32]	; (8009c34 <HW_IPCC_Rx_Handler+0x6c>)
 8009c12:	f7ff ffc3 	bl	8009b9c <LL_C2_IPCC_IsActiveFlag_CHx>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d009      	beq.n	8009c30 <HW_IPCC_Rx_Handler+0x68>
 8009c1c:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <HW_IPCC_Rx_Handler+0x6c>)
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	43db      	mvns	r3, r3
 8009c22:	f003 0308 	and.w	r3, r3, #8
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009c2a:	f000 f905 	bl	8009e38 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009c2e:	bf00      	nop
 8009c30:	bf00      	nop
}
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	58000c00 	.word	0x58000c00

08009c38 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009c3c:	2102      	movs	r1, #2
 8009c3e:	481a      	ldr	r0, [pc, #104]	; (8009ca8 <HW_IPCC_Tx_Handler+0x70>)
 8009c40:	f7ff ff97 	bl	8009b72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d109      	bne.n	8009c5e <HW_IPCC_Tx_Handler+0x26>
 8009c4a:	4b17      	ldr	r3, [pc, #92]	; (8009ca8 <HW_IPCC_Tx_Handler+0x70>)
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	43db      	mvns	r3, r3
 8009c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009c58:	f000 f896 	bl	8009d88 <HW_IPCC_SYS_CmdEvtHandler>
 8009c5c:	e020      	b.n	8009ca0 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009c5e:	2108      	movs	r1, #8
 8009c60:	4811      	ldr	r0, [pc, #68]	; (8009ca8 <HW_IPCC_Tx_Handler+0x70>)
 8009c62:	f7ff ff86 	bl	8009b72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d109      	bne.n	8009c80 <HW_IPCC_Tx_Handler+0x48>
 8009c6c:	4b0e      	ldr	r3, [pc, #56]	; (8009ca8 <HW_IPCC_Tx_Handler+0x70>)
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	43db      	mvns	r3, r3
 8009c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009c7a:	f000 f8bf 	bl	8009dfc <HW_IPCC_MM_FreeBufHandler>
 8009c7e:	e00f      	b.n	8009ca0 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009c80:	2120      	movs	r1, #32
 8009c82:	4809      	ldr	r0, [pc, #36]	; (8009ca8 <HW_IPCC_Tx_Handler+0x70>)
 8009c84:	f7ff ff75 	bl	8009b72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d109      	bne.n	8009ca2 <HW_IPCC_Tx_Handler+0x6a>
 8009c8e:	4b06      	ldr	r3, [pc, #24]	; (8009ca8 <HW_IPCC_Tx_Handler+0x70>)
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	43db      	mvns	r3, r3
 8009c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009c9c:	f000 f850 	bl	8009d40 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009ca0:	bf00      	nop
 8009ca2:	bf00      	nop
}
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	58000c00 	.word	0x58000c00

08009cac <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009cb0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009cb4:	f7ff fecd 	bl	8009a52 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009cb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009cbc:	f7ff fe9e 	bl	80099fc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009cc0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009cc4:	f7ff fe86 	bl	80099d4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009cc8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009cca:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009ccc:	f7ff fe72 	bl	80099b4 <LL_PWR_EnableBootC2>

  return;
 8009cd0:	bf00      	nop
}
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009cd8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009cdc:	f7ff fea0 	bl	8009a20 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009ce0:	4806      	ldr	r0, [pc, #24]	; (8009cfc <HW_IPCC_Init+0x28>)
 8009ce2:	f7ff fee2 	bl	8009aaa <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009ce6:	4805      	ldr	r0, [pc, #20]	; (8009cfc <HW_IPCC_Init+0x28>)
 8009ce8:	f7ff fecf 	bl	8009a8a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009cec:	202c      	movs	r0, #44	; 0x2c
 8009cee:	f7f9 fa26 	bl	800313e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009cf2:	202d      	movs	r0, #45	; 0x2d
 8009cf4:	f7f9 fa23 	bl	800313e <HAL_NVIC_EnableIRQ>

  return;
 8009cf8:	bf00      	nop
}
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	58000c00 	.word	0x58000c00

08009d00 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009d04:	2101      	movs	r1, #1
 8009d06:	4802      	ldr	r0, [pc, #8]	; (8009d10 <HW_IPCC_BLE_Init+0x10>)
 8009d08:	f7ff ff04 	bl	8009b14 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009d0c:	bf00      	nop
}
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	58000c00 	.word	0x58000c00

08009d14 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8009d18:	2101      	movs	r1, #1
 8009d1a:	4802      	ldr	r0, [pc, #8]	; (8009d24 <HW_IPCC_BLE_SendCmd+0x10>)
 8009d1c:	f7ff ff1a 	bl	8009b54 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009d20:	bf00      	nop
}
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	58000c00 	.word	0x58000c00

08009d28 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009d2c:	f7fe f998 	bl	8008060 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009d30:	2101      	movs	r1, #1
 8009d32:	4802      	ldr	r0, [pc, #8]	; (8009d3c <HW_IPCC_BLE_EvtHandler+0x14>)
 8009d34:	f7ff ff00 	bl	8009b38 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009d38:	bf00      	nop
}
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	58000c00 	.word	0x58000c00

08009d40 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009d44:	2120      	movs	r1, #32
 8009d46:	4803      	ldr	r0, [pc, #12]	; (8009d54 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009d48:	f7ff fed2 	bl	8009af0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009d4c:	f7fe f9b8 	bl	80080c0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009d50:	bf00      	nop
}
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	58000c00 	.word	0x58000c00

08009d58 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009d5c:	2102      	movs	r1, #2
 8009d5e:	4802      	ldr	r0, [pc, #8]	; (8009d68 <HW_IPCC_SYS_Init+0x10>)
 8009d60:	f7ff fed8 	bl	8009b14 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009d64:	bf00      	nop
}
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	58000c00 	.word	0x58000c00

08009d6c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009d70:	2102      	movs	r1, #2
 8009d72:	4804      	ldr	r0, [pc, #16]	; (8009d84 <HW_IPCC_SYS_SendCmd+0x18>)
 8009d74:	f7ff feee 	bl	8009b54 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009d78:	2102      	movs	r1, #2
 8009d7a:	4802      	ldr	r0, [pc, #8]	; (8009d84 <HW_IPCC_SYS_SendCmd+0x18>)
 8009d7c:	f7ff fea5 	bl	8009aca <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009d80:	bf00      	nop
}
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	58000c00 	.word	0x58000c00

08009d88 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009d8c:	2102      	movs	r1, #2
 8009d8e:	4803      	ldr	r0, [pc, #12]	; (8009d9c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009d90:	f7ff feae 	bl	8009af0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009d94:	f7fe f9e4 	bl	8008160 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009d98:	bf00      	nop
}
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	58000c00 	.word	0x58000c00

08009da0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009da4:	f7fe f9f2 	bl	800818c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009da8:	2102      	movs	r1, #2
 8009daa:	4802      	ldr	r0, [pc, #8]	; (8009db4 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009dac:	f7ff fec4 	bl	8009b38 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009db0:	bf00      	nop
}
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	58000c00 	.word	0x58000c00

08009db8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009dc0:	2108      	movs	r1, #8
 8009dc2:	480c      	ldr	r0, [pc, #48]	; (8009df4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009dc4:	f7ff fed5 	bl	8009b72 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d007      	beq.n	8009dde <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009dce:	4a0a      	ldr	r2, [pc, #40]	; (8009df8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009dd4:	2108      	movs	r1, #8
 8009dd6:	4807      	ldr	r0, [pc, #28]	; (8009df4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009dd8:	f7ff fe77 	bl	8009aca <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009ddc:	e006      	b.n	8009dec <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009de2:	2108      	movs	r1, #8
 8009de4:	4803      	ldr	r0, [pc, #12]	; (8009df4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009de6:	f7ff feb5 	bl	8009b54 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009dea:	bf00      	nop
}
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	58000c00 	.word	0x58000c00
 8009df8:	20000f78 	.word	0x20000f78

08009dfc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009e00:	2108      	movs	r1, #8
 8009e02:	4806      	ldr	r0, [pc, #24]	; (8009e1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009e04:	f7ff fe74 	bl	8009af0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009e08:	4b05      	ldr	r3, [pc, #20]	; (8009e20 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009e0e:	2108      	movs	r1, #8
 8009e10:	4802      	ldr	r0, [pc, #8]	; (8009e1c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009e12:	f7ff fe9f 	bl	8009b54 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009e16:	bf00      	nop
}
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	58000c00 	.word	0x58000c00
 8009e20:	20000f78 	.word	0x20000f78

08009e24 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009e28:	2108      	movs	r1, #8
 8009e2a:	4802      	ldr	r0, [pc, #8]	; (8009e34 <HW_IPCC_TRACES_Init+0x10>)
 8009e2c:	f7ff fe72 	bl	8009b14 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009e30:	bf00      	nop
}
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	58000c00 	.word	0x58000c00

08009e38 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009e3c:	f7fe fa4e 	bl	80082dc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009e40:	2108      	movs	r1, #8
 8009e42:	4802      	ldr	r0, [pc, #8]	; (8009e4c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009e44:	f7ff fe78 	bl	8009b38 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009e48:	bf00      	nop
}
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	58000c00 	.word	0x58000c00

08009e50 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009e50:	b480      	push	{r7}
 8009e52:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009e54:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <UTIL_LPM_Init+0x1c>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009e5a:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <UTIL_LPM_Init+0x20>)
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009e60:	bf00      	nop
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20000f7c 	.word	0x20000f7c
 8009e70:	20000f80 	.word	0x20000f80

08009e74 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e80:	f3ef 8310 	mrs	r3, PRIMASK
 8009e84:	613b      	str	r3, [r7, #16]
  return(result);
 8009e86:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009e88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e8a:	b672      	cpsid	i
}
 8009e8c:	bf00      	nop
  
  switch(state)
 8009e8e:	78fb      	ldrb	r3, [r7, #3]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d008      	beq.n	8009ea6 <UTIL_LPM_SetOffMode+0x32>
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d10e      	bne.n	8009eb6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009e98:	4b0d      	ldr	r3, [pc, #52]	; (8009ed0 <UTIL_LPM_SetOffMode+0x5c>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	4a0b      	ldr	r2, [pc, #44]	; (8009ed0 <UTIL_LPM_SetOffMode+0x5c>)
 8009ea2:	6013      	str	r3, [r2, #0]
      break;
 8009ea4:	e008      	b.n	8009eb8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	43da      	mvns	r2, r3
 8009eaa:	4b09      	ldr	r3, [pc, #36]	; (8009ed0 <UTIL_LPM_SetOffMode+0x5c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4013      	ands	r3, r2
 8009eb0:	4a07      	ldr	r2, [pc, #28]	; (8009ed0 <UTIL_LPM_SetOffMode+0x5c>)
 8009eb2:	6013      	str	r3, [r2, #0]
      break;
 8009eb4:	e000      	b.n	8009eb8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009eb6:	bf00      	nop
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f383 8810 	msr	PRIMASK, r3
}
 8009ec2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009ec4:	bf00      	nop
 8009ec6:	371c      	adds	r7, #28
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr
 8009ed0:	20000f80 	.word	0x20000f80

08009ed4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b090      	sub	sp, #64	; 0x40
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009edc:	4b73      	ldr	r3, [pc, #460]	; (800a0ac <UTIL_SEQ_Run+0x1d8>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8009ee2:	4b72      	ldr	r3, [pc, #456]	; (800a0ac <UTIL_SEQ_Run+0x1d8>)
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4013      	ands	r3, r2
 8009eea:	4a70      	ldr	r2, [pc, #448]	; (800a0ac <UTIL_SEQ_Run+0x1d8>)
 8009eec:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009eee:	4b70      	ldr	r3, [pc, #448]	; (800a0b0 <UTIL_SEQ_Run+0x1dc>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009ef4:	4b6f      	ldr	r3, [pc, #444]	; (800a0b4 <UTIL_SEQ_Run+0x1e0>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009efa:	4b6f      	ldr	r3, [pc, #444]	; (800a0b8 <UTIL_SEQ_Run+0x1e4>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009f00:	4b6e      	ldr	r3, [pc, #440]	; (800a0bc <UTIL_SEQ_Run+0x1e8>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009f06:	e08d      	b.n	800a024 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009f0c:	e002      	b.n	8009f14 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f10:	3301      	adds	r3, #1
 8009f12:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009f14:	4a6a      	ldr	r2, [pc, #424]	; (800a0c0 <UTIL_SEQ_Run+0x1ec>)
 8009f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f18:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	401a      	ands	r2, r3
 8009f20:	4b62      	ldr	r3, [pc, #392]	; (800a0ac <UTIL_SEQ_Run+0x1d8>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4013      	ands	r3, r2
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d0f1      	beq.n	8009f0e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009f2a:	4a65      	ldr	r2, [pc, #404]	; (800a0c0 <UTIL_SEQ_Run+0x1ec>)
 8009f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f2e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	401a      	ands	r2, r3
 8009f36:	4b5d      	ldr	r3, [pc, #372]	; (800a0ac <UTIL_SEQ_Run+0x1d8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009f3e:	4a60      	ldr	r2, [pc, #384]	; (800a0c0 <UTIL_SEQ_Run+0x1ec>)
 8009f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	4413      	add	r3, r2
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	4013      	ands	r3, r2
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d106      	bne.n	8009f5e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009f50:	4a5b      	ldr	r2, [pc, #364]	; (800a0c0 <UTIL_SEQ_Run+0x1ec>)
 8009f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f54:	00db      	lsls	r3, r3, #3
 8009f56:	4413      	add	r3, r2
 8009f58:	f04f 32ff 	mov.w	r2, #4294967295
 8009f5c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009f5e:	4a58      	ldr	r2, [pc, #352]	; (800a0c0 <UTIL_SEQ_Run+0x1ec>)
 8009f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f62:	00db      	lsls	r3, r3, #3
 8009f64:	4413      	add	r3, r2
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 f9b3 	bl	800a2d8 <SEQ_BitPosition>
 8009f72:	4603      	mov	r3, r0
 8009f74:	461a      	mov	r2, r3
 8009f76:	4b53      	ldr	r3, [pc, #332]	; (800a0c4 <UTIL_SEQ_Run+0x1f0>)
 8009f78:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009f7a:	4a51      	ldr	r2, [pc, #324]	; (800a0c0 <UTIL_SEQ_Run+0x1ec>)
 8009f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	4413      	add	r3, r2
 8009f82:	685a      	ldr	r2, [r3, #4]
 8009f84:	4b4f      	ldr	r3, [pc, #316]	; (800a0c4 <UTIL_SEQ_Run+0x1f0>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2101      	movs	r1, #1
 8009f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f8e:	43db      	mvns	r3, r3
 8009f90:	401a      	ands	r2, r3
 8009f92:	494b      	ldr	r1, [pc, #300]	; (800a0c0 <UTIL_SEQ_Run+0x1ec>)
 8009f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f96:	00db      	lsls	r3, r3, #3
 8009f98:	440b      	add	r3, r1
 8009f9a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8009fa0:	61bb      	str	r3, [r7, #24]
  return(result);
 8009fa2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009fa4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fa6:	b672      	cpsid	i
}
 8009fa8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009faa:	4b46      	ldr	r3, [pc, #280]	; (800a0c4 <UTIL_SEQ_Run+0x1f0>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb4:	43da      	mvns	r2, r3
 8009fb6:	4b3e      	ldr	r3, [pc, #248]	; (800a0b0 <UTIL_SEQ_Run+0x1dc>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4013      	ands	r3, r2
 8009fbc:	4a3c      	ldr	r2, [pc, #240]	; (800a0b0 <UTIL_SEQ_Run+0x1dc>)
 8009fbe:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc4:	e013      	b.n	8009fee <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	4a3d      	ldr	r2, [pc, #244]	; (800a0c0 <UTIL_SEQ_Run+0x1ec>)
 8009fcc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009fd0:	4b3c      	ldr	r3, [pc, #240]	; (800a0c4 <UTIL_SEQ_Run+0x1f0>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fda:	43da      	mvns	r2, r3
 8009fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	400a      	ands	r2, r1
 8009fe2:	4937      	ldr	r1, [pc, #220]	; (800a0c0 <UTIL_SEQ_Run+0x1ec>)
 8009fe4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fea:	3b01      	subs	r3, #1
 8009fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e8      	bne.n	8009fc6 <UTIL_SEQ_Run+0xf2>
 8009ff4:	6a3b      	ldr	r3, [r7, #32]
 8009ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	f383 8810 	msr	PRIMASK, r3
}
 8009ffe:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a000:	4b30      	ldr	r3, [pc, #192]	; (800a0c4 <UTIL_SEQ_Run+0x1f0>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a30      	ldr	r2, [pc, #192]	; (800a0c8 <UTIL_SEQ_Run+0x1f4>)
 800a006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a00a:	4798      	blx	r3

    local_taskset = TaskSet;
 800a00c:	4b28      	ldr	r3, [pc, #160]	; (800a0b0 <UTIL_SEQ_Run+0x1dc>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a012:	4b28      	ldr	r3, [pc, #160]	; (800a0b4 <UTIL_SEQ_Run+0x1e0>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a018:	4b27      	ldr	r3, [pc, #156]	; (800a0b8 <UTIL_SEQ_Run+0x1e4>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a01e:	4b27      	ldr	r3, [pc, #156]	; (800a0bc <UTIL_SEQ_Run+0x1e8>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	401a      	ands	r2, r3
 800a02a:	4b20      	ldr	r3, [pc, #128]	; (800a0ac <UTIL_SEQ_Run+0x1d8>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4013      	ands	r3, r2
 800a030:	2b00      	cmp	r3, #0
 800a032:	d005      	beq.n	800a040 <UTIL_SEQ_Run+0x16c>
 800a034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a038:	4013      	ands	r3, r2
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f43f af64 	beq.w	8009f08 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a040:	4b20      	ldr	r3, [pc, #128]	; (800a0c4 <UTIL_SEQ_Run+0x1f0>)
 800a042:	f04f 32ff 	mov.w	r2, #4294967295
 800a046:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a048:	f000 f938 	bl	800a2bc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a04c:	f3ef 8310 	mrs	r3, PRIMASK
 800a050:	613b      	str	r3, [r7, #16]
  return(result);
 800a052:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a056:	b672      	cpsid	i
}
 800a058:	bf00      	nop
  local_taskset = TaskSet;
 800a05a:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <UTIL_SEQ_Run+0x1dc>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a060:	4b14      	ldr	r3, [pc, #80]	; (800a0b4 <UTIL_SEQ_Run+0x1e0>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a066:	4b14      	ldr	r3, [pc, #80]	; (800a0b8 <UTIL_SEQ_Run+0x1e4>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a06c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	401a      	ands	r2, r3
 800a072:	4b0e      	ldr	r3, [pc, #56]	; (800a0ac <UTIL_SEQ_Run+0x1d8>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4013      	ands	r3, r2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d107      	bne.n	800a08c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a07c:	4b0f      	ldr	r3, [pc, #60]	; (800a0bc <UTIL_SEQ_Run+0x1e8>)
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a082:	4013      	ands	r3, r2
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a088:	f7f7 fb5e 	bl	8001748 <UTIL_SEQ_Idle>
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f383 8810 	msr	PRIMASK, r3
}
 800a096:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a098:	f000 f917 	bl	800a2ca <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a09c:	4a03      	ldr	r2, [pc, #12]	; (800a0ac <UTIL_SEQ_Run+0x1d8>)
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	6013      	str	r3, [r2, #0]

  return;
 800a0a2:	bf00      	nop
}
 800a0a4:	3740      	adds	r7, #64	; 0x40
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20000030 	.word	0x20000030
 800a0b0:	20000f84 	.word	0x20000f84
 800a0b4:	20000f88 	.word	0x20000f88
 800a0b8:	2000002c 	.word	0x2000002c
 800a0bc:	20000f8c 	.word	0x20000f8c
 800a0c0:	20001014 	.word	0x20001014
 800a0c4:	20000f90 	.word	0x20000f90
 800a0c8:	20000f94 	.word	0x20000f94

0800a0cc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b088      	sub	sp, #32
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0d8:	f3ef 8310 	mrs	r3, PRIMASK
 800a0dc:	617b      	str	r3, [r7, #20]
  return(result);
 800a0de:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a0e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0e2:	b672      	cpsid	i
}
 800a0e4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 f8f6 	bl	800a2d8 <SEQ_BitPosition>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	4a06      	ldr	r2, [pc, #24]	; (800a10c <UTIL_SEQ_RegTask+0x40>)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	f383 8810 	msr	PRIMASK, r3
}
 800a102:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a104:	bf00      	nop
}
 800a106:	3720      	adds	r7, #32
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20000f94 	.word	0x20000f94

0800a110 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a11a:	f3ef 8310 	mrs	r3, PRIMASK
 800a11e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a120:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a122:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a124:	b672      	cpsid	i
}
 800a126:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a128:	4b0d      	ldr	r3, [pc, #52]	; (800a160 <UTIL_SEQ_SetTask+0x50>)
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4313      	orrs	r3, r2
 800a130:	4a0b      	ldr	r2, [pc, #44]	; (800a160 <UTIL_SEQ_SetTask+0x50>)
 800a132:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a134:	4a0b      	ldr	r2, [pc, #44]	; (800a164 <UTIL_SEQ_SetTask+0x54>)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	431a      	orrs	r2, r3
 800a140:	4908      	ldr	r1, [pc, #32]	; (800a164 <UTIL_SEQ_SetTask+0x54>)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f383 8810 	msr	PRIMASK, r3
}
 800a152:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a154:	bf00      	nop
}
 800a156:	371c      	adds	r7, #28
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	20000f84 	.word	0x20000f84
 800a164:	20001014 	.word	0x20001014

0800a168 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a170:	f3ef 8310 	mrs	r3, PRIMASK
 800a174:	60fb      	str	r3, [r7, #12]
  return(result);
 800a176:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a17a:	b672      	cpsid	i
}
 800a17c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	43da      	mvns	r2, r3
 800a182:	4b08      	ldr	r3, [pc, #32]	; (800a1a4 <UTIL_SEQ_PauseTask+0x3c>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4013      	ands	r3, r2
 800a188:	4a06      	ldr	r2, [pc, #24]	; (800a1a4 <UTIL_SEQ_PauseTask+0x3c>)
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	f383 8810 	msr	PRIMASK, r3
}
 800a196:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a198:	bf00      	nop
}
 800a19a:	371c      	adds	r7, #28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	2000002c 	.word	0x2000002c

0800a1a8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1b0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a1b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1ba:	b672      	cpsid	i
}
 800a1bc:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a1be:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <UTIL_SEQ_ResumeTask+0x3c>)
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	4a07      	ldr	r2, [pc, #28]	; (800a1e4 <UTIL_SEQ_ResumeTask+0x3c>)
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f383 8810 	msr	PRIMASK, r3
}
 800a1d4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a1d6:	bf00      	nop
}
 800a1d8:	371c      	adds	r7, #28
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	2000002c 	.word	0x2000002c

0800a1e8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a1f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1fa:	b672      	cpsid	i
}
 800a1fc:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a1fe:	4b09      	ldr	r3, [pc, #36]	; (800a224 <UTIL_SEQ_SetEvt+0x3c>)
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4313      	orrs	r3, r2
 800a206:	4a07      	ldr	r2, [pc, #28]	; (800a224 <UTIL_SEQ_SetEvt+0x3c>)
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f383 8810 	msr	PRIMASK, r3
}
 800a214:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a216:	bf00      	nop
}
 800a218:	371c      	adds	r7, #28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	20000f88 	.word	0x20000f88

0800a228 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b088      	sub	sp, #32
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a230:	4b1f      	ldr	r3, [pc, #124]	; (800a2b0 <UTIL_SEQ_WaitEvt+0x88>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a236:	4b1e      	ldr	r3, [pc, #120]	; (800a2b0 <UTIL_SEQ_WaitEvt+0x88>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23e:	d102      	bne.n	800a246 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a240:	2300      	movs	r3, #0
 800a242:	61fb      	str	r3, [r7, #28]
 800a244:	e005      	b.n	800a252 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a246:	4b1a      	ldr	r3, [pc, #104]	; (800a2b0 <UTIL_SEQ_WaitEvt+0x88>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2201      	movs	r2, #1
 800a24c:	fa02 f303 	lsl.w	r3, r2, r3
 800a250:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a252:	4b18      	ldr	r3, [pc, #96]	; (800a2b4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a258:	4a16      	ldr	r2, [pc, #88]	; (800a2b4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a25e:	e003      	b.n	800a268 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a260:	6879      	ldr	r1, [r7, #4]
 800a262:	69f8      	ldr	r0, [r7, #28]
 800a264:	f7f7 fa77 	bl	8001756 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a268:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <UTIL_SEQ_WaitEvt+0x90>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4013      	ands	r3, r2
 800a270:	2b00      	cmp	r3, #0
 800a272:	d0f5      	beq.n	800a260 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a274:	4a0e      	ldr	r2, [pc, #56]	; (800a2b0 <UTIL_SEQ_WaitEvt+0x88>)
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a27a:	f3ef 8310 	mrs	r3, PRIMASK
 800a27e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a280:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a284:	b672      	cpsid	i
}
 800a286:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	43da      	mvns	r2, r3
 800a28c:	4b0a      	ldr	r3, [pc, #40]	; (800a2b8 <UTIL_SEQ_WaitEvt+0x90>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4013      	ands	r3, r2
 800a292:	4a09      	ldr	r2, [pc, #36]	; (800a2b8 <UTIL_SEQ_WaitEvt+0x90>)
 800a294:	6013      	str	r3, [r2, #0]
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f383 8810 	msr	PRIMASK, r3
}
 800a2a0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a2a2:	4a04      	ldr	r2, [pc, #16]	; (800a2b4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	6013      	str	r3, [r2, #0]
  return;
 800a2a8:	bf00      	nop
}
 800a2aa:	3720      	adds	r7, #32
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	20000f90 	.word	0x20000f90
 800a2b4:	20000f8c 	.word	0x20000f8c
 800a2b8:	20000f88 	.word	0x20000f88

0800a2bc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a2c0:	bf00      	nop
}
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr

0800a2ca <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a2ce:	bf00      	nop
}
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	0c1b      	lsrs	r3, r3, #16
 800a2ec:	041b      	lsls	r3, r3, #16
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d104      	bne.n	800a2fc <SEQ_BitPosition+0x24>
 800a2f2:	2310      	movs	r3, #16
 800a2f4:	73fb      	strb	r3, [r7, #15]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	041b      	lsls	r3, r3, #16
 800a2fa:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a302:	2b00      	cmp	r3, #0
 800a304:	d105      	bne.n	800a312 <SEQ_BitPosition+0x3a>
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	3308      	adds	r3, #8
 800a30a:	73fb      	strb	r3, [r7, #15]
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	021b      	lsls	r3, r3, #8
 800a310:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d105      	bne.n	800a328 <SEQ_BitPosition+0x50>
 800a31c:	7bfb      	ldrb	r3, [r7, #15]
 800a31e:	3304      	adds	r3, #4
 800a320:	73fb      	strb	r3, [r7, #15]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	011b      	lsls	r3, r3, #4
 800a326:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	0f1b      	lsrs	r3, r3, #28
 800a32c:	4a07      	ldr	r2, [pc, #28]	; (800a34c <SEQ_BitPosition+0x74>)
 800a32e:	5cd2      	ldrb	r2, [r2, r3]
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	4413      	add	r3, r2
 800a334:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a336:	7bfb      	ldrb	r3, [r7, #15]
 800a338:	f1c3 031f 	rsb	r3, r3, #31
 800a33c:	b2db      	uxtb	r3, r3
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	0800d84c 	.word	0x0800d84c

0800a350 <__errno>:
 800a350:	4b01      	ldr	r3, [pc, #4]	; (800a358 <__errno+0x8>)
 800a352:	6818      	ldr	r0, [r3, #0]
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	20000034 	.word	0x20000034

0800a35c <__libc_init_array>:
 800a35c:	b570      	push	{r4, r5, r6, lr}
 800a35e:	4d0d      	ldr	r5, [pc, #52]	; (800a394 <__libc_init_array+0x38>)
 800a360:	4c0d      	ldr	r4, [pc, #52]	; (800a398 <__libc_init_array+0x3c>)
 800a362:	1b64      	subs	r4, r4, r5
 800a364:	10a4      	asrs	r4, r4, #2
 800a366:	2600      	movs	r6, #0
 800a368:	42a6      	cmp	r6, r4
 800a36a:	d109      	bne.n	800a380 <__libc_init_array+0x24>
 800a36c:	4d0b      	ldr	r5, [pc, #44]	; (800a39c <__libc_init_array+0x40>)
 800a36e:	4c0c      	ldr	r4, [pc, #48]	; (800a3a0 <__libc_init_array+0x44>)
 800a370:	f001 ffcc 	bl	800c30c <_init>
 800a374:	1b64      	subs	r4, r4, r5
 800a376:	10a4      	asrs	r4, r4, #2
 800a378:	2600      	movs	r6, #0
 800a37a:	42a6      	cmp	r6, r4
 800a37c:	d105      	bne.n	800a38a <__libc_init_array+0x2e>
 800a37e:	bd70      	pop	{r4, r5, r6, pc}
 800a380:	f855 3b04 	ldr.w	r3, [r5], #4
 800a384:	4798      	blx	r3
 800a386:	3601      	adds	r6, #1
 800a388:	e7ee      	b.n	800a368 <__libc_init_array+0xc>
 800a38a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a38e:	4798      	blx	r3
 800a390:	3601      	adds	r6, #1
 800a392:	e7f2      	b.n	800a37a <__libc_init_array+0x1e>
 800a394:	0800d930 	.word	0x0800d930
 800a398:	0800d930 	.word	0x0800d930
 800a39c:	0800d930 	.word	0x0800d930
 800a3a0:	0800d934 	.word	0x0800d934

0800a3a4 <memcpy>:
 800a3a4:	440a      	add	r2, r1
 800a3a6:	4291      	cmp	r1, r2
 800a3a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3ac:	d100      	bne.n	800a3b0 <memcpy+0xc>
 800a3ae:	4770      	bx	lr
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3ba:	4291      	cmp	r1, r2
 800a3bc:	d1f9      	bne.n	800a3b2 <memcpy+0xe>
 800a3be:	bd10      	pop	{r4, pc}

0800a3c0 <memset>:
 800a3c0:	4402      	add	r2, r0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d100      	bne.n	800a3ca <memset+0xa>
 800a3c8:	4770      	bx	lr
 800a3ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a3ce:	e7f9      	b.n	800a3c4 <memset+0x4>

0800a3d0 <iprintf>:
 800a3d0:	b40f      	push	{r0, r1, r2, r3}
 800a3d2:	4b0a      	ldr	r3, [pc, #40]	; (800a3fc <iprintf+0x2c>)
 800a3d4:	b513      	push	{r0, r1, r4, lr}
 800a3d6:	681c      	ldr	r4, [r3, #0]
 800a3d8:	b124      	cbz	r4, 800a3e4 <iprintf+0x14>
 800a3da:	69a3      	ldr	r3, [r4, #24]
 800a3dc:	b913      	cbnz	r3, 800a3e4 <iprintf+0x14>
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f000 fa88 	bl	800a8f4 <__sinit>
 800a3e4:	ab05      	add	r3, sp, #20
 800a3e6:	9a04      	ldr	r2, [sp, #16]
 800a3e8:	68a1      	ldr	r1, [r4, #8]
 800a3ea:	9301      	str	r3, [sp, #4]
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 fc91 	bl	800ad14 <_vfiprintf_r>
 800a3f2:	b002      	add	sp, #8
 800a3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f8:	b004      	add	sp, #16
 800a3fa:	4770      	bx	lr
 800a3fc:	20000034 	.word	0x20000034

0800a400 <putchar>:
 800a400:	4b09      	ldr	r3, [pc, #36]	; (800a428 <putchar+0x28>)
 800a402:	b513      	push	{r0, r1, r4, lr}
 800a404:	681c      	ldr	r4, [r3, #0]
 800a406:	4601      	mov	r1, r0
 800a408:	b134      	cbz	r4, 800a418 <putchar+0x18>
 800a40a:	69a3      	ldr	r3, [r4, #24]
 800a40c:	b923      	cbnz	r3, 800a418 <putchar+0x18>
 800a40e:	9001      	str	r0, [sp, #4]
 800a410:	4620      	mov	r0, r4
 800a412:	f000 fa6f 	bl	800a8f4 <__sinit>
 800a416:	9901      	ldr	r1, [sp, #4]
 800a418:	68a2      	ldr	r2, [r4, #8]
 800a41a:	4620      	mov	r0, r4
 800a41c:	b002      	add	sp, #8
 800a41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a422:	f000 bf3b 	b.w	800b29c <_putc_r>
 800a426:	bf00      	nop
 800a428:	20000034 	.word	0x20000034

0800a42c <_puts_r>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	460e      	mov	r6, r1
 800a430:	4605      	mov	r5, r0
 800a432:	b118      	cbz	r0, 800a43c <_puts_r+0x10>
 800a434:	6983      	ldr	r3, [r0, #24]
 800a436:	b90b      	cbnz	r3, 800a43c <_puts_r+0x10>
 800a438:	f000 fa5c 	bl	800a8f4 <__sinit>
 800a43c:	69ab      	ldr	r3, [r5, #24]
 800a43e:	68ac      	ldr	r4, [r5, #8]
 800a440:	b913      	cbnz	r3, 800a448 <_puts_r+0x1c>
 800a442:	4628      	mov	r0, r5
 800a444:	f000 fa56 	bl	800a8f4 <__sinit>
 800a448:	4b2c      	ldr	r3, [pc, #176]	; (800a4fc <_puts_r+0xd0>)
 800a44a:	429c      	cmp	r4, r3
 800a44c:	d120      	bne.n	800a490 <_puts_r+0x64>
 800a44e:	686c      	ldr	r4, [r5, #4]
 800a450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a452:	07db      	lsls	r3, r3, #31
 800a454:	d405      	bmi.n	800a462 <_puts_r+0x36>
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	0598      	lsls	r0, r3, #22
 800a45a:	d402      	bmi.n	800a462 <_puts_r+0x36>
 800a45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45e:	f000 fae7 	bl	800aa30 <__retarget_lock_acquire_recursive>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	0719      	lsls	r1, r3, #28
 800a466:	d51d      	bpl.n	800a4a4 <_puts_r+0x78>
 800a468:	6923      	ldr	r3, [r4, #16]
 800a46a:	b1db      	cbz	r3, 800a4a4 <_puts_r+0x78>
 800a46c:	3e01      	subs	r6, #1
 800a46e:	68a3      	ldr	r3, [r4, #8]
 800a470:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a474:	3b01      	subs	r3, #1
 800a476:	60a3      	str	r3, [r4, #8]
 800a478:	bb39      	cbnz	r1, 800a4ca <_puts_r+0x9e>
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	da38      	bge.n	800a4f0 <_puts_r+0xc4>
 800a47e:	4622      	mov	r2, r4
 800a480:	210a      	movs	r1, #10
 800a482:	4628      	mov	r0, r5
 800a484:	f000 f85c 	bl	800a540 <__swbuf_r>
 800a488:	3001      	adds	r0, #1
 800a48a:	d011      	beq.n	800a4b0 <_puts_r+0x84>
 800a48c:	250a      	movs	r5, #10
 800a48e:	e011      	b.n	800a4b4 <_puts_r+0x88>
 800a490:	4b1b      	ldr	r3, [pc, #108]	; (800a500 <_puts_r+0xd4>)
 800a492:	429c      	cmp	r4, r3
 800a494:	d101      	bne.n	800a49a <_puts_r+0x6e>
 800a496:	68ac      	ldr	r4, [r5, #8]
 800a498:	e7da      	b.n	800a450 <_puts_r+0x24>
 800a49a:	4b1a      	ldr	r3, [pc, #104]	; (800a504 <_puts_r+0xd8>)
 800a49c:	429c      	cmp	r4, r3
 800a49e:	bf08      	it	eq
 800a4a0:	68ec      	ldreq	r4, [r5, #12]
 800a4a2:	e7d5      	b.n	800a450 <_puts_r+0x24>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f000 f89c 	bl	800a5e4 <__swsetup_r>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d0dd      	beq.n	800a46c <_puts_r+0x40>
 800a4b0:	f04f 35ff 	mov.w	r5, #4294967295
 800a4b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4b6:	07da      	lsls	r2, r3, #31
 800a4b8:	d405      	bmi.n	800a4c6 <_puts_r+0x9a>
 800a4ba:	89a3      	ldrh	r3, [r4, #12]
 800a4bc:	059b      	lsls	r3, r3, #22
 800a4be:	d402      	bmi.n	800a4c6 <_puts_r+0x9a>
 800a4c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4c2:	f000 fab6 	bl	800aa32 <__retarget_lock_release_recursive>
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	bd70      	pop	{r4, r5, r6, pc}
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	da04      	bge.n	800a4d8 <_puts_r+0xac>
 800a4ce:	69a2      	ldr	r2, [r4, #24]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	dc06      	bgt.n	800a4e2 <_puts_r+0xb6>
 800a4d4:	290a      	cmp	r1, #10
 800a4d6:	d004      	beq.n	800a4e2 <_puts_r+0xb6>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	6022      	str	r2, [r4, #0]
 800a4de:	7019      	strb	r1, [r3, #0]
 800a4e0:	e7c5      	b.n	800a46e <_puts_r+0x42>
 800a4e2:	4622      	mov	r2, r4
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f000 f82b 	bl	800a540 <__swbuf_r>
 800a4ea:	3001      	adds	r0, #1
 800a4ec:	d1bf      	bne.n	800a46e <_puts_r+0x42>
 800a4ee:	e7df      	b.n	800a4b0 <_puts_r+0x84>
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	250a      	movs	r5, #10
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	6022      	str	r2, [r4, #0]
 800a4f8:	701d      	strb	r5, [r3, #0]
 800a4fa:	e7db      	b.n	800a4b4 <_puts_r+0x88>
 800a4fc:	0800d880 	.word	0x0800d880
 800a500:	0800d8a0 	.word	0x0800d8a0
 800a504:	0800d860 	.word	0x0800d860

0800a508 <puts>:
 800a508:	4b02      	ldr	r3, [pc, #8]	; (800a514 <puts+0xc>)
 800a50a:	4601      	mov	r1, r0
 800a50c:	6818      	ldr	r0, [r3, #0]
 800a50e:	f7ff bf8d 	b.w	800a42c <_puts_r>
 800a512:	bf00      	nop
 800a514:	20000034 	.word	0x20000034

0800a518 <strrchr>:
 800a518:	b538      	push	{r3, r4, r5, lr}
 800a51a:	4603      	mov	r3, r0
 800a51c:	460c      	mov	r4, r1
 800a51e:	b969      	cbnz	r1, 800a53c <strrchr+0x24>
 800a520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a524:	f000 bf55 	b.w	800b3d2 <strchr>
 800a528:	1c43      	adds	r3, r0, #1
 800a52a:	4605      	mov	r5, r0
 800a52c:	4621      	mov	r1, r4
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 ff4f 	bl	800b3d2 <strchr>
 800a534:	2800      	cmp	r0, #0
 800a536:	d1f7      	bne.n	800a528 <strrchr+0x10>
 800a538:	4628      	mov	r0, r5
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	2500      	movs	r5, #0
 800a53e:	e7f5      	b.n	800a52c <strrchr+0x14>

0800a540 <__swbuf_r>:
 800a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a542:	460e      	mov	r6, r1
 800a544:	4614      	mov	r4, r2
 800a546:	4605      	mov	r5, r0
 800a548:	b118      	cbz	r0, 800a552 <__swbuf_r+0x12>
 800a54a:	6983      	ldr	r3, [r0, #24]
 800a54c:	b90b      	cbnz	r3, 800a552 <__swbuf_r+0x12>
 800a54e:	f000 f9d1 	bl	800a8f4 <__sinit>
 800a552:	4b21      	ldr	r3, [pc, #132]	; (800a5d8 <__swbuf_r+0x98>)
 800a554:	429c      	cmp	r4, r3
 800a556:	d12b      	bne.n	800a5b0 <__swbuf_r+0x70>
 800a558:	686c      	ldr	r4, [r5, #4]
 800a55a:	69a3      	ldr	r3, [r4, #24]
 800a55c:	60a3      	str	r3, [r4, #8]
 800a55e:	89a3      	ldrh	r3, [r4, #12]
 800a560:	071a      	lsls	r2, r3, #28
 800a562:	d52f      	bpl.n	800a5c4 <__swbuf_r+0x84>
 800a564:	6923      	ldr	r3, [r4, #16]
 800a566:	b36b      	cbz	r3, 800a5c4 <__swbuf_r+0x84>
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	6820      	ldr	r0, [r4, #0]
 800a56c:	1ac0      	subs	r0, r0, r3
 800a56e:	6963      	ldr	r3, [r4, #20]
 800a570:	b2f6      	uxtb	r6, r6
 800a572:	4283      	cmp	r3, r0
 800a574:	4637      	mov	r7, r6
 800a576:	dc04      	bgt.n	800a582 <__swbuf_r+0x42>
 800a578:	4621      	mov	r1, r4
 800a57a:	4628      	mov	r0, r5
 800a57c:	f000 f926 	bl	800a7cc <_fflush_r>
 800a580:	bb30      	cbnz	r0, 800a5d0 <__swbuf_r+0x90>
 800a582:	68a3      	ldr	r3, [r4, #8]
 800a584:	3b01      	subs	r3, #1
 800a586:	60a3      	str	r3, [r4, #8]
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	1c5a      	adds	r2, r3, #1
 800a58c:	6022      	str	r2, [r4, #0]
 800a58e:	701e      	strb	r6, [r3, #0]
 800a590:	6963      	ldr	r3, [r4, #20]
 800a592:	3001      	adds	r0, #1
 800a594:	4283      	cmp	r3, r0
 800a596:	d004      	beq.n	800a5a2 <__swbuf_r+0x62>
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	07db      	lsls	r3, r3, #31
 800a59c:	d506      	bpl.n	800a5ac <__swbuf_r+0x6c>
 800a59e:	2e0a      	cmp	r6, #10
 800a5a0:	d104      	bne.n	800a5ac <__swbuf_r+0x6c>
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	f000 f911 	bl	800a7cc <_fflush_r>
 800a5aa:	b988      	cbnz	r0, 800a5d0 <__swbuf_r+0x90>
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5b0:	4b0a      	ldr	r3, [pc, #40]	; (800a5dc <__swbuf_r+0x9c>)
 800a5b2:	429c      	cmp	r4, r3
 800a5b4:	d101      	bne.n	800a5ba <__swbuf_r+0x7a>
 800a5b6:	68ac      	ldr	r4, [r5, #8]
 800a5b8:	e7cf      	b.n	800a55a <__swbuf_r+0x1a>
 800a5ba:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <__swbuf_r+0xa0>)
 800a5bc:	429c      	cmp	r4, r3
 800a5be:	bf08      	it	eq
 800a5c0:	68ec      	ldreq	r4, [r5, #12]
 800a5c2:	e7ca      	b.n	800a55a <__swbuf_r+0x1a>
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f000 f80c 	bl	800a5e4 <__swsetup_r>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d0cb      	beq.n	800a568 <__swbuf_r+0x28>
 800a5d0:	f04f 37ff 	mov.w	r7, #4294967295
 800a5d4:	e7ea      	b.n	800a5ac <__swbuf_r+0x6c>
 800a5d6:	bf00      	nop
 800a5d8:	0800d880 	.word	0x0800d880
 800a5dc:	0800d8a0 	.word	0x0800d8a0
 800a5e0:	0800d860 	.word	0x0800d860

0800a5e4 <__swsetup_r>:
 800a5e4:	4b32      	ldr	r3, [pc, #200]	; (800a6b0 <__swsetup_r+0xcc>)
 800a5e6:	b570      	push	{r4, r5, r6, lr}
 800a5e8:	681d      	ldr	r5, [r3, #0]
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	b125      	cbz	r5, 800a5fa <__swsetup_r+0x16>
 800a5f0:	69ab      	ldr	r3, [r5, #24]
 800a5f2:	b913      	cbnz	r3, 800a5fa <__swsetup_r+0x16>
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	f000 f97d 	bl	800a8f4 <__sinit>
 800a5fa:	4b2e      	ldr	r3, [pc, #184]	; (800a6b4 <__swsetup_r+0xd0>)
 800a5fc:	429c      	cmp	r4, r3
 800a5fe:	d10f      	bne.n	800a620 <__swsetup_r+0x3c>
 800a600:	686c      	ldr	r4, [r5, #4]
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a608:	0719      	lsls	r1, r3, #28
 800a60a:	d42c      	bmi.n	800a666 <__swsetup_r+0x82>
 800a60c:	06dd      	lsls	r5, r3, #27
 800a60e:	d411      	bmi.n	800a634 <__swsetup_r+0x50>
 800a610:	2309      	movs	r3, #9
 800a612:	6033      	str	r3, [r6, #0]
 800a614:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a618:	81a3      	strh	r3, [r4, #12]
 800a61a:	f04f 30ff 	mov.w	r0, #4294967295
 800a61e:	e03e      	b.n	800a69e <__swsetup_r+0xba>
 800a620:	4b25      	ldr	r3, [pc, #148]	; (800a6b8 <__swsetup_r+0xd4>)
 800a622:	429c      	cmp	r4, r3
 800a624:	d101      	bne.n	800a62a <__swsetup_r+0x46>
 800a626:	68ac      	ldr	r4, [r5, #8]
 800a628:	e7eb      	b.n	800a602 <__swsetup_r+0x1e>
 800a62a:	4b24      	ldr	r3, [pc, #144]	; (800a6bc <__swsetup_r+0xd8>)
 800a62c:	429c      	cmp	r4, r3
 800a62e:	bf08      	it	eq
 800a630:	68ec      	ldreq	r4, [r5, #12]
 800a632:	e7e6      	b.n	800a602 <__swsetup_r+0x1e>
 800a634:	0758      	lsls	r0, r3, #29
 800a636:	d512      	bpl.n	800a65e <__swsetup_r+0x7a>
 800a638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a63a:	b141      	cbz	r1, 800a64e <__swsetup_r+0x6a>
 800a63c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a640:	4299      	cmp	r1, r3
 800a642:	d002      	beq.n	800a64a <__swsetup_r+0x66>
 800a644:	4630      	mov	r0, r6
 800a646:	f000 fa5b 	bl	800ab00 <_free_r>
 800a64a:	2300      	movs	r3, #0
 800a64c:	6363      	str	r3, [r4, #52]	; 0x34
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a654:	81a3      	strh	r3, [r4, #12]
 800a656:	2300      	movs	r3, #0
 800a658:	6063      	str	r3, [r4, #4]
 800a65a:	6923      	ldr	r3, [r4, #16]
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	89a3      	ldrh	r3, [r4, #12]
 800a660:	f043 0308 	orr.w	r3, r3, #8
 800a664:	81a3      	strh	r3, [r4, #12]
 800a666:	6923      	ldr	r3, [r4, #16]
 800a668:	b94b      	cbnz	r3, 800a67e <__swsetup_r+0x9a>
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a674:	d003      	beq.n	800a67e <__swsetup_r+0x9a>
 800a676:	4621      	mov	r1, r4
 800a678:	4630      	mov	r0, r6
 800a67a:	f000 fa01 	bl	800aa80 <__smakebuf_r>
 800a67e:	89a0      	ldrh	r0, [r4, #12]
 800a680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a684:	f010 0301 	ands.w	r3, r0, #1
 800a688:	d00a      	beq.n	800a6a0 <__swsetup_r+0xbc>
 800a68a:	2300      	movs	r3, #0
 800a68c:	60a3      	str	r3, [r4, #8]
 800a68e:	6963      	ldr	r3, [r4, #20]
 800a690:	425b      	negs	r3, r3
 800a692:	61a3      	str	r3, [r4, #24]
 800a694:	6923      	ldr	r3, [r4, #16]
 800a696:	b943      	cbnz	r3, 800a6aa <__swsetup_r+0xc6>
 800a698:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a69c:	d1ba      	bne.n	800a614 <__swsetup_r+0x30>
 800a69e:	bd70      	pop	{r4, r5, r6, pc}
 800a6a0:	0781      	lsls	r1, r0, #30
 800a6a2:	bf58      	it	pl
 800a6a4:	6963      	ldrpl	r3, [r4, #20]
 800a6a6:	60a3      	str	r3, [r4, #8]
 800a6a8:	e7f4      	b.n	800a694 <__swsetup_r+0xb0>
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	e7f7      	b.n	800a69e <__swsetup_r+0xba>
 800a6ae:	bf00      	nop
 800a6b0:	20000034 	.word	0x20000034
 800a6b4:	0800d880 	.word	0x0800d880
 800a6b8:	0800d8a0 	.word	0x0800d8a0
 800a6bc:	0800d860 	.word	0x0800d860

0800a6c0 <__sflush_r>:
 800a6c0:	898a      	ldrh	r2, [r1, #12]
 800a6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	0710      	lsls	r0, r2, #28
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	d458      	bmi.n	800a780 <__sflush_r+0xc0>
 800a6ce:	684b      	ldr	r3, [r1, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	dc05      	bgt.n	800a6e0 <__sflush_r+0x20>
 800a6d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	dc02      	bgt.n	800a6e0 <__sflush_r+0x20>
 800a6da:	2000      	movs	r0, #0
 800a6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6e2:	2e00      	cmp	r6, #0
 800a6e4:	d0f9      	beq.n	800a6da <__sflush_r+0x1a>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6ec:	682f      	ldr	r7, [r5, #0]
 800a6ee:	602b      	str	r3, [r5, #0]
 800a6f0:	d032      	beq.n	800a758 <__sflush_r+0x98>
 800a6f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	075a      	lsls	r2, r3, #29
 800a6f8:	d505      	bpl.n	800a706 <__sflush_r+0x46>
 800a6fa:	6863      	ldr	r3, [r4, #4]
 800a6fc:	1ac0      	subs	r0, r0, r3
 800a6fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a700:	b10b      	cbz	r3, 800a706 <__sflush_r+0x46>
 800a702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a704:	1ac0      	subs	r0, r0, r3
 800a706:	2300      	movs	r3, #0
 800a708:	4602      	mov	r2, r0
 800a70a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a70c:	6a21      	ldr	r1, [r4, #32]
 800a70e:	4628      	mov	r0, r5
 800a710:	47b0      	blx	r6
 800a712:	1c43      	adds	r3, r0, #1
 800a714:	89a3      	ldrh	r3, [r4, #12]
 800a716:	d106      	bne.n	800a726 <__sflush_r+0x66>
 800a718:	6829      	ldr	r1, [r5, #0]
 800a71a:	291d      	cmp	r1, #29
 800a71c:	d82c      	bhi.n	800a778 <__sflush_r+0xb8>
 800a71e:	4a2a      	ldr	r2, [pc, #168]	; (800a7c8 <__sflush_r+0x108>)
 800a720:	40ca      	lsrs	r2, r1
 800a722:	07d6      	lsls	r6, r2, #31
 800a724:	d528      	bpl.n	800a778 <__sflush_r+0xb8>
 800a726:	2200      	movs	r2, #0
 800a728:	6062      	str	r2, [r4, #4]
 800a72a:	04d9      	lsls	r1, r3, #19
 800a72c:	6922      	ldr	r2, [r4, #16]
 800a72e:	6022      	str	r2, [r4, #0]
 800a730:	d504      	bpl.n	800a73c <__sflush_r+0x7c>
 800a732:	1c42      	adds	r2, r0, #1
 800a734:	d101      	bne.n	800a73a <__sflush_r+0x7a>
 800a736:	682b      	ldr	r3, [r5, #0]
 800a738:	b903      	cbnz	r3, 800a73c <__sflush_r+0x7c>
 800a73a:	6560      	str	r0, [r4, #84]	; 0x54
 800a73c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a73e:	602f      	str	r7, [r5, #0]
 800a740:	2900      	cmp	r1, #0
 800a742:	d0ca      	beq.n	800a6da <__sflush_r+0x1a>
 800a744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a748:	4299      	cmp	r1, r3
 800a74a:	d002      	beq.n	800a752 <__sflush_r+0x92>
 800a74c:	4628      	mov	r0, r5
 800a74e:	f000 f9d7 	bl	800ab00 <_free_r>
 800a752:	2000      	movs	r0, #0
 800a754:	6360      	str	r0, [r4, #52]	; 0x34
 800a756:	e7c1      	b.n	800a6dc <__sflush_r+0x1c>
 800a758:	6a21      	ldr	r1, [r4, #32]
 800a75a:	2301      	movs	r3, #1
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b0      	blx	r6
 800a760:	1c41      	adds	r1, r0, #1
 800a762:	d1c7      	bne.n	800a6f4 <__sflush_r+0x34>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0c4      	beq.n	800a6f4 <__sflush_r+0x34>
 800a76a:	2b1d      	cmp	r3, #29
 800a76c:	d001      	beq.n	800a772 <__sflush_r+0xb2>
 800a76e:	2b16      	cmp	r3, #22
 800a770:	d101      	bne.n	800a776 <__sflush_r+0xb6>
 800a772:	602f      	str	r7, [r5, #0]
 800a774:	e7b1      	b.n	800a6da <__sflush_r+0x1a>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	e7ad      	b.n	800a6dc <__sflush_r+0x1c>
 800a780:	690f      	ldr	r7, [r1, #16]
 800a782:	2f00      	cmp	r7, #0
 800a784:	d0a9      	beq.n	800a6da <__sflush_r+0x1a>
 800a786:	0793      	lsls	r3, r2, #30
 800a788:	680e      	ldr	r6, [r1, #0]
 800a78a:	bf08      	it	eq
 800a78c:	694b      	ldreq	r3, [r1, #20]
 800a78e:	600f      	str	r7, [r1, #0]
 800a790:	bf18      	it	ne
 800a792:	2300      	movne	r3, #0
 800a794:	eba6 0807 	sub.w	r8, r6, r7
 800a798:	608b      	str	r3, [r1, #8]
 800a79a:	f1b8 0f00 	cmp.w	r8, #0
 800a79e:	dd9c      	ble.n	800a6da <__sflush_r+0x1a>
 800a7a0:	6a21      	ldr	r1, [r4, #32]
 800a7a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7a4:	4643      	mov	r3, r8
 800a7a6:	463a      	mov	r2, r7
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	47b0      	blx	r6
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	dc06      	bgt.n	800a7be <__sflush_r+0xfe>
 800a7b0:	89a3      	ldrh	r3, [r4, #12]
 800a7b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7b6:	81a3      	strh	r3, [r4, #12]
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7bc:	e78e      	b.n	800a6dc <__sflush_r+0x1c>
 800a7be:	4407      	add	r7, r0
 800a7c0:	eba8 0800 	sub.w	r8, r8, r0
 800a7c4:	e7e9      	b.n	800a79a <__sflush_r+0xda>
 800a7c6:	bf00      	nop
 800a7c8:	20400001 	.word	0x20400001

0800a7cc <_fflush_r>:
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	690b      	ldr	r3, [r1, #16]
 800a7d0:	4605      	mov	r5, r0
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	b913      	cbnz	r3, 800a7dc <_fflush_r+0x10>
 800a7d6:	2500      	movs	r5, #0
 800a7d8:	4628      	mov	r0, r5
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	b118      	cbz	r0, 800a7e6 <_fflush_r+0x1a>
 800a7de:	6983      	ldr	r3, [r0, #24]
 800a7e0:	b90b      	cbnz	r3, 800a7e6 <_fflush_r+0x1a>
 800a7e2:	f000 f887 	bl	800a8f4 <__sinit>
 800a7e6:	4b14      	ldr	r3, [pc, #80]	; (800a838 <_fflush_r+0x6c>)
 800a7e8:	429c      	cmp	r4, r3
 800a7ea:	d11b      	bne.n	800a824 <_fflush_r+0x58>
 800a7ec:	686c      	ldr	r4, [r5, #4]
 800a7ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d0ef      	beq.n	800a7d6 <_fflush_r+0xa>
 800a7f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7f8:	07d0      	lsls	r0, r2, #31
 800a7fa:	d404      	bmi.n	800a806 <_fflush_r+0x3a>
 800a7fc:	0599      	lsls	r1, r3, #22
 800a7fe:	d402      	bmi.n	800a806 <_fflush_r+0x3a>
 800a800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a802:	f000 f915 	bl	800aa30 <__retarget_lock_acquire_recursive>
 800a806:	4628      	mov	r0, r5
 800a808:	4621      	mov	r1, r4
 800a80a:	f7ff ff59 	bl	800a6c0 <__sflush_r>
 800a80e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a810:	07da      	lsls	r2, r3, #31
 800a812:	4605      	mov	r5, r0
 800a814:	d4e0      	bmi.n	800a7d8 <_fflush_r+0xc>
 800a816:	89a3      	ldrh	r3, [r4, #12]
 800a818:	059b      	lsls	r3, r3, #22
 800a81a:	d4dd      	bmi.n	800a7d8 <_fflush_r+0xc>
 800a81c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a81e:	f000 f908 	bl	800aa32 <__retarget_lock_release_recursive>
 800a822:	e7d9      	b.n	800a7d8 <_fflush_r+0xc>
 800a824:	4b05      	ldr	r3, [pc, #20]	; (800a83c <_fflush_r+0x70>)
 800a826:	429c      	cmp	r4, r3
 800a828:	d101      	bne.n	800a82e <_fflush_r+0x62>
 800a82a:	68ac      	ldr	r4, [r5, #8]
 800a82c:	e7df      	b.n	800a7ee <_fflush_r+0x22>
 800a82e:	4b04      	ldr	r3, [pc, #16]	; (800a840 <_fflush_r+0x74>)
 800a830:	429c      	cmp	r4, r3
 800a832:	bf08      	it	eq
 800a834:	68ec      	ldreq	r4, [r5, #12]
 800a836:	e7da      	b.n	800a7ee <_fflush_r+0x22>
 800a838:	0800d880 	.word	0x0800d880
 800a83c:	0800d8a0 	.word	0x0800d8a0
 800a840:	0800d860 	.word	0x0800d860

0800a844 <std>:
 800a844:	2300      	movs	r3, #0
 800a846:	b510      	push	{r4, lr}
 800a848:	4604      	mov	r4, r0
 800a84a:	e9c0 3300 	strd	r3, r3, [r0]
 800a84e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a852:	6083      	str	r3, [r0, #8]
 800a854:	8181      	strh	r1, [r0, #12]
 800a856:	6643      	str	r3, [r0, #100]	; 0x64
 800a858:	81c2      	strh	r2, [r0, #14]
 800a85a:	6183      	str	r3, [r0, #24]
 800a85c:	4619      	mov	r1, r3
 800a85e:	2208      	movs	r2, #8
 800a860:	305c      	adds	r0, #92	; 0x5c
 800a862:	f7ff fdad 	bl	800a3c0 <memset>
 800a866:	4b05      	ldr	r3, [pc, #20]	; (800a87c <std+0x38>)
 800a868:	6263      	str	r3, [r4, #36]	; 0x24
 800a86a:	4b05      	ldr	r3, [pc, #20]	; (800a880 <std+0x3c>)
 800a86c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a86e:	4b05      	ldr	r3, [pc, #20]	; (800a884 <std+0x40>)
 800a870:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a872:	4b05      	ldr	r3, [pc, #20]	; (800a888 <std+0x44>)
 800a874:	6224      	str	r4, [r4, #32]
 800a876:	6323      	str	r3, [r4, #48]	; 0x30
 800a878:	bd10      	pop	{r4, pc}
 800a87a:	bf00      	nop
 800a87c:	0800b34d 	.word	0x0800b34d
 800a880:	0800b36f 	.word	0x0800b36f
 800a884:	0800b3a7 	.word	0x0800b3a7
 800a888:	0800b3cb 	.word	0x0800b3cb

0800a88c <_cleanup_r>:
 800a88c:	4901      	ldr	r1, [pc, #4]	; (800a894 <_cleanup_r+0x8>)
 800a88e:	f000 b8af 	b.w	800a9f0 <_fwalk_reent>
 800a892:	bf00      	nop
 800a894:	0800a7cd 	.word	0x0800a7cd

0800a898 <__sfmoreglue>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	2268      	movs	r2, #104	; 0x68
 800a89c:	1e4d      	subs	r5, r1, #1
 800a89e:	4355      	muls	r5, r2
 800a8a0:	460e      	mov	r6, r1
 800a8a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a8a6:	f000 f997 	bl	800abd8 <_malloc_r>
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	b140      	cbz	r0, 800a8c0 <__sfmoreglue+0x28>
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	e9c0 1600 	strd	r1, r6, [r0]
 800a8b4:	300c      	adds	r0, #12
 800a8b6:	60a0      	str	r0, [r4, #8]
 800a8b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a8bc:	f7ff fd80 	bl	800a3c0 <memset>
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	bd70      	pop	{r4, r5, r6, pc}

0800a8c4 <__sfp_lock_acquire>:
 800a8c4:	4801      	ldr	r0, [pc, #4]	; (800a8cc <__sfp_lock_acquire+0x8>)
 800a8c6:	f000 b8b3 	b.w	800aa30 <__retarget_lock_acquire_recursive>
 800a8ca:	bf00      	nop
 800a8cc:	20001025 	.word	0x20001025

0800a8d0 <__sfp_lock_release>:
 800a8d0:	4801      	ldr	r0, [pc, #4]	; (800a8d8 <__sfp_lock_release+0x8>)
 800a8d2:	f000 b8ae 	b.w	800aa32 <__retarget_lock_release_recursive>
 800a8d6:	bf00      	nop
 800a8d8:	20001025 	.word	0x20001025

0800a8dc <__sinit_lock_acquire>:
 800a8dc:	4801      	ldr	r0, [pc, #4]	; (800a8e4 <__sinit_lock_acquire+0x8>)
 800a8de:	f000 b8a7 	b.w	800aa30 <__retarget_lock_acquire_recursive>
 800a8e2:	bf00      	nop
 800a8e4:	20001026 	.word	0x20001026

0800a8e8 <__sinit_lock_release>:
 800a8e8:	4801      	ldr	r0, [pc, #4]	; (800a8f0 <__sinit_lock_release+0x8>)
 800a8ea:	f000 b8a2 	b.w	800aa32 <__retarget_lock_release_recursive>
 800a8ee:	bf00      	nop
 800a8f0:	20001026 	.word	0x20001026

0800a8f4 <__sinit>:
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	f7ff fff0 	bl	800a8dc <__sinit_lock_acquire>
 800a8fc:	69a3      	ldr	r3, [r4, #24]
 800a8fe:	b11b      	cbz	r3, 800a908 <__sinit+0x14>
 800a900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a904:	f7ff bff0 	b.w	800a8e8 <__sinit_lock_release>
 800a908:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a90c:	6523      	str	r3, [r4, #80]	; 0x50
 800a90e:	4b13      	ldr	r3, [pc, #76]	; (800a95c <__sinit+0x68>)
 800a910:	4a13      	ldr	r2, [pc, #76]	; (800a960 <__sinit+0x6c>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	62a2      	str	r2, [r4, #40]	; 0x28
 800a916:	42a3      	cmp	r3, r4
 800a918:	bf04      	itt	eq
 800a91a:	2301      	moveq	r3, #1
 800a91c:	61a3      	streq	r3, [r4, #24]
 800a91e:	4620      	mov	r0, r4
 800a920:	f000 f820 	bl	800a964 <__sfp>
 800a924:	6060      	str	r0, [r4, #4]
 800a926:	4620      	mov	r0, r4
 800a928:	f000 f81c 	bl	800a964 <__sfp>
 800a92c:	60a0      	str	r0, [r4, #8]
 800a92e:	4620      	mov	r0, r4
 800a930:	f000 f818 	bl	800a964 <__sfp>
 800a934:	2200      	movs	r2, #0
 800a936:	60e0      	str	r0, [r4, #12]
 800a938:	2104      	movs	r1, #4
 800a93a:	6860      	ldr	r0, [r4, #4]
 800a93c:	f7ff ff82 	bl	800a844 <std>
 800a940:	68a0      	ldr	r0, [r4, #8]
 800a942:	2201      	movs	r2, #1
 800a944:	2109      	movs	r1, #9
 800a946:	f7ff ff7d 	bl	800a844 <std>
 800a94a:	68e0      	ldr	r0, [r4, #12]
 800a94c:	2202      	movs	r2, #2
 800a94e:	2112      	movs	r1, #18
 800a950:	f7ff ff78 	bl	800a844 <std>
 800a954:	2301      	movs	r3, #1
 800a956:	61a3      	str	r3, [r4, #24]
 800a958:	e7d2      	b.n	800a900 <__sinit+0xc>
 800a95a:	bf00      	nop
 800a95c:	0800d85c 	.word	0x0800d85c
 800a960:	0800a88d 	.word	0x0800a88d

0800a964 <__sfp>:
 800a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a966:	4607      	mov	r7, r0
 800a968:	f7ff ffac 	bl	800a8c4 <__sfp_lock_acquire>
 800a96c:	4b1e      	ldr	r3, [pc, #120]	; (800a9e8 <__sfp+0x84>)
 800a96e:	681e      	ldr	r6, [r3, #0]
 800a970:	69b3      	ldr	r3, [r6, #24]
 800a972:	b913      	cbnz	r3, 800a97a <__sfp+0x16>
 800a974:	4630      	mov	r0, r6
 800a976:	f7ff ffbd 	bl	800a8f4 <__sinit>
 800a97a:	3648      	adds	r6, #72	; 0x48
 800a97c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a980:	3b01      	subs	r3, #1
 800a982:	d503      	bpl.n	800a98c <__sfp+0x28>
 800a984:	6833      	ldr	r3, [r6, #0]
 800a986:	b30b      	cbz	r3, 800a9cc <__sfp+0x68>
 800a988:	6836      	ldr	r6, [r6, #0]
 800a98a:	e7f7      	b.n	800a97c <__sfp+0x18>
 800a98c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a990:	b9d5      	cbnz	r5, 800a9c8 <__sfp+0x64>
 800a992:	4b16      	ldr	r3, [pc, #88]	; (800a9ec <__sfp+0x88>)
 800a994:	60e3      	str	r3, [r4, #12]
 800a996:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a99a:	6665      	str	r5, [r4, #100]	; 0x64
 800a99c:	f000 f847 	bl	800aa2e <__retarget_lock_init_recursive>
 800a9a0:	f7ff ff96 	bl	800a8d0 <__sfp_lock_release>
 800a9a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a9a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a9ac:	6025      	str	r5, [r4, #0]
 800a9ae:	61a5      	str	r5, [r4, #24]
 800a9b0:	2208      	movs	r2, #8
 800a9b2:	4629      	mov	r1, r5
 800a9b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a9b8:	f7ff fd02 	bl	800a3c0 <memset>
 800a9bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a9c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9c8:	3468      	adds	r4, #104	; 0x68
 800a9ca:	e7d9      	b.n	800a980 <__sfp+0x1c>
 800a9cc:	2104      	movs	r1, #4
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f7ff ff62 	bl	800a898 <__sfmoreglue>
 800a9d4:	4604      	mov	r4, r0
 800a9d6:	6030      	str	r0, [r6, #0]
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d1d5      	bne.n	800a988 <__sfp+0x24>
 800a9dc:	f7ff ff78 	bl	800a8d0 <__sfp_lock_release>
 800a9e0:	230c      	movs	r3, #12
 800a9e2:	603b      	str	r3, [r7, #0]
 800a9e4:	e7ee      	b.n	800a9c4 <__sfp+0x60>
 800a9e6:	bf00      	nop
 800a9e8:	0800d85c 	.word	0x0800d85c
 800a9ec:	ffff0001 	.word	0xffff0001

0800a9f0 <_fwalk_reent>:
 800a9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	4688      	mov	r8, r1
 800a9f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9fc:	2700      	movs	r7, #0
 800a9fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa02:	f1b9 0901 	subs.w	r9, r9, #1
 800aa06:	d505      	bpl.n	800aa14 <_fwalk_reent+0x24>
 800aa08:	6824      	ldr	r4, [r4, #0]
 800aa0a:	2c00      	cmp	r4, #0
 800aa0c:	d1f7      	bne.n	800a9fe <_fwalk_reent+0xe>
 800aa0e:	4638      	mov	r0, r7
 800aa10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa14:	89ab      	ldrh	r3, [r5, #12]
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d907      	bls.n	800aa2a <_fwalk_reent+0x3a>
 800aa1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	d003      	beq.n	800aa2a <_fwalk_reent+0x3a>
 800aa22:	4629      	mov	r1, r5
 800aa24:	4630      	mov	r0, r6
 800aa26:	47c0      	blx	r8
 800aa28:	4307      	orrs	r7, r0
 800aa2a:	3568      	adds	r5, #104	; 0x68
 800aa2c:	e7e9      	b.n	800aa02 <_fwalk_reent+0x12>

0800aa2e <__retarget_lock_init_recursive>:
 800aa2e:	4770      	bx	lr

0800aa30 <__retarget_lock_acquire_recursive>:
 800aa30:	4770      	bx	lr

0800aa32 <__retarget_lock_release_recursive>:
 800aa32:	4770      	bx	lr

0800aa34 <__swhatbuf_r>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	460e      	mov	r6, r1
 800aa38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa3c:	2900      	cmp	r1, #0
 800aa3e:	b096      	sub	sp, #88	; 0x58
 800aa40:	4614      	mov	r4, r2
 800aa42:	461d      	mov	r5, r3
 800aa44:	da08      	bge.n	800aa58 <__swhatbuf_r+0x24>
 800aa46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	602a      	str	r2, [r5, #0]
 800aa4e:	061a      	lsls	r2, r3, #24
 800aa50:	d410      	bmi.n	800aa74 <__swhatbuf_r+0x40>
 800aa52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa56:	e00e      	b.n	800aa76 <__swhatbuf_r+0x42>
 800aa58:	466a      	mov	r2, sp
 800aa5a:	f000 fce9 	bl	800b430 <_fstat_r>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	dbf1      	blt.n	800aa46 <__swhatbuf_r+0x12>
 800aa62:	9a01      	ldr	r2, [sp, #4]
 800aa64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa6c:	425a      	negs	r2, r3
 800aa6e:	415a      	adcs	r2, r3
 800aa70:	602a      	str	r2, [r5, #0]
 800aa72:	e7ee      	b.n	800aa52 <__swhatbuf_r+0x1e>
 800aa74:	2340      	movs	r3, #64	; 0x40
 800aa76:	2000      	movs	r0, #0
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	b016      	add	sp, #88	; 0x58
 800aa7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa80 <__smakebuf_r>:
 800aa80:	898b      	ldrh	r3, [r1, #12]
 800aa82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa84:	079d      	lsls	r5, r3, #30
 800aa86:	4606      	mov	r6, r0
 800aa88:	460c      	mov	r4, r1
 800aa8a:	d507      	bpl.n	800aa9c <__smakebuf_r+0x1c>
 800aa8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	6123      	str	r3, [r4, #16]
 800aa94:	2301      	movs	r3, #1
 800aa96:	6163      	str	r3, [r4, #20]
 800aa98:	b002      	add	sp, #8
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	ab01      	add	r3, sp, #4
 800aa9e:	466a      	mov	r2, sp
 800aaa0:	f7ff ffc8 	bl	800aa34 <__swhatbuf_r>
 800aaa4:	9900      	ldr	r1, [sp, #0]
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f000 f895 	bl	800abd8 <_malloc_r>
 800aaae:	b948      	cbnz	r0, 800aac4 <__smakebuf_r+0x44>
 800aab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab4:	059a      	lsls	r2, r3, #22
 800aab6:	d4ef      	bmi.n	800aa98 <__smakebuf_r+0x18>
 800aab8:	f023 0303 	bic.w	r3, r3, #3
 800aabc:	f043 0302 	orr.w	r3, r3, #2
 800aac0:	81a3      	strh	r3, [r4, #12]
 800aac2:	e7e3      	b.n	800aa8c <__smakebuf_r+0xc>
 800aac4:	4b0d      	ldr	r3, [pc, #52]	; (800aafc <__smakebuf_r+0x7c>)
 800aac6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	6020      	str	r0, [r4, #0]
 800aacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad0:	81a3      	strh	r3, [r4, #12]
 800aad2:	9b00      	ldr	r3, [sp, #0]
 800aad4:	6163      	str	r3, [r4, #20]
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	6120      	str	r0, [r4, #16]
 800aada:	b15b      	cbz	r3, 800aaf4 <__smakebuf_r+0x74>
 800aadc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aae0:	4630      	mov	r0, r6
 800aae2:	f000 fcb7 	bl	800b454 <_isatty_r>
 800aae6:	b128      	cbz	r0, 800aaf4 <__smakebuf_r+0x74>
 800aae8:	89a3      	ldrh	r3, [r4, #12]
 800aaea:	f023 0303 	bic.w	r3, r3, #3
 800aaee:	f043 0301 	orr.w	r3, r3, #1
 800aaf2:	81a3      	strh	r3, [r4, #12]
 800aaf4:	89a0      	ldrh	r0, [r4, #12]
 800aaf6:	4305      	orrs	r5, r0
 800aaf8:	81a5      	strh	r5, [r4, #12]
 800aafa:	e7cd      	b.n	800aa98 <__smakebuf_r+0x18>
 800aafc:	0800a88d 	.word	0x0800a88d

0800ab00 <_free_r>:
 800ab00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab02:	2900      	cmp	r1, #0
 800ab04:	d044      	beq.n	800ab90 <_free_r+0x90>
 800ab06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab0a:	9001      	str	r0, [sp, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f1a1 0404 	sub.w	r4, r1, #4
 800ab12:	bfb8      	it	lt
 800ab14:	18e4      	addlt	r4, r4, r3
 800ab16:	f000 fcbf 	bl	800b498 <__malloc_lock>
 800ab1a:	4a1e      	ldr	r2, [pc, #120]	; (800ab94 <_free_r+0x94>)
 800ab1c:	9801      	ldr	r0, [sp, #4]
 800ab1e:	6813      	ldr	r3, [r2, #0]
 800ab20:	b933      	cbnz	r3, 800ab30 <_free_r+0x30>
 800ab22:	6063      	str	r3, [r4, #4]
 800ab24:	6014      	str	r4, [r2, #0]
 800ab26:	b003      	add	sp, #12
 800ab28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab2c:	f000 bcba 	b.w	800b4a4 <__malloc_unlock>
 800ab30:	42a3      	cmp	r3, r4
 800ab32:	d908      	bls.n	800ab46 <_free_r+0x46>
 800ab34:	6825      	ldr	r5, [r4, #0]
 800ab36:	1961      	adds	r1, r4, r5
 800ab38:	428b      	cmp	r3, r1
 800ab3a:	bf01      	itttt	eq
 800ab3c:	6819      	ldreq	r1, [r3, #0]
 800ab3e:	685b      	ldreq	r3, [r3, #4]
 800ab40:	1949      	addeq	r1, r1, r5
 800ab42:	6021      	streq	r1, [r4, #0]
 800ab44:	e7ed      	b.n	800ab22 <_free_r+0x22>
 800ab46:	461a      	mov	r2, r3
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	b10b      	cbz	r3, 800ab50 <_free_r+0x50>
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	d9fa      	bls.n	800ab46 <_free_r+0x46>
 800ab50:	6811      	ldr	r1, [r2, #0]
 800ab52:	1855      	adds	r5, r2, r1
 800ab54:	42a5      	cmp	r5, r4
 800ab56:	d10b      	bne.n	800ab70 <_free_r+0x70>
 800ab58:	6824      	ldr	r4, [r4, #0]
 800ab5a:	4421      	add	r1, r4
 800ab5c:	1854      	adds	r4, r2, r1
 800ab5e:	42a3      	cmp	r3, r4
 800ab60:	6011      	str	r1, [r2, #0]
 800ab62:	d1e0      	bne.n	800ab26 <_free_r+0x26>
 800ab64:	681c      	ldr	r4, [r3, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	6053      	str	r3, [r2, #4]
 800ab6a:	4421      	add	r1, r4
 800ab6c:	6011      	str	r1, [r2, #0]
 800ab6e:	e7da      	b.n	800ab26 <_free_r+0x26>
 800ab70:	d902      	bls.n	800ab78 <_free_r+0x78>
 800ab72:	230c      	movs	r3, #12
 800ab74:	6003      	str	r3, [r0, #0]
 800ab76:	e7d6      	b.n	800ab26 <_free_r+0x26>
 800ab78:	6825      	ldr	r5, [r4, #0]
 800ab7a:	1961      	adds	r1, r4, r5
 800ab7c:	428b      	cmp	r3, r1
 800ab7e:	bf04      	itt	eq
 800ab80:	6819      	ldreq	r1, [r3, #0]
 800ab82:	685b      	ldreq	r3, [r3, #4]
 800ab84:	6063      	str	r3, [r4, #4]
 800ab86:	bf04      	itt	eq
 800ab88:	1949      	addeq	r1, r1, r5
 800ab8a:	6021      	streq	r1, [r4, #0]
 800ab8c:	6054      	str	r4, [r2, #4]
 800ab8e:	e7ca      	b.n	800ab26 <_free_r+0x26>
 800ab90:	b003      	add	sp, #12
 800ab92:	bd30      	pop	{r4, r5, pc}
 800ab94:	20001028 	.word	0x20001028

0800ab98 <sbrk_aligned>:
 800ab98:	b570      	push	{r4, r5, r6, lr}
 800ab9a:	4e0e      	ldr	r6, [pc, #56]	; (800abd4 <sbrk_aligned+0x3c>)
 800ab9c:	460c      	mov	r4, r1
 800ab9e:	6831      	ldr	r1, [r6, #0]
 800aba0:	4605      	mov	r5, r0
 800aba2:	b911      	cbnz	r1, 800abaa <sbrk_aligned+0x12>
 800aba4:	f000 fbc2 	bl	800b32c <_sbrk_r>
 800aba8:	6030      	str	r0, [r6, #0]
 800abaa:	4621      	mov	r1, r4
 800abac:	4628      	mov	r0, r5
 800abae:	f000 fbbd 	bl	800b32c <_sbrk_r>
 800abb2:	1c43      	adds	r3, r0, #1
 800abb4:	d00a      	beq.n	800abcc <sbrk_aligned+0x34>
 800abb6:	1cc4      	adds	r4, r0, #3
 800abb8:	f024 0403 	bic.w	r4, r4, #3
 800abbc:	42a0      	cmp	r0, r4
 800abbe:	d007      	beq.n	800abd0 <sbrk_aligned+0x38>
 800abc0:	1a21      	subs	r1, r4, r0
 800abc2:	4628      	mov	r0, r5
 800abc4:	f000 fbb2 	bl	800b32c <_sbrk_r>
 800abc8:	3001      	adds	r0, #1
 800abca:	d101      	bne.n	800abd0 <sbrk_aligned+0x38>
 800abcc:	f04f 34ff 	mov.w	r4, #4294967295
 800abd0:	4620      	mov	r0, r4
 800abd2:	bd70      	pop	{r4, r5, r6, pc}
 800abd4:	2000102c 	.word	0x2000102c

0800abd8 <_malloc_r>:
 800abd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abdc:	1ccd      	adds	r5, r1, #3
 800abde:	f025 0503 	bic.w	r5, r5, #3
 800abe2:	3508      	adds	r5, #8
 800abe4:	2d0c      	cmp	r5, #12
 800abe6:	bf38      	it	cc
 800abe8:	250c      	movcc	r5, #12
 800abea:	2d00      	cmp	r5, #0
 800abec:	4607      	mov	r7, r0
 800abee:	db01      	blt.n	800abf4 <_malloc_r+0x1c>
 800abf0:	42a9      	cmp	r1, r5
 800abf2:	d905      	bls.n	800ac00 <_malloc_r+0x28>
 800abf4:	230c      	movs	r3, #12
 800abf6:	603b      	str	r3, [r7, #0]
 800abf8:	2600      	movs	r6, #0
 800abfa:	4630      	mov	r0, r6
 800abfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac00:	4e2e      	ldr	r6, [pc, #184]	; (800acbc <_malloc_r+0xe4>)
 800ac02:	f000 fc49 	bl	800b498 <__malloc_lock>
 800ac06:	6833      	ldr	r3, [r6, #0]
 800ac08:	461c      	mov	r4, r3
 800ac0a:	bb34      	cbnz	r4, 800ac5a <_malloc_r+0x82>
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4638      	mov	r0, r7
 800ac10:	f7ff ffc2 	bl	800ab98 <sbrk_aligned>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	4604      	mov	r4, r0
 800ac18:	d14d      	bne.n	800acb6 <_malloc_r+0xde>
 800ac1a:	6834      	ldr	r4, [r6, #0]
 800ac1c:	4626      	mov	r6, r4
 800ac1e:	2e00      	cmp	r6, #0
 800ac20:	d140      	bne.n	800aca4 <_malloc_r+0xcc>
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	4631      	mov	r1, r6
 800ac26:	4638      	mov	r0, r7
 800ac28:	eb04 0803 	add.w	r8, r4, r3
 800ac2c:	f000 fb7e 	bl	800b32c <_sbrk_r>
 800ac30:	4580      	cmp	r8, r0
 800ac32:	d13a      	bne.n	800acaa <_malloc_r+0xd2>
 800ac34:	6821      	ldr	r1, [r4, #0]
 800ac36:	3503      	adds	r5, #3
 800ac38:	1a6d      	subs	r5, r5, r1
 800ac3a:	f025 0503 	bic.w	r5, r5, #3
 800ac3e:	3508      	adds	r5, #8
 800ac40:	2d0c      	cmp	r5, #12
 800ac42:	bf38      	it	cc
 800ac44:	250c      	movcc	r5, #12
 800ac46:	4629      	mov	r1, r5
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f7ff ffa5 	bl	800ab98 <sbrk_aligned>
 800ac4e:	3001      	adds	r0, #1
 800ac50:	d02b      	beq.n	800acaa <_malloc_r+0xd2>
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	442b      	add	r3, r5
 800ac56:	6023      	str	r3, [r4, #0]
 800ac58:	e00e      	b.n	800ac78 <_malloc_r+0xa0>
 800ac5a:	6822      	ldr	r2, [r4, #0]
 800ac5c:	1b52      	subs	r2, r2, r5
 800ac5e:	d41e      	bmi.n	800ac9e <_malloc_r+0xc6>
 800ac60:	2a0b      	cmp	r2, #11
 800ac62:	d916      	bls.n	800ac92 <_malloc_r+0xba>
 800ac64:	1961      	adds	r1, r4, r5
 800ac66:	42a3      	cmp	r3, r4
 800ac68:	6025      	str	r5, [r4, #0]
 800ac6a:	bf18      	it	ne
 800ac6c:	6059      	strne	r1, [r3, #4]
 800ac6e:	6863      	ldr	r3, [r4, #4]
 800ac70:	bf08      	it	eq
 800ac72:	6031      	streq	r1, [r6, #0]
 800ac74:	5162      	str	r2, [r4, r5]
 800ac76:	604b      	str	r3, [r1, #4]
 800ac78:	4638      	mov	r0, r7
 800ac7a:	f104 060b 	add.w	r6, r4, #11
 800ac7e:	f000 fc11 	bl	800b4a4 <__malloc_unlock>
 800ac82:	f026 0607 	bic.w	r6, r6, #7
 800ac86:	1d23      	adds	r3, r4, #4
 800ac88:	1af2      	subs	r2, r6, r3
 800ac8a:	d0b6      	beq.n	800abfa <_malloc_r+0x22>
 800ac8c:	1b9b      	subs	r3, r3, r6
 800ac8e:	50a3      	str	r3, [r4, r2]
 800ac90:	e7b3      	b.n	800abfa <_malloc_r+0x22>
 800ac92:	6862      	ldr	r2, [r4, #4]
 800ac94:	42a3      	cmp	r3, r4
 800ac96:	bf0c      	ite	eq
 800ac98:	6032      	streq	r2, [r6, #0]
 800ac9a:	605a      	strne	r2, [r3, #4]
 800ac9c:	e7ec      	b.n	800ac78 <_malloc_r+0xa0>
 800ac9e:	4623      	mov	r3, r4
 800aca0:	6864      	ldr	r4, [r4, #4]
 800aca2:	e7b2      	b.n	800ac0a <_malloc_r+0x32>
 800aca4:	4634      	mov	r4, r6
 800aca6:	6876      	ldr	r6, [r6, #4]
 800aca8:	e7b9      	b.n	800ac1e <_malloc_r+0x46>
 800acaa:	230c      	movs	r3, #12
 800acac:	603b      	str	r3, [r7, #0]
 800acae:	4638      	mov	r0, r7
 800acb0:	f000 fbf8 	bl	800b4a4 <__malloc_unlock>
 800acb4:	e7a1      	b.n	800abfa <_malloc_r+0x22>
 800acb6:	6025      	str	r5, [r4, #0]
 800acb8:	e7de      	b.n	800ac78 <_malloc_r+0xa0>
 800acba:	bf00      	nop
 800acbc:	20001028 	.word	0x20001028

0800acc0 <__sfputc_r>:
 800acc0:	6893      	ldr	r3, [r2, #8]
 800acc2:	3b01      	subs	r3, #1
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	b410      	push	{r4}
 800acc8:	6093      	str	r3, [r2, #8]
 800acca:	da08      	bge.n	800acde <__sfputc_r+0x1e>
 800accc:	6994      	ldr	r4, [r2, #24]
 800acce:	42a3      	cmp	r3, r4
 800acd0:	db01      	blt.n	800acd6 <__sfputc_r+0x16>
 800acd2:	290a      	cmp	r1, #10
 800acd4:	d103      	bne.n	800acde <__sfputc_r+0x1e>
 800acd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acda:	f7ff bc31 	b.w	800a540 <__swbuf_r>
 800acde:	6813      	ldr	r3, [r2, #0]
 800ace0:	1c58      	adds	r0, r3, #1
 800ace2:	6010      	str	r0, [r2, #0]
 800ace4:	7019      	strb	r1, [r3, #0]
 800ace6:	4608      	mov	r0, r1
 800ace8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acec:	4770      	bx	lr

0800acee <__sfputs_r>:
 800acee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acf0:	4606      	mov	r6, r0
 800acf2:	460f      	mov	r7, r1
 800acf4:	4614      	mov	r4, r2
 800acf6:	18d5      	adds	r5, r2, r3
 800acf8:	42ac      	cmp	r4, r5
 800acfa:	d101      	bne.n	800ad00 <__sfputs_r+0x12>
 800acfc:	2000      	movs	r0, #0
 800acfe:	e007      	b.n	800ad10 <__sfputs_r+0x22>
 800ad00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad04:	463a      	mov	r2, r7
 800ad06:	4630      	mov	r0, r6
 800ad08:	f7ff ffda 	bl	800acc0 <__sfputc_r>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	d1f3      	bne.n	800acf8 <__sfputs_r+0xa>
 800ad10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad14 <_vfiprintf_r>:
 800ad14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad18:	460d      	mov	r5, r1
 800ad1a:	b09d      	sub	sp, #116	; 0x74
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	4698      	mov	r8, r3
 800ad20:	4606      	mov	r6, r0
 800ad22:	b118      	cbz	r0, 800ad2c <_vfiprintf_r+0x18>
 800ad24:	6983      	ldr	r3, [r0, #24]
 800ad26:	b90b      	cbnz	r3, 800ad2c <_vfiprintf_r+0x18>
 800ad28:	f7ff fde4 	bl	800a8f4 <__sinit>
 800ad2c:	4b89      	ldr	r3, [pc, #548]	; (800af54 <_vfiprintf_r+0x240>)
 800ad2e:	429d      	cmp	r5, r3
 800ad30:	d11b      	bne.n	800ad6a <_vfiprintf_r+0x56>
 800ad32:	6875      	ldr	r5, [r6, #4]
 800ad34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad36:	07d9      	lsls	r1, r3, #31
 800ad38:	d405      	bmi.n	800ad46 <_vfiprintf_r+0x32>
 800ad3a:	89ab      	ldrh	r3, [r5, #12]
 800ad3c:	059a      	lsls	r2, r3, #22
 800ad3e:	d402      	bmi.n	800ad46 <_vfiprintf_r+0x32>
 800ad40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad42:	f7ff fe75 	bl	800aa30 <__retarget_lock_acquire_recursive>
 800ad46:	89ab      	ldrh	r3, [r5, #12]
 800ad48:	071b      	lsls	r3, r3, #28
 800ad4a:	d501      	bpl.n	800ad50 <_vfiprintf_r+0x3c>
 800ad4c:	692b      	ldr	r3, [r5, #16]
 800ad4e:	b9eb      	cbnz	r3, 800ad8c <_vfiprintf_r+0x78>
 800ad50:	4629      	mov	r1, r5
 800ad52:	4630      	mov	r0, r6
 800ad54:	f7ff fc46 	bl	800a5e4 <__swsetup_r>
 800ad58:	b1c0      	cbz	r0, 800ad8c <_vfiprintf_r+0x78>
 800ad5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad5c:	07dc      	lsls	r4, r3, #31
 800ad5e:	d50e      	bpl.n	800ad7e <_vfiprintf_r+0x6a>
 800ad60:	f04f 30ff 	mov.w	r0, #4294967295
 800ad64:	b01d      	add	sp, #116	; 0x74
 800ad66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6a:	4b7b      	ldr	r3, [pc, #492]	; (800af58 <_vfiprintf_r+0x244>)
 800ad6c:	429d      	cmp	r5, r3
 800ad6e:	d101      	bne.n	800ad74 <_vfiprintf_r+0x60>
 800ad70:	68b5      	ldr	r5, [r6, #8]
 800ad72:	e7df      	b.n	800ad34 <_vfiprintf_r+0x20>
 800ad74:	4b79      	ldr	r3, [pc, #484]	; (800af5c <_vfiprintf_r+0x248>)
 800ad76:	429d      	cmp	r5, r3
 800ad78:	bf08      	it	eq
 800ad7a:	68f5      	ldreq	r5, [r6, #12]
 800ad7c:	e7da      	b.n	800ad34 <_vfiprintf_r+0x20>
 800ad7e:	89ab      	ldrh	r3, [r5, #12]
 800ad80:	0598      	lsls	r0, r3, #22
 800ad82:	d4ed      	bmi.n	800ad60 <_vfiprintf_r+0x4c>
 800ad84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad86:	f7ff fe54 	bl	800aa32 <__retarget_lock_release_recursive>
 800ad8a:	e7e9      	b.n	800ad60 <_vfiprintf_r+0x4c>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad90:	2320      	movs	r3, #32
 800ad92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad9a:	2330      	movs	r3, #48	; 0x30
 800ad9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800af60 <_vfiprintf_r+0x24c>
 800ada0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ada4:	f04f 0901 	mov.w	r9, #1
 800ada8:	4623      	mov	r3, r4
 800adaa:	469a      	mov	sl, r3
 800adac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adb0:	b10a      	cbz	r2, 800adb6 <_vfiprintf_r+0xa2>
 800adb2:	2a25      	cmp	r2, #37	; 0x25
 800adb4:	d1f9      	bne.n	800adaa <_vfiprintf_r+0x96>
 800adb6:	ebba 0b04 	subs.w	fp, sl, r4
 800adba:	d00b      	beq.n	800add4 <_vfiprintf_r+0xc0>
 800adbc:	465b      	mov	r3, fp
 800adbe:	4622      	mov	r2, r4
 800adc0:	4629      	mov	r1, r5
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7ff ff93 	bl	800acee <__sfputs_r>
 800adc8:	3001      	adds	r0, #1
 800adca:	f000 80aa 	beq.w	800af22 <_vfiprintf_r+0x20e>
 800adce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800add0:	445a      	add	r2, fp
 800add2:	9209      	str	r2, [sp, #36]	; 0x24
 800add4:	f89a 3000 	ldrb.w	r3, [sl]
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 80a2 	beq.w	800af22 <_vfiprintf_r+0x20e>
 800adde:	2300      	movs	r3, #0
 800ade0:	f04f 32ff 	mov.w	r2, #4294967295
 800ade4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ade8:	f10a 0a01 	add.w	sl, sl, #1
 800adec:	9304      	str	r3, [sp, #16]
 800adee:	9307      	str	r3, [sp, #28]
 800adf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adf4:	931a      	str	r3, [sp, #104]	; 0x68
 800adf6:	4654      	mov	r4, sl
 800adf8:	2205      	movs	r2, #5
 800adfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adfe:	4858      	ldr	r0, [pc, #352]	; (800af60 <_vfiprintf_r+0x24c>)
 800ae00:	f7f5 f9c6 	bl	8000190 <memchr>
 800ae04:	9a04      	ldr	r2, [sp, #16]
 800ae06:	b9d8      	cbnz	r0, 800ae40 <_vfiprintf_r+0x12c>
 800ae08:	06d1      	lsls	r1, r2, #27
 800ae0a:	bf44      	itt	mi
 800ae0c:	2320      	movmi	r3, #32
 800ae0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae12:	0713      	lsls	r3, r2, #28
 800ae14:	bf44      	itt	mi
 800ae16:	232b      	movmi	r3, #43	; 0x2b
 800ae18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae20:	2b2a      	cmp	r3, #42	; 0x2a
 800ae22:	d015      	beq.n	800ae50 <_vfiprintf_r+0x13c>
 800ae24:	9a07      	ldr	r2, [sp, #28]
 800ae26:	4654      	mov	r4, sl
 800ae28:	2000      	movs	r0, #0
 800ae2a:	f04f 0c0a 	mov.w	ip, #10
 800ae2e:	4621      	mov	r1, r4
 800ae30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae34:	3b30      	subs	r3, #48	; 0x30
 800ae36:	2b09      	cmp	r3, #9
 800ae38:	d94e      	bls.n	800aed8 <_vfiprintf_r+0x1c4>
 800ae3a:	b1b0      	cbz	r0, 800ae6a <_vfiprintf_r+0x156>
 800ae3c:	9207      	str	r2, [sp, #28]
 800ae3e:	e014      	b.n	800ae6a <_vfiprintf_r+0x156>
 800ae40:	eba0 0308 	sub.w	r3, r0, r8
 800ae44:	fa09 f303 	lsl.w	r3, r9, r3
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	9304      	str	r3, [sp, #16]
 800ae4c:	46a2      	mov	sl, r4
 800ae4e:	e7d2      	b.n	800adf6 <_vfiprintf_r+0xe2>
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	1d19      	adds	r1, r3, #4
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	9103      	str	r1, [sp, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	bfbb      	ittet	lt
 800ae5c:	425b      	neglt	r3, r3
 800ae5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae62:	9307      	strge	r3, [sp, #28]
 800ae64:	9307      	strlt	r3, [sp, #28]
 800ae66:	bfb8      	it	lt
 800ae68:	9204      	strlt	r2, [sp, #16]
 800ae6a:	7823      	ldrb	r3, [r4, #0]
 800ae6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ae6e:	d10c      	bne.n	800ae8a <_vfiprintf_r+0x176>
 800ae70:	7863      	ldrb	r3, [r4, #1]
 800ae72:	2b2a      	cmp	r3, #42	; 0x2a
 800ae74:	d135      	bne.n	800aee2 <_vfiprintf_r+0x1ce>
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	1d1a      	adds	r2, r3, #4
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	9203      	str	r2, [sp, #12]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfb8      	it	lt
 800ae82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae86:	3402      	adds	r4, #2
 800ae88:	9305      	str	r3, [sp, #20]
 800ae8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af70 <_vfiprintf_r+0x25c>
 800ae8e:	7821      	ldrb	r1, [r4, #0]
 800ae90:	2203      	movs	r2, #3
 800ae92:	4650      	mov	r0, sl
 800ae94:	f7f5 f97c 	bl	8000190 <memchr>
 800ae98:	b140      	cbz	r0, 800aeac <_vfiprintf_r+0x198>
 800ae9a:	2340      	movs	r3, #64	; 0x40
 800ae9c:	eba0 000a 	sub.w	r0, r0, sl
 800aea0:	fa03 f000 	lsl.w	r0, r3, r0
 800aea4:	9b04      	ldr	r3, [sp, #16]
 800aea6:	4303      	orrs	r3, r0
 800aea8:	3401      	adds	r4, #1
 800aeaa:	9304      	str	r3, [sp, #16]
 800aeac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb0:	482c      	ldr	r0, [pc, #176]	; (800af64 <_vfiprintf_r+0x250>)
 800aeb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aeb6:	2206      	movs	r2, #6
 800aeb8:	f7f5 f96a 	bl	8000190 <memchr>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d03f      	beq.n	800af40 <_vfiprintf_r+0x22c>
 800aec0:	4b29      	ldr	r3, [pc, #164]	; (800af68 <_vfiprintf_r+0x254>)
 800aec2:	bb1b      	cbnz	r3, 800af0c <_vfiprintf_r+0x1f8>
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	3307      	adds	r3, #7
 800aec8:	f023 0307 	bic.w	r3, r3, #7
 800aecc:	3308      	adds	r3, #8
 800aece:	9303      	str	r3, [sp, #12]
 800aed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed2:	443b      	add	r3, r7
 800aed4:	9309      	str	r3, [sp, #36]	; 0x24
 800aed6:	e767      	b.n	800ada8 <_vfiprintf_r+0x94>
 800aed8:	fb0c 3202 	mla	r2, ip, r2, r3
 800aedc:	460c      	mov	r4, r1
 800aede:	2001      	movs	r0, #1
 800aee0:	e7a5      	b.n	800ae2e <_vfiprintf_r+0x11a>
 800aee2:	2300      	movs	r3, #0
 800aee4:	3401      	adds	r4, #1
 800aee6:	9305      	str	r3, [sp, #20]
 800aee8:	4619      	mov	r1, r3
 800aeea:	f04f 0c0a 	mov.w	ip, #10
 800aeee:	4620      	mov	r0, r4
 800aef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aef4:	3a30      	subs	r2, #48	; 0x30
 800aef6:	2a09      	cmp	r2, #9
 800aef8:	d903      	bls.n	800af02 <_vfiprintf_r+0x1ee>
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d0c5      	beq.n	800ae8a <_vfiprintf_r+0x176>
 800aefe:	9105      	str	r1, [sp, #20]
 800af00:	e7c3      	b.n	800ae8a <_vfiprintf_r+0x176>
 800af02:	fb0c 2101 	mla	r1, ip, r1, r2
 800af06:	4604      	mov	r4, r0
 800af08:	2301      	movs	r3, #1
 800af0a:	e7f0      	b.n	800aeee <_vfiprintf_r+0x1da>
 800af0c:	ab03      	add	r3, sp, #12
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	462a      	mov	r2, r5
 800af12:	4b16      	ldr	r3, [pc, #88]	; (800af6c <_vfiprintf_r+0x258>)
 800af14:	a904      	add	r1, sp, #16
 800af16:	4630      	mov	r0, r6
 800af18:	f3af 8000 	nop.w
 800af1c:	4607      	mov	r7, r0
 800af1e:	1c78      	adds	r0, r7, #1
 800af20:	d1d6      	bne.n	800aed0 <_vfiprintf_r+0x1bc>
 800af22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af24:	07d9      	lsls	r1, r3, #31
 800af26:	d405      	bmi.n	800af34 <_vfiprintf_r+0x220>
 800af28:	89ab      	ldrh	r3, [r5, #12]
 800af2a:	059a      	lsls	r2, r3, #22
 800af2c:	d402      	bmi.n	800af34 <_vfiprintf_r+0x220>
 800af2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af30:	f7ff fd7f 	bl	800aa32 <__retarget_lock_release_recursive>
 800af34:	89ab      	ldrh	r3, [r5, #12]
 800af36:	065b      	lsls	r3, r3, #25
 800af38:	f53f af12 	bmi.w	800ad60 <_vfiprintf_r+0x4c>
 800af3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af3e:	e711      	b.n	800ad64 <_vfiprintf_r+0x50>
 800af40:	ab03      	add	r3, sp, #12
 800af42:	9300      	str	r3, [sp, #0]
 800af44:	462a      	mov	r2, r5
 800af46:	4b09      	ldr	r3, [pc, #36]	; (800af6c <_vfiprintf_r+0x258>)
 800af48:	a904      	add	r1, sp, #16
 800af4a:	4630      	mov	r0, r6
 800af4c:	f000 f880 	bl	800b050 <_printf_i>
 800af50:	e7e4      	b.n	800af1c <_vfiprintf_r+0x208>
 800af52:	bf00      	nop
 800af54:	0800d880 	.word	0x0800d880
 800af58:	0800d8a0 	.word	0x0800d8a0
 800af5c:	0800d860 	.word	0x0800d860
 800af60:	0800d8c0 	.word	0x0800d8c0
 800af64:	0800d8ca 	.word	0x0800d8ca
 800af68:	00000000 	.word	0x00000000
 800af6c:	0800acef 	.word	0x0800acef
 800af70:	0800d8c6 	.word	0x0800d8c6

0800af74 <_printf_common>:
 800af74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af78:	4616      	mov	r6, r2
 800af7a:	4699      	mov	r9, r3
 800af7c:	688a      	ldr	r2, [r1, #8]
 800af7e:	690b      	ldr	r3, [r1, #16]
 800af80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af84:	4293      	cmp	r3, r2
 800af86:	bfb8      	it	lt
 800af88:	4613      	movlt	r3, r2
 800af8a:	6033      	str	r3, [r6, #0]
 800af8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af90:	4607      	mov	r7, r0
 800af92:	460c      	mov	r4, r1
 800af94:	b10a      	cbz	r2, 800af9a <_printf_common+0x26>
 800af96:	3301      	adds	r3, #1
 800af98:	6033      	str	r3, [r6, #0]
 800af9a:	6823      	ldr	r3, [r4, #0]
 800af9c:	0699      	lsls	r1, r3, #26
 800af9e:	bf42      	ittt	mi
 800afa0:	6833      	ldrmi	r3, [r6, #0]
 800afa2:	3302      	addmi	r3, #2
 800afa4:	6033      	strmi	r3, [r6, #0]
 800afa6:	6825      	ldr	r5, [r4, #0]
 800afa8:	f015 0506 	ands.w	r5, r5, #6
 800afac:	d106      	bne.n	800afbc <_printf_common+0x48>
 800afae:	f104 0a19 	add.w	sl, r4, #25
 800afb2:	68e3      	ldr	r3, [r4, #12]
 800afb4:	6832      	ldr	r2, [r6, #0]
 800afb6:	1a9b      	subs	r3, r3, r2
 800afb8:	42ab      	cmp	r3, r5
 800afba:	dc26      	bgt.n	800b00a <_printf_common+0x96>
 800afbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800afc0:	1e13      	subs	r3, r2, #0
 800afc2:	6822      	ldr	r2, [r4, #0]
 800afc4:	bf18      	it	ne
 800afc6:	2301      	movne	r3, #1
 800afc8:	0692      	lsls	r2, r2, #26
 800afca:	d42b      	bmi.n	800b024 <_printf_common+0xb0>
 800afcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afd0:	4649      	mov	r1, r9
 800afd2:	4638      	mov	r0, r7
 800afd4:	47c0      	blx	r8
 800afd6:	3001      	adds	r0, #1
 800afd8:	d01e      	beq.n	800b018 <_printf_common+0xa4>
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	68e5      	ldr	r5, [r4, #12]
 800afde:	6832      	ldr	r2, [r6, #0]
 800afe0:	f003 0306 	and.w	r3, r3, #6
 800afe4:	2b04      	cmp	r3, #4
 800afe6:	bf08      	it	eq
 800afe8:	1aad      	subeq	r5, r5, r2
 800afea:	68a3      	ldr	r3, [r4, #8]
 800afec:	6922      	ldr	r2, [r4, #16]
 800afee:	bf0c      	ite	eq
 800aff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aff4:	2500      	movne	r5, #0
 800aff6:	4293      	cmp	r3, r2
 800aff8:	bfc4      	itt	gt
 800affa:	1a9b      	subgt	r3, r3, r2
 800affc:	18ed      	addgt	r5, r5, r3
 800affe:	2600      	movs	r6, #0
 800b000:	341a      	adds	r4, #26
 800b002:	42b5      	cmp	r5, r6
 800b004:	d11a      	bne.n	800b03c <_printf_common+0xc8>
 800b006:	2000      	movs	r0, #0
 800b008:	e008      	b.n	800b01c <_printf_common+0xa8>
 800b00a:	2301      	movs	r3, #1
 800b00c:	4652      	mov	r2, sl
 800b00e:	4649      	mov	r1, r9
 800b010:	4638      	mov	r0, r7
 800b012:	47c0      	blx	r8
 800b014:	3001      	adds	r0, #1
 800b016:	d103      	bne.n	800b020 <_printf_common+0xac>
 800b018:	f04f 30ff 	mov.w	r0, #4294967295
 800b01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b020:	3501      	adds	r5, #1
 800b022:	e7c6      	b.n	800afb2 <_printf_common+0x3e>
 800b024:	18e1      	adds	r1, r4, r3
 800b026:	1c5a      	adds	r2, r3, #1
 800b028:	2030      	movs	r0, #48	; 0x30
 800b02a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b02e:	4422      	add	r2, r4
 800b030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b038:	3302      	adds	r3, #2
 800b03a:	e7c7      	b.n	800afcc <_printf_common+0x58>
 800b03c:	2301      	movs	r3, #1
 800b03e:	4622      	mov	r2, r4
 800b040:	4649      	mov	r1, r9
 800b042:	4638      	mov	r0, r7
 800b044:	47c0      	blx	r8
 800b046:	3001      	adds	r0, #1
 800b048:	d0e6      	beq.n	800b018 <_printf_common+0xa4>
 800b04a:	3601      	adds	r6, #1
 800b04c:	e7d9      	b.n	800b002 <_printf_common+0x8e>
	...

0800b050 <_printf_i>:
 800b050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b054:	7e0f      	ldrb	r7, [r1, #24]
 800b056:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b058:	2f78      	cmp	r7, #120	; 0x78
 800b05a:	4691      	mov	r9, r2
 800b05c:	4680      	mov	r8, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	469a      	mov	sl, r3
 800b062:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b066:	d807      	bhi.n	800b078 <_printf_i+0x28>
 800b068:	2f62      	cmp	r7, #98	; 0x62
 800b06a:	d80a      	bhi.n	800b082 <_printf_i+0x32>
 800b06c:	2f00      	cmp	r7, #0
 800b06e:	f000 80d8 	beq.w	800b222 <_printf_i+0x1d2>
 800b072:	2f58      	cmp	r7, #88	; 0x58
 800b074:	f000 80a3 	beq.w	800b1be <_printf_i+0x16e>
 800b078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b07c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b080:	e03a      	b.n	800b0f8 <_printf_i+0xa8>
 800b082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b086:	2b15      	cmp	r3, #21
 800b088:	d8f6      	bhi.n	800b078 <_printf_i+0x28>
 800b08a:	a101      	add	r1, pc, #4	; (adr r1, 800b090 <_printf_i+0x40>)
 800b08c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b090:	0800b0e9 	.word	0x0800b0e9
 800b094:	0800b0fd 	.word	0x0800b0fd
 800b098:	0800b079 	.word	0x0800b079
 800b09c:	0800b079 	.word	0x0800b079
 800b0a0:	0800b079 	.word	0x0800b079
 800b0a4:	0800b079 	.word	0x0800b079
 800b0a8:	0800b0fd 	.word	0x0800b0fd
 800b0ac:	0800b079 	.word	0x0800b079
 800b0b0:	0800b079 	.word	0x0800b079
 800b0b4:	0800b079 	.word	0x0800b079
 800b0b8:	0800b079 	.word	0x0800b079
 800b0bc:	0800b209 	.word	0x0800b209
 800b0c0:	0800b12d 	.word	0x0800b12d
 800b0c4:	0800b1eb 	.word	0x0800b1eb
 800b0c8:	0800b079 	.word	0x0800b079
 800b0cc:	0800b079 	.word	0x0800b079
 800b0d0:	0800b22b 	.word	0x0800b22b
 800b0d4:	0800b079 	.word	0x0800b079
 800b0d8:	0800b12d 	.word	0x0800b12d
 800b0dc:	0800b079 	.word	0x0800b079
 800b0e0:	0800b079 	.word	0x0800b079
 800b0e4:	0800b1f3 	.word	0x0800b1f3
 800b0e8:	682b      	ldr	r3, [r5, #0]
 800b0ea:	1d1a      	adds	r2, r3, #4
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	602a      	str	r2, [r5, #0]
 800b0f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e0a3      	b.n	800b244 <_printf_i+0x1f4>
 800b0fc:	6820      	ldr	r0, [r4, #0]
 800b0fe:	6829      	ldr	r1, [r5, #0]
 800b100:	0606      	lsls	r6, r0, #24
 800b102:	f101 0304 	add.w	r3, r1, #4
 800b106:	d50a      	bpl.n	800b11e <_printf_i+0xce>
 800b108:	680e      	ldr	r6, [r1, #0]
 800b10a:	602b      	str	r3, [r5, #0]
 800b10c:	2e00      	cmp	r6, #0
 800b10e:	da03      	bge.n	800b118 <_printf_i+0xc8>
 800b110:	232d      	movs	r3, #45	; 0x2d
 800b112:	4276      	negs	r6, r6
 800b114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b118:	485e      	ldr	r0, [pc, #376]	; (800b294 <_printf_i+0x244>)
 800b11a:	230a      	movs	r3, #10
 800b11c:	e019      	b.n	800b152 <_printf_i+0x102>
 800b11e:	680e      	ldr	r6, [r1, #0]
 800b120:	602b      	str	r3, [r5, #0]
 800b122:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b126:	bf18      	it	ne
 800b128:	b236      	sxthne	r6, r6
 800b12a:	e7ef      	b.n	800b10c <_printf_i+0xbc>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	6820      	ldr	r0, [r4, #0]
 800b130:	1d19      	adds	r1, r3, #4
 800b132:	6029      	str	r1, [r5, #0]
 800b134:	0601      	lsls	r1, r0, #24
 800b136:	d501      	bpl.n	800b13c <_printf_i+0xec>
 800b138:	681e      	ldr	r6, [r3, #0]
 800b13a:	e002      	b.n	800b142 <_printf_i+0xf2>
 800b13c:	0646      	lsls	r6, r0, #25
 800b13e:	d5fb      	bpl.n	800b138 <_printf_i+0xe8>
 800b140:	881e      	ldrh	r6, [r3, #0]
 800b142:	4854      	ldr	r0, [pc, #336]	; (800b294 <_printf_i+0x244>)
 800b144:	2f6f      	cmp	r7, #111	; 0x6f
 800b146:	bf0c      	ite	eq
 800b148:	2308      	moveq	r3, #8
 800b14a:	230a      	movne	r3, #10
 800b14c:	2100      	movs	r1, #0
 800b14e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b152:	6865      	ldr	r5, [r4, #4]
 800b154:	60a5      	str	r5, [r4, #8]
 800b156:	2d00      	cmp	r5, #0
 800b158:	bfa2      	ittt	ge
 800b15a:	6821      	ldrge	r1, [r4, #0]
 800b15c:	f021 0104 	bicge.w	r1, r1, #4
 800b160:	6021      	strge	r1, [r4, #0]
 800b162:	b90e      	cbnz	r6, 800b168 <_printf_i+0x118>
 800b164:	2d00      	cmp	r5, #0
 800b166:	d04d      	beq.n	800b204 <_printf_i+0x1b4>
 800b168:	4615      	mov	r5, r2
 800b16a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b16e:	fb03 6711 	mls	r7, r3, r1, r6
 800b172:	5dc7      	ldrb	r7, [r0, r7]
 800b174:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b178:	4637      	mov	r7, r6
 800b17a:	42bb      	cmp	r3, r7
 800b17c:	460e      	mov	r6, r1
 800b17e:	d9f4      	bls.n	800b16a <_printf_i+0x11a>
 800b180:	2b08      	cmp	r3, #8
 800b182:	d10b      	bne.n	800b19c <_printf_i+0x14c>
 800b184:	6823      	ldr	r3, [r4, #0]
 800b186:	07de      	lsls	r6, r3, #31
 800b188:	d508      	bpl.n	800b19c <_printf_i+0x14c>
 800b18a:	6923      	ldr	r3, [r4, #16]
 800b18c:	6861      	ldr	r1, [r4, #4]
 800b18e:	4299      	cmp	r1, r3
 800b190:	bfde      	ittt	le
 800b192:	2330      	movle	r3, #48	; 0x30
 800b194:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b198:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b19c:	1b52      	subs	r2, r2, r5
 800b19e:	6122      	str	r2, [r4, #16]
 800b1a0:	f8cd a000 	str.w	sl, [sp]
 800b1a4:	464b      	mov	r3, r9
 800b1a6:	aa03      	add	r2, sp, #12
 800b1a8:	4621      	mov	r1, r4
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	f7ff fee2 	bl	800af74 <_printf_common>
 800b1b0:	3001      	adds	r0, #1
 800b1b2:	d14c      	bne.n	800b24e <_printf_i+0x1fe>
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b8:	b004      	add	sp, #16
 800b1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1be:	4835      	ldr	r0, [pc, #212]	; (800b294 <_printf_i+0x244>)
 800b1c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b1c4:	6829      	ldr	r1, [r5, #0]
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b1cc:	6029      	str	r1, [r5, #0]
 800b1ce:	061d      	lsls	r5, r3, #24
 800b1d0:	d514      	bpl.n	800b1fc <_printf_i+0x1ac>
 800b1d2:	07df      	lsls	r7, r3, #31
 800b1d4:	bf44      	itt	mi
 800b1d6:	f043 0320 	orrmi.w	r3, r3, #32
 800b1da:	6023      	strmi	r3, [r4, #0]
 800b1dc:	b91e      	cbnz	r6, 800b1e6 <_printf_i+0x196>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	f023 0320 	bic.w	r3, r3, #32
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	2310      	movs	r3, #16
 800b1e8:	e7b0      	b.n	800b14c <_printf_i+0xfc>
 800b1ea:	6823      	ldr	r3, [r4, #0]
 800b1ec:	f043 0320 	orr.w	r3, r3, #32
 800b1f0:	6023      	str	r3, [r4, #0]
 800b1f2:	2378      	movs	r3, #120	; 0x78
 800b1f4:	4828      	ldr	r0, [pc, #160]	; (800b298 <_printf_i+0x248>)
 800b1f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1fa:	e7e3      	b.n	800b1c4 <_printf_i+0x174>
 800b1fc:	0659      	lsls	r1, r3, #25
 800b1fe:	bf48      	it	mi
 800b200:	b2b6      	uxthmi	r6, r6
 800b202:	e7e6      	b.n	800b1d2 <_printf_i+0x182>
 800b204:	4615      	mov	r5, r2
 800b206:	e7bb      	b.n	800b180 <_printf_i+0x130>
 800b208:	682b      	ldr	r3, [r5, #0]
 800b20a:	6826      	ldr	r6, [r4, #0]
 800b20c:	6961      	ldr	r1, [r4, #20]
 800b20e:	1d18      	adds	r0, r3, #4
 800b210:	6028      	str	r0, [r5, #0]
 800b212:	0635      	lsls	r5, r6, #24
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	d501      	bpl.n	800b21c <_printf_i+0x1cc>
 800b218:	6019      	str	r1, [r3, #0]
 800b21a:	e002      	b.n	800b222 <_printf_i+0x1d2>
 800b21c:	0670      	lsls	r0, r6, #25
 800b21e:	d5fb      	bpl.n	800b218 <_printf_i+0x1c8>
 800b220:	8019      	strh	r1, [r3, #0]
 800b222:	2300      	movs	r3, #0
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	4615      	mov	r5, r2
 800b228:	e7ba      	b.n	800b1a0 <_printf_i+0x150>
 800b22a:	682b      	ldr	r3, [r5, #0]
 800b22c:	1d1a      	adds	r2, r3, #4
 800b22e:	602a      	str	r2, [r5, #0]
 800b230:	681d      	ldr	r5, [r3, #0]
 800b232:	6862      	ldr	r2, [r4, #4]
 800b234:	2100      	movs	r1, #0
 800b236:	4628      	mov	r0, r5
 800b238:	f7f4 ffaa 	bl	8000190 <memchr>
 800b23c:	b108      	cbz	r0, 800b242 <_printf_i+0x1f2>
 800b23e:	1b40      	subs	r0, r0, r5
 800b240:	6060      	str	r0, [r4, #4]
 800b242:	6863      	ldr	r3, [r4, #4]
 800b244:	6123      	str	r3, [r4, #16]
 800b246:	2300      	movs	r3, #0
 800b248:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b24c:	e7a8      	b.n	800b1a0 <_printf_i+0x150>
 800b24e:	6923      	ldr	r3, [r4, #16]
 800b250:	462a      	mov	r2, r5
 800b252:	4649      	mov	r1, r9
 800b254:	4640      	mov	r0, r8
 800b256:	47d0      	blx	sl
 800b258:	3001      	adds	r0, #1
 800b25a:	d0ab      	beq.n	800b1b4 <_printf_i+0x164>
 800b25c:	6823      	ldr	r3, [r4, #0]
 800b25e:	079b      	lsls	r3, r3, #30
 800b260:	d413      	bmi.n	800b28a <_printf_i+0x23a>
 800b262:	68e0      	ldr	r0, [r4, #12]
 800b264:	9b03      	ldr	r3, [sp, #12]
 800b266:	4298      	cmp	r0, r3
 800b268:	bfb8      	it	lt
 800b26a:	4618      	movlt	r0, r3
 800b26c:	e7a4      	b.n	800b1b8 <_printf_i+0x168>
 800b26e:	2301      	movs	r3, #1
 800b270:	4632      	mov	r2, r6
 800b272:	4649      	mov	r1, r9
 800b274:	4640      	mov	r0, r8
 800b276:	47d0      	blx	sl
 800b278:	3001      	adds	r0, #1
 800b27a:	d09b      	beq.n	800b1b4 <_printf_i+0x164>
 800b27c:	3501      	adds	r5, #1
 800b27e:	68e3      	ldr	r3, [r4, #12]
 800b280:	9903      	ldr	r1, [sp, #12]
 800b282:	1a5b      	subs	r3, r3, r1
 800b284:	42ab      	cmp	r3, r5
 800b286:	dcf2      	bgt.n	800b26e <_printf_i+0x21e>
 800b288:	e7eb      	b.n	800b262 <_printf_i+0x212>
 800b28a:	2500      	movs	r5, #0
 800b28c:	f104 0619 	add.w	r6, r4, #25
 800b290:	e7f5      	b.n	800b27e <_printf_i+0x22e>
 800b292:	bf00      	nop
 800b294:	0800d8d1 	.word	0x0800d8d1
 800b298:	0800d8e2 	.word	0x0800d8e2

0800b29c <_putc_r>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	460d      	mov	r5, r1
 800b2a0:	4614      	mov	r4, r2
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	b118      	cbz	r0, 800b2ae <_putc_r+0x12>
 800b2a6:	6983      	ldr	r3, [r0, #24]
 800b2a8:	b90b      	cbnz	r3, 800b2ae <_putc_r+0x12>
 800b2aa:	f7ff fb23 	bl	800a8f4 <__sinit>
 800b2ae:	4b1c      	ldr	r3, [pc, #112]	; (800b320 <_putc_r+0x84>)
 800b2b0:	429c      	cmp	r4, r3
 800b2b2:	d124      	bne.n	800b2fe <_putc_r+0x62>
 800b2b4:	6874      	ldr	r4, [r6, #4]
 800b2b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2b8:	07d8      	lsls	r0, r3, #31
 800b2ba:	d405      	bmi.n	800b2c8 <_putc_r+0x2c>
 800b2bc:	89a3      	ldrh	r3, [r4, #12]
 800b2be:	0599      	lsls	r1, r3, #22
 800b2c0:	d402      	bmi.n	800b2c8 <_putc_r+0x2c>
 800b2c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2c4:	f7ff fbb4 	bl	800aa30 <__retarget_lock_acquire_recursive>
 800b2c8:	68a3      	ldr	r3, [r4, #8]
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	60a3      	str	r3, [r4, #8]
 800b2d0:	da05      	bge.n	800b2de <_putc_r+0x42>
 800b2d2:	69a2      	ldr	r2, [r4, #24]
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	db1c      	blt.n	800b312 <_putc_r+0x76>
 800b2d8:	b2eb      	uxtb	r3, r5
 800b2da:	2b0a      	cmp	r3, #10
 800b2dc:	d019      	beq.n	800b312 <_putc_r+0x76>
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	1c5a      	adds	r2, r3, #1
 800b2e2:	6022      	str	r2, [r4, #0]
 800b2e4:	701d      	strb	r5, [r3, #0]
 800b2e6:	b2ed      	uxtb	r5, r5
 800b2e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2ea:	07da      	lsls	r2, r3, #31
 800b2ec:	d405      	bmi.n	800b2fa <_putc_r+0x5e>
 800b2ee:	89a3      	ldrh	r3, [r4, #12]
 800b2f0:	059b      	lsls	r3, r3, #22
 800b2f2:	d402      	bmi.n	800b2fa <_putc_r+0x5e>
 800b2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2f6:	f7ff fb9c 	bl	800aa32 <__retarget_lock_release_recursive>
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	bd70      	pop	{r4, r5, r6, pc}
 800b2fe:	4b09      	ldr	r3, [pc, #36]	; (800b324 <_putc_r+0x88>)
 800b300:	429c      	cmp	r4, r3
 800b302:	d101      	bne.n	800b308 <_putc_r+0x6c>
 800b304:	68b4      	ldr	r4, [r6, #8]
 800b306:	e7d6      	b.n	800b2b6 <_putc_r+0x1a>
 800b308:	4b07      	ldr	r3, [pc, #28]	; (800b328 <_putc_r+0x8c>)
 800b30a:	429c      	cmp	r4, r3
 800b30c:	bf08      	it	eq
 800b30e:	68f4      	ldreq	r4, [r6, #12]
 800b310:	e7d1      	b.n	800b2b6 <_putc_r+0x1a>
 800b312:	4629      	mov	r1, r5
 800b314:	4622      	mov	r2, r4
 800b316:	4630      	mov	r0, r6
 800b318:	f7ff f912 	bl	800a540 <__swbuf_r>
 800b31c:	4605      	mov	r5, r0
 800b31e:	e7e3      	b.n	800b2e8 <_putc_r+0x4c>
 800b320:	0800d880 	.word	0x0800d880
 800b324:	0800d8a0 	.word	0x0800d8a0
 800b328:	0800d860 	.word	0x0800d860

0800b32c <_sbrk_r>:
 800b32c:	b538      	push	{r3, r4, r5, lr}
 800b32e:	4d06      	ldr	r5, [pc, #24]	; (800b348 <_sbrk_r+0x1c>)
 800b330:	2300      	movs	r3, #0
 800b332:	4604      	mov	r4, r0
 800b334:	4608      	mov	r0, r1
 800b336:	602b      	str	r3, [r5, #0]
 800b338:	f7f7 fc64 	bl	8002c04 <_sbrk>
 800b33c:	1c43      	adds	r3, r0, #1
 800b33e:	d102      	bne.n	800b346 <_sbrk_r+0x1a>
 800b340:	682b      	ldr	r3, [r5, #0]
 800b342:	b103      	cbz	r3, 800b346 <_sbrk_r+0x1a>
 800b344:	6023      	str	r3, [r4, #0]
 800b346:	bd38      	pop	{r3, r4, r5, pc}
 800b348:	20001030 	.word	0x20001030

0800b34c <__sread>:
 800b34c:	b510      	push	{r4, lr}
 800b34e:	460c      	mov	r4, r1
 800b350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b354:	f000 f8ac 	bl	800b4b0 <_read_r>
 800b358:	2800      	cmp	r0, #0
 800b35a:	bfab      	itete	ge
 800b35c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b35e:	89a3      	ldrhlt	r3, [r4, #12]
 800b360:	181b      	addge	r3, r3, r0
 800b362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b366:	bfac      	ite	ge
 800b368:	6563      	strge	r3, [r4, #84]	; 0x54
 800b36a:	81a3      	strhlt	r3, [r4, #12]
 800b36c:	bd10      	pop	{r4, pc}

0800b36e <__swrite>:
 800b36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b372:	461f      	mov	r7, r3
 800b374:	898b      	ldrh	r3, [r1, #12]
 800b376:	05db      	lsls	r3, r3, #23
 800b378:	4605      	mov	r5, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	4616      	mov	r6, r2
 800b37e:	d505      	bpl.n	800b38c <__swrite+0x1e>
 800b380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b384:	2302      	movs	r3, #2
 800b386:	2200      	movs	r2, #0
 800b388:	f000 f874 	bl	800b474 <_lseek_r>
 800b38c:	89a3      	ldrh	r3, [r4, #12]
 800b38e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b392:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b396:	81a3      	strh	r3, [r4, #12]
 800b398:	4632      	mov	r2, r6
 800b39a:	463b      	mov	r3, r7
 800b39c:	4628      	mov	r0, r5
 800b39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a2:	f000 b823 	b.w	800b3ec <_write_r>

0800b3a6 <__sseek>:
 800b3a6:	b510      	push	{r4, lr}
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ae:	f000 f861 	bl	800b474 <_lseek_r>
 800b3b2:	1c43      	adds	r3, r0, #1
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	bf15      	itete	ne
 800b3b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3c2:	81a3      	strheq	r3, [r4, #12]
 800b3c4:	bf18      	it	ne
 800b3c6:	81a3      	strhne	r3, [r4, #12]
 800b3c8:	bd10      	pop	{r4, pc}

0800b3ca <__sclose>:
 800b3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ce:	f000 b81f 	b.w	800b410 <_close_r>

0800b3d2 <strchr>:
 800b3d2:	b2c9      	uxtb	r1, r1
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3da:	b11a      	cbz	r2, 800b3e4 <strchr+0x12>
 800b3dc:	428a      	cmp	r2, r1
 800b3de:	d1f9      	bne.n	800b3d4 <strchr+0x2>
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	4770      	bx	lr
 800b3e4:	2900      	cmp	r1, #0
 800b3e6:	bf18      	it	ne
 800b3e8:	2300      	movne	r3, #0
 800b3ea:	e7f9      	b.n	800b3e0 <strchr+0xe>

0800b3ec <_write_r>:
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	4d07      	ldr	r5, [pc, #28]	; (800b40c <_write_r+0x20>)
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	4608      	mov	r0, r1
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	602a      	str	r2, [r5, #0]
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	f7f7 f838 	bl	8002470 <_write>
 800b400:	1c43      	adds	r3, r0, #1
 800b402:	d102      	bne.n	800b40a <_write_r+0x1e>
 800b404:	682b      	ldr	r3, [r5, #0]
 800b406:	b103      	cbz	r3, 800b40a <_write_r+0x1e>
 800b408:	6023      	str	r3, [r4, #0]
 800b40a:	bd38      	pop	{r3, r4, r5, pc}
 800b40c:	20001030 	.word	0x20001030

0800b410 <_close_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4d06      	ldr	r5, [pc, #24]	; (800b42c <_close_r+0x1c>)
 800b414:	2300      	movs	r3, #0
 800b416:	4604      	mov	r4, r0
 800b418:	4608      	mov	r0, r1
 800b41a:	602b      	str	r3, [r5, #0]
 800b41c:	f7f7 fbbd 	bl	8002b9a <_close>
 800b420:	1c43      	adds	r3, r0, #1
 800b422:	d102      	bne.n	800b42a <_close_r+0x1a>
 800b424:	682b      	ldr	r3, [r5, #0]
 800b426:	b103      	cbz	r3, 800b42a <_close_r+0x1a>
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	bd38      	pop	{r3, r4, r5, pc}
 800b42c:	20001030 	.word	0x20001030

0800b430 <_fstat_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	4d07      	ldr	r5, [pc, #28]	; (800b450 <_fstat_r+0x20>)
 800b434:	2300      	movs	r3, #0
 800b436:	4604      	mov	r4, r0
 800b438:	4608      	mov	r0, r1
 800b43a:	4611      	mov	r1, r2
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	f7f7 fbb8 	bl	8002bb2 <_fstat>
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	d102      	bne.n	800b44c <_fstat_r+0x1c>
 800b446:	682b      	ldr	r3, [r5, #0]
 800b448:	b103      	cbz	r3, 800b44c <_fstat_r+0x1c>
 800b44a:	6023      	str	r3, [r4, #0]
 800b44c:	bd38      	pop	{r3, r4, r5, pc}
 800b44e:	bf00      	nop
 800b450:	20001030 	.word	0x20001030

0800b454 <_isatty_r>:
 800b454:	b538      	push	{r3, r4, r5, lr}
 800b456:	4d06      	ldr	r5, [pc, #24]	; (800b470 <_isatty_r+0x1c>)
 800b458:	2300      	movs	r3, #0
 800b45a:	4604      	mov	r4, r0
 800b45c:	4608      	mov	r0, r1
 800b45e:	602b      	str	r3, [r5, #0]
 800b460:	f7f7 fbb7 	bl	8002bd2 <_isatty>
 800b464:	1c43      	adds	r3, r0, #1
 800b466:	d102      	bne.n	800b46e <_isatty_r+0x1a>
 800b468:	682b      	ldr	r3, [r5, #0]
 800b46a:	b103      	cbz	r3, 800b46e <_isatty_r+0x1a>
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	bd38      	pop	{r3, r4, r5, pc}
 800b470:	20001030 	.word	0x20001030

0800b474 <_lseek_r>:
 800b474:	b538      	push	{r3, r4, r5, lr}
 800b476:	4d07      	ldr	r5, [pc, #28]	; (800b494 <_lseek_r+0x20>)
 800b478:	4604      	mov	r4, r0
 800b47a:	4608      	mov	r0, r1
 800b47c:	4611      	mov	r1, r2
 800b47e:	2200      	movs	r2, #0
 800b480:	602a      	str	r2, [r5, #0]
 800b482:	461a      	mov	r2, r3
 800b484:	f7f7 fbb0 	bl	8002be8 <_lseek>
 800b488:	1c43      	adds	r3, r0, #1
 800b48a:	d102      	bne.n	800b492 <_lseek_r+0x1e>
 800b48c:	682b      	ldr	r3, [r5, #0]
 800b48e:	b103      	cbz	r3, 800b492 <_lseek_r+0x1e>
 800b490:	6023      	str	r3, [r4, #0]
 800b492:	bd38      	pop	{r3, r4, r5, pc}
 800b494:	20001030 	.word	0x20001030

0800b498 <__malloc_lock>:
 800b498:	4801      	ldr	r0, [pc, #4]	; (800b4a0 <__malloc_lock+0x8>)
 800b49a:	f7ff bac9 	b.w	800aa30 <__retarget_lock_acquire_recursive>
 800b49e:	bf00      	nop
 800b4a0:	20001024 	.word	0x20001024

0800b4a4 <__malloc_unlock>:
 800b4a4:	4801      	ldr	r0, [pc, #4]	; (800b4ac <__malloc_unlock+0x8>)
 800b4a6:	f7ff bac4 	b.w	800aa32 <__retarget_lock_release_recursive>
 800b4aa:	bf00      	nop
 800b4ac:	20001024 	.word	0x20001024

0800b4b0 <_read_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	4d07      	ldr	r5, [pc, #28]	; (800b4d0 <_read_r+0x20>)
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	4608      	mov	r0, r1
 800b4b8:	4611      	mov	r1, r2
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	602a      	str	r2, [r5, #0]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	f7f7 fb4e 	bl	8002b60 <_read>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	d102      	bne.n	800b4ce <_read_r+0x1e>
 800b4c8:	682b      	ldr	r3, [r5, #0]
 800b4ca:	b103      	cbz	r3, 800b4ce <_read_r+0x1e>
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	bd38      	pop	{r3, r4, r5, pc}
 800b4d0:	20001030 	.word	0x20001030

0800b4d4 <pow>:
 800b4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4d6:	ed2d 8b02 	vpush	{d8}
 800b4da:	eeb0 8a40 	vmov.f32	s16, s0
 800b4de:	eef0 8a60 	vmov.f32	s17, s1
 800b4e2:	ec55 4b11 	vmov	r4, r5, d1
 800b4e6:	f000 f867 	bl	800b5b8 <__ieee754_pow>
 800b4ea:	4622      	mov	r2, r4
 800b4ec:	462b      	mov	r3, r5
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	ec57 6b10 	vmov	r6, r7, d0
 800b4f6:	f7f5 faf1 	bl	8000adc <__aeabi_dcmpun>
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d13b      	bne.n	800b576 <pow+0xa2>
 800b4fe:	ec51 0b18 	vmov	r0, r1, d8
 800b502:	2200      	movs	r2, #0
 800b504:	2300      	movs	r3, #0
 800b506:	f7f5 fab7 	bl	8000a78 <__aeabi_dcmpeq>
 800b50a:	b1b8      	cbz	r0, 800b53c <pow+0x68>
 800b50c:	2200      	movs	r2, #0
 800b50e:	2300      	movs	r3, #0
 800b510:	4620      	mov	r0, r4
 800b512:	4629      	mov	r1, r5
 800b514:	f7f5 fab0 	bl	8000a78 <__aeabi_dcmpeq>
 800b518:	2800      	cmp	r0, #0
 800b51a:	d146      	bne.n	800b5aa <pow+0xd6>
 800b51c:	ec45 4b10 	vmov	d0, r4, r5
 800b520:	f000 fe63 	bl	800c1ea <finite>
 800b524:	b338      	cbz	r0, 800b576 <pow+0xa2>
 800b526:	2200      	movs	r2, #0
 800b528:	2300      	movs	r3, #0
 800b52a:	4620      	mov	r0, r4
 800b52c:	4629      	mov	r1, r5
 800b52e:	f7f5 faad 	bl	8000a8c <__aeabi_dcmplt>
 800b532:	b300      	cbz	r0, 800b576 <pow+0xa2>
 800b534:	f7fe ff0c 	bl	800a350 <__errno>
 800b538:	2322      	movs	r3, #34	; 0x22
 800b53a:	e01b      	b.n	800b574 <pow+0xa0>
 800b53c:	ec47 6b10 	vmov	d0, r6, r7
 800b540:	f000 fe53 	bl	800c1ea <finite>
 800b544:	b9e0      	cbnz	r0, 800b580 <pow+0xac>
 800b546:	eeb0 0a48 	vmov.f32	s0, s16
 800b54a:	eef0 0a68 	vmov.f32	s1, s17
 800b54e:	f000 fe4c 	bl	800c1ea <finite>
 800b552:	b1a8      	cbz	r0, 800b580 <pow+0xac>
 800b554:	ec45 4b10 	vmov	d0, r4, r5
 800b558:	f000 fe47 	bl	800c1ea <finite>
 800b55c:	b180      	cbz	r0, 800b580 <pow+0xac>
 800b55e:	4632      	mov	r2, r6
 800b560:	463b      	mov	r3, r7
 800b562:	4630      	mov	r0, r6
 800b564:	4639      	mov	r1, r7
 800b566:	f7f5 fab9 	bl	8000adc <__aeabi_dcmpun>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	d0e2      	beq.n	800b534 <pow+0x60>
 800b56e:	f7fe feef 	bl	800a350 <__errno>
 800b572:	2321      	movs	r3, #33	; 0x21
 800b574:	6003      	str	r3, [r0, #0]
 800b576:	ecbd 8b02 	vpop	{d8}
 800b57a:	ec47 6b10 	vmov	d0, r6, r7
 800b57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b580:	2200      	movs	r2, #0
 800b582:	2300      	movs	r3, #0
 800b584:	4630      	mov	r0, r6
 800b586:	4639      	mov	r1, r7
 800b588:	f7f5 fa76 	bl	8000a78 <__aeabi_dcmpeq>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d0f2      	beq.n	800b576 <pow+0xa2>
 800b590:	eeb0 0a48 	vmov.f32	s0, s16
 800b594:	eef0 0a68 	vmov.f32	s1, s17
 800b598:	f000 fe27 	bl	800c1ea <finite>
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d0ea      	beq.n	800b576 <pow+0xa2>
 800b5a0:	ec45 4b10 	vmov	d0, r4, r5
 800b5a4:	f000 fe21 	bl	800c1ea <finite>
 800b5a8:	e7c3      	b.n	800b532 <pow+0x5e>
 800b5aa:	4f01      	ldr	r7, [pc, #4]	; (800b5b0 <pow+0xdc>)
 800b5ac:	2600      	movs	r6, #0
 800b5ae:	e7e2      	b.n	800b576 <pow+0xa2>
 800b5b0:	3ff00000 	.word	0x3ff00000
 800b5b4:	00000000 	.word	0x00000000

0800b5b8 <__ieee754_pow>:
 800b5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5bc:	ed2d 8b06 	vpush	{d8-d10}
 800b5c0:	b089      	sub	sp, #36	; 0x24
 800b5c2:	ed8d 1b00 	vstr	d1, [sp]
 800b5c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b5ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b5ce:	ea58 0102 	orrs.w	r1, r8, r2
 800b5d2:	ec57 6b10 	vmov	r6, r7, d0
 800b5d6:	d115      	bne.n	800b604 <__ieee754_pow+0x4c>
 800b5d8:	19b3      	adds	r3, r6, r6
 800b5da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b5de:	4152      	adcs	r2, r2
 800b5e0:	4299      	cmp	r1, r3
 800b5e2:	4b89      	ldr	r3, [pc, #548]	; (800b808 <__ieee754_pow+0x250>)
 800b5e4:	4193      	sbcs	r3, r2
 800b5e6:	f080 84d2 	bcs.w	800bf8e <__ieee754_pow+0x9d6>
 800b5ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	f7f4 fe23 	bl	800023c <__adddf3>
 800b5f6:	ec41 0b10 	vmov	d0, r0, r1
 800b5fa:	b009      	add	sp, #36	; 0x24
 800b5fc:	ecbd 8b06 	vpop	{d8-d10}
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	4b81      	ldr	r3, [pc, #516]	; (800b80c <__ieee754_pow+0x254>)
 800b606:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b60a:	429c      	cmp	r4, r3
 800b60c:	ee10 aa10 	vmov	sl, s0
 800b610:	463d      	mov	r5, r7
 800b612:	dc06      	bgt.n	800b622 <__ieee754_pow+0x6a>
 800b614:	d101      	bne.n	800b61a <__ieee754_pow+0x62>
 800b616:	2e00      	cmp	r6, #0
 800b618:	d1e7      	bne.n	800b5ea <__ieee754_pow+0x32>
 800b61a:	4598      	cmp	r8, r3
 800b61c:	dc01      	bgt.n	800b622 <__ieee754_pow+0x6a>
 800b61e:	d10f      	bne.n	800b640 <__ieee754_pow+0x88>
 800b620:	b172      	cbz	r2, 800b640 <__ieee754_pow+0x88>
 800b622:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b626:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b62a:	ea55 050a 	orrs.w	r5, r5, sl
 800b62e:	d1dc      	bne.n	800b5ea <__ieee754_pow+0x32>
 800b630:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b634:	18db      	adds	r3, r3, r3
 800b636:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b63a:	4152      	adcs	r2, r2
 800b63c:	429d      	cmp	r5, r3
 800b63e:	e7d0      	b.n	800b5e2 <__ieee754_pow+0x2a>
 800b640:	2d00      	cmp	r5, #0
 800b642:	da3b      	bge.n	800b6bc <__ieee754_pow+0x104>
 800b644:	4b72      	ldr	r3, [pc, #456]	; (800b810 <__ieee754_pow+0x258>)
 800b646:	4598      	cmp	r8, r3
 800b648:	dc51      	bgt.n	800b6ee <__ieee754_pow+0x136>
 800b64a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b64e:	4598      	cmp	r8, r3
 800b650:	f340 84ac 	ble.w	800bfac <__ieee754_pow+0x9f4>
 800b654:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b658:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b65c:	2b14      	cmp	r3, #20
 800b65e:	dd0f      	ble.n	800b680 <__ieee754_pow+0xc8>
 800b660:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b664:	fa22 f103 	lsr.w	r1, r2, r3
 800b668:	fa01 f303 	lsl.w	r3, r1, r3
 800b66c:	4293      	cmp	r3, r2
 800b66e:	f040 849d 	bne.w	800bfac <__ieee754_pow+0x9f4>
 800b672:	f001 0101 	and.w	r1, r1, #1
 800b676:	f1c1 0302 	rsb	r3, r1, #2
 800b67a:	9304      	str	r3, [sp, #16]
 800b67c:	b182      	cbz	r2, 800b6a0 <__ieee754_pow+0xe8>
 800b67e:	e05f      	b.n	800b740 <__ieee754_pow+0x188>
 800b680:	2a00      	cmp	r2, #0
 800b682:	d15b      	bne.n	800b73c <__ieee754_pow+0x184>
 800b684:	f1c3 0314 	rsb	r3, r3, #20
 800b688:	fa48 f103 	asr.w	r1, r8, r3
 800b68c:	fa01 f303 	lsl.w	r3, r1, r3
 800b690:	4543      	cmp	r3, r8
 800b692:	f040 8488 	bne.w	800bfa6 <__ieee754_pow+0x9ee>
 800b696:	f001 0101 	and.w	r1, r1, #1
 800b69a:	f1c1 0302 	rsb	r3, r1, #2
 800b69e:	9304      	str	r3, [sp, #16]
 800b6a0:	4b5c      	ldr	r3, [pc, #368]	; (800b814 <__ieee754_pow+0x25c>)
 800b6a2:	4598      	cmp	r8, r3
 800b6a4:	d132      	bne.n	800b70c <__ieee754_pow+0x154>
 800b6a6:	f1b9 0f00 	cmp.w	r9, #0
 800b6aa:	f280 8478 	bge.w	800bf9e <__ieee754_pow+0x9e6>
 800b6ae:	4959      	ldr	r1, [pc, #356]	; (800b814 <__ieee754_pow+0x25c>)
 800b6b0:	4632      	mov	r2, r6
 800b6b2:	463b      	mov	r3, r7
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f7f5 f8a1 	bl	80007fc <__aeabi_ddiv>
 800b6ba:	e79c      	b.n	800b5f6 <__ieee754_pow+0x3e>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	9304      	str	r3, [sp, #16]
 800b6c0:	2a00      	cmp	r2, #0
 800b6c2:	d13d      	bne.n	800b740 <__ieee754_pow+0x188>
 800b6c4:	4b51      	ldr	r3, [pc, #324]	; (800b80c <__ieee754_pow+0x254>)
 800b6c6:	4598      	cmp	r8, r3
 800b6c8:	d1ea      	bne.n	800b6a0 <__ieee754_pow+0xe8>
 800b6ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b6ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b6d2:	ea53 030a 	orrs.w	r3, r3, sl
 800b6d6:	f000 845a 	beq.w	800bf8e <__ieee754_pow+0x9d6>
 800b6da:	4b4f      	ldr	r3, [pc, #316]	; (800b818 <__ieee754_pow+0x260>)
 800b6dc:	429c      	cmp	r4, r3
 800b6de:	dd08      	ble.n	800b6f2 <__ieee754_pow+0x13a>
 800b6e0:	f1b9 0f00 	cmp.w	r9, #0
 800b6e4:	f2c0 8457 	blt.w	800bf96 <__ieee754_pow+0x9de>
 800b6e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6ec:	e783      	b.n	800b5f6 <__ieee754_pow+0x3e>
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	e7e5      	b.n	800b6be <__ieee754_pow+0x106>
 800b6f2:	f1b9 0f00 	cmp.w	r9, #0
 800b6f6:	f04f 0000 	mov.w	r0, #0
 800b6fa:	f04f 0100 	mov.w	r1, #0
 800b6fe:	f6bf af7a 	bge.w	800b5f6 <__ieee754_pow+0x3e>
 800b702:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b706:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b70a:	e774      	b.n	800b5f6 <__ieee754_pow+0x3e>
 800b70c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b710:	d106      	bne.n	800b720 <__ieee754_pow+0x168>
 800b712:	4632      	mov	r2, r6
 800b714:	463b      	mov	r3, r7
 800b716:	4630      	mov	r0, r6
 800b718:	4639      	mov	r1, r7
 800b71a:	f7f4 ff45 	bl	80005a8 <__aeabi_dmul>
 800b71e:	e76a      	b.n	800b5f6 <__ieee754_pow+0x3e>
 800b720:	4b3e      	ldr	r3, [pc, #248]	; (800b81c <__ieee754_pow+0x264>)
 800b722:	4599      	cmp	r9, r3
 800b724:	d10c      	bne.n	800b740 <__ieee754_pow+0x188>
 800b726:	2d00      	cmp	r5, #0
 800b728:	db0a      	blt.n	800b740 <__ieee754_pow+0x188>
 800b72a:	ec47 6b10 	vmov	d0, r6, r7
 800b72e:	b009      	add	sp, #36	; 0x24
 800b730:	ecbd 8b06 	vpop	{d8-d10}
 800b734:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b738:	f000 bc6c 	b.w	800c014 <__ieee754_sqrt>
 800b73c:	2300      	movs	r3, #0
 800b73e:	9304      	str	r3, [sp, #16]
 800b740:	ec47 6b10 	vmov	d0, r6, r7
 800b744:	f000 fd48 	bl	800c1d8 <fabs>
 800b748:	ec51 0b10 	vmov	r0, r1, d0
 800b74c:	f1ba 0f00 	cmp.w	sl, #0
 800b750:	d129      	bne.n	800b7a6 <__ieee754_pow+0x1ee>
 800b752:	b124      	cbz	r4, 800b75e <__ieee754_pow+0x1a6>
 800b754:	4b2f      	ldr	r3, [pc, #188]	; (800b814 <__ieee754_pow+0x25c>)
 800b756:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d123      	bne.n	800b7a6 <__ieee754_pow+0x1ee>
 800b75e:	f1b9 0f00 	cmp.w	r9, #0
 800b762:	da05      	bge.n	800b770 <__ieee754_pow+0x1b8>
 800b764:	4602      	mov	r2, r0
 800b766:	460b      	mov	r3, r1
 800b768:	2000      	movs	r0, #0
 800b76a:	492a      	ldr	r1, [pc, #168]	; (800b814 <__ieee754_pow+0x25c>)
 800b76c:	f7f5 f846 	bl	80007fc <__aeabi_ddiv>
 800b770:	2d00      	cmp	r5, #0
 800b772:	f6bf af40 	bge.w	800b5f6 <__ieee754_pow+0x3e>
 800b776:	9b04      	ldr	r3, [sp, #16]
 800b778:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b77c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b780:	4323      	orrs	r3, r4
 800b782:	d108      	bne.n	800b796 <__ieee754_pow+0x1de>
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	4610      	mov	r0, r2
 800b78a:	4619      	mov	r1, r3
 800b78c:	f7f4 fd54 	bl	8000238 <__aeabi_dsub>
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	e78f      	b.n	800b6b6 <__ieee754_pow+0xfe>
 800b796:	9b04      	ldr	r3, [sp, #16]
 800b798:	2b01      	cmp	r3, #1
 800b79a:	f47f af2c 	bne.w	800b5f6 <__ieee754_pow+0x3e>
 800b79e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	e727      	b.n	800b5f6 <__ieee754_pow+0x3e>
 800b7a6:	0feb      	lsrs	r3, r5, #31
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	9306      	str	r3, [sp, #24]
 800b7ac:	9a06      	ldr	r2, [sp, #24]
 800b7ae:	9b04      	ldr	r3, [sp, #16]
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	d102      	bne.n	800b7ba <__ieee754_pow+0x202>
 800b7b4:	4632      	mov	r2, r6
 800b7b6:	463b      	mov	r3, r7
 800b7b8:	e7e6      	b.n	800b788 <__ieee754_pow+0x1d0>
 800b7ba:	4b19      	ldr	r3, [pc, #100]	; (800b820 <__ieee754_pow+0x268>)
 800b7bc:	4598      	cmp	r8, r3
 800b7be:	f340 80fb 	ble.w	800b9b8 <__ieee754_pow+0x400>
 800b7c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b7c6:	4598      	cmp	r8, r3
 800b7c8:	4b13      	ldr	r3, [pc, #76]	; (800b818 <__ieee754_pow+0x260>)
 800b7ca:	dd0c      	ble.n	800b7e6 <__ieee754_pow+0x22e>
 800b7cc:	429c      	cmp	r4, r3
 800b7ce:	dc0f      	bgt.n	800b7f0 <__ieee754_pow+0x238>
 800b7d0:	f1b9 0f00 	cmp.w	r9, #0
 800b7d4:	da0f      	bge.n	800b7f6 <__ieee754_pow+0x23e>
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	b009      	add	sp, #36	; 0x24
 800b7da:	ecbd 8b06 	vpop	{d8-d10}
 800b7de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e2:	f000 bcf0 	b.w	800c1c6 <__math_oflow>
 800b7e6:	429c      	cmp	r4, r3
 800b7e8:	dbf2      	blt.n	800b7d0 <__ieee754_pow+0x218>
 800b7ea:	4b0a      	ldr	r3, [pc, #40]	; (800b814 <__ieee754_pow+0x25c>)
 800b7ec:	429c      	cmp	r4, r3
 800b7ee:	dd19      	ble.n	800b824 <__ieee754_pow+0x26c>
 800b7f0:	f1b9 0f00 	cmp.w	r9, #0
 800b7f4:	dcef      	bgt.n	800b7d6 <__ieee754_pow+0x21e>
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	b009      	add	sp, #36	; 0x24
 800b7fa:	ecbd 8b06 	vpop	{d8-d10}
 800b7fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b802:	f000 bcd7 	b.w	800c1b4 <__math_uflow>
 800b806:	bf00      	nop
 800b808:	fff00000 	.word	0xfff00000
 800b80c:	7ff00000 	.word	0x7ff00000
 800b810:	433fffff 	.word	0x433fffff
 800b814:	3ff00000 	.word	0x3ff00000
 800b818:	3fefffff 	.word	0x3fefffff
 800b81c:	3fe00000 	.word	0x3fe00000
 800b820:	41e00000 	.word	0x41e00000
 800b824:	4b60      	ldr	r3, [pc, #384]	; (800b9a8 <__ieee754_pow+0x3f0>)
 800b826:	2200      	movs	r2, #0
 800b828:	f7f4 fd06 	bl	8000238 <__aeabi_dsub>
 800b82c:	a354      	add	r3, pc, #336	; (adr r3, 800b980 <__ieee754_pow+0x3c8>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	4604      	mov	r4, r0
 800b834:	460d      	mov	r5, r1
 800b836:	f7f4 feb7 	bl	80005a8 <__aeabi_dmul>
 800b83a:	a353      	add	r3, pc, #332	; (adr r3, 800b988 <__ieee754_pow+0x3d0>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	4606      	mov	r6, r0
 800b842:	460f      	mov	r7, r1
 800b844:	4620      	mov	r0, r4
 800b846:	4629      	mov	r1, r5
 800b848:	f7f4 feae 	bl	80005a8 <__aeabi_dmul>
 800b84c:	4b57      	ldr	r3, [pc, #348]	; (800b9ac <__ieee754_pow+0x3f4>)
 800b84e:	4682      	mov	sl, r0
 800b850:	468b      	mov	fp, r1
 800b852:	2200      	movs	r2, #0
 800b854:	4620      	mov	r0, r4
 800b856:	4629      	mov	r1, r5
 800b858:	f7f4 fea6 	bl	80005a8 <__aeabi_dmul>
 800b85c:	4602      	mov	r2, r0
 800b85e:	460b      	mov	r3, r1
 800b860:	a14b      	add	r1, pc, #300	; (adr r1, 800b990 <__ieee754_pow+0x3d8>)
 800b862:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b866:	f7f4 fce7 	bl	8000238 <__aeabi_dsub>
 800b86a:	4622      	mov	r2, r4
 800b86c:	462b      	mov	r3, r5
 800b86e:	f7f4 fe9b 	bl	80005a8 <__aeabi_dmul>
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	2000      	movs	r0, #0
 800b878:	494d      	ldr	r1, [pc, #308]	; (800b9b0 <__ieee754_pow+0x3f8>)
 800b87a:	f7f4 fcdd 	bl	8000238 <__aeabi_dsub>
 800b87e:	4622      	mov	r2, r4
 800b880:	4680      	mov	r8, r0
 800b882:	4689      	mov	r9, r1
 800b884:	462b      	mov	r3, r5
 800b886:	4620      	mov	r0, r4
 800b888:	4629      	mov	r1, r5
 800b88a:	f7f4 fe8d 	bl	80005a8 <__aeabi_dmul>
 800b88e:	4602      	mov	r2, r0
 800b890:	460b      	mov	r3, r1
 800b892:	4640      	mov	r0, r8
 800b894:	4649      	mov	r1, r9
 800b896:	f7f4 fe87 	bl	80005a8 <__aeabi_dmul>
 800b89a:	a33f      	add	r3, pc, #252	; (adr r3, 800b998 <__ieee754_pow+0x3e0>)
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	f7f4 fe82 	bl	80005a8 <__aeabi_dmul>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	4650      	mov	r0, sl
 800b8aa:	4659      	mov	r1, fp
 800b8ac:	f7f4 fcc4 	bl	8000238 <__aeabi_dsub>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4680      	mov	r8, r0
 800b8b6:	4689      	mov	r9, r1
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	f7f4 fcbe 	bl	800023c <__adddf3>
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	4632      	mov	r2, r6
 800b8c4:	463b      	mov	r3, r7
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	460d      	mov	r5, r1
 800b8ca:	f7f4 fcb5 	bl	8000238 <__aeabi_dsub>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4640      	mov	r0, r8
 800b8d4:	4649      	mov	r1, r9
 800b8d6:	f7f4 fcaf 	bl	8000238 <__aeabi_dsub>
 800b8da:	9b04      	ldr	r3, [sp, #16]
 800b8dc:	9a06      	ldr	r2, [sp, #24]
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	4682      	mov	sl, r0
 800b8e4:	468b      	mov	fp, r1
 800b8e6:	f040 81e7 	bne.w	800bcb8 <__ieee754_pow+0x700>
 800b8ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b9a0 <__ieee754_pow+0x3e8>
 800b8ee:	eeb0 8a47 	vmov.f32	s16, s14
 800b8f2:	eef0 8a67 	vmov.f32	s17, s15
 800b8f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b8fa:	2600      	movs	r6, #0
 800b8fc:	4632      	mov	r2, r6
 800b8fe:	463b      	mov	r3, r7
 800b900:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b904:	f7f4 fc98 	bl	8000238 <__aeabi_dsub>
 800b908:	4622      	mov	r2, r4
 800b90a:	462b      	mov	r3, r5
 800b90c:	f7f4 fe4c 	bl	80005a8 <__aeabi_dmul>
 800b910:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b914:	4680      	mov	r8, r0
 800b916:	4689      	mov	r9, r1
 800b918:	4650      	mov	r0, sl
 800b91a:	4659      	mov	r1, fp
 800b91c:	f7f4 fe44 	bl	80005a8 <__aeabi_dmul>
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	4640      	mov	r0, r8
 800b926:	4649      	mov	r1, r9
 800b928:	f7f4 fc88 	bl	800023c <__adddf3>
 800b92c:	4632      	mov	r2, r6
 800b92e:	463b      	mov	r3, r7
 800b930:	4680      	mov	r8, r0
 800b932:	4689      	mov	r9, r1
 800b934:	4620      	mov	r0, r4
 800b936:	4629      	mov	r1, r5
 800b938:	f7f4 fe36 	bl	80005a8 <__aeabi_dmul>
 800b93c:	460b      	mov	r3, r1
 800b93e:	4604      	mov	r4, r0
 800b940:	460d      	mov	r5, r1
 800b942:	4602      	mov	r2, r0
 800b944:	4649      	mov	r1, r9
 800b946:	4640      	mov	r0, r8
 800b948:	f7f4 fc78 	bl	800023c <__adddf3>
 800b94c:	4b19      	ldr	r3, [pc, #100]	; (800b9b4 <__ieee754_pow+0x3fc>)
 800b94e:	4299      	cmp	r1, r3
 800b950:	ec45 4b19 	vmov	d9, r4, r5
 800b954:	4606      	mov	r6, r0
 800b956:	460f      	mov	r7, r1
 800b958:	468b      	mov	fp, r1
 800b95a:	f340 82f1 	ble.w	800bf40 <__ieee754_pow+0x988>
 800b95e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b962:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b966:	4303      	orrs	r3, r0
 800b968:	f000 81e4 	beq.w	800bd34 <__ieee754_pow+0x77c>
 800b96c:	ec51 0b18 	vmov	r0, r1, d8
 800b970:	2200      	movs	r2, #0
 800b972:	2300      	movs	r3, #0
 800b974:	f7f5 f88a 	bl	8000a8c <__aeabi_dcmplt>
 800b978:	3800      	subs	r0, #0
 800b97a:	bf18      	it	ne
 800b97c:	2001      	movne	r0, #1
 800b97e:	e72b      	b.n	800b7d8 <__ieee754_pow+0x220>
 800b980:	60000000 	.word	0x60000000
 800b984:	3ff71547 	.word	0x3ff71547
 800b988:	f85ddf44 	.word	0xf85ddf44
 800b98c:	3e54ae0b 	.word	0x3e54ae0b
 800b990:	55555555 	.word	0x55555555
 800b994:	3fd55555 	.word	0x3fd55555
 800b998:	652b82fe 	.word	0x652b82fe
 800b99c:	3ff71547 	.word	0x3ff71547
 800b9a0:	00000000 	.word	0x00000000
 800b9a4:	bff00000 	.word	0xbff00000
 800b9a8:	3ff00000 	.word	0x3ff00000
 800b9ac:	3fd00000 	.word	0x3fd00000
 800b9b0:	3fe00000 	.word	0x3fe00000
 800b9b4:	408fffff 	.word	0x408fffff
 800b9b8:	4bd5      	ldr	r3, [pc, #852]	; (800bd10 <__ieee754_pow+0x758>)
 800b9ba:	402b      	ands	r3, r5
 800b9bc:	2200      	movs	r2, #0
 800b9be:	b92b      	cbnz	r3, 800b9cc <__ieee754_pow+0x414>
 800b9c0:	4bd4      	ldr	r3, [pc, #848]	; (800bd14 <__ieee754_pow+0x75c>)
 800b9c2:	f7f4 fdf1 	bl	80005a8 <__aeabi_dmul>
 800b9c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	1523      	asrs	r3, r4, #20
 800b9ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b9d2:	4413      	add	r3, r2
 800b9d4:	9305      	str	r3, [sp, #20]
 800b9d6:	4bd0      	ldr	r3, [pc, #832]	; (800bd18 <__ieee754_pow+0x760>)
 800b9d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b9dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b9e0:	429c      	cmp	r4, r3
 800b9e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b9e6:	dd08      	ble.n	800b9fa <__ieee754_pow+0x442>
 800b9e8:	4bcc      	ldr	r3, [pc, #816]	; (800bd1c <__ieee754_pow+0x764>)
 800b9ea:	429c      	cmp	r4, r3
 800b9ec:	f340 8162 	ble.w	800bcb4 <__ieee754_pow+0x6fc>
 800b9f0:	9b05      	ldr	r3, [sp, #20]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	9305      	str	r3, [sp, #20]
 800b9f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b9fa:	2400      	movs	r4, #0
 800b9fc:	00e3      	lsls	r3, r4, #3
 800b9fe:	9307      	str	r3, [sp, #28]
 800ba00:	4bc7      	ldr	r3, [pc, #796]	; (800bd20 <__ieee754_pow+0x768>)
 800ba02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba06:	ed93 7b00 	vldr	d7, [r3]
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	ec53 2b17 	vmov	r2, r3, d7
 800ba10:	eeb0 9a47 	vmov.f32	s18, s14
 800ba14:	eef0 9a67 	vmov.f32	s19, s15
 800ba18:	4682      	mov	sl, r0
 800ba1a:	f7f4 fc0d 	bl	8000238 <__aeabi_dsub>
 800ba1e:	4652      	mov	r2, sl
 800ba20:	4606      	mov	r6, r0
 800ba22:	460f      	mov	r7, r1
 800ba24:	462b      	mov	r3, r5
 800ba26:	ec51 0b19 	vmov	r0, r1, d9
 800ba2a:	f7f4 fc07 	bl	800023c <__adddf3>
 800ba2e:	4602      	mov	r2, r0
 800ba30:	460b      	mov	r3, r1
 800ba32:	2000      	movs	r0, #0
 800ba34:	49bb      	ldr	r1, [pc, #748]	; (800bd24 <__ieee754_pow+0x76c>)
 800ba36:	f7f4 fee1 	bl	80007fc <__aeabi_ddiv>
 800ba3a:	ec41 0b1a 	vmov	d10, r0, r1
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	4630      	mov	r0, r6
 800ba44:	4639      	mov	r1, r7
 800ba46:	f7f4 fdaf 	bl	80005a8 <__aeabi_dmul>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba50:	9302      	str	r3, [sp, #8]
 800ba52:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ba56:	46ab      	mov	fp, r5
 800ba58:	106d      	asrs	r5, r5, #1
 800ba5a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ba5e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ba62:	ec41 0b18 	vmov	d8, r0, r1
 800ba66:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	4640      	mov	r0, r8
 800ba6e:	4649      	mov	r1, r9
 800ba70:	4614      	mov	r4, r2
 800ba72:	461d      	mov	r5, r3
 800ba74:	f7f4 fd98 	bl	80005a8 <__aeabi_dmul>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	4639      	mov	r1, r7
 800ba80:	f7f4 fbda 	bl	8000238 <__aeabi_dsub>
 800ba84:	ec53 2b19 	vmov	r2, r3, d9
 800ba88:	4606      	mov	r6, r0
 800ba8a:	460f      	mov	r7, r1
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	4629      	mov	r1, r5
 800ba90:	f7f4 fbd2 	bl	8000238 <__aeabi_dsub>
 800ba94:	4602      	mov	r2, r0
 800ba96:	460b      	mov	r3, r1
 800ba98:	4650      	mov	r0, sl
 800ba9a:	4659      	mov	r1, fp
 800ba9c:	f7f4 fbcc 	bl	8000238 <__aeabi_dsub>
 800baa0:	4642      	mov	r2, r8
 800baa2:	464b      	mov	r3, r9
 800baa4:	f7f4 fd80 	bl	80005a8 <__aeabi_dmul>
 800baa8:	4602      	mov	r2, r0
 800baaa:	460b      	mov	r3, r1
 800baac:	4630      	mov	r0, r6
 800baae:	4639      	mov	r1, r7
 800bab0:	f7f4 fbc2 	bl	8000238 <__aeabi_dsub>
 800bab4:	ec53 2b1a 	vmov	r2, r3, d10
 800bab8:	f7f4 fd76 	bl	80005a8 <__aeabi_dmul>
 800babc:	ec53 2b18 	vmov	r2, r3, d8
 800bac0:	ec41 0b19 	vmov	d9, r0, r1
 800bac4:	ec51 0b18 	vmov	r0, r1, d8
 800bac8:	f7f4 fd6e 	bl	80005a8 <__aeabi_dmul>
 800bacc:	a37c      	add	r3, pc, #496	; (adr r3, 800bcc0 <__ieee754_pow+0x708>)
 800bace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad2:	4604      	mov	r4, r0
 800bad4:	460d      	mov	r5, r1
 800bad6:	f7f4 fd67 	bl	80005a8 <__aeabi_dmul>
 800bada:	a37b      	add	r3, pc, #492	; (adr r3, 800bcc8 <__ieee754_pow+0x710>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f7f4 fbac 	bl	800023c <__adddf3>
 800bae4:	4622      	mov	r2, r4
 800bae6:	462b      	mov	r3, r5
 800bae8:	f7f4 fd5e 	bl	80005a8 <__aeabi_dmul>
 800baec:	a378      	add	r3, pc, #480	; (adr r3, 800bcd0 <__ieee754_pow+0x718>)
 800baee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf2:	f7f4 fba3 	bl	800023c <__adddf3>
 800baf6:	4622      	mov	r2, r4
 800baf8:	462b      	mov	r3, r5
 800bafa:	f7f4 fd55 	bl	80005a8 <__aeabi_dmul>
 800bafe:	a376      	add	r3, pc, #472	; (adr r3, 800bcd8 <__ieee754_pow+0x720>)
 800bb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb04:	f7f4 fb9a 	bl	800023c <__adddf3>
 800bb08:	4622      	mov	r2, r4
 800bb0a:	462b      	mov	r3, r5
 800bb0c:	f7f4 fd4c 	bl	80005a8 <__aeabi_dmul>
 800bb10:	a373      	add	r3, pc, #460	; (adr r3, 800bce0 <__ieee754_pow+0x728>)
 800bb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb16:	f7f4 fb91 	bl	800023c <__adddf3>
 800bb1a:	4622      	mov	r2, r4
 800bb1c:	462b      	mov	r3, r5
 800bb1e:	f7f4 fd43 	bl	80005a8 <__aeabi_dmul>
 800bb22:	a371      	add	r3, pc, #452	; (adr r3, 800bce8 <__ieee754_pow+0x730>)
 800bb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb28:	f7f4 fb88 	bl	800023c <__adddf3>
 800bb2c:	4622      	mov	r2, r4
 800bb2e:	4606      	mov	r6, r0
 800bb30:	460f      	mov	r7, r1
 800bb32:	462b      	mov	r3, r5
 800bb34:	4620      	mov	r0, r4
 800bb36:	4629      	mov	r1, r5
 800bb38:	f7f4 fd36 	bl	80005a8 <__aeabi_dmul>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4630      	mov	r0, r6
 800bb42:	4639      	mov	r1, r7
 800bb44:	f7f4 fd30 	bl	80005a8 <__aeabi_dmul>
 800bb48:	4642      	mov	r2, r8
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	460d      	mov	r5, r1
 800bb4e:	464b      	mov	r3, r9
 800bb50:	ec51 0b18 	vmov	r0, r1, d8
 800bb54:	f7f4 fb72 	bl	800023c <__adddf3>
 800bb58:	ec53 2b19 	vmov	r2, r3, d9
 800bb5c:	f7f4 fd24 	bl	80005a8 <__aeabi_dmul>
 800bb60:	4622      	mov	r2, r4
 800bb62:	462b      	mov	r3, r5
 800bb64:	f7f4 fb6a 	bl	800023c <__adddf3>
 800bb68:	4642      	mov	r2, r8
 800bb6a:	4682      	mov	sl, r0
 800bb6c:	468b      	mov	fp, r1
 800bb6e:	464b      	mov	r3, r9
 800bb70:	4640      	mov	r0, r8
 800bb72:	4649      	mov	r1, r9
 800bb74:	f7f4 fd18 	bl	80005a8 <__aeabi_dmul>
 800bb78:	4b6b      	ldr	r3, [pc, #428]	; (800bd28 <__ieee754_pow+0x770>)
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	460f      	mov	r7, r1
 800bb80:	f7f4 fb5c 	bl	800023c <__adddf3>
 800bb84:	4652      	mov	r2, sl
 800bb86:	465b      	mov	r3, fp
 800bb88:	f7f4 fb58 	bl	800023c <__adddf3>
 800bb8c:	2000      	movs	r0, #0
 800bb8e:	4604      	mov	r4, r0
 800bb90:	460d      	mov	r5, r1
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4640      	mov	r0, r8
 800bb98:	4649      	mov	r1, r9
 800bb9a:	f7f4 fd05 	bl	80005a8 <__aeabi_dmul>
 800bb9e:	4b62      	ldr	r3, [pc, #392]	; (800bd28 <__ieee754_pow+0x770>)
 800bba0:	4680      	mov	r8, r0
 800bba2:	4689      	mov	r9, r1
 800bba4:	2200      	movs	r2, #0
 800bba6:	4620      	mov	r0, r4
 800bba8:	4629      	mov	r1, r5
 800bbaa:	f7f4 fb45 	bl	8000238 <__aeabi_dsub>
 800bbae:	4632      	mov	r2, r6
 800bbb0:	463b      	mov	r3, r7
 800bbb2:	f7f4 fb41 	bl	8000238 <__aeabi_dsub>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	460b      	mov	r3, r1
 800bbba:	4650      	mov	r0, sl
 800bbbc:	4659      	mov	r1, fp
 800bbbe:	f7f4 fb3b 	bl	8000238 <__aeabi_dsub>
 800bbc2:	ec53 2b18 	vmov	r2, r3, d8
 800bbc6:	f7f4 fcef 	bl	80005a8 <__aeabi_dmul>
 800bbca:	4622      	mov	r2, r4
 800bbcc:	4606      	mov	r6, r0
 800bbce:	460f      	mov	r7, r1
 800bbd0:	462b      	mov	r3, r5
 800bbd2:	ec51 0b19 	vmov	r0, r1, d9
 800bbd6:	f7f4 fce7 	bl	80005a8 <__aeabi_dmul>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	460b      	mov	r3, r1
 800bbde:	4630      	mov	r0, r6
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	f7f4 fb2b 	bl	800023c <__adddf3>
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	460f      	mov	r7, r1
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	4640      	mov	r0, r8
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	f7f4 fb23 	bl	800023c <__adddf3>
 800bbf6:	a33e      	add	r3, pc, #248	; (adr r3, 800bcf0 <__ieee754_pow+0x738>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	4604      	mov	r4, r0
 800bc00:	460d      	mov	r5, r1
 800bc02:	f7f4 fcd1 	bl	80005a8 <__aeabi_dmul>
 800bc06:	4642      	mov	r2, r8
 800bc08:	ec41 0b18 	vmov	d8, r0, r1
 800bc0c:	464b      	mov	r3, r9
 800bc0e:	4620      	mov	r0, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	f7f4 fb11 	bl	8000238 <__aeabi_dsub>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	4639      	mov	r1, r7
 800bc1e:	f7f4 fb0b 	bl	8000238 <__aeabi_dsub>
 800bc22:	a335      	add	r3, pc, #212	; (adr r3, 800bcf8 <__ieee754_pow+0x740>)
 800bc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc28:	f7f4 fcbe 	bl	80005a8 <__aeabi_dmul>
 800bc2c:	a334      	add	r3, pc, #208	; (adr r3, 800bd00 <__ieee754_pow+0x748>)
 800bc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc32:	4606      	mov	r6, r0
 800bc34:	460f      	mov	r7, r1
 800bc36:	4620      	mov	r0, r4
 800bc38:	4629      	mov	r1, r5
 800bc3a:	f7f4 fcb5 	bl	80005a8 <__aeabi_dmul>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
 800bc42:	4630      	mov	r0, r6
 800bc44:	4639      	mov	r1, r7
 800bc46:	f7f4 faf9 	bl	800023c <__adddf3>
 800bc4a:	9a07      	ldr	r2, [sp, #28]
 800bc4c:	4b37      	ldr	r3, [pc, #220]	; (800bd2c <__ieee754_pow+0x774>)
 800bc4e:	4413      	add	r3, r2
 800bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc54:	f7f4 faf2 	bl	800023c <__adddf3>
 800bc58:	4682      	mov	sl, r0
 800bc5a:	9805      	ldr	r0, [sp, #20]
 800bc5c:	468b      	mov	fp, r1
 800bc5e:	f7f4 fc39 	bl	80004d4 <__aeabi_i2d>
 800bc62:	9a07      	ldr	r2, [sp, #28]
 800bc64:	4b32      	ldr	r3, [pc, #200]	; (800bd30 <__ieee754_pow+0x778>)
 800bc66:	4413      	add	r3, r2
 800bc68:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	4652      	mov	r2, sl
 800bc72:	465b      	mov	r3, fp
 800bc74:	ec51 0b18 	vmov	r0, r1, d8
 800bc78:	f7f4 fae0 	bl	800023c <__adddf3>
 800bc7c:	4642      	mov	r2, r8
 800bc7e:	464b      	mov	r3, r9
 800bc80:	f7f4 fadc 	bl	800023c <__adddf3>
 800bc84:	4632      	mov	r2, r6
 800bc86:	463b      	mov	r3, r7
 800bc88:	f7f4 fad8 	bl	800023c <__adddf3>
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	4632      	mov	r2, r6
 800bc90:	463b      	mov	r3, r7
 800bc92:	4604      	mov	r4, r0
 800bc94:	460d      	mov	r5, r1
 800bc96:	f7f4 facf 	bl	8000238 <__aeabi_dsub>
 800bc9a:	4642      	mov	r2, r8
 800bc9c:	464b      	mov	r3, r9
 800bc9e:	f7f4 facb 	bl	8000238 <__aeabi_dsub>
 800bca2:	ec53 2b18 	vmov	r2, r3, d8
 800bca6:	f7f4 fac7 	bl	8000238 <__aeabi_dsub>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	460b      	mov	r3, r1
 800bcae:	4650      	mov	r0, sl
 800bcb0:	4659      	mov	r1, fp
 800bcb2:	e610      	b.n	800b8d6 <__ieee754_pow+0x31e>
 800bcb4:	2401      	movs	r4, #1
 800bcb6:	e6a1      	b.n	800b9fc <__ieee754_pow+0x444>
 800bcb8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bd08 <__ieee754_pow+0x750>
 800bcbc:	e617      	b.n	800b8ee <__ieee754_pow+0x336>
 800bcbe:	bf00      	nop
 800bcc0:	4a454eef 	.word	0x4a454eef
 800bcc4:	3fca7e28 	.word	0x3fca7e28
 800bcc8:	93c9db65 	.word	0x93c9db65
 800bccc:	3fcd864a 	.word	0x3fcd864a
 800bcd0:	a91d4101 	.word	0xa91d4101
 800bcd4:	3fd17460 	.word	0x3fd17460
 800bcd8:	518f264d 	.word	0x518f264d
 800bcdc:	3fd55555 	.word	0x3fd55555
 800bce0:	db6fabff 	.word	0xdb6fabff
 800bce4:	3fdb6db6 	.word	0x3fdb6db6
 800bce8:	33333303 	.word	0x33333303
 800bcec:	3fe33333 	.word	0x3fe33333
 800bcf0:	e0000000 	.word	0xe0000000
 800bcf4:	3feec709 	.word	0x3feec709
 800bcf8:	dc3a03fd 	.word	0xdc3a03fd
 800bcfc:	3feec709 	.word	0x3feec709
 800bd00:	145b01f5 	.word	0x145b01f5
 800bd04:	be3e2fe0 	.word	0xbe3e2fe0
 800bd08:	00000000 	.word	0x00000000
 800bd0c:	3ff00000 	.word	0x3ff00000
 800bd10:	7ff00000 	.word	0x7ff00000
 800bd14:	43400000 	.word	0x43400000
 800bd18:	0003988e 	.word	0x0003988e
 800bd1c:	000bb679 	.word	0x000bb679
 800bd20:	0800d8f8 	.word	0x0800d8f8
 800bd24:	3ff00000 	.word	0x3ff00000
 800bd28:	40080000 	.word	0x40080000
 800bd2c:	0800d918 	.word	0x0800d918
 800bd30:	0800d908 	.word	0x0800d908
 800bd34:	a3b5      	add	r3, pc, #724	; (adr r3, 800c00c <__ieee754_pow+0xa54>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	4649      	mov	r1, r9
 800bd3e:	f7f4 fa7d 	bl	800023c <__adddf3>
 800bd42:	4622      	mov	r2, r4
 800bd44:	ec41 0b1a 	vmov	d10, r0, r1
 800bd48:	462b      	mov	r3, r5
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	f7f4 fa73 	bl	8000238 <__aeabi_dsub>
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	ec51 0b1a 	vmov	r0, r1, d10
 800bd5a:	f7f4 feb5 	bl	8000ac8 <__aeabi_dcmpgt>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	f47f ae04 	bne.w	800b96c <__ieee754_pow+0x3b4>
 800bd64:	4aa4      	ldr	r2, [pc, #656]	; (800bff8 <__ieee754_pow+0xa40>)
 800bd66:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	f340 8108 	ble.w	800bf80 <__ieee754_pow+0x9c8>
 800bd70:	151b      	asrs	r3, r3, #20
 800bd72:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bd76:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bd7a:	fa4a f303 	asr.w	r3, sl, r3
 800bd7e:	445b      	add	r3, fp
 800bd80:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bd84:	4e9d      	ldr	r6, [pc, #628]	; (800bffc <__ieee754_pow+0xa44>)
 800bd86:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bd8a:	4116      	asrs	r6, r2
 800bd8c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bd90:	2000      	movs	r0, #0
 800bd92:	ea23 0106 	bic.w	r1, r3, r6
 800bd96:	f1c2 0214 	rsb	r2, r2, #20
 800bd9a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bd9e:	fa4a fa02 	asr.w	sl, sl, r2
 800bda2:	f1bb 0f00 	cmp.w	fp, #0
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4620      	mov	r0, r4
 800bdac:	4629      	mov	r1, r5
 800bdae:	bfb8      	it	lt
 800bdb0:	f1ca 0a00 	rsblt	sl, sl, #0
 800bdb4:	f7f4 fa40 	bl	8000238 <__aeabi_dsub>
 800bdb8:	ec41 0b19 	vmov	d9, r0, r1
 800bdbc:	4642      	mov	r2, r8
 800bdbe:	464b      	mov	r3, r9
 800bdc0:	ec51 0b19 	vmov	r0, r1, d9
 800bdc4:	f7f4 fa3a 	bl	800023c <__adddf3>
 800bdc8:	a37b      	add	r3, pc, #492	; (adr r3, 800bfb8 <__ieee754_pow+0xa00>)
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	2000      	movs	r0, #0
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	460d      	mov	r5, r1
 800bdd4:	f7f4 fbe8 	bl	80005a8 <__aeabi_dmul>
 800bdd8:	ec53 2b19 	vmov	r2, r3, d9
 800bddc:	4606      	mov	r6, r0
 800bdde:	460f      	mov	r7, r1
 800bde0:	4620      	mov	r0, r4
 800bde2:	4629      	mov	r1, r5
 800bde4:	f7f4 fa28 	bl	8000238 <__aeabi_dsub>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4640      	mov	r0, r8
 800bdee:	4649      	mov	r1, r9
 800bdf0:	f7f4 fa22 	bl	8000238 <__aeabi_dsub>
 800bdf4:	a372      	add	r3, pc, #456	; (adr r3, 800bfc0 <__ieee754_pow+0xa08>)
 800bdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfa:	f7f4 fbd5 	bl	80005a8 <__aeabi_dmul>
 800bdfe:	a372      	add	r3, pc, #456	; (adr r3, 800bfc8 <__ieee754_pow+0xa10>)
 800be00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be04:	4680      	mov	r8, r0
 800be06:	4689      	mov	r9, r1
 800be08:	4620      	mov	r0, r4
 800be0a:	4629      	mov	r1, r5
 800be0c:	f7f4 fbcc 	bl	80005a8 <__aeabi_dmul>
 800be10:	4602      	mov	r2, r0
 800be12:	460b      	mov	r3, r1
 800be14:	4640      	mov	r0, r8
 800be16:	4649      	mov	r1, r9
 800be18:	f7f4 fa10 	bl	800023c <__adddf3>
 800be1c:	4604      	mov	r4, r0
 800be1e:	460d      	mov	r5, r1
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4630      	mov	r0, r6
 800be26:	4639      	mov	r1, r7
 800be28:	f7f4 fa08 	bl	800023c <__adddf3>
 800be2c:	4632      	mov	r2, r6
 800be2e:	463b      	mov	r3, r7
 800be30:	4680      	mov	r8, r0
 800be32:	4689      	mov	r9, r1
 800be34:	f7f4 fa00 	bl	8000238 <__aeabi_dsub>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4620      	mov	r0, r4
 800be3e:	4629      	mov	r1, r5
 800be40:	f7f4 f9fa 	bl	8000238 <__aeabi_dsub>
 800be44:	4642      	mov	r2, r8
 800be46:	4606      	mov	r6, r0
 800be48:	460f      	mov	r7, r1
 800be4a:	464b      	mov	r3, r9
 800be4c:	4640      	mov	r0, r8
 800be4e:	4649      	mov	r1, r9
 800be50:	f7f4 fbaa 	bl	80005a8 <__aeabi_dmul>
 800be54:	a35e      	add	r3, pc, #376	; (adr r3, 800bfd0 <__ieee754_pow+0xa18>)
 800be56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5a:	4604      	mov	r4, r0
 800be5c:	460d      	mov	r5, r1
 800be5e:	f7f4 fba3 	bl	80005a8 <__aeabi_dmul>
 800be62:	a35d      	add	r3, pc, #372	; (adr r3, 800bfd8 <__ieee754_pow+0xa20>)
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f7f4 f9e6 	bl	8000238 <__aeabi_dsub>
 800be6c:	4622      	mov	r2, r4
 800be6e:	462b      	mov	r3, r5
 800be70:	f7f4 fb9a 	bl	80005a8 <__aeabi_dmul>
 800be74:	a35a      	add	r3, pc, #360	; (adr r3, 800bfe0 <__ieee754_pow+0xa28>)
 800be76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7a:	f7f4 f9df 	bl	800023c <__adddf3>
 800be7e:	4622      	mov	r2, r4
 800be80:	462b      	mov	r3, r5
 800be82:	f7f4 fb91 	bl	80005a8 <__aeabi_dmul>
 800be86:	a358      	add	r3, pc, #352	; (adr r3, 800bfe8 <__ieee754_pow+0xa30>)
 800be88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be8c:	f7f4 f9d4 	bl	8000238 <__aeabi_dsub>
 800be90:	4622      	mov	r2, r4
 800be92:	462b      	mov	r3, r5
 800be94:	f7f4 fb88 	bl	80005a8 <__aeabi_dmul>
 800be98:	a355      	add	r3, pc, #340	; (adr r3, 800bff0 <__ieee754_pow+0xa38>)
 800be9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9e:	f7f4 f9cd 	bl	800023c <__adddf3>
 800bea2:	4622      	mov	r2, r4
 800bea4:	462b      	mov	r3, r5
 800bea6:	f7f4 fb7f 	bl	80005a8 <__aeabi_dmul>
 800beaa:	4602      	mov	r2, r0
 800beac:	460b      	mov	r3, r1
 800beae:	4640      	mov	r0, r8
 800beb0:	4649      	mov	r1, r9
 800beb2:	f7f4 f9c1 	bl	8000238 <__aeabi_dsub>
 800beb6:	4604      	mov	r4, r0
 800beb8:	460d      	mov	r5, r1
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4640      	mov	r0, r8
 800bec0:	4649      	mov	r1, r9
 800bec2:	f7f4 fb71 	bl	80005a8 <__aeabi_dmul>
 800bec6:	2200      	movs	r2, #0
 800bec8:	ec41 0b19 	vmov	d9, r0, r1
 800becc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bed0:	4620      	mov	r0, r4
 800bed2:	4629      	mov	r1, r5
 800bed4:	f7f4 f9b0 	bl	8000238 <__aeabi_dsub>
 800bed8:	4602      	mov	r2, r0
 800beda:	460b      	mov	r3, r1
 800bedc:	ec51 0b19 	vmov	r0, r1, d9
 800bee0:	f7f4 fc8c 	bl	80007fc <__aeabi_ddiv>
 800bee4:	4632      	mov	r2, r6
 800bee6:	4604      	mov	r4, r0
 800bee8:	460d      	mov	r5, r1
 800beea:	463b      	mov	r3, r7
 800beec:	4640      	mov	r0, r8
 800beee:	4649      	mov	r1, r9
 800bef0:	f7f4 fb5a 	bl	80005a8 <__aeabi_dmul>
 800bef4:	4632      	mov	r2, r6
 800bef6:	463b      	mov	r3, r7
 800bef8:	f7f4 f9a0 	bl	800023c <__adddf3>
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	4620      	mov	r0, r4
 800bf02:	4629      	mov	r1, r5
 800bf04:	f7f4 f998 	bl	8000238 <__aeabi_dsub>
 800bf08:	4642      	mov	r2, r8
 800bf0a:	464b      	mov	r3, r9
 800bf0c:	f7f4 f994 	bl	8000238 <__aeabi_dsub>
 800bf10:	460b      	mov	r3, r1
 800bf12:	4602      	mov	r2, r0
 800bf14:	493a      	ldr	r1, [pc, #232]	; (800c000 <__ieee754_pow+0xa48>)
 800bf16:	2000      	movs	r0, #0
 800bf18:	f7f4 f98e 	bl	8000238 <__aeabi_dsub>
 800bf1c:	ec41 0b10 	vmov	d0, r0, r1
 800bf20:	ee10 3a90 	vmov	r3, s1
 800bf24:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bf28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf2c:	da2b      	bge.n	800bf86 <__ieee754_pow+0x9ce>
 800bf2e:	4650      	mov	r0, sl
 800bf30:	f000 f966 	bl	800c200 <scalbn>
 800bf34:	ec51 0b10 	vmov	r0, r1, d0
 800bf38:	ec53 2b18 	vmov	r2, r3, d8
 800bf3c:	f7ff bbed 	b.w	800b71a <__ieee754_pow+0x162>
 800bf40:	4b30      	ldr	r3, [pc, #192]	; (800c004 <__ieee754_pow+0xa4c>)
 800bf42:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bf46:	429e      	cmp	r6, r3
 800bf48:	f77f af0c 	ble.w	800bd64 <__ieee754_pow+0x7ac>
 800bf4c:	4b2e      	ldr	r3, [pc, #184]	; (800c008 <__ieee754_pow+0xa50>)
 800bf4e:	440b      	add	r3, r1
 800bf50:	4303      	orrs	r3, r0
 800bf52:	d009      	beq.n	800bf68 <__ieee754_pow+0x9b0>
 800bf54:	ec51 0b18 	vmov	r0, r1, d8
 800bf58:	2200      	movs	r2, #0
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	f7f4 fd96 	bl	8000a8c <__aeabi_dcmplt>
 800bf60:	3800      	subs	r0, #0
 800bf62:	bf18      	it	ne
 800bf64:	2001      	movne	r0, #1
 800bf66:	e447      	b.n	800b7f8 <__ieee754_pow+0x240>
 800bf68:	4622      	mov	r2, r4
 800bf6a:	462b      	mov	r3, r5
 800bf6c:	f7f4 f964 	bl	8000238 <__aeabi_dsub>
 800bf70:	4642      	mov	r2, r8
 800bf72:	464b      	mov	r3, r9
 800bf74:	f7f4 fd9e 	bl	8000ab4 <__aeabi_dcmpge>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	f43f aef3 	beq.w	800bd64 <__ieee754_pow+0x7ac>
 800bf7e:	e7e9      	b.n	800bf54 <__ieee754_pow+0x99c>
 800bf80:	f04f 0a00 	mov.w	sl, #0
 800bf84:	e71a      	b.n	800bdbc <__ieee754_pow+0x804>
 800bf86:	ec51 0b10 	vmov	r0, r1, d0
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	e7d4      	b.n	800bf38 <__ieee754_pow+0x980>
 800bf8e:	491c      	ldr	r1, [pc, #112]	; (800c000 <__ieee754_pow+0xa48>)
 800bf90:	2000      	movs	r0, #0
 800bf92:	f7ff bb30 	b.w	800b5f6 <__ieee754_pow+0x3e>
 800bf96:	2000      	movs	r0, #0
 800bf98:	2100      	movs	r1, #0
 800bf9a:	f7ff bb2c 	b.w	800b5f6 <__ieee754_pow+0x3e>
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	4639      	mov	r1, r7
 800bfa2:	f7ff bb28 	b.w	800b5f6 <__ieee754_pow+0x3e>
 800bfa6:	9204      	str	r2, [sp, #16]
 800bfa8:	f7ff bb7a 	b.w	800b6a0 <__ieee754_pow+0xe8>
 800bfac:	2300      	movs	r3, #0
 800bfae:	f7ff bb64 	b.w	800b67a <__ieee754_pow+0xc2>
 800bfb2:	bf00      	nop
 800bfb4:	f3af 8000 	nop.w
 800bfb8:	00000000 	.word	0x00000000
 800bfbc:	3fe62e43 	.word	0x3fe62e43
 800bfc0:	fefa39ef 	.word	0xfefa39ef
 800bfc4:	3fe62e42 	.word	0x3fe62e42
 800bfc8:	0ca86c39 	.word	0x0ca86c39
 800bfcc:	be205c61 	.word	0xbe205c61
 800bfd0:	72bea4d0 	.word	0x72bea4d0
 800bfd4:	3e663769 	.word	0x3e663769
 800bfd8:	c5d26bf1 	.word	0xc5d26bf1
 800bfdc:	3ebbbd41 	.word	0x3ebbbd41
 800bfe0:	af25de2c 	.word	0xaf25de2c
 800bfe4:	3f11566a 	.word	0x3f11566a
 800bfe8:	16bebd93 	.word	0x16bebd93
 800bfec:	3f66c16c 	.word	0x3f66c16c
 800bff0:	5555553e 	.word	0x5555553e
 800bff4:	3fc55555 	.word	0x3fc55555
 800bff8:	3fe00000 	.word	0x3fe00000
 800bffc:	000fffff 	.word	0x000fffff
 800c000:	3ff00000 	.word	0x3ff00000
 800c004:	4090cbff 	.word	0x4090cbff
 800c008:	3f6f3400 	.word	0x3f6f3400
 800c00c:	652b82fe 	.word	0x652b82fe
 800c010:	3c971547 	.word	0x3c971547

0800c014 <__ieee754_sqrt>:
 800c014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c018:	ec55 4b10 	vmov	r4, r5, d0
 800c01c:	4e55      	ldr	r6, [pc, #340]	; (800c174 <__ieee754_sqrt+0x160>)
 800c01e:	43ae      	bics	r6, r5
 800c020:	ee10 0a10 	vmov	r0, s0
 800c024:	ee10 3a10 	vmov	r3, s0
 800c028:	462a      	mov	r2, r5
 800c02a:	4629      	mov	r1, r5
 800c02c:	d110      	bne.n	800c050 <__ieee754_sqrt+0x3c>
 800c02e:	ee10 2a10 	vmov	r2, s0
 800c032:	462b      	mov	r3, r5
 800c034:	f7f4 fab8 	bl	80005a8 <__aeabi_dmul>
 800c038:	4602      	mov	r2, r0
 800c03a:	460b      	mov	r3, r1
 800c03c:	4620      	mov	r0, r4
 800c03e:	4629      	mov	r1, r5
 800c040:	f7f4 f8fc 	bl	800023c <__adddf3>
 800c044:	4604      	mov	r4, r0
 800c046:	460d      	mov	r5, r1
 800c048:	ec45 4b10 	vmov	d0, r4, r5
 800c04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c050:	2d00      	cmp	r5, #0
 800c052:	dc10      	bgt.n	800c076 <__ieee754_sqrt+0x62>
 800c054:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c058:	4330      	orrs	r0, r6
 800c05a:	d0f5      	beq.n	800c048 <__ieee754_sqrt+0x34>
 800c05c:	b15d      	cbz	r5, 800c076 <__ieee754_sqrt+0x62>
 800c05e:	ee10 2a10 	vmov	r2, s0
 800c062:	462b      	mov	r3, r5
 800c064:	ee10 0a10 	vmov	r0, s0
 800c068:	f7f4 f8e6 	bl	8000238 <__aeabi_dsub>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	f7f4 fbc4 	bl	80007fc <__aeabi_ddiv>
 800c074:	e7e6      	b.n	800c044 <__ieee754_sqrt+0x30>
 800c076:	1512      	asrs	r2, r2, #20
 800c078:	d074      	beq.n	800c164 <__ieee754_sqrt+0x150>
 800c07a:	07d4      	lsls	r4, r2, #31
 800c07c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c080:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c084:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c088:	bf5e      	ittt	pl
 800c08a:	0fda      	lsrpl	r2, r3, #31
 800c08c:	005b      	lslpl	r3, r3, #1
 800c08e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c092:	2400      	movs	r4, #0
 800c094:	0fda      	lsrs	r2, r3, #31
 800c096:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c09a:	107f      	asrs	r7, r7, #1
 800c09c:	005b      	lsls	r3, r3, #1
 800c09e:	2516      	movs	r5, #22
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c0a6:	1886      	adds	r6, r0, r2
 800c0a8:	428e      	cmp	r6, r1
 800c0aa:	bfde      	ittt	le
 800c0ac:	1b89      	suble	r1, r1, r6
 800c0ae:	18b0      	addle	r0, r6, r2
 800c0b0:	18a4      	addle	r4, r4, r2
 800c0b2:	0049      	lsls	r1, r1, #1
 800c0b4:	3d01      	subs	r5, #1
 800c0b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c0ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c0be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c0c2:	d1f0      	bne.n	800c0a6 <__ieee754_sqrt+0x92>
 800c0c4:	462a      	mov	r2, r5
 800c0c6:	f04f 0e20 	mov.w	lr, #32
 800c0ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c0ce:	4281      	cmp	r1, r0
 800c0d0:	eb06 0c05 	add.w	ip, r6, r5
 800c0d4:	dc02      	bgt.n	800c0dc <__ieee754_sqrt+0xc8>
 800c0d6:	d113      	bne.n	800c100 <__ieee754_sqrt+0xec>
 800c0d8:	459c      	cmp	ip, r3
 800c0da:	d811      	bhi.n	800c100 <__ieee754_sqrt+0xec>
 800c0dc:	f1bc 0f00 	cmp.w	ip, #0
 800c0e0:	eb0c 0506 	add.w	r5, ip, r6
 800c0e4:	da43      	bge.n	800c16e <__ieee754_sqrt+0x15a>
 800c0e6:	2d00      	cmp	r5, #0
 800c0e8:	db41      	blt.n	800c16e <__ieee754_sqrt+0x15a>
 800c0ea:	f100 0801 	add.w	r8, r0, #1
 800c0ee:	1a09      	subs	r1, r1, r0
 800c0f0:	459c      	cmp	ip, r3
 800c0f2:	bf88      	it	hi
 800c0f4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c0f8:	eba3 030c 	sub.w	r3, r3, ip
 800c0fc:	4432      	add	r2, r6
 800c0fe:	4640      	mov	r0, r8
 800c100:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c104:	f1be 0e01 	subs.w	lr, lr, #1
 800c108:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c10c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c110:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c114:	d1db      	bne.n	800c0ce <__ieee754_sqrt+0xba>
 800c116:	430b      	orrs	r3, r1
 800c118:	d006      	beq.n	800c128 <__ieee754_sqrt+0x114>
 800c11a:	1c50      	adds	r0, r2, #1
 800c11c:	bf13      	iteet	ne
 800c11e:	3201      	addne	r2, #1
 800c120:	3401      	addeq	r4, #1
 800c122:	4672      	moveq	r2, lr
 800c124:	f022 0201 	bicne.w	r2, r2, #1
 800c128:	1063      	asrs	r3, r4, #1
 800c12a:	0852      	lsrs	r2, r2, #1
 800c12c:	07e1      	lsls	r1, r4, #31
 800c12e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c132:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c136:	bf48      	it	mi
 800c138:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c13c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c140:	4614      	mov	r4, r2
 800c142:	e781      	b.n	800c048 <__ieee754_sqrt+0x34>
 800c144:	0ad9      	lsrs	r1, r3, #11
 800c146:	3815      	subs	r0, #21
 800c148:	055b      	lsls	r3, r3, #21
 800c14a:	2900      	cmp	r1, #0
 800c14c:	d0fa      	beq.n	800c144 <__ieee754_sqrt+0x130>
 800c14e:	02cd      	lsls	r5, r1, #11
 800c150:	d50a      	bpl.n	800c168 <__ieee754_sqrt+0x154>
 800c152:	f1c2 0420 	rsb	r4, r2, #32
 800c156:	fa23 f404 	lsr.w	r4, r3, r4
 800c15a:	1e55      	subs	r5, r2, #1
 800c15c:	4093      	lsls	r3, r2
 800c15e:	4321      	orrs	r1, r4
 800c160:	1b42      	subs	r2, r0, r5
 800c162:	e78a      	b.n	800c07a <__ieee754_sqrt+0x66>
 800c164:	4610      	mov	r0, r2
 800c166:	e7f0      	b.n	800c14a <__ieee754_sqrt+0x136>
 800c168:	0049      	lsls	r1, r1, #1
 800c16a:	3201      	adds	r2, #1
 800c16c:	e7ef      	b.n	800c14e <__ieee754_sqrt+0x13a>
 800c16e:	4680      	mov	r8, r0
 800c170:	e7bd      	b.n	800c0ee <__ieee754_sqrt+0xda>
 800c172:	bf00      	nop
 800c174:	7ff00000 	.word	0x7ff00000

0800c178 <with_errno>:
 800c178:	b570      	push	{r4, r5, r6, lr}
 800c17a:	4604      	mov	r4, r0
 800c17c:	460d      	mov	r5, r1
 800c17e:	4616      	mov	r6, r2
 800c180:	f7fe f8e6 	bl	800a350 <__errno>
 800c184:	4629      	mov	r1, r5
 800c186:	6006      	str	r6, [r0, #0]
 800c188:	4620      	mov	r0, r4
 800c18a:	bd70      	pop	{r4, r5, r6, pc}

0800c18c <xflow>:
 800c18c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c18e:	4614      	mov	r4, r2
 800c190:	461d      	mov	r5, r3
 800c192:	b108      	cbz	r0, 800c198 <xflow+0xc>
 800c194:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c198:	e9cd 2300 	strd	r2, r3, [sp]
 800c19c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	f7f4 fa00 	bl	80005a8 <__aeabi_dmul>
 800c1a8:	2222      	movs	r2, #34	; 0x22
 800c1aa:	b003      	add	sp, #12
 800c1ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1b0:	f7ff bfe2 	b.w	800c178 <with_errno>

0800c1b4 <__math_uflow>:
 800c1b4:	b508      	push	{r3, lr}
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c1bc:	f7ff ffe6 	bl	800c18c <xflow>
 800c1c0:	ec41 0b10 	vmov	d0, r0, r1
 800c1c4:	bd08      	pop	{r3, pc}

0800c1c6 <__math_oflow>:
 800c1c6:	b508      	push	{r3, lr}
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c1ce:	f7ff ffdd 	bl	800c18c <xflow>
 800c1d2:	ec41 0b10 	vmov	d0, r0, r1
 800c1d6:	bd08      	pop	{r3, pc}

0800c1d8 <fabs>:
 800c1d8:	ec51 0b10 	vmov	r0, r1, d0
 800c1dc:	ee10 2a10 	vmov	r2, s0
 800c1e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1e4:	ec43 2b10 	vmov	d0, r2, r3
 800c1e8:	4770      	bx	lr

0800c1ea <finite>:
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	ed8d 0b00 	vstr	d0, [sp]
 800c1f0:	9801      	ldr	r0, [sp, #4]
 800c1f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c1f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c1fa:	0fc0      	lsrs	r0, r0, #31
 800c1fc:	b002      	add	sp, #8
 800c1fe:	4770      	bx	lr

0800c200 <scalbn>:
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	ec55 4b10 	vmov	r4, r5, d0
 800c206:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c20a:	4606      	mov	r6, r0
 800c20c:	462b      	mov	r3, r5
 800c20e:	b99a      	cbnz	r2, 800c238 <scalbn+0x38>
 800c210:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c214:	4323      	orrs	r3, r4
 800c216:	d036      	beq.n	800c286 <scalbn+0x86>
 800c218:	4b39      	ldr	r3, [pc, #228]	; (800c300 <scalbn+0x100>)
 800c21a:	4629      	mov	r1, r5
 800c21c:	ee10 0a10 	vmov	r0, s0
 800c220:	2200      	movs	r2, #0
 800c222:	f7f4 f9c1 	bl	80005a8 <__aeabi_dmul>
 800c226:	4b37      	ldr	r3, [pc, #220]	; (800c304 <scalbn+0x104>)
 800c228:	429e      	cmp	r6, r3
 800c22a:	4604      	mov	r4, r0
 800c22c:	460d      	mov	r5, r1
 800c22e:	da10      	bge.n	800c252 <scalbn+0x52>
 800c230:	a32b      	add	r3, pc, #172	; (adr r3, 800c2e0 <scalbn+0xe0>)
 800c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c236:	e03a      	b.n	800c2ae <scalbn+0xae>
 800c238:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c23c:	428a      	cmp	r2, r1
 800c23e:	d10c      	bne.n	800c25a <scalbn+0x5a>
 800c240:	ee10 2a10 	vmov	r2, s0
 800c244:	4620      	mov	r0, r4
 800c246:	4629      	mov	r1, r5
 800c248:	f7f3 fff8 	bl	800023c <__adddf3>
 800c24c:	4604      	mov	r4, r0
 800c24e:	460d      	mov	r5, r1
 800c250:	e019      	b.n	800c286 <scalbn+0x86>
 800c252:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c256:	460b      	mov	r3, r1
 800c258:	3a36      	subs	r2, #54	; 0x36
 800c25a:	4432      	add	r2, r6
 800c25c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c260:	428a      	cmp	r2, r1
 800c262:	dd08      	ble.n	800c276 <scalbn+0x76>
 800c264:	2d00      	cmp	r5, #0
 800c266:	a120      	add	r1, pc, #128	; (adr r1, 800c2e8 <scalbn+0xe8>)
 800c268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c26c:	da1c      	bge.n	800c2a8 <scalbn+0xa8>
 800c26e:	a120      	add	r1, pc, #128	; (adr r1, 800c2f0 <scalbn+0xf0>)
 800c270:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c274:	e018      	b.n	800c2a8 <scalbn+0xa8>
 800c276:	2a00      	cmp	r2, #0
 800c278:	dd08      	ble.n	800c28c <scalbn+0x8c>
 800c27a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c27e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c282:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c286:	ec45 4b10 	vmov	d0, r4, r5
 800c28a:	bd70      	pop	{r4, r5, r6, pc}
 800c28c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c290:	da19      	bge.n	800c2c6 <scalbn+0xc6>
 800c292:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c296:	429e      	cmp	r6, r3
 800c298:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c29c:	dd0a      	ble.n	800c2b4 <scalbn+0xb4>
 800c29e:	a112      	add	r1, pc, #72	; (adr r1, 800c2e8 <scalbn+0xe8>)
 800c2a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e2      	bne.n	800c26e <scalbn+0x6e>
 800c2a8:	a30f      	add	r3, pc, #60	; (adr r3, 800c2e8 <scalbn+0xe8>)
 800c2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ae:	f7f4 f97b 	bl	80005a8 <__aeabi_dmul>
 800c2b2:	e7cb      	b.n	800c24c <scalbn+0x4c>
 800c2b4:	a10a      	add	r1, pc, #40	; (adr r1, 800c2e0 <scalbn+0xe0>)
 800c2b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d0b8      	beq.n	800c230 <scalbn+0x30>
 800c2be:	a10e      	add	r1, pc, #56	; (adr r1, 800c2f8 <scalbn+0xf8>)
 800c2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2c4:	e7b4      	b.n	800c230 <scalbn+0x30>
 800c2c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c2ca:	3236      	adds	r2, #54	; 0x36
 800c2cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c2d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	4b0c      	ldr	r3, [pc, #48]	; (800c308 <scalbn+0x108>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	e7e8      	b.n	800c2ae <scalbn+0xae>
 800c2dc:	f3af 8000 	nop.w
 800c2e0:	c2f8f359 	.word	0xc2f8f359
 800c2e4:	01a56e1f 	.word	0x01a56e1f
 800c2e8:	8800759c 	.word	0x8800759c
 800c2ec:	7e37e43c 	.word	0x7e37e43c
 800c2f0:	8800759c 	.word	0x8800759c
 800c2f4:	fe37e43c 	.word	0xfe37e43c
 800c2f8:	c2f8f359 	.word	0xc2f8f359
 800c2fc:	81a56e1f 	.word	0x81a56e1f
 800c300:	43500000 	.word	0x43500000
 800c304:	ffff3cb0 	.word	0xffff3cb0
 800c308:	3c900000 	.word	0x3c900000

0800c30c <_init>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	bf00      	nop
 800c310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c312:	bc08      	pop	{r3}
 800c314:	469e      	mov	lr, r3
 800c316:	4770      	bx	lr

0800c318 <_fini>:
 800c318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31a:	bf00      	nop
 800c31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c31e:	bc08      	pop	{r3}
 800c320:	469e      	mov	lr, r3
 800c322:	4770      	bx	lr
