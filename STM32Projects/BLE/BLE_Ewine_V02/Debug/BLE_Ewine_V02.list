
BLE_Ewine_V02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9f8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015cc  0800bb38  0800bb38  0001bb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d104  0800d104  0001d104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d10c  0800d10c  0001d10c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d110  0800d110  0001d110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000010c  20000008  0800d114  00020008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 MB_MEM2       00000883  20000114  0800d220  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000998  0800daa3  00020998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200009d0  0800dad8  000209d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000a18  200009e8  0800dae9  000209e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001400  0800dae9  00021400  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000209e1  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   00033584  00000000  00000000  00020a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006d46  00000000  00000000  00053f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002ba0  00000000  00000000  0005ace0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000028d0  00000000  00000000  0005d880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e770  00000000  00000000  00060150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00030311  00000000  00000000  0008e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ff6af  00000000  00000000  000bebd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001be280  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000bfc8  00000000  00000000  001be2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200009e8 	.word	0x200009e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800bb14 	.word	0x0800bb14

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200009ec 	.word	0x200009ec
 800017c:	0800bb14 	.word	0x0800bb14

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b974 	b.w	8000afc <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	4604      	mov	r4, r0
 8000834:	468e      	mov	lr, r1
 8000836:	2b00      	cmp	r3, #0
 8000838:	d14d      	bne.n	80008d6 <__udivmoddi4+0xaa>
 800083a:	428a      	cmp	r2, r1
 800083c:	4694      	mov	ip, r2
 800083e:	d969      	bls.n	8000914 <__udivmoddi4+0xe8>
 8000840:	fab2 f282 	clz	r2, r2
 8000844:	b152      	cbz	r2, 800085c <__udivmoddi4+0x30>
 8000846:	fa01 f302 	lsl.w	r3, r1, r2
 800084a:	f1c2 0120 	rsb	r1, r2, #32
 800084e:	fa20 f101 	lsr.w	r1, r0, r1
 8000852:	fa0c fc02 	lsl.w	ip, ip, r2
 8000856:	ea41 0e03 	orr.w	lr, r1, r3
 800085a:	4094      	lsls	r4, r2
 800085c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000860:	0c21      	lsrs	r1, r4, #16
 8000862:	fbbe f6f8 	udiv	r6, lr, r8
 8000866:	fa1f f78c 	uxth.w	r7, ip
 800086a:	fb08 e316 	mls	r3, r8, r6, lr
 800086e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000872:	fb06 f107 	mul.w	r1, r6, r7
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000882:	f080 811f 	bcs.w	8000ac4 <__udivmoddi4+0x298>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 811c 	bls.w	8000ac4 <__udivmoddi4+0x298>
 800088c:	3e02      	subs	r6, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a5b      	subs	r3, r3, r1
 8000892:	b2a4      	uxth	r4, r4
 8000894:	fbb3 f0f8 	udiv	r0, r3, r8
 8000898:	fb08 3310 	mls	r3, r8, r0, r3
 800089c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008a0:	fb00 f707 	mul.w	r7, r0, r7
 80008a4:	42a7      	cmp	r7, r4
 80008a6:	d90a      	bls.n	80008be <__udivmoddi4+0x92>
 80008a8:	eb1c 0404 	adds.w	r4, ip, r4
 80008ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80008b0:	f080 810a 	bcs.w	8000ac8 <__udivmoddi4+0x29c>
 80008b4:	42a7      	cmp	r7, r4
 80008b6:	f240 8107 	bls.w	8000ac8 <__udivmoddi4+0x29c>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008c2:	1be4      	subs	r4, r4, r7
 80008c4:	2600      	movs	r6, #0
 80008c6:	b11d      	cbz	r5, 80008d0 <__udivmoddi4+0xa4>
 80008c8:	40d4      	lsrs	r4, r2
 80008ca:	2300      	movs	r3, #0
 80008cc:	e9c5 4300 	strd	r4, r3, [r5]
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d909      	bls.n	80008ee <__udivmoddi4+0xc2>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	f000 80ef 	beq.w	8000abe <__udivmoddi4+0x292>
 80008e0:	2600      	movs	r6, #0
 80008e2:	e9c5 0100 	strd	r0, r1, [r5]
 80008e6:	4630      	mov	r0, r6
 80008e8:	4631      	mov	r1, r6
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	fab3 f683 	clz	r6, r3
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d14a      	bne.n	800098c <__udivmoddi4+0x160>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d302      	bcc.n	8000900 <__udivmoddi4+0xd4>
 80008fa:	4282      	cmp	r2, r0
 80008fc:	f200 80f9 	bhi.w	8000af2 <__udivmoddi4+0x2c6>
 8000900:	1a84      	subs	r4, r0, r2
 8000902:	eb61 0303 	sbc.w	r3, r1, r3
 8000906:	2001      	movs	r0, #1
 8000908:	469e      	mov	lr, r3
 800090a:	2d00      	cmp	r5, #0
 800090c:	d0e0      	beq.n	80008d0 <__udivmoddi4+0xa4>
 800090e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000912:	e7dd      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000914:	b902      	cbnz	r2, 8000918 <__udivmoddi4+0xec>
 8000916:	deff      	udf	#255	; 0xff
 8000918:	fab2 f282 	clz	r2, r2
 800091c:	2a00      	cmp	r2, #0
 800091e:	f040 8092 	bne.w	8000a46 <__udivmoddi4+0x21a>
 8000922:	eba1 010c 	sub.w	r1, r1, ip
 8000926:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092a:	fa1f fe8c 	uxth.w	lr, ip
 800092e:	2601      	movs	r6, #1
 8000930:	0c20      	lsrs	r0, r4, #16
 8000932:	fbb1 f3f7 	udiv	r3, r1, r7
 8000936:	fb07 1113 	mls	r1, r7, r3, r1
 800093a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093e:	fb0e f003 	mul.w	r0, lr, r3
 8000942:	4288      	cmp	r0, r1
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x12c>
 8000946:	eb1c 0101 	adds.w	r1, ip, r1
 800094a:	f103 38ff 	add.w	r8, r3, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x12a>
 8000950:	4288      	cmp	r0, r1
 8000952:	f200 80cb 	bhi.w	8000aec <__udivmoddi4+0x2c0>
 8000956:	4643      	mov	r3, r8
 8000958:	1a09      	subs	r1, r1, r0
 800095a:	b2a4      	uxth	r4, r4
 800095c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000960:	fb07 1110 	mls	r1, r7, r0, r1
 8000964:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000968:	fb0e fe00 	mul.w	lr, lr, r0
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x156>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d202      	bcs.n	8000980 <__udivmoddi4+0x154>
 800097a:	45a6      	cmp	lr, r4
 800097c:	f200 80bb 	bhi.w	8000af6 <__udivmoddi4+0x2ca>
 8000980:	4608      	mov	r0, r1
 8000982:	eba4 040e 	sub.w	r4, r4, lr
 8000986:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800098a:	e79c      	b.n	80008c6 <__udivmoddi4+0x9a>
 800098c:	f1c6 0720 	rsb	r7, r6, #32
 8000990:	40b3      	lsls	r3, r6
 8000992:	fa22 fc07 	lsr.w	ip, r2, r7
 8000996:	ea4c 0c03 	orr.w	ip, ip, r3
 800099a:	fa20 f407 	lsr.w	r4, r0, r7
 800099e:	fa01 f306 	lsl.w	r3, r1, r6
 80009a2:	431c      	orrs	r4, r3
 80009a4:	40f9      	lsrs	r1, r7
 80009a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009aa:	fa00 f306 	lsl.w	r3, r0, r6
 80009ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80009b2:	0c20      	lsrs	r0, r4, #16
 80009b4:	fa1f fe8c 	uxth.w	lr, ip
 80009b8:	fb09 1118 	mls	r1, r9, r8, r1
 80009bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c0:	fb08 f00e 	mul.w	r0, r8, lr
 80009c4:	4288      	cmp	r0, r1
 80009c6:	fa02 f206 	lsl.w	r2, r2, r6
 80009ca:	d90b      	bls.n	80009e4 <__udivmoddi4+0x1b8>
 80009cc:	eb1c 0101 	adds.w	r1, ip, r1
 80009d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009d4:	f080 8088 	bcs.w	8000ae8 <__udivmoddi4+0x2bc>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f240 8085 	bls.w	8000ae8 <__udivmoddi4+0x2bc>
 80009de:	f1a8 0802 	sub.w	r8, r8, #2
 80009e2:	4461      	add	r1, ip
 80009e4:	1a09      	subs	r1, r1, r0
 80009e6:	b2a4      	uxth	r4, r4
 80009e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80009ec:	fb09 1110 	mls	r1, r9, r0, r1
 80009f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80009f8:	458e      	cmp	lr, r1
 80009fa:	d908      	bls.n	8000a0e <__udivmoddi4+0x1e2>
 80009fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000a00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a04:	d26c      	bcs.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a06:	458e      	cmp	lr, r1
 8000a08:	d96a      	bls.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a0a:	3802      	subs	r0, #2
 8000a0c:	4461      	add	r1, ip
 8000a0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a12:	fba0 9402 	umull	r9, r4, r0, r2
 8000a16:	eba1 010e 	sub.w	r1, r1, lr
 8000a1a:	42a1      	cmp	r1, r4
 8000a1c:	46c8      	mov	r8, r9
 8000a1e:	46a6      	mov	lr, r4
 8000a20:	d356      	bcc.n	8000ad0 <__udivmoddi4+0x2a4>
 8000a22:	d053      	beq.n	8000acc <__udivmoddi4+0x2a0>
 8000a24:	b15d      	cbz	r5, 8000a3e <__udivmoddi4+0x212>
 8000a26:	ebb3 0208 	subs.w	r2, r3, r8
 8000a2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a32:	fa22 f306 	lsr.w	r3, r2, r6
 8000a36:	40f1      	lsrs	r1, r6
 8000a38:	431f      	orrs	r7, r3
 8000a3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a3e:	2600      	movs	r6, #0
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	f1c2 0320 	rsb	r3, r2, #32
 8000a4a:	40d8      	lsrs	r0, r3
 8000a4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a50:	fa21 f303 	lsr.w	r3, r1, r3
 8000a54:	4091      	lsls	r1, r2
 8000a56:	4301      	orrs	r1, r0
 8000a58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5c:	fa1f fe8c 	uxth.w	lr, ip
 8000a60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a64:	fb07 3610 	mls	r6, r7, r0, r3
 8000a68:	0c0b      	lsrs	r3, r1, #16
 8000a6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000a72:	429e      	cmp	r6, r3
 8000a74:	fa04 f402 	lsl.w	r4, r4, r2
 8000a78:	d908      	bls.n	8000a8c <__udivmoddi4+0x260>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a82:	d22f      	bcs.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a84:	429e      	cmp	r6, r3
 8000a86:	d92d      	bls.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	1b9b      	subs	r3, r3, r6
 8000a8e:	b289      	uxth	r1, r1
 8000a90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a94:	fb07 3316 	mls	r3, r7, r6, r3
 8000a98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x28a>
 8000aa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000aac:	d216      	bcs.n	8000adc <__udivmoddi4+0x2b0>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d914      	bls.n	8000adc <__udivmoddi4+0x2b0>
 8000ab2:	3e02      	subs	r6, #2
 8000ab4:	4461      	add	r1, ip
 8000ab6:	1ac9      	subs	r1, r1, r3
 8000ab8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000abc:	e738      	b.n	8000930 <__udivmoddi4+0x104>
 8000abe:	462e      	mov	r6, r5
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	e705      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000ac4:	4606      	mov	r6, r0
 8000ac6:	e6e3      	b.n	8000890 <__udivmoddi4+0x64>
 8000ac8:	4618      	mov	r0, r3
 8000aca:	e6f8      	b.n	80008be <__udivmoddi4+0x92>
 8000acc:	454b      	cmp	r3, r9
 8000ace:	d2a9      	bcs.n	8000a24 <__udivmoddi4+0x1f8>
 8000ad0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ad4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ad8:	3801      	subs	r0, #1
 8000ada:	e7a3      	b.n	8000a24 <__udivmoddi4+0x1f8>
 8000adc:	4646      	mov	r6, r8
 8000ade:	e7ea      	b.n	8000ab6 <__udivmoddi4+0x28a>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	e794      	b.n	8000a0e <__udivmoddi4+0x1e2>
 8000ae4:	4640      	mov	r0, r8
 8000ae6:	e7d1      	b.n	8000a8c <__udivmoddi4+0x260>
 8000ae8:	46d0      	mov	r8, sl
 8000aea:	e77b      	b.n	80009e4 <__udivmoddi4+0x1b8>
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4461      	add	r1, ip
 8000af0:	e732      	b.n	8000958 <__udivmoddi4+0x12c>
 8000af2:	4630      	mov	r0, r6
 8000af4:	e709      	b.n	800090a <__udivmoddi4+0xde>
 8000af6:	4464      	add	r4, ip
 8000af8:	3802      	subs	r0, #2
 8000afa:	e742      	b.n	8000982 <__udivmoddi4+0x156>

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <APPD_EnableCPU2+0x34>)
 8000b08:	1d3c      	adds	r4, r7, #4
 8000b0a:	461d      	mov	r5, r3
 8000b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b14:	c403      	stmia	r4!, {r0, r1}
 8000b16:	8022      	strh	r2, [r4, #0]
 8000b18:	3402      	adds	r4, #2
 8000b1a:	0c13      	lsrs	r3, r2, #16
 8000b1c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000b1e:	f007 fe25 	bl	800876c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4618      	mov	r0, r3
 8000b26:	f007 f8c0 	bl	8007caa <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000b2a:	bf00      	nop
}
 8000b2c:	3720      	adds	r7, #32
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bdb0      	pop	{r4, r5, r7, pc}
 8000b32:	bf00      	nop
 8000b34:	0800bb38 	.word	0x0800bb38

08000b38 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <LL_C2_PWR_SetPowerMode+0x28>)
 8000b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b46:	f023 0207 	bic.w	r2, r3, #7
 8000b4a:	4905      	ldr	r1, [pc, #20]	; (8000b60 <LL_C2_PWR_SetPowerMode+0x28>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	58000400 	.word	0x58000400

08000b64 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b6e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b72:	4905      	ldr	r1, [pc, #20]	; (8000b88 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	58000800 	.word	0x58000800

08000b8c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b98:	4a0a      	ldr	r2, [pc, #40]	; (8000bc4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000b9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ba6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	cafecafe 	.word	0xcafecafe

08000bc8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	608b      	str	r3, [r1, #8]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000c48:	d101      	bne.n	8000c4e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000c6e:	d101      	bne.n	8000c74 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca4:	68fb      	ldr	r3, [r7, #12]
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <LL_DBGMCU_GetDeviceID+0x18>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e0042000 	.word	0xe0042000

08000cd0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <LL_DBGMCU_GetRevisionID+0x18>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	0c1b      	lsrs	r3, r3, #16
 8000cda:	b29b      	uxth	r3, r3
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e0042000 	.word	0xe0042000

08000cec <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	605a      	str	r2, [r3, #4]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	605a      	str	r2, [r3, #4]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	041b      	lsls	r3, r3, #16
 8000d44:	431a      	orrs	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	615a      	str	r2, [r3, #20]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	695a      	ldr	r2, [r3, #20]
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	431a      	orrs	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	615a      	str	r2, [r3, #20]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	609a      	str	r2, [r3, #8]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	619a      	str	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	22ff      	movs	r2, #255	; 0xff
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	22ca      	movs	r2, #202	; 0xca
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2253      	movs	r2, #83	; 0x53
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f023 0207 	bic.w	r2, r3, #7
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <MX_APPE_Config+0x18>)
 8000e16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e1a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000e1c:	f000 f824 	bl	8000e68 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000e20:	f000 f864 	bl	8000eec <Config_HSE>

  return;
 8000e24:	bf00      	nop
}
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	58004000 	.word	0x58004000

08000e2c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000e30:	f000 f870 	bl	8000f14 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000e34:	f000 f888 	bl	8000f48 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000e38:	4903      	ldr	r1, [pc, #12]	; (8000e48 <MX_APPE_Init+0x1c>)
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 ff0a 	bl	8001c54 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000e40:	f000 f890 	bl	8000f64 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000e44:	bf00      	nop
}
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000ae0 	.word	0x20000ae0

08000e4c <Init_Smps>:

void Init_Smps(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000e50:	bf00      	nop
}
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <Init_Exti>:

void Init_Exti(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000e5e:	2050      	movs	r0, #80	; 0x50
 8000e60:	f7ff fe80 	bl	8000b64 <LL_EXTI_EnableIT_32_63>

  return;
 8000e64:	bf00      	nop
}
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000e6c:	f000 f804 	bl	8000e78 <Reset_BackupDomain>

  Reset_IPCC();
 8000e70:	f000 f81a 	bl	8000ea8 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000e74:	bf00      	nop
}
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000e7c:	f7ff feda 	bl	8000c34 <LL_RCC_IsActiveFlag_PINRST>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d00d      	beq.n	8000ea2 <Reset_BackupDomain+0x2a>
 8000e86:	f7ff fee8 	bl	8000c5a <LL_RCC_IsActiveFlag_SFTRST>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d108      	bne.n	8000ea2 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000e90:	f002 ffb4 	bl	8003dfc <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000e94:	f002 ffb2 	bl	8003dfc <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000e98:	f7ff feaa 	bl	8000bf0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000e9c:	f7ff feb9 	bl	8000c12 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
}
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000eac:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000eb0:	f7ff fee6 	bl	8000c80 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000eb4:	213f      	movs	r1, #63	; 0x3f
 8000eb6:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <Reset_IPCC+0x40>)
 8000eb8:	f7ff ff5e 	bl	8000d78 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000ebc:	213f      	movs	r1, #63	; 0x3f
 8000ebe:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <Reset_IPCC+0x40>)
 8000ec0:	f7ff ff68 	bl	8000d94 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000ec4:	213f      	movs	r1, #63	; 0x3f
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <Reset_IPCC+0x40>)
 8000ec8:	f7ff ff10 	bl	8000cec <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000ecc:	213f      	movs	r1, #63	; 0x3f
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <Reset_IPCC+0x40>)
 8000ed0:	f7ff ff2f 	bl	8000d32 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000ed4:	213f      	movs	r1, #63	; 0x3f
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <Reset_IPCC+0x40>)
 8000ed8:	f7ff ff1a 	bl	8000d10 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000edc:	213f      	movs	r1, #63	; 0x3f
 8000ede:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <Reset_IPCC+0x40>)
 8000ee0:	f7ff ff39 	bl	8000d56 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000ee4:	bf00      	nop
}
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	58000c00 	.word	0x58000c00

08000eec <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f007 fcee 	bl	80088d4 <OTP_Read>
 8000ef8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	799b      	ldrb	r3, [r3, #6]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe41 	bl	8000b8c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
}
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <System_Init>:

static void System_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  Init_Smps();
 8000f18:	f7ff ff98 	bl	8000e4c <Init_Smps>

  Init_Exti();
 8000f1c:	f7ff ff9d 	bl	8000e5a <Init_Exti>

  Init_Rtc();
 8000f20:	f000 f802 	bl	8000f28 <Init_Rtc>

  return;
 8000f24:	bf00      	nop
}
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000f2c:	4805      	ldr	r0, [pc, #20]	; (8000f44 <Init_Rtc+0x1c>)
 8000f2e:	f7ff ff4c 	bl	8000dca <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000f32:	2100      	movs	r1, #0
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <Init_Rtc+0x1c>)
 8000f36:	f7ff ff58 	bl	8000dea <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000f3a:	4802      	ldr	r0, [pc, #8]	; (8000f44 <Init_Rtc+0x1c>)
 8000f3c:	f7ff ff38 	bl	8000db0 <LL_RTC_EnableWriteProtection>

  return;
 8000f40:	bf00      	nop
}
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	40002800 	.word	0x40002800

08000f48 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000f4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f50:	f7ff fe3a 	bl	8000bc8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000f54:	f009 fa9c 	bl	800a490 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000f58:	2004      	movs	r0, #4
 8000f5a:	f7ff fded 	bl	8000b38 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000f5e:	bf00      	nop
}
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000f6a:	f007 fa49 	bl	8008400 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <appe_Tl_Init+0x50>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	2004      	movs	r0, #4
 8000f74:	f009 fbca 	bl	800a70c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <appe_Tl_Init+0x54>)
 8000f7a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <appe_Tl_Init+0x58>)
 8000f7e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	480e      	ldr	r0, [pc, #56]	; (8000fc0 <appe_Tl_Init+0x5c>)
 8000f86:	f007 f901 	bl	800818c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <appe_Tl_Init+0x60>)
 8000f8c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <appe_Tl_Init+0x64>)
 8000f90:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <appe_Tl_Init+0x68>)
 8000f94:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000f96:	f240 533c 	movw	r3, #1340	; 0x53c
 8000f9a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f007 fb6f 	bl	8008684 <TL_MM_Init>

  TL_Enable();
 8000fa6:	f007 fa25 	bl	80083f4 <TL_Enable>

  return;
 8000faa:	bf00      	nop
}
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	080081c5 	.word	0x080081c5
 8000fb8:	20000664 	.word	0x20000664
 8000fbc:	08000fd1 	.word	0x08000fd1
 8000fc0:	08000fe9 	.word	0x08000fe9
 8000fc4:	2000087c 	.word	0x2000087c
 8000fc8:	20000770 	.word	0x20000770
 8000fcc:	20000128 	.word	0x20000128

08000fd0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000fda:	bf00      	nop
}
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	330b      	adds	r3, #11
 8000ff6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001002:	2b07      	cmp	r3, #7
 8001004:	f200 80d0 	bhi.w	80011a8 <APPE_SysUserEvtRx+0x1c0>
 8001008:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <APPE_SysUserEvtRx+0x28>)
 800100a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100e:	bf00      	nop
 8001010:	08001031 	.word	0x08001031
 8001014:	080010c3 	.word	0x080010c3
 8001018:	080010e5 	.word	0x080010e5
 800101c:	080011a9 	.word	0x080011a9
 8001020:	08001129 	.word	0x08001129
 8001024:	0800114d 	.word	0x0800114d
 8001028:	08001169 	.word	0x08001169
 800102c:	0800118d 	.word	0x0800118d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4618      	mov	r0, r3
 8001036:	f006 fe65 	bl	8007d04 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800103a:	485e      	ldr	r0, [pc, #376]	; (80011b4 <APPE_SysUserEvtRx+0x1cc>)
 800103c:	f007 fc22 	bl	8008884 <DbgTraceGetFileName>
 8001040:	4601      	mov	r1, r0
 8001042:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001046:	4a5c      	ldr	r2, [pc, #368]	; (80011b8 <APPE_SysUserEvtRx+0x1d0>)
 8001048:	485c      	ldr	r0, [pc, #368]	; (80011bc <APPE_SysUserEvtRx+0x1d4>)
 800104a:	f009 fce1 	bl	800aa10 <iprintf>
 800104e:	7b3b      	ldrb	r3, [r7, #12]
 8001050:	4619      	mov	r1, r3
 8001052:	7b7b      	ldrb	r3, [r7, #13]
 8001054:	461a      	mov	r2, r3
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	4859      	ldr	r0, [pc, #356]	; (80011c0 <APPE_SysUserEvtRx+0x1d8>)
 800105a:	f009 fcd9 	bl	800aa10 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800105e:	4855      	ldr	r0, [pc, #340]	; (80011b4 <APPE_SysUserEvtRx+0x1cc>)
 8001060:	f007 fc10 	bl	8008884 <DbgTraceGetFileName>
 8001064:	4601      	mov	r1, r0
 8001066:	f240 1369 	movw	r3, #361	; 0x169
 800106a:	4a53      	ldr	r2, [pc, #332]	; (80011b8 <APPE_SysUserEvtRx+0x1d0>)
 800106c:	4853      	ldr	r0, [pc, #332]	; (80011bc <APPE_SysUserEvtRx+0x1d4>)
 800106e:	f009 fccf 	bl	800aa10 <iprintf>
 8001072:	7c3b      	ldrb	r3, [r7, #16]
 8001074:	4619      	mov	r1, r3
 8001076:	4853      	ldr	r0, [pc, #332]	; (80011c4 <APPE_SysUserEvtRx+0x1dc>)
 8001078:	f009 fcca 	bl	800aa10 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800107c:	484d      	ldr	r0, [pc, #308]	; (80011b4 <APPE_SysUserEvtRx+0x1cc>)
 800107e:	f007 fc01 	bl	8008884 <DbgTraceGetFileName>
 8001082:	4601      	mov	r1, r0
 8001084:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 8001088:	4a4b      	ldr	r2, [pc, #300]	; (80011b8 <APPE_SysUserEvtRx+0x1d0>)
 800108a:	484c      	ldr	r0, [pc, #304]	; (80011bc <APPE_SysUserEvtRx+0x1d4>)
 800108c:	f009 fcc0 	bl	800aa10 <iprintf>
 8001090:	7dbb      	ldrb	r3, [r7, #22]
 8001092:	4619      	mov	r1, r3
 8001094:	7dfb      	ldrb	r3, [r7, #23]
 8001096:	461a      	mov	r2, r3
 8001098:	7e3b      	ldrb	r3, [r7, #24]
 800109a:	484b      	ldr	r0, [pc, #300]	; (80011c8 <APPE_SysUserEvtRx+0x1e0>)
 800109c:	f009 fcb8 	bl	800aa10 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80010a0:	4844      	ldr	r0, [pc, #272]	; (80011b4 <APPE_SysUserEvtRx+0x1cc>)
 80010a2:	f007 fbef 	bl	8008884 <DbgTraceGetFileName>
 80010a6:	4601      	mov	r1, r0
 80010a8:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80010ac:	4a42      	ldr	r2, [pc, #264]	; (80011b8 <APPE_SysUserEvtRx+0x1d0>)
 80010ae:	4843      	ldr	r0, [pc, #268]	; (80011bc <APPE_SysUserEvtRx+0x1d4>)
 80010b0:	f009 fcae 	bl	800aa10 <iprintf>
 80010b4:	4845      	ldr	r0, [pc, #276]	; (80011cc <APPE_SysUserEvtRx+0x1e4>)
 80010b6:	f009 fcab 	bl	800aa10 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 f8e0 	bl	8001280 <APPE_SysEvtReadyProcessing>
    break;
 80010c0:	e073      	b.n	80011aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80010c2:	483c      	ldr	r0, [pc, #240]	; (80011b4 <APPE_SysUserEvtRx+0x1cc>)
 80010c4:	f007 fbde 	bl	8008884 <DbgTraceGetFileName>
 80010c8:	4601      	mov	r1, r0
 80010ca:	f240 1371 	movw	r3, #369	; 0x171
 80010ce:	4a3a      	ldr	r2, [pc, #232]	; (80011b8 <APPE_SysUserEvtRx+0x1d0>)
 80010d0:	483a      	ldr	r0, [pc, #232]	; (80011bc <APPE_SysUserEvtRx+0x1d4>)
 80010d2:	f009 fc9d 	bl	800aa10 <iprintf>
 80010d6:	483e      	ldr	r0, [pc, #248]	; (80011d0 <APPE_SysUserEvtRx+0x1e8>)
 80010d8:	f009 fc9a 	bl	800aa10 <iprintf>
    APPE_SysEvtError(pPayload);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f885 	bl	80011ec <APPE_SysEvtError>
    break;
 80010e2:	e062      	b.n	80011aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80010e4:	4833      	ldr	r0, [pc, #204]	; (80011b4 <APPE_SysUserEvtRx+0x1cc>)
 80010e6:	f007 fbcd 	bl	8008884 <DbgTraceGetFileName>
 80010ea:	4601      	mov	r1, r0
 80010ec:	f44f 73bb 	mov.w	r3, #374	; 0x176
 80010f0:	4a31      	ldr	r2, [pc, #196]	; (80011b8 <APPE_SysUserEvtRx+0x1d0>)
 80010f2:	4832      	ldr	r0, [pc, #200]	; (80011bc <APPE_SysUserEvtRx+0x1d4>)
 80010f4:	f009 fc8c 	bl	800aa10 <iprintf>
 80010f8:	4836      	ldr	r0, [pc, #216]	; (80011d4 <APPE_SysUserEvtRx+0x1ec>)
 80010fa:	f009 fd25 	bl	800ab48 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80010fe:	482d      	ldr	r0, [pc, #180]	; (80011b4 <APPE_SysUserEvtRx+0x1cc>)
 8001100:	f007 fbc0 	bl	8008884 <DbgTraceGetFileName>
 8001104:	4601      	mov	r1, r0
 8001106:	f240 1377 	movw	r3, #375	; 0x177
 800110a:	4a2b      	ldr	r2, [pc, #172]	; (80011b8 <APPE_SysUserEvtRx+0x1d0>)
 800110c:	482b      	ldr	r0, [pc, #172]	; (80011bc <APPE_SysUserEvtRx+0x1d4>)
 800110e:	f009 fc7f 	bl	800aa10 <iprintf>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3302      	adds	r3, #2
 8001116:	6819      	ldr	r1, [r3, #0]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	3302      	adds	r3, #2
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	461a      	mov	r2, r3
 8001120:	482d      	ldr	r0, [pc, #180]	; (80011d8 <APPE_SysUserEvtRx+0x1f0>)
 8001122:	f009 fc75 	bl	800aa10 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001126:	e040      	b.n	80011aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001128:	4822      	ldr	r0, [pc, #136]	; (80011b4 <APPE_SysUserEvtRx+0x1cc>)
 800112a:	f007 fbab 	bl	8008884 <DbgTraceGetFileName>
 800112e:	4601      	mov	r1, r0
 8001130:	f240 137d 	movw	r3, #381	; 0x17d
 8001134:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <APPE_SysUserEvtRx+0x1d0>)
 8001136:	4821      	ldr	r0, [pc, #132]	; (80011bc <APPE_SysUserEvtRx+0x1d4>)
 8001138:	f009 fc6a 	bl	800aa10 <iprintf>
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	3302      	adds	r3, #2
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	4825      	ldr	r0, [pc, #148]	; (80011dc <APPE_SysUserEvtRx+0x1f4>)
 8001146:	f009 fc63 	bl	800aa10 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800114a:	e02e      	b.n	80011aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800114c:	4819      	ldr	r0, [pc, #100]	; (80011b4 <APPE_SysUserEvtRx+0x1cc>)
 800114e:	f007 fb99 	bl	8008884 <DbgTraceGetFileName>
 8001152:	4601      	mov	r1, r0
 8001154:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <APPE_SysUserEvtRx+0x1d0>)
 800115a:	4818      	ldr	r0, [pc, #96]	; (80011bc <APPE_SysUserEvtRx+0x1d4>)
 800115c:	f009 fc58 	bl	800aa10 <iprintf>
 8001160:	481f      	ldr	r0, [pc, #124]	; (80011e0 <APPE_SysUserEvtRx+0x1f8>)
 8001162:	f009 fc55 	bl	800aa10 <iprintf>
    break;
 8001166:	e020      	b.n	80011aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001168:	4812      	ldr	r0, [pc, #72]	; (80011b4 <APPE_SysUserEvtRx+0x1cc>)
 800116a:	f007 fb8b 	bl	8008884 <DbgTraceGetFileName>
 800116e:	4601      	mov	r1, r0
 8001170:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8001174:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <APPE_SysUserEvtRx+0x1d0>)
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <APPE_SysUserEvtRx+0x1d4>)
 8001178:	f009 fc4a 	bl	800aa10 <iprintf>
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3302      	adds	r3, #2
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4619      	mov	r1, r3
 8001184:	4817      	ldr	r0, [pc, #92]	; (80011e4 <APPE_SysUserEvtRx+0x1fc>)
 8001186:	f009 fc43 	bl	800aa10 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 800118a:	e00e      	b.n	80011aa <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <APPE_SysUserEvtRx+0x1cc>)
 800118e:	f007 fb79 	bl	8008884 <DbgTraceGetFileName>
 8001192:	4601      	mov	r1, r0
 8001194:	f240 138b 	movw	r3, #395	; 0x18b
 8001198:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <APPE_SysUserEvtRx+0x1d0>)
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <APPE_SysUserEvtRx+0x1d4>)
 800119c:	f009 fc38 	bl	800aa10 <iprintf>
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <APPE_SysUserEvtRx+0x200>)
 80011a2:	f009 fc35 	bl	800aa10 <iprintf>
    break;
 80011a6:	e000      	b.n	80011aa <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80011a8:	bf00      	nop
  }

  return;
 80011aa:	bf00      	nop
}
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	0800bb54 	.word	0x0800bb54
 80011b8:	0800ceb8 	.word	0x0800ceb8
 80011bc:	0800bb6c 	.word	0x0800bb6c
 80011c0:	0800bb80 	.word	0x0800bb80
 80011c4:	0800bba4 	.word	0x0800bba4
 80011c8:	0800bbc0 	.word	0x0800bbc0
 80011cc:	0800bbd8 	.word	0x0800bbd8
 80011d0:	0800bbf8 	.word	0x0800bbf8
 80011d4:	0800bc1c 	.word	0x0800bc1c
 80011d8:	0800bc6c 	.word	0x0800bc6c
 80011dc:	0800bc94 	.word	0x0800bc94
 80011e0:	0800bcd0 	.word	0x0800bcd0
 80011e4:	0800bcf4 	.word	0x0800bcf4
 80011e8:	0800bd30 	.word	0x0800bd30

080011ec <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	330b      	adds	r3, #11
 80011fa:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3302      	adds	r3, #2
 8001200:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001202:	4819      	ldr	r0, [pc, #100]	; (8001268 <APPE_SysEvtError+0x7c>)
 8001204:	f007 fb3e 	bl	8008884 <DbgTraceGetFileName>
 8001208:	4601      	mov	r1, r0
 800120a:	f240 13a3 	movw	r3, #419	; 0x1a3
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <APPE_SysEvtError+0x80>)
 8001210:	4817      	ldr	r0, [pc, #92]	; (8001270 <APPE_SysEvtError+0x84>)
 8001212:	f009 fbfd 	bl	800aa10 <iprintf>
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	4815      	ldr	r0, [pc, #84]	; (8001274 <APPE_SysEvtError+0x88>)
 800121e:	f009 fbf7 	bl	800aa10 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10d      	bne.n	8001246 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800122a:	480f      	ldr	r0, [pc, #60]	; (8001268 <APPE_SysEvtError+0x7c>)
 800122c:	f007 fb2a 	bl	8008884 <DbgTraceGetFileName>
 8001230:	4601      	mov	r1, r0
 8001232:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8001236:	4a0d      	ldr	r2, [pc, #52]	; (800126c <APPE_SysEvtError+0x80>)
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <APPE_SysEvtError+0x84>)
 800123a:	f009 fbe9 	bl	800aa10 <iprintf>
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <APPE_SysEvtError+0x8c>)
 8001240:	f009 fc82 	bl	800ab48 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001244:	e00d      	b.n	8001262 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001246:	4808      	ldr	r0, [pc, #32]	; (8001268 <APPE_SysEvtError+0x7c>)
 8001248:	f007 fb1c 	bl	8008884 <DbgTraceGetFileName>
 800124c:	4601      	mov	r1, r0
 800124e:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
 8001252:	4a06      	ldr	r2, [pc, #24]	; (800126c <APPE_SysEvtError+0x80>)
 8001254:	4806      	ldr	r0, [pc, #24]	; (8001270 <APPE_SysEvtError+0x84>)
 8001256:	f009 fbdb 	bl	800aa10 <iprintf>
 800125a:	4808      	ldr	r0, [pc, #32]	; (800127c <APPE_SysEvtError+0x90>)
 800125c:	f009 fc74 	bl	800ab48 <puts>
  return;
 8001260:	bf00      	nop
}
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800bb54 	.word	0x0800bb54
 800126c:	0800cecc 	.word	0x0800cecc
 8001270:	0800bb6c 	.word	0x0800bb6c
 8001274:	0800bd54 	.word	0x0800bd54
 8001278:	0800bd84 	.word	0x0800bd84
 800127c:	0800bdc0 	.word	0x0800bdc0

08001280 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 800129a:	2300      	movs	r3, #0
 800129c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	330b      	adds	r3, #11
 80012a4:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3302      	adds	r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d146      	bne.n	8001342 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80012b4:	4836      	ldr	r0, [pc, #216]	; (8001390 <APPE_SysEvtReadyProcessing+0x110>)
 80012b6:	f007 fae5 	bl	8008884 <DbgTraceGetFileName>
 80012ba:	4601      	mov	r1, r0
 80012bc:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80012c0:	4a34      	ldr	r2, [pc, #208]	; (8001394 <APPE_SysEvtReadyProcessing+0x114>)
 80012c2:	4835      	ldr	r0, [pc, #212]	; (8001398 <APPE_SysEvtReadyProcessing+0x118>)
 80012c4:	f009 fba4 	bl	800aa10 <iprintf>
 80012c8:	4834      	ldr	r0, [pc, #208]	; (800139c <APPE_SysEvtReadyProcessing+0x11c>)
 80012ca:	f009 fc3d 	bl	800ab48 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80012ce:	f7ff fc17 	bl	8000b00 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80012d2:	230f      	movs	r3, #15
 80012d4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80012d6:	237f      	movs	r3, #127	; 0x7f
 80012d8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80012da:	f7ff fcf9 	bl	8000cd0 <LL_DBGMCU_GetRevisionID>
 80012de:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80012e0:	482b      	ldr	r0, [pc, #172]	; (8001390 <APPE_SysEvtReadyProcessing+0x110>)
 80012e2:	f007 facf 	bl	8008884 <DbgTraceGetFileName>
 80012e6:	4601      	mov	r1, r0
 80012e8:	f44f 73ed 	mov.w	r3, #474	; 0x1da
 80012ec:	4a29      	ldr	r2, [pc, #164]	; (8001394 <APPE_SysEvtReadyProcessing+0x114>)
 80012ee:	482a      	ldr	r0, [pc, #168]	; (8001398 <APPE_SysEvtReadyProcessing+0x118>)
 80012f0:	f009 fb8e 	bl	800aa10 <iprintf>
 80012f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012f6:	482a      	ldr	r0, [pc, #168]	; (80013a0 <APPE_SysEvtReadyProcessing+0x120>)
 80012f8:	f009 fb8a 	bl	800aa10 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	b29b      	uxth	r3, r3
 8001300:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001302:	f7ff fcd7 	bl	8000cb4 <LL_DBGMCU_GetDeviceID>
 8001306:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001308:	4821      	ldr	r0, [pc, #132]	; (8001390 <APPE_SysEvtReadyProcessing+0x110>)
 800130a:	f007 fabb 	bl	8008884 <DbgTraceGetFileName>
 800130e:	4601      	mov	r1, r0
 8001310:	f240 13df 	movw	r3, #479	; 0x1df
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <APPE_SysEvtReadyProcessing+0x114>)
 8001316:	4820      	ldr	r0, [pc, #128]	; (8001398 <APPE_SysEvtReadyProcessing+0x118>)
 8001318:	f009 fb7a 	bl	800aa10 <iprintf>
 800131c:	6a39      	ldr	r1, [r7, #32]
 800131e:	4821      	ldr	r0, [pc, #132]	; (80013a4 <APPE_SysEvtReadyProcessing+0x124>)
 8001320:	f009 fb76 	bl	800aa10 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	b29b      	uxth	r3, r3
 8001328:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800132a:	f107 0308 	add.w	r3, r7, #8
 800132e:	4618      	mov	r0, r3
 8001330:	f006 fcd2 	bl	8007cd8 <SHCI_C2_Config>

    APP_BLE_Init();
 8001334:	f007 fbd8 	bl	8008ae8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001338:	2100      	movs	r1, #0
 800133a:	2001      	movs	r0, #1
 800133c:	f009 f8ba 	bl	800a4b4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001340:	e022      	b.n	8001388 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d110      	bne.n	800136c <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800134a:	4811      	ldr	r0, [pc, #68]	; (8001390 <APPE_SysEvtReadyProcessing+0x110>)
 800134c:	f007 fa9a 	bl	8008884 <DbgTraceGetFileName>
 8001350:	4601      	mov	r1, r0
 8001352:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <APPE_SysEvtReadyProcessing+0x114>)
 8001358:	480f      	ldr	r0, [pc, #60]	; (8001398 <APPE_SysEvtReadyProcessing+0x118>)
 800135a:	f009 fb59 	bl	800aa10 <iprintf>
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <APPE_SysEvtReadyProcessing+0x128>)
 8001360:	f009 fb56 	bl	800aa10 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
  return;
 800136a:	e00d      	b.n	8001388 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <APPE_SysEvtReadyProcessing+0x110>)
 800136e:	f007 fa89 	bl	8008884 <DbgTraceGetFileName>
 8001372:	4601      	mov	r1, r0
 8001374:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <APPE_SysEvtReadyProcessing+0x114>)
 800137a:	4807      	ldr	r0, [pc, #28]	; (8001398 <APPE_SysEvtReadyProcessing+0x118>)
 800137c:	f009 fb48 	bl	800aa10 <iprintf>
 8001380:	480a      	ldr	r0, [pc, #40]	; (80013ac <APPE_SysEvtReadyProcessing+0x12c>)
 8001382:	f009 fb45 	bl	800aa10 <iprintf>
  return;
 8001386:	bf00      	nop
}
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	0800bb54 	.word	0x0800bb54
 8001394:	0800cee0 	.word	0x0800cee0
 8001398:	0800bb6c 	.word	0x0800bb6c
 800139c:	0800bdf8 	.word	0x0800bdf8
 80013a0:	0800be14 	.word	0x0800be14
 80013a4:	0800be38 	.word	0x0800be38
 80013a8:	0800be58 	.word	0x0800be58
 80013ac:	0800be8c 	.word	0x0800be8c

080013b0 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	f009 f8ac 	bl	800a514 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80013c4:	bf00      	nop
}
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f009 f89a 	bl	800a514 <UTIL_SEQ_Run>

  return;
 80013e0:	bf00      	nop
}
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80013f0:	2100      	movs	r1, #0
 80013f2:	2004      	movs	r0, #4
 80013f4:	f009 f9ac 	bl	800a750 <UTIL_SEQ_SetTask>
  return;
 80013f8:	bf00      	nop
}
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001408:	2002      	movs	r0, #2
 800140a:	f009 fa0d 	bl	800a828 <UTIL_SEQ_SetEvt>
  return;
 800140e:	bf00      	nop
}
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800141e:	2002      	movs	r0, #2
 8001420:	f009 fa22 	bl	800a868 <UTIL_SEQ_WaitEvt>
  return;
 8001424:	bf00      	nop
}
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <LL_EXTI_EnableIT_0_31>:
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <LL_EXTI_EnableIT_0_31+0x24>)
 8001436:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800143a:	4905      	ldr	r1, [pc, #20]	; (8001450 <LL_EXTI_EnableIT_0_31+0x24>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4313      	orrs	r3, r2
 8001440:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	58000800 	.word	0x58000800

08001454 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4904      	ldr	r1, [pc, #16]	; (8001474 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]

}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	58000800 	.word	0x58000800

08001478 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <ReadRtcSsrValue+0x3c>)
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	b29b      	uxth	r3, r3
 8001484:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <ReadRtcSsrValue+0x3c>)
 8001488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148a:	b29b      	uxth	r3, r3
 800148c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800148e:	e005      	b.n	800149c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <ReadRtcSsrValue+0x3c>)
 8001496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001498:	b29b      	uxth	r3, r3
 800149a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d1f5      	bne.n	8001490 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80014a4:	683b      	ldr	r3, [r7, #0]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	40002800 	.word	0x40002800

080014b8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	460a      	mov	r2, r1
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	4613      	mov	r3, r2
 80014c6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80014c8:	79ba      	ldrb	r2, [r7, #6]
 80014ca:	491d      	ldr	r1, [pc, #116]	; (8001540 <LinkTimerAfter+0x88>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	3315      	adds	r3, #21
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d009      	beq.n	80014f6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	4916      	ldr	r1, [pc, #88]	; (8001540 <LinkTimerAfter+0x88>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	3314      	adds	r3, #20
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	4911      	ldr	r1, [pc, #68]	; (8001540 <LinkTimerAfter+0x88>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	440b      	add	r3, r1
 8001504:	3315      	adds	r3, #21
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800150a:	79fa      	ldrb	r2, [r7, #7]
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <LinkTimerAfter+0x88>)
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	440b      	add	r3, r1
 8001518:	3314      	adds	r3, #20
 800151a:	79ba      	ldrb	r2, [r7, #6]
 800151c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800151e:	79ba      	ldrb	r2, [r7, #6]
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <LinkTimerAfter+0x88>)
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	3315      	adds	r3, #21
 800152e:	79fa      	ldrb	r2, [r7, #7]
 8001530:	701a      	strb	r2, [r3, #0]

  return;
 8001532:	bf00      	nop
}
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000a04 	.word	0x20000a04

08001544 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	460a      	mov	r2, r1
 800154e:	71fb      	strb	r3, [r7, #7]
 8001550:	4613      	mov	r3, r2
 8001552:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <LinkTimerBefore+0xb8>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2db      	uxtb	r3, r3
 800155a:	79ba      	ldrb	r2, [r7, #6]
 800155c:	429a      	cmp	r2, r3
 800155e:	d032      	beq.n	80015c6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001560:	79ba      	ldrb	r2, [r7, #6]
 8001562:	4927      	ldr	r1, [pc, #156]	; (8001600 <LinkTimerBefore+0xbc>)
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	3314      	adds	r3, #20
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	4922      	ldr	r1, [pc, #136]	; (8001600 <LinkTimerBefore+0xbc>)
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3315      	adds	r3, #21
 8001584:	79fa      	ldrb	r2, [r7, #7]
 8001586:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001588:	79fa      	ldrb	r2, [r7, #7]
 800158a:	491d      	ldr	r1, [pc, #116]	; (8001600 <LinkTimerBefore+0xbc>)
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	440b      	add	r3, r1
 8001596:	3315      	adds	r3, #21
 8001598:	79ba      	ldrb	r2, [r7, #6]
 800159a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800159c:	79fa      	ldrb	r2, [r7, #7]
 800159e:	4918      	ldr	r1, [pc, #96]	; (8001600 <LinkTimerBefore+0xbc>)
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	3314      	adds	r3, #20
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80015b0:	79ba      	ldrb	r2, [r7, #6]
 80015b2:	4913      	ldr	r1, [pc, #76]	; (8001600 <LinkTimerBefore+0xbc>)
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	440b      	add	r3, r1
 80015be:	3314      	adds	r3, #20
 80015c0:	79fa      	ldrb	r2, [r7, #7]
 80015c2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80015c4:	e014      	b.n	80015f0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	490d      	ldr	r1, [pc, #52]	; (8001600 <LinkTimerBefore+0xbc>)
 80015ca:	4613      	mov	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	440b      	add	r3, r1
 80015d4:	3315      	adds	r3, #21
 80015d6:	79ba      	ldrb	r2, [r7, #6]
 80015d8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80015da:	79ba      	ldrb	r2, [r7, #6]
 80015dc:	4908      	ldr	r1, [pc, #32]	; (8001600 <LinkTimerBefore+0xbc>)
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	3314      	adds	r3, #20
 80015ea:	79fa      	ldrb	r2, [r7, #7]
 80015ec:	701a      	strb	r2, [r3, #0]
  return;
 80015ee:	bf00      	nop
}
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000a94 	.word	0x20000a94
 8001600:	20000a04 	.word	0x20000a04

08001604 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <linkTimer+0x144>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b06      	cmp	r3, #6
 8001616:	d118      	bne.n	800164a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001618:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <linkTimer+0x144>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4b4b      	ldr	r3, [pc, #300]	; (800174c <linkTimer+0x148>)
 8001620:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001622:	4a49      	ldr	r2, [pc, #292]	; (8001748 <linkTimer+0x144>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	4949      	ldr	r1, [pc, #292]	; (8001750 <linkTimer+0x14c>)
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3315      	adds	r3, #21
 8001638:	2206      	movs	r2, #6
 800163a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800163c:	4b45      	ldr	r3, [pc, #276]	; (8001754 <linkTimer+0x150>)
 800163e:	f04f 32ff 	mov.w	r2, #4294967295
 8001642:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	81fb      	strh	r3, [r7, #14]
 8001648:	e078      	b.n	800173c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800164a:	f000 f909 	bl	8001860 <ReturnTimeElapsed>
 800164e:	4603      	mov	r3, r0
 8001650:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001652:	79fa      	ldrb	r2, [r7, #7]
 8001654:	493e      	ldr	r1, [pc, #248]	; (8001750 <linkTimer+0x14c>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3308      	adds	r3, #8
 8001662:	6819      	ldr	r1, [r3, #0]
 8001664:	89fb      	ldrh	r3, [r7, #14]
 8001666:	79fa      	ldrb	r2, [r7, #7]
 8001668:	4419      	add	r1, r3
 800166a:	4839      	ldr	r0, [pc, #228]	; (8001750 <linkTimer+0x14c>)
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4403      	add	r3, r0
 8001676:	3308      	adds	r3, #8
 8001678:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800167a:	79fa      	ldrb	r2, [r7, #7]
 800167c:	4934      	ldr	r1, [pc, #208]	; (8001750 <linkTimer+0x14c>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3308      	adds	r3, #8
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <linkTimer+0x144>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	4619      	mov	r1, r3
 8001696:	4a2e      	ldr	r2, [pc, #184]	; (8001750 <linkTimer+0x14c>)
 8001698:	460b      	mov	r3, r1
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	440b      	add	r3, r1
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4413      	add	r3, r2
 80016a2:	3308      	adds	r3, #8
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d337      	bcc.n	800171c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80016ac:	4b26      	ldr	r3, [pc, #152]	; (8001748 <linkTimer+0x144>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80016b2:	7b7a      	ldrb	r2, [r7, #13]
 80016b4:	4926      	ldr	r1, [pc, #152]	; (8001750 <linkTimer+0x14c>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	440b      	add	r3, r1
 80016c0:	3315      	adds	r3, #21
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80016c6:	e013      	b.n	80016f0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80016c8:	7b7a      	ldrb	r2, [r7, #13]
 80016ca:	4921      	ldr	r1, [pc, #132]	; (8001750 <linkTimer+0x14c>)
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	3315      	adds	r3, #21
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80016dc:	7b7a      	ldrb	r2, [r7, #13]
 80016de:	491c      	ldr	r1, [pc, #112]	; (8001750 <linkTimer+0x14c>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3315      	adds	r3, #21
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80016f0:	7b3b      	ldrb	r3, [r7, #12]
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d00b      	beq.n	800170e <linkTimer+0x10a>
 80016f6:	7b3a      	ldrb	r2, [r7, #12]
 80016f8:	4915      	ldr	r1, [pc, #84]	; (8001750 <linkTimer+0x14c>)
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3308      	adds	r3, #8
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	429a      	cmp	r2, r3
 800170c:	d2dc      	bcs.n	80016c8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800170e:	7b7a      	ldrb	r2, [r7, #13]
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fecf 	bl	80014b8 <LinkTimerAfter>
 800171a:	e00f      	b.n	800173c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <linkTimer+0x144>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff0c 	bl	8001544 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <linkTimer+0x144>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b2da      	uxtb	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <linkTimer+0x148>)
 8001734:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <linkTimer+0x144>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800173c:	89fb      	ldrh	r3, [r7, #14]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000a94 	.word	0x20000a94
 800174c:	20000a95 	.word	0x20000a95
 8001750:	20000a04 	.word	0x20000a04
 8001754:	20000a98 	.word	0x20000a98

08001758 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	460a      	mov	r2, r1
 8001762:	71fb      	strb	r3, [r7, #7]
 8001764:	4613      	mov	r3, r2
 8001766:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001768:	4b39      	ldr	r3, [pc, #228]	; (8001850 <UnlinkTimer+0xf8>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	79fa      	ldrb	r2, [r7, #7]
 8001770:	429a      	cmp	r2, r3
 8001772:	d111      	bne.n	8001798 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001774:	4b36      	ldr	r3, [pc, #216]	; (8001850 <UnlinkTimer+0xf8>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b36      	ldr	r3, [pc, #216]	; (8001854 <UnlinkTimer+0xfc>)
 800177c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800177e:	79fa      	ldrb	r2, [r7, #7]
 8001780:	4935      	ldr	r1, [pc, #212]	; (8001858 <UnlinkTimer+0x100>)
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3315      	adds	r3, #21
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <UnlinkTimer+0xf8>)
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e03e      	b.n	8001816 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001798:	79fa      	ldrb	r2, [r7, #7]
 800179a:	492f      	ldr	r1, [pc, #188]	; (8001858 <UnlinkTimer+0x100>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3314      	adds	r3, #20
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80017ac:	79fa      	ldrb	r2, [r7, #7]
 80017ae:	492a      	ldr	r1, [pc, #168]	; (8001858 <UnlinkTimer+0x100>)
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3315      	adds	r3, #21
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80017c0:	79f9      	ldrb	r1, [r7, #7]
 80017c2:	7bfa      	ldrb	r2, [r7, #15]
 80017c4:	4824      	ldr	r0, [pc, #144]	; (8001858 <UnlinkTimer+0x100>)
 80017c6:	460b      	mov	r3, r1
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	440b      	add	r3, r1
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4403      	add	r3, r0
 80017d0:	3315      	adds	r3, #21
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b2d8      	uxtb	r0, r3
 80017d6:	4920      	ldr	r1, [pc, #128]	; (8001858 <UnlinkTimer+0x100>)
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	3315      	adds	r3, #21
 80017e4:	4602      	mov	r2, r0
 80017e6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d013      	beq.n	8001816 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80017ee:	79f9      	ldrb	r1, [r7, #7]
 80017f0:	7bba      	ldrb	r2, [r7, #14]
 80017f2:	4819      	ldr	r0, [pc, #100]	; (8001858 <UnlinkTimer+0x100>)
 80017f4:	460b      	mov	r3, r1
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	440b      	add	r3, r1
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4403      	add	r3, r0
 80017fe:	3314      	adds	r3, #20
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2d8      	uxtb	r0, r3
 8001804:	4914      	ldr	r1, [pc, #80]	; (8001858 <UnlinkTimer+0x100>)
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	3314      	adds	r3, #20
 8001812:	4602      	mov	r2, r0
 8001814:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	490f      	ldr	r1, [pc, #60]	; (8001858 <UnlinkTimer+0x100>)
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	440b      	add	r3, r1
 8001824:	330c      	adds	r3, #12
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <UnlinkTimer+0xf8>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b06      	cmp	r3, #6
 8001832:	d107      	bne.n	8001844 <UnlinkTimer+0xec>
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d104      	bne.n	8001844 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800183a:	4b08      	ldr	r3, [pc, #32]	; (800185c <UnlinkTimer+0x104>)
 800183c:	f04f 32ff 	mov.w	r2, #4294967295
 8001840:	601a      	str	r2, [r3, #0]
  }

  return;
 8001842:	bf00      	nop
 8001844:	bf00      	nop
}
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000a94 	.word	0x20000a94
 8001854:	20000a95 	.word	0x20000a95
 8001858:	20000a04 	.word	0x20000a04
 800185c:	20000a98 	.word	0x20000a98

08001860 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <ReturnTimeElapsed+0x70>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186e:	d026      	beq.n	80018be <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001870:	f7ff fe02 	bl	8001478 <ReadRtcSsrValue>
 8001874:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001876:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <ReturnTimeElapsed+0x70>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	429a      	cmp	r2, r3
 800187e:	d805      	bhi.n	800188c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <ReturnTimeElapsed+0x70>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	e00a      	b.n	80018a2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <ReturnTimeElapsed+0x74>)
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <ReturnTimeElapsed+0x70>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80018a2:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <ReturnTimeElapsed+0x78>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <ReturnTimeElapsed+0x7c>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	40d3      	lsrs	r3, r2
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	e001      	b.n	80018c2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	b29b      	uxth	r3, r3
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000a98 	.word	0x20000a98
 80018d4:	20000aa0 	.word	0x20000aa0
 80018d8:	20000a9e 	.word	0x20000a9e
 80018dc:	20000a9d 	.word	0x20000a9d

080018e0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80018ea:	88fb      	ldrh	r3, [r7, #6]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d108      	bne.n	8001902 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80018f0:	f7ff fdc2 	bl	8001478 <ReadRtcSsrValue>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a21      	ldr	r2, [pc, #132]	; (800197c <RestartWakeupCounter+0x9c>)
 80018f8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80018fa:	2003      	movs	r0, #3
 80018fc:	f001 fb57 	bl	8002fae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001900:	e039      	b.n	8001976 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d803      	bhi.n	8001910 <RestartWakeupCounter+0x30>
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <RestartWakeupCounter+0xa0>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d002      	beq.n	8001916 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	3b01      	subs	r3, #1
 8001914:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001916:	bf00      	nop
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <RestartWakeupCounter+0xa4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f8      	beq.n	8001918 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <RestartWakeupCounter+0xa4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <RestartWakeupCounter+0xa4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001936:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <RestartWakeupCounter+0xa8>)
 800193a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800193e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001940:	2003      	movs	r0, #3
 8001942:	f001 fb42 	bl	8002fca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <RestartWakeupCounter+0xac>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	0c1b      	lsrs	r3, r3, #16
 800194c:	041b      	lsls	r3, r3, #16
 800194e:	88fa      	ldrh	r2, [r7, #6]
 8001950:	490e      	ldr	r1, [pc, #56]	; (800198c <RestartWakeupCounter+0xac>)
 8001952:	4313      	orrs	r3, r2
 8001954:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001956:	f7ff fd8f 	bl	8001478 <ReadRtcSsrValue>
 800195a:	4603      	mov	r3, r0
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <RestartWakeupCounter+0x9c>)
 800195e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001960:	4b08      	ldr	r3, [pc, #32]	; (8001984 <RestartWakeupCounter+0xa4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	4b07      	ldr	r3, [pc, #28]	; (8001984 <RestartWakeupCounter+0xa4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800196e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001970:	f3af 8000 	nop.w
  return ;
 8001974:	bf00      	nop
}
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000a98 	.word	0x20000a98
 8001980:	20000a9d 	.word	0x20000a9d
 8001984:	20000ae0 	.word	0x20000ae0
 8001988:	58000800 	.word	0x58000800
 800198c:	40002800 	.word	0x40002800

08001990 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001996:	4b45      	ldr	r3, [pc, #276]	; (8001aac <RescheduleTimerList+0x11c>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a2:	d107      	bne.n	80019b4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80019a4:	bf00      	nop
 80019a6:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <RescheduleTimerList+0x120>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f8      	bne.n	80019a6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80019b4:	4b3e      	ldr	r3, [pc, #248]	; (8001ab0 <RescheduleTimerList+0x120>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <RescheduleTimerList+0x120>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80019c4:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <RescheduleTimerList+0x124>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80019ca:	7bfa      	ldrb	r2, [r7, #15]
 80019cc:	493a      	ldr	r1, [pc, #232]	; (8001ab8 <RescheduleTimerList+0x128>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	3308      	adds	r3, #8
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80019de:	f7ff ff3f 	bl	8001860 <ReturnTimeElapsed>
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d205      	bcs.n	80019fa <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80019f2:	4b32      	ldr	r3, [pc, #200]	; (8001abc <RescheduleTimerList+0x12c>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	701a      	strb	r2, [r3, #0]
 80019f8:	e04d      	b.n	8001a96 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4a30      	ldr	r2, [pc, #192]	; (8001ac0 <RescheduleTimerList+0x130>)
 80019fe:	8812      	ldrh	r2, [r2, #0]
 8001a00:	b292      	uxth	r2, r2
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d906      	bls.n	8001a1a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <RescheduleTimerList+0x130>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001a12:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <RescheduleTimerList+0x12c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e03d      	b.n	8001a96 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	88fb      	ldrh	r3, [r7, #6]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <RescheduleTimerList+0x12c>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a2a:	e034      	b.n	8001a96 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001a2c:	7bfa      	ldrb	r2, [r7, #15]
 8001a2e:	4922      	ldr	r1, [pc, #136]	; (8001ab8 <RescheduleTimerList+0x128>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d20a      	bcs.n	8001a5a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	491c      	ldr	r1, [pc, #112]	; (8001ab8 <RescheduleTimerList+0x128>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	3308      	adds	r3, #8
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	e013      	b.n	8001a82 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	4916      	ldr	r1, [pc, #88]	; (8001ab8 <RescheduleTimerList+0x128>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	3308      	adds	r3, #8
 8001a6a:	6819      	ldr	r1, [r3, #0]
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	1ac9      	subs	r1, r1, r3
 8001a72:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <RescheduleTimerList+0x128>)
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4403      	add	r3, r0
 8001a7e:	3308      	adds	r3, #8
 8001a80:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <RescheduleTimerList+0x128>)
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	3315      	adds	r3, #21
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d1c7      	bne.n	8001a2c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001a9c:	89bb      	ldrh	r3, [r7, #12]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff ff1e 	bl	80018e0 <RestartWakeupCounter>

  return ;
 8001aa4:	bf00      	nop
}
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40002800 	.word	0x40002800
 8001ab0:	20000ae0 	.word	0x20000ae0
 8001ab4:	20000a94 	.word	0x20000a94
 8001ab8:	20000a04 	.word	0x20000a04
 8001abc:	20000a9c 	.word	0x20000a9c
 8001ac0:	20000aa2 	.word	0x20000aa2

08001ac4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	; 0x28
 8001ac8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aca:	f3ef 8310 	mrs	r3, PRIMASK
 8001ace:	617b      	str	r3, [r7, #20]
  return(result);
 8001ad0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad4:	b672      	cpsid	i
}
 8001ad6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	22ca      	movs	r2, #202	; 0xca
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
 8001ae0:	4b57      	ldr	r3, [pc, #348]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2253      	movs	r2, #83	; 0x53
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001ae8:	4b55      	ldr	r3, [pc, #340]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	4b54      	ldr	r3, [pc, #336]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001af8:	4b52      	ldr	r3, [pc, #328]	; (8001c44 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001b00:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b04:	4950      	ldr	r1, [pc, #320]	; (8001c48 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	440b      	add	r3, r1
 8001b10:	330c      	adds	r3, #12
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d16e      	bne.n	8001bf8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001b1a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b1e:	494a      	ldr	r1, [pc, #296]	; (8001c48 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	440b      	add	r3, r1
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001b2e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b32:	4945      	ldr	r1, [pc, #276]	; (8001c48 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3310      	adds	r3, #16
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001b44:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d04c      	beq.n	8001be8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001b4e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b52:	493d      	ldr	r1, [pc, #244]	; (8001c48 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	330d      	adds	r3, #13
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d124      	bne.n	8001bb2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001b68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fdf2 	bl	8001758 <UnlinkTimer>
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f383 8810 	msr	PRIMASK, r3
}
 8001b7e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001b80:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b84:	4930      	ldr	r1, [pc, #192]	; (8001c48 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b86:	4613      	mov	r3, r2
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	3304      	adds	r3, #4
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f9b8 	bl	8001f10 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	22ca      	movs	r2, #202	; 0xca
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2253      	movs	r2, #83	; 0x53
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
 8001bb0:	e012      	b.n	8001bd8 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f383 8810 	msr	PRIMASK, r3
}
 8001bbc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001bbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f920 	bl	8001e08 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	22ca      	movs	r2, #202	; 0xca
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2253      	movs	r2, #83	; 0x53
 8001bd6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	4619      	mov	r1, r3
 8001be0:	69b8      	ldr	r0, [r7, #24]
 8001be2:	f000 fa1b 	bl	800201c <HW_TS_RTC_Int_AppNot>
 8001be6:	e022      	b.n	8001c2e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001be8:	f7ff fed2 	bl	8001990 <RescheduleTimerList>
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f383 8810 	msr	PRIMASK, r3
}
 8001bf6:	e01a      	b.n	8001c2e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001bf8:	bf00      	nop
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f8      	beq.n	8001bfa <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c08:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c18:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001c1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f383 8810 	msr	PRIMASK, r3
}
 8001c2c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	22ff      	movs	r2, #255	; 0xff
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001c36:	bf00      	nop
}
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000ae0 	.word	0x20000ae0
 8001c44:	20000a94 	.word	0x20000a94
 8001c48:	20000a04 	.word	0x20000a04
 8001c4c:	20000a9c 	.word	0x20000a9c
 8001c50:	58000800 	.word	0x58000800

08001c54 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c60:	4b5e      	ldr	r3, [pc, #376]	; (8001ddc <HW_TS_Init+0x188>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	22ca      	movs	r2, #202	; 0xca
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
 8001c68:	4b5c      	ldr	r3, [pc, #368]	; (8001ddc <HW_TS_Init+0x188>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2253      	movs	r2, #83	; 0x53
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001c70:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <HW_TS_Init+0x18c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a5a      	ldr	r2, [pc, #360]	; (8001de0 <HW_TS_Init+0x18c>)
 8001c76:	f043 0320 	orr.w	r3, r3, #32
 8001c7a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001c7c:	4b58      	ldr	r3, [pc, #352]	; (8001de0 <HW_TS_Init+0x18c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	f1c3 0304 	rsb	r3, r3, #4
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b55      	ldr	r3, [pc, #340]	; (8001de4 <HW_TS_Init+0x190>)
 8001c90:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001c92:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HW_TS_Init+0x18c>)
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c9a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001c9e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	fa92 f2a2 	rbit	r2, r2
 8001ca6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	d101      	bne.n	8001cb6 <HW_TS_Init+0x62>
  {
    return 32U;
 8001cb2:	2220      	movs	r2, #32
 8001cb4:	e003      	b.n	8001cbe <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	40d3      	lsrs	r3, r2
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	4b48      	ldr	r3, [pc, #288]	; (8001de8 <HW_TS_Init+0x194>)
 8001cc8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001cca:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <HW_TS_Init+0x18c>)
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b44      	ldr	r3, [pc, #272]	; (8001dec <HW_TS_Init+0x198>)
 8001cdc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001cde:	4b43      	ldr	r3, [pc, #268]	; (8001dec <HW_TS_Init+0x198>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	4a40      	ldr	r2, [pc, #256]	; (8001de8 <HW_TS_Init+0x194>)
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	fb02 f303 	mul.w	r3, r2, r3
 8001cec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001cf0:	4a3c      	ldr	r2, [pc, #240]	; (8001de4 <HW_TS_Init+0x190>)
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	40d3      	lsrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d904      	bls.n	8001d0c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001d02:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HW_TS_Init+0x19c>)
 8001d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	e003      	b.n	8001d14 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <HW_TS_Init+0x19c>)
 8001d12:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d14:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d18:	f7ff fb9c 	bl	8001454 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d20:	f7ff fb84 	bl	800142c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d13d      	bne.n	8001da6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HW_TS_Init+0x1a0>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HW_TS_Init+0x1a4>)
 8001d32:	f04f 32ff 	mov.w	r2, #4294967295
 8001d36:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	77fb      	strb	r3, [r7, #31]
 8001d3c:	e00c      	b.n	8001d58 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001d3e:	7ffa      	ldrb	r2, [r7, #31]
 8001d40:	492e      	ldr	r1, [pc, #184]	; (8001dfc <HW_TS_Init+0x1a8>)
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	330c      	adds	r3, #12
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001d52:	7ffb      	ldrb	r3, [r7, #31]
 8001d54:	3301      	adds	r3, #1
 8001d56:	77fb      	strb	r3, [r7, #31]
 8001d58:	7ffb      	ldrb	r3, [r7, #31]
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d9ef      	bls.n	8001d3e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001d5e:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <HW_TS_Init+0x1ac>)
 8001d60:	2206      	movs	r2, #6
 8001d62:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HW_TS_Init+0x188>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HW_TS_Init+0x188>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d72:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HW_TS_Init+0x188>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HW_TS_Init+0x188>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d84:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <HW_TS_Init+0x1b0>)
 8001d88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d8c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001d8e:	2003      	movs	r0, #3
 8001d90:	f001 f91b 	bl	8002fca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HW_TS_Init+0x188>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <HW_TS_Init+0x188>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	e009      	b.n	8001dba <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HW_TS_Init+0x188>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d002      	beq.n	8001dba <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001db4:	2003      	movs	r0, #3
 8001db6:	f001 f8fa 	bl	8002fae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HW_TS_Init+0x188>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2103      	movs	r1, #3
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	f001 f8af 	bl	8002f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f001 f8c6 	bl	8002f5e <HAL_NVIC_EnableIRQ>

  return;
 8001dd2:	bf00      	nop
}
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000ae0 	.word	0x20000ae0
 8001de0:	40002800 	.word	0x40002800
 8001de4:	20000a9d 	.word	0x20000a9d
 8001de8:	20000a9e 	.word	0x20000a9e
 8001dec:	20000aa0 	.word	0x20000aa0
 8001df0:	20000aa2 	.word	0x20000aa2
 8001df4:	20000a9c 	.word	0x20000a9c
 8001df8:	20000a98 	.word	0x20000a98
 8001dfc:	20000a04 	.word	0x20000a04
 8001e00:	20000a94 	.word	0x20000a94
 8001e04:	58000800 	.word	0x58000800

08001e08 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e12:	f3ef 8310 	mrs	r3, PRIMASK
 8001e16:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e18:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
}
 8001e1e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e20:	2003      	movs	r0, #3
 8001e22:	f001 f8aa 	bl	8002f7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e26:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <HW_TS_Stop+0xf0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	22ca      	movs	r2, #202	; 0xca
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8001e2e:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <HW_TS_Stop+0xf0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2253      	movs	r2, #83	; 0x53
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e36:	79fa      	ldrb	r2, [r7, #7]
 8001e38:	4930      	ldr	r1, [pc, #192]	; (8001efc <HW_TS_Stop+0xf4>)
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	330c      	adds	r3, #12
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d142      	bne.n	8001ed4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	2100      	movs	r1, #0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fc80 	bl	8001758 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001e58:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <HW_TS_Stop+0xf8>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e5e:	7cfb      	ldrb	r3, [r7, #19]
 8001e60:	2b06      	cmp	r3, #6
 8001e62:	d12f      	bne.n	8001ec4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001e64:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HW_TS_Stop+0xfc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e70:	d107      	bne.n	8001e82 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001e72:	bf00      	nop
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HW_TS_Stop+0xf0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f8      	bne.n	8001e74 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HW_TS_Stop+0xf0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <HW_TS_Stop+0xf0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e90:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e92:	bf00      	nop
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <HW_TS_Stop+0xf0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f8      	beq.n	8001e94 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <HW_TS_Stop+0xf0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <HW_TS_Stop+0xf0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001eb2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HW_TS_Stop+0x100>)
 8001eb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001eba:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f001 f884 	bl	8002fca <HAL_NVIC_ClearPendingIRQ>
 8001ec2:	e007      	b.n	8001ed4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HW_TS_Stop+0x104>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	7cfa      	ldrb	r2, [r7, #19]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001ed0:	f7ff fd5e 	bl	8001990 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HW_TS_Stop+0xf0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	22ff      	movs	r2, #255	; 0xff
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001edc:	2003      	movs	r0, #3
 8001ede:	f001 f83e 	bl	8002f5e <HAL_NVIC_EnableIRQ>
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f383 8810 	msr	PRIMASK, r3
}
 8001eec:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001eee:	bf00      	nop
}
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000ae0 	.word	0x20000ae0
 8001efc:	20000a04 	.word	0x20000a04
 8001f00:	20000a94 	.word	0x20000a94
 8001f04:	40002800 	.word	0x40002800
 8001f08:	58000800 	.word	0x58000800
 8001f0c:	20000a95 	.word	0x20000a95

08001f10 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	6039      	str	r1, [r7, #0]
 8001f1a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f1c:	79fa      	ldrb	r2, [r7, #7]
 8001f1e:	493b      	ldr	r1, [pc, #236]	; (800200c <HW_TS_Start+0xfc>)
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	330c      	adds	r3, #12
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d103      	bne.n	8001f3c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff66 	bl	8001e08 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8001f40:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f42:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f46:	b672      	cpsid	i
}
 8001f48:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001f4a:	2003      	movs	r0, #3
 8001f4c:	f001 f815 	bl	8002f7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f50:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <HW_TS_Start+0x100>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	22ca      	movs	r2, #202	; 0xca
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
 8001f58:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <HW_TS_Start+0x100>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2253      	movs	r2, #83	; 0x53
 8001f5e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001f60:	79fa      	ldrb	r2, [r7, #7]
 8001f62:	492a      	ldr	r1, [pc, #168]	; (800200c <HW_TS_Start+0xfc>)
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	330c      	adds	r3, #12
 8001f70:	2202      	movs	r2, #2
 8001f72:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001f74:	79fa      	ldrb	r2, [r7, #7]
 8001f76:	4925      	ldr	r1, [pc, #148]	; (800200c <HW_TS_Start+0xfc>)
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	3308      	adds	r3, #8
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001f88:	79fa      	ldrb	r2, [r7, #7]
 8001f8a:	4920      	ldr	r1, [pc, #128]	; (800200c <HW_TS_Start+0xfc>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	3304      	adds	r3, #4
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fb30 	bl	8001604 <linkTimer>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HW_TS_Start+0x104>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HW_TS_Start+0x108>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	7c7a      	ldrb	r2, [r7, #17]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d002      	beq.n	8001fc0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001fba:	f7ff fce9 	bl	8001990 <RescheduleTimerList>
 8001fbe:	e013      	b.n	8001fe8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001fc0:	79fa      	ldrb	r2, [r7, #7]
 8001fc2:	4912      	ldr	r1, [pc, #72]	; (800200c <HW_TS_Start+0xfc>)
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	3308      	adds	r3, #8
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	8a7b      	ldrh	r3, [r7, #18]
 8001fd4:	79fa      	ldrb	r2, [r7, #7]
 8001fd6:	1ac9      	subs	r1, r1, r3
 8001fd8:	480c      	ldr	r0, [pc, #48]	; (800200c <HW_TS_Start+0xfc>)
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4403      	add	r3, r0
 8001fe4:	3308      	adds	r3, #8
 8001fe6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HW_TS_Start+0x100>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	22ff      	movs	r2, #255	; 0xff
 8001fee:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ff0:	2003      	movs	r0, #3
 8001ff2:	f000 ffb4 	bl	8002f5e <HAL_NVIC_EnableIRQ>
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f383 8810 	msr	PRIMASK, r3
}
 8002000:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002002:	bf00      	nop
}
 8002004:	3718      	adds	r7, #24
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000a04 	.word	0x20000a04
 8002010:	20000ae0 	.word	0x20000ae0
 8002014:	20000a94 	.word	0x20000a94
 8002018:	20000a95 	.word	0x20000a95

0800201c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	460b      	mov	r3, r1
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4798      	blx	r3

  return;
 800202e:	bf00      	nop
}
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800203e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002042:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d013      	beq.n	8002076 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800204e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002052:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002056:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800205e:	e000      	b.n	8002062 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002060:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002062:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f9      	beq.n	8002060 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800206c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002076:	687b      	ldr	r3, [r7, #4]
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_RCC_LSE_SetDriveCapability>:
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002094:	f023 0218 	bic.w	r2, r3, #24
 8002098:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_AHB1_GRP1_EnableClock>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020d4:	68fb      	ldr	r3, [r7, #12]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_AHB2_GRP1_EnableClock>:
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4013      	ands	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	e009      	b.n	800213a <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	60ba      	str	r2, [r7, #8]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff ff81 	bl	8002036 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	dbf1      	blt.n	8002126 <_write+0x12>
	}
	return len;
 8002142:	687b      	ldr	r3, [r7, #4]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002150:	f000 fd2a 	bl	8002ba8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002154:	f7fe fe5c 	bl	8000e10 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002158:	f000 f826 	bl	80021a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800215c:	f000 f89c 	bl	8002298 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002160:	f000 f8ba 	bl	80022d8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002164:	f000 f990 	bl	8002488 <MX_GPIO_Init>
  MX_DMA_Init();
 8002168:	f000 f97c 	bl	8002464 <MX_DMA_Init>
  MX_RF_Init();
 800216c:	f000 f8c8 	bl	8002300 <MX_RF_Init>
  MX_RTC_Init();
 8002170:	f000 f8ce 	bl	8002310 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002174:	f000 f900 	bl	8002378 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8002178:	f000 f94c 	bl	8002414 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	2102      	movs	r1, #2
 8002180:	4808      	ldr	r0, [pc, #32]	; (80021a4 <main+0x58>)
 8002182:	f001 fc37 	bl	80039f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2101      	movs	r1, #1
 800218a:	4806      	ldr	r0, [pc, #24]	; (80021a4 <main+0x58>)
 800218c:	f001 fc32 	bl	80039f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	2120      	movs	r1, #32
 8002194:	4803      	ldr	r0, [pc, #12]	; (80021a4 <main+0x58>)
 8002196:	f001 fc2d 	bl	80039f4 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800219a:	f7fe fe47 	bl	8000e2c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800219e:	f7ff f907 	bl	80013b0 <MX_APPE_Process>
 80021a2:	e7fc      	b.n	800219e <main+0x52>
 80021a4:	48000400 	.word	0x48000400

080021a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b09a      	sub	sp, #104	; 0x68
 80021ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ae:	f107 0320 	add.w	r3, r7, #32
 80021b2:	2248      	movs	r2, #72	; 0x48
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f008 fc22 	bl	800aa00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]
 80021ca:	615a      	str	r2, [r3, #20]
 80021cc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021dc:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f023 0303 	bic.w	r3, r3, #3
 80021e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021f2:	f001 fe03 	bl	8003dfc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80021f6:	2010      	movs	r0, #16
 80021f8:	f7ff ff44 	bl	8002084 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <SystemClock_Config+0xec>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002204:	4a23      	ldr	r2, [pc, #140]	; (8002294 <SystemClock_Config+0xec>)
 8002206:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <SystemClock_Config+0xec>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002218:	232f      	movs	r3, #47	; 0x2f
 800221a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800221c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002222:	2301      	movs	r3, #1
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800222c:	2301      	movs	r3, #1
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002230:	2340      	movs	r3, #64	; 0x40
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002234:	2300      	movs	r3, #0
 8002236:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002238:	2360      	movs	r3, #96	; 0x60
 800223a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800223c:	2305      	movs	r3, #5
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002240:	2300      	movs	r3, #0
 8002242:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002244:	f107 0320 	add.w	r3, r7, #32
 8002248:	4618      	mov	r0, r3
 800224a:	f002 f96b 	bl	8004524 <HAL_RCC_OscConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002254:	f000 f988 	bl	8002568 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002258:	236f      	movs	r3, #111	; 0x6f
 800225a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800225c:	2302      	movs	r3, #2
 800225e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f002 fcc7 	bl	8004c0c <HAL_RCC_ClockConfig>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002284:	f000 f970 	bl	8002568 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002288:	f003 fa82 	bl	8005790 <HAL_RCCEx_EnableMSIPLLMode>
}
 800228c:	bf00      	nop
 800228e:	3768      	adds	r7, #104	; 0x68
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	58000400 	.word	0x58000400

08002298 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b094      	sub	sp, #80	; 0x50
 800229c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800229e:	463b      	mov	r3, r7
 80022a0:	2250      	movs	r2, #80	; 0x50
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f008 fbab 	bl	800aa00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80022aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022ae:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80022b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80022b6:	2300      	movs	r3, #0
 80022b8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022be:	463b      	mov	r3, r7
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 f8ef 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80022cc:	f000 f94c 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80022d0:	bf00      	nop
 80022d2:	3750      	adds	r7, #80	; 0x50
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_IPCC_Init+0x20>)
 80022de:	4a07      	ldr	r2, [pc, #28]	; (80022fc <MX_IPCC_Init+0x24>)
 80022e0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_IPCC_Init+0x20>)
 80022e4:	f001 fc00 	bl	8003ae8 <HAL_IPCC_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80022ee:	f000 f93b 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000aa4 	.word	0x20000aa4
 80022fc:	58000c00 	.word	0x58000c00

08002300 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <MX_RTC_Init+0x60>)
 8002316:	4a17      	ldr	r2, [pc, #92]	; (8002374 <MX_RTC_Init+0x64>)
 8002318:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <MX_RTC_Init+0x60>)
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <MX_RTC_Init+0x60>)
 8002322:	220f      	movs	r2, #15
 8002324:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <MX_RTC_Init+0x60>)
 8002328:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800232c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_RTC_Init+0x60>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_RTC_Init+0x60>)
 8002336:	2200      	movs	r2, #0
 8002338:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <MX_RTC_Init+0x60>)
 800233c:	2200      	movs	r2, #0
 800233e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_RTC_Init+0x60>)
 8002342:	2200      	movs	r2, #0
 8002344:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002346:	480a      	ldr	r0, [pc, #40]	; (8002370 <MX_RTC_Init+0x60>)
 8002348:	f003 fb3a 	bl	80059c0 <HAL_RTC_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002352:	f000 f909 	bl	8002568 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_RTC_Init+0x60>)
 800235c:	f003 fc30 	bl	8005bc0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002366:	f000 f8ff 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000ae0 	.word	0x20000ae0
 8002374:	40002800 	.word	0x40002800

08002378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800237c:	4b23      	ldr	r3, [pc, #140]	; (800240c <MX_USART1_UART_Init+0x94>)
 800237e:	4a24      	ldr	r2, [pc, #144]	; (8002410 <MX_USART1_UART_Init+0x98>)
 8002380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002382:	4b22      	ldr	r3, [pc, #136]	; (800240c <MX_USART1_UART_Init+0x94>)
 8002384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <MX_USART1_UART_Init+0x94>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <MX_USART1_UART_Init+0x94>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <MX_USART1_UART_Init+0x94>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <MX_USART1_UART_Init+0x94>)
 800239e:	220c      	movs	r2, #12
 80023a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <MX_USART1_UART_Init+0x94>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <MX_USART1_UART_Init+0x94>)
 80023aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023ae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <MX_USART1_UART_Init+0x94>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <MX_USART1_UART_Init+0x94>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <MX_USART1_UART_Init+0x94>)
 80023be:	2200      	movs	r2, #0
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c2:	4812      	ldr	r0, [pc, #72]	; (800240c <MX_USART1_UART_Init+0x94>)
 80023c4:	f003 fcd8 	bl	8005d78 <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80023ce:	f000 f8cb 	bl	8002568 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023d2:	2100      	movs	r1, #0
 80023d4:	480d      	ldr	r0, [pc, #52]	; (800240c <MX_USART1_UART_Init+0x94>)
 80023d6:	f004 f938 	bl	800664a <HAL_UARTEx_SetTxFifoThreshold>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80023e0:	f000 f8c2 	bl	8002568 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023e4:	2100      	movs	r1, #0
 80023e6:	4809      	ldr	r0, [pc, #36]	; (800240c <MX_USART1_UART_Init+0x94>)
 80023e8:	f004 f96d 	bl	80066c6 <HAL_UARTEx_SetRxFifoThreshold>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80023f2:	f000 f8b9 	bl	8002568 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_USART1_UART_Init+0x94>)
 80023f8:	f004 f8ee 	bl	80065d8 <HAL_UARTEx_DisableFifoMode>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002402:	f000 f8b1 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000b04 	.word	0x20000b04
 8002410:	40013800 	.word	0x40013800

08002414 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002418:	4b10      	ldr	r3, [pc, #64]	; (800245c <MX_USB_PCD_Init+0x48>)
 800241a:	4a11      	ldr	r2, [pc, #68]	; (8002460 <MX_USB_PCD_Init+0x4c>)
 800241c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_USB_PCD_Init+0x48>)
 8002420:	2208      	movs	r2, #8
 8002422:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <MX_USB_PCD_Init+0x48>)
 8002426:	2202      	movs	r2, #2
 8002428:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <MX_USB_PCD_Init+0x48>)
 800242c:	2202      	movs	r2, #2
 800242e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <MX_USB_PCD_Init+0x48>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <MX_USB_PCD_Init+0x48>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <MX_USB_PCD_Init+0x48>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <MX_USB_PCD_Init+0x48>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <MX_USB_PCD_Init+0x48>)
 800244a:	f001 fbd3 	bl	8003bf4 <HAL_PCD_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002454:	f000 f888 	bl	8002568 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000bf8 	.word	0x20000bf8
 8002460:	40006800 	.word	0x40006800

08002464 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002468:	2004      	movs	r0, #4
 800246a:	f7ff fe21 	bl	80020b0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800246e:	2002      	movs	r0, #2
 8002470:	f7ff fe1e 	bl	80020b0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	203a      	movs	r0, #58	; 0x3a
 800247a:	f000 fd56 	bl	8002f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800247e:	203a      	movs	r0, #58	; 0x3a
 8002480:	f000 fd6d 	bl	8002f5e <HAL_NVIC_EnableIRQ>

}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}

08002488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800249c:	2004      	movs	r0, #4
 800249e:	f7ff fe20 	bl	80020e2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a2:	2002      	movs	r0, #2
 80024a4:	f7ff fe1d 	bl	80020e2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a8:	2001      	movs	r0, #1
 80024aa:	f7ff fe1a 	bl	80020e2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ae:	2008      	movs	r0, #8
 80024b0:	f7ff fe17 	bl	80020e2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80024b4:	2200      	movs	r2, #0
 80024b6:	2123      	movs	r1, #35	; 0x23
 80024b8:	4821      	ldr	r0, [pc, #132]	; (8002540 <MX_GPIO_Init+0xb8>)
 80024ba:	f001 fa9b 	bl	80039f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80024be:	2310      	movs	r3, #16
 80024c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c8:	2301      	movs	r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	481c      	ldr	r0, [pc, #112]	; (8002544 <MX_GPIO_Init+0xbc>)
 80024d2:	f001 f91f 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80024d6:	2323      	movs	r3, #35	; 0x23
 80024d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024da:	2301      	movs	r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	4619      	mov	r1, r3
 80024ea:	4815      	ldr	r0, [pc, #84]	; (8002540 <MX_GPIO_Init+0xb8>)
 80024ec:	f001 f912 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80024f0:	2303      	movs	r3, #3
 80024f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4811      	ldr	r0, [pc, #68]	; (8002548 <MX_GPIO_Init+0xc0>)
 8002504:	f001 f906 	bl	8003714 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002508:	2200      	movs	r2, #0
 800250a:	2100      	movs	r1, #0
 800250c:	2006      	movs	r0, #6
 800250e:	f000 fd0c 	bl	8002f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002512:	2006      	movs	r0, #6
 8002514:	f000 fd23 	bl	8002f5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	2100      	movs	r1, #0
 800251c:	2007      	movs	r0, #7
 800251e:	f000 fd04 	bl	8002f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002522:	2007      	movs	r0, #7
 8002524:	f000 fd1b 	bl	8002f5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002528:	2200      	movs	r2, #0
 800252a:	2100      	movs	r1, #0
 800252c:	200a      	movs	r0, #10
 800252e:	f000 fcfc 	bl	8002f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002532:	200a      	movs	r0, #10
 8002534:	f000 fd13 	bl	8002f5e <HAL_NVIC_EnableIRQ>

}
 8002538:	bf00      	nop
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	48000400 	.word	0x48000400
 8002544:	48000800 	.word	0x48000800
 8002548:	48000c00 	.word	0x48000c00

0800254c <GetPage>:

/* USER CODE BEGIN 4 */
uint32_t GetPage(uint32_t Addr)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800255a:	0b1b      	lsrs	r3, r3, #12
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800256c:	b672      	cpsid	i
}
 800256e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002570:	e7fe      	b.n	8002570 <Error_Handler+0x8>

08002572 <LL_RCC_EnableRTC>:
{
 8002572:	b480      	push	{r7}
 8002574:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_AHB2_GRP1_EnableClock>:
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4013      	ands	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025b8:	68fb      	ldr	r3, [r7, #12]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_AHB3_GRP1_EnableClock>:
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4313      	orrs	r3, r2
 80025dc:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80025de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4013      	ands	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ea:	68fb      	ldr	r3, [r7, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002604:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002606:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4313      	orrs	r3, r2
 800260e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002614:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4013      	ands	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800261c:	68fb      	ldr	r3, [r7, #12]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002636:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002638:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4313      	orrs	r3, r2
 8002640:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4013      	ands	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800264e:	68fb      	ldr	r3, [r7, #12]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002660:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002664:	f7ff ffaf 	bl	80025c6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002668:	2200      	movs	r2, #0
 800266a:	2100      	movs	r1, #0
 800266c:	202e      	movs	r0, #46	; 0x2e
 800266e:	f000 fc5c 	bl	8002f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002672:	202e      	movs	r0, #46	; 0x2e
 8002674:	f000 fc73 	bl	8002f5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <HAL_IPCC_MspInit+0x44>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d113      	bne.n	80026b6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800268e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002692:	f7ff ff98 	bl	80025c6 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	202c      	movs	r0, #44	; 0x2c
 800269c:	f000 fc45 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80026a0:	202c      	movs	r0, #44	; 0x2c
 80026a2:	f000 fc5c 	bl	8002f5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	202d      	movs	r0, #45	; 0x2d
 80026ac:	f000 fc3d 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80026b0:	202d      	movs	r0, #45	; 0x2d
 80026b2:	f000 fc54 	bl	8002f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	58000c00 	.word	0x58000c00

080026c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b096      	sub	sp, #88	; 0x58
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	2250      	movs	r2, #80	; 0x50
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f008 f993 	bl	800aa00 <memset>
  if(hrtc->Instance==RTC)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_RTC_MspInit+0x64>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d11d      	bne.n	8002720 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026f0:	f107 0308 	add.w	r3, r7, #8
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 fed5 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002700:	f7ff ff32 	bl	8002568 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002704:	f7ff ff35 	bl	8002572 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002708:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800270c:	f7ff ff74 	bl	80025f8 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002710:	2200      	movs	r2, #0
 8002712:	2100      	movs	r1, #0
 8002714:	2003      	movs	r0, #3
 8002716:	f000 fc08 	bl	8002f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800271a:	2003      	movs	r0, #3
 800271c:	f000 fc1f 	bl	8002f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002720:	bf00      	nop
 8002722:	3758      	adds	r7, #88	; 0x58
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40002800 	.word	0x40002800

0800272c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b09c      	sub	sp, #112	; 0x70
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	2250      	movs	r2, #80	; 0x50
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f008 f957 	bl	800aa00 <memset>
  if(huart->Instance==USART1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a2a      	ldr	r2, [pc, #168]	; (8002800 <HAL_UART_MspInit+0xd4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d14d      	bne.n	80027f8 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800275c:	2301      	movs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002764:	f107 030c 	add.w	r3, r7, #12
 8002768:	4618      	mov	r0, r3
 800276a:	f002 fe9b 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002774:	f7ff fef8 	bl	8002568 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002778:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800277c:	f7ff ff55 	bl	800262a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002780:	2002      	movs	r0, #2
 8002782:	f7ff ff07 	bl	8002594 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002786:	23c0      	movs	r3, #192	; 0xc0
 8002788:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800278e:	2301      	movs	r3, #1
 8002790:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002796:	2307      	movs	r3, #7
 8002798:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800279e:	4619      	mov	r1, r3
 80027a0:	4818      	ldr	r0, [pc, #96]	; (8002804 <HAL_UART_MspInit+0xd8>)
 80027a2:	f000 ffb7 	bl	8003714 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80027a6:	4b18      	ldr	r3, [pc, #96]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027a8:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_UART_MspInit+0xe0>)
 80027aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80027ac:	4b16      	ldr	r3, [pc, #88]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027ae:	220f      	movs	r2, #15
 80027b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027b2:	4b15      	ldr	r3, [pc, #84]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027b4:	2210      	movs	r2, #16
 80027b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027be:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027c0:	2280      	movs	r2, #128	; 0x80
 80027c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027ca:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027d0:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027d6:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027dc:	480a      	ldr	r0, [pc, #40]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027de:	f000 fc03 	bl	8002fe8 <HAL_DMA_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80027e8:	f7ff febe 	bl	8002568 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a06      	ldr	r2, [pc, #24]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027f0:	67da      	str	r2, [r3, #124]	; 0x7c
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <HAL_UART_MspInit+0xdc>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3770      	adds	r7, #112	; 0x70
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40013800 	.word	0x40013800
 8002804:	48000400 	.word	0x48000400
 8002808:	20000b98 	.word	0x20000b98
 800280c:	40020444 	.word	0x40020444

08002810 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b09c      	sub	sp, #112	; 0x70
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002828:	f107 030c 	add.w	r3, r7, #12
 800282c:	2250      	movs	r2, #80	; 0x50
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f008 f8e5 	bl	800aa00 <memset>
  if(hpcd->Instance==USB)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_PCD_MspInit+0xa8>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d136      	bne.n	80028ae <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002844:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002846:	2318      	movs	r3, #24
 8002848:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800284a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002854:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002856:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800285a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800285c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002860:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002862:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002866:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	4618      	mov	r0, r3
 800286e:	f002 fe19 	bl	80054a4 <HAL_RCCEx_PeriphCLKConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002878:	f7ff fe76 	bl	8002568 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287c:	2001      	movs	r0, #1
 800287e:	f7ff fe89 	bl	8002594 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002882:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002886:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002894:	230a      	movs	r3, #10
 8002896:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002898:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800289c:	4619      	mov	r1, r3
 800289e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028a2:	f000 ff37 	bl	8003714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80028a6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80028aa:	f7ff fea5 	bl	80025f8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80028ae:	bf00      	nop
 80028b0:	3770      	adds	r7, #112	; 0x70
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40006800 	.word	0x40006800

080028bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c0:	e7fe      	b.n	80028c0 <NMI_Handler+0x4>

080028c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c2:	b480      	push	{r7}
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c6:	e7fe      	b.n	80028c6 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <MemManage_Handler+0x4>

080028ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <BusFault_Handler+0x4>

080028d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <UsageFault_Handler+0x4>

080028da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fa:	bf00      	nop
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002908:	f000 f9a8 	bl	8002c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002914:	f7ff f8d6 	bl	8001ac4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}

0800291c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8002920:	2001      	movs	r0, #1
 8002922:	f001 f899 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}

0800292a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 800292e:	2002      	movs	r0, #2
 8002930:	f001 f892 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}

08002938 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800293c:	2010      	movs	r0, #16
 800293e:	f001 f88b 	bl	8003a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}

08002946 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800294a:	f007 fc5d 	bl	800a208 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}

08002952 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002956:	f007 fc8f 	bl	800a278 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}

0800295e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002962:	f001 f89d 	bl	8003aa0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <DMA2_Channel4_IRQHandler+0x10>)
 8002972:	f000 fbe1 	bl	8003138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000b98 	.word	0x20000b98

08002980 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	e00a      	b.n	80029a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002992:	f3af 8000 	nop.w
 8002996:	4601      	mov	r1, r0
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	60ba      	str	r2, [r7, #8]
 800299e:	b2ca      	uxtb	r2, r1
 80029a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbf0      	blt.n	8002992 <_read+0x12>
  }

  return len;
 80029b0:	687b      	ldr	r3, [r7, #4]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e2:	605a      	str	r2, [r3, #4]
  return 0;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_isatty>:

int _isatty(int file)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3714      	adds	r7, #20
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <_sbrk+0x5c>)
 8002a2e:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <_sbrk+0x60>)
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <_sbrk+0x64>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d102      	bne.n	8002a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <_sbrk+0x64>)
 8002a42:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <_sbrk+0x68>)
 8002a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <_sbrk+0x64>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d207      	bcs.n	8002a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a54:	f007 ff9c 	bl	800a990 <__errno>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a62:	e009      	b.n	8002a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <_sbrk+0x64>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <_sbrk+0x64>)
 8002a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a76:	68fb      	ldr	r3, [r7, #12]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	20030000 	.word	0x20030000
 8002a84:	00000400 	.word	0x00000400
 8002a88:	20000eec 	.word	0x20000eec
 8002a8c:	20001400 	.word	0x20001400

08002a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002a94:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <SystemInit+0x98>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <SystemInit+0x98>)
 8002a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002abc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac8:	4b18      	ldr	r3, [pc, #96]	; (8002b2c <SystemInit+0x9c>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ada:	f023 0305 	bic.w	r3, r3, #5
 8002ade:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afa:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <SystemInit+0xa0>)
 8002afc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <SystemInit+0xa0>)
 8002b04:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b14:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	619a      	str	r2, [r3, #24]
}
 8002b1e:	bf00      	nop
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00
 8002b2c:	faf6fefb 	.word	0xfaf6fefb
 8002b30:	22041000 	.word	0x22041000

08002b34 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002b34:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b36:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b38:	3304      	adds	r3, #4

08002b3a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b3a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b3c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002b3e:	d3f9      	bcc.n	8002b34 <CopyDataInit>
  bx lr
 8002b40:	4770      	bx	lr

08002b42 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002b42:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002b44:	3004      	adds	r0, #4

08002b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002b46:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002b48:	d3fb      	bcc.n	8002b42 <FillZerobss>
  bx lr
 8002b4a:	4770      	bx	lr

08002b4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b4c:	480c      	ldr	r0, [pc, #48]	; (8002b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b50:	f7ff ff9e 	bl	8002a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002b54:	480b      	ldr	r0, [pc, #44]	; (8002b84 <LoopForever+0x6>)
 8002b56:	490c      	ldr	r1, [pc, #48]	; (8002b88 <LoopForever+0xa>)
 8002b58:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <LoopForever+0xe>)
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f7ff ffed 	bl	8002b3a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002b60:	480b      	ldr	r0, [pc, #44]	; (8002b90 <LoopForever+0x12>)
 8002b62:	490c      	ldr	r1, [pc, #48]	; (8002b94 <LoopForever+0x16>)
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <LoopForever+0x1a>)
 8002b66:	2300      	movs	r3, #0
 8002b68:	f7ff ffe7 	bl	8002b3a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002b6c:	480b      	ldr	r0, [pc, #44]	; (8002b9c <LoopForever+0x1e>)
 8002b6e:	490c      	ldr	r1, [pc, #48]	; (8002ba0 <LoopForever+0x22>)
 8002b70:	2300      	movs	r3, #0
 8002b72:	f7ff ffe8 	bl	8002b46 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002b76:	f007 ff11 	bl	800a99c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002b7a:	f7ff fae7 	bl	800214c <main>

08002b7e <LoopForever>:

LoopForever:
  b LoopForever
 8002b7e:	e7fe      	b.n	8002b7e <LoopForever>
  ldr   r0, =_estack
 8002b80:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002b84:	20000008 	.word	0x20000008
 8002b88:	20000114 	.word	0x20000114
 8002b8c:	0800d114 	.word	0x0800d114
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002b90:	200301e3 	.word	0x200301e3
 8002b94:	200301e3 	.word	0x200301e3
 8002b98:	0800dae9 	.word	0x0800dae9
  INIT_BSS _sbss, _ebss
 8002b9c:	200009e8 	.word	0x200009e8
 8002ba0:	20001400 	.word	0x20001400

08002ba4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ba4:	e7fe      	b.n	8002ba4 <ADC1_IRQHandler>
	...

08002ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_Init+0x3c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	; (8002be4 <HAL_Init+0x3c>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bbe:	2003      	movs	r0, #3
 8002bc0:	f000 f9a8 	bl	8002f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f000 f80f 	bl	8002be8 <HAL_InitTick>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d002      	beq.n	8002bd6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	71fb      	strb	r3, [r7, #7]
 8002bd4:	e001      	b.n	8002bda <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bd6:	f7ff fd41 	bl	800265c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bda:	79fb      	ldrb	r3, [r7, #7]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	58004000 	.word	0x58004000

08002be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002bf4:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_InitTick+0x6c>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d024      	beq.n	8002c46 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002bfc:	f002 f9b2 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_InitTick+0x6c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 f9be 	bl	8002f96 <HAL_SYSTICK_Config>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d10f      	bne.n	8002c40 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b0f      	cmp	r3, #15
 8002c24:	d809      	bhi.n	8002c3a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c26:	2200      	movs	r2, #0
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2e:	f000 f97c 	bl	8002f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c32:	4a09      	ldr	r2, [pc, #36]	; (8002c58 <HAL_InitTick+0x70>)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	e007      	b.n	8002c4a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	e004      	b.n	8002c4a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
 8002c44:	e001      	b.n	8002c4a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000010 	.word	0x20000010
 8002c58:	2000000c 	.word	0x2000000c

08002c5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_IncTick+0x20>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_IncTick+0x24>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <HAL_IncTick+0x24>)
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000010 	.word	0x20000010
 8002c80:	20000ef0 	.word	0x20000ef0

08002c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return uwTick;
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_GetTick+0x14>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000ef0 	.word	0x20000ef0

08002c9c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	; (8002cb0 <HAL_GetTickPrio+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	2000000c 	.word	0x2000000c

08002cb4 <__NVIC_SetPriorityGrouping>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce6:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60d3      	str	r3, [r2, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_GetPriorityGrouping>:
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <__NVIC_GetPriorityGrouping+0x18>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	f003 0307 	and.w	r3, r3, #7
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_EnableIRQ>:
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db0b      	blt.n	8002d42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4907      	ldr	r1, [pc, #28]	; (8002d50 <__NVIC_EnableIRQ+0x38>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2001      	movs	r0, #1
 8002d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000e100 	.word	0xe000e100

08002d54 <__NVIC_DisableIRQ>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	db12      	blt.n	8002d8c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	f003 021f 	and.w	r2, r3, #31
 8002d6c:	490a      	ldr	r1, [pc, #40]	; (8002d98 <__NVIC_DisableIRQ+0x44>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	2001      	movs	r0, #1
 8002d76:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7a:	3320      	adds	r3, #32
 8002d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002d80:	f3bf 8f4f 	dsb	sy
}
 8002d84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d86:	f3bf 8f6f 	isb	sy
}
 8002d8a:	bf00      	nop
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_SetPendingIRQ>:
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	db0c      	blt.n	8002dc8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dae:	79fb      	ldrb	r3, [r7, #7]
 8002db0:	f003 021f 	and.w	r2, r3, #31
 8002db4:	4907      	ldr	r1, [pc, #28]	; (8002dd4 <__NVIC_SetPendingIRQ+0x38>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002dc2:	3340      	adds	r3, #64	; 0x40
 8002dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000e100 	.word	0xe000e100

08002dd8 <__NVIC_ClearPendingIRQ>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	db0c      	blt.n	8002e04 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f003 021f 	and.w	r2, r3, #31
 8002df0:	4907      	ldr	r1, [pc, #28]	; (8002e10 <__NVIC_ClearPendingIRQ+0x38>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	2001      	movs	r0, #1
 8002dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfe:	3360      	adds	r3, #96	; 0x60
 8002e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	e000e100 	.word	0xe000e100

08002e14 <__NVIC_SetPriority>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	db0a      	blt.n	8002e3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	490c      	ldr	r1, [pc, #48]	; (8002e60 <__NVIC_SetPriority+0x4c>)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	440b      	add	r3, r1
 8002e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e3c:	e00a      	b.n	8002e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	4908      	ldr	r1, [pc, #32]	; (8002e64 <__NVIC_SetPriority+0x50>)
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	3b04      	subs	r3, #4
 8002e4c:	0112      	lsls	r2, r2, #4
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	440b      	add	r3, r1
 8002e52:	761a      	strb	r2, [r3, #24]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	e000e100 	.word	0xe000e100
 8002e64:	e000ed00 	.word	0xe000ed00

08002e68 <NVIC_EncodePriority>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f1c3 0307 	rsb	r3, r3, #7
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	bf28      	it	cs
 8002e86:	2304      	movcs	r3, #4
 8002e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	2b06      	cmp	r3, #6
 8002e90:	d902      	bls.n	8002e98 <NVIC_EncodePriority+0x30>
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3b03      	subs	r3, #3
 8002e96:	e000      	b.n	8002e9a <NVIC_EncodePriority+0x32>
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43da      	mvns	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	401a      	ands	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eba:	43d9      	mvns	r1, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	4313      	orrs	r3, r2
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3724      	adds	r7, #36	; 0x24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
	...

08002ed0 <SysTick_Config>:
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee0:	d301      	bcc.n	8002ee6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00f      	b.n	8002f06 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <SysTick_Config+0x40>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eee:	210f      	movs	r1, #15
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	f7ff ff8e 	bl	8002e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <SysTick_Config+0x40>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <SysTick_Config+0x40>)
 8002f00:	2207      	movs	r2, #7
 8002f02:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	e000e010 	.word	0xe000e010

08002f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7ff fec9 	bl	8002cb4 <__NVIC_SetPriorityGrouping>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b086      	sub	sp, #24
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	4603      	mov	r3, r0
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f38:	f7ff fee0 	bl	8002cfc <__NVIC_GetPriorityGrouping>
 8002f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	6978      	ldr	r0, [r7, #20]
 8002f44:	f7ff ff90 	bl	8002e68 <NVIC_EncodePriority>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff5f 	bl	8002e14 <__NVIC_SetPriority>
}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fed3 	bl	8002d18 <__NVIC_EnableIRQ>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fee3 	bl	8002d54 <__NVIC_DisableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ff96 	bl	8002ed0 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff feed 	bl	8002d9c <__NVIC_SetPendingIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fefd 	bl	8002dd8 <__NVIC_ClearPendingIRQ>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e08e      	b.n	8003118 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_DMA_Init+0x138>)
 8003002:	429a      	cmp	r2, r3
 8003004:	d80f      	bhi.n	8003026 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	4b45      	ldr	r3, [pc, #276]	; (8003124 <HAL_DMA_Init+0x13c>)
 800300e:	4413      	add	r3, r2
 8003010:	4a45      	ldr	r2, [pc, #276]	; (8003128 <HAL_DMA_Init+0x140>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	009a      	lsls	r2, r3, #2
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a42      	ldr	r2, [pc, #264]	; (800312c <HAL_DMA_Init+0x144>)
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
 8003024:	e00e      	b.n	8003044 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	4b40      	ldr	r3, [pc, #256]	; (8003130 <HAL_DMA_Init+0x148>)
 800302e:	4413      	add	r3, r2
 8003030:	4a3d      	ldr	r2, [pc, #244]	; (8003128 <HAL_DMA_Init+0x140>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	091b      	lsrs	r3, r3, #4
 8003038:	009a      	lsls	r2, r3, #2
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a3c      	ldr	r2, [pc, #240]	; (8003134 <HAL_DMA_Init+0x14c>)
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8fe 	bl	8003298 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030a4:	d102      	bne.n	80030ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80030b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030c2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d010      	beq.n	80030ee <HAL_DMA_Init+0x106>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	d80c      	bhi.n	80030ee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f91d 	bl	8003314 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	e008      	b.n	8003100 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40020407 	.word	0x40020407
 8003124:	bffdfff8 	.word	0xbffdfff8
 8003128:	cccccccd 	.word	0xcccccccd
 800312c:	40020000 	.word	0x40020000
 8003130:	bffdfbf8 	.word	0xbffdfbf8
 8003134:	40020400 	.word	0x40020400

08003138 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	f003 031c 	and.w	r3, r3, #28
 8003158:	2204      	movs	r2, #4
 800315a:	409a      	lsls	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d026      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x7a>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	d021      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d107      	bne.n	800318c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0204 	bic.w	r2, r2, #4
 800318a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	f003 021c 	and.w	r2, r3, #28
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	2104      	movs	r1, #4
 800319a:	fa01 f202 	lsl.w	r2, r1, r2
 800319e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d071      	beq.n	800328c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031b0:	e06c      	b.n	800328c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f003 031c 	and.w	r3, r3, #28
 80031ba:	2202      	movs	r2, #2
 80031bc:	409a      	lsls	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d02e      	beq.n	8003224 <HAL_DMA_IRQHandler+0xec>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d029      	beq.n	8003224 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10b      	bne.n	80031f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 020a 	bic.w	r2, r2, #10
 80031ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f003 021c 	and.w	r2, r3, #28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2102      	movs	r1, #2
 8003204:	fa01 f202 	lsl.w	r2, r1, r2
 8003208:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d038      	beq.n	800328c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003222:	e033      	b.n	800328c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003228:	f003 031c 	and.w	r3, r3, #28
 800322c:	2208      	movs	r2, #8
 800322e:	409a      	lsls	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d02a      	beq.n	800328e <HAL_DMA_IRQHandler+0x156>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d025      	beq.n	800328e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 020e 	bic.w	r2, r2, #14
 8003250:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	f003 021c 	and.w	r2, r3, #28
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2101      	movs	r1, #1
 8003260:	fa01 f202 	lsl.w	r2, r1, r2
 8003264:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	2b00      	cmp	r3, #0
 8003282:	d004      	beq.n	800328e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800328c:	bf00      	nop
 800328e:	bf00      	nop
}
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	4b17      	ldr	r3, [pc, #92]	; (8003304 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d80a      	bhi.n	80032c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032b8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6493      	str	r3, [r2, #72]	; 0x48
 80032c0:	e007      	b.n	80032d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	089b      	lsrs	r3, r3, #2
 80032c8:	009a      	lsls	r2, r3, #2
 80032ca:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032cc:	4413      	add	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	3b08      	subs	r3, #8
 80032da:	4a0c      	ldr	r2, [pc, #48]	; (800330c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	091b      	lsrs	r3, r3, #4
 80032e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80032e8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	2201      	movs	r2, #1
 80032f2:	409a      	lsls	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40020407 	.word	0x40020407
 8003308:	4002081c 	.word	0x4002081c
 800330c:	cccccccd 	.word	0xcccccccd
 8003310:	40020880 	.word	0x40020880

08003314 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003324:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	461a      	mov	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a09      	ldr	r2, [pc, #36]	; (800335c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003338:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3b01      	subs	r3, #1
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2201      	movs	r2, #1
 8003344:	409a      	lsls	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	1000823f 	.word	0x1000823f
 800335c:	40020940 	.word	0x40020940

08003360 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_FLASH_Program+0x80>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_FLASH_Program+0x1a>
 8003376:	2302      	movs	r3, #2
 8003378:	e02d      	b.n	80033d6 <HAL_FLASH_Program+0x76>
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_FLASH_Program+0x80>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_FLASH_Program+0x80>)
 8003382:	2200      	movs	r2, #0
 8003384:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800338a:	f000 f869 	bl	8003460 <FLASH_WaitForLastOperation>
 800338e:	4603      	mov	r3, r0
 8003390:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003392:	7dfb      	ldrb	r3, [r7, #23]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d11a      	bne.n	80033ce <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800339e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033a2:	68b8      	ldr	r0, [r7, #8]
 80033a4:	f000 f8cc 	bl	8003540 <FLASH_Program_DoubleWord>
 80033a8:	e004      	b.n	80033b4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	4619      	mov	r1, r3
 80033ae:	68b8      	ldr	r0, [r7, #8]
 80033b0:	f008 fbbe 	bl	800bb30 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80033b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033b8:	f000 f852 	bl	8003460 <FLASH_WaitForLastOperation>
 80033bc:	4603      	mov	r3, r0
 80033be:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <HAL_FLASH_Program+0x84>)
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	43db      	mvns	r3, r3
 80033c8:	4906      	ldr	r1, [pc, #24]	; (80033e4 <HAL_FLASH_Program+0x84>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <HAL_FLASH_Program+0x80>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000ef4 	.word	0x20000ef4
 80033e4:	58004000 	.word	0x58004000

080033e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_FLASH_Unlock+0x38>)
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	da0b      	bge.n	8003412 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_FLASH_Unlock+0x38>)
 80033fc:	4a09      	ldr	r2, [pc, #36]	; (8003424 <HAL_FLASH_Unlock+0x3c>)
 80033fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003400:	4b07      	ldr	r3, [pc, #28]	; (8003420 <HAL_FLASH_Unlock+0x38>)
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <HAL_FLASH_Unlock+0x40>)
 8003404:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_FLASH_Unlock+0x38>)
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	da01      	bge.n	8003412 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003412:	79fb      	ldrb	r3, [r7, #7]
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	58004000 	.word	0x58004000
 8003424:	45670123 	.word	0x45670123
 8003428:	cdef89ab 	.word	0xcdef89ab

0800342c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003436:	4b09      	ldr	r3, [pc, #36]	; (800345c <HAL_FLASH_Lock+0x30>)
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	4a08      	ldr	r2, [pc, #32]	; (800345c <HAL_FLASH_Lock+0x30>)
 800343c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003440:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_FLASH_Lock+0x30>)
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	db01      	blt.n	800344e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800344e:	79fb      	ldrb	r3, [r7, #7]
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	58004000 	.word	0x58004000

08003460 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8003468:	f7ff fc0c 	bl	8002c84 <HAL_GetTick>
 800346c:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800346e:	e009      	b.n	8003484 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003470:	f7ff fc08 	bl	8002c84 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d801      	bhi.n	8003484 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e054      	b.n	800352e <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003484:	4b2c      	ldr	r3, [pc, #176]	; (8003538 <FLASH_WaitForLastOperation+0xd8>)
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d0ee      	beq.n	8003470 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8003492:	4b29      	ldr	r3, [pc, #164]	; (8003538 <FLASH_WaitForLastOperation+0xd8>)
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80034a2:	4b25      	ldr	r3, [pc, #148]	; (8003538 <FLASH_WaitForLastOperation+0xd8>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80034b2:	4b21      	ldr	r3, [pc, #132]	; (8003538 <FLASH_WaitForLastOperation+0xd8>)
 80034b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80034b8:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80034c8:	4013      	ands	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <FLASH_WaitForLastOperation+0x86>
 80034d6:	4b18      	ldr	r3, [pc, #96]	; (8003538 <FLASH_WaitForLastOperation+0xd8>)
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80034e0:	4915      	ldr	r1, [pc, #84]	; (8003538 <FLASH_WaitForLastOperation+0xd8>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	618b      	str	r3, [r1, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <FLASH_WaitForLastOperation+0x9a>
 80034f0:	4a11      	ldr	r2, [pc, #68]	; (8003538 <FLASH_WaitForLastOperation+0xd8>)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80034f8:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00e      	beq.n	800351e <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003500:	4a0e      	ldr	r2, [pc, #56]	; (800353c <FLASH_WaitForLastOperation+0xdc>)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e011      	b.n	800352e <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800350a:	f7ff fbbb 	bl	8002c84 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	429a      	cmp	r2, r3
 8003518:	d801      	bhi.n	800351e <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e007      	b.n	800352e <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800351e:	4b06      	ldr	r3, [pc, #24]	; (8003538 <FLASH_WaitForLastOperation+0xd8>)
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003526:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800352a:	d0ee      	beq.n	800350a <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	58004000 	.word	0x58004000
 800353c:	20000ef4 	.word	0x20000ef4

08003540 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800354c:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <FLASH_Program_DoubleWord+0x48>)
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	4a0d      	ldr	r2, [pc, #52]	; (8003588 <FLASH_Program_DoubleWord+0x48>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800355e:	f3bf 8f6f 	isb	sy
}
 8003562:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003564:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	000a      	movs	r2, r1
 8003572:	2300      	movs	r3, #0
 8003574:	68f9      	ldr	r1, [r7, #12]
 8003576:	3104      	adds	r1, #4
 8003578:	4613      	mov	r3, r2
 800357a:	600b      	str	r3, [r1, #0]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	58004000 	.word	0x58004000

0800358c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_FLASHEx_Erase+0x9c>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_FLASHEx_Erase+0x16>
 800359e:	2302      	movs	r3, #2
 80035a0:	e03d      	b.n	800361e <HAL_FLASHEx_Erase+0x92>
 80035a2:	4b21      	ldr	r3, [pc, #132]	; (8003628 <HAL_FLASHEx_Erase+0x9c>)
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035a8:	4b1f      	ldr	r3, [pc, #124]	; (8003628 <HAL_FLASHEx_Erase+0x9c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035b2:	f7ff ff55 	bl	8003460 <FLASH_WaitForLastOperation>
 80035b6:	4603      	mov	r3, r0
 80035b8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d12a      	bne.n	8003616 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d124      	bne.n	8003612 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f04f 32ff 	mov.w	r2, #4294967295
 80035ce:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	e012      	b.n	80035fe <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80035d8:	68b8      	ldr	r0, [r7, #8]
 80035da:	f000 f827 	bl	800362c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80035de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80035e2:	f7ff ff3d 	bl	8003460 <FLASH_WaitForLastOperation>
 80035e6:	4603      	mov	r3, r0
 80035e8:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	601a      	str	r2, [r3, #0]
          break;
 80035f6:	e00a      	b.n	800360e <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	3301      	adds	r3, #1
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	4413      	add	r3, r2
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d3e4      	bcc.n	80035d8 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800360e:	f000 f86f 	bl	80036f0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003612:	f000 f825 	bl	8003660 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003616:	4b04      	ldr	r3, [pc, #16]	; (8003628 <HAL_FLASHEx_Erase+0x9c>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]

  return status;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000ef4 	.word	0x20000ef4

0800362c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003634:	4b09      	ldr	r3, [pc, #36]	; (800365c <FLASH_PageErase+0x30>)
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4313      	orrs	r3, r2
 8003642:	4a06      	ldr	r2, [pc, #24]	; (800365c <FLASH_PageErase+0x30>)
 8003644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003648:	f043 0302 	orr.w	r3, r3, #2
 800364c:	6153      	str	r3, [r2, #20]
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	58004000 	.word	0x58004000

08003660 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8003664:	4b21      	ldr	r3, [pc, #132]	; (80036ec <FLASH_FlushCaches+0x8c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003670:	d117      	bne.n	80036a2 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <FLASH_FlushCaches+0x8c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1d      	ldr	r2, [pc, #116]	; (80036ec <FLASH_FlushCaches+0x8c>)
 8003678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800367c:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800367e:	4b1b      	ldr	r3, [pc, #108]	; (80036ec <FLASH_FlushCaches+0x8c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <FLASH_FlushCaches+0x8c>)
 8003684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <FLASH_FlushCaches+0x8c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a17      	ldr	r2, [pc, #92]	; (80036ec <FLASH_FlushCaches+0x8c>)
 8003690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003694:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003696:	4b15      	ldr	r3, [pc, #84]	; (80036ec <FLASH_FlushCaches+0x8c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a14      	ldr	r2, [pc, #80]	; (80036ec <FLASH_FlushCaches+0x8c>)
 800369c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a0:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <FLASH_FlushCaches+0x8c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ae:	d117      	bne.n	80036e0 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80036b0:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <FLASH_FlushCaches+0x8c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <FLASH_FlushCaches+0x8c>)
 80036b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <FLASH_FlushCaches+0x8c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <FLASH_FlushCaches+0x8c>)
 80036c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <FLASH_FlushCaches+0x8c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a07      	ldr	r2, [pc, #28]	; (80036ec <FLASH_FlushCaches+0x8c>)
 80036ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <FLASH_FlushCaches+0x8c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a04      	ldr	r2, [pc, #16]	; (80036ec <FLASH_FlushCaches+0x8c>)
 80036da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036de:	6013      	str	r3, [r2, #0]
  }
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	58004000 	.word	0x58004000

080036f0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <FLASH_AcknowledgePageErase+0x20>)
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	4a05      	ldr	r2, [pc, #20]	; (8003710 <FLASH_AcknowledgePageErase+0x20>)
 80036fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80036fe:	f023 0302 	bic.w	r3, r3, #2
 8003702:	6153      	str	r3, [r2, #20]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	58004000 	.word	0x58004000

08003714 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003722:	e14c      	b.n	80039be <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2101      	movs	r1, #1
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	4013      	ands	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 813e 	beq.w	80039b8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	2b01      	cmp	r3, #1
 8003746:	d005      	beq.n	8003754 <HAL_GPIO_Init+0x40>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d130      	bne.n	80037b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	2203      	movs	r2, #3
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4013      	ands	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800378a:	2201      	movs	r2, #1
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 0201 	and.w	r2, r3, #1
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d017      	beq.n	80037f2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	2203      	movs	r2, #3
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43db      	mvns	r3, r3
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d123      	bne.n	8003846 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	08da      	lsrs	r2, r3, #3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3208      	adds	r2, #8
 8003806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	220f      	movs	r2, #15
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	08da      	lsrs	r2, r3, #3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3208      	adds	r2, #8
 8003840:	6939      	ldr	r1, [r7, #16]
 8003842:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	2203      	movs	r2, #3
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f003 0203 	and.w	r2, r3, #3
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8098 	beq.w	80039b8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003888:	4a54      	ldr	r2, [pc, #336]	; (80039dc <HAL_GPIO_Init+0x2c8>)
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	089b      	lsrs	r3, r3, #2
 800388e:	3302      	adds	r3, #2
 8003890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003894:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	220f      	movs	r2, #15
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038b2:	d019      	beq.n	80038e8 <HAL_GPIO_Init+0x1d4>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a4a      	ldr	r2, [pc, #296]	; (80039e0 <HAL_GPIO_Init+0x2cc>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <HAL_GPIO_Init+0x1d0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a49      	ldr	r2, [pc, #292]	; (80039e4 <HAL_GPIO_Init+0x2d0>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00d      	beq.n	80038e0 <HAL_GPIO_Init+0x1cc>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a48      	ldr	r2, [pc, #288]	; (80039e8 <HAL_GPIO_Init+0x2d4>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <HAL_GPIO_Init+0x1c8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a47      	ldr	r2, [pc, #284]	; (80039ec <HAL_GPIO_Init+0x2d8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <HAL_GPIO_Init+0x1c4>
 80038d4:	2304      	movs	r3, #4
 80038d6:	e008      	b.n	80038ea <HAL_GPIO_Init+0x1d6>
 80038d8:	2307      	movs	r3, #7
 80038da:	e006      	b.n	80038ea <HAL_GPIO_Init+0x1d6>
 80038dc:	2303      	movs	r3, #3
 80038de:	e004      	b.n	80038ea <HAL_GPIO_Init+0x1d6>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e002      	b.n	80038ea <HAL_GPIO_Init+0x1d6>
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <HAL_GPIO_Init+0x1d6>
 80038e8:	2300      	movs	r3, #0
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	f002 0203 	and.w	r2, r2, #3
 80038f0:	0092      	lsls	r2, r2, #2
 80038f2:	4093      	lsls	r3, r2
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038fa:	4938      	ldr	r1, [pc, #224]	; (80039dc <HAL_GPIO_Init+0x2c8>)
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	089b      	lsrs	r3, r3, #2
 8003900:	3302      	adds	r3, #2
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003908:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <HAL_GPIO_Init+0x2dc>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	43db      	mvns	r3, r3
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800392c:	4a30      	ldr	r2, [pc, #192]	; (80039f0 <HAL_GPIO_Init+0x2dc>)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003932:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <HAL_GPIO_Init+0x2dc>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003956:	4a26      	ldr	r2, [pc, #152]	; (80039f0 <HAL_GPIO_Init+0x2dc>)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800395c:	4b24      	ldr	r3, [pc, #144]	; (80039f0 <HAL_GPIO_Init+0x2dc>)
 800395e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	43db      	mvns	r3, r3
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4013      	ands	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003982:	4a1b      	ldr	r2, [pc, #108]	; (80039f0 <HAL_GPIO_Init+0x2dc>)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_GPIO_Init+0x2dc>)
 800398c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	43db      	mvns	r3, r3
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4013      	ands	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039b0:	4a0f      	ldr	r2, [pc, #60]	; (80039f0 <HAL_GPIO_Init+0x2dc>)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	3301      	adds	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f47f aeab 	bne.w	8003724 <HAL_GPIO_Init+0x10>
  }
}
 80039ce:	bf00      	nop
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40010000 	.word	0x40010000
 80039e0:	48000400 	.word	0x48000400
 80039e4:	48000800 	.word	0x48000800
 80039e8:	48000c00 	.word	0x48000c00
 80039ec:	48001000 	.word	0x48001000
 80039f0:	58000800 	.word	0x58000800

080039f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	807b      	strh	r3, [r7, #2]
 8003a00:	4613      	mov	r3, r2
 8003a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a04:	787b      	ldrb	r3, [r7, #1]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a0a:	887a      	ldrh	r2, [r7, #2]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a10:	e002      	b.n	8003a18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	041a      	lsls	r2, r3, #16
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	43d9      	mvns	r1, r3
 8003a42:	887b      	ldrh	r3, [r7, #2]
 8003a44:	400b      	ands	r3, r1
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a64:	68da      	ldr	r2, [r3, #12]
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d006      	beq.n	8003a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a6e:	4a05      	ldr	r2, [pc, #20]	; (8003a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f806 	bl	8003a88 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	58000800 	.word	0x58000800

08003a88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003aa6:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <HAL_HSEM_IRQHandler+0x30>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <HAL_HSEM_IRQHandler+0x30>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	4906      	ldr	r1, [pc, #24]	; (8003ad0 <HAL_HSEM_IRQHandler+0x30>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003aba:	4a05      	ldr	r2, [pc, #20]	; (8003ad0 <HAL_HSEM_IRQHandler+0x30>)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f807 	bl	8003ad4 <HAL_HSEM_FreeCallback>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	58001500 	.word	0x58001500

08003ad4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01e      	beq.n	8003b38 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_IPCC_Init+0x60>)
 8003afc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d102      	bne.n	8003b10 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fe fdb6 	bl	800267c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003b10:	68b8      	ldr	r0, [r7, #8]
 8003b12:	f000 f85b 	bl	8003bcc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f82c 	bl	8003b80 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003b36:	e001      	b.n	8003b3c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	58000c00 	.word	0x58000c00

08003b4c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	4613      	mov	r3, r2
 8003b58:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	4613      	mov	r3, r2
 8003b72:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	e00f      	b.n	8003bae <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <IPCC_SetDefaultCallbacks+0x44>)
 8003b98:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3306      	adds	r3, #6
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4a08      	ldr	r2, [pc, #32]	; (8003bc8 <IPCC_SetDefaultCallbacks+0x48>)
 8003ba6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	3301      	adds	r3, #1
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b05      	cmp	r3, #5
 8003bb2:	d9ec      	bls.n	8003b8e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	08003b4d 	.word	0x08003b4d
 8003bc8:	08003b67 	.word	0x08003b67

08003bcc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003be0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	223f      	movs	r2, #63	; 0x3f
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bf6:	b08b      	sub	sp, #44	; 0x2c
 8003bf8:	af06      	add	r7, sp, #24
 8003bfa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0cb      	b.n	8003d9e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe fdf8 	bl	8002810 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2203      	movs	r2, #3
 8003c24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f002 fdd7 	bl	80067e0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c32:	2300      	movs	r3, #0
 8003c34:	73fb      	strb	r3, [r7, #15]
 8003c36:	e040      	b.n	8003cba <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	440b      	add	r3, r1
 8003c48:	3301      	adds	r3, #1
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	440b      	add	r3, r1
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
 8003c72:	3303      	adds	r3, #3
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c78:	7bfa      	ldrb	r2, [r7, #15]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	440b      	add	r3, r1
 8003c86:	3338      	adds	r3, #56	; 0x38
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c8c:	7bfa      	ldrb	r2, [r7, #15]
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	333c      	adds	r3, #60	; 0x3c
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	440b      	add	r3, r1
 8003cae:	3340      	adds	r3, #64	; 0x40
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cb4:	7bfb      	ldrb	r3, [r7, #15]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d3b9      	bcc.n	8003c38 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	73fb      	strb	r3, [r7, #15]
 8003cc8:	e044      	b.n	8003d54 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	440b      	add	r3, r1
 8003cd8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	440b      	add	r3, r1
 8003cee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cf2:	7bfa      	ldrb	r2, [r7, #15]
 8003cf4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	440b      	add	r3, r1
 8003d04:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	440b      	add	r3, r1
 8003d1a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	440b      	add	r3, r1
 8003d30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	440b      	add	r3, r1
 8003d46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	3301      	adds	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d3b5      	bcc.n	8003cca <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	687e      	ldr	r6, [r7, #4]
 8003d66:	466d      	mov	r5, sp
 8003d68:	f106 0410 	add.w	r4, r6, #16
 8003d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	602b      	str	r3, [r5, #0]
 8003d74:	1d33      	adds	r3, r6, #4
 8003d76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d78:	6838      	ldr	r0, [r7, #0]
 8003d7a:	f002 fd4c 	bl	8006816 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d102      	bne.n	8003d9c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f805 	bl	8003da6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003da6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f043 0302 	orr.w	r3, r3, #2
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e00:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a04      	ldr	r2, [pc, #16]	; (8003e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0a:	6013      	str	r3, [r2, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	58000400 	.word	0x58000400

08003e1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	58000400 	.word	0x58000400

08003e38 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e4a:	d101      	bne.n	8003e50 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e000      	b.n	8003e52 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <LL_RCC_HSE_Enable>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_RCC_HSE_Disable>:
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8c:	6013      	str	r3, [r2, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_RCC_HSE_IsReady>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eaa:	d101      	bne.n	8003eb0 <LL_RCC_HSE_IsReady+0x18>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <LL_RCC_HSE_IsReady+0x1a>
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_RCC_HSI_Enable>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ece:	6013      	str	r3, [r2, #0]
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <LL_RCC_HSI_Disable>:
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eec:	6013      	str	r3, [r2, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_RCC_HSI_IsReady>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0a:	d101      	bne.n	8003f10 <LL_RCC_HSI_IsReady+0x18>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <LL_RCC_HSI_IsReady+0x1a>
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_RCC_HSI_SetCalibTrimming>:
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	061b      	lsls	r3, r3, #24
 8003f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f36:	4313      	orrs	r3, r2
 8003f38:	604b      	str	r3, [r1, #4]
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <LL_RCC_HSI48_Enable>:
{
 8003f46:	b480      	push	{r7}
 8003f48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f5e:	bf00      	nop
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_RCC_HSI48_Disable>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_RCC_HSI48_IsReady>:
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d101      	bne.n	8003fa2 <LL_RCC_HSI48_IsReady+0x18>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <LL_RCC_HSI48_IsReady+0x1a>
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_RCC_LSE_Enable>:
{
 8003fae:	b480      	push	{r7}
 8003fb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fc6:	bf00      	nop
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_RCC_LSE_Disable>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_RCC_LSE_EnableBypass>:
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004002:	f043 0304 	orr.w	r3, r3, #4
 8004006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800400a:	bf00      	nop
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_RCC_LSE_DisableBypass>:
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004024:	f023 0304 	bic.w	r3, r3, #4
 8004028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800402c:	bf00      	nop
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_RCC_LSE_IsReady>:
{
 8004036:	b480      	push	{r7}
 8004038:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800403a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b02      	cmp	r3, #2
 8004048:	d101      	bne.n	800404e <LL_RCC_LSE_IsReady+0x18>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <LL_RCC_LSE_IsReady+0x1a>
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <LL_RCC_LSI1_Enable>:
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800405e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004072:	bf00      	nop
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_RCC_LSI1_Disable>:
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800408c:	f023 0301 	bic.w	r3, r3, #1
 8004090:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <LL_RCC_LSI1_IsReady>:
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d101      	bne.n	80040b6 <LL_RCC_LSI1_IsReady+0x18>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <LL_RCC_LSI1_IsReady+0x1a>
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <LL_RCC_LSI2_Enable>:
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80040c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040d2:	f043 0304 	orr.w	r3, r3, #4
 80040d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040da:	bf00      	nop
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <LL_RCC_LSI2_Disable>:
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80040e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040f4:	f023 0304 	bic.w	r3, r3, #4
 80040f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80040fc:	bf00      	nop
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <LL_RCC_LSI2_IsReady>:
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800410a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800410e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b08      	cmp	r3, #8
 8004118:	d101      	bne.n	800411e <LL_RCC_LSI2_IsReady+0x18>
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <LL_RCC_LSI2_IsReady+0x1a>
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <LL_RCC_LSI2_SetTrimming>:
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <LL_RCC_MSI_Enable>:
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	6013      	str	r3, [r2, #0]
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_RCC_MSI_Disable>:
{
 8004176:	b480      	push	{r7}
 8004178:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004184:	f023 0301 	bic.w	r3, r3, #1
 8004188:	6013      	str	r3, [r2, #0]
}
 800418a:	bf00      	nop
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <LL_RCC_MSI_IsReady>:
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d101      	bne.n	80041aa <LL_RCC_MSI_IsReady+0x16>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <LL_RCC_MSI_IsReady+0x18>
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_RCC_MSI_SetRange>:
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80041be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_RCC_MSI_GetRange>:
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80041e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2bb0      	cmp	r3, #176	; 0xb0
 80041f4:	d901      	bls.n	80041fa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80041f6:	23b0      	movs	r3, #176	; 0xb0
 80041f8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80041fa:	687b      	ldr	r3, [r7, #4]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004222:	4313      	orrs	r3, r2
 8004224:	604b      	str	r3, [r1, #4]
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <LL_RCC_SetSysClkSource>:
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 0203 	bic.w	r2, r3, #3
 8004244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <LL_RCC_GetSysClkSource>:
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 030c 	and.w	r3, r3, #12
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <LL_RCC_SetAHBPrescaler>:
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800427a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <LL_C2_RCC_SetAHBPrescaler>:
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <LL_RCC_SetAHB4Prescaler>:
{
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80042ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042d6:	f023 020f 	bic.w	r2, r3, #15
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	091b      	lsrs	r3, r3, #4
 80042de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_RCC_SetAPB1Prescaler>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004306:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <LL_RCC_SetAPB2Prescaler>:
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800432e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4313      	orrs	r3, r2
 8004336:	608b      	str	r3, [r1, #8]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_RCC_GetAHBPrescaler>:
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004352:	4618      	mov	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <LL_RCC_GetAHB4Prescaler>:
{
 800435c:	b480      	push	{r7}
 800435e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004364:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800436e:	4618      	mov	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_RCC_GetAPB1Prescaler>:
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800437c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004386:	4618      	mov	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <LL_RCC_GetAPB2Prescaler>:
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_RCC_PLL_Enable>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ba:	6013      	str	r3, [r2, #0]
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <LL_RCC_PLL_Disable>:
{
 80043c6:	b480      	push	{r7}
 80043c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80043ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d8:	6013      	str	r3, [r2, #0]
}
 80043da:	bf00      	nop
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <LL_RCC_PLL_IsReady>:
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043f6:	d101      	bne.n	80043fc <LL_RCC_PLL_IsReady+0x18>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <LL_RCC_PLL_IsReady+0x1a>
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_RCC_PLL_GetN>:
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800440c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004418:	4618      	mov	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_RCC_PLL_GetR>:
{
 8004422:	b480      	push	{r7}
 8004424:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <LL_RCC_PLL_GetDivider>:
{
 800443a:	b480      	push	{r7}
 800443c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800443e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr

08004452 <LL_RCC_PLL_GetMainSource>:
{
 8004452:	b480      	push	{r7}
 8004454:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f003 0303 	and.w	r3, r3, #3
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <LL_RCC_IsActiveFlag_HPRE>:
{
 800446a:	b480      	push	{r7}
 800446c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800446e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447c:	d101      	bne.n	8004482 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800448e:	b480      	push	{r7}
 8004490:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004496:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a2:	d101      	bne.n	80044a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80044b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c8:	d101      	bne.n	80044ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <LL_RCC_IsActiveFlag_PPRE1>:
{
 80044da:	b480      	push	{r7}
 80044dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80044de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ec:	d101      	bne.n	80044f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_RCC_IsActiveFlag_PPRE2>:
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800450c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004510:	d101      	bne.n	8004516 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004524:	b590      	push	{r4, r7, lr}
 8004526:	b08d      	sub	sp, #52	; 0x34
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e363      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 808d 	beq.w	800465e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004544:	f7ff fe89 	bl	800425a <LL_RCC_GetSysClkSource>
 8004548:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800454a:	f7ff ff82 	bl	8004452 <LL_RCC_PLL_GetMainSource>
 800454e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_RCC_OscConfig+0x3e>
 8004556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004558:	2b0c      	cmp	r3, #12
 800455a:	d147      	bne.n	80045ec <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	2b01      	cmp	r3, #1
 8004560:	d144      	bne.n	80045ec <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e347      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004572:	f7ff fe34 	bl	80041de <LL_RCC_MSI_GetRange>
 8004576:	4603      	mov	r3, r0
 8004578:	429c      	cmp	r4, r3
 800457a:	d914      	bls.n	80045a6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fd2f 	bl	8004fe4 <RCC_SetFlashLatencyFromMSIRange>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e336      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fe0e 	bl	80041b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fe32 	bl	8004208 <LL_RCC_MSI_SetCalibTrimming>
 80045a4:	e013      	b.n	80045ce <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fe03 	bl	80041b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fe27 	bl	8004208 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fd10 	bl	8004fe4 <RCC_SetFlashLatencyFromMSIRange>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e317      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80045ce:	f000 fcc9 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 80045d2:	4603      	mov	r3, r0
 80045d4:	4aa4      	ldr	r2, [pc, #656]	; (8004868 <HAL_RCC_OscConfig+0x344>)
 80045d6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045d8:	4ba4      	ldr	r3, [pc, #656]	; (800486c <HAL_RCC_OscConfig+0x348>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fe fb03 	bl	8002be8 <HAL_InitTick>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d039      	beq.n	800465c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e308      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01e      	beq.n	8004632 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045f4:	f7ff fdb0 	bl	8004158 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045f8:	f7fe fb44 	bl	8002c84 <HAL_GetTick>
 80045fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004600:	f7fe fb40 	bl	8002c84 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e2f5      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004612:	f7ff fdbf 	bl	8004194 <LL_RCC_MSI_IsReady>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f1      	beq.n	8004600 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fdc8 	bl	80041b6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fdec 	bl	8004208 <LL_RCC_MSI_SetCalibTrimming>
 8004630:	e015      	b.n	800465e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004632:	f7ff fda0 	bl	8004176 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004636:	f7fe fb25 	bl	8002c84 <HAL_GetTick>
 800463a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800463e:	f7fe fb21 	bl	8002c84 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e2d6      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004650:	f7ff fda0 	bl	8004194 <LL_RCC_MSI_IsReady>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f1      	bne.n	800463e <HAL_RCC_OscConfig+0x11a>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800465c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d047      	beq.n	80046fa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800466a:	f7ff fdf6 	bl	800425a <LL_RCC_GetSysClkSource>
 800466e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004670:	f7ff feef 	bl	8004452 <LL_RCC_PLL_GetMainSource>
 8004674:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d005      	beq.n	8004688 <HAL_RCC_OscConfig+0x164>
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b0c      	cmp	r3, #12
 8004680:	d108      	bne.n	8004694 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2b03      	cmp	r3, #3
 8004686:	d105      	bne.n	8004694 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d134      	bne.n	80046fa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e2b4      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800469c:	d102      	bne.n	80046a4 <HAL_RCC_OscConfig+0x180>
 800469e:	f7ff fbdd 	bl	8003e5c <LL_RCC_HSE_Enable>
 80046a2:	e001      	b.n	80046a8 <HAL_RCC_OscConfig+0x184>
 80046a4:	f7ff fbe9 	bl	8003e7a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d012      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fe fae8 	bl	8002c84 <HAL_GetTick>
 80046b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046b8:	f7fe fae4 	bl	8002c84 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e299      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80046ca:	f7ff fbe5 	bl	8003e98 <LL_RCC_HSE_IsReady>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f1      	beq.n	80046b8 <HAL_RCC_OscConfig+0x194>
 80046d4:	e011      	b.n	80046fa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fe fad5 	bl	8002c84 <HAL_GetTick>
 80046da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046de:	f7fe fad1 	bl	8002c84 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b64      	cmp	r3, #100	; 0x64
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e286      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80046f0:	f7ff fbd2 	bl	8003e98 <LL_RCC_HSE_IsReady>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f1      	bne.n	80046de <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d04c      	beq.n	80047a0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004706:	f7ff fda8 	bl	800425a <LL_RCC_GetSysClkSource>
 800470a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800470c:	f7ff fea1 	bl	8004452 <LL_RCC_PLL_GetMainSource>
 8004710:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d005      	beq.n	8004724 <HAL_RCC_OscConfig+0x200>
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d10e      	bne.n	800473c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b02      	cmp	r3, #2
 8004722:	d10b      	bne.n	800473c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e266      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fbf1 	bl	8003f1c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800473a:	e031      	b.n	80047a0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d019      	beq.n	8004778 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004744:	f7ff fbba 	bl	8003ebc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fe fa9c 	bl	8002c84 <HAL_GetTick>
 800474c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004750:	f7fe fa98 	bl	8002c84 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e24d      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004762:	f7ff fbc9 	bl	8003ef8 <LL_RCC_HSI_IsReady>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0f1      	beq.n	8004750 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fbd3 	bl	8003f1c <LL_RCC_HSI_SetCalibTrimming>
 8004776:	e013      	b.n	80047a0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004778:	f7ff fbaf 	bl	8003eda <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fe fa82 	bl	8002c84 <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004784:	f7fe fa7e 	bl	8002c84 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e233      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004796:	f7ff fbaf 	bl	8003ef8 <LL_RCC_HSI_IsReady>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f1      	bne.n	8004784 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80a3 	beq.w	8004900 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d076      	beq.n	80048b0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d046      	beq.n	800485c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80047ce:	f7ff fc66 	bl	800409e <LL_RCC_LSI1_IsReady>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d113      	bne.n	8004800 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80047d8:	f7ff fc3f 	bl	800405a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047dc:	f7fe fa52 	bl	8002c84 <HAL_GetTick>
 80047e0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80047e4:	f7fe fa4e 	bl	8002c84 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e203      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80047f6:	f7ff fc52 	bl	800409e <LL_RCC_LSI1_IsReady>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f1      	beq.n	80047e4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004800:	f7ff fc5f 	bl	80040c2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fe fa3e 	bl	8002c84 <HAL_GetTick>
 8004808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800480c:	f7fe fa3a 	bl	8002c84 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b03      	cmp	r3, #3
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e1ef      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800481e:	f7ff fc72 	bl	8004106 <LL_RCC_LSI2_IsReady>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f1      	beq.n	800480c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fc7c 	bl	800412a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004832:	f7ff fc23 	bl	800407c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fe fa25 	bl	8002c84 <HAL_GetTick>
 800483a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800483e:	f7fe fa21 	bl	8002c84 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e1d6      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004850:	f7ff fc25 	bl	800409e <LL_RCC_LSI1_IsReady>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f1      	bne.n	800483e <HAL_RCC_OscConfig+0x31a>
 800485a:	e051      	b.n	8004900 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800485c:	f7ff fbfd 	bl	800405a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fe fa10 	bl	8002c84 <HAL_GetTick>
 8004864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004866:	e00c      	b.n	8004882 <HAL_RCC_OscConfig+0x35e>
 8004868:	20000008 	.word	0x20000008
 800486c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004870:	f7fe fa08 	bl	8002c84 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e1bd      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004882:	f7ff fc0c 	bl	800409e <LL_RCC_LSI1_IsReady>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f1      	beq.n	8004870 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800488c:	f7ff fc2a 	bl	80040e4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004892:	f7fe f9f7 	bl	8002c84 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b03      	cmp	r3, #3
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e1ac      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80048a4:	f7ff fc2f 	bl	8004106 <LL_RCC_LSI2_IsReady>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f1      	bne.n	8004892 <HAL_RCC_OscConfig+0x36e>
 80048ae:	e027      	b.n	8004900 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80048b0:	f7ff fc18 	bl	80040e4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b4:	f7fe f9e6 	bl	8002c84 <HAL_GetTick>
 80048b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048bc:	f7fe f9e2 	bl	8002c84 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e197      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80048ce:	f7ff fc1a 	bl	8004106 <LL_RCC_LSI2_IsReady>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f1      	bne.n	80048bc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80048d8:	f7ff fbd0 	bl	800407c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048dc:	f7fe f9d2 	bl	8002c84 <HAL_GetTick>
 80048e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048e4:	f7fe f9ce 	bl	8002c84 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e183      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80048f6:	f7ff fbd2 	bl	800409e <LL_RCC_LSI1_IsReady>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1f1      	bne.n	80048e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d05b      	beq.n	80049c4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800490c:	4ba7      	ldr	r3, [pc, #668]	; (8004bac <HAL_RCC_OscConfig+0x688>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d114      	bne.n	8004942 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004918:	f7ff fa70 	bl	8003dfc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800491c:	f7fe f9b2 	bl	8002c84 <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004924:	f7fe f9ae 	bl	8002c84 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e163      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004936:	4b9d      	ldr	r3, [pc, #628]	; (8004bac <HAL_RCC_OscConfig+0x688>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d102      	bne.n	8004950 <HAL_RCC_OscConfig+0x42c>
 800494a:	f7ff fb30 	bl	8003fae <LL_RCC_LSE_Enable>
 800494e:	e00c      	b.n	800496a <HAL_RCC_OscConfig+0x446>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2b05      	cmp	r3, #5
 8004956:	d104      	bne.n	8004962 <HAL_RCC_OscConfig+0x43e>
 8004958:	f7ff fb4b 	bl	8003ff2 <LL_RCC_LSE_EnableBypass>
 800495c:	f7ff fb27 	bl	8003fae <LL_RCC_LSE_Enable>
 8004960:	e003      	b.n	800496a <HAL_RCC_OscConfig+0x446>
 8004962:	f7ff fb35 	bl	8003fd0 <LL_RCC_LSE_Disable>
 8004966:	f7ff fb55 	bl	8004014 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d014      	beq.n	800499c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004972:	f7fe f987 	bl	8002c84 <HAL_GetTick>
 8004976:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004978:	e00a      	b.n	8004990 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497a:	f7fe f983 	bl	8002c84 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	f241 3288 	movw	r2, #5000	; 0x1388
 8004988:	4293      	cmp	r3, r2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e136      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004990:	f7ff fb51 	bl	8004036 <LL_RCC_LSE_IsReady>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0ef      	beq.n	800497a <HAL_RCC_OscConfig+0x456>
 800499a:	e013      	b.n	80049c4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800499c:	f7fe f972 	bl	8002c84 <HAL_GetTick>
 80049a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7fe f96e 	bl	8002c84 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e121      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80049ba:	f7ff fb3c 	bl	8004036 <LL_RCC_LSE_IsReady>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1ef      	bne.n	80049a4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d02c      	beq.n	8004a2a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d014      	beq.n	8004a02 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80049d8:	f7ff fab5 	bl	8003f46 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fe f952 	bl	8002c84 <HAL_GetTick>
 80049e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049e4:	f7fe f94e 	bl	8002c84 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e103      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80049f6:	f7ff fac8 	bl	8003f8a <LL_RCC_HSI48_IsReady>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f1      	beq.n	80049e4 <HAL_RCC_OscConfig+0x4c0>
 8004a00:	e013      	b.n	8004a2a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a02:	f7ff fab1 	bl	8003f68 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a06:	f7fe f93d 	bl	8002c84 <HAL_GetTick>
 8004a0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a0e:	f7fe f939 	bl	8002c84 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e0ee      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a20:	f7ff fab3 	bl	8003f8a <LL_RCC_HSI48_IsReady>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f1      	bne.n	8004a0e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 80e4 	beq.w	8004bfc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a34:	f7ff fc11 	bl	800425a <LL_RCC_GetSysClkSource>
 8004a38:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	f040 80b4 	bne.w	8004bb4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f003 0203 	and.w	r2, r3, #3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d123      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d11c      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d114      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d10d      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d05d      	beq.n	8004b5e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b0c      	cmp	r3, #12
 8004aa6:	d058      	beq.n	8004b5a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0a1      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004aba:	f7ff fc84 	bl	80043c6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004abe:	f7fe f8e1 	bl	8002c84 <HAL_GetTick>
 8004ac2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac6:	f7fe f8dd 	bl	8002c84 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e092      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1ef      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <HAL_RCC_OscConfig+0x68c>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004af8:	4311      	orrs	r1, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004afe:	0212      	lsls	r2, r2, #8
 8004b00:	4311      	orrs	r1, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b06:	4311      	orrs	r1, r2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b0c:	4311      	orrs	r1, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b12:	430a      	orrs	r2, r1
 8004b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b1c:	f7ff fc44 	bl	80043a8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b30:	f7fe f8a8 	bl	8002c84 <HAL_GetTick>
 8004b34:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b38:	f7fe f8a4 	bl	8002c84 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e059      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ef      	beq.n	8004b38 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b58:	e050      	b.n	8004bfc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e04f      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d147      	bne.n	8004bfc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b6c:	f7ff fc1c 	bl	80043a8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b80:	f7fe f880 	bl	8002c84 <HAL_GetTick>
 8004b84:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b88:	f7fe f87c 	bl	8002c84 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e031      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ef      	beq.n	8004b88 <HAL_RCC_OscConfig+0x664>
 8004ba8:	e028      	b.n	8004bfc <HAL_RCC_OscConfig+0x6d8>
 8004baa:	bf00      	nop
 8004bac:	58000400 	.word	0x58000400
 8004bb0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	d01e      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bba:	f7ff fc04 	bl	80043c6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbe:	f7fe f861 	bl	8002c84 <HAL_GetTick>
 8004bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc6:	f7fe f85d 	bl	8002c84 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e012      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ef      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <HAL_RCC_OscConfig+0x6e4>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	60cb      	str	r3, [r1, #12]
 8004bf6:	e001      	b.n	8004bfc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3734      	adds	r7, #52	; 0x34
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd90      	pop	{r4, r7, pc}
 8004c06:	bf00      	nop
 8004c08:	eefefffc 	.word	0xeefefffc

08004c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e12d      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c20:	4b98      	ldr	r3, [pc, #608]	; (8004e84 <HAL_RCC_ClockConfig+0x278>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d91b      	bls.n	8004c66 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b95      	ldr	r3, [pc, #596]	; (8004e84 <HAL_RCC_ClockConfig+0x278>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 0207 	bic.w	r2, r3, #7
 8004c36:	4993      	ldr	r1, [pc, #588]	; (8004e84 <HAL_RCC_ClockConfig+0x278>)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3e:	f7fe f821 	bl	8002c84 <HAL_GetTick>
 8004c42:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c46:	f7fe f81d 	bl	8002c84 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e111      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c58:	4b8a      	ldr	r3, [pc, #552]	; (8004e84 <HAL_RCC_ClockConfig+0x278>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d1ef      	bne.n	8004c46 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d016      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fafb 	bl	8004272 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004c7c:	f7fe f802 	bl	8002c84 <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004c84:	f7fd fffe 	bl	8002c84 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e0f2      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004c96:	f7ff fbe8 	bl	800446a <LL_RCC_IsActiveFlag_HPRE>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f1      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d016      	beq.n	8004cda <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff faf2 	bl	800429a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cb6:	f7fd ffe5 	bl	8002c84 <HAL_GetTick>
 8004cba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cbe:	f7fd ffe1 	bl	8002c84 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e0d5      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004cd0:	f7ff fbdd 	bl	800448e <LL_RCC_IsActiveFlag_C2HPRE>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f1      	beq.n	8004cbe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff faeb 	bl	80042c6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cf0:	f7fd ffc8 	bl	8002c84 <HAL_GetTick>
 8004cf4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cf8:	f7fd ffc4 	bl	8002c84 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e0b8      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d0a:	f7ff fbd3 	bl	80044b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0f1      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d016      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff fae5 	bl	80042f4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d2a:	f7fd ffab 	bl	8002c84 <HAL_GetTick>
 8004d2e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d32:	f7fd ffa7 	bl	8002c84 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e09b      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d44:	f7ff fbc9 	bl	80044da <LL_RCC_IsActiveFlag_PPRE1>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f1      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0308 	and.w	r3, r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d017      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fadb 	bl	800431c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d66:	f7fd ff8d 	bl	8002c84 <HAL_GetTick>
 8004d6a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d6e:	f7fd ff89 	bl	8002c84 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e07d      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004d80:	f7ff fbbd 	bl	80044fe <LL_RCC_IsActiveFlag_PPRE2>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f1      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d043      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d106      	bne.n	8004dac <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004d9e:	f7ff f87b 	bl	8003e98 <LL_RCC_HSE_IsReady>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d11e      	bne.n	8004de6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e067      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d106      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004db4:	f7ff fb16 	bl	80043e4 <LL_RCC_PLL_IsReady>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d113      	bne.n	8004de6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e05c      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d106      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004dca:	f7ff f9e3 	bl	8004194 <LL_RCC_MSI_IsReady>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d108      	bne.n	8004de6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e051      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004dd8:	f7ff f88e 	bl	8003ef8 <LL_RCC_HSI_IsReady>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e04a      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff fa21 	bl	8004232 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df0:	f7fd ff48 	bl	8002c84 <HAL_GetTick>
 8004df4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fd ff44 	bl	8002c84 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e036      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	f7ff fa24 	bl	800425a <LL_RCC_GetSysClkSource>
 8004e12:	4602      	mov	r2, r0
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d1ec      	bne.n	8004df8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1e:	4b19      	ldr	r3, [pc, #100]	; (8004e84 <HAL_RCC_ClockConfig+0x278>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d21b      	bcs.n	8004e64 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2c:	4b15      	ldr	r3, [pc, #84]	; (8004e84 <HAL_RCC_ClockConfig+0x278>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f023 0207 	bic.w	r2, r3, #7
 8004e34:	4913      	ldr	r1, [pc, #76]	; (8004e84 <HAL_RCC_ClockConfig+0x278>)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e3c:	f7fd ff22 	bl	8002c84 <HAL_GetTick>
 8004e40:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e44:	f7fd ff1e 	bl	8002c84 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e012      	b.n	8004e7c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_RCC_ClockConfig+0x278>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0307 	and.w	r3, r3, #7
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d1ef      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e64:	f000 f87e 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4a07      	ldr	r2, [pc, #28]	; (8004e88 <HAL_RCC_ClockConfig+0x27c>)
 8004e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004e6e:	f7fd ff15 	bl	8002c9c <HAL_GetTickPrio>
 8004e72:	4603      	mov	r3, r0
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fd feb7 	bl	8002be8 <HAL_InitTick>
 8004e7a:	4603      	mov	r3, r0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	58004000 	.word	0x58004000
 8004e88:	20000008 	.word	0x20000008

08004e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e92:	f7ff f9e2 	bl	800425a <LL_RCC_GetSysClkSource>
 8004e96:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004e9e:	f7ff f99e 	bl	80041de <LL_RCC_MSI_GetRange>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	091b      	lsrs	r3, r3, #4
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	4a2b      	ldr	r2, [pc, #172]	; (8004f58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e04b      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d102      	bne.n	8004ec0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004eba:	4b28      	ldr	r3, [pc, #160]	; (8004f5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	e045      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d10a      	bne.n	8004edc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ec6:	f7fe ffb7 	bl	8003e38 <LL_RCC_HSE_IsEnabledDiv2>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d102      	bne.n	8004ed6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004ed0:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	e03a      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004ed6:	4b22      	ldr	r3, [pc, #136]	; (8004f60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	e037      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004edc:	f7ff fab9 	bl	8004452 <LL_RCC_PLL_GetMainSource>
 8004ee0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d003      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x64>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d003      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x6a>
 8004eee:	e00d      	b.n	8004f0c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004ef0:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004ef2:	60bb      	str	r3, [r7, #8]
        break;
 8004ef4:	e015      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ef6:	f7fe ff9f 	bl	8003e38 <LL_RCC_HSE_IsEnabledDiv2>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d102      	bne.n	8004f06 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f00:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f02:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f04:	e00d      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004f06:	4b16      	ldr	r3, [pc, #88]	; (8004f60 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f08:	60bb      	str	r3, [r7, #8]
        break;
 8004f0a:	e00a      	b.n	8004f22 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f0c:	f7ff f967 	bl	80041de <LL_RCC_MSI_GetRange>
 8004f10:	4603      	mov	r3, r0
 8004f12:	091b      	lsrs	r3, r3, #4
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	4a0f      	ldr	r2, [pc, #60]	; (8004f58 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1e:	60bb      	str	r3, [r7, #8]
        break;
 8004f20:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004f22:	f7ff fa71 	bl	8004408 <LL_RCC_PLL_GetN>
 8004f26:	4602      	mov	r2, r0
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	fb03 f402 	mul.w	r4, r3, r2
 8004f2e:	f7ff fa84 	bl	800443a <LL_RCC_PLL_GetDivider>
 8004f32:	4603      	mov	r3, r0
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	3301      	adds	r3, #1
 8004f38:	fbb4 f4f3 	udiv	r4, r4, r3
 8004f3c:	f7ff fa71 	bl	8004422 <LL_RCC_PLL_GetR>
 8004f40:	4603      	mov	r3, r0
 8004f42:	0f5b      	lsrs	r3, r3, #29
 8004f44:	3301      	adds	r3, #1
 8004f46:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f4a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd90      	pop	{r4, r7, pc}
 8004f56:	bf00      	nop
 8004f58:	0800cf5c 	.word	0x0800cf5c
 8004f5c:	00f42400 	.word	0x00f42400
 8004f60:	01e84800 	.word	0x01e84800

08004f64 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f64:	b598      	push	{r3, r4, r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004f68:	f7ff ff90 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	f7ff f9e9 	bl	8004344 <LL_RCC_GetAHBPrescaler>
 8004f72:	4603      	mov	r3, r0
 8004f74:	091b      	lsrs	r3, r3, #4
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	4a03      	ldr	r2, [pc, #12]	; (8004f88 <HAL_RCC_GetHCLKFreq+0x24>)
 8004f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f80:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	bd98      	pop	{r3, r4, r7, pc}
 8004f88:	0800cefc 	.word	0x0800cefc

08004f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f8c:	b598      	push	{r3, r4, r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004f90:	f7ff ffe8 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004f94:	4604      	mov	r4, r0
 8004f96:	f7ff f9ef 	bl	8004378 <LL_RCC_GetAPB1Prescaler>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	0a1b      	lsrs	r3, r3, #8
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa8:	f003 031f 	and.w	r3, r3, #31
 8004fac:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	bd98      	pop	{r3, r4, r7, pc}
 8004fb4:	0800cf3c 	.word	0x0800cf3c

08004fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb8:	b598      	push	{r3, r4, r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004fbc:	f7ff ffd2 	bl	8004f64 <HAL_RCC_GetHCLKFreq>
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	f7ff f9e5 	bl	8004390 <LL_RCC_GetAPB2Prescaler>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	0adb      	lsrs	r3, r3, #11
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	4a04      	ldr	r2, [pc, #16]	; (8004fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd4:	f003 031f 	and.w	r3, r3, #31
 8004fd8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd98      	pop	{r3, r4, r7, pc}
 8004fe0:	0800cf3c 	.word	0x0800cf3c

08004fe4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2bb0      	cmp	r3, #176	; 0xb0
 8004ff0:	d903      	bls.n	8004ffa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004ff2:	4b15      	ldr	r3, [pc, #84]	; (8005048 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e007      	b.n	800500a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	4a11      	ldr	r2, [pc, #68]	; (8005048 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005008:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800500a:	f7ff f9a7 	bl	800435c <LL_RCC_GetAHB4Prescaler>
 800500e:	4603      	mov	r3, r0
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	4a0d      	ldr	r2, [pc, #52]	; (800504c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4a0a      	ldr	r2, [pc, #40]	; (8005050 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005028:	fba2 2303 	umull	r2, r3, r2, r3
 800502c:	0c9c      	lsrs	r4, r3, #18
 800502e:	f7fe fef5 	bl	8003e1c <HAL_PWREx_GetVoltageRange>
 8005032:	4603      	mov	r3, r0
 8005034:	4619      	mov	r1, r3
 8005036:	4620      	mov	r0, r4
 8005038:	f000 f80c 	bl	8005054 <RCC_SetFlashLatency>
 800503c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	bd90      	pop	{r4, r7, pc}
 8005046:	bf00      	nop
 8005048:	0800cf5c 	.word	0x0800cf5c
 800504c:	0800cefc 	.word	0x0800cefc
 8005050:	431bde83 	.word	0x431bde83

08005054 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005054:	b590      	push	{r4, r7, lr}
 8005056:	b093      	sub	sp, #76	; 0x4c
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800505e:	4b37      	ldr	r3, [pc, #220]	; (800513c <RCC_SetFlashLatency+0xe8>)
 8005060:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800506a:	4a35      	ldr	r2, [pc, #212]	; (8005140 <RCC_SetFlashLatency+0xec>)
 800506c:	f107 031c 	add.w	r3, r7, #28
 8005070:	ca07      	ldmia	r2, {r0, r1, r2}
 8005072:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005076:	4b33      	ldr	r3, [pc, #204]	; (8005144 <RCC_SetFlashLatency+0xf0>)
 8005078:	f107 040c 	add.w	r4, r7, #12
 800507c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800507e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005082:	2300      	movs	r3, #0
 8005084:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800508c:	d11a      	bne.n	80050c4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800508e:	2300      	movs	r3, #0
 8005090:	643b      	str	r3, [r7, #64]	; 0x40
 8005092:	e013      	b.n	80050bc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	3348      	adds	r3, #72	; 0x48
 800509a:	443b      	add	r3, r7
 800509c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d807      	bhi.n	80050b6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80050a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	3348      	adds	r3, #72	; 0x48
 80050ac:	443b      	add	r3, r7
 80050ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80050b2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80050b4:	e020      	b.n	80050f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b8:	3301      	adds	r3, #1
 80050ba:	643b      	str	r3, [r7, #64]	; 0x40
 80050bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d9e8      	bls.n	8005094 <RCC_SetFlashLatency+0x40>
 80050c2:	e019      	b.n	80050f8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80050c4:	2300      	movs	r3, #0
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c8:	e013      	b.n	80050f2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	3348      	adds	r3, #72	; 0x48
 80050d0:	443b      	add	r3, r7
 80050d2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d807      	bhi.n	80050ec <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80050dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	3348      	adds	r3, #72	; 0x48
 80050e2:	443b      	add	r3, r7
 80050e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80050e8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80050ea:	e005      	b.n	80050f8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80050ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ee:	3301      	adds	r3, #1
 80050f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d9e8      	bls.n	80050ca <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80050f8:	4b13      	ldr	r3, [pc, #76]	; (8005148 <RCC_SetFlashLatency+0xf4>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f023 0207 	bic.w	r2, r3, #7
 8005100:	4911      	ldr	r1, [pc, #68]	; (8005148 <RCC_SetFlashLatency+0xf4>)
 8005102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005104:	4313      	orrs	r3, r2
 8005106:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005108:	f7fd fdbc 	bl	8002c84 <HAL_GetTick>
 800510c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800510e:	e008      	b.n	8005122 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005110:	f7fd fdb8 	bl	8002c84 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e007      	b.n	8005132 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005122:	4b09      	ldr	r3, [pc, #36]	; (8005148 <RCC_SetFlashLatency+0xf4>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800512c:	429a      	cmp	r2, r3
 800512e:	d1ef      	bne.n	8005110 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	374c      	adds	r7, #76	; 0x4c
 8005136:	46bd      	mov	sp, r7
 8005138:	bd90      	pop	{r4, r7, pc}
 800513a:	bf00      	nop
 800513c:	0800bec0 	.word	0x0800bec0
 8005140:	0800bed0 	.word	0x0800bed0
 8005144:	0800bedc 	.word	0x0800bedc
 8005148:	58004000 	.word	0x58004000

0800514c <LL_RCC_LSE_IsEnabled>:
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <LL_RCC_LSE_IsEnabled+0x18>
 8005160:	2301      	movs	r3, #1
 8005162:	e000      	b.n	8005166 <LL_RCC_LSE_IsEnabled+0x1a>
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <LL_RCC_LSE_IsReady>:
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b02      	cmp	r3, #2
 8005182:	d101      	bne.n	8005188 <LL_RCC_LSE_IsReady+0x18>
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <LL_RCC_LSE_IsReady+0x1a>
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <LL_RCC_MSI_EnablePLLMode>:
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a2:	f043 0304 	orr.w	r3, r3, #4
 80051a6:	6013      	str	r3, [r2, #0]
}
 80051a8:	bf00      	nop
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <LL_RCC_SetRFWKPClockSource>:
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80051ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <LL_RCC_SetSMPSClockSource>:
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	f023 0203 	bic.w	r2, r3, #3
 80051f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <LL_RCC_SetSMPSPrescaler>:
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800520e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4313      	orrs	r3, r2
 8005220:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <LL_RCC_SetUSARTClockSource>:
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	f023 0203 	bic.w	r2, r3, #3
 8005242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4313      	orrs	r3, r2
 800524a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <LL_RCC_SetLPUARTClockSource>:
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800526e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800527a:	bf00      	nop
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <LL_RCC_SetI2CClockSource>:
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800528e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005292:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	091b      	lsrs	r3, r3, #4
 800529a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800529e:	43db      	mvns	r3, r3
 80052a0:	401a      	ands	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80052aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ae:	4313      	orrs	r3, r2
 80052b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <LL_RCC_SetLPTIMClockSource>:
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	0c1b      	lsrs	r3, r3, #16
 80052d4:	041b      	lsls	r3, r3, #16
 80052d6:	43db      	mvns	r3, r3
 80052d8:	401a      	ands	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	041b      	lsls	r3, r3, #16
 80052de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <LL_RCC_SetSAIClockSource>:
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80052fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <LL_RCC_SetRNGClockSource>:
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005330:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <LL_RCC_SetCLK48ClockSource>:
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <LL_RCC_SetUSBClockSource>:
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f7ff ffe3 	bl	800534c <LL_RCC_SetCLK48ClockSource>
}
 8005386:	bf00      	nop
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <LL_RCC_SetADCClockSource>:
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <LL_RCC_SetRTCClockSource>:
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80053c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80053da:	bf00      	nop
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <LL_RCC_GetRTCClockSource>:
{
 80053e6:	b480      	push	{r7}
 80053e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80053ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <LL_RCC_ForceBackupDomainReset>:
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005418:	bf00      	nop
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800543a:	bf00      	nop
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <LL_RCC_PLLSAI1_Enable>:
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005452:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005456:	6013      	str	r3, [r2, #0]
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <LL_RCC_PLLSAI1_Disable>:
{
 8005462:	b480      	push	{r7}
 8005464:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005470:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005474:	6013      	str	r3, [r2, #0]
}
 8005476:	bf00      	nop
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <LL_RCC_PLLSAI1_IsReady>:
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800548e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005492:	d101      	bne.n	8005498 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80054ac:	2300      	movs	r3, #0
 80054ae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80054b0:	2300      	movs	r3, #0
 80054b2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d034      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054c8:	d021      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80054ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054ce:	d81b      	bhi.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054d4:	d01d      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80054d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054da:	d815      	bhi.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00b      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80054e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e4:	d110      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80054f6:	e00d      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 f94d 	bl	800579c <RCCEx_PLLSAI1_ConfigNP>
 8005502:	4603      	mov	r3, r0
 8005504:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005506:	e005      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	77fb      	strb	r3, [r7, #31]
        break;
 800550c:	e002      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005514:	7ffb      	ldrb	r3, [r7, #31]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d105      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fee8 	bl	80052f4 <LL_RCC_SetSAIClockSource>
 8005524:	e001      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005526:	7ffb      	ldrb	r3, [r7, #31]
 8005528:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005532:	2b00      	cmp	r3, #0
 8005534:	d046      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005536:	f7ff ff56 	bl	80053e6 <LL_RCC_GetRTCClockSource>
 800553a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	429a      	cmp	r2, r3
 8005544:	d03c      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005546:	f7fe fc59 	bl	8003dfc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d105      	bne.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff ff30 	bl	80053ba <LL_RCC_SetRTCClockSource>
 800555a:	e02e      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800555c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005564:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005566:	f7ff ff4b 	bl	8005400 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800556a:	f7ff ff5a 	bl	8005422 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800557c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005586:	f7ff fde1 	bl	800514c <LL_RCC_LSE_IsEnabled>
 800558a:	4603      	mov	r3, r0
 800558c:	2b01      	cmp	r3, #1
 800558e:	d114      	bne.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005590:	f7fd fb78 	bl	8002c84 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005596:	e00b      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005598:	f7fd fb74 	bl	8002c84 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d902      	bls.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	77fb      	strb	r3, [r7, #31]
              break;
 80055ae:	e004      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80055b0:	f7ff fdde 	bl	8005170 <LL_RCC_LSE_IsReady>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d1ee      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80055ba:	7ffb      	ldrb	r3, [r7, #31]
 80055bc:	77bb      	strb	r3, [r7, #30]
 80055be:	e001      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055c0:	7ffb      	ldrb	r3, [r7, #31]
 80055c2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fe2a 	bl	800522e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d004      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff fe35 	bl	800525a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d004      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	4618      	mov	r0, r3
 8005602:	f7ff fe5d 	bl	80052c0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d004      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fe52 	bl	80052c0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a1b      	ldr	r3, [r3, #32]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fe2a 	bl	8005286 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d004      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff fe1f 	bl	8005286 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d022      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fe8d 	bl	8005378 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005666:	d107      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005676:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005680:	d10b      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3304      	adds	r3, #4
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f8e3 	bl	8005852 <RCCEx_PLLSAI1_ConfigNQ>
 800568c:	4603      	mov	r3, r0
 800568e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005690:	7ffb      	ldrb	r3, [r7, #31]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005696:	7ffb      	ldrb	r3, [r7, #31]
 8005698:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d02b      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ae:	d008      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056b8:	d003      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d105      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fe2a 	bl	8005320 <LL_RCC_SetRNGClockSource>
 80056cc:	e00a      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	2000      	movs	r0, #0
 80056da:	f7ff fe21 	bl	8005320 <LL_RCC_SetRNGClockSource>
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff fe34 	bl	800534c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80056ec:	d107      	bne.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80056ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005706:	2b00      	cmp	r3, #0
 8005708:	d022      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fe3d 	bl	800538e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800571c:	d107      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800572c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005736:	d10b      	bne.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3304      	adds	r3, #4
 800573c:	4618      	mov	r0, r3
 800573e:	f000 f8e3 	bl	8005908 <RCCEx_PLLSAI1_ConfigNR>
 8005742:	4603      	mov	r3, r0
 8005744:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005746:	7ffb      	ldrb	r3, [r7, #31]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800574c:	7ffb      	ldrb	r3, [r7, #31]
 800574e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fd26 	bl	80051b2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff fd45 	bl	8005206 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff fd2c 	bl	80051de <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005786:	7fbb      	ldrb	r3, [r7, #30]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3720      	adds	r7, #32
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005794:	f7ff fcfe 	bl	8005194 <LL_RCC_MSI_EnablePLLMode>
}
 8005798:	bf00      	nop
 800579a:	bd80      	pop	{r7, pc}

0800579c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80057a8:	f7ff fe5b 	bl	8005462 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057ac:	f7fd fa6a 	bl	8002c84 <HAL_GetTick>
 80057b0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057b2:	e009      	b.n	80057c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057b4:	f7fd fa66 	bl	8002c84 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d902      	bls.n	80057c8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	73fb      	strb	r3, [r7, #15]
      break;
 80057c6:	e004      	b.n	80057d2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057c8:	f7ff fe5a 	bl	8005480 <LL_RCC_PLLSAI1_IsReady>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d137      	bne.n	8005848 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80057d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	021b      	lsls	r3, r3, #8
 80057e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ec:	4313      	orrs	r3, r2
 80057ee:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80057f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005802:	4313      	orrs	r3, r2
 8005804:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005806:	f7ff fe1d 	bl	8005444 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800580a:	f7fd fa3b 	bl	8002c84 <HAL_GetTick>
 800580e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005810:	e009      	b.n	8005826 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005812:	f7fd fa37 	bl	8002c84 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d902      	bls.n	8005826 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	73fb      	strb	r3, [r7, #15]
        break;
 8005824:	e004      	b.n	8005830 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005826:	f7ff fe2b 	bl	8005480 <LL_RCC_PLLSAI1_IsReady>
 800582a:	4603      	mov	r3, r0
 800582c:	2b01      	cmp	r3, #1
 800582e:	d1f0      	bne.n	8005812 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d108      	bne.n	8005848 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583a:	691a      	ldr	r2, [r3, #16]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005844:	4313      	orrs	r3, r2
 8005846:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005848:	7bfb      	ldrb	r3, [r7, #15]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800585a:	2300      	movs	r3, #0
 800585c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800585e:	f7ff fe00 	bl	8005462 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005862:	f7fd fa0f 	bl	8002c84 <HAL_GetTick>
 8005866:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005868:	e009      	b.n	800587e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800586a:	f7fd fa0b 	bl	8002c84 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d902      	bls.n	800587e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	73fb      	strb	r3, [r7, #15]
      break;
 800587c:	e004      	b.n	8005888 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800587e:	f7ff fdff 	bl	8005480 <LL_RCC_PLLSAI1_IsReady>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f0      	bne.n	800586a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d137      	bne.n	80058fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800588e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058a2:	4313      	orrs	r3, r2
 80058a4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80058a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058b8:	4313      	orrs	r3, r2
 80058ba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058bc:	f7ff fdc2 	bl	8005444 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c0:	f7fd f9e0 	bl	8002c84 <HAL_GetTick>
 80058c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058c6:	e009      	b.n	80058dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058c8:	f7fd f9dc 	bl	8002c84 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d902      	bls.n	80058dc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	73fb      	strb	r3, [r7, #15]
        break;
 80058da:	e004      	b.n	80058e6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058dc:	f7ff fdd0 	bl	8005480 <LL_RCC_PLLSAI1_IsReady>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d1f0      	bne.n	80058c8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d108      	bne.n	80058fe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80058ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058fa:	4313      	orrs	r3, r2
 80058fc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005914:	f7ff fda5 	bl	8005462 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005918:	f7fd f9b4 	bl	8002c84 <HAL_GetTick>
 800591c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800591e:	e009      	b.n	8005934 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005920:	f7fd f9b0 	bl	8002c84 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d902      	bls.n	8005934 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	73fb      	strb	r3, [r7, #15]
      break;
 8005932:	e004      	b.n	800593e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005934:	f7ff fda4 	bl	8005480 <LL_RCC_PLLSAI1_IsReady>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d137      	bne.n	80059b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005958:	4313      	orrs	r3, r2
 800595a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800595c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800596e:	4313      	orrs	r3, r2
 8005970:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005972:	f7ff fd67 	bl	8005444 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005976:	f7fd f985 	bl	8002c84 <HAL_GetTick>
 800597a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800597c:	e009      	b.n	8005992 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800597e:	f7fd f981 	bl	8002c84 <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d902      	bls.n	8005992 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	73fb      	strb	r3, [r7, #15]
        break;
 8005990:	e004      	b.n	800599c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005992:	f7ff fd75 	bl	8005480 <LL_RCC_PLLSAI1_IsReady>
 8005996:	4603      	mov	r3, r0
 8005998:	2b01      	cmp	r3, #1
 800599a:	d1f0      	bne.n	800597e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d108      	bne.n	80059b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80059a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059b0:	4313      	orrs	r3, r2
 80059b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e09f      	b.n	8005b12 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fc fe6c 	bl	80026c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80059f4:	4b49      	ldr	r3, [pc, #292]	; (8005b1c <HAL_RTC_Init+0x15c>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2b10      	cmp	r3, #16
 80059fe:	d07e      	beq.n	8005afe <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	22ca      	movs	r2, #202	; 0xca
 8005a06:	625a      	str	r2, [r3, #36]	; 0x24
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2253      	movs	r2, #83	; 0x53
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8ab 	bl	8005b6c <RTC_EnterInitMode>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	22ff      	movs	r2, #255	; 0xff
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2204      	movs	r2, #4
 8005a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	e067      	b.n	8005b02 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a44:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6899      	ldr	r1, [r3, #8]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	68d2      	ldr	r2, [r2, #12]
 8005a6c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6919      	ldr	r1, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	041a      	lsls	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a90:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0203 	bic.w	r2, r2, #3
 8005aa0:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d113      	bne.n	8005af0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f829 	bl	8005b20 <HAL_RTC_WaitForSynchro>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00d      	beq.n	8005af0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	22ff      	movs	r2, #255	; 0xff
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2204      	movs	r2, #4
 8005ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e010      	b.n	8005b12 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	22ff      	movs	r2, #255	; 0xff
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]
 8005afc:	e001      	b.n	8005b02 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d103      	bne.n	8005b10 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40002800 	.word	0x40002800

08005b20 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b36:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005b38:	f7fd f8a4 	bl	8002c84 <HAL_GetTick>
 8005b3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b3e:	e009      	b.n	8005b54 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b40:	f7fd f8a0 	bl	8002c84 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b4e:	d901      	bls.n	8005b54 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e007      	b.n	8005b64 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0ee      	beq.n	8005b40 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d119      	bne.n	8005bb6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b8c:	f7fd f87a 	bl	8002c84 <HAL_GetTick>
 8005b90:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b92:	e009      	b.n	8005ba8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b94:	f7fd f876 	bl	8002c84 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ba2:	d901      	bls.n	8005ba8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e007      	b.n	8005bb8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0ee      	beq.n	8005b94 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e0a8      	b.n	8005d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2202      	movs	r2, #2
 8005be6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	22ca      	movs	r2, #202	; 0xca
 8005bf0:	625a      	str	r2, [r3, #36]	; 0x24
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2253      	movs	r2, #83	; 0x53
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d020      	beq.n	8005c4a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005c08:	f7fd f83c 	bl	8002c84 <HAL_GetTick>
 8005c0c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005c0e:	e015      	b.n	8005c3c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c10:	f7fd f838 	bl	8002c84 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c1e:	d90d      	bls.n	8005c3c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	22ff      	movs	r2, #255	; 0xff
 8005c26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e077      	b.n	8005d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0304 	and.w	r3, r3, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e2      	bne.n	8005c10 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c58:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005c6a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005c6c:	f7fd f80a 	bl	8002c84 <HAL_GetTick>
 8005c70:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005c72:	e015      	b.n	8005ca0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c74:	f7fd f806 	bl	8002c84 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c82:	d90d      	bls.n	8005ca0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	22ff      	movs	r2, #255	; 0xff
 8005c8a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2203      	movs	r2, #3
 8005c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e045      	b.n	8005d2c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0e2      	beq.n	8005c74 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0207 	bic.w	r2, r2, #7
 8005cc4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6899      	ldr	r1, [r3, #8]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005cd6:	4b17      	ldr	r3, [pc, #92]	; (8005d34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cdc:	4a15      	ldr	r2, [pc, #84]	; (8005d34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ce2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005ce6:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005cec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d00:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d10:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	22ff      	movs	r2, #255	; 0xff
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	58000800 	.word	0x58000800

08005d38 <LL_RCC_GetUSARTClockSource>:
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4013      	ands	r3, r2
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <LL_RCC_GetLPUARTClockSource>:
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4013      	ands	r3, r2
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e042      	b.n	8005e10 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7fc fcc5 	bl	800272c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2224      	movs	r2, #36	; 0x24
 8005da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f82c 	bl	8005e18 <UART_SetConfig>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e022      	b.n	8005e10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa48 	bl	8006268 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0201 	orr.w	r2, r2, #1
 8005e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 facf 	bl	80063ac <UART_CheckIdleState>
 8005e0e:	4603      	mov	r3, r0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e1c:	b08c      	sub	sp, #48	; 0x30
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4baf      	ldr	r3, [pc, #700]	; (8006104 <UART_SetConfig+0x2ec>)
 8005e48:	4013      	ands	r3, r2
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	6812      	ldr	r2, [r2, #0]
 8005e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e50:	430b      	orrs	r3, r1
 8005e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4aa4      	ldr	r2, [pc, #656]	; (8006108 <UART_SetConfig+0x2f0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e80:	4313      	orrs	r3, r2
 8005e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005e8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	6812      	ldr	r2, [r2, #0]
 8005e96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e98:	430b      	orrs	r3, r1
 8005e9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	f023 010f 	bic.w	r1, r3, #15
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a95      	ldr	r2, [pc, #596]	; (800610c <UART_SetConfig+0x2f4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d125      	bne.n	8005f08 <UART_SetConfig+0xf0>
 8005ebc:	2003      	movs	r0, #3
 8005ebe:	f7ff ff3b 	bl	8005d38 <LL_RCC_GetUSARTClockSource>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d81b      	bhi.n	8005f00 <UART_SetConfig+0xe8>
 8005ec8:	a201      	add	r2, pc, #4	; (adr r2, 8005ed0 <UART_SetConfig+0xb8>)
 8005eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ece:	bf00      	nop
 8005ed0:	08005ee1 	.word	0x08005ee1
 8005ed4:	08005ef1 	.word	0x08005ef1
 8005ed8:	08005ee9 	.word	0x08005ee9
 8005edc:	08005ef9 	.word	0x08005ef9
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ee6:	e042      	b.n	8005f6e <UART_SetConfig+0x156>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eee:	e03e      	b.n	8005f6e <UART_SetConfig+0x156>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ef6:	e03a      	b.n	8005f6e <UART_SetConfig+0x156>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efe:	e036      	b.n	8005f6e <UART_SetConfig+0x156>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f06:	e032      	b.n	8005f6e <UART_SetConfig+0x156>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a7e      	ldr	r2, [pc, #504]	; (8006108 <UART_SetConfig+0x2f0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d12a      	bne.n	8005f68 <UART_SetConfig+0x150>
 8005f12:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005f16:	f7ff ff1f 	bl	8005d58 <LL_RCC_GetLPUARTClockSource>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f20:	d01a      	beq.n	8005f58 <UART_SetConfig+0x140>
 8005f22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f26:	d81b      	bhi.n	8005f60 <UART_SetConfig+0x148>
 8005f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f2c:	d00c      	beq.n	8005f48 <UART_SetConfig+0x130>
 8005f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f32:	d815      	bhi.n	8005f60 <UART_SetConfig+0x148>
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <UART_SetConfig+0x128>
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3c:	d008      	beq.n	8005f50 <UART_SetConfig+0x138>
 8005f3e:	e00f      	b.n	8005f60 <UART_SetConfig+0x148>
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f46:	e012      	b.n	8005f6e <UART_SetConfig+0x156>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4e:	e00e      	b.n	8005f6e <UART_SetConfig+0x156>
 8005f50:	2304      	movs	r3, #4
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f56:	e00a      	b.n	8005f6e <UART_SetConfig+0x156>
 8005f58:	2308      	movs	r3, #8
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5e:	e006      	b.n	8005f6e <UART_SetConfig+0x156>
 8005f60:	2310      	movs	r3, #16
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f66:	e002      	b.n	8005f6e <UART_SetConfig+0x156>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a65      	ldr	r2, [pc, #404]	; (8006108 <UART_SetConfig+0x2f0>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	f040 8097 	bne.w	80060a8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d823      	bhi.n	8005fca <UART_SetConfig+0x1b2>
 8005f82:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <UART_SetConfig+0x170>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fcb 	.word	0x08005fcb
 8005f90:	08005fb5 	.word	0x08005fb5
 8005f94:	08005fcb 	.word	0x08005fcb
 8005f98:	08005fbb 	.word	0x08005fbb
 8005f9c:	08005fcb 	.word	0x08005fcb
 8005fa0:	08005fcb 	.word	0x08005fcb
 8005fa4:	08005fcb 	.word	0x08005fcb
 8005fa8:	08005fc3 	.word	0x08005fc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fac:	f7fe ffee 	bl	8004f8c <HAL_RCC_GetPCLK1Freq>
 8005fb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fb2:	e010      	b.n	8005fd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fb4:	4b56      	ldr	r3, [pc, #344]	; (8006110 <UART_SetConfig+0x2f8>)
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fb8:	e00d      	b.n	8005fd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fba:	f7fe ff67 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 8005fbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fc0:	e009      	b.n	8005fd6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fc8:	e005      	b.n	8005fd6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005fd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 812b 	beq.w	8006234 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe2:	4a4c      	ldr	r2, [pc, #304]	; (8006114 <UART_SetConfig+0x2fc>)
 8005fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	4413      	add	r3, r2
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d305      	bcc.n	800600e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	429a      	cmp	r2, r3
 800600c:	d903      	bls.n	8006016 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006014:	e10e      	b.n	8006234 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	2200      	movs	r2, #0
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	60fa      	str	r2, [r7, #12]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	4a3c      	ldr	r2, [pc, #240]	; (8006114 <UART_SetConfig+0x2fc>)
 8006024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006028:	b29b      	uxth	r3, r3
 800602a:	2200      	movs	r2, #0
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006034:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006038:	f7fa fbe0 	bl	80007fc <__aeabi_uldivmod>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4610      	mov	r0, r2
 8006042:	4619      	mov	r1, r3
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	020b      	lsls	r3, r1, #8
 800604e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006052:	0202      	lsls	r2, r0, #8
 8006054:	6979      	ldr	r1, [r7, #20]
 8006056:	6849      	ldr	r1, [r1, #4]
 8006058:	0849      	lsrs	r1, r1, #1
 800605a:	2000      	movs	r0, #0
 800605c:	460c      	mov	r4, r1
 800605e:	4605      	mov	r5, r0
 8006060:	eb12 0804 	adds.w	r8, r2, r4
 8006064:	eb43 0905 	adc.w	r9, r3, r5
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	469a      	mov	sl, r3
 8006070:	4693      	mov	fp, r2
 8006072:	4652      	mov	r2, sl
 8006074:	465b      	mov	r3, fp
 8006076:	4640      	mov	r0, r8
 8006078:	4649      	mov	r1, r9
 800607a:	f7fa fbbf 	bl	80007fc <__aeabi_uldivmod>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4613      	mov	r3, r2
 8006084:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800608c:	d308      	bcc.n	80060a0 <UART_SetConfig+0x288>
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006094:	d204      	bcs.n	80060a0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6a3a      	ldr	r2, [r7, #32]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	e0c9      	b.n	8006234 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060a6:	e0c5      	b.n	8006234 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b0:	d16d      	bne.n	800618e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80060b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060b6:	3b01      	subs	r3, #1
 80060b8:	2b07      	cmp	r3, #7
 80060ba:	d82d      	bhi.n	8006118 <UART_SetConfig+0x300>
 80060bc:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <UART_SetConfig+0x2ac>)
 80060be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c2:	bf00      	nop
 80060c4:	080060e5 	.word	0x080060e5
 80060c8:	080060ed 	.word	0x080060ed
 80060cc:	08006119 	.word	0x08006119
 80060d0:	080060f3 	.word	0x080060f3
 80060d4:	08006119 	.word	0x08006119
 80060d8:	08006119 	.word	0x08006119
 80060dc:	08006119 	.word	0x08006119
 80060e0:	080060fb 	.word	0x080060fb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e4:	f7fe ff68 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 80060e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060ea:	e01b      	b.n	8006124 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ec:	4b08      	ldr	r3, [pc, #32]	; (8006110 <UART_SetConfig+0x2f8>)
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060f0:	e018      	b.n	8006124 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f2:	f7fe fecb 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 80060f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060f8:	e014      	b.n	8006124 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006100:	e010      	b.n	8006124 <UART_SetConfig+0x30c>
 8006102:	bf00      	nop
 8006104:	cfff69f3 	.word	0xcfff69f3
 8006108:	40008000 	.word	0x40008000
 800610c:	40013800 	.word	0x40013800
 8006110:	00f42400 	.word	0x00f42400
 8006114:	0800cf9c 	.word	0x0800cf9c
      default:
        pclk = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006122:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 8084 	beq.w	8006234 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	4a4b      	ldr	r2, [pc, #300]	; (8006260 <UART_SetConfig+0x448>)
 8006132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006136:	461a      	mov	r2, r3
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	fbb3 f3f2 	udiv	r3, r3, r2
 800613e:	005a      	lsls	r2, r3, #1
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	441a      	add	r2, r3
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006150:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	2b0f      	cmp	r3, #15
 8006156:	d916      	bls.n	8006186 <UART_SetConfig+0x36e>
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615e:	d212      	bcs.n	8006186 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	b29b      	uxth	r3, r3
 8006164:	f023 030f 	bic.w	r3, r3, #15
 8006168:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	b29b      	uxth	r3, r3
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	b29a      	uxth	r2, r3
 8006176:	8bfb      	ldrh	r3, [r7, #30]
 8006178:	4313      	orrs	r3, r2
 800617a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	8bfa      	ldrh	r2, [r7, #30]
 8006182:	60da      	str	r2, [r3, #12]
 8006184:	e056      	b.n	8006234 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800618c:	e052      	b.n	8006234 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800618e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006192:	3b01      	subs	r3, #1
 8006194:	2b07      	cmp	r3, #7
 8006196:	d822      	bhi.n	80061de <UART_SetConfig+0x3c6>
 8006198:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <UART_SetConfig+0x388>)
 800619a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619e:	bf00      	nop
 80061a0:	080061c1 	.word	0x080061c1
 80061a4:	080061c9 	.word	0x080061c9
 80061a8:	080061df 	.word	0x080061df
 80061ac:	080061cf 	.word	0x080061cf
 80061b0:	080061df 	.word	0x080061df
 80061b4:	080061df 	.word	0x080061df
 80061b8:	080061df 	.word	0x080061df
 80061bc:	080061d7 	.word	0x080061d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061c0:	f7fe fefa 	bl	8004fb8 <HAL_RCC_GetPCLK2Freq>
 80061c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061c6:	e010      	b.n	80061ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c8:	4b26      	ldr	r3, [pc, #152]	; (8006264 <UART_SetConfig+0x44c>)
 80061ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061cc:	e00d      	b.n	80061ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ce:	f7fe fe5d 	bl	8004e8c <HAL_RCC_GetSysClockFreq>
 80061d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061d4:	e009      	b.n	80061ea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061dc:	e005      	b.n	80061ea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061e8:	bf00      	nop
    }

    if (pclk != 0U)
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d021      	beq.n	8006234 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	4a1a      	ldr	r2, [pc, #104]	; (8006260 <UART_SetConfig+0x448>)
 80061f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061fa:	461a      	mov	r2, r3
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	441a      	add	r2, r3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006212:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	2b0f      	cmp	r3, #15
 8006218:	d909      	bls.n	800622e <UART_SetConfig+0x416>
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006220:	d205      	bcs.n	800622e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006222:	6a3b      	ldr	r3, [r7, #32]
 8006224:	b29a      	uxth	r2, r3
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60da      	str	r2, [r3, #12]
 800622c:	e002      	b.n	8006234 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2201      	movs	r2, #1
 8006238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2201      	movs	r2, #1
 8006240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2200      	movs	r2, #0
 8006248:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2200      	movs	r2, #0
 800624e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006250:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006254:	4618      	mov	r0, r3
 8006256:	3730      	adds	r7, #48	; 0x30
 8006258:	46bd      	mov	sp, r7
 800625a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800625e:	bf00      	nop
 8006260:	0800cf9c 	.word	0x0800cf9c
 8006264:	00f42400 	.word	0x00f42400

08006268 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062da:	f003 0308 	and.w	r3, r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	f003 0310 	and.w	r3, r3, #16
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	f003 0320 	and.w	r3, r3, #32
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00a      	beq.n	800633c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01a      	beq.n	800637e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006366:	d10a      	bne.n	800637e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	605a      	str	r2, [r3, #4]
  }
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063bc:	f7fc fc62 	bl	8002c84 <HAL_GetTick>
 80063c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0308 	and.w	r3, r3, #8
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	d10e      	bne.n	80063ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f832 	bl	8006448 <UART_WaitOnFlagUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e028      	b.n	8006440 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b04      	cmp	r3, #4
 80063fa:	d10e      	bne.n	800641a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f81c 	bl	8006448 <UART_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e012      	b.n	8006440 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2220      	movs	r2, #32
 8006426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b09c      	sub	sp, #112	; 0x70
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	4613      	mov	r3, r2
 8006456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006458:	e0a9      	b.n	80065ae <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800645a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800645c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006460:	f000 80a5 	beq.w	80065ae <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006464:	f7fc fc0e 	bl	8002c84 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006470:	429a      	cmp	r2, r3
 8006472:	d302      	bcc.n	800647a <UART_WaitOnFlagUntilTimeout+0x32>
 8006474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006476:	2b00      	cmp	r3, #0
 8006478:	d140      	bne.n	80064fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800648e:	667b      	str	r3, [r7, #100]	; 0x64
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006498:	65fb      	str	r3, [r7, #92]	; 0x5c
 800649a:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800649e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80064a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e6      	bne.n	800647a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3308      	adds	r3, #8
 80064b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	663b      	str	r3, [r7, #96]	; 0x60
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3308      	adds	r3, #8
 80064ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80064ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e5      	bne.n	80064ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e069      	b.n	80065d0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d051      	beq.n	80065ae <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006514:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006518:	d149      	bne.n	80065ae <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006522:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006538:	66fb      	str	r3, [r7, #108]	; 0x6c
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	461a      	mov	r2, r3
 8006540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006542:	637b      	str	r3, [r7, #52]	; 0x34
 8006544:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1e6      	bne.n	8006524 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	e853 3f00 	ldrex	r3, [r3]
 8006564:	613b      	str	r3, [r7, #16]
   return(result);
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	66bb      	str	r3, [r7, #104]	; 0x68
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	3308      	adds	r3, #8
 8006574:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006576:	623a      	str	r2, [r7, #32]
 8006578:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657a:	69f9      	ldr	r1, [r7, #28]
 800657c:	6a3a      	ldr	r2, [r7, #32]
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	61bb      	str	r3, [r7, #24]
   return(result);
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d1e5      	bne.n	8006556 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e010      	b.n	80065d0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4013      	ands	r3, r2
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	bf0c      	ite	eq
 80065be:	2301      	moveq	r3, #1
 80065c0:	2300      	movne	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	f43f af46 	beq.w	800645a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3770      	adds	r7, #112	; 0x70
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_UARTEx_DisableFifoMode+0x16>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e027      	b.n	800663e <HAL_UARTEx_DisableFifoMode+0x66>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2224      	movs	r2, #36	; 0x24
 80065fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0201 	bic.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800661c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800665a:	2b01      	cmp	r3, #1
 800665c:	d101      	bne.n	8006662 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800665e:	2302      	movs	r3, #2
 8006660:	e02d      	b.n	80066be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2224      	movs	r2, #36	; 0x24
 800666e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0201 	bic.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f850 	bl	8006744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066da:	2302      	movs	r3, #2
 80066dc:	e02d      	b.n	800673a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2224      	movs	r2, #36	; 0x24
 80066ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f022 0201 	bic.w	r2, r2, #1
 8006704:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f812 	bl	8006744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006750:	2b00      	cmp	r3, #0
 8006752:	d108      	bne.n	8006766 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006764:	e031      	b.n	80067ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006766:	2308      	movs	r3, #8
 8006768:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800676a:	2308      	movs	r3, #8
 800676c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	0e5b      	lsrs	r3, r3, #25
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	0f5b      	lsrs	r3, r3, #29
 8006786:	b2db      	uxtb	r3, r3
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	7b3a      	ldrb	r2, [r7, #12]
 8006792:	4911      	ldr	r1, [pc, #68]	; (80067d8 <UARTEx_SetNbDataToProcess+0x94>)
 8006794:	5c8a      	ldrb	r2, [r1, r2]
 8006796:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800679a:	7b3a      	ldrb	r2, [r7, #12]
 800679c:	490f      	ldr	r1, [pc, #60]	; (80067dc <UARTEx_SetNbDataToProcess+0x98>)
 800679e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80067a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
 80067ae:	7b7a      	ldrb	r2, [r7, #13]
 80067b0:	4909      	ldr	r1, [pc, #36]	; (80067d8 <UARTEx_SetNbDataToProcess+0x94>)
 80067b2:	5c8a      	ldrb	r2, [r1, r2]
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067b8:	7b7a      	ldrb	r2, [r7, #13]
 80067ba:	4908      	ldr	r1, [pc, #32]	; (80067dc <UARTEx_SetNbDataToProcess+0x98>)
 80067bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067be:	fb93 f3f2 	sdiv	r3, r3, r2
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067ca:	bf00      	nop
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	0800cfb4 	.word	0x0800cfb4
 80067dc:	0800cfbc 	.word	0x0800cfbc

080067e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80067e8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80067ec:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	43db      	mvns	r3, r3
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	4013      	ands	r3, r2
 8006800:	b29a      	uxth	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006816:	b084      	sub	sp, #16
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	f107 0014 	add.w	r0, r7, #20
 8006824:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	b004      	add	sp, #16
 8006856:	4770      	bx	lr

08006858 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006862:	f107 0308 	add.w	r3, r7, #8
 8006866:	2218      	movs	r2, #24
 8006868:	2100      	movs	r1, #0
 800686a:	4618      	mov	r0, r3
 800686c:	f001 f8d8 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006870:	233f      	movs	r3, #63	; 0x3f
 8006872:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006874:	2381      	movs	r3, #129	; 0x81
 8006876:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006878:	1dfb      	adds	r3, r7, #7
 800687a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800687c:	2301      	movs	r3, #1
 800687e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006880:	f107 0308 	add.w	r3, r7, #8
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f001 fb54 	bl	8007f34 <hci_send_req>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	da01      	bge.n	8006896 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006892:	23ff      	movs	r3, #255	; 0xff
 8006894:	e000      	b.n	8006898 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006896:	79fb      	ldrb	r3, [r7, #7]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3720      	adds	r7, #32
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80068a0:	b5b0      	push	{r4, r5, r7, lr}
 80068a2:	b0ce      	sub	sp, #312	; 0x138
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4605      	mov	r5, r0
 80068a8:	460c      	mov	r4, r1
 80068aa:	4610      	mov	r0, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068b2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80068b6:	462a      	mov	r2, r5
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80068c2:	4622      	mov	r2, r4
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068ca:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80068ce:	4602      	mov	r2, r0
 80068d0:	801a      	strh	r2, [r3, #0]
 80068d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80068d6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80068da:	460a      	mov	r2, r1
 80068dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80068de:	f107 0310 	add.w	r3, r7, #16
 80068e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80068e6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80068ea:	3308      	adds	r3, #8
 80068ec:	f107 0210 	add.w	r2, r7, #16
 80068f0:	4413      	add	r3, r2
 80068f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80068f6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80068fa:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80068fe:	4413      	add	r3, r2
 8006900:	3309      	adds	r3, #9
 8006902:	f107 0210 	add.w	r2, r7, #16
 8006906:	4413      	add	r3, r2
 8006908:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800690c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006910:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006914:	2200      	movs	r2, #0
 8006916:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800691e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006922:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006926:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800692a:	7812      	ldrb	r2, [r2, #0]
 800692c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800692e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006932:	3301      	adds	r3, #1
 8006934:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006938:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800693c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006940:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006944:	8812      	ldrh	r2, [r2, #0]
 8006946:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800694a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800694e:	3302      	adds	r3, #2
 8006950:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006954:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006958:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800695c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006960:	8812      	ldrh	r2, [r2, #0]
 8006962:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006966:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800696a:	3302      	adds	r3, #2
 800696c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006970:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006974:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006978:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800697c:	7812      	ldrb	r2, [r2, #0]
 800697e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006980:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006984:	3301      	adds	r3, #1
 8006986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800698a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800698e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006992:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006994:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006998:	3301      	adds	r3, #1
 800699a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800699e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069a2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80069a6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80069a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069ac:	3301      	adds	r3, #1
 80069ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80069b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80069b6:	3308      	adds	r3, #8
 80069b8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80069bc:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 f81d 	bl	8007a00 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80069c6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80069ca:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80069ce:	4413      	add	r3, r2
 80069d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80069d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80069d8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80069dc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80069de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069e2:	3301      	adds	r3, #1
 80069e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80069e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80069ec:	3301      	adds	r3, #1
 80069ee:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80069f2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 f802 	bl	8007a00 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80069fc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006a00:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006a04:	4413      	add	r3, r2
 8006a06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8006a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a0e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006a12:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006a14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a18:	3302      	adds	r3, #2
 8006a1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a22:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006a26:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006a28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a36:	2218      	movs	r2, #24
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fff0 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a40:	233f      	movs	r3, #63	; 0x3f
 8006a42:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006a46:	2383      	movs	r3, #131	; 0x83
 8006a48:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a4c:	f107 0310 	add.w	r3, r7, #16
 8006a50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a5c:	f107 030f 	add.w	r3, r7, #15
 8006a60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a6e:	2100      	movs	r1, #0
 8006a70:	4618      	mov	r0, r3
 8006a72:	f001 fa5f 	bl	8007f34 <hci_send_req>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	da01      	bge.n	8006a80 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006a7c:	23ff      	movs	r3, #255	; 0xff
 8006a7e:	e004      	b.n	8006a8a <aci_gap_set_discoverable+0x1ea>
  return status;
 8006a80:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a84:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006a88:	781b      	ldrb	r3, [r3, #0]
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bdb0      	pop	{r4, r5, r7, pc}

08006a94 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b0cc      	sub	sp, #304	; 0x130
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006aa4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006aa6:	f107 0310 	add.w	r3, r7, #16
 8006aaa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ac8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006acc:	7812      	ldrb	r2, [r2, #0]
 8006ace:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ada:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ade:	2218      	movs	r2, #24
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 ff9c 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ae8:	233f      	movs	r3, #63	; 0x3f
 8006aea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8006aee:	2385      	movs	r3, #133	; 0x85
 8006af0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006af4:	f107 0310 	add.w	r3, r7, #16
 8006af8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006afc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b00:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006b04:	f107 030f 	add.w	r3, r7, #15
 8006b08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b16:	2100      	movs	r1, #0
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 fa0b 	bl	8007f34 <hci_send_req>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	da01      	bge.n	8006b28 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006b24:	23ff      	movs	r3, #255	; 0xff
 8006b26:	e004      	b.n	8006b32 <aci_gap_set_io_capability+0x9e>
  return status;
 8006b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006b30:	781b      	ldrb	r3, [r3, #0]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006b3c:	b5b0      	push	{r4, r5, r7, lr}
 8006b3e:	b0cc      	sub	sp, #304	; 0x130
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4605      	mov	r5, r0
 8006b44:	460c      	mov	r4, r1
 8006b46:	4610      	mov	r0, r2
 8006b48:	4619      	mov	r1, r3
 8006b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b4e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006b52:	462a      	mov	r2, r5
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006b5e:	4622      	mov	r2, r4
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b66:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b76:	460a      	mov	r2, r1
 8006b78:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006b7a:	f107 0310 	add.w	r3, r7, #16
 8006b7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b86:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006b94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b9c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006ba0:	7812      	ldrb	r2, [r2, #0]
 8006ba2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ba4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ba8:	3301      	adds	r3, #1
 8006baa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bb6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006bba:	7812      	ldrb	r2, [r2, #0]
 8006bbc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006bbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8006bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bcc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bd0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006bd4:	7812      	ldrb	r2, [r2, #0]
 8006bd6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bdc:	3301      	adds	r3, #1
 8006bde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006bea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006bee:	7812      	ldrb	r2, [r2, #0]
 8006bf0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006bf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c00:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006c04:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c14:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006c18:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c1e:	3301      	adds	r3, #1
 8006c20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006c24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c28:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006c2c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c32:	3301      	adds	r3, #1
 8006c34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c3c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006c40:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c48:	3304      	adds	r3, #4
 8006c4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c52:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006c56:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006c58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c66:	2218      	movs	r2, #24
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 fed8 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c70:	233f      	movs	r3, #63	; 0x3f
 8006c72:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8006c76:	2386      	movs	r3, #134	; 0x86
 8006c78:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006c7c:	f107 0310 	add.w	r3, r7, #16
 8006c80:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006c84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006c8c:	f107 030f 	add.w	r3, r7, #15
 8006c90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006c94:	2301      	movs	r3, #1
 8006c96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006c9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f001 f947 	bl	8007f34 <hci_send_req>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	da01      	bge.n	8006cb0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006cac:	23ff      	movs	r3, #255	; 0xff
 8006cae:	e004      	b.n	8006cba <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006cb8:	781b      	ldrb	r3, [r3, #0]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bdb0      	pop	{r4, r5, r7, pc}

08006cc4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b0cc      	sub	sp, #304	; 0x130
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4602      	mov	r2, r0
 8006ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd4:	6019      	str	r1, [r3, #0]
 8006cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cda:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006cde:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006ce0:	f107 0310 	add.w	r3, r7, #16
 8006ce4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cfe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d02:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006d06:	8812      	ldrh	r2, [r2, #0]
 8006d08:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006d0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d0e:	3302      	adds	r3, #2
 8006d10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8006d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d1c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006d26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d34:	2218      	movs	r2, #24
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fe71 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d3e:	233f      	movs	r3, #63	; 0x3f
 8006d40:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8006d44:	2388      	movs	r3, #136	; 0x88
 8006d46:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006d4a:	f107 0310 	add.w	r3, r7, #16
 8006d4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006d52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006d5a:	f107 030f 	add.w	r3, r7, #15
 8006d5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f001 f8e0 	bl	8007f34 <hci_send_req>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da01      	bge.n	8006d7e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8006d7a:	23ff      	movs	r3, #255	; 0xff
 8006d7c:	e004      	b.n	8006d88 <aci_gap_pass_key_resp+0xc4>
  return status;
 8006d7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d82:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006d86:	781b      	ldrb	r3, [r3, #0]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006d92:	b590      	push	{r4, r7, lr}
 8006d94:	b0cd      	sub	sp, #308	; 0x134
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	4604      	mov	r4, r0
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006da2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006da6:	6013      	str	r3, [r2, #0]
 8006da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dac:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006db0:	4622      	mov	r2, r4
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006dc8:	460a      	mov	r2, r1
 8006dca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006dcc:	f107 0310 	add.w	r3, r7, #16
 8006dd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006dd4:	f107 0308 	add.w	r3, r7, #8
 8006dd8:	2207      	movs	r2, #7
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fe1f 	bl	8007a20 <Osal_MemSet>
  int index_input = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006df0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006df4:	7812      	ldrb	r2, [r2, #0]
 8006df6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006df8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e06:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e0a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006e0e:	7812      	ldrb	r2, [r2, #0]
 8006e10:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e16:	3301      	adds	r3, #1
 8006e18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e24:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006e28:	7812      	ldrb	r2, [r2, #0]
 8006e2a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e30:	3301      	adds	r3, #1
 8006e32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e3a:	2218      	movs	r2, #24
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fdee 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e44:	233f      	movs	r3, #63	; 0x3f
 8006e46:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006e4a:	238a      	movs	r3, #138	; 0x8a
 8006e4c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006e50:	f107 0310 	add.w	r3, r7, #16
 8006e54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006e60:	f107 0308 	add.w	r3, r7, #8
 8006e64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006e68:	2307      	movs	r3, #7
 8006e6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e72:	2100      	movs	r1, #0
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 f85d 	bl	8007f34 <hci_send_req>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	da01      	bge.n	8006e84 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006e80:	23ff      	movs	r3, #255	; 0xff
 8006e82:	e02e      	b.n	8006ee2 <aci_gap_init+0x150>
  if ( resp.Status )
 8006e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e88:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d005      	beq.n	8006e9e <aci_gap_init+0x10c>
    return resp.Status;
 8006e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e96:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	e021      	b.n	8006ee2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006ea6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ebc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006ec0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006eca:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006ecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006ed4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006ede:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd90      	pop	{r4, r7, pc}

08006eec <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b0cc      	sub	sp, #304	; 0x130
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006efc:	6019      	str	r1, [r3, #0]
 8006efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f02:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006f06:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006f08:	f107 0310 	add.w	r3, r7, #16
 8006f0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f14:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f18:	2200      	movs	r2, #0
 8006f1a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006f22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f2a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006f2e:	7812      	ldrb	r2, [r2, #0]
 8006f30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f36:	3301      	adds	r3, #1
 8006f38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f40:	1c58      	adds	r0, r3, #1
 8006f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f46:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006f4a:	781a      	ldrb	r2, [r3, #0]
 8006f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f54:	6819      	ldr	r1, [r3, #0]
 8006f56:	f000 fd53 	bl	8007a00 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006f68:	4413      	add	r3, r2
 8006f6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f72:	2218      	movs	r2, #24
 8006f74:	2100      	movs	r1, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fd52 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f7c:	233f      	movs	r3, #63	; 0x3f
 8006f7e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006f82:	238e      	movs	r3, #142	; 0x8e
 8006f84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f88:	f107 0310 	add.w	r3, r7, #16
 8006f8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006f98:	f107 030f 	add.w	r3, r7, #15
 8006f9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006fa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006faa:	2100      	movs	r1, #0
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 ffc1 	bl	8007f34 <hci_send_req>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	da01      	bge.n	8006fbc <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006fb8:	23ff      	movs	r3, #255	; 0xff
 8006fba:	e004      	b.n	8006fc6 <aci_gap_update_adv_data+0xda>
  return status;
 8006fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006fc4:	781b      	ldrb	r3, [r3, #0]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fda:	f107 0308 	add.w	r3, r7, #8
 8006fde:	2218      	movs	r2, #24
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fd1c 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fe8:	233f      	movs	r3, #63	; 0x3f
 8006fea:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006fec:	2392      	movs	r3, #146	; 0x92
 8006fee:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006ff0:	1dfb      	adds	r3, r7, #7
 8006ff2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ff8:	f107 0308 	add.w	r3, r7, #8
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 ff98 	bl	8007f34 <hci_send_req>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	da01      	bge.n	800700e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800700a:	23ff      	movs	r3, #255	; 0xff
 800700c:	e000      	b.n	8007010 <aci_gap_configure_whitelist+0x40>
  return status;
 800700e:	79fb      	ldrb	r3, [r7, #7]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b0cc      	sub	sp, #304	; 0x130
 800701c:	af00      	add	r7, sp, #0
 800701e:	4602      	mov	r2, r0
 8007020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007024:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007028:	801a      	strh	r2, [r3, #0]
 800702a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007032:	460a      	mov	r2, r1
 8007034:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007036:	f107 0310 	add.w	r3, r7, #16
 800703a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800703e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007042:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007046:	2200      	movs	r2, #0
 8007048:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007054:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007058:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800705c:	8812      	ldrh	r2, [r2, #0]
 800705e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007060:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007064:	3302      	adds	r3, #2
 8007066:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800706a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800706e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007072:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007076:	7812      	ldrb	r2, [r2, #0]
 8007078:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800707a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800707e:	3301      	adds	r3, #1
 8007080:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007084:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007088:	2218      	movs	r2, #24
 800708a:	2100      	movs	r1, #0
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fcc7 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007092:	233f      	movs	r3, #63	; 0x3f
 8007094:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007098:	23a5      	movs	r3, #165	; 0xa5
 800709a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800709e:	f107 0310 	add.w	r3, r7, #16
 80070a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80070a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80070ae:	f107 030f 	add.w	r3, r7, #15
 80070b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80070bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 ff36 	bl	8007f34 <hci_send_req>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da01      	bge.n	80070d2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80070ce:	23ff      	movs	r3, #255	; 0xff
 80070d0:	e004      	b.n	80070dc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80070d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80070da:	781b      	ldrb	r3, [r3, #0]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b088      	sub	sp, #32
 80070ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80070f0:	f107 0308 	add.w	r3, r7, #8
 80070f4:	2218      	movs	r2, #24
 80070f6:	2100      	movs	r1, #0
 80070f8:	4618      	mov	r0, r3
 80070fa:	f000 fc91 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80070fe:	233f      	movs	r3, #63	; 0x3f
 8007100:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007102:	f240 1301 	movw	r3, #257	; 0x101
 8007106:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007108:	1dfb      	adds	r3, r7, #7
 800710a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800710c:	2301      	movs	r3, #1
 800710e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007110:	f107 0308 	add.w	r3, r7, #8
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f000 ff0c 	bl	8007f34 <hci_send_req>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	da01      	bge.n	8007126 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007122:	23ff      	movs	r3, #255	; 0xff
 8007124:	e000      	b.n	8007128 <aci_gatt_init+0x42>
  return status;
 8007126:	79fb      	ldrb	r3, [r7, #7]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3720      	adds	r7, #32
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007130:	b590      	push	{r4, r7, lr}
 8007132:	b0cf      	sub	sp, #316	; 0x13c
 8007134:	af00      	add	r7, sp, #0
 8007136:	4604      	mov	r4, r0
 8007138:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800713c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8007140:	6001      	str	r1, [r0, #0]
 8007142:	4610      	mov	r0, r2
 8007144:	4619      	mov	r1, r3
 8007146:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800714a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800714e:	4622      	mov	r2, r4
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007156:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800715a:	4602      	mov	r2, r0
 800715c:	701a      	strb	r2, [r3, #0]
 800715e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007162:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007166:	460a      	mov	r2, r1
 8007168:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800716a:	f107 0310 	add.w	r3, r7, #16
 800716e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007172:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007176:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d00a      	beq.n	8007196 <aci_gatt_add_service+0x66>
 8007180:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007184:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d101      	bne.n	8007192 <aci_gatt_add_service+0x62>
 800718e:	2311      	movs	r3, #17
 8007190:	e002      	b.n	8007198 <aci_gatt_add_service+0x68>
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <aci_gatt_add_service+0x68>
 8007196:	2303      	movs	r3, #3
 8007198:	f107 0210 	add.w	r2, r7, #16
 800719c:	4413      	add	r3, r2
 800719e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80071a2:	f107 030c 	add.w	r3, r7, #12
 80071a6:	2203      	movs	r2, #3
 80071a8:	2100      	movs	r1, #0
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 fc38 	bl	8007a20 <Osal_MemSet>
  int index_input = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80071b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071ba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80071be:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80071c2:	7812      	ldrb	r2, [r2, #0]
 80071c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80071c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071ca:	3301      	adds	r3, #1
 80071cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80071d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80071d4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d002      	beq.n	80071e4 <aci_gatt_add_service+0xb4>
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d004      	beq.n	80071ec <aci_gatt_add_service+0xbc>
 80071e2:	e007      	b.n	80071f4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80071e4:	2302      	movs	r3, #2
 80071e6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80071ea:	e005      	b.n	80071f8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80071ec:	2310      	movs	r3, #16
 80071ee:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80071f2:	e001      	b.n	80071f8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80071f4:	2397      	movs	r3, #151	; 0x97
 80071f6:	e06c      	b.n	80072d2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80071f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071fc:	1c58      	adds	r0, r3, #1
 80071fe:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007202:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007206:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800720a:	6819      	ldr	r1, [r3, #0]
 800720c:	f000 fbf8 	bl	8007a00 <Osal_MemCpy>
    index_input += size;
 8007210:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007214:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007218:	4413      	add	r3, r2
 800721a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800721e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007222:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007226:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800722a:	7812      	ldrb	r2, [r2, #0]
 800722c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800722e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007232:	3301      	adds	r3, #1
 8007234:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007240:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007244:	7812      	ldrb	r2, [r2, #0]
 8007246:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007248:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800724c:	3301      	adds	r3, #1
 800724e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007252:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007256:	2218      	movs	r2, #24
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fbe0 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007260:	233f      	movs	r3, #63	; 0x3f
 8007262:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007266:	f44f 7381 	mov.w	r3, #258	; 0x102
 800726a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800726e:	f107 0310 	add.w	r3, r7, #16
 8007272:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800727a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800727e:	f107 030c 	add.w	r3, r7, #12
 8007282:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007286:	2303      	movs	r3, #3
 8007288:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800728c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007290:	2100      	movs	r1, #0
 8007292:	4618      	mov	r0, r3
 8007294:	f000 fe4e 	bl	8007f34 <hci_send_req>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	da01      	bge.n	80072a2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800729e:	23ff      	movs	r3, #255	; 0xff
 80072a0:	e017      	b.n	80072d2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80072a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <aci_gatt_add_service+0x18c>
    return resp.Status;
 80072b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	e00a      	b.n	80072d2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80072bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80072c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80072ce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd90      	pop	{r4, r7, pc}

080072dc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80072dc:	b590      	push	{r4, r7, lr}
 80072de:	b0d1      	sub	sp, #324	; 0x144
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80072ea:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80072ee:	600a      	str	r2, [r1, #0]
 80072f0:	4619      	mov	r1, r3
 80072f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80072f6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80072fa:	4622      	mov	r2, r4
 80072fc:	801a      	strh	r2, [r3, #0]
 80072fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007302:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007306:	4602      	mov	r2, r0
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800730e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8007312:	460a      	mov	r2, r1
 8007314:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007316:	f107 0318 	add.w	r3, r7, #24
 800731a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800731e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007322:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d00a      	beq.n	8007342 <aci_gatt_add_char+0x66>
 800732c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007330:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b02      	cmp	r3, #2
 8007338:	d101      	bne.n	800733e <aci_gatt_add_char+0x62>
 800733a:	2313      	movs	r3, #19
 800733c:	e002      	b.n	8007344 <aci_gatt_add_char+0x68>
 800733e:	2303      	movs	r3, #3
 8007340:	e000      	b.n	8007344 <aci_gatt_add_char+0x68>
 8007342:	2305      	movs	r3, #5
 8007344:	f107 0218 	add.w	r2, r7, #24
 8007348:	4413      	add	r3, r2
 800734a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800734e:	f107 0314 	add.w	r3, r7, #20
 8007352:	2203      	movs	r2, #3
 8007354:	2100      	movs	r1, #0
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fb62 	bl	8007a20 <Osal_MemSet>
  int index_input = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007362:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007366:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800736a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800736e:	8812      	ldrh	r2, [r2, #0]
 8007370:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007372:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007376:	3302      	adds	r3, #2
 8007378:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800737c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007380:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007384:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800738c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007390:	3301      	adds	r3, #1
 8007392:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007396:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800739a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d002      	beq.n	80073aa <aci_gatt_add_char+0xce>
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d004      	beq.n	80073b2 <aci_gatt_add_char+0xd6>
 80073a8:	e007      	b.n	80073ba <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80073aa:	2302      	movs	r3, #2
 80073ac:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80073b0:	e005      	b.n	80073be <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80073b2:	2310      	movs	r3, #16
 80073b4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80073b8:	e001      	b.n	80073be <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80073ba:	2397      	movs	r3, #151	; 0x97
 80073bc:	e091      	b.n	80074e2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80073be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80073c2:	1cd8      	adds	r0, r3, #3
 80073c4:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80073c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80073cc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80073d0:	6819      	ldr	r1, [r3, #0]
 80073d2:	f000 fb15 	bl	8007a00 <Osal_MemCpy>
    index_input += size;
 80073d6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80073da:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80073de:	4413      	add	r3, r2
 80073e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80073e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073e8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80073ec:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80073f0:	8812      	ldrh	r2, [r2, #0]
 80073f2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80073f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073f8:	3302      	adds	r3, #2
 80073fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80073fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007402:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007406:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007408:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800740c:	3301      	adds	r3, #1
 800740e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007412:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007416:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800741a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800741c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007420:	3301      	adds	r3, #1
 8007422:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007426:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800742a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800742e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007430:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007434:	3301      	adds	r3, #1
 8007436:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800743a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800743e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007442:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007444:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007448:	3301      	adds	r3, #1
 800744a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800744e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007452:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007456:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007458:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800745c:	3301      	adds	r3, #1
 800745e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007462:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007466:	2218      	movs	r2, #24
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fad8 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007470:	233f      	movs	r3, #63	; 0x3f
 8007472:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007476:	f44f 7382 	mov.w	r3, #260	; 0x104
 800747a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800747e:	f107 0318 	add.w	r3, r7, #24
 8007482:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007486:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800748a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800748e:	f107 0314 	add.w	r3, r7, #20
 8007492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007496:	2303      	movs	r3, #3
 8007498:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800749c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80074a0:	2100      	movs	r1, #0
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fd46 	bl	8007f34 <hci_send_req>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	da01      	bge.n	80074b2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80074ae:	23ff      	movs	r3, #255	; 0xff
 80074b0:	e017      	b.n	80074e2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80074b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80074b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d005      	beq.n	80074cc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80074c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80074c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	e00a      	b.n	80074e2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80074cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80074d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80074d8:	b29a      	uxth	r2, r3
 80074da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80074de:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd90      	pop	{r4, r7, pc}

080074ec <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80074ec:	b5b0      	push	{r4, r5, r7, lr}
 80074ee:	b0cc      	sub	sp, #304	; 0x130
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4605      	mov	r5, r0
 80074f4:	460c      	mov	r4, r1
 80074f6:	4610      	mov	r0, r2
 80074f8:	4619      	mov	r1, r3
 80074fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007502:	462a      	mov	r2, r5
 8007504:	801a      	strh	r2, [r3, #0]
 8007506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800750e:	4622      	mov	r2, r4
 8007510:	801a      	strh	r2, [r3, #0]
 8007512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007516:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800751a:	4602      	mov	r2, r0
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007522:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007526:	460a      	mov	r2, r1
 8007528:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800752a:	f107 0310 	add.w	r3, r7, #16
 800752e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007536:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800753a:	2200      	movs	r2, #0
 800753c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800753e:	2300      	movs	r3, #0
 8007540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007548:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800754c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007550:	8812      	ldrh	r2, [r2, #0]
 8007552:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007554:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007558:	3302      	adds	r3, #2
 800755a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800755e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007562:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007566:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800756a:	8812      	ldrh	r2, [r2, #0]
 800756c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800756e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007572:	3302      	adds	r3, #2
 8007574:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007580:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007584:	7812      	ldrb	r2, [r2, #0]
 8007586:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007588:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800758c:	3301      	adds	r3, #1
 800758e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007596:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800759a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800759e:	7812      	ldrb	r2, [r2, #0]
 80075a0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80075a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075a6:	3301      	adds	r3, #1
 80075a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80075ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b0:	1d98      	adds	r0, r3, #6
 80075b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80075c2:	f000 fa1d 	bl	8007a00 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80075c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ca:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80075d4:	4413      	add	r3, r2
 80075d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075de:	2218      	movs	r2, #24
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 fa1c 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80075e8:	233f      	movs	r3, #63	; 0x3f
 80075ea:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80075ee:	f44f 7383 	mov.w	r3, #262	; 0x106
 80075f2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80075f6:	f107 0310 	add.w	r3, r7, #16
 80075fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80075fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007602:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007606:	f107 030f 	add.w	r3, r7, #15
 800760a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800760e:	2301      	movs	r3, #1
 8007610:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007614:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007618:	2100      	movs	r1, #0
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fc8a 	bl	8007f34 <hci_send_req>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	da01      	bge.n	800762a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007626:	23ff      	movs	r3, #255	; 0xff
 8007628:	e004      	b.n	8007634 <aci_gatt_update_char_value+0x148>
  return status;
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007632:	781b      	ldrb	r3, [r3, #0]
}
 8007634:	4618      	mov	r0, r3
 8007636:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800763a:	46bd      	mov	sp, r7
 800763c:	bdb0      	pop	{r4, r5, r7, pc}

0800763e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b0cc      	sub	sp, #304	; 0x130
 8007642:	af00      	add	r7, sp, #0
 8007644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007648:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007652:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007656:	4602      	mov	r2, r0
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007662:	460a      	mov	r2, r1
 8007664:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007666:	f107 0310 	add.w	r3, r7, #16
 800766a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800766e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007672:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007676:	2200      	movs	r2, #0
 8007678:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007684:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007688:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800768c:	7812      	ldrb	r2, [r2, #0]
 800768e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007690:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007694:	3301      	adds	r3, #1
 8007696:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800769a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800769e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076a2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80076a6:	7812      	ldrb	r2, [r2, #0]
 80076a8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80076aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076ae:	3301      	adds	r3, #1
 80076b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80076b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b8:	1c98      	adds	r0, r3, #2
 80076ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076be:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80076c2:	781a      	ldrb	r2, [r3, #0]
 80076c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076cc:	6819      	ldr	r1, [r3, #0]
 80076ce:	f000 f997 	bl	8007a00 <Osal_MemCpy>
  index_input += Length;
 80076d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80076e0:	4413      	add	r3, r2
 80076e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076ea:	2218      	movs	r2, #24
 80076ec:	2100      	movs	r1, #0
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 f996 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80076f4:	233f      	movs	r3, #63	; 0x3f
 80076f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80076fa:	230c      	movs	r3, #12
 80076fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007700:	f107 0310 	add.w	r3, r7, #16
 8007704:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007708:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800770c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007710:	f107 030f 	add.w	r3, r7, #15
 8007714:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007718:	2301      	movs	r3, #1
 800771a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800771e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007722:	2100      	movs	r1, #0
 8007724:	4618      	mov	r0, r3
 8007726:	f000 fc05 	bl	8007f34 <hci_send_req>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	da01      	bge.n	8007734 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007730:	23ff      	movs	r3, #255	; 0xff
 8007732:	e004      	b.n	800773e <aci_hal_write_config_data+0x100>
  return status;
 8007734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007738:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800773c:	781b      	ldrb	r3, [r3, #0]
}
 800773e:	4618      	mov	r0, r3
 8007740:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b0cc      	sub	sp, #304	; 0x130
 800774c:	af00      	add	r7, sp, #0
 800774e:	4602      	mov	r2, r0
 8007750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007754:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007762:	460a      	mov	r2, r1
 8007764:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007766:	f107 0310 	add.w	r3, r7, #16
 800776a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800776e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007772:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007780:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007784:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007788:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800778c:	7812      	ldrb	r2, [r2, #0]
 800778e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007790:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007794:	3301      	adds	r3, #1
 8007796:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800779a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80077a2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80077a6:	7812      	ldrb	r2, [r2, #0]
 80077a8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80077aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077ae:	3301      	adds	r3, #1
 80077b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077b8:	2218      	movs	r2, #24
 80077ba:	2100      	movs	r1, #0
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 f92f 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80077c2:	233f      	movs	r3, #63	; 0x3f
 80077c4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80077c8:	230f      	movs	r3, #15
 80077ca:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80077ce:	f107 0310 	add.w	r3, r7, #16
 80077d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80077de:	f107 030f 	add.w	r3, r7, #15
 80077e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80077e6:	2301      	movs	r3, #1
 80077e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077f0:	2100      	movs	r1, #0
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fb9e 	bl	8007f34 <hci_send_req>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	da01      	bge.n	8007802 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80077fe:	23ff      	movs	r3, #255	; 0xff
 8007800:	e004      	b.n	800780c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007806:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800780a:	781b      	ldrb	r3, [r3, #0]
}
 800780c:	4618      	mov	r0, r3
 800780e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b0cc      	sub	sp, #304	; 0x130
 800781a:	af00      	add	r7, sp, #0
 800781c:	4602      	mov	r2, r0
 800781e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007822:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007826:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007828:	f107 0310 	add.w	r3, r7, #16
 800782c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007834:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007838:	2200      	movs	r2, #0
 800783a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007846:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800784a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800784e:	8812      	ldrh	r2, [r2, #0]
 8007850:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007852:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007856:	3302      	adds	r3, #2
 8007858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800785c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007860:	2218      	movs	r2, #24
 8007862:	2100      	movs	r1, #0
 8007864:	4618      	mov	r0, r3
 8007866:	f000 f8db 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x3f;
 800786a:	233f      	movs	r3, #63	; 0x3f
 800786c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007870:	2318      	movs	r3, #24
 8007872:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007876:	f107 0310 	add.w	r3, r7, #16
 800787a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800787e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007882:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007886:	f107 030f 	add.w	r3, r7, #15
 800788a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800788e:	2301      	movs	r3, #1
 8007890:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007894:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007898:	2100      	movs	r1, #0
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fb4a 	bl	8007f34 <hci_send_req>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	da01      	bge.n	80078aa <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 80078a6:	23ff      	movs	r3, #255	; 0xff
 80078a8:	e004      	b.n	80078b4 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80078b2:	781b      	ldrb	r3, [r3, #0]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b088      	sub	sp, #32
 80078c2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078c8:	f107 0308 	add.w	r3, r7, #8
 80078cc:	2218      	movs	r2, #24
 80078ce:	2100      	movs	r1, #0
 80078d0:	4618      	mov	r0, r3
 80078d2:	f000 f8a5 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x03;
 80078d6:	2303      	movs	r3, #3
 80078d8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80078da:	2303      	movs	r3, #3
 80078dc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80078de:	1dfb      	adds	r3, r7, #7
 80078e0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80078e2:	2301      	movs	r3, #1
 80078e4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078e6:	f107 0308 	add.w	r3, r7, #8
 80078ea:	2100      	movs	r1, #0
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 fb21 	bl	8007f34 <hci_send_req>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	da01      	bge.n	80078fc <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80078f8:	23ff      	movs	r3, #255	; 0xff
 80078fa:	e000      	b.n	80078fe <hci_reset+0x40>
  return status;
 80078fc:	79fb      	ldrb	r3, [r7, #7]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3720      	adds	r7, #32
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007906:	b590      	push	{r4, r7, lr}
 8007908:	b0cd      	sub	sp, #308	; 0x134
 800790a:	af00      	add	r7, sp, #0
 800790c:	4604      	mov	r4, r0
 800790e:	4608      	mov	r0, r1
 8007910:	4611      	mov	r1, r2
 8007912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007916:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800791a:	4622      	mov	r2, r4
 800791c:	701a      	strb	r2, [r3, #0]
 800791e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007922:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007926:	4602      	mov	r2, r0
 8007928:	701a      	strb	r2, [r3, #0]
 800792a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007932:	460a      	mov	r2, r1
 8007934:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007936:	f107 0310 	add.w	r3, r7, #16
 800793a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800793e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007942:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007954:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007958:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800795c:	7812      	ldrb	r2, [r2, #0]
 800795e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007964:	3301      	adds	r3, #1
 8007966:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800796a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007972:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007976:	7812      	ldrb	r2, [r2, #0]
 8007978:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800797a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800797e:	3301      	adds	r3, #1
 8007980:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007988:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800798c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007990:	7812      	ldrb	r2, [r2, #0]
 8007992:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007994:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007998:	3301      	adds	r3, #1
 800799a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800799e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079a2:	2218      	movs	r2, #24
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f83a 	bl	8007a20 <Osal_MemSet>
  rq.ogf = 0x08;
 80079ac:	2308      	movs	r3, #8
 80079ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80079b2:	2331      	movs	r3, #49	; 0x31
 80079b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80079b8:	f107 0310 	add.w	r3, r7, #16
 80079bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80079c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80079c8:	f107 030f 	add.w	r3, r7, #15
 80079cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80079d0:	2301      	movs	r3, #1
 80079d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 faa9 	bl	8007f34 <hci_send_req>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da01      	bge.n	80079ec <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80079e8:	23ff      	movs	r3, #255	; 0xff
 80079ea:	e004      	b.n	80079f6 <hci_le_set_default_phy+0xf0>
  return status;
 80079ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079f4:	781b      	ldrb	r3, [r3, #0]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}

08007a00 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f002 ffe7 	bl	800a9e4 <memcpy>
 8007a16:	4603      	mov	r3, r0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	68b9      	ldr	r1, [r7, #8]
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f002 ffe5 	bl	800aa00 <memset>
 8007a36:	4603      	mov	r3, r0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0
  return;
 8007a44:	bf00      	nop
}
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007a4e:	b480      	push	{r7}
 8007a50:	af00      	add	r7, sp, #0
  return;
 8007a52:	bf00      	nop
}
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	af00      	add	r7, sp, #0
  return;
 8007a60:	bf00      	nop
}
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	af00      	add	r7, sp, #0
  return;
 8007a6e:	bf00      	nop
}
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
  return;
 8007a7c:	bf00      	nop
}
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007a86:	b480      	push	{r7}
 8007a88:	af00      	add	r7, sp, #0
  return;
 8007a8a:	bf00      	nop
}
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007a94:	b480      	push	{r7}
 8007a96:	af00      	add	r7, sp, #0
  return;
 8007a98:	bf00      	nop
}
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	af00      	add	r7, sp, #0
  return;
 8007aa6:	bf00      	nop
}
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
  return;
 8007ab4:	bf00      	nop
}
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007abe:	b480      	push	{r7}
 8007ac0:	af00      	add	r7, sp, #0
  return;
 8007ac2:	bf00      	nop
}
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
  return;
 8007ad0:	bf00      	nop
}
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007ada:	b480      	push	{r7}
 8007adc:	af00      	add	r7, sp, #0
  return;
 8007ade:	bf00      	nop
}
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0
  return;
 8007aec:	bf00      	nop
}
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007af6:	b480      	push	{r7}
 8007af8:	af00      	add	r7, sp, #0
  return;
 8007afa:	bf00      	nop
}
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0
  return;
 8007b08:	bf00      	nop
}
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007b12:	b480      	push	{r7}
 8007b14:	af00      	add	r7, sp, #0
  return;
 8007b16:	bf00      	nop
}
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
  return;
 8007b24:	bf00      	nop
}
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
	...

08007b30 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007b34:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <SVCCTL_Init+0x18>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007b3a:	4b04      	ldr	r3, [pc, #16]	; (8007b4c <SVCCTL_Init+0x1c>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007b40:	f000 f806 	bl	8007b50 <SVCCTL_SvcInit>

  return;
 8007b44:	bf00      	nop
}
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20000998 	.word	0x20000998
 8007b4c:	200009b8 	.word	0x200009b8

08007b50 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  BAS_Init();
 8007b54:	f7ff ff74 	bl	8007a40 <BAS_Init>

  BLS_Init();
 8007b58:	f7ff ff79 	bl	8007a4e <BLS_Init>

  CRS_STM_Init();
 8007b5c:	f7ff ff7e 	bl	8007a5c <CRS_STM_Init>

  DIS_Init();
 8007b60:	f7ff ff83 	bl	8007a6a <DIS_Init>

  EDS_STM_Init();
 8007b64:	f7ff ff88 	bl	8007a78 <EDS_STM_Init>

  HIDS_Init();
 8007b68:	f7ff ff8d 	bl	8007a86 <HIDS_Init>

  HRS_Init();
 8007b6c:	f7ff ff92 	bl	8007a94 <HRS_Init>

  HTS_Init();
 8007b70:	f7ff ff97 	bl	8007aa2 <HTS_Init>

  IAS_Init();
 8007b74:	f7ff ff9c 	bl	8007ab0 <IAS_Init>

  LLS_Init();
 8007b78:	f7ff ffa1 	bl	8007abe <LLS_Init>

  TPS_Init();
 8007b7c:	f7ff ffa6 	bl	8007acc <TPS_Init>

  MOTENV_STM_Init();
 8007b80:	f7ff ffab 	bl	8007ada <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007b84:	f7ff ffb0 	bl	8007ae8 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007b88:	f7ff ffb5 	bl	8007af6 <ZDD_STM_Init>

  OTAS_STM_Init();
 8007b8c:	f7ff ffba 	bl	8007b04 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007b90:	f7ff ffc6 	bl	8007b20 <BVOPUS_STM_Init>

  MESH_Init();
 8007b94:	f7ff ffbd 	bl	8007b12 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007b98:	f002 f90a 	bl	8009db0 <SVCCTL_InitCustomSvc>
  
  return;
 8007b9c:	bf00      	nop
}
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007ba8:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <SVCCTL_RegisterSvcHandler+0x30>)
 8007baa:	7f1b      	ldrb	r3, [r3, #28]
 8007bac:	4619      	mov	r1, r3
 8007bae:	4a08      	ldr	r2, [pc, #32]	; (8007bd0 <SVCCTL_RegisterSvcHandler+0x30>)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <SVCCTL_RegisterSvcHandler+0x30>)
 8007bb8:	7f1b      	ldrb	r3, [r3, #28]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <SVCCTL_RegisterSvcHandler+0x30>)
 8007bc0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007bc2:	bf00      	nop
}
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	20000998 	.word	0x20000998

08007bd4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3301      	adds	r3, #1
 8007be0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007be2:	2300      	movs	r3, #0
 8007be4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	2bff      	cmp	r3, #255	; 0xff
 8007bec:	d125      	bne.n	8007c3a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	3302      	adds	r3, #2
 8007bf2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c02:	d118      	bne.n	8007c36 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007c04:	2300      	movs	r3, #0
 8007c06:	757b      	strb	r3, [r7, #21]
 8007c08:	e00d      	b.n	8007c26 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007c0a:	7d7b      	ldrb	r3, [r7, #21]
 8007c0c:	4a1a      	ldr	r2, [pc, #104]	; (8007c78 <SVCCTL_UserEvtRx+0xa4>)
 8007c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d108      	bne.n	8007c32 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007c20:	7d7b      	ldrb	r3, [r7, #21]
 8007c22:	3301      	adds	r3, #1
 8007c24:	757b      	strb	r3, [r7, #21]
 8007c26:	4b14      	ldr	r3, [pc, #80]	; (8007c78 <SVCCTL_UserEvtRx+0xa4>)
 8007c28:	7f1b      	ldrb	r3, [r3, #28]
 8007c2a:	7d7a      	ldrb	r2, [r7, #21]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d3ec      	bcc.n	8007c0a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007c30:	e002      	b.n	8007c38 <SVCCTL_UserEvtRx+0x64>
              break;
 8007c32:	bf00      	nop
          break;
 8007c34:	e000      	b.n	8007c38 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007c36:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007c38:	e000      	b.n	8007c3c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007c3a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
 8007c3e:	2b02      	cmp	r3, #2
 8007c40:	d00f      	beq.n	8007c62 <SVCCTL_UserEvtRx+0x8e>
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	dc10      	bgt.n	8007c68 <SVCCTL_UserEvtRx+0x94>
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <SVCCTL_UserEvtRx+0x7c>
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d006      	beq.n	8007c5c <SVCCTL_UserEvtRx+0x88>
 8007c4e:	e00b      	b.n	8007c68 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fff1 	bl	8008c38 <SVCCTL_App_Notification>
 8007c56:	4603      	mov	r3, r0
 8007c58:	75bb      	strb	r3, [r7, #22]
      break;
 8007c5a:	e008      	b.n	8007c6e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	75bb      	strb	r3, [r7, #22]
      break;
 8007c60:	e005      	b.n	8007c6e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007c62:	2300      	movs	r3, #0
 8007c64:	75bb      	strb	r3, [r7, #22]
      break;
 8007c66:	e002      	b.n	8007c6e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	75bb      	strb	r3, [r7, #22]
      break;
 8007c6c:	bf00      	nop
  }

  return (return_status);
 8007c6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	20000998 	.word	0x20000998

08007c7c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007c84:	f107 030c 	add.w	r3, r7, #12
 8007c88:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	212d      	movs	r1, #45	; 0x2d
 8007c94:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007c98:	f000 fae2 	bl	8008260 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	330b      	adds	r3, #11
 8007ca0:	78db      	ldrb	r3, [r3, #3]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3720      	adds	r7, #32
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b088      	sub	sp, #32
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007cb2:	f107 030c 	add.w	r3, r7, #12
 8007cb6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	210f      	movs	r1, #15
 8007cc2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007cc6:	f000 facb 	bl	8008260 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	330b      	adds	r3, #11
 8007cce:	78db      	ldrb	r3, [r3, #3]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3720      	adds	r7, #32
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007ce0:	f107 030c 	add.w	r3, r7, #12
 8007ce4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	2110      	movs	r1, #16
 8007cec:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8007cf0:	f000 fab6 	bl	8008260 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	330b      	adds	r3, #11
 8007cf8:	78db      	ldrb	r3, [r3, #3]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3720      	adds	r7, #32
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b08b      	sub	sp, #44	; 0x2c
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007d14:	2300      	movs	r3, #0
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007d2c:	4b4a      	ldr	r3, [pc, #296]	; (8007e58 <SHCI_GetWirelessFwInfo+0x154>)
 8007d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007d34:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007d3e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a44      	ldr	r2, [pc, #272]	; (8007e5c <SHCI_GetWirelessFwInfo+0x158>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d10f      	bne.n	8007d70 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	69db      	ldr	r3, [r3, #28]
 8007d60:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	e01a      	b.n	8007da6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007d78:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007d7c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	695b      	ldr	r3, [r3, #20]
 8007d8c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	0e1b      	lsrs	r3, r3, #24
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	0c1b      	lsrs	r3, r3, #16
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	0a1b      	lsrs	r3, r3, #8
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	091b      	lsrs	r3, r3, #4
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	f003 030f 	and.w	r3, r3, #15
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	f003 030f 	and.w	r3, r3, #15
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	0e1b      	lsrs	r3, r3, #24
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	0c1b      	lsrs	r3, r3, #16
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	0a1b      	lsrs	r3, r3, #8
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	0e1b      	lsrs	r3, r3, #24
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007e1a:	69bb      	ldr	r3, [r7, #24]
 8007e1c:	0c1b      	lsrs	r3, r3, #16
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	0a1b      	lsrs	r3, r3, #8
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	0e1b      	lsrs	r3, r3, #24
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	0c1b      	lsrs	r3, r3, #16
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	372c      	adds	r7, #44	; 0x2c
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	58004000 	.word	0x58004000
 8007e5c:	a94656b9 	.word	0xa94656b9

08007e60 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	4a08      	ldr	r2, [pc, #32]	; (8007e90 <hci_init+0x30>)
 8007e70:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007e72:	4a08      	ldr	r2, [pc, #32]	; (8007e94 <hci_init+0x34>)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007e78:	4806      	ldr	r0, [pc, #24]	; (8007e94 <hci_init+0x34>)
 8007e7a:	f000 f973 	bl	8008164 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 f8d4 	bl	8008030 <TlInit>

  return;
 8007e88:	bf00      	nop
}
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20000f34 	.word	0x20000f34
 8007e94:	20000f0c 	.word	0x20000f0c

08007e98 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007e9e:	4822      	ldr	r0, [pc, #136]	; (8007f28 <hci_user_evt_proc+0x90>)
 8007ea0:	f000 fd50 	bl	8008944 <LST_is_empty>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d12b      	bne.n	8007f02 <hci_user_evt_proc+0x6a>
 8007eaa:	4b20      	ldr	r3, [pc, #128]	; (8007f2c <hci_user_evt_proc+0x94>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d027      	beq.n	8007f02 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007eb2:	f107 030c 	add.w	r3, r7, #12
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	481b      	ldr	r0, [pc, #108]	; (8007f28 <hci_user_evt_proc+0x90>)
 8007eba:	f000 fdd2 	bl	8008a62 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007ebe:	4b1c      	ldr	r3, [pc, #112]	; (8007f30 <hci_user_evt_proc+0x98>)
 8007ec0:	69db      	ldr	r3, [r3, #28]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00c      	beq.n	8007ee0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007ece:	4b18      	ldr	r3, [pc, #96]	; (8007f30 <hci_user_evt_proc+0x98>)
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	1d3a      	adds	r2, r7, #4
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007ed8:	793a      	ldrb	r2, [r7, #4]
 8007eda:	4b14      	ldr	r3, [pc, #80]	; (8007f2c <hci_user_evt_proc+0x94>)
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e002      	b.n	8007ee6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007ee0:	4b12      	ldr	r3, [pc, #72]	; (8007f2c <hci_user_evt_proc+0x94>)
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007ee6:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <hci_user_evt_proc+0x94>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fc03 	bl	80086fc <TL_MM_EvtDone>
 8007ef6:	e004      	b.n	8007f02 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4619      	mov	r1, r3
 8007efc:	480a      	ldr	r0, [pc, #40]	; (8007f28 <hci_user_evt_proc+0x90>)
 8007efe:	f000 fd43 	bl	8008988 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007f02:	4809      	ldr	r0, [pc, #36]	; (8007f28 <hci_user_evt_proc+0x90>)
 8007f04:	f000 fd1e 	bl	8008944 <LST_is_empty>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d107      	bne.n	8007f1e <hci_user_evt_proc+0x86>
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <hci_user_evt_proc+0x94>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007f16:	4804      	ldr	r0, [pc, #16]	; (8007f28 <hci_user_evt_proc+0x90>)
 8007f18:	f001 fcee 	bl	80098f8 <hci_notify_asynch_evt>
  }


  return;
 8007f1c:	bf00      	nop
 8007f1e:	bf00      	nop
}
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	200009c0 	.word	0x200009c0
 8007f2c:	200009cc 	.word	0x200009cc
 8007f30:	20000f0c 	.word	0x20000f0c

08007f34 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b088      	sub	sp, #32
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007f40:	2000      	movs	r0, #0
 8007f42:	f000 f8cb 	bl	80080dc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007f46:	2300      	movs	r3, #0
 8007f48:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	885b      	ldrh	r3, [r3, #2]
 8007f4e:	b21b      	sxth	r3, r3
 8007f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f54:	b21a      	sxth	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	029b      	lsls	r3, r3, #10
 8007f5c:	b21b      	sxth	r3, r3
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	b21b      	sxth	r3, r3
 8007f62:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	b2d9      	uxtb	r1, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	8bbb      	ldrh	r3, [r7, #28]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 f88d 	bl	8008090 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007f76:	e04e      	b.n	8008016 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007f78:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007f7c:	f001 fcd3 	bl	8009926 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007f80:	e043      	b.n	800800a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007f82:	f107 030c 	add.w	r3, r7, #12
 8007f86:	4619      	mov	r1, r3
 8007f88:	4828      	ldr	r0, [pc, #160]	; (800802c <hci_send_req+0xf8>)
 8007f8a:	f000 fd6a 	bl	8008a62 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	7a5b      	ldrb	r3, [r3, #9]
 8007f92:	2b0f      	cmp	r3, #15
 8007f94:	d114      	bne.n	8007fc0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	330b      	adds	r3, #11
 8007f9a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	885b      	ldrh	r3, [r3, #2]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	8bba      	ldrh	r2, [r7, #28]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d104      	bne.n	8007fb2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	7812      	ldrb	r2, [r2, #0]
 8007fb0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	785b      	ldrb	r3, [r3, #1]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d027      	beq.n	800800a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	77fb      	strb	r3, [r7, #31]
 8007fbe:	e024      	b.n	800800a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	330b      	adds	r3, #11
 8007fc4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	8bba      	ldrh	r2, [r7, #28]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d114      	bne.n	8007ffe <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	7a9b      	ldrb	r3, [r3, #10]
 8007fd8:	3b03      	subs	r3, #3
 8007fda:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	695a      	ldr	r2, [r3, #20]
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	bfa8      	it	ge
 8007fe6:	461a      	movge	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6918      	ldr	r0, [r3, #16]
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	1cd9      	adds	r1, r3, #3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f002 fcf3 	bl	800a9e4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008006:	2301      	movs	r3, #1
 8008008:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800800a:	4808      	ldr	r0, [pc, #32]	; (800802c <hci_send_req+0xf8>)
 800800c:	f000 fc9a 	bl	8008944 <LST_is_empty>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0b5      	beq.n	8007f82 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008016:	7ffb      	ldrb	r3, [r7, #31]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0ad      	beq.n	8007f78 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800801c:	2001      	movs	r0, #1
 800801e:	f000 f85d 	bl	80080dc <NotifyCmdStatus>

  return 0;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	20000f2c 	.word	0x20000f2c

08008030 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008038:	480f      	ldr	r0, [pc, #60]	; (8008078 <TlInit+0x48>)
 800803a:	f000 fc73 	bl	8008924 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800803e:	4a0f      	ldr	r2, [pc, #60]	; (800807c <TlInit+0x4c>)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008044:	480e      	ldr	r0, [pc, #56]	; (8008080 <TlInit+0x50>)
 8008046:	f000 fc6d 	bl	8008924 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800804a:	4b0e      	ldr	r3, [pc, #56]	; (8008084 <TlInit+0x54>)
 800804c:	2201      	movs	r2, #1
 800804e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008050:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <TlInit+0x58>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00a      	beq.n	800806e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800805c:	4b0b      	ldr	r3, [pc, #44]	; (800808c <TlInit+0x5c>)
 800805e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008060:	4b09      	ldr	r3, [pc, #36]	; (8008088 <TlInit+0x58>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f107 0208 	add.w	r2, r7, #8
 8008068:	4610      	mov	r0, r2
 800806a:	4798      	blx	r3
  }

  return;
 800806c:	bf00      	nop
 800806e:	bf00      	nop
}
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000f2c 	.word	0x20000f2c
 800807c:	200009c8 	.word	0x200009c8
 8008080:	200009c0 	.word	0x200009c0
 8008084:	200009cc 	.word	0x200009cc
 8008088:	20000f0c 	.word	0x20000f0c
 800808c:	0800811d 	.word	0x0800811d

08008090 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	603a      	str	r2, [r7, #0]
 800809a:	80fb      	strh	r3, [r7, #6]
 800809c:	460b      	mov	r3, r1
 800809e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80080a0:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <SendCmd+0x44>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	88fa      	ldrh	r2, [r7, #6]
 80080a6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80080aa:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <SendCmd+0x44>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	797a      	ldrb	r2, [r7, #5]
 80080b0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80080b2:	4b08      	ldr	r3, [pc, #32]	; (80080d4 <SendCmd+0x44>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	330c      	adds	r3, #12
 80080b8:	797a      	ldrb	r2, [r7, #5]
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f002 fc91 	bl	800a9e4 <memcpy>

  hciContext.io.Send(0,0);
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <SendCmd+0x48>)
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	2100      	movs	r1, #0
 80080c8:	2000      	movs	r0, #0
 80080ca:	4798      	blx	r3

  return;
 80080cc:	bf00      	nop
}
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	200009c8 	.word	0x200009c8
 80080d8:	20000f0c 	.word	0x20000f0c

080080dc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	4603      	mov	r3, r0
 80080e4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d108      	bne.n	80080fe <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80080ec:	4b0a      	ldr	r3, [pc, #40]	; (8008118 <NotifyCmdStatus+0x3c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00d      	beq.n	8008110 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80080f4:	4b08      	ldr	r3, [pc, #32]	; (8008118 <NotifyCmdStatus+0x3c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2000      	movs	r0, #0
 80080fa:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80080fc:	e008      	b.n	8008110 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80080fe:	4b06      	ldr	r3, [pc, #24]	; (8008118 <NotifyCmdStatus+0x3c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d004      	beq.n	8008110 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008106:	4b04      	ldr	r3, [pc, #16]	; (8008118 <NotifyCmdStatus+0x3c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2001      	movs	r0, #1
 800810c:	4798      	blx	r3
  return;
 800810e:	bf00      	nop
 8008110:	bf00      	nop
}
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20000f34 	.word	0x20000f34

0800811c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	7a5b      	ldrb	r3, [r3, #9]
 8008128:	2b0f      	cmp	r3, #15
 800812a:	d003      	beq.n	8008134 <TlEvtReceived+0x18>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	7a5b      	ldrb	r3, [r3, #9]
 8008130:	2b0e      	cmp	r3, #14
 8008132:	d107      	bne.n	8008144 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008134:	6879      	ldr	r1, [r7, #4]
 8008136:	4809      	ldr	r0, [pc, #36]	; (800815c <TlEvtReceived+0x40>)
 8008138:	f000 fc4c 	bl	80089d4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800813c:	2000      	movs	r0, #0
 800813e:	f001 fbe7 	bl	8009910 <hci_cmd_resp_release>
 8008142:	e006      	b.n	8008152 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008144:	6879      	ldr	r1, [r7, #4]
 8008146:	4806      	ldr	r0, [pc, #24]	; (8008160 <TlEvtReceived+0x44>)
 8008148:	f000 fc44 	bl	80089d4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800814c:	4804      	ldr	r0, [pc, #16]	; (8008160 <TlEvtReceived+0x44>)
 800814e:	f001 fbd3 	bl	80098f8 <hci_notify_asynch_evt>
  }

  return;
 8008152:	bf00      	nop
}
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20000f2c 	.word	0x20000f2c
 8008160:	200009c0 	.word	0x200009c0

08008164 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a05      	ldr	r2, [pc, #20]	; (8008184 <hci_register_io_bus+0x20>)
 8008170:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a04      	ldr	r2, [pc, #16]	; (8008188 <hci_register_io_bus+0x24>)
 8008176:	611a      	str	r2, [r3, #16]

  return;
 8008178:	bf00      	nop
}
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	08008475 	.word	0x08008475
 8008188:	080084dd 	.word	0x080084dd

0800818c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	4a08      	ldr	r2, [pc, #32]	; (80081bc <shci_init+0x30>)
 800819c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800819e:	4a08      	ldr	r2, [pc, #32]	; (80081c0 <shci_init+0x34>)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80081a4:	4806      	ldr	r0, [pc, #24]	; (80081c0 <shci_init+0x34>)
 80081a6:	f000 f911 	bl	80083cc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f894 	bl	80082dc <TlInit>

  return;
 80081b4:	bf00      	nop
}
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20000f58 	.word	0x20000f58
 80081c0:	20000f38 	.word	0x20000f38

080081c4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80081ca:	4822      	ldr	r0, [pc, #136]	; (8008254 <shci_user_evt_proc+0x90>)
 80081cc:	f000 fbba 	bl	8008944 <LST_is_empty>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d12b      	bne.n	800822e <shci_user_evt_proc+0x6a>
 80081d6:	4b20      	ldr	r3, [pc, #128]	; (8008258 <shci_user_evt_proc+0x94>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d027      	beq.n	800822e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80081de:	f107 030c 	add.w	r3, r7, #12
 80081e2:	4619      	mov	r1, r3
 80081e4:	481b      	ldr	r0, [pc, #108]	; (8008254 <shci_user_evt_proc+0x90>)
 80081e6:	f000 fc3c 	bl	8008a62 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80081ea:	4b1c      	ldr	r3, [pc, #112]	; (800825c <shci_user_evt_proc+0x98>)
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00c      	beq.n	800820c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80081f6:	2301      	movs	r3, #1
 80081f8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80081fa:	4b18      	ldr	r3, [pc, #96]	; (800825c <shci_user_evt_proc+0x98>)
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	1d3a      	adds	r2, r7, #4
 8008200:	4610      	mov	r0, r2
 8008202:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008204:	793a      	ldrb	r2, [r7, #4]
 8008206:	4b14      	ldr	r3, [pc, #80]	; (8008258 <shci_user_evt_proc+0x94>)
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	e002      	b.n	8008212 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800820c:	4b12      	ldr	r3, [pc, #72]	; (8008258 <shci_user_evt_proc+0x94>)
 800820e:	2201      	movs	r2, #1
 8008210:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8008212:	4b11      	ldr	r3, [pc, #68]	; (8008258 <shci_user_evt_proc+0x94>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fa6d 	bl	80086fc <TL_MM_EvtDone>
 8008222:	e004      	b.n	800822e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4619      	mov	r1, r3
 8008228:	480a      	ldr	r0, [pc, #40]	; (8008254 <shci_user_evt_proc+0x90>)
 800822a:	f000 fbad 	bl	8008988 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800822e:	4809      	ldr	r0, [pc, #36]	; (8008254 <shci_user_evt_proc+0x90>)
 8008230:	f000 fb88 	bl	8008944 <LST_is_empty>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d107      	bne.n	800824a <shci_user_evt_proc+0x86>
 800823a:	4b07      	ldr	r3, [pc, #28]	; (8008258 <shci_user_evt_proc+0x94>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008242:	4804      	ldr	r0, [pc, #16]	; (8008254 <shci_user_evt_proc+0x90>)
 8008244:	f7f9 f8d0 	bl	80013e8 <shci_notify_asynch_evt>
  }


  return;
 8008248:	bf00      	nop
 800824a:	bf00      	nop
}
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	200009d0 	.word	0x200009d0
 8008258:	200009e0 	.word	0x200009e0
 800825c:	20000f38 	.word	0x20000f38

08008260 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	60ba      	str	r2, [r7, #8]
 8008268:	607b      	str	r3, [r7, #4]
 800826a:	4603      	mov	r3, r0
 800826c:	81fb      	strh	r3, [r7, #14]
 800826e:	460b      	mov	r3, r1
 8008270:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008272:	2000      	movs	r0, #0
 8008274:	f000 f864 	bl	8008340 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008278:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <shci_send+0x74>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	89fa      	ldrh	r2, [r7, #14]
 800827e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008282:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <shci_send+0x74>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	7b7a      	ldrb	r2, [r7, #13]
 8008288:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <shci_send+0x74>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	330c      	adds	r3, #12
 8008290:	7b7a      	ldrb	r2, [r7, #13]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	4618      	mov	r0, r3
 8008296:	f002 fba5 	bl	800a9e4 <memcpy>

  shciContext.io.Send(0,0);
 800829a:	4b0f      	ldr	r3, [pc, #60]	; (80082d8 <shci_send+0x78>)
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2100      	movs	r1, #0
 80082a0:	2000      	movs	r0, #0
 80082a2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80082a4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80082a8:	f7f9 f8b5 	bl	8001416 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f103 0008 	add.w	r0, r3, #8
 80082b2:	4b08      	ldr	r3, [pc, #32]	; (80082d4 <shci_send+0x74>)
 80082b4:	6819      	ldr	r1, [r3, #0]
 80082b6:	4b07      	ldr	r3, [pc, #28]	; (80082d4 <shci_send+0x74>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	789b      	ldrb	r3, [r3, #2]
 80082bc:	3303      	adds	r3, #3
 80082be:	461a      	mov	r2, r3
 80082c0:	f002 fb90 	bl	800a9e4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80082c4:	2001      	movs	r0, #1
 80082c6:	f000 f83b 	bl	8008340 <Cmd_SetStatus>

  return;
 80082ca:	bf00      	nop
}
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	200009dc 	.word	0x200009dc
 80082d8:	20000f38 	.word	0x20000f38

080082dc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80082e4:	4a10      	ldr	r2, [pc, #64]	; (8008328 <TlInit+0x4c>)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80082ea:	4810      	ldr	r0, [pc, #64]	; (800832c <TlInit+0x50>)
 80082ec:	f000 fb1a 	bl	8008924 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80082f0:	2001      	movs	r0, #1
 80082f2:	f000 f825 	bl	8008340 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80082f6:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <TlInit+0x54>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80082fc:	4b0d      	ldr	r3, [pc, #52]	; (8008334 <TlInit+0x58>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00c      	beq.n	800831e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008308:	4b0b      	ldr	r3, [pc, #44]	; (8008338 <TlInit+0x5c>)
 800830a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800830c:	4b0b      	ldr	r3, [pc, #44]	; (800833c <TlInit+0x60>)
 800830e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008310:	4b08      	ldr	r3, [pc, #32]	; (8008334 <TlInit+0x58>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f107 020c 	add.w	r2, r7, #12
 8008318:	4610      	mov	r0, r2
 800831a:	4798      	blx	r3
  }

  return;
 800831c:	bf00      	nop
 800831e:	bf00      	nop
}
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	200009dc 	.word	0x200009dc
 800832c:	200009d0 	.word	0x200009d0
 8008330:	200009e0 	.word	0x200009e0
 8008334:	20000f38 	.word	0x20000f38
 8008338:	08008391 	.word	0x08008391
 800833c:	080083a9 	.word	0x080083a9

08008340 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	4603      	mov	r3, r0
 8008348:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008350:	4b0d      	ldr	r3, [pc, #52]	; (8008388 <Cmd_SetStatus+0x48>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008358:	4b0b      	ldr	r3, [pc, #44]	; (8008388 <Cmd_SetStatus+0x48>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2000      	movs	r0, #0
 800835e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008360:	4b0a      	ldr	r3, [pc, #40]	; (800838c <Cmd_SetStatus+0x4c>)
 8008362:	2200      	movs	r2, #0
 8008364:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008366:	e00b      	b.n	8008380 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008368:	4b08      	ldr	r3, [pc, #32]	; (800838c <Cmd_SetStatus+0x4c>)
 800836a:	2201      	movs	r2, #1
 800836c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800836e:	4b06      	ldr	r3, [pc, #24]	; (8008388 <Cmd_SetStatus+0x48>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d004      	beq.n	8008380 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008376:	4b04      	ldr	r3, [pc, #16]	; (8008388 <Cmd_SetStatus+0x48>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2001      	movs	r0, #1
 800837c:	4798      	blx	r3
  return;
 800837e:	bf00      	nop
 8008380:	bf00      	nop
}
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	20000f58 	.word	0x20000f58
 800838c:	200009d8 	.word	0x200009d8

08008390 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008398:	2000      	movs	r0, #0
 800839a:	f7f9 f831 	bl	8001400 <shci_cmd_resp_release>

  return;
 800839e:	bf00      	nop
}
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4805      	ldr	r0, [pc, #20]	; (80083c8 <TlUserEvtReceived+0x20>)
 80083b4:	f000 fb0e 	bl	80089d4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80083b8:	4803      	ldr	r0, [pc, #12]	; (80083c8 <TlUserEvtReceived+0x20>)
 80083ba:	f7f9 f815 	bl	80013e8 <shci_notify_asynch_evt>

  return;
 80083be:	bf00      	nop
}
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	200009d0 	.word	0x200009d0

080083cc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a05      	ldr	r2, [pc, #20]	; (80083ec <shci_register_io_bus+0x20>)
 80083d8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a04      	ldr	r2, [pc, #16]	; (80083f0 <shci_register_io_bus+0x24>)
 80083de:	611a      	str	r2, [r3, #16]

  return;
 80083e0:	bf00      	nop
}
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	08008589 	.word	0x08008589
 80083f0:	080085dd 	.word	0x080085dd

080083f4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80083f8:	f001 ff78 	bl	800a2ec <HW_IPCC_Enable>

  return;
 80083fc:	bf00      	nop
}
 80083fe:	bd80      	pop	{r7, pc}

08008400 <TL_Init>:


void TL_Init( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008404:	4b10      	ldr	r3, [pc, #64]	; (8008448 <TL_Init+0x48>)
 8008406:	4a11      	ldr	r2, [pc, #68]	; (800844c <TL_Init+0x4c>)
 8008408:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800840a:	4b0f      	ldr	r3, [pc, #60]	; (8008448 <TL_Init+0x48>)
 800840c:	4a10      	ldr	r2, [pc, #64]	; (8008450 <TL_Init+0x50>)
 800840e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008410:	4b0d      	ldr	r3, [pc, #52]	; (8008448 <TL_Init+0x48>)
 8008412:	4a10      	ldr	r2, [pc, #64]	; (8008454 <TL_Init+0x54>)
 8008414:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008416:	4b0c      	ldr	r3, [pc, #48]	; (8008448 <TL_Init+0x48>)
 8008418:	4a0f      	ldr	r2, [pc, #60]	; (8008458 <TL_Init+0x58>)
 800841a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <TL_Init+0x48>)
 800841e:	4a0f      	ldr	r2, [pc, #60]	; (800845c <TL_Init+0x5c>)
 8008420:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008422:	4b09      	ldr	r3, [pc, #36]	; (8008448 <TL_Init+0x48>)
 8008424:	4a0e      	ldr	r2, [pc, #56]	; (8008460 <TL_Init+0x60>)
 8008426:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008428:	4b07      	ldr	r3, [pc, #28]	; (8008448 <TL_Init+0x48>)
 800842a:	4a0e      	ldr	r2, [pc, #56]	; (8008464 <TL_Init+0x64>)
 800842c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800842e:	4b06      	ldr	r3, [pc, #24]	; (8008448 <TL_Init+0x48>)
 8008430:	4a0d      	ldr	r2, [pc, #52]	; (8008468 <TL_Init+0x68>)
 8008432:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008434:	4b04      	ldr	r3, [pc, #16]	; (8008448 <TL_Init+0x48>)
 8008436:	4a0d      	ldr	r2, [pc, #52]	; (800846c <TL_Init+0x6c>)
 8008438:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800843a:	4b03      	ldr	r3, [pc, #12]	; (8008448 <TL_Init+0x48>)
 800843c:	4a0c      	ldr	r2, [pc, #48]	; (8008470 <TL_Init+0x70>)
 800843e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008440:	f001 ff68 	bl	800a314 <HW_IPCC_Init>

  return;
 8008444:	bf00      	nop
}
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20030000 	.word	0x20030000
 800844c:	20030028 	.word	0x20030028
 8008450:	20030048 	.word	0x20030048
 8008454:	20030058 	.word	0x20030058
 8008458:	20030068 	.word	0x20030068
 800845c:	20030070 	.word	0x20030070
 8008460:	20030078 	.word	0x20030078
 8008464:	20030080 	.word	0x20030080
 8008468:	2003009c 	.word	0x2003009c
 800846c:	200300a0 	.word	0x200300a0
 8008470:	200300ac 	.word	0x200300ac

08008474 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008480:	4811      	ldr	r0, [pc, #68]	; (80084c8 <TL_BLE_Init+0x54>)
 8008482:	f000 fa4f 	bl	8008924 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008486:	4b11      	ldr	r3, [pc, #68]	; (80084cc <TL_BLE_Init+0x58>)
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	689a      	ldr	r2, [r3, #8]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4a0c      	ldr	r2, [pc, #48]	; (80084d0 <TL_BLE_Init+0x5c>)
 80084a0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	4a08      	ldr	r2, [pc, #32]	; (80084c8 <TL_BLE_Init+0x54>)
 80084a6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80084a8:	f001 ff4a 	bl	800a340 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a08      	ldr	r2, [pc, #32]	; (80084d4 <TL_BLE_Init+0x60>)
 80084b2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	4a07      	ldr	r2, [pc, #28]	; (80084d8 <TL_BLE_Init+0x64>)
 80084ba:	6013      	str	r3, [r2, #0]

  return 0;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	200300c8 	.word	0x200300c8
 80084cc:	20030000 	.word	0x20030000
 80084d0:	20000988 	.word	0x20000988
 80084d4:	20000f64 	.word	0x20000f64
 80084d8:	20000f68 	.word	0x20000f68

080084dc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80084e8:	4b09      	ldr	r3, [pc, #36]	; (8008510 <TL_BLE_SendCmd+0x34>)
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2201      	movs	r2, #1
 80084f0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <TL_BLE_SendCmd+0x34>)
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4619      	mov	r1, r3
 80084fa:	2001      	movs	r0, #1
 80084fc:	f000 f96c 	bl	80087d8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008500:	f001 ff28 	bl	800a354 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3708      	adds	r7, #8
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20030000 	.word	0x20030000

08008514 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800851a:	e01c      	b.n	8008556 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800851c:	1d3b      	adds	r3, r7, #4
 800851e:	4619      	mov	r1, r3
 8008520:	4812      	ldr	r0, [pc, #72]	; (800856c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008522:	f000 fa9e 	bl	8008a62 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	7a5b      	ldrb	r3, [r3, #9]
 800852a:	2b0f      	cmp	r3, #15
 800852c:	d003      	beq.n	8008536 <HW_IPCC_BLE_RxEvtNot+0x22>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	7a5b      	ldrb	r3, [r3, #9]
 8008532:	2b0e      	cmp	r3, #14
 8008534:	d105      	bne.n	8008542 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4619      	mov	r1, r3
 800853a:	2002      	movs	r0, #2
 800853c:	f000 f94c 	bl	80087d8 <OutputDbgTrace>
 8008540:	e004      	b.n	800854c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4619      	mov	r1, r3
 8008546:	2003      	movs	r0, #3
 8008548:	f000 f946 	bl	80087d8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800854c:	4b08      	ldr	r3, [pc, #32]	; (8008570 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	4610      	mov	r0, r2
 8008554:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008556:	4805      	ldr	r0, [pc, #20]	; (800856c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008558:	f000 f9f4 	bl	8008944 <LST_is_empty>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0dc      	beq.n	800851c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008562:	bf00      	nop
}
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	200300c8 	.word	0x200300c8
 8008570:	20000f64 	.word	0x20000f64

08008574 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008578:	4b02      	ldr	r3, [pc, #8]	; (8008584 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4798      	blx	r3

  return;
 800857e:	bf00      	nop
}
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000f68 	.word	0x20000f68

08008588 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008594:	480d      	ldr	r0, [pc, #52]	; (80085cc <TL_SYS_Init+0x44>)
 8008596:	f000 f9c5 	bl	8008924 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800859a:	4b0d      	ldr	r3, [pc, #52]	; (80085d0 <TL_SYS_Init+0x48>)
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4a08      	ldr	r2, [pc, #32]	; (80085cc <TL_SYS_Init+0x44>)
 80085ac:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80085ae:	f001 fef3 	bl	800a398 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a07      	ldr	r2, [pc, #28]	; (80085d4 <TL_SYS_Init+0x4c>)
 80085b8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	4a06      	ldr	r2, [pc, #24]	; (80085d8 <TL_SYS_Init+0x50>)
 80085c0:	6013      	str	r3, [r2, #0]

  return 0;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	200300d0 	.word	0x200300d0
 80085d0:	20030000 	.word	0x20030000
 80085d4:	20000f6c 	.word	0x20000f6c
 80085d8:	20000f70 	.word	0x20000f70

080085dc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80085e8:	4b09      	ldr	r3, [pc, #36]	; (8008610 <TL_SYS_SendCmd+0x34>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2210      	movs	r2, #16
 80085f0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80085f2:	4b07      	ldr	r3, [pc, #28]	; (8008610 <TL_SYS_SendCmd+0x34>)
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4619      	mov	r1, r3
 80085fa:	2004      	movs	r0, #4
 80085fc:	f000 f8ec 	bl	80087d8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008600:	f001 fed4 	bl	800a3ac <HW_IPCC_SYS_SendCmd>

  return 0;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20030000 	.word	0x20030000

08008614 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008618:	4b07      	ldr	r3, [pc, #28]	; (8008638 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4619      	mov	r1, r3
 8008620:	2005      	movs	r0, #5
 8008622:	f000 f8d9 	bl	80087d8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008626:	4b05      	ldr	r3, [pc, #20]	; (800863c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a03      	ldr	r2, [pc, #12]	; (8008638 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800862c:	68d2      	ldr	r2, [r2, #12]
 800862e:	6812      	ldr	r2, [r2, #0]
 8008630:	4610      	mov	r0, r2
 8008632:	4798      	blx	r3

  return;
 8008634:	bf00      	nop
}
 8008636:	bd80      	pop	{r7, pc}
 8008638:	20030000 	.word	0x20030000
 800863c:	20000f6c 	.word	0x20000f6c

08008640 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008646:	e00e      	b.n	8008666 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008648:	1d3b      	adds	r3, r7, #4
 800864a:	4619      	mov	r1, r3
 800864c:	480b      	ldr	r0, [pc, #44]	; (800867c <HW_IPCC_SYS_EvtNot+0x3c>)
 800864e:	f000 fa08 	bl	8008a62 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4619      	mov	r1, r3
 8008656:	2006      	movs	r0, #6
 8008658:	f000 f8be 	bl	80087d8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800865c:	4b08      	ldr	r3, [pc, #32]	; (8008680 <HW_IPCC_SYS_EvtNot+0x40>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	4610      	mov	r0, r2
 8008664:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008666:	4805      	ldr	r0, [pc, #20]	; (800867c <HW_IPCC_SYS_EvtNot+0x3c>)
 8008668:	f000 f96c 	bl	8008944 <LST_is_empty>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d0ea      	beq.n	8008648 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008672:	bf00      	nop
}
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	200300d0 	.word	0x200300d0
 8008680:	20000f70 	.word	0x20000f70

08008684 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b082      	sub	sp, #8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800868c:	4817      	ldr	r0, [pc, #92]	; (80086ec <TL_MM_Init+0x68>)
 800868e:	f000 f949 	bl	8008924 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008692:	4817      	ldr	r0, [pc, #92]	; (80086f0 <TL_MM_Init+0x6c>)
 8008694:	f000 f946 	bl	8008924 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008698:	4b16      	ldr	r3, [pc, #88]	; (80086f4 <TL_MM_Init+0x70>)
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	4a16      	ldr	r2, [pc, #88]	; (80086f8 <TL_MM_Init+0x74>)
 800869e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80086a0:	4b15      	ldr	r3, [pc, #84]	; (80086f8 <TL_MM_Init+0x74>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	6892      	ldr	r2, [r2, #8]
 80086a8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80086aa:	4b13      	ldr	r3, [pc, #76]	; (80086f8 <TL_MM_Init+0x74>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	68d2      	ldr	r2, [r2, #12]
 80086b2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80086b4:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <TL_MM_Init+0x74>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a0c      	ldr	r2, [pc, #48]	; (80086ec <TL_MM_Init+0x68>)
 80086ba:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80086bc:	4b0e      	ldr	r3, [pc, #56]	; (80086f8 <TL_MM_Init+0x74>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6812      	ldr	r2, [r2, #0]
 80086c4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80086c6:	4b0c      	ldr	r3, [pc, #48]	; (80086f8 <TL_MM_Init+0x74>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6852      	ldr	r2, [r2, #4]
 80086ce:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80086d0:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <TL_MM_Init+0x74>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	6912      	ldr	r2, [r2, #16]
 80086d8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80086da:	4b07      	ldr	r3, [pc, #28]	; (80086f8 <TL_MM_Init+0x74>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6952      	ldr	r2, [r2, #20]
 80086e2:	619a      	str	r2, [r3, #24]

  return;
 80086e4:	bf00      	nop
}
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	200300b8 	.word	0x200300b8
 80086f0:	20000f5c 	.word	0x20000f5c
 80086f4:	20030000 	.word	0x20030000
 80086f8:	20000f74 	.word	0x20000f74

080086fc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	4807      	ldr	r0, [pc, #28]	; (8008724 <TL_MM_EvtDone+0x28>)
 8008708:	f000 f964 	bl	80089d4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	2000      	movs	r0, #0
 8008710:	f000 f862 	bl	80087d8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008714:	4804      	ldr	r0, [pc, #16]	; (8008728 <TL_MM_EvtDone+0x2c>)
 8008716:	f001 fe6f 	bl	800a3f8 <HW_IPCC_MM_SendFreeBuf>

  return;
 800871a:	bf00      	nop
}
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	20000f5c 	.word	0x20000f5c
 8008728:	0800872d 	.word	0x0800872d

0800872c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008732:	e00c      	b.n	800874e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008734:	1d3b      	adds	r3, r7, #4
 8008736:	4619      	mov	r1, r3
 8008738:	480a      	ldr	r0, [pc, #40]	; (8008764 <SendFreeBuf+0x38>)
 800873a:	f000 f992 	bl	8008a62 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800873e:	4b0a      	ldr	r3, [pc, #40]	; (8008768 <SendFreeBuf+0x3c>)
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f000 f943 	bl	80089d4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800874e:	4805      	ldr	r0, [pc, #20]	; (8008764 <SendFreeBuf+0x38>)
 8008750:	f000 f8f8 	bl	8008944 <LST_is_empty>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0ec      	beq.n	8008734 <SendFreeBuf+0x8>
  }

  return;
 800875a:	bf00      	nop
}
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000f5c 	.word	0x20000f5c
 8008768:	20030000 	.word	0x20030000

0800876c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008770:	4805      	ldr	r0, [pc, #20]	; (8008788 <TL_TRACES_Init+0x1c>)
 8008772:	f000 f8d7 	bl	8008924 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008776:	4b05      	ldr	r3, [pc, #20]	; (800878c <TL_TRACES_Init+0x20>)
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	4a03      	ldr	r2, [pc, #12]	; (8008788 <TL_TRACES_Init+0x1c>)
 800877c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800877e:	f001 fe71 	bl	800a464 <HW_IPCC_TRACES_Init>

  return;
 8008782:	bf00      	nop
}
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	200300c0 	.word	0x200300c0
 800878c:	20030000 	.word	0x20030000

08008790 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008796:	e008      	b.n	80087aa <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008798:	1d3b      	adds	r3, r7, #4
 800879a:	4619      	mov	r1, r3
 800879c:	4808      	ldr	r0, [pc, #32]	; (80087c0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800879e:	f000 f960 	bl	8008a62 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f000 f80d 	bl	80087c4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80087aa:	4805      	ldr	r0, [pc, #20]	; (80087c0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80087ac:	f000 f8ca 	bl	8008944 <LST_is_empty>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0f0      	beq.n	8008798 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80087b6:	bf00      	nop
}
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	200300c0 	.word	0x200300c0

080087c4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	6039      	str	r1, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80087e4:	79fb      	ldrb	r3, [r7, #7]
 80087e6:	2b06      	cmp	r3, #6
 80087e8:	d845      	bhi.n	8008876 <OutputDbgTrace+0x9e>
 80087ea:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <OutputDbgTrace+0x18>)
 80087ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f0:	0800880d 	.word	0x0800880d
 80087f4:	08008831 	.word	0x08008831
 80087f8:	08008837 	.word	0x08008837
 80087fc:	0800884b 	.word	0x0800884b
 8008800:	08008857 	.word	0x08008857
 8008804:	0800885d 	.word	0x0800885d
 8008808:	0800886b 	.word	0x0800886b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	7a5b      	ldrb	r3, [r3, #9]
 8008814:	2bff      	cmp	r3, #255	; 0xff
 8008816:	d005      	beq.n	8008824 <OutputDbgTrace+0x4c>
 8008818:	2bff      	cmp	r3, #255	; 0xff
 800881a:	dc05      	bgt.n	8008828 <OutputDbgTrace+0x50>
 800881c:	2b0e      	cmp	r3, #14
 800881e:	d005      	beq.n	800882c <OutputDbgTrace+0x54>
 8008820:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008822:	e001      	b.n	8008828 <OutputDbgTrace+0x50>
          break;
 8008824:	bf00      	nop
 8008826:	e027      	b.n	8008878 <OutputDbgTrace+0xa0>
          break;
 8008828:	bf00      	nop
 800882a:	e025      	b.n	8008878 <OutputDbgTrace+0xa0>
          break;
 800882c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800882e:	e023      	b.n	8008878 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008834:	e020      	b.n	8008878 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	7a5b      	ldrb	r3, [r3, #9]
 800883e:	2b0e      	cmp	r3, #14
 8008840:	d001      	beq.n	8008846 <OutputDbgTrace+0x6e>
 8008842:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008844:	e000      	b.n	8008848 <OutputDbgTrace+0x70>
          break;
 8008846:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008848:	e016      	b.n	8008878 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	7a5b      	ldrb	r3, [r3, #9]
 8008852:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008854:	e010      	b.n	8008878 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800885a:	e00d      	b.n	8008878 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	7a5b      	ldrb	r3, [r3, #9]
 8008864:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008866:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008868:	e006      	b.n	8008878 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	7a5b      	ldrb	r3, [r3, #9]
 8008872:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008874:	e000      	b.n	8008878 <OutputDbgTrace+0xa0>

    default:
      break;
 8008876:	bf00      	nop
  }

  return;
 8008878:	bf00      	nop
}
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8008890:	215c      	movs	r1, #92	; 0x5c
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f002 f960 	bl	800ab58 <strrchr>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800889e:	215c      	movs	r1, #92	; 0x5c
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f002 f959 	bl	800ab58 <strrchr>
 80088a6:	4603      	mov	r3, r0
 80088a8:	3301      	adds	r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	e00d      	b.n	80088ca <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 80088ae:	212f      	movs	r1, #47	; 0x2f
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f002 f951 	bl	800ab58 <strrchr>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d006      	beq.n	80088ca <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 80088bc:	212f      	movs	r1, #47	; 0x2f
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f002 f94a 	bl	800ab58 <strrchr>
 80088c4:	4603      	mov	r3, r0
 80088c6:	3301      	adds	r3, #1
 80088c8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80088ca:	68fb      	ldr	r3, [r7, #12]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80088de:	4b0f      	ldr	r3, [pc, #60]	; (800891c <OTP_Read+0x48>)
 80088e0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80088e2:	e002      	b.n	80088ea <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	3b08      	subs	r3, #8
 80088e8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3307      	adds	r3, #7
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	79fa      	ldrb	r2, [r7, #7]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d003      	beq.n	80088fe <OTP_Read+0x2a>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	4a09      	ldr	r2, [pc, #36]	; (8008920 <OTP_Read+0x4c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d1f2      	bne.n	80088e4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3307      	adds	r3, #7
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	79fa      	ldrb	r2, [r7, #7]
 8008906:	429a      	cmp	r2, r3
 8008908:	d001      	beq.n	800890e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800890a:	2300      	movs	r3, #0
 800890c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800890e:	68fb      	ldr	r3, [r7, #12]
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	1fff73f8 	.word	0x1fff73f8
 8008920:	1fff7000 	.word	0x1fff7000

08008924 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	605a      	str	r2, [r3, #4]
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800894c:	f3ef 8310 	mrs	r3, PRIMASK
 8008950:	60fb      	str	r3, [r7, #12]
  return(result);
 8008952:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008956:	b672      	cpsid	i
}
 8008958:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d102      	bne.n	800896a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008964:	2301      	movs	r3, #1
 8008966:	75fb      	strb	r3, [r7, #23]
 8008968:	e001      	b.n	800896e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800896a:	2300      	movs	r3, #0
 800896c:	75fb      	strb	r3, [r7, #23]
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	f383 8810 	msr	PRIMASK, r3
}
 8008978:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800897a:	7dfb      	ldrb	r3, [r7, #23]
}
 800897c:	4618      	mov	r0, r3
 800897e:	371c      	adds	r7, #28
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008988:	b480      	push	{r7}
 800898a:	b087      	sub	sp, #28
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008992:	f3ef 8310 	mrs	r3, PRIMASK
 8008996:	60fb      	str	r3, [r7, #12]
  return(result);
 8008998:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800899a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800899c:	b672      	cpsid	i
}
 800899e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	605a      	str	r2, [r3, #4]
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f383 8810 	msr	PRIMASK, r3
}
 80089c6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80089c8:	bf00      	nop
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089de:	f3ef 8310 	mrs	r3, PRIMASK
 80089e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80089e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80089e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80089e8:	b672      	cpsid	i
}
 80089ea:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	f383 8810 	msr	PRIMASK, r3
}
 8008a12:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008a14:	bf00      	nop
 8008a16:	371c      	adds	r7, #28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a28:	f3ef 8310 	mrs	r3, PRIMASK
 8008a2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a32:	b672      	cpsid	i
}
 8008a34:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	6812      	ldr	r2, [r2, #0]
 8008a3e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6852      	ldr	r2, [r2, #4]
 8008a48:	605a      	str	r2, [r3, #4]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f383 8810 	msr	PRIMASK, r3
}
 8008a54:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008a56:	bf00      	nop
 8008a58:	371c      	adds	r7, #28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b086      	sub	sp, #24
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a70:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a76:	b672      	cpsid	i
}
 8008a78:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7ff ffca 	bl	8008a20 <LST_remove_node>
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f383 8810 	msr	PRIMASK, r3
}
 8008a96:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008a98:	bf00      	nop
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008aa4:	4b03      	ldr	r3, [pc, #12]	; (8008ab4 <LL_FLASH_GetUDN+0x14>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	1fff7580 	.word	0x1fff7580

08008ab8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008abc:	4b03      	ldr	r3, [pc, #12]	; (8008acc <LL_FLASH_GetDeviceID+0x14>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	b2db      	uxtb	r3, r3
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	1fff7584 	.word	0x1fff7584

08008ad0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008ad4:	4b03      	ldr	r3, [pc, #12]	; (8008ae4 <LL_FLASH_GetSTCompanyID+0x14>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	0a1b      	lsrs	r3, r3, #8
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	1fff7584 	.word	0x1fff7584

08008ae8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008ae8:	b5b0      	push	{r4, r5, r7, lr}
 8008aea:	b090      	sub	sp, #64	; 0x40
 8008aec:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008aee:	2392      	movs	r3, #146	; 0x92
 8008af0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008af4:	4b45      	ldr	r3, [pc, #276]	; (8008c0c <APP_BLE_Init+0x124>)
 8008af6:	1d3c      	adds	r4, r7, #4
 8008af8:	461d      	mov	r5, r3
 8008afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b0a:	c403      	stmia	r4!, {r0, r1}
 8008b0c:	7022      	strb	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008b0e:	f000 fb37 	bl	8009180 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008b12:	2101      	movs	r1, #1
 8008b14:	2002      	movs	r0, #2
 8008b16:	f001 fccd 	bl	800a4b4 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008b1a:	4a3d      	ldr	r2, [pc, #244]	; (8008c10 <APP_BLE_Init+0x128>)
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	2002      	movs	r0, #2
 8008b20:	f001 fdf4 	bl	800a70c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008b24:	1d3b      	adds	r3, r7, #4
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff f8a8 	bl	8007c7c <SHCI_C2_BLE_Init>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8008b32:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d012      	beq.n	8008b60 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8008b3a:	4836      	ldr	r0, [pc, #216]	; (8008c14 <APP_BLE_Init+0x12c>)
 8008b3c:	f7ff fea2 	bl	8008884 <DbgTraceGetFileName>
 8008b40:	4601      	mov	r1, r0
 8008b42:	f240 1347 	movw	r3, #327	; 0x147
 8008b46:	4a34      	ldr	r2, [pc, #208]	; (8008c18 <APP_BLE_Init+0x130>)
 8008b48:	4834      	ldr	r0, [pc, #208]	; (8008c1c <APP_BLE_Init+0x134>)
 8008b4a:	f001 ff61 	bl	800aa10 <iprintf>
 8008b4e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008b52:	4619      	mov	r1, r3
 8008b54:	4832      	ldr	r0, [pc, #200]	; (8008c20 <APP_BLE_Init+0x138>)
 8008b56:	f001 ff5b 	bl	800aa10 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8008b5a:	f7f9 fd05 	bl	8002568 <Error_Handler>
 8008b5e:	e00c      	b.n	8008b7a <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8008b60:	482c      	ldr	r0, [pc, #176]	; (8008c14 <APP_BLE_Init+0x12c>)
 8008b62:	f7ff fe8f 	bl	8008884 <DbgTraceGetFileName>
 8008b66:	4601      	mov	r1, r0
 8008b68:	f240 134d 	movw	r3, #333	; 0x14d
 8008b6c:	4a2a      	ldr	r2, [pc, #168]	; (8008c18 <APP_BLE_Init+0x130>)
 8008b6e:	482b      	ldr	r0, [pc, #172]	; (8008c1c <APP_BLE_Init+0x134>)
 8008b70:	f001 ff4e 	bl	800aa10 <iprintf>
 8008b74:	482b      	ldr	r0, [pc, #172]	; (8008c24 <APP_BLE_Init+0x13c>)
 8008b76:	f001 ff4b 	bl	800aa10 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008b7a:	f000 fb17 	bl	80091ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008b7e:	f7fe ffd7 	bl	8007b30 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008b82:	4b29      	ldr	r3, [pc, #164]	; (8008c28 <APP_BLE_Init+0x140>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008b8a:	4b27      	ldr	r3, [pc, #156]	; (8008c28 <APP_BLE_Init+0x140>)
 8008b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b90:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008b92:	4a26      	ldr	r2, [pc, #152]	; (8008c2c <APP_BLE_Init+0x144>)
 8008b94:	2100      	movs	r1, #0
 8008b96:	2001      	movs	r0, #1
 8008b98:	f001 fdb8 	bl	800a70c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008b9c:	2006      	movs	r0, #6
 8008b9e:	f7fe fe3a 	bl	8007816 <aci_hal_set_radio_activity_mask>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8008ba8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d010      	beq.n	8008bd2 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8008bb0:	4818      	ldr	r0, [pc, #96]	; (8008c14 <APP_BLE_Init+0x12c>)
 8008bb2:	f7ff fe67 	bl	8008884 <DbgTraceGetFileName>
 8008bb6:	4601      	mov	r1, r0
 8008bb8:	f240 1371 	movw	r3, #369	; 0x171
 8008bbc:	4a16      	ldr	r2, [pc, #88]	; (8008c18 <APP_BLE_Init+0x130>)
 8008bbe:	4817      	ldr	r0, [pc, #92]	; (8008c1c <APP_BLE_Init+0x134>)
 8008bc0:	f001 ff26 	bl	800aa10 <iprintf>
 8008bc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4819      	ldr	r0, [pc, #100]	; (8008c30 <APP_BLE_Init+0x148>)
 8008bcc:	f001 ff20 	bl	800aa10 <iprintf>
 8008bd0:	e00c      	b.n	8008bec <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8008bd2:	4810      	ldr	r0, [pc, #64]	; (8008c14 <APP_BLE_Init+0x12c>)
 8008bd4:	f7ff fe56 	bl	8008884 <DbgTraceGetFileName>
 8008bd8:	4601      	mov	r1, r0
 8008bda:	f240 1375 	movw	r3, #373	; 0x175
 8008bde:	4a0e      	ldr	r2, [pc, #56]	; (8008c18 <APP_BLE_Init+0x130>)
 8008be0:	480e      	ldr	r0, [pc, #56]	; (8008c1c <APP_BLE_Init+0x134>)
 8008be2:	f001 ff15 	bl	800aa10 <iprintf>
 8008be6:	4813      	ldr	r0, [pc, #76]	; (8008c34 <APP_BLE_Init+0x14c>)
 8008be8:	f001 ff12 	bl	800aa10 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008bec:	f001 f83a 	bl	8009c64 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008bf0:	4b0d      	ldr	r3, [pc, #52]	; (8008c28 <APP_BLE_Init+0x140>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008bf6:	4b0c      	ldr	r3, [pc, #48]	; (8008c28 <APP_BLE_Init+0x140>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	f000 fd69 	bl	80096d4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008c02:	bf00      	nop
}
 8008c04:	3740      	adds	r7, #64	; 0x40
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bdb0      	pop	{r4, r5, r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	0800bff8 	.word	0x0800bff8
 8008c10:	08007e99 	.word	0x08007e99
 8008c14:	0800beec 	.word	0x0800beec
 8008c18:	0800cfec 	.word	0x0800cfec
 8008c1c:	0800bf08 	.word	0x0800bf08
 8008c20:	0800bf1c 	.word	0x0800bf1c
 8008c24:	0800bf54 	.word	0x0800bf54
 8008c28:	20000f80 	.word	0x20000f80
 8008c2c:	08009859 	.word	0x08009859
 8008c30:	0800bf7c 	.word	0x0800bf7c
 8008c34:	0800bfc0 	.word	0x0800bfc0

08008c38 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008c38:	b5b0      	push	{r4, r5, r7, lr}
 8008c3a:	b08e      	sub	sp, #56	; 0x38
 8008c3c:	af04      	add	r7, sp, #16
 8008c3e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008c40:	2392      	movs	r3, #146	; 0x92
 8008c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	2bff      	cmp	r3, #255	; 0xff
 8008c52:	f000 811d 	beq.w	8008e90 <SVCCTL_App_Notification+0x258>
 8008c56:	2bff      	cmp	r3, #255	; 0xff
 8008c58:	f300 8269 	bgt.w	800912e <SVCCTL_App_Notification+0x4f6>
 8008c5c:	2b05      	cmp	r3, #5
 8008c5e:	d002      	beq.n	8008c66 <SVCCTL_App_Notification+0x2e>
 8008c60:	2b3e      	cmp	r3, #62	; 0x3e
 8008c62:	d042      	beq.n	8008cea <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008c64:	e263      	b.n	800912e <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008c66:	6a3b      	ldr	r3, [r7, #32]
 8008c68:	3302      	adds	r3, #2
 8008c6a:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	4bb1      	ldr	r3, [pc, #708]	; (8008f3c <SVCCTL_App_Notification+0x304>)
 8008c76:	8adb      	ldrh	r3, [r3, #22]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d128      	bne.n	8008cce <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008c7c:	4baf      	ldr	r3, [pc, #700]	; (8008f3c <SVCCTL_App_Notification+0x304>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008c82:	4bae      	ldr	r3, [pc, #696]	; (8008f3c <SVCCTL_App_Notification+0x304>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8008c8a:	48ad      	ldr	r0, [pc, #692]	; (8008f40 <SVCCTL_App_Notification+0x308>)
 8008c8c:	f7ff fdfa 	bl	8008884 <DbgTraceGetFileName>
 8008c90:	4601      	mov	r1, r0
 8008c92:	f240 13b9 	movw	r3, #441	; 0x1b9
 8008c96:	4aab      	ldr	r2, [pc, #684]	; (8008f44 <SVCCTL_App_Notification+0x30c>)
 8008c98:	48ab      	ldr	r0, [pc, #684]	; (8008f48 <SVCCTL_App_Notification+0x310>)
 8008c9a:	f001 feb9 	bl	800aa10 <iprintf>
 8008c9e:	48ab      	ldr	r0, [pc, #684]	; (8008f4c <SVCCTL_App_Notification+0x314>)
 8008ca0:	f001 ff52 	bl	800ab48 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8008ca4:	48a6      	ldr	r0, [pc, #664]	; (8008f40 <SVCCTL_App_Notification+0x308>)
 8008ca6:	f7ff fded 	bl	8008884 <DbgTraceGetFileName>
 8008caa:	4601      	mov	r1, r0
 8008cac:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 8008cb0:	4aa4      	ldr	r2, [pc, #656]	; (8008f44 <SVCCTL_App_Notification+0x30c>)
 8008cb2:	48a5      	ldr	r0, [pc, #660]	; (8008f48 <SVCCTL_App_Notification+0x310>)
 8008cb4:	f001 feac 	bl	800aa10 <iprintf>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	78db      	ldrb	r3, [r3, #3]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	48a1      	ldr	r0, [pc, #644]	; (8008f50 <SVCCTL_App_Notification+0x318>)
 8008cca:	f001 fea1 	bl	800aa10 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8008cce:	2001      	movs	r0, #1
 8008cd0:	f000 fd00 	bl	80096d4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008cd4:	4b9f      	ldr	r3, [pc, #636]	; (8008f54 <SVCCTL_App_Notification+0x31c>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008cda:	4b98      	ldr	r3, [pc, #608]	; (8008f3c <SVCCTL_App_Notification+0x304>)
 8008cdc:	8ada      	ldrh	r2, [r3, #22]
 8008cde:	4b9d      	ldr	r3, [pc, #628]	; (8008f54 <SVCCTL_App_Notification+0x31c>)
 8008ce0:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8008ce2:	489c      	ldr	r0, [pc, #624]	; (8008f54 <SVCCTL_App_Notification+0x31c>)
 8008ce4:	f000 ffaa 	bl	8009c3c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008ce8:	e224      	b.n	8009134 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	3302      	adds	r3, #2
 8008cee:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d042      	beq.n	8008d7e <SVCCTL_App_Notification+0x146>
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	f040 80c7 	bne.w	8008e8c <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	3301      	adds	r3, #1
 8008d02:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8008d04:	488e      	ldr	r0, [pc, #568]	; (8008f40 <SVCCTL_App_Notification+0x308>)
 8008d06:	f7ff fdbd 	bl	8008884 <DbgTraceGetFileName>
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	f240 13e1 	movw	r3, #481	; 0x1e1
 8008d10:	4a8c      	ldr	r2, [pc, #560]	; (8008f44 <SVCCTL_App_Notification+0x30c>)
 8008d12:	488d      	ldr	r0, [pc, #564]	; (8008f48 <SVCCTL_App_Notification+0x310>)
 8008d14:	f001 fe7c 	bl	800aa10 <iprintf>
 8008d18:	488f      	ldr	r0, [pc, #572]	; (8008f58 <SVCCTL_App_Notification+0x320>)
 8008d1a:	f001 ff15 	bl	800ab48 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8008d1e:	4888      	ldr	r0, [pc, #544]	; (8008f40 <SVCCTL_App_Notification+0x308>)
 8008d20:	f7ff fdb0 	bl	8008884 <DbgTraceGetFileName>
 8008d24:	4601      	mov	r1, r0
 8008d26:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8008d2a:	4a86      	ldr	r2, [pc, #536]	; (8008f44 <SVCCTL_App_Notification+0x30c>)
 8008d2c:	4886      	ldr	r0, [pc, #536]	; (8008f48 <SVCCTL_App_Notification+0x310>)
 8008d2e:	f001 fe6f 	bl	800aa10 <iprintf>
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7f7 fcf4 	bl	8000728 <__aeabi_i2d>
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	4b85      	ldr	r3, [pc, #532]	; (8008f5c <SVCCTL_App_Notification+0x324>)
 8008d46:	f7f7 fa73 	bl	8000230 <__aeabi_dmul>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4610      	mov	r0, r2
 8008d50:	4619      	mov	r1, r3
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	461c      	mov	r4, r3
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	9400      	str	r4, [sp, #0]
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	487a      	ldr	r0, [pc, #488]	; (8008f60 <SVCCTL_App_Notification+0x328>)
 8008d78:	f001 fe4a 	bl	800aa10 <iprintf>
          break;
 8008d7c:	e087      	b.n	8008e8e <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	3301      	adds	r3, #1
 8008d82:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8008d84:	486e      	ldr	r0, [pc, #440]	; (8008f40 <SVCCTL_App_Notification+0x308>)
 8008d86:	f7ff fd7d 	bl	8008884 <DbgTraceGetFileName>
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008d90:	4a6c      	ldr	r2, [pc, #432]	; (8008f44 <SVCCTL_App_Notification+0x30c>)
 8008d92:	486d      	ldr	r0, [pc, #436]	; (8008f48 <SVCCTL_App_Notification+0x310>)
 8008d94:	f001 fe3c 	bl	800aa10 <iprintf>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	4619      	mov	r1, r3
 8008da2:	4870      	ldr	r0, [pc, #448]	; (8008f64 <SVCCTL_App_Notification+0x32c>)
 8008da4:	f001 fe34 	bl	800aa10 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8008da8:	4865      	ldr	r0, [pc, #404]	; (8008f40 <SVCCTL_App_Notification+0x308>)
 8008daa:	f7ff fd6b 	bl	8008884 <DbgTraceGetFileName>
 8008dae:	4601      	mov	r1, r0
 8008db0:	f240 13f5 	movw	r3, #501	; 0x1f5
 8008db4:	4a63      	ldr	r2, [pc, #396]	; (8008f44 <SVCCTL_App_Notification+0x30c>)
 8008db6:	4864      	ldr	r0, [pc, #400]	; (8008f48 <SVCCTL_App_Notification+0x310>)
 8008db8:	f001 fe2a 	bl	800aa10 <iprintf>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	7a9b      	ldrb	r3, [r3, #10]
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	7a5b      	ldrb	r3, [r3, #9]
 8008dc6:	461c      	mov	r4, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	7a1b      	ldrb	r3, [r3, #8]
 8008dcc:	461d      	mov	r5, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	79db      	ldrb	r3, [r3, #7]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	799b      	ldrb	r3, [r3, #6]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	795b      	ldrb	r3, [r3, #5]
 8008dde:	9302      	str	r3, [sp, #8]
 8008de0:	9101      	str	r1, [sp, #4]
 8008de2:	9200      	str	r2, [sp, #0]
 8008de4:	462b      	mov	r3, r5
 8008de6:	4622      	mov	r2, r4
 8008de8:	4601      	mov	r1, r0
 8008dea:	485f      	ldr	r0, [pc, #380]	; (8008f68 <SVCCTL_App_Notification+0x330>)
 8008dec:	f001 fe10 	bl	800aa10 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8008df0:	4853      	ldr	r0, [pc, #332]	; (8008f40 <SVCCTL_App_Notification+0x308>)
 8008df2:	f7ff fd47 	bl	8008884 <DbgTraceGetFileName>
 8008df6:	4601      	mov	r1, r0
 8008df8:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8008dfc:	4a51      	ldr	r2, [pc, #324]	; (8008f44 <SVCCTL_App_Notification+0x30c>)
 8008dfe:	4852      	ldr	r0, [pc, #328]	; (8008f48 <SVCCTL_App_Notification+0x310>)
 8008e00:	f001 fe06 	bl	800aa10 <iprintf>
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7f7 fc8b 	bl	8000728 <__aeabi_i2d>
 8008e12:	f04f 0200 	mov.w	r2, #0
 8008e16:	4b51      	ldr	r3, [pc, #324]	; (8008f5c <SVCCTL_App_Notification+0x324>)
 8008e18:	f7f7 fa0a 	bl	8000230 <__aeabi_dmul>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4610      	mov	r0, r2
 8008e22:	4619      	mov	r1, r3
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	461c      	mov	r4, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	461a      	mov	r2, r3
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	9400      	str	r4, [sp, #0]
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4845      	ldr	r0, [pc, #276]	; (8008f60 <SVCCTL_App_Notification+0x328>)
 8008e4a:	f001 fde1 	bl	800aa10 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008e4e:	4b3b      	ldr	r3, [pc, #236]	; (8008f3c <SVCCTL_App_Notification+0x304>)
 8008e50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008e54:	2b04      	cmp	r3, #4
 8008e56:	d104      	bne.n	8008e62 <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008e58:	4b38      	ldr	r3, [pc, #224]	; (8008f3c <SVCCTL_App_Notification+0x304>)
 8008e5a:	2206      	movs	r2, #6
 8008e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008e60:	e003      	b.n	8008e6a <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008e62:	4b36      	ldr	r3, [pc, #216]	; (8008f3c <SVCCTL_App_Notification+0x304>)
 8008e64:	2205      	movs	r2, #5
 8008e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	4b32      	ldr	r3, [pc, #200]	; (8008f3c <SVCCTL_App_Notification+0x304>)
 8008e74:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8008e76:	4b37      	ldr	r3, [pc, #220]	; (8008f54 <SVCCTL_App_Notification+0x31c>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008e7c:	4b2f      	ldr	r3, [pc, #188]	; (8008f3c <SVCCTL_App_Notification+0x304>)
 8008e7e:	8ada      	ldrh	r2, [r3, #22]
 8008e80:	4b34      	ldr	r3, [pc, #208]	; (8008f54 <SVCCTL_App_Notification+0x31c>)
 8008e82:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8008e84:	4833      	ldr	r0, [pc, #204]	; (8008f54 <SVCCTL_App_Notification+0x31c>)
 8008e86:	f000 fed9 	bl	8009c3c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008e8a:	e000      	b.n	8008e8e <SVCCTL_App_Notification+0x256>
          break;
 8008e8c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008e8e:	e151      	b.n	8009134 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	3302      	adds	r3, #2
 8008e94:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ea0:	f000 8141 	beq.w	8009126 <SVCCTL_App_Notification+0x4ee>
 8008ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ea8:	f300 8143 	bgt.w	8009132 <SVCCTL_App_Notification+0x4fa>
 8008eac:	2b04      	cmp	r3, #4
 8008eae:	f000 813c 	beq.w	800912a <SVCCTL_App_Notification+0x4f2>
 8008eb2:	2b04      	cmp	r3, #4
 8008eb4:	f2c0 813d 	blt.w	8009132 <SVCCTL_App_Notification+0x4fa>
 8008eb8:	f240 420a 	movw	r2, #1034	; 0x40a
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	f300 8138 	bgt.w	8009132 <SVCCTL_App_Notification+0x4fa>
 8008ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ec6:	f340 8134 	ble.w	8009132 <SVCCTL_App_Notification+0x4fa>
 8008eca:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8008ece:	2b09      	cmp	r3, #9
 8008ed0:	f200 812f 	bhi.w	8009132 <SVCCTL_App_Notification+0x4fa>
 8008ed4:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <SVCCTL_App_Notification+0x2a4>)
 8008ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eda:	bf00      	nop
 8008edc:	080090a1 	.word	0x080090a1
 8008ee0:	08008f75 	.word	0x08008f75
 8008ee4:	08009133 	.word	0x08009133
 8008ee8:	08009133 	.word	0x08009133
 8008eec:	08009133 	.word	0x08009133
 8008ef0:	08009133 	.word	0x08009133
 8008ef4:	08008f05 	.word	0x08008f05
 8008ef8:	08009133 	.word	0x08009133
 8008efc:	08008fe7 	.word	0x08008fe7
 8008f00:	08008f21 	.word	0x08008f21
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8008f04:	480e      	ldr	r0, [pc, #56]	; (8008f40 <SVCCTL_App_Notification+0x308>)
 8008f06:	f7ff fcbd 	bl	8008884 <DbgTraceGetFileName>
 8008f0a:	4601      	mov	r1, r0
 8008f0c:	f240 233e 	movw	r3, #574	; 0x23e
 8008f10:	4a0c      	ldr	r2, [pc, #48]	; (8008f44 <SVCCTL_App_Notification+0x30c>)
 8008f12:	480d      	ldr	r0, [pc, #52]	; (8008f48 <SVCCTL_App_Notification+0x310>)
 8008f14:	f001 fd7c 	bl	800aa10 <iprintf>
 8008f18:	4814      	ldr	r0, [pc, #80]	; (8008f6c <SVCCTL_App_Notification+0x334>)
 8008f1a:	f001 fd79 	bl	800aa10 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008f1e:	e105      	b.n	800912c <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8008f20:	4807      	ldr	r0, [pc, #28]	; (8008f40 <SVCCTL_App_Notification+0x308>)
 8008f22:	f7ff fcaf 	bl	8008884 <DbgTraceGetFileName>
 8008f26:	4601      	mov	r1, r0
 8008f28:	f240 234e 	movw	r3, #590	; 0x24e
 8008f2c:	4a05      	ldr	r2, [pc, #20]	; (8008f44 <SVCCTL_App_Notification+0x30c>)
 8008f2e:	4806      	ldr	r0, [pc, #24]	; (8008f48 <SVCCTL_App_Notification+0x310>)
 8008f30:	f001 fd6e 	bl	800aa10 <iprintf>
 8008f34:	480e      	ldr	r0, [pc, #56]	; (8008f70 <SVCCTL_App_Notification+0x338>)
 8008f36:	f001 fe07 	bl	800ab48 <puts>
          break;
 8008f3a:	e0f7      	b.n	800912c <SVCCTL_App_Notification+0x4f4>
 8008f3c:	20000f80 	.word	0x20000f80
 8008f40:	0800beec 	.word	0x0800beec
 8008f44:	0800cffc 	.word	0x0800cffc
 8008f48:	0800bf08 	.word	0x0800bf08
 8008f4c:	0800c034 	.word	0x0800c034
 8008f50:	0800c060 	.word	0x0800c060
 8008f54:	20001004 	.word	0x20001004
 8008f58:	0800c09c 	.word	0x0800c09c
 8008f5c:	3ff40000 	.word	0x3ff40000
 8008f60:	0800c0d0 	.word	0x0800c0d0
 8008f64:	0800c13c 	.word	0x0800c13c
 8008f68:	0800c184 	.word	0x0800c184
 8008f6c:	0800c1d4 	.word	0x0800c1d4
 8008f70:	0800c1fc 	.word	0x0800c1fc
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8008f74:	4872      	ldr	r0, [pc, #456]	; (8009140 <SVCCTL_App_Notification+0x508>)
 8008f76:	f7ff fc85 	bl	8008884 <DbgTraceGetFileName>
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	f240 2355 	movw	r3, #597	; 0x255
 8008f80:	4a70      	ldr	r2, [pc, #448]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 8008f82:	4871      	ldr	r0, [pc, #452]	; (8009148 <SVCCTL_App_Notification+0x510>)
 8008f84:	f001 fd44 	bl	800aa10 <iprintf>
 8008f88:	4870      	ldr	r0, [pc, #448]	; (800914c <SVCCTL_App_Notification+0x514>)
 8008f8a:	f001 fddd 	bl	800ab48 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008f8e:	4b70      	ldr	r3, [pc, #448]	; (8009150 <SVCCTL_App_Notification+0x518>)
 8008f90:	8adb      	ldrh	r3, [r3, #22]
 8008f92:	4970      	ldr	r1, [pc, #448]	; (8009154 <SVCCTL_App_Notification+0x51c>)
 8008f94:	4618      	mov	r0, r3
 8008f96:	f7fd fe95 	bl	8006cc4 <aci_gap_pass_key_resp>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8008fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d010      	beq.n	8008fca <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8008fa8:	4865      	ldr	r0, [pc, #404]	; (8009140 <SVCCTL_App_Notification+0x508>)
 8008faa:	f7ff fc6b 	bl	8008884 <DbgTraceGetFileName>
 8008fae:	4601      	mov	r1, r0
 8008fb0:	f240 235a 	movw	r3, #602	; 0x25a
 8008fb4:	4a63      	ldr	r2, [pc, #396]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 8008fb6:	4864      	ldr	r0, [pc, #400]	; (8009148 <SVCCTL_App_Notification+0x510>)
 8008fb8:	f001 fd2a 	bl	800aa10 <iprintf>
 8008fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4865      	ldr	r0, [pc, #404]	; (8009158 <SVCCTL_App_Notification+0x520>)
 8008fc4:	f001 fd24 	bl	800aa10 <iprintf>
          break;
 8008fc8:	e0b0      	b.n	800912c <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8008fca:	485d      	ldr	r0, [pc, #372]	; (8009140 <SVCCTL_App_Notification+0x508>)
 8008fcc:	f7ff fc5a 	bl	8008884 <DbgTraceGetFileName>
 8008fd0:	4601      	mov	r1, r0
 8008fd2:	f240 235e 	movw	r3, #606	; 0x25e
 8008fd6:	4a5b      	ldr	r2, [pc, #364]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 8008fd8:	485b      	ldr	r0, [pc, #364]	; (8009148 <SVCCTL_App_Notification+0x510>)
 8008fda:	f001 fd19 	bl	800aa10 <iprintf>
 8008fde:	485f      	ldr	r0, [pc, #380]	; (800915c <SVCCTL_App_Notification+0x524>)
 8008fe0:	f001 fdb2 	bl	800ab48 <puts>
          break;
 8008fe4:	e0a2      	b.n	800912c <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8008fe6:	4856      	ldr	r0, [pc, #344]	; (8009140 <SVCCTL_App_Notification+0x508>)
 8008fe8:	f7ff fc4c 	bl	8008884 <DbgTraceGetFileName>
 8008fec:	4601      	mov	r1, r0
 8008fee:	f240 2366 	movw	r3, #614	; 0x266
 8008ff2:	4a54      	ldr	r2, [pc, #336]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 8008ff4:	4854      	ldr	r0, [pc, #336]	; (8009148 <SVCCTL_App_Notification+0x510>)
 8008ff6:	f001 fd0b 	bl	800aa10 <iprintf>
 8008ffa:	4859      	ldr	r0, [pc, #356]	; (8009160 <SVCCTL_App_Notification+0x528>)
 8008ffc:	f001 fda4 	bl	800ab48 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8009000:	484f      	ldr	r0, [pc, #316]	; (8009140 <SVCCTL_App_Notification+0x508>)
 8009002:	f7ff fc3f 	bl	8008884 <DbgTraceGetFileName>
 8009006:	4601      	mov	r1, r0
 8009008:	f240 2367 	movw	r3, #615	; 0x267
 800900c:	4a4d      	ldr	r2, [pc, #308]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 800900e:	484e      	ldr	r0, [pc, #312]	; (8009148 <SVCCTL_App_Notification+0x510>)
 8009010:	f001 fcfe 	bl	800aa10 <iprintf>
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	3302      	adds	r3, #2
 8009018:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800901c:	4619      	mov	r1, r3
 800901e:	4851      	ldr	r0, [pc, #324]	; (8009164 <SVCCTL_App_Notification+0x52c>)
 8009020:	f001 fcf6 	bl	800aa10 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8009024:	4846      	ldr	r0, [pc, #280]	; (8009140 <SVCCTL_App_Notification+0x508>)
 8009026:	f7ff fc2d 	bl	8008884 <DbgTraceGetFileName>
 800902a:	4601      	mov	r1, r0
 800902c:	f240 2369 	movw	r3, #617	; 0x269
 8009030:	4a44      	ldr	r2, [pc, #272]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 8009032:	4845      	ldr	r0, [pc, #276]	; (8009148 <SVCCTL_App_Notification+0x510>)
 8009034:	f001 fcec 	bl	800aa10 <iprintf>
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	3302      	adds	r3, #2
 800903c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8009040:	4619      	mov	r1, r3
 8009042:	4849      	ldr	r0, [pc, #292]	; (8009168 <SVCCTL_App_Notification+0x530>)
 8009044:	f001 fce4 	bl	800aa10 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8009048:	4b41      	ldr	r3, [pc, #260]	; (8009150 <SVCCTL_App_Notification+0x518>)
 800904a:	8adb      	ldrh	r3, [r3, #22]
 800904c:	2101      	movs	r1, #1
 800904e:	4618      	mov	r0, r3
 8009050:	f7fd ffe2 	bl	8007018 <aci_gap_numeric_comparison_value_confirm_yesno>
 8009054:	4603      	mov	r3, r0
 8009056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800905a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800905e:	2b00      	cmp	r3, #0
 8009060:	d010      	beq.n	8009084 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8009062:	4837      	ldr	r0, [pc, #220]	; (8009140 <SVCCTL_App_Notification+0x508>)
 8009064:	f7ff fc0e 	bl	8008884 <DbgTraceGetFileName>
 8009068:	4601      	mov	r1, r0
 800906a:	f240 236e 	movw	r3, #622	; 0x26e
 800906e:	4a35      	ldr	r2, [pc, #212]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 8009070:	4835      	ldr	r0, [pc, #212]	; (8009148 <SVCCTL_App_Notification+0x510>)
 8009072:	f001 fccd 	bl	800aa10 <iprintf>
 8009076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800907a:	4619      	mov	r1, r3
 800907c:	483b      	ldr	r0, [pc, #236]	; (800916c <SVCCTL_App_Notification+0x534>)
 800907e:	f001 fcc7 	bl	800aa10 <iprintf>
          break;
 8009082:	e053      	b.n	800912c <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8009084:	482e      	ldr	r0, [pc, #184]	; (8009140 <SVCCTL_App_Notification+0x508>)
 8009086:	f7ff fbfd 	bl	8008884 <DbgTraceGetFileName>
 800908a:	4601      	mov	r1, r0
 800908c:	f240 2372 	movw	r3, #626	; 0x272
 8009090:	4a2c      	ldr	r2, [pc, #176]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 8009092:	482d      	ldr	r0, [pc, #180]	; (8009148 <SVCCTL_App_Notification+0x510>)
 8009094:	f001 fcbc 	bl	800aa10 <iprintf>
 8009098:	4835      	ldr	r0, [pc, #212]	; (8009170 <SVCCTL_App_Notification+0x538>)
 800909a:	f001 fd55 	bl	800ab48 <puts>
          break;
 800909e:	e045      	b.n	800912c <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	3302      	adds	r3, #2
 80090a4:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 80090a6:	4826      	ldr	r0, [pc, #152]	; (8009140 <SVCCTL_App_Notification+0x508>)
 80090a8:	f7ff fbec 	bl	8008884 <DbgTraceGetFileName>
 80090ac:	4601      	mov	r1, r0
 80090ae:	f44f 731f 	mov.w	r3, #636	; 0x27c
 80090b2:	4a24      	ldr	r2, [pc, #144]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 80090b4:	4824      	ldr	r0, [pc, #144]	; (8009148 <SVCCTL_App_Notification+0x510>)
 80090b6:	f001 fcab 	bl	800aa10 <iprintf>
 80090ba:	482e      	ldr	r0, [pc, #184]	; (8009174 <SVCCTL_App_Notification+0x53c>)
 80090bc:	f001 fd44 	bl	800ab48 <puts>
          if (p_pairing_complete->Status != 0)
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	789b      	ldrb	r3, [r3, #2]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d013      	beq.n	80090f0 <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 80090c8:	481d      	ldr	r0, [pc, #116]	; (8009140 <SVCCTL_App_Notification+0x508>)
 80090ca:	f7ff fbdb 	bl	8008884 <DbgTraceGetFileName>
 80090ce:	4601      	mov	r1, r0
 80090d0:	f240 237f 	movw	r3, #639	; 0x27f
 80090d4:	4a1b      	ldr	r2, [pc, #108]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 80090d6:	481c      	ldr	r0, [pc, #112]	; (8009148 <SVCCTL_App_Notification+0x510>)
 80090d8:	f001 fc9a 	bl	800aa10 <iprintf>
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	789b      	ldrb	r3, [r3, #2]
 80090e0:	4619      	mov	r1, r3
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	78db      	ldrb	r3, [r3, #3]
 80090e6:	461a      	mov	r2, r3
 80090e8:	4823      	ldr	r0, [pc, #140]	; (8009178 <SVCCTL_App_Notification+0x540>)
 80090ea:	f001 fc91 	bl	800aa10 <iprintf>
 80090ee:	e00c      	b.n	800910a <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 80090f0:	4813      	ldr	r0, [pc, #76]	; (8009140 <SVCCTL_App_Notification+0x508>)
 80090f2:	f7ff fbc7 	bl	8008884 <DbgTraceGetFileName>
 80090f6:	4601      	mov	r1, r0
 80090f8:	f240 2383 	movw	r3, #643	; 0x283
 80090fc:	4a11      	ldr	r2, [pc, #68]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 80090fe:	4812      	ldr	r0, [pc, #72]	; (8009148 <SVCCTL_App_Notification+0x510>)
 8009100:	f001 fc86 	bl	800aa10 <iprintf>
 8009104:	481d      	ldr	r0, [pc, #116]	; (800917c <SVCCTL_App_Notification+0x544>)
 8009106:	f001 fd1f 	bl	800ab48 <puts>
          APP_DBG_MSG("\n");
 800910a:	480d      	ldr	r0, [pc, #52]	; (8009140 <SVCCTL_App_Notification+0x508>)
 800910c:	f7ff fbba 	bl	8008884 <DbgTraceGetFileName>
 8009110:	4601      	mov	r1, r0
 8009112:	f240 2385 	movw	r3, #645	; 0x285
 8009116:	4a0b      	ldr	r2, [pc, #44]	; (8009144 <SVCCTL_App_Notification+0x50c>)
 8009118:	480b      	ldr	r0, [pc, #44]	; (8009148 <SVCCTL_App_Notification+0x510>)
 800911a:	f001 fc79 	bl	800aa10 <iprintf>
 800911e:	200a      	movs	r0, #10
 8009120:	f001 fc8e 	bl	800aa40 <putchar>
          break;
 8009124:	e002      	b.n	800912c <SVCCTL_App_Notification+0x4f4>
          break;
 8009126:	bf00      	nop
 8009128:	e003      	b.n	8009132 <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800912a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800912c:	e001      	b.n	8009132 <SVCCTL_App_Notification+0x4fa>
      break;
 800912e:	bf00      	nop
 8009130:	e000      	b.n	8009134 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009132:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8009134:	2301      	movs	r3, #1
}
 8009136:	4618      	mov	r0, r3
 8009138:	3728      	adds	r7, #40	; 0x28
 800913a:	46bd      	mov	sp, r7
 800913c:	bdb0      	pop	{r4, r5, r7, pc}
 800913e:	bf00      	nop
 8009140:	0800beec 	.word	0x0800beec
 8009144:	0800cffc 	.word	0x0800cffc
 8009148:	0800bf08 	.word	0x0800bf08
 800914c:	0800c22c 	.word	0x0800c22c
 8009150:	20000f80 	.word	0x20000f80
 8009154:	0001b207 	.word	0x0001b207
 8009158:	0800c254 	.word	0x0800c254
 800915c:	0800c288 	.word	0x0800c288
 8009160:	0800c2b0 	.word	0x0800c2b0
 8009164:	0800c2e4 	.word	0x0800c2e4
 8009168:	0800c300 	.word	0x0800c300
 800916c:	0800c318 	.word	0x0800c318
 8009170:	0800c368 	.word	0x0800c368
 8009174:	0800c3b0 	.word	0x0800c3b0
 8009178:	0800c3dc 	.word	0x0800c3dc
 800917c:	0800c418 	.word	0x0800c418

08009180 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009186:	4b06      	ldr	r3, [pc, #24]	; (80091a0 <Ble_Tl_Init+0x20>)
 8009188:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800918a:	4b06      	ldr	r3, [pc, #24]	; (80091a4 <Ble_Tl_Init+0x24>)
 800918c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800918e:	463b      	mov	r3, r7
 8009190:	4619      	mov	r1, r3
 8009192:	4805      	ldr	r0, [pc, #20]	; (80091a8 <Ble_Tl_Init+0x28>)
 8009194:	f7fe fe64 	bl	8007e60 <hci_init>

  return;
 8009198:	bf00      	nop
}
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	200300d8 	.word	0x200300d8
 80091a4:	08009975 	.word	0x08009975
 80091a8:	0800993d 	.word	0x0800993d

080091ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80091ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ae:	b08d      	sub	sp, #52	; 0x34
 80091b0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80091b2:	2300      	movs	r3, #0
 80091b4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80091b6:	2392      	movs	r3, #146	; 0x92
 80091b8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80091ba:	48a3      	ldr	r0, [pc, #652]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80091bc:	f7ff fb62 	bl	8008884 <DbgTraceGetFileName>
 80091c0:	4601      	mov	r1, r0
 80091c2:	f240 23c5 	movw	r3, #709	; 0x2c5
 80091c6:	4aa1      	ldr	r2, [pc, #644]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80091c8:	48a1      	ldr	r0, [pc, #644]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80091ca:	f001 fc21 	bl	800aa10 <iprintf>
 80091ce:	48a1      	ldr	r0, [pc, #644]	; (8009454 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 80091d0:	f001 fcba 	bl	800ab48 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80091d4:	f7fe fb73 	bl	80078be <hci_reset>
 80091d8:	4603      	mov	r3, r0
 80091da:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00f      	beq.n	8009202 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 80091e2:	4899      	ldr	r0, [pc, #612]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80091e4:	f7ff fb4e 	bl	8008884 <DbgTraceGetFileName>
 80091e8:	4601      	mov	r1, r0
 80091ea:	f240 23ce 	movw	r3, #718	; 0x2ce
 80091ee:	4a97      	ldr	r2, [pc, #604]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80091f0:	4897      	ldr	r0, [pc, #604]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80091f2:	f001 fc0d 	bl	800aa10 <iprintf>
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	4619      	mov	r1, r3
 80091fa:	4897      	ldr	r0, [pc, #604]	; (8009458 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 80091fc:	f001 fc08 	bl	800aa10 <iprintf>
 8009200:	e00c      	b.n	800921c <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8009202:	4891      	ldr	r0, [pc, #580]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009204:	f7ff fb3e 	bl	8008884 <DbgTraceGetFileName>
 8009208:	4601      	mov	r1, r0
 800920a:	f240 23d2 	movw	r3, #722	; 0x2d2
 800920e:	4a8f      	ldr	r2, [pc, #572]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009210:	488f      	ldr	r0, [pc, #572]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009212:	f001 fbfd 	bl	800aa10 <iprintf>
 8009216:	4891      	ldr	r0, [pc, #580]	; (800945c <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8009218:	f001 fc96 	bl	800ab48 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800921c:	f000 fad8 	bl	80097d0 <BleGetBdAddress>
 8009220:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	2106      	movs	r1, #6
 8009226:	2000      	movs	r0, #0
 8009228:	f7fe fa09 	bl	800763e <aci_hal_write_config_data>
 800922c:	4603      	mov	r3, r0
 800922e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8009230:	7dfb      	ldrb	r3, [r7, #23]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d00f      	beq.n	8009256 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8009236:	4884      	ldr	r0, [pc, #528]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009238:	f7ff fb24 	bl	8008884 <DbgTraceGetFileName>
 800923c:	4601      	mov	r1, r0
 800923e:	f44f 7337 	mov.w	r3, #732	; 0x2dc
 8009242:	4a82      	ldr	r2, [pc, #520]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009244:	4882      	ldr	r0, [pc, #520]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009246:	f001 fbe3 	bl	800aa10 <iprintf>
 800924a:	7dfb      	ldrb	r3, [r7, #23]
 800924c:	4619      	mov	r1, r3
 800924e:	4884      	ldr	r0, [pc, #528]	; (8009460 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8009250:	f001 fbde 	bl	800aa10 <iprintf>
 8009254:	e035      	b.n	80092c2 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8009256:	487c      	ldr	r0, [pc, #496]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009258:	f7ff fb14 	bl	8008884 <DbgTraceGetFileName>
 800925c:	4601      	mov	r1, r0
 800925e:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 8009262:	4a7a      	ldr	r2, [pc, #488]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009264:	487a      	ldr	r0, [pc, #488]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009266:	f001 fbd3 	bl	800aa10 <iprintf>
 800926a:	487e      	ldr	r0, [pc, #504]	; (8009464 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800926c:	f001 fc6c 	bl	800ab48 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8009270:	4875      	ldr	r0, [pc, #468]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009272:	f7ff fb07 	bl	8008884 <DbgTraceGetFileName>
 8009276:	4601      	mov	r1, r0
 8009278:	f240 23e1 	movw	r3, #737	; 0x2e1
 800927c:	4a73      	ldr	r2, [pc, #460]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800927e:	4874      	ldr	r0, [pc, #464]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009280:	f001 fbc6 	bl	800aa10 <iprintf>
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	3305      	adds	r3, #5
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	4618      	mov	r0, r3
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	3304      	adds	r3, #4
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	461c      	mov	r4, r3
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	3303      	adds	r3, #3
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	461d      	mov	r5, r3
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	3302      	adds	r3, #2
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	461a      	mov	r2, r3
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	3301      	adds	r3, #1
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	4619      	mov	r1, r3
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	9302      	str	r3, [sp, #8]
 80092b2:	9101      	str	r1, [sp, #4]
 80092b4:	9200      	str	r2, [sp, #0]
 80092b6:	462b      	mov	r3, r5
 80092b8:	4622      	mov	r2, r4
 80092ba:	4601      	mov	r1, r0
 80092bc:	486a      	ldr	r0, [pc, #424]	; (8009468 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80092be:	f001 fba7 	bl	800aa10 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80092c2:	4a6a      	ldr	r2, [pc, #424]	; (800946c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 80092c4:	2110      	movs	r1, #16
 80092c6:	2018      	movs	r0, #24
 80092c8:	f7fe f9b9 	bl	800763e <aci_hal_write_config_data>
 80092cc:	4603      	mov	r3, r0
 80092ce:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00f      	beq.n	80092f6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 80092d6:	485c      	ldr	r0, [pc, #368]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80092d8:	f7ff fad4 	bl	8008884 <DbgTraceGetFileName>
 80092dc:	4601      	mov	r1, r0
 80092de:	f240 332b 	movw	r3, #811	; 0x32b
 80092e2:	4a5a      	ldr	r2, [pc, #360]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80092e4:	485a      	ldr	r0, [pc, #360]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80092e6:	f001 fb93 	bl	800aa10 <iprintf>
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	4619      	mov	r1, r3
 80092ee:	4860      	ldr	r0, [pc, #384]	; (8009470 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 80092f0:	f001 fb8e 	bl	800aa10 <iprintf>
 80092f4:	e00c      	b.n	8009310 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 80092f6:	4854      	ldr	r0, [pc, #336]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80092f8:	f7ff fac4 	bl	8008884 <DbgTraceGetFileName>
 80092fc:	4601      	mov	r1, r0
 80092fe:	f240 332f 	movw	r3, #815	; 0x32f
 8009302:	4a52      	ldr	r2, [pc, #328]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009304:	4852      	ldr	r0, [pc, #328]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009306:	f001 fb83 	bl	800aa10 <iprintf>
 800930a:	485a      	ldr	r0, [pc, #360]	; (8009474 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800930c:	f001 fc1c 	bl	800ab48 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8009310:	4a59      	ldr	r2, [pc, #356]	; (8009478 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8009312:	2110      	movs	r1, #16
 8009314:	2008      	movs	r0, #8
 8009316:	f7fe f992 	bl	800763e <aci_hal_write_config_data>
 800931a:	4603      	mov	r3, r0
 800931c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800931e:	7dfb      	ldrb	r3, [r7, #23]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00f      	beq.n	8009344 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8009324:	4848      	ldr	r0, [pc, #288]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009326:	f7ff faad 	bl	8008884 <DbgTraceGetFileName>
 800932a:	4601      	mov	r1, r0
 800932c:	f44f 734e 	mov.w	r3, #824	; 0x338
 8009330:	4a46      	ldr	r2, [pc, #280]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009332:	4847      	ldr	r0, [pc, #284]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009334:	f001 fb6c 	bl	800aa10 <iprintf>
 8009338:	7dfb      	ldrb	r3, [r7, #23]
 800933a:	4619      	mov	r1, r3
 800933c:	484f      	ldr	r0, [pc, #316]	; (800947c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800933e:	f001 fb67 	bl	800aa10 <iprintf>
 8009342:	e00c      	b.n	800935e <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8009344:	4840      	ldr	r0, [pc, #256]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009346:	f7ff fa9d 	bl	8008884 <DbgTraceGetFileName>
 800934a:	4601      	mov	r1, r0
 800934c:	f44f 734f 	mov.w	r3, #828	; 0x33c
 8009350:	4a3e      	ldr	r2, [pc, #248]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009352:	483f      	ldr	r0, [pc, #252]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009354:	f001 fb5c 	bl	800aa10 <iprintf>
 8009358:	4849      	ldr	r0, [pc, #292]	; (8009480 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800935a:	f001 fbf5 	bl	800ab48 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800935e:	2118      	movs	r1, #24
 8009360:	2001      	movs	r0, #1
 8009362:	f7fe f9f1 	bl	8007748 <aci_hal_set_tx_power_level>
 8009366:	4603      	mov	r3, r0
 8009368:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00f      	beq.n	8009390 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8009370:	4835      	ldr	r0, [pc, #212]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009372:	f7ff fa87 	bl	8008884 <DbgTraceGetFileName>
 8009376:	4601      	mov	r1, r0
 8009378:	f240 3345 	movw	r3, #837	; 0x345
 800937c:	4a33      	ldr	r2, [pc, #204]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800937e:	4834      	ldr	r0, [pc, #208]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009380:	f001 fb46 	bl	800aa10 <iprintf>
 8009384:	7dfb      	ldrb	r3, [r7, #23]
 8009386:	4619      	mov	r1, r3
 8009388:	483e      	ldr	r0, [pc, #248]	; (8009484 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800938a:	f001 fb41 	bl	800aa10 <iprintf>
 800938e:	e00c      	b.n	80093aa <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8009390:	482d      	ldr	r0, [pc, #180]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8009392:	f7ff fa77 	bl	8008884 <DbgTraceGetFileName>
 8009396:	4601      	mov	r1, r0
 8009398:	f240 3349 	movw	r3, #841	; 0x349
 800939c:	4a2b      	ldr	r2, [pc, #172]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800939e:	482c      	ldr	r0, [pc, #176]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80093a0:	f001 fb36 	bl	800aa10 <iprintf>
 80093a4:	4838      	ldr	r0, [pc, #224]	; (8009488 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80093a6:	f001 fbcf 	bl	800ab48 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80093aa:	f7fd fe9c 	bl	80070e6 <aci_gatt_init>
 80093ae:	4603      	mov	r3, r0
 80093b0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80093b2:	7dfb      	ldrb	r3, [r7, #23]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d00f      	beq.n	80093d8 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 80093b8:	4823      	ldr	r0, [pc, #140]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80093ba:	f7ff fa63 	bl	8008884 <DbgTraceGetFileName>
 80093be:	4601      	mov	r1, r0
 80093c0:	f240 3352 	movw	r3, #850	; 0x352
 80093c4:	4a21      	ldr	r2, [pc, #132]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80093c6:	4822      	ldr	r0, [pc, #136]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80093c8:	f001 fb22 	bl	800aa10 <iprintf>
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	4619      	mov	r1, r3
 80093d0:	482e      	ldr	r0, [pc, #184]	; (800948c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80093d2:	f001 fb1d 	bl	800aa10 <iprintf>
 80093d6:	e00c      	b.n	80093f2 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 80093d8:	481b      	ldr	r0, [pc, #108]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80093da:	f7ff fa53 	bl	8008884 <DbgTraceGetFileName>
 80093de:	4601      	mov	r1, r0
 80093e0:	f240 3356 	movw	r3, #854	; 0x356
 80093e4:	4a19      	ldr	r2, [pc, #100]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80093e6:	481a      	ldr	r0, [pc, #104]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80093e8:	f001 fb12 	bl	800aa10 <iprintf>
 80093ec:	4828      	ldr	r0, [pc, #160]	; (8009490 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 80093ee:	f001 fbab 	bl	800ab48 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	f043 0301 	orr.w	r3, r3, #1
 80093fc:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d069      	beq.n	80094d8 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8009404:	4b23      	ldr	r3, [pc, #140]	; (8009494 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8009406:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009408:	1dba      	adds	r2, r7, #6
 800940a:	7bf8      	ldrb	r0, [r7, #15]
 800940c:	1cbb      	adds	r3, r7, #2
 800940e:	9301      	str	r3, [sp, #4]
 8009410:	1d3b      	adds	r3, r7, #4
 8009412:	9300      	str	r3, [sp, #0]
 8009414:	4613      	mov	r3, r2
 8009416:	2205      	movs	r2, #5
 8009418:	2100      	movs	r1, #0
 800941a:	f7fd fcba 	bl	8006d92 <aci_gap_init>
 800941e:	4603      	mov	r3, r0
 8009420:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d039      	beq.n	800949c <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8009428:	4807      	ldr	r0, [pc, #28]	; (8009448 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800942a:	f7ff fa2b 	bl	8008884 <DbgTraceGetFileName>
 800942e:	4601      	mov	r1, r0
 8009430:	f240 3376 	movw	r3, #886	; 0x376
 8009434:	4a05      	ldr	r2, [pc, #20]	; (800944c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8009436:	4806      	ldr	r0, [pc, #24]	; (8009450 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8009438:	f001 faea 	bl	800aa10 <iprintf>
 800943c:	7dfb      	ldrb	r3, [r7, #23]
 800943e:	4619      	mov	r1, r3
 8009440:	4815      	ldr	r0, [pc, #84]	; (8009498 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8009442:	f001 fae5 	bl	800aa10 <iprintf>
 8009446:	e036      	b.n	80094b6 <Ble_Hci_Gap_Gatt_Init+0x30a>
 8009448:	0800beec 	.word	0x0800beec
 800944c:	0800d014 	.word	0x0800d014
 8009450:	0800bf08 	.word	0x0800bf08
 8009454:	0800c430 	.word	0x0800c430
 8009458:	0800c45c 	.word	0x0800c45c
 800945c:	0800c48c 	.word	0x0800c48c
 8009460:	0800c4ac 	.word	0x0800c4ac
 8009464:	0800c508 	.word	0x0800c508
 8009468:	0800c554 	.word	0x0800c554
 800946c:	0800cfcc 	.word	0x0800cfcc
 8009470:	0800c590 	.word	0x0800c590
 8009474:	0800c5e8 	.word	0x0800c5e8
 8009478:	0800cfdc 	.word	0x0800cfdc
 800947c:	0800c630 	.word	0x0800c630
 8009480:	0800c688 	.word	0x0800c688
 8009484:	0800c6d0 	.word	0x0800c6d0
 8009488:	0800c710 	.word	0x0800c710
 800948c:	0800c740 	.word	0x0800c740
 8009490:	0800c774 	.word	0x0800c774
 8009494:	0800c798 	.word	0x0800c798
 8009498:	0800c7a0 	.word	0x0800c7a0
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800949c:	487e      	ldr	r0, [pc, #504]	; (8009698 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800949e:	f7ff f9f1 	bl	8008884 <DbgTraceGetFileName>
 80094a2:	4601      	mov	r1, r0
 80094a4:	f240 337a 	movw	r3, #890	; 0x37a
 80094a8:	4a7c      	ldr	r2, [pc, #496]	; (800969c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80094aa:	487d      	ldr	r0, [pc, #500]	; (80096a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80094ac:	f001 fab0 	bl	800aa10 <iprintf>
 80094b0:	487c      	ldr	r0, [pc, #496]	; (80096a4 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 80094b2:	f001 fb49 	bl	800ab48 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80094b6:	88fc      	ldrh	r4, [r7, #6]
 80094b8:	88bd      	ldrh	r5, [r7, #4]
 80094ba:	68b8      	ldr	r0, [r7, #8]
 80094bc:	f7f6 fe60 	bl	8000180 <strlen>
 80094c0:	4603      	mov	r3, r0
 80094c2:	b2da      	uxtb	r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	4613      	mov	r3, r2
 80094ca:	2200      	movs	r2, #0
 80094cc:	4629      	mov	r1, r5
 80094ce:	4620      	mov	r0, r4
 80094d0:	f7fe f80c 	bl	80074ec <aci_gatt_update_char_value>
 80094d4:	4603      	mov	r3, r0
 80094d6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80094d8:	88f8      	ldrh	r0, [r7, #6]
 80094da:	8879      	ldrh	r1, [r7, #2]
 80094dc:	463b      	mov	r3, r7
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	2302      	movs	r3, #2
 80094e2:	2200      	movs	r2, #0
 80094e4:	f7fe f802 	bl	80074ec <aci_gatt_update_char_value>
 80094e8:	4603      	mov	r3, r0
 80094ea:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80094ec:	2202      	movs	r2, #2
 80094ee:	2102      	movs	r1, #2
 80094f0:	2000      	movs	r0, #0
 80094f2:	f7fe fa08 	bl	8007906 <hci_le_set_default_phy>
 80094f6:	4603      	mov	r3, r0
 80094f8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00f      	beq.n	8009520 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8009500:	4865      	ldr	r0, [pc, #404]	; (8009698 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8009502:	f7ff f9bf 	bl	8008884 <DbgTraceGetFileName>
 8009506:	4601      	mov	r1, r0
 8009508:	f44f 7367 	mov.w	r3, #924	; 0x39c
 800950c:	4a63      	ldr	r2, [pc, #396]	; (800969c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800950e:	4864      	ldr	r0, [pc, #400]	; (80096a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8009510:	f001 fa7e 	bl	800aa10 <iprintf>
 8009514:	7dfb      	ldrb	r3, [r7, #23]
 8009516:	4619      	mov	r1, r3
 8009518:	4863      	ldr	r0, [pc, #396]	; (80096a8 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800951a:	f001 fa79 	bl	800aa10 <iprintf>
 800951e:	e00c      	b.n	800953a <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8009520:	485d      	ldr	r0, [pc, #372]	; (8009698 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8009522:	f7ff f9af 	bl	8008884 <DbgTraceGetFileName>
 8009526:	4601      	mov	r1, r0
 8009528:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800952c:	4a5b      	ldr	r2, [pc, #364]	; (800969c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800952e:	485c      	ldr	r0, [pc, #368]	; (80096a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8009530:	f001 fa6e 	bl	800aa10 <iprintf>
 8009534:	485d      	ldr	r0, [pc, #372]	; (80096ac <Ble_Hci_Gap_Gatt_Init+0x500>)
 8009536:	f001 fb07 	bl	800ab48 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800953a:	4b5d      	ldr	r3, [pc, #372]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800953c:	2201      	movs	r2, #1
 800953e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009540:	4b5b      	ldr	r3, [pc, #364]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	4618      	mov	r0, r3
 8009546:	f7fd faa5 	bl	8006a94 <aci_gap_set_io_capability>
 800954a:	4603      	mov	r3, r0
 800954c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800954e:	7dfb      	ldrb	r3, [r7, #23]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00f      	beq.n	8009574 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8009554:	4850      	ldr	r0, [pc, #320]	; (8009698 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8009556:	f7ff f995 	bl	8008884 <DbgTraceGetFileName>
 800955a:	4601      	mov	r1, r0
 800955c:	f240 33aa 	movw	r3, #938	; 0x3aa
 8009560:	4a4e      	ldr	r2, [pc, #312]	; (800969c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8009562:	484f      	ldr	r0, [pc, #316]	; (80096a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8009564:	f001 fa54 	bl	800aa10 <iprintf>
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	4619      	mov	r1, r3
 800956c:	4851      	ldr	r0, [pc, #324]	; (80096b4 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800956e:	f001 fa4f 	bl	800aa10 <iprintf>
 8009572:	e00c      	b.n	800958e <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8009574:	4848      	ldr	r0, [pc, #288]	; (8009698 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8009576:	f7ff f985 	bl	8008884 <DbgTraceGetFileName>
 800957a:	4601      	mov	r1, r0
 800957c:	f240 33ae 	movw	r3, #942	; 0x3ae
 8009580:	4a46      	ldr	r2, [pc, #280]	; (800969c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8009582:	4847      	ldr	r0, [pc, #284]	; (80096a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8009584:	f001 fa44 	bl	800aa10 <iprintf>
 8009588:	484b      	ldr	r0, [pc, #300]	; (80096b8 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800958a:	f001 fadd 	bl	800ab48 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800958e:	4b48      	ldr	r3, [pc, #288]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8009590:	2201      	movs	r2, #1
 8009592:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8009594:	4b46      	ldr	r3, [pc, #280]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8009596:	2208      	movs	r2, #8
 8009598:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800959a:	4b45      	ldr	r3, [pc, #276]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800959c:	2210      	movs	r2, #16
 800959e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80095a0:	4b43      	ldr	r3, [pc, #268]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80095a6:	4b42      	ldr	r3, [pc, #264]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80095a8:	4a44      	ldr	r2, [pc, #272]	; (80096bc <Ble_Hci_Gap_Gatt_Init+0x510>)
 80095aa:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80095ac:	4b40      	ldr	r3, [pc, #256]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80095ae:	2200      	movs	r2, #0
 80095b0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80095b2:	4b3f      	ldr	r3, [pc, #252]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80095b4:	789c      	ldrb	r4, [r3, #2]
 80095b6:	4b3e      	ldr	r3, [pc, #248]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80095b8:	785d      	ldrb	r5, [r3, #1]
 80095ba:	4b3d      	ldr	r3, [pc, #244]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80095bc:	791b      	ldrb	r3, [r3, #4]
 80095be:	4a3c      	ldr	r2, [pc, #240]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80095c0:	7952      	ldrb	r2, [r2, #5]
 80095c2:	493b      	ldr	r1, [pc, #236]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80095c4:	78c9      	ldrb	r1, [r1, #3]
 80095c6:	483a      	ldr	r0, [pc, #232]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80095c8:	6880      	ldr	r0, [r0, #8]
 80095ca:	2600      	movs	r6, #0
 80095cc:	9604      	str	r6, [sp, #16]
 80095ce:	9003      	str	r0, [sp, #12]
 80095d0:	9102      	str	r1, [sp, #8]
 80095d2:	9201      	str	r2, [sp, #4]
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	2300      	movs	r3, #0
 80095d8:	2201      	movs	r2, #1
 80095da:	4629      	mov	r1, r5
 80095dc:	4620      	mov	r0, r4
 80095de:	f7fd faad 	bl	8006b3c <aci_gap_set_authentication_requirement>
 80095e2:	4603      	mov	r3, r0
 80095e4:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00f      	beq.n	800960c <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80095ec:	482a      	ldr	r0, [pc, #168]	; (8009698 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80095ee:	f7ff f949 	bl	8008884 <DbgTraceGetFileName>
 80095f2:	4601      	mov	r1, r0
 80095f4:	f240 33c9 	movw	r3, #969	; 0x3c9
 80095f8:	4a28      	ldr	r2, [pc, #160]	; (800969c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80095fa:	4829      	ldr	r0, [pc, #164]	; (80096a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80095fc:	f001 fa08 	bl	800aa10 <iprintf>
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	4619      	mov	r1, r3
 8009604:	482e      	ldr	r0, [pc, #184]	; (80096c0 <Ble_Hci_Gap_Gatt_Init+0x514>)
 8009606:	f001 fa03 	bl	800aa10 <iprintf>
 800960a:	e00c      	b.n	8009626 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800960c:	4822      	ldr	r0, [pc, #136]	; (8009698 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800960e:	f7ff f939 	bl	8008884 <DbgTraceGetFileName>
 8009612:	4601      	mov	r1, r0
 8009614:	f240 33cd 	movw	r3, #973	; 0x3cd
 8009618:	4a20      	ldr	r2, [pc, #128]	; (800969c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800961a:	4821      	ldr	r0, [pc, #132]	; (80096a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800961c:	f001 f9f8 	bl	800aa10 <iprintf>
 8009620:	4828      	ldr	r0, [pc, #160]	; (80096c4 <Ble_Hci_Gap_Gatt_Init+0x518>)
 8009622:	f001 fa91 	bl	800ab48 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8009626:	4b22      	ldr	r3, [pc, #136]	; (80096b0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8009628:	789b      	ldrb	r3, [r3, #2]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d023      	beq.n	8009676 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800962e:	f7fd fccf 	bl	8006fd0 <aci_gap_configure_whitelist>
 8009632:	4603      	mov	r3, r0
 8009634:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8009636:	7dfb      	ldrb	r3, [r7, #23]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00f      	beq.n	800965c <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800963c:	4816      	ldr	r0, [pc, #88]	; (8009698 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800963e:	f7ff f921 	bl	8008884 <DbgTraceGetFileName>
 8009642:	4601      	mov	r1, r0
 8009644:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 8009648:	4a14      	ldr	r2, [pc, #80]	; (800969c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800964a:	4815      	ldr	r0, [pc, #84]	; (80096a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800964c:	f001 f9e0 	bl	800aa10 <iprintf>
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	4619      	mov	r1, r3
 8009654:	481c      	ldr	r0, [pc, #112]	; (80096c8 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 8009656:	f001 f9db 	bl	800aa10 <iprintf>
 800965a:	e00c      	b.n	8009676 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800965c:	480e      	ldr	r0, [pc, #56]	; (8009698 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800965e:	f7ff f911 	bl	8008884 <DbgTraceGetFileName>
 8009662:	4601      	mov	r1, r0
 8009664:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 8009668:	4a0c      	ldr	r2, [pc, #48]	; (800969c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800966a:	480d      	ldr	r0, [pc, #52]	; (80096a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800966c:	f001 f9d0 	bl	800aa10 <iprintf>
 8009670:	4816      	ldr	r0, [pc, #88]	; (80096cc <Ble_Hci_Gap_Gatt_Init+0x520>)
 8009672:	f001 fa69 	bl	800ab48 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8009676:	4808      	ldr	r0, [pc, #32]	; (8009698 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8009678:	f7ff f904 	bl	8008884 <DbgTraceGetFileName>
 800967c:	4601      	mov	r1, r0
 800967e:	f240 33df 	movw	r3, #991	; 0x3df
 8009682:	4a06      	ldr	r2, [pc, #24]	; (800969c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8009684:	4806      	ldr	r0, [pc, #24]	; (80096a0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8009686:	f001 f9c3 	bl	800aa10 <iprintf>
 800968a:	4811      	ldr	r0, [pc, #68]	; (80096d0 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800968c:	f001 f9c0 	bl	800aa10 <iprintf>
}
 8009690:	bf00      	nop
 8009692:	371c      	adds	r7, #28
 8009694:	46bd      	mov	sp, r7
 8009696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009698:	0800beec 	.word	0x0800beec
 800969c:	0800d014 	.word	0x0800d014
 80096a0:	0800bf08 	.word	0x0800bf08
 80096a4:	0800c7d0 	.word	0x0800c7d0
 80096a8:	0800c7f0 	.word	0x0800c7f0
 80096ac:	0800c82c 	.word	0x0800c82c
 80096b0:	20000f80 	.word	0x20000f80
 80096b4:	0800c858 	.word	0x0800c858
 80096b8:	0800c898 	.word	0x0800c898
 80096bc:	0001b207 	.word	0x0001b207
 80096c0:	0800c8c8 	.word	0x0800c8c8
 80096c4:	0800c914 	.word	0x0800c914
 80096c8:	0800c950 	.word	0x0800c950
 80096cc:	0800c990 	.word	0x0800c990
 80096d0:	0800c9c0 	.word	0x0800c9c0

080096d4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b08c      	sub	sp, #48	; 0x30
 80096d8:	af08      	add	r7, sp, #32
 80096da:	4603      	mov	r3, r0
 80096dc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80096de:	2392      	movs	r3, #146	; 0x92
 80096e0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80096e2:	4a32      	ldr	r2, [pc, #200]	; (80097ac <Adv_Request+0xd8>)
 80096e4:	79fb      	ldrb	r3, [r7, #7]
 80096e6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80096ea:	2300      	movs	r3, #0
 80096ec:	9306      	str	r3, [sp, #24]
 80096ee:	2300      	movs	r3, #0
 80096f0:	9305      	str	r3, [sp, #20]
 80096f2:	2300      	movs	r3, #0
 80096f4:	9304      	str	r3, [sp, #16]
 80096f6:	2300      	movs	r3, #0
 80096f8:	9303      	str	r3, [sp, #12]
 80096fa:	2300      	movs	r3, #0
 80096fc:	9302      	str	r3, [sp, #8]
 80096fe:	2300      	movs	r3, #0
 8009700:	9301      	str	r3, [sp, #4]
 8009702:	2300      	movs	r3, #0
 8009704:	9300      	str	r3, [sp, #0]
 8009706:	2300      	movs	r3, #0
 8009708:	22a0      	movs	r2, #160	; 0xa0
 800970a:	2180      	movs	r1, #128	; 0x80
 800970c:	2000      	movs	r0, #0
 800970e:	f7fd f8c7 	bl	80068a0 <aci_gap_set_discoverable>
 8009712:	4603      	mov	r3, r0
 8009714:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00f      	beq.n	800973c <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800971c:	4824      	ldr	r0, [pc, #144]	; (80097b0 <Adv_Request+0xdc>)
 800971e:	f7ff f8b1 	bl	8008884 <DbgTraceGetFileName>
 8009722:	4601      	mov	r1, r0
 8009724:	f240 33f5 	movw	r3, #1013	; 0x3f5
 8009728:	4a22      	ldr	r2, [pc, #136]	; (80097b4 <Adv_Request+0xe0>)
 800972a:	4823      	ldr	r0, [pc, #140]	; (80097b8 <Adv_Request+0xe4>)
 800972c:	f001 f970 	bl	800aa10 <iprintf>
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	4619      	mov	r1, r3
 8009734:	4821      	ldr	r0, [pc, #132]	; (80097bc <Adv_Request+0xe8>)
 8009736:	f001 f96b 	bl	800aa10 <iprintf>
 800973a:	e00c      	b.n	8009756 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800973c:	481c      	ldr	r0, [pc, #112]	; (80097b0 <Adv_Request+0xdc>)
 800973e:	f7ff f8a1 	bl	8008884 <DbgTraceGetFileName>
 8009742:	4601      	mov	r1, r0
 8009744:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8009748:	4a1a      	ldr	r2, [pc, #104]	; (80097b4 <Adv_Request+0xe0>)
 800974a:	481b      	ldr	r0, [pc, #108]	; (80097b8 <Adv_Request+0xe4>)
 800974c:	f001 f960 	bl	800aa10 <iprintf>
 8009750:	481b      	ldr	r0, [pc, #108]	; (80097c0 <Adv_Request+0xec>)
 8009752:	f001 f9f9 	bl	800ab48 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8009756:	491b      	ldr	r1, [pc, #108]	; (80097c4 <Adv_Request+0xf0>)
 8009758:	2015      	movs	r0, #21
 800975a:	f7fd fbc7 	bl	8006eec <aci_gap_update_adv_data>
 800975e:	4603      	mov	r3, r0
 8009760:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00f      	beq.n	8009788 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8009768:	4811      	ldr	r0, [pc, #68]	; (80097b0 <Adv_Request+0xdc>)
 800976a:	f7ff f88b 	bl	8008884 <DbgTraceGetFileName>
 800976e:	4601      	mov	r1, r0
 8009770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009774:	4a0f      	ldr	r2, [pc, #60]	; (80097b4 <Adv_Request+0xe0>)
 8009776:	4810      	ldr	r0, [pc, #64]	; (80097b8 <Adv_Request+0xe4>)
 8009778:	f001 f94a 	bl	800aa10 <iprintf>
 800977c:	7bfb      	ldrb	r3, [r7, #15]
 800977e:	4619      	mov	r1, r3
 8009780:	4811      	ldr	r0, [pc, #68]	; (80097c8 <Adv_Request+0xf4>)
 8009782:	f001 f945 	bl	800aa10 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8009786:	e00d      	b.n	80097a4 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8009788:	4809      	ldr	r0, [pc, #36]	; (80097b0 <Adv_Request+0xdc>)
 800978a:	f7ff f87b 	bl	8008884 <DbgTraceGetFileName>
 800978e:	4601      	mov	r1, r0
 8009790:	f240 4304 	movw	r3, #1028	; 0x404
 8009794:	4a07      	ldr	r2, [pc, #28]	; (80097b4 <Adv_Request+0xe0>)
 8009796:	4808      	ldr	r0, [pc, #32]	; (80097b8 <Adv_Request+0xe4>)
 8009798:	f001 f93a 	bl	800aa10 <iprintf>
 800979c:	480b      	ldr	r0, [pc, #44]	; (80097cc <Adv_Request+0xf8>)
 800979e:	f001 f937 	bl	800aa10 <iprintf>
  return;
 80097a2:	bf00      	nop
}
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20000f80 	.word	0x20000f80
 80097b0:	0800beec 	.word	0x0800beec
 80097b4:	0800d02c 	.word	0x0800d02c
 80097b8:	0800bf08 	.word	0x0800bf08
 80097bc:	0800c9ec 	.word	0x0800c9ec
 80097c0:	0800ca24 	.word	0x0800ca24
 80097c4:	20000014 	.word	0x20000014
 80097c8:	0800ca4c 	.word	0x0800ca4c
 80097cc:	0800ca80 	.word	0x0800ca80

080097d0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80097d6:	f7ff f963 	bl	8008aa0 <LL_FLASH_GetUDN>
 80097da:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e2:	d023      	beq.n	800982c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80097e4:	f7ff f974 	bl	8008ad0 <LL_FLASH_GetSTCompanyID>
 80097e8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80097ea:	f7ff f965 	bl	8008ab8 <LL_FLASH_GetDeviceID>
 80097ee:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	4b16      	ldr	r3, [pc, #88]	; (8009850 <BleGetBdAddress+0x80>)
 80097f6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	0a1b      	lsrs	r3, r3, #8
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	4b14      	ldr	r3, [pc, #80]	; (8009850 <BleGetBdAddress+0x80>)
 8009800:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	b2da      	uxtb	r2, r3
 8009806:	4b12      	ldr	r3, [pc, #72]	; (8009850 <BleGetBdAddress+0x80>)
 8009808:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	b2da      	uxtb	r2, r3
 800980e:	4b10      	ldr	r3, [pc, #64]	; (8009850 <BleGetBdAddress+0x80>)
 8009810:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	0a1b      	lsrs	r3, r3, #8
 8009816:	b2da      	uxtb	r2, r3
 8009818:	4b0d      	ldr	r3, [pc, #52]	; (8009850 <BleGetBdAddress+0x80>)
 800981a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	0c1b      	lsrs	r3, r3, #16
 8009820:	b2da      	uxtb	r2, r3
 8009822:	4b0b      	ldr	r3, [pc, #44]	; (8009850 <BleGetBdAddress+0x80>)
 8009824:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009826:	4b0a      	ldr	r3, [pc, #40]	; (8009850 <BleGetBdAddress+0x80>)
 8009828:	617b      	str	r3, [r7, #20]
 800982a:	e00b      	b.n	8009844 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800982c:	2000      	movs	r0, #0
 800982e:	f7ff f851 	bl	80088d4 <OTP_Read>
 8009832:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d002      	beq.n	8009840 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	617b      	str	r3, [r7, #20]
 800983e:	e001      	b.n	8009844 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8009840:	4b04      	ldr	r3, [pc, #16]	; (8009854 <BleGetBdAddress+0x84>)
 8009842:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009844:	697b      	ldr	r3, [r7, #20]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20000f78 	.word	0x20000f78
 8009854:	0800cfc4 	.word	0x0800cfc4

08009858 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800985e:	4b1f      	ldr	r3, [pc, #124]	; (80098dc <Adv_Cancel+0x84>)
 8009860:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009864:	2b05      	cmp	r3, #5
 8009866:	d035      	beq.n	80098d4 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009868:	2392      	movs	r3, #146	; 0x92
 800986a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800986c:	f7fc fff4 	bl	8006858 <aci_gap_set_non_discoverable>
 8009870:	4603      	mov	r3, r0
 8009872:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009874:	4b19      	ldr	r3, [pc, #100]	; (80098dc <Adv_Cancel+0x84>)
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800987c:	79fb      	ldrb	r3, [r7, #7]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d00d      	beq.n	800989e <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8009882:	4817      	ldr	r0, [pc, #92]	; (80098e0 <Adv_Cancel+0x88>)
 8009884:	f7fe fffe 	bl	8008884 <DbgTraceGetFileName>
 8009888:	4601      	mov	r1, r0
 800988a:	f240 4352 	movw	r3, #1106	; 0x452
 800988e:	4a15      	ldr	r2, [pc, #84]	; (80098e4 <Adv_Cancel+0x8c>)
 8009890:	4815      	ldr	r0, [pc, #84]	; (80098e8 <Adv_Cancel+0x90>)
 8009892:	f001 f8bd 	bl	800aa10 <iprintf>
 8009896:	4815      	ldr	r0, [pc, #84]	; (80098ec <Adv_Cancel+0x94>)
 8009898:	f001 f8ba 	bl	800aa10 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800989c:	e01a      	b.n	80098d4 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800989e:	4810      	ldr	r0, [pc, #64]	; (80098e0 <Adv_Cancel+0x88>)
 80098a0:	f7fe fff0 	bl	8008884 <DbgTraceGetFileName>
 80098a4:	4601      	mov	r1, r0
 80098a6:	f240 4356 	movw	r3, #1110	; 0x456
 80098aa:	4a0e      	ldr	r2, [pc, #56]	; (80098e4 <Adv_Cancel+0x8c>)
 80098ac:	480e      	ldr	r0, [pc, #56]	; (80098e8 <Adv_Cancel+0x90>)
 80098ae:	f001 f8af 	bl	800aa10 <iprintf>
 80098b2:	480f      	ldr	r0, [pc, #60]	; (80098f0 <Adv_Cancel+0x98>)
 80098b4:	f001 f8ac 	bl	800aa10 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 80098b8:	4809      	ldr	r0, [pc, #36]	; (80098e0 <Adv_Cancel+0x88>)
 80098ba:	f7fe ffe3 	bl	8008884 <DbgTraceGetFileName>
 80098be:	4601      	mov	r1, r0
 80098c0:	f240 4357 	movw	r3, #1111	; 0x457
 80098c4:	4a07      	ldr	r2, [pc, #28]	; (80098e4 <Adv_Cancel+0x8c>)
 80098c6:	4808      	ldr	r0, [pc, #32]	; (80098e8 <Adv_Cancel+0x90>)
 80098c8:	f001 f8a2 	bl	800aa10 <iprintf>
 80098cc:	4809      	ldr	r0, [pc, #36]	; (80098f4 <Adv_Cancel+0x9c>)
 80098ce:	f001 f89f 	bl	800aa10 <iprintf>
  return;
 80098d2:	bf00      	nop
 80098d4:	bf00      	nop
}
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	20000f80 	.word	0x20000f80
 80098e0:	0800beec 	.word	0x0800beec
 80098e4:	0800d038 	.word	0x0800d038
 80098e8:	0800bf08 	.word	0x0800bf08
 80098ec:	0800caa8 	.word	0x0800caa8
 80098f0:	0800cacc 	.word	0x0800cacc
 80098f4:	0800cad4 	.word	0x0800cad4

080098f8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009900:	2100      	movs	r1, #0
 8009902:	2002      	movs	r0, #2
 8009904:	f000 ff24 	bl	800a750 <UTIL_SEQ_SetTask>

  return;
 8009908:	bf00      	nop
}
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009918:	2001      	movs	r0, #1
 800991a:	f000 ff85 	bl	800a828 <UTIL_SEQ_SetEvt>

  return;
 800991e:	bf00      	nop
}
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b082      	sub	sp, #8
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800992e:	2001      	movs	r0, #1
 8009930:	f000 ff9a 	bl	800a868 <UTIL_SEQ_WaitEvt>

  return;
 8009934:	bf00      	nop
}
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	3308      	adds	r3, #8
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe f940 	bl	8007bd4 <SVCCTL_UserEvtRx>
 8009954:	4603      	mov	r3, r0
 8009956:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8009958:	7afb      	ldrb	r3, [r7, #11]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2201      	movs	r2, #1
 8009962:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009964:	e003      	b.n	800996e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	701a      	strb	r2, [r3, #0]
  return;
 800996c:	bf00      	nop
}
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	4603      	mov	r3, r0
 800997c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <BLE_StatusNot+0x16>
 8009984:	2b01      	cmp	r3, #1
 8009986:	d006      	beq.n	8009996 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8009988:	e00b      	b.n	80099a2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800998a:	2303      	movs	r3, #3
 800998c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 ff0a 	bl	800a7a8 <UTIL_SEQ_PauseTask>
      break;
 8009994:	e005      	b.n	80099a2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009996:	2303      	movs	r3, #3
 8009998:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f000 ff24 	bl	800a7e8 <UTIL_SEQ_ResumeTask>
      break;
 80099a0:	bf00      	nop
  }

  return;
 80099a2:	bf00      	nop
}
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80099ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099b0:	b08a      	sub	sp, #40	; 0x28
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	memset(UpdateCharData, 0, sizeof(uint8_t) * 247);
 80099b6:	22f7      	movs	r2, #247	; 0xf7
 80099b8:	2100      	movs	r1, #0
 80099ba:	4890      	ldr	r0, [pc, #576]	; (8009bfc <Custom_STM_App_Notification+0x250>)
 80099bc:	f001 f820 	bl	800aa00 <memset>
	// copy data update buffer +BCH
	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	6859      	ldr	r1, [r3, #4]
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	7a1b      	ldrb	r3, [r3, #8]
 80099c8:	461a      	mov	r2, r3
 80099ca:	488c      	ldr	r0, [pc, #560]	; (8009bfc <Custom_STM_App_Notification+0x250>)
 80099cc:	f001 f80a 	bl	800a9e4 <memcpy>
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	f200 810b 	bhi.w	8009bf0 <Custom_STM_App_Notification+0x244>
 80099da:	a201      	add	r2, pc, #4	; (adr r2, 80099e0 <Custom_STM_App_Notification+0x34>)
 80099dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e0:	08009bf1 	.word	0x08009bf1
 80099e4:	080099f1 	.word	0x080099f1
 80099e8:	08009bf1 	.word	0x08009bf1
 80099ec:	08009bf1 	.word	0x08009bf1
      /* USER CODE END CUSTOM_STM_GSSID_READ_EVT */
      break;

    case CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT */
    	ssidValue = 0;
 80099f0:	4983      	ldr	r1, [pc, #524]	; (8009c00 <Custom_STM_App_Notification+0x254>)
 80099f2:	f04f 0200 	mov.w	r2, #0
 80099f6:	f04f 0300 	mov.w	r3, #0
 80099fa:	e9c1 2300 	strd	r2, r3, [r1]
    	int i = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	627b      	str	r3, [r7, #36]	; 0x24
    	memset(Custom_App_Context.ssid, 0x00, sizeof(uint64_t)*30);
 8009a02:	22f0      	movs	r2, #240	; 0xf0
 8009a04:	2100      	movs	r1, #0
 8009a06:	487f      	ldr	r0, [pc, #508]	; (8009c04 <Custom_STM_App_Notification+0x258>)
 8009a08:	f000 fffa 	bl	800aa00 <memset>
    	while(UpdateCharData[i] != 0x00) {
 8009a0c:	e012      	b.n	8009a34 <Custom_STM_App_Notification+0x88>
    		Custom_App_Context.ssid[i] = (uint64_t)UpdateCharData[i];
 8009a0e:	4a7b      	ldr	r2, [pc, #492]	; (8009bfc <Custom_STM_App_Notification+0x250>)
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	4413      	add	r3, r2
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2200      	movs	r2, #0
 8009a1a:	60bb      	str	r3, [r7, #8]
 8009a1c:	60fa      	str	r2, [r7, #12]
 8009a1e:	4a79      	ldr	r2, [pc, #484]	; (8009c04 <Custom_STM_App_Notification+0x258>)
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	4413      	add	r3, r2
 8009a26:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a2a:	e9c3 1200 	strd	r1, r2, [r3]
    		i++;
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a30:	3301      	adds	r3, #1
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
    	while(UpdateCharData[i] != 0x00) {
 8009a34:	4a71      	ldr	r2, [pc, #452]	; (8009bfc <Custom_STM_App_Notification+0x250>)
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	4413      	add	r3, r2
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e6      	bne.n	8009a0e <Custom_STM_App_Notification+0x62>
    	}
    	memset(ssid, NULL, sizeof(char)*30);
 8009a40:	221e      	movs	r2, #30
 8009a42:	2100      	movs	r1, #0
 8009a44:	4870      	ldr	r0, [pc, #448]	; (8009c08 <Custom_STM_App_Notification+0x25c>)
 8009a46:	f000 ffdb 	bl	800aa00 <memset>
    	for(int pos=0;pos<i; pos++) {
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	623b      	str	r3, [r7, #32]
 8009a4e:	e00e      	b.n	8009a6e <Custom_STM_App_Notification+0xc2>
    		ssid[pos] = (char)Custom_App_Context.ssid[pos];
 8009a50:	4a6c      	ldr	r2, [pc, #432]	; (8009c04 <Custom_STM_App_Notification+0x258>)
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	00db      	lsls	r3, r3, #3
 8009a56:	4413      	add	r3, r2
 8009a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5c:	b2d1      	uxtb	r1, r2
 8009a5e:	4a6a      	ldr	r2, [pc, #424]	; (8009c08 <Custom_STM_App_Notification+0x25c>)
 8009a60:	6a3b      	ldr	r3, [r7, #32]
 8009a62:	4413      	add	r3, r2
 8009a64:	460a      	mov	r2, r1
 8009a66:	701a      	strb	r2, [r3, #0]
    	for(int pos=0;pos<i; pos++) {
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	623b      	str	r3, [r7, #32]
 8009a6e:	6a3a      	ldr	r2, [r7, #32]
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	429a      	cmp	r2, r3
 8009a74:	dbec      	blt.n	8009a50 <Custom_STM_App_Notification+0xa4>
    	}
    	data64 = (uint64_t)ssid;
 8009a76:	4b64      	ldr	r3, [pc, #400]	; (8009c08 <Custom_STM_App_Notification+0x25c>)
 8009a78:	17da      	asrs	r2, r3, #31
 8009a7a:	461c      	mov	r4, r3
 8009a7c:	4615      	mov	r5, r2
 8009a7e:	4b63      	ldr	r3, [pc, #396]	; (8009c0c <Custom_STM_App_Notification+0x260>)
 8009a80:	e9c3 4500 	strd	r4, r5, [r3]
    	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
    	for(int pos=0; pos < i; pos++) {
 8009a84:	2300      	movs	r3, #0
 8009a86:	61fb      	str	r3, [r7, #28]
 8009a88:	e02b      	b.n	8009ae2 <Custom_STM_App_Notification+0x136>
    		ssidValue += Custom_App_Context.ssid[i-1-pos]*power(16, pos*2);
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8c:	1e5a      	subs	r2, r3, #1
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	4a5c      	ldr	r2, [pc, #368]	; (8009c04 <Custom_STM_App_Notification+0x258>)
 8009a94:	00db      	lsls	r3, r3, #3
 8009a96:	4413      	add	r3, r2
 8009a98:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	005b      	lsls	r3, r3, #1
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	2010      	movs	r0, #16
 8009aa4:	f000 f8e5 	bl	8009c72 <power>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	fb02 f005 	mul.w	r0, r2, r5
 8009ab0:	fb04 f103 	mul.w	r1, r4, r3
 8009ab4:	4401      	add	r1, r0
 8009ab6:	fba4 8902 	umull	r8, r9, r4, r2
 8009aba:	eb01 0309 	add.w	r3, r1, r9
 8009abe:	4699      	mov	r9, r3
 8009ac0:	4b4f      	ldr	r3, [pc, #316]	; (8009c00 <Custom_STM_App_Notification+0x254>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	eb18 0102 	adds.w	r1, r8, r2
 8009aca:	6039      	str	r1, [r7, #0]
 8009acc:	eb49 0303 	adc.w	r3, r9, r3
 8009ad0:	607b      	str	r3, [r7, #4]
 8009ad2:	4b4b      	ldr	r3, [pc, #300]	; (8009c00 <Custom_STM_App_Notification+0x254>)
 8009ad4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009ad8:	e9c3 1200 	strd	r1, r2, [r3]
    	for(int pos=0; pos < i; pos++) {
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	61fb      	str	r3, [r7, #28]
 8009ae2:	69fa      	ldr	r2, [r7, #28]
 8009ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	dbcf      	blt.n	8009a8a <Custom_STM_App_Notification+0xde>
    	}
    	/* Unlock the Flash to enable the flash control register access *************/
		  HAL_FLASH_Unlock();
 8009aea:	f7f9 fc7d 	bl	80033e8 <HAL_FLASH_Unlock>

		 /* Clear OPTVERR bit set on virgin samples */
		  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8009aee:	4b48      	ldr	r3, [pc, #288]	; (8009c10 <Custom_STM_App_Notification+0x264>)
 8009af0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009af4:	611a      	str	r2, [r3, #16]

		  /* Erase the user Flash area
			(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

		  /* Get the 1st page to erase */
		  FirstPage = GetPage(FLASH_USER_START_ADDR);
 8009af6:	4847      	ldr	r0, [pc, #284]	; (8009c14 <Custom_STM_App_Notification+0x268>)
 8009af8:	f7f8 fd28 	bl	800254c <GetPage>
 8009afc:	4603      	mov	r3, r0
 8009afe:	4a46      	ldr	r2, [pc, #280]	; (8009c18 <Custom_STM_App_Notification+0x26c>)
 8009b00:	6013      	str	r3, [r2, #0]

		  /* Get the number of pages to erase from 1st page */
		  NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 8009b02:	4846      	ldr	r0, [pc, #280]	; (8009c1c <Custom_STM_App_Notification+0x270>)
 8009b04:	f7f8 fd22 	bl	800254c <GetPage>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	4b43      	ldr	r3, [pc, #268]	; (8009c18 <Custom_STM_App_Notification+0x26c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	3301      	adds	r3, #1
 8009b12:	4a43      	ldr	r2, [pc, #268]	; (8009c20 <Custom_STM_App_Notification+0x274>)
 8009b14:	6013      	str	r3, [r2, #0]

		  /* Fill EraseInit structure*/
		  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8009b16:	4b43      	ldr	r3, [pc, #268]	; (8009c24 <Custom_STM_App_Notification+0x278>)
 8009b18:	2202      	movs	r2, #2
 8009b1a:	601a      	str	r2, [r3, #0]
		  EraseInitStruct.Page        = FirstPage;
 8009b1c:	4b3e      	ldr	r3, [pc, #248]	; (8009c18 <Custom_STM_App_Notification+0x26c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a40      	ldr	r2, [pc, #256]	; (8009c24 <Custom_STM_App_Notification+0x278>)
 8009b22:	6053      	str	r3, [r2, #4]
		  EraseInitStruct.NbPages     = NbOfPages;
 8009b24:	4b3e      	ldr	r3, [pc, #248]	; (8009c20 <Custom_STM_App_Notification+0x274>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a3e      	ldr	r2, [pc, #248]	; (8009c24 <Custom_STM_App_Notification+0x278>)
 8009b2a:	6093      	str	r3, [r2, #8]

		  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
			 you have to make sure that these data are rewritten before they are accessed during code
			 execution. If this cannot be done safely, it is recommended to flush the caches by setting the
			 DCRST and ICRST bits in the FLASH_CR register. */
		  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8009b2c:	493e      	ldr	r1, [pc, #248]	; (8009c28 <Custom_STM_App_Notification+0x27c>)
 8009b2e:	483d      	ldr	r0, [pc, #244]	; (8009c24 <Custom_STM_App_Notification+0x278>)
 8009b30:	f7f9 fd2c 	bl	800358c <HAL_FLASHEx_Erase>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d004      	beq.n	8009b44 <Custom_STM_App_Notification+0x198>
			*/
			/* Infinite loop */
			while (1)
			{
			  /* Turn on LED3 */
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8009b3a:	2102      	movs	r1, #2
 8009b3c:	483b      	ldr	r0, [pc, #236]	; (8009c2c <Custom_STM_App_Notification+0x280>)
 8009b3e:	f7f9 ff71 	bl	8003a24 <HAL_GPIO_TogglePin>
 8009b42:	e7fa      	b.n	8009b3a <Custom_STM_App_Notification+0x18e>
		  }

		  /* Program the user Flash area word by word
			(area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

		  Address = FLASH_USER_START_ADDR;
 8009b44:	4b3a      	ldr	r3, [pc, #232]	; (8009c30 <Custom_STM_App_Notification+0x284>)
 8009b46:	4a33      	ldr	r2, [pc, #204]	; (8009c14 <Custom_STM_App_Notification+0x268>)
 8009b48:	601a      	str	r2, [r3, #0]


		  while (Address < FLASH_USER_END_ADDR)
 8009b4a:	e015      	b.n	8009b78 <Custom_STM_App_Notification+0x1cc>
		  {
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, data64) == HAL_OK)
 8009b4c:	4b38      	ldr	r3, [pc, #224]	; (8009c30 <Custom_STM_App_Notification+0x284>)
 8009b4e:	6819      	ldr	r1, [r3, #0]
 8009b50:	4b2e      	ldr	r3, [pc, #184]	; (8009c0c <Custom_STM_App_Notification+0x260>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	2001      	movs	r0, #1
 8009b58:	f7f9 fc02 	bl	8003360 <HAL_FLASH_Program>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d105      	bne.n	8009b6e <Custom_STM_App_Notification+0x1c2>
			{
			  Address = Address + 8;  /* increment to next double word*/
 8009b62:	4b33      	ldr	r3, [pc, #204]	; (8009c30 <Custom_STM_App_Notification+0x284>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3308      	adds	r3, #8
 8009b68:	4a31      	ldr	r2, [pc, #196]	; (8009c30 <Custom_STM_App_Notification+0x284>)
 8009b6a:	6013      	str	r3, [r2, #0]
 8009b6c:	e004      	b.n	8009b78 <Custom_STM_App_Notification+0x1cc>
			  /* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
			  while (1)
			  {
				/* Turn on LED3 */
				  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8009b6e:	2102      	movs	r1, #2
 8009b70:	482e      	ldr	r0, [pc, #184]	; (8009c2c <Custom_STM_App_Notification+0x280>)
 8009b72:	f7f9 ff57 	bl	8003a24 <HAL_GPIO_TogglePin>
 8009b76:	e7fa      	b.n	8009b6e <Custom_STM_App_Notification+0x1c2>
		  while (Address < FLASH_USER_END_ADDR)
 8009b78:	4b2d      	ldr	r3, [pc, #180]	; (8009c30 <Custom_STM_App_Notification+0x284>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a27      	ldr	r2, [pc, #156]	; (8009c1c <Custom_STM_App_Notification+0x270>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d3e4      	bcc.n	8009b4c <Custom_STM_App_Notification+0x1a0>
			}
		  }

		  /* Lock the Flash to disable the flash control register access (recommended
			 to protect the FLASH memory against possible unwanted operation) *********/
		  HAL_FLASH_Lock();
 8009b82:	f7f9 fc53 	bl	800342c <HAL_FLASH_Lock>

	  /* Check if the programmed data is OK
				 MemoryProgramStatus = 0: data programmed correctly
				 MemoryProgramStatus != 0: number of words not programmed correctly ******/
			 Address = FLASH_USER_START_ADDR;
 8009b86:	4b2a      	ldr	r3, [pc, #168]	; (8009c30 <Custom_STM_App_Notification+0x284>)
 8009b88:	4a22      	ldr	r2, [pc, #136]	; (8009c14 <Custom_STM_App_Notification+0x268>)
 8009b8a:	601a      	str	r2, [r3, #0]
			 MemoryProgramStatus = 0x0;
 8009b8c:	4b29      	ldr	r3, [pc, #164]	; (8009c34 <Custom_STM_App_Notification+0x288>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]

			 while (Address < FLASH_USER_END_ADDR)
 8009b92:	e01a      	b.n	8009bca <Custom_STM_App_Notification+0x21e>
			 {
			   data32 = *(__IO uint32_t *)Address;
 8009b94:	4b26      	ldr	r3, [pc, #152]	; (8009c30 <Custom_STM_App_Notification+0x284>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a27      	ldr	r2, [pc, #156]	; (8009c38 <Custom_STM_App_Notification+0x28c>)
 8009b9c:	6013      	str	r3, [r2, #0]

			   if (data32 != data64)
 8009b9e:	4b26      	ldr	r3, [pc, #152]	; (8009c38 <Custom_STM_App_Notification+0x28c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	469a      	mov	sl, r3
 8009ba6:	4693      	mov	fp, r2
 8009ba8:	4b18      	ldr	r3, [pc, #96]	; (8009c0c <Custom_STM_App_Notification+0x260>)
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	459b      	cmp	fp, r3
 8009bb0:	bf08      	it	eq
 8009bb2:	4592      	cmpeq	sl, r2
 8009bb4:	d004      	beq.n	8009bc0 <Custom_STM_App_Notification+0x214>
			   {
				 MemoryProgramStatus++;
 8009bb6:	4b1f      	ldr	r3, [pc, #124]	; (8009c34 <Custom_STM_App_Notification+0x288>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	4a1d      	ldr	r2, [pc, #116]	; (8009c34 <Custom_STM_App_Notification+0x288>)
 8009bbe:	6013      	str	r3, [r2, #0]
			   }
			   Address = Address + 8;
 8009bc0:	4b1b      	ldr	r3, [pc, #108]	; (8009c30 <Custom_STM_App_Notification+0x284>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	4a1a      	ldr	r2, [pc, #104]	; (8009c30 <Custom_STM_App_Notification+0x284>)
 8009bc8:	6013      	str	r3, [r2, #0]
			 while (Address < FLASH_USER_END_ADDR)
 8009bca:	4b19      	ldr	r3, [pc, #100]	; (8009c30 <Custom_STM_App_Notification+0x284>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a13      	ldr	r2, [pc, #76]	; (8009c1c <Custom_STM_App_Notification+0x270>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d3df      	bcc.n	8009b94 <Custom_STM_App_Notification+0x1e8>
			 }

			 /*Check if there is an issue to program data*/
			 if (MemoryProgramStatus == 0)
 8009bd4:	4b17      	ldr	r3, [pc, #92]	; (8009c34 <Custom_STM_App_Notification+0x288>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d104      	bne.n	8009be6 <Custom_STM_App_Notification+0x23a>
			 {
			   /* No error detected. Switch on LED2*/
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8009bdc:	2101      	movs	r1, #1
 8009bde:	4813      	ldr	r0, [pc, #76]	; (8009c2c <Custom_STM_App_Notification+0x280>)
 8009be0:	f7f9 ff20 	bl	8003a24 <HAL_GPIO_TogglePin>
    	} else {
    		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
    	}*/

      /* USER CODE END CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT */
      break;
 8009be4:	e005      	b.n	8009bf2 <Custom_STM_App_Notification+0x246>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8009be6:	2120      	movs	r1, #32
 8009be8:	4810      	ldr	r0, [pc, #64]	; (8009c2c <Custom_STM_App_Notification+0x280>)
 8009bea:	f7f9 ff1b 	bl	8003a24 <HAL_GPIO_TogglePin>
      break;
 8009bee:	e000      	b.n	8009bf2 <Custom_STM_App_Notification+0x246>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8009bf0:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8009bf2:	bf00      	nop
}
 8009bf4:	3728      	adds	r7, #40	; 0x28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bfc:	200011f0 	.word	0x200011f0
 8009c00:	200012e8 	.word	0x200012e8
 8009c04:	20001008 	.word	0x20001008
 8009c08:	200012f0 	.word	0x200012f0
 8009c0c:	20001310 	.word	0x20001310
 8009c10:	58004000 	.word	0x58004000
 8009c14:	08010000 	.word	0x08010000
 8009c18:	20001318 	.word	0x20001318
 8009c1c:	0807ffff 	.word	0x0807ffff
 8009c20:	2000131c 	.word	0x2000131c
 8009c24:	20001330 	.word	0x20001330
 8009c28:	20001324 	.word	0x20001324
 8009c2c:	48000400 	.word	0x48000400
 8009c30:	20001320 	.word	0x20001320
 8009c34:	20001328 	.word	0x20001328
 8009c38:	2000132c 	.word	0x2000132c

08009c3c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <Custom_APP_Notification+0x16>
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d002      	beq.n	8009c56 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8009c50:	e002      	b.n	8009c58 <Custom_APP_Notification+0x1c>
      break;
 8009c52:	bf00      	nop
 8009c54:	e000      	b.n	8009c58 <Custom_APP_Notification+0x1c>
      break;
 8009c56:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009c58:	bf00      	nop
}
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8009c64:	b480      	push	{r7}
 8009c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8009c68:	bf00      	nop
}
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <power>:
 *************************************************************/

/* First_service */

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
uint64_t power(int number, int exponent) {
 8009c72:	b4b0      	push	{r4, r5, r7}
 8009c74:	b087      	sub	sp, #28
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
	uint64_t result = 1;
 8009c7c:	f04f 0001 	mov.w	r0, #1
 8009c80:	f04f 0100 	mov.w	r1, #0
 8009c84:	e9c7 0104 	strd	r0, r1, [r7, #16]
	for(int i=0; i<exponent; i++) {
 8009c88:	2100      	movs	r1, #0
 8009c8a:	60f9      	str	r1, [r7, #12]
 8009c8c:	e016      	b.n	8009cbc <power+0x4a>
		result *= number;
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	17c8      	asrs	r0, r1, #31
 8009c92:	460c      	mov	r4, r1
 8009c94:	4605      	mov	r5, r0
 8009c96:	6979      	ldr	r1, [r7, #20]
 8009c98:	fb04 f001 	mul.w	r0, r4, r1
 8009c9c:	6939      	ldr	r1, [r7, #16]
 8009c9e:	fb05 f101 	mul.w	r1, r5, r1
 8009ca2:	4401      	add	r1, r0
 8009ca4:	6938      	ldr	r0, [r7, #16]
 8009ca6:	fba0 2304 	umull	r2, r3, r0, r4
 8009caa:	4419      	add	r1, r3
 8009cac:	460b      	mov	r3, r1
 8009cae:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8009cb2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i=0; i<exponent; i++) {
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	3101      	adds	r1, #1
 8009cba:	60f9      	str	r1, [r7, #12]
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	6839      	ldr	r1, [r7, #0]
 8009cc0:	4288      	cmp	r0, r1
 8009cc2:	dbe4      	blt.n	8009c8e <power+0x1c>
	}
	return result;
 8009cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8009cc8:	4610      	mov	r0, r2
 8009cca:	4619      	mov	r1, r3
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bcb0      	pop	{r4, r5, r7}
 8009cd2:	4770      	bx	lr

08009cd4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b08a      	sub	sp, #40	; 0x28
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2bff      	cmp	r3, #255	; 0xff
 8009cee:	d156      	bne.n	8009d9e <Custom_STM_Event_Handler+0xca>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	3302      	adds	r3, #2
 8009cf4:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	881b      	ldrh	r3, [r3, #0]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	f640 4214 	movw	r2, #3092	; 0xc14
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d046      	beq.n	8009d92 <Custom_STM_Event_Handler+0xbe>
 8009d04:	f640 4214 	movw	r2, #3092	; 0xc14
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	dc44      	bgt.n	8009d96 <Custom_STM_Event_Handler+0xc2>
 8009d0c:	f640 4201 	movw	r2, #3073	; 0xc01
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d003      	beq.n	8009d1c <Custom_STM_Event_Handler+0x48>
 8009d14:	f640 4213 	movw	r2, #3091	; 0xc13
 8009d18:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8009d1a:	e03f      	b.n	8009d9c <Custom_STM_Event_Handler+0xc8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	3302      	adds	r3, #2
 8009d20:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomGssidHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	885b      	ldrh	r3, [r3, #2]
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	461a      	mov	r2, r3
 8009d2a:	4b20      	ldr	r3, [pc, #128]	; (8009dac <Custom_STM_Event_Handler+0xd8>)
 8009d2c:	885b      	ldrh	r3, [r3, #2]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d112      	bne.n	8009d5a <Custom_STM_Event_Handler+0x86>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009d34:	2301      	movs	r3, #1
 8009d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GSSID_WRITE_NO_RESP_EVT;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	88db      	ldrh	r3, [r3, #6]
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 8009d4e:	f107 0308 	add.w	r3, r7, #8
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7ff fe2a 	bl	80099ac <Custom_STM_App_Notification>
          break;
 8009d58:	e01f      	b.n	8009d9a <Custom_STM_Event_Handler+0xc6>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGpassHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	885b      	ldrh	r3, [r3, #2]
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	461a      	mov	r2, r3
 8009d62:	4b12      	ldr	r3, [pc, #72]	; (8009dac <Custom_STM_Event_Handler+0xd8>)
 8009d64:	889b      	ldrh	r3, [r3, #4]
 8009d66:	3301      	adds	r3, #1
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d116      	bne.n	8009d9a <Custom_STM_Event_Handler+0xc6>
            return_value = SVCCTL_EvtAckFlowEnable;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GPASS_WRITE_NO_RESP_EVT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	88db      	ldrh	r3, [r3, #6]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	3308      	adds	r3, #8
 8009d84:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 8009d86:	f107 0308 	add.w	r3, r7, #8
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff fe0e 	bl	80099ac <Custom_STM_App_Notification>
          break;
 8009d90:	e003      	b.n	8009d9a <Custom_STM_Event_Handler+0xc6>
          break;
 8009d92:	bf00      	nop
 8009d94:	e004      	b.n	8009da0 <Custom_STM_Event_Handler+0xcc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8009d96:	bf00      	nop
 8009d98:	e002      	b.n	8009da0 <Custom_STM_Event_Handler+0xcc>
          break;
 8009d9a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009d9c:	e000      	b.n	8009da0 <Custom_STM_Event_Handler+0xcc>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8009d9e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8009da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8009da4:	4618      	mov	r0, r3
 8009da6:	3728      	adds	r7, #40	; 0x28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	2000133c 	.word	0x2000133c

08009db0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b08c      	sub	sp, #48	; 0x30
 8009db4:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009db6:	2392      	movs	r3, #146	; 0x92
 8009db8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8009dba:	487f      	ldr	r0, [pc, #508]	; (8009fb8 <SVCCTL_InitCustomSvc+0x208>)
 8009dbc:	f7fd fef0 	bl	8007ba0 <SVCCTL_RegisterSvcHandler>
   *                                2 for get_ssid +
   *                                2 for get_password +
   *                              = 5
   */

  COPY_FIRST_SERVICE_UUID(uuid.Char_UUID_128);
 8009dc0:	238f      	movs	r3, #143	; 0x8f
 8009dc2:	713b      	strb	r3, [r7, #4]
 8009dc4:	23e5      	movs	r3, #229	; 0xe5
 8009dc6:	717b      	strb	r3, [r7, #5]
 8009dc8:	23b3      	movs	r3, #179	; 0xb3
 8009dca:	71bb      	strb	r3, [r7, #6]
 8009dcc:	23d5      	movs	r3, #213	; 0xd5
 8009dce:	71fb      	strb	r3, [r7, #7]
 8009dd0:	232e      	movs	r3, #46	; 0x2e
 8009dd2:	723b      	strb	r3, [r7, #8]
 8009dd4:	237f      	movs	r3, #127	; 0x7f
 8009dd6:	727b      	strb	r3, [r7, #9]
 8009dd8:	234a      	movs	r3, #74	; 0x4a
 8009dda:	72bb      	strb	r3, [r7, #10]
 8009ddc:	2398      	movs	r3, #152	; 0x98
 8009dde:	72fb      	strb	r3, [r7, #11]
 8009de0:	232a      	movs	r3, #42	; 0x2a
 8009de2:	733b      	strb	r3, [r7, #12]
 8009de4:	2348      	movs	r3, #72	; 0x48
 8009de6:	737b      	strb	r3, [r7, #13]
 8009de8:	237a      	movs	r3, #122	; 0x7a
 8009dea:	73bb      	strb	r3, [r7, #14]
 8009dec:	23cc      	movs	r3, #204	; 0xcc
 8009dee:	73fb      	strb	r3, [r7, #15]
 8009df0:	23ed      	movs	r3, #237	; 0xed
 8009df2:	743b      	strb	r3, [r7, #16]
 8009df4:	23fe      	movs	r3, #254	; 0xfe
 8009df6:	747b      	strb	r3, [r7, #17]
 8009df8:	2300      	movs	r3, #0
 8009dfa:	74bb      	strb	r3, [r7, #18]
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8009e00:	1d39      	adds	r1, r7, #4
 8009e02:	4b6e      	ldr	r3, [pc, #440]	; (8009fbc <SVCCTL_InitCustomSvc+0x20c>)
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	2305      	movs	r3, #5
 8009e08:	2201      	movs	r2, #1
 8009e0a:	2002      	movs	r0, #2
 8009e0c:	f7fd f990 	bl	8007130 <aci_gatt_add_service>
 8009e10:	4603      	mov	r3, r0
 8009e12:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             5,
                             &(CustomContext.CustomFsHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8009e14:	7dfb      	ldrb	r3, [r7, #23]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00f      	beq.n	8009e3a <SVCCTL_InitCustomSvc+0x8a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: fs, error code: 0x%x \n\r", ret);
 8009e1a:	4869      	ldr	r0, [pc, #420]	; (8009fc0 <SVCCTL_InitCustomSvc+0x210>)
 8009e1c:	f7fe fd32 	bl	8008884 <DbgTraceGetFileName>
 8009e20:	4601      	mov	r1, r0
 8009e22:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009e26:	4a67      	ldr	r2, [pc, #412]	; (8009fc4 <SVCCTL_InitCustomSvc+0x214>)
 8009e28:	4867      	ldr	r0, [pc, #412]	; (8009fc8 <SVCCTL_InitCustomSvc+0x218>)
 8009e2a:	f000 fdf1 	bl	800aa10 <iprintf>
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
 8009e30:	4619      	mov	r1, r3
 8009e32:	4866      	ldr	r0, [pc, #408]	; (8009fcc <SVCCTL_InitCustomSvc+0x21c>)
 8009e34:	f000 fdec 	bl	800aa10 <iprintf>
 8009e38:	e00c      	b.n	8009e54 <SVCCTL_InitCustomSvc+0xa4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: fs \n\r");
 8009e3a:	4861      	ldr	r0, [pc, #388]	; (8009fc0 <SVCCTL_InitCustomSvc+0x210>)
 8009e3c:	f7fe fd22 	bl	8008884 <DbgTraceGetFileName>
 8009e40:	4601      	mov	r1, r0
 8009e42:	f44f 7384 	mov.w	r3, #264	; 0x108
 8009e46:	4a5f      	ldr	r2, [pc, #380]	; (8009fc4 <SVCCTL_InitCustomSvc+0x214>)
 8009e48:	485f      	ldr	r0, [pc, #380]	; (8009fc8 <SVCCTL_InitCustomSvc+0x218>)
 8009e4a:	f000 fde1 	bl	800aa10 <iprintf>
 8009e4e:	4860      	ldr	r0, [pc, #384]	; (8009fd0 <SVCCTL_InitCustomSvc+0x220>)
 8009e50:	f000 fdde 	bl	800aa10 <iprintf>
  }

  /**
   *  get_ssid
   */
  COPY_GET_SSID_UUID(uuid.Char_UUID_128);
 8009e54:	2319      	movs	r3, #25
 8009e56:	713b      	strb	r3, [r7, #4]
 8009e58:	23ed      	movs	r3, #237	; 0xed
 8009e5a:	717b      	strb	r3, [r7, #5]
 8009e5c:	2382      	movs	r3, #130	; 0x82
 8009e5e:	71bb      	strb	r3, [r7, #6]
 8009e60:	23ae      	movs	r3, #174	; 0xae
 8009e62:	71fb      	strb	r3, [r7, #7]
 8009e64:	23ed      	movs	r3, #237	; 0xed
 8009e66:	723b      	strb	r3, [r7, #8]
 8009e68:	2321      	movs	r3, #33	; 0x21
 8009e6a:	727b      	strb	r3, [r7, #9]
 8009e6c:	234c      	movs	r3, #76	; 0x4c
 8009e6e:	72bb      	strb	r3, [r7, #10]
 8009e70:	239d      	movs	r3, #157	; 0x9d
 8009e72:	72fb      	strb	r3, [r7, #11]
 8009e74:	2341      	movs	r3, #65	; 0x41
 8009e76:	733b      	strb	r3, [r7, #12]
 8009e78:	2345      	movs	r3, #69	; 0x45
 8009e7a:	737b      	strb	r3, [r7, #13]
 8009e7c:	2322      	movs	r3, #34	; 0x22
 8009e7e:	73bb      	strb	r3, [r7, #14]
 8009e80:	238e      	movs	r3, #142	; 0x8e
 8009e82:	73fb      	strb	r3, [r7, #15]
 8009e84:	23cd      	movs	r3, #205	; 0xcd
 8009e86:	743b      	strb	r3, [r7, #16]
 8009e88:	23ab      	movs	r3, #171	; 0xab
 8009e8a:	747b      	strb	r3, [r7, #17]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	74bb      	strb	r3, [r7, #18]
 8009e90:	2300      	movs	r3, #0
 8009e92:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 8009e94:	4b49      	ldr	r3, [pc, #292]	; (8009fbc <SVCCTL_InitCustomSvc+0x20c>)
 8009e96:	8818      	ldrh	r0, [r3, #0]
 8009e98:	4b4e      	ldr	r3, [pc, #312]	; (8009fd4 <SVCCTL_InitCustomSvc+0x224>)
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	1d3a      	adds	r2, r7, #4
 8009ea0:	494d      	ldr	r1, [pc, #308]	; (8009fd8 <SVCCTL_InitCustomSvc+0x228>)
 8009ea2:	9105      	str	r1, [sp, #20]
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	9104      	str	r1, [sp, #16]
 8009ea8:	2110      	movs	r1, #16
 8009eaa:	9103      	str	r1, [sp, #12]
 8009eac:	2101      	movs	r1, #1
 8009eae:	9102      	str	r1, [sp, #8]
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	9101      	str	r1, [sp, #4]
 8009eb4:	2106      	movs	r1, #6
 8009eb6:	9100      	str	r1, [sp, #0]
 8009eb8:	2102      	movs	r1, #2
 8009eba:	f7fd fa0f 	bl	80072dc <aci_gatt_add_char>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGssidHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8009ec2:	7dfb      	ldrb	r3, [r7, #23]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00f      	beq.n	8009ee8 <SVCCTL_InitCustomSvc+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GSSID, error code: 0x%x \n\r", ret);
 8009ec8:	483d      	ldr	r0, [pc, #244]	; (8009fc0 <SVCCTL_InitCustomSvc+0x210>)
 8009eca:	f7fe fcdb 	bl	8008884 <DbgTraceGetFileName>
 8009ece:	4601      	mov	r1, r0
 8009ed0:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8009ed4:	4a3b      	ldr	r2, [pc, #236]	; (8009fc4 <SVCCTL_InitCustomSvc+0x214>)
 8009ed6:	483c      	ldr	r0, [pc, #240]	; (8009fc8 <SVCCTL_InitCustomSvc+0x218>)
 8009ed8:	f000 fd9a 	bl	800aa10 <iprintf>
 8009edc:	7dfb      	ldrb	r3, [r7, #23]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	483e      	ldr	r0, [pc, #248]	; (8009fdc <SVCCTL_InitCustomSvc+0x22c>)
 8009ee2:	f000 fd95 	bl	800aa10 <iprintf>
 8009ee6:	e00c      	b.n	8009f02 <SVCCTL_InitCustomSvc+0x152>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GSSID \n\r");
 8009ee8:	4835      	ldr	r0, [pc, #212]	; (8009fc0 <SVCCTL_InitCustomSvc+0x210>)
 8009eea:	f7fe fccb 	bl	8008884 <DbgTraceGetFileName>
 8009eee:	4601      	mov	r1, r0
 8009ef0:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8009ef4:	4a33      	ldr	r2, [pc, #204]	; (8009fc4 <SVCCTL_InitCustomSvc+0x214>)
 8009ef6:	4834      	ldr	r0, [pc, #208]	; (8009fc8 <SVCCTL_InitCustomSvc+0x218>)
 8009ef8:	f000 fd8a 	bl	800aa10 <iprintf>
 8009efc:	4838      	ldr	r0, [pc, #224]	; (8009fe0 <SVCCTL_InitCustomSvc+0x230>)
 8009efe:	f000 fd87 	bl	800aa10 <iprintf>
  }
  /**
   *  get_password
   */
  COPY_GET_PASSWORD_UUID(uuid.Char_UUID_128);
 8009f02:	2319      	movs	r3, #25
 8009f04:	713b      	strb	r3, [r7, #4]
 8009f06:	23ed      	movs	r3, #237	; 0xed
 8009f08:	717b      	strb	r3, [r7, #5]
 8009f0a:	2382      	movs	r3, #130	; 0x82
 8009f0c:	71bb      	strb	r3, [r7, #6]
 8009f0e:	23ae      	movs	r3, #174	; 0xae
 8009f10:	71fb      	strb	r3, [r7, #7]
 8009f12:	23ed      	movs	r3, #237	; 0xed
 8009f14:	723b      	strb	r3, [r7, #8]
 8009f16:	2321      	movs	r3, #33	; 0x21
 8009f18:	727b      	strb	r3, [r7, #9]
 8009f1a:	234c      	movs	r3, #76	; 0x4c
 8009f1c:	72bb      	strb	r3, [r7, #10]
 8009f1e:	239d      	movs	r3, #157	; 0x9d
 8009f20:	72fb      	strb	r3, [r7, #11]
 8009f22:	2341      	movs	r3, #65	; 0x41
 8009f24:	733b      	strb	r3, [r7, #12]
 8009f26:	2345      	movs	r3, #69	; 0x45
 8009f28:	737b      	strb	r3, [r7, #13]
 8009f2a:	2322      	movs	r3, #34	; 0x22
 8009f2c:	73bb      	strb	r3, [r7, #14]
 8009f2e:	238e      	movs	r3, #142	; 0x8e
 8009f30:	73fb      	strb	r3, [r7, #15]
 8009f32:	2334      	movs	r3, #52	; 0x34
 8009f34:	743b      	strb	r3, [r7, #16]
 8009f36:	2312      	movs	r3, #18
 8009f38:	747b      	strb	r3, [r7, #17]
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	74bb      	strb	r3, [r7, #18]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomFsHdle,
 8009f42:	4b1e      	ldr	r3, [pc, #120]	; (8009fbc <SVCCTL_InitCustomSvc+0x20c>)
 8009f44:	8818      	ldrh	r0, [r3, #0]
 8009f46:	4b27      	ldr	r3, [pc, #156]	; (8009fe4 <SVCCTL_InitCustomSvc+0x234>)
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	1d3a      	adds	r2, r7, #4
 8009f4e:	4926      	ldr	r1, [pc, #152]	; (8009fe8 <SVCCTL_InitCustomSvc+0x238>)
 8009f50:	9105      	str	r1, [sp, #20]
 8009f52:	2101      	movs	r1, #1
 8009f54:	9104      	str	r1, [sp, #16]
 8009f56:	2110      	movs	r1, #16
 8009f58:	9103      	str	r1, [sp, #12]
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	9102      	str	r1, [sp, #8]
 8009f5e:	2100      	movs	r1, #0
 8009f60:	9101      	str	r1, [sp, #4]
 8009f62:	2106      	movs	r1, #6
 8009f64:	9100      	str	r1, [sp, #0]
 8009f66:	2102      	movs	r1, #2
 8009f68:	f7fd f9b8 	bl	80072dc <aci_gatt_add_char>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGpassHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00f      	beq.n	8009f96 <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GPASS, error code: 0x%x \n\r", ret);
 8009f76:	4812      	ldr	r0, [pc, #72]	; (8009fc0 <SVCCTL_InitCustomSvc+0x210>)
 8009f78:	f7fe fc84 	bl	8008884 <DbgTraceGetFileName>
 8009f7c:	4601      	mov	r1, r0
 8009f7e:	f240 132f 	movw	r3, #303	; 0x12f
 8009f82:	4a10      	ldr	r2, [pc, #64]	; (8009fc4 <SVCCTL_InitCustomSvc+0x214>)
 8009f84:	4810      	ldr	r0, [pc, #64]	; (8009fc8 <SVCCTL_InitCustomSvc+0x218>)
 8009f86:	f000 fd43 	bl	800aa10 <iprintf>
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	4817      	ldr	r0, [pc, #92]	; (8009fec <SVCCTL_InitCustomSvc+0x23c>)
 8009f90:	f000 fd3e 	bl	800aa10 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8009f94:	e00d      	b.n	8009fb2 <SVCCTL_InitCustomSvc+0x202>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GPASS \n\r");
 8009f96:	480a      	ldr	r0, [pc, #40]	; (8009fc0 <SVCCTL_InitCustomSvc+0x210>)
 8009f98:	f7fe fc74 	bl	8008884 <DbgTraceGetFileName>
 8009f9c:	4601      	mov	r1, r0
 8009f9e:	f240 1333 	movw	r3, #307	; 0x133
 8009fa2:	4a08      	ldr	r2, [pc, #32]	; (8009fc4 <SVCCTL_InitCustomSvc+0x214>)
 8009fa4:	4808      	ldr	r0, [pc, #32]	; (8009fc8 <SVCCTL_InitCustomSvc+0x218>)
 8009fa6:	f000 fd33 	bl	800aa10 <iprintf>
 8009faa:	4811      	ldr	r0, [pc, #68]	; (8009ff0 <SVCCTL_InitCustomSvc+0x240>)
 8009fac:	f000 fd30 	bl	800aa10 <iprintf>
  return;
 8009fb0:	bf00      	nop
}
 8009fb2:	3718      	adds	r7, #24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	08009cd5 	.word	0x08009cd5
 8009fbc:	2000133c 	.word	0x2000133c
 8009fc0:	0800caf0 	.word	0x0800caf0
 8009fc4:	0800d044 	.word	0x0800d044
 8009fc8:	0800cb10 	.word	0x0800cb10
 8009fcc:	0800cb24 	.word	0x0800cb24
 8009fd0:	0800cb68 	.word	0x0800cb68
 8009fd4:	20000029 	.word	0x20000029
 8009fd8:	2000133e 	.word	0x2000133e
 8009fdc:	0800cb98 	.word	0x0800cb98
 8009fe0:	0800cbdc 	.word	0x0800cbdc
 8009fe4:	2000002a 	.word	0x2000002a
 8009fe8:	20001340 	.word	0x20001340
 8009fec:	0800cc10 	.word	0x0800cc10
 8009ff0:	0800cc54 	.word	0x0800cc54

08009ff4 <LL_PWR_EnableBootC2>:
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009ff8:	4b05      	ldr	r3, [pc, #20]	; (800a010 <LL_PWR_EnableBootC2+0x1c>)
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	4a04      	ldr	r2, [pc, #16]	; (800a010 <LL_PWR_EnableBootC2+0x1c>)
 8009ffe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a002:	60d3      	str	r3, [r2, #12]
}
 800a004:	bf00      	nop
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	58000400 	.word	0x58000400

0800a014 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800a01c:	4b06      	ldr	r3, [pc, #24]	; (800a038 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a01e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a022:	4905      	ldr	r1, [pc, #20]	; (800a038 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4313      	orrs	r3, r2
 800a028:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800a02c:	bf00      	nop
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	58000800 	.word	0x58000800

0800a03c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a044:	4b05      	ldr	r3, [pc, #20]	; (800a05c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a046:	6a1a      	ldr	r2, [r3, #32]
 800a048:	4904      	ldr	r1, [pc, #16]	; (800a05c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	620b      	str	r3, [r1, #32]
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	58000800 	.word	0x58000800

0800a060 <LL_AHB3_GRP1_EnableClock>:
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a06c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a06e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4313      	orrs	r3, r2
 800a076:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a07c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4013      	ands	r3, r2
 800a082:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a084:	68fb      	ldr	r3, [r7, #12]
}
 800a086:	bf00      	nop
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a092:	b480      	push	{r7}
 800a094:	b085      	sub	sp, #20
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800a09a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a09e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a0a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800a0ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0b2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
}
 800a0be:	bf00      	nop
 800a0c0:	3714      	adds	r7, #20
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <LL_C1_IPCC_EnableIT_TXF>:
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b083      	sub	sp, #12
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	601a      	str	r2, [r3, #0]
}
 800a0de:	bf00      	nop
 800a0e0:	370c      	adds	r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e8:	4770      	bx	lr

0800a0ea <LL_C1_IPCC_EnableIT_RXO>:
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f043 0201 	orr.w	r2, r3, #1
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	601a      	str	r2, [r3, #0]
}
 800a0fe:	bf00      	nop
 800a100:	370c      	adds	r7, #12
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	041b      	lsls	r3, r3, #16
 800a11c:	43db      	mvns	r3, r3
 800a11e:	401a      	ands	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	605a      	str	r2, [r3, #4]
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	041b      	lsls	r3, r3, #16
 800a142:	431a      	orrs	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	605a      	str	r2, [r3, #4]
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	43db      	mvns	r3, r3
 800a166:	401a      	ands	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	605a      	str	r2, [r3, #4]
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	609a      	str	r2, [r3, #8]
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <LL_C1_IPCC_SetFlag_CHx>:
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	041a      	lsls	r2, r3, #16
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	609a      	str	r2, [r3, #8]
}
 800a1a6:	bf00      	nop
 800a1a8:	370c      	adds	r7, #12
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr

0800a1b2 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800a1b2:	b480      	push	{r7}
 800a1b4:	b083      	sub	sp, #12
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68da      	ldr	r2, [r3, #12]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d101      	bne.n	800a1ce <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e000      	b.n	800a1d0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	370c      	adds	r7, #12
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr

0800a1dc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	69da      	ldr	r2, [r3, #28]
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	683a      	ldr	r2, [r7, #0]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d101      	bne.n	800a1f8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e000      	b.n	800a1fa <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
	...

0800a208 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800a20c:	2102      	movs	r1, #2
 800a20e:	4819      	ldr	r0, [pc, #100]	; (800a274 <HW_IPCC_Rx_Handler+0x6c>)
 800a210:	f7ff ffe4 	bl	800a1dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d009      	beq.n	800a22e <HW_IPCC_Rx_Handler+0x26>
 800a21a:	4b16      	ldr	r3, [pc, #88]	; (800a274 <HW_IPCC_Rx_Handler+0x6c>)
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	43db      	mvns	r3, r3
 800a220:	f003 0302 	and.w	r3, r3, #2
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800a228:	f000 f8da 	bl	800a3e0 <HW_IPCC_SYS_EvtHandler>
 800a22c:	e01f      	b.n	800a26e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800a22e:	2101      	movs	r1, #1
 800a230:	4810      	ldr	r0, [pc, #64]	; (800a274 <HW_IPCC_Rx_Handler+0x6c>)
 800a232:	f7ff ffd3 	bl	800a1dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d008      	beq.n	800a24e <HW_IPCC_Rx_Handler+0x46>
 800a23c:	4b0d      	ldr	r3, [pc, #52]	; (800a274 <HW_IPCC_Rx_Handler+0x6c>)
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	2b00      	cmp	r3, #0
 800a246:	d102      	bne.n	800a24e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800a248:	f000 f88e 	bl	800a368 <HW_IPCC_BLE_EvtHandler>
 800a24c:	e00f      	b.n	800a26e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800a24e:	2108      	movs	r1, #8
 800a250:	4808      	ldr	r0, [pc, #32]	; (800a274 <HW_IPCC_Rx_Handler+0x6c>)
 800a252:	f7ff ffc3 	bl	800a1dc <LL_C2_IPCC_IsActiveFlag_CHx>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d009      	beq.n	800a270 <HW_IPCC_Rx_Handler+0x68>
 800a25c:	4b05      	ldr	r3, [pc, #20]	; (800a274 <HW_IPCC_Rx_Handler+0x6c>)
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	43db      	mvns	r3, r3
 800a262:	f003 0308 	and.w	r3, r3, #8
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800a26a:	f000 f905 	bl	800a478 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800a26e:	bf00      	nop
 800a270:	bf00      	nop
}
 800a272:	bd80      	pop	{r7, pc}
 800a274:	58000c00 	.word	0x58000c00

0800a278 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800a27c:	2102      	movs	r1, #2
 800a27e:	481a      	ldr	r0, [pc, #104]	; (800a2e8 <HW_IPCC_Tx_Handler+0x70>)
 800a280:	f7ff ff97 	bl	800a1b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d109      	bne.n	800a29e <HW_IPCC_Tx_Handler+0x26>
 800a28a:	4b17      	ldr	r3, [pc, #92]	; (800a2e8 <HW_IPCC_Tx_Handler+0x70>)
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	43db      	mvns	r3, r3
 800a290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800a298:	f000 f896 	bl	800a3c8 <HW_IPCC_SYS_CmdEvtHandler>
 800a29c:	e020      	b.n	800a2e0 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800a29e:	2108      	movs	r1, #8
 800a2a0:	4811      	ldr	r0, [pc, #68]	; (800a2e8 <HW_IPCC_Tx_Handler+0x70>)
 800a2a2:	f7ff ff86 	bl	800a1b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d109      	bne.n	800a2c0 <HW_IPCC_Tx_Handler+0x48>
 800a2ac:	4b0e      	ldr	r3, [pc, #56]	; (800a2e8 <HW_IPCC_Tx_Handler+0x70>)
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	43db      	mvns	r3, r3
 800a2b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d002      	beq.n	800a2c0 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800a2ba:	f000 f8bf 	bl	800a43c <HW_IPCC_MM_FreeBufHandler>
 800a2be:	e00f      	b.n	800a2e0 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800a2c0:	2120      	movs	r1, #32
 800a2c2:	4809      	ldr	r0, [pc, #36]	; (800a2e8 <HW_IPCC_Tx_Handler+0x70>)
 800a2c4:	f7ff ff75 	bl	800a1b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d109      	bne.n	800a2e2 <HW_IPCC_Tx_Handler+0x6a>
 800a2ce:	4b06      	ldr	r3, [pc, #24]	; (800a2e8 <HW_IPCC_Tx_Handler+0x70>)
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	43db      	mvns	r3, r3
 800a2d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800a2dc:	f000 f850 	bl	800a380 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800a2e0:	bf00      	nop
 800a2e2:	bf00      	nop
}
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	58000c00 	.word	0x58000c00

0800a2ec <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800a2f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a2f4:	f7ff fecd 	bl	800a092 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800a2f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a2fc:	f7ff fe9e 	bl	800a03c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800a300:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a304:	f7ff fe86 	bl	800a014 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800a308:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800a30a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800a30c:	f7ff fe72 	bl	8009ff4 <LL_PWR_EnableBootC2>

  return;
 800a310:	bf00      	nop
}
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800a318:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a31c:	f7ff fea0 	bl	800a060 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800a320:	4806      	ldr	r0, [pc, #24]	; (800a33c <HW_IPCC_Init+0x28>)
 800a322:	f7ff fee2 	bl	800a0ea <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800a326:	4805      	ldr	r0, [pc, #20]	; (800a33c <HW_IPCC_Init+0x28>)
 800a328:	f7ff fecf 	bl	800a0ca <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800a32c:	202c      	movs	r0, #44	; 0x2c
 800a32e:	f7f8 fe16 	bl	8002f5e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800a332:	202d      	movs	r0, #45	; 0x2d
 800a334:	f7f8 fe13 	bl	8002f5e <HAL_NVIC_EnableIRQ>

  return;
 800a338:	bf00      	nop
}
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	58000c00 	.word	0x58000c00

0800a340 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a344:	2101      	movs	r1, #1
 800a346:	4802      	ldr	r0, [pc, #8]	; (800a350 <HW_IPCC_BLE_Init+0x10>)
 800a348:	f7ff ff04 	bl	800a154 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a34c:	bf00      	nop
}
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	58000c00 	.word	0x58000c00

0800a354 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800a358:	2101      	movs	r1, #1
 800a35a:	4802      	ldr	r0, [pc, #8]	; (800a364 <HW_IPCC_BLE_SendCmd+0x10>)
 800a35c:	f7ff ff1a 	bl	800a194 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a360:	bf00      	nop
}
 800a362:	bd80      	pop	{r7, pc}
 800a364:	58000c00 	.word	0x58000c00

0800a368 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800a36c:	f7fe f8d2 	bl	8008514 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800a370:	2101      	movs	r1, #1
 800a372:	4802      	ldr	r0, [pc, #8]	; (800a37c <HW_IPCC_BLE_EvtHandler+0x14>)
 800a374:	f7ff ff00 	bl	800a178 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a378:	bf00      	nop
}
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	58000c00 	.word	0x58000c00

0800a380 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800a384:	2120      	movs	r1, #32
 800a386:	4803      	ldr	r0, [pc, #12]	; (800a394 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800a388:	f7ff fed2 	bl	800a130 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800a38c:	f7fe f8f2 	bl	8008574 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800a390:	bf00      	nop
}
 800a392:	bd80      	pop	{r7, pc}
 800a394:	58000c00 	.word	0x58000c00

0800a398 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a39c:	2102      	movs	r1, #2
 800a39e:	4802      	ldr	r0, [pc, #8]	; (800a3a8 <HW_IPCC_SYS_Init+0x10>)
 800a3a0:	f7ff fed8 	bl	800a154 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a3a4:	bf00      	nop
}
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	58000c00 	.word	0x58000c00

0800a3ac <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a3b0:	2102      	movs	r1, #2
 800a3b2:	4804      	ldr	r0, [pc, #16]	; (800a3c4 <HW_IPCC_SYS_SendCmd+0x18>)
 800a3b4:	f7ff feee 	bl	800a194 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a3b8:	2102      	movs	r1, #2
 800a3ba:	4802      	ldr	r0, [pc, #8]	; (800a3c4 <HW_IPCC_SYS_SendCmd+0x18>)
 800a3bc:	f7ff fea5 	bl	800a10a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800a3c0:	bf00      	nop
}
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	58000c00 	.word	0x58000c00

0800a3c8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800a3cc:	2102      	movs	r1, #2
 800a3ce:	4803      	ldr	r0, [pc, #12]	; (800a3dc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800a3d0:	f7ff feae 	bl	800a130 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800a3d4:	f7fe f91e 	bl	8008614 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800a3d8:	bf00      	nop
}
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	58000c00 	.word	0x58000c00

0800a3e0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800a3e4:	f7fe f92c 	bl	8008640 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800a3e8:	2102      	movs	r1, #2
 800a3ea:	4802      	ldr	r0, [pc, #8]	; (800a3f4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800a3ec:	f7ff fec4 	bl	800a178 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a3f0:	bf00      	nop
}
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	58000c00 	.word	0x58000c00

0800a3f8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800a400:	2108      	movs	r1, #8
 800a402:	480c      	ldr	r0, [pc, #48]	; (800a434 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a404:	f7ff fed5 	bl	800a1b2 <LL_C1_IPCC_IsActiveFlag_CHx>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d007      	beq.n	800a41e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800a40e:	4a0a      	ldr	r2, [pc, #40]	; (800a438 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a414:	2108      	movs	r1, #8
 800a416:	4807      	ldr	r0, [pc, #28]	; (800a434 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a418:	f7ff fe77 	bl	800a10a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800a41c:	e006      	b.n	800a42c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a422:	2108      	movs	r1, #8
 800a424:	4803      	ldr	r0, [pc, #12]	; (800a434 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800a426:	f7ff feb5 	bl	800a194 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800a42a:	bf00      	nop
}
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	58000c00 	.word	0x58000c00
 800a438:	20001344 	.word	0x20001344

0800a43c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a440:	2108      	movs	r1, #8
 800a442:	4806      	ldr	r0, [pc, #24]	; (800a45c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a444:	f7ff fe74 	bl	800a130 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800a448:	4b05      	ldr	r3, [pc, #20]	; (800a460 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800a44e:	2108      	movs	r1, #8
 800a450:	4802      	ldr	r0, [pc, #8]	; (800a45c <HW_IPCC_MM_FreeBufHandler+0x20>)
 800a452:	f7ff fe9f 	bl	800a194 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800a456:	bf00      	nop
}
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	58000c00 	.word	0x58000c00
 800a460:	20001344 	.word	0x20001344

0800a464 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a468:	2108      	movs	r1, #8
 800a46a:	4802      	ldr	r0, [pc, #8]	; (800a474 <HW_IPCC_TRACES_Init+0x10>)
 800a46c:	f7ff fe72 	bl	800a154 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800a470:	bf00      	nop
}
 800a472:	bd80      	pop	{r7, pc}
 800a474:	58000c00 	.word	0x58000c00

0800a478 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800a47c:	f7fe f988 	bl	8008790 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800a480:	2108      	movs	r1, #8
 800a482:	4802      	ldr	r0, [pc, #8]	; (800a48c <HW_IPCC_TRACES_EvtHandler+0x14>)
 800a484:	f7ff fe78 	bl	800a178 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800a488:	bf00      	nop
}
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	58000c00 	.word	0x58000c00

0800a490 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a490:	b480      	push	{r7}
 800a492:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a494:	4b05      	ldr	r3, [pc, #20]	; (800a4ac <UTIL_LPM_Init+0x1c>)
 800a496:	2200      	movs	r2, #0
 800a498:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a49a:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <UTIL_LPM_Init+0x20>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a4a0:	bf00      	nop
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	20001348 	.word	0x20001348
 800a4b0:	2000134c 	.word	0x2000134c

0800a4b4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b087      	sub	sp, #28
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a4c4:	613b      	str	r3, [r7, #16]
  return(result);
 800a4c6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a4c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4ca:	b672      	cpsid	i
}
 800a4cc:	bf00      	nop
  
  switch(state)
 800a4ce:	78fb      	ldrb	r3, [r7, #3]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d008      	beq.n	800a4e6 <UTIL_LPM_SetOffMode+0x32>
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d10e      	bne.n	800a4f6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a4d8:	4b0d      	ldr	r3, [pc, #52]	; (800a510 <UTIL_LPM_SetOffMode+0x5c>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	4a0b      	ldr	r2, [pc, #44]	; (800a510 <UTIL_LPM_SetOffMode+0x5c>)
 800a4e2:	6013      	str	r3, [r2, #0]
      break;
 800a4e4:	e008      	b.n	800a4f8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	43da      	mvns	r2, r3
 800a4ea:	4b09      	ldr	r3, [pc, #36]	; (800a510 <UTIL_LPM_SetOffMode+0x5c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	4a07      	ldr	r2, [pc, #28]	; (800a510 <UTIL_LPM_SetOffMode+0x5c>)
 800a4f2:	6013      	str	r3, [r2, #0]
      break;
 800a4f4:	e000      	b.n	800a4f8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a4f6:	bf00      	nop
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f383 8810 	msr	PRIMASK, r3
}
 800a502:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a504:	bf00      	nop
 800a506:	371c      	adds	r7, #28
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	2000134c 	.word	0x2000134c

0800a514 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b090      	sub	sp, #64	; 0x40
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a51c:	4b73      	ldr	r3, [pc, #460]	; (800a6ec <UTIL_SEQ_Run+0x1d8>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a522:	4b72      	ldr	r3, [pc, #456]	; (800a6ec <UTIL_SEQ_Run+0x1d8>)
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4013      	ands	r3, r2
 800a52a:	4a70      	ldr	r2, [pc, #448]	; (800a6ec <UTIL_SEQ_Run+0x1d8>)
 800a52c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a52e:	4b70      	ldr	r3, [pc, #448]	; (800a6f0 <UTIL_SEQ_Run+0x1dc>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a534:	4b6f      	ldr	r3, [pc, #444]	; (800a6f4 <UTIL_SEQ_Run+0x1e0>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a53a:	4b6f      	ldr	r3, [pc, #444]	; (800a6f8 <UTIL_SEQ_Run+0x1e4>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800a540:	4b6e      	ldr	r3, [pc, #440]	; (800a6fc <UTIL_SEQ_Run+0x1e8>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a546:	e08d      	b.n	800a664 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800a548:	2300      	movs	r3, #0
 800a54a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a54c:	e002      	b.n	800a554 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800a54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a550:	3301      	adds	r3, #1
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a554:	4a6a      	ldr	r2, [pc, #424]	; (800a700 <UTIL_SEQ_Run+0x1ec>)
 800a556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a558:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55e:	401a      	ands	r2, r3
 800a560:	4b62      	ldr	r3, [pc, #392]	; (800a6ec <UTIL_SEQ_Run+0x1d8>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4013      	ands	r3, r2
 800a566:	2b00      	cmp	r3, #0
 800a568:	d0f1      	beq.n	800a54e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a56a:	4a65      	ldr	r2, [pc, #404]	; (800a700 <UTIL_SEQ_Run+0x1ec>)
 800a56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a56e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	401a      	ands	r2, r3
 800a576:	4b5d      	ldr	r3, [pc, #372]	; (800a6ec <UTIL_SEQ_Run+0x1d8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4013      	ands	r3, r2
 800a57c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a57e:	4a60      	ldr	r2, [pc, #384]	; (800a700 <UTIL_SEQ_Run+0x1ec>)
 800a580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a582:	00db      	lsls	r3, r3, #3
 800a584:	4413      	add	r3, r2
 800a586:	685a      	ldr	r2, [r3, #4]
 800a588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58a:	4013      	ands	r3, r2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d106      	bne.n	800a59e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a590:	4a5b      	ldr	r2, [pc, #364]	; (800a700 <UTIL_SEQ_Run+0x1ec>)
 800a592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	4413      	add	r3, r2
 800a598:	f04f 32ff 	mov.w	r2, #4294967295
 800a59c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a59e:	4a58      	ldr	r2, [pc, #352]	; (800a700 <UTIL_SEQ_Run+0x1ec>)
 800a5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	4413      	add	r3, r2
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f000 f9b3 	bl	800a918 <SEQ_BitPosition>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	4b53      	ldr	r3, [pc, #332]	; (800a704 <UTIL_SEQ_Run+0x1f0>)
 800a5b8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a5ba:	4a51      	ldr	r2, [pc, #324]	; (800a700 <UTIL_SEQ_Run+0x1ec>)
 800a5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5be:	00db      	lsls	r3, r3, #3
 800a5c0:	4413      	add	r3, r2
 800a5c2:	685a      	ldr	r2, [r3, #4]
 800a5c4:	4b4f      	ldr	r3, [pc, #316]	; (800a704 <UTIL_SEQ_Run+0x1f0>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ce:	43db      	mvns	r3, r3
 800a5d0:	401a      	ands	r2, r3
 800a5d2:	494b      	ldr	r1, [pc, #300]	; (800a700 <UTIL_SEQ_Run+0x1ec>)
 800a5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d6:	00db      	lsls	r3, r3, #3
 800a5d8:	440b      	add	r3, r1
 800a5da:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5dc:	f3ef 8310 	mrs	r3, PRIMASK
 800a5e0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a5e2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a5e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5e6:	b672      	cpsid	i
}
 800a5e8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a5ea:	4b46      	ldr	r3, [pc, #280]	; (800a704 <UTIL_SEQ_Run+0x1f0>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f4:	43da      	mvns	r2, r3
 800a5f6:	4b3e      	ldr	r3, [pc, #248]	; (800a6f0 <UTIL_SEQ_Run+0x1dc>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	4a3c      	ldr	r2, [pc, #240]	; (800a6f0 <UTIL_SEQ_Run+0x1dc>)
 800a5fe:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a600:	2302      	movs	r3, #2
 800a602:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a604:	e013      	b.n	800a62e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a608:	3b01      	subs	r3, #1
 800a60a:	4a3d      	ldr	r2, [pc, #244]	; (800a700 <UTIL_SEQ_Run+0x1ec>)
 800a60c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a610:	4b3c      	ldr	r3, [pc, #240]	; (800a704 <UTIL_SEQ_Run+0x1f0>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2201      	movs	r2, #1
 800a616:	fa02 f303 	lsl.w	r3, r2, r3
 800a61a:	43da      	mvns	r2, r3
 800a61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61e:	3b01      	subs	r3, #1
 800a620:	400a      	ands	r2, r1
 800a622:	4937      	ldr	r1, [pc, #220]	; (800a700 <UTIL_SEQ_Run+0x1ec>)
 800a624:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a62a:	3b01      	subs	r3, #1
 800a62c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1e8      	bne.n	800a606 <UTIL_SEQ_Run+0xf2>
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	f383 8810 	msr	PRIMASK, r3
}
 800a63e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a640:	4b30      	ldr	r3, [pc, #192]	; (800a704 <UTIL_SEQ_Run+0x1f0>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a30      	ldr	r2, [pc, #192]	; (800a708 <UTIL_SEQ_Run+0x1f4>)
 800a646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a64a:	4798      	blx	r3

    local_taskset = TaskSet;
 800a64c:	4b28      	ldr	r3, [pc, #160]	; (800a6f0 <UTIL_SEQ_Run+0x1dc>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800a652:	4b28      	ldr	r3, [pc, #160]	; (800a6f4 <UTIL_SEQ_Run+0x1e0>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800a658:	4b27      	ldr	r3, [pc, #156]	; (800a6f8 <UTIL_SEQ_Run+0x1e4>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800a65e:	4b27      	ldr	r3, [pc, #156]	; (800a6fc <UTIL_SEQ_Run+0x1e8>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	401a      	ands	r2, r3
 800a66a:	4b20      	ldr	r3, [pc, #128]	; (800a6ec <UTIL_SEQ_Run+0x1d8>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4013      	ands	r3, r2
 800a670:	2b00      	cmp	r3, #0
 800a672:	d005      	beq.n	800a680 <UTIL_SEQ_Run+0x16c>
 800a674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	4013      	ands	r3, r2
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f43f af64 	beq.w	800a548 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a680:	4b20      	ldr	r3, [pc, #128]	; (800a704 <UTIL_SEQ_Run+0x1f0>)
 800a682:	f04f 32ff 	mov.w	r2, #4294967295
 800a686:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a688:	f000 f938 	bl	800a8fc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a68c:	f3ef 8310 	mrs	r3, PRIMASK
 800a690:	613b      	str	r3, [r7, #16]
  return(result);
 800a692:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a694:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a696:	b672      	cpsid	i
}
 800a698:	bf00      	nop
  local_taskset = TaskSet;
 800a69a:	4b15      	ldr	r3, [pc, #84]	; (800a6f0 <UTIL_SEQ_Run+0x1dc>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800a6a0:	4b14      	ldr	r3, [pc, #80]	; (800a6f4 <UTIL_SEQ_Run+0x1e0>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800a6a6:	4b14      	ldr	r3, [pc, #80]	; (800a6f8 <UTIL_SEQ_Run+0x1e4>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a6ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	401a      	ands	r2, r3
 800a6b2:	4b0e      	ldr	r3, [pc, #56]	; (800a6ec <UTIL_SEQ_Run+0x1d8>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d107      	bne.n	800a6cc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800a6bc:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <UTIL_SEQ_Run+0x1e8>)
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800a6c8:	f7f6 fe7a 	bl	80013c0 <UTIL_SEQ_Idle>
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f383 8810 	msr	PRIMASK, r3
}
 800a6d6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800a6d8:	f000 f917 	bl	800a90a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a6dc:	4a03      	ldr	r2, [pc, #12]	; (800a6ec <UTIL_SEQ_Run+0x1d8>)
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	6013      	str	r3, [r2, #0]

  return;
 800a6e2:	bf00      	nop
}
 800a6e4:	3740      	adds	r7, #64	; 0x40
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	20000030 	.word	0x20000030
 800a6f0:	20001350 	.word	0x20001350
 800a6f4:	20001354 	.word	0x20001354
 800a6f8:	2000002c 	.word	0x2000002c
 800a6fc:	20001358 	.word	0x20001358
 800a700:	200013e0 	.word	0x200013e0
 800a704:	2000135c 	.word	0x2000135c
 800a708:	20001360 	.word	0x20001360

0800a70c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b088      	sub	sp, #32
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a718:	f3ef 8310 	mrs	r3, PRIMASK
 800a71c:	617b      	str	r3, [r7, #20]
  return(result);
 800a71e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a722:	b672      	cpsid	i
}
 800a724:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a726:	68f8      	ldr	r0, [r7, #12]
 800a728:	f000 f8f6 	bl	800a918 <SEQ_BitPosition>
 800a72c:	4603      	mov	r3, r0
 800a72e:	4619      	mov	r1, r3
 800a730:	4a06      	ldr	r2, [pc, #24]	; (800a74c <UTIL_SEQ_RegTask+0x40>)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	f383 8810 	msr	PRIMASK, r3
}
 800a742:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a744:	bf00      	nop
}
 800a746:	3720      	adds	r7, #32
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}
 800a74c:	20001360 	.word	0x20001360

0800a750 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a750:	b480      	push	{r7}
 800a752:	b087      	sub	sp, #28
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a75a:	f3ef 8310 	mrs	r3, PRIMASK
 800a75e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a760:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a762:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a764:	b672      	cpsid	i
}
 800a766:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a768:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <UTIL_SEQ_SetTask+0x50>)
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4313      	orrs	r3, r2
 800a770:	4a0b      	ldr	r2, [pc, #44]	; (800a7a0 <UTIL_SEQ_SetTask+0x50>)
 800a772:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a774:	4a0b      	ldr	r2, [pc, #44]	; (800a7a4 <UTIL_SEQ_SetTask+0x54>)
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	431a      	orrs	r2, r3
 800a780:	4908      	ldr	r1, [pc, #32]	; (800a7a4 <UTIL_SEQ_SetTask+0x54>)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	f383 8810 	msr	PRIMASK, r3
}
 800a792:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a794:	bf00      	nop
}
 800a796:	371c      	adds	r7, #28
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	20001350 	.word	0x20001350
 800a7a4:	200013e0 	.word	0x200013e0

0800a7a8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7b0:	f3ef 8310 	mrs	r3, PRIMASK
 800a7b4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a7b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7ba:	b672      	cpsid	i
}
 800a7bc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	43da      	mvns	r2, r3
 800a7c2:	4b08      	ldr	r3, [pc, #32]	; (800a7e4 <UTIL_SEQ_PauseTask+0x3c>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	4a06      	ldr	r2, [pc, #24]	; (800a7e4 <UTIL_SEQ_PauseTask+0x3c>)
 800a7ca:	6013      	str	r3, [r2, #0]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f383 8810 	msr	PRIMASK, r3
}
 800a7d6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a7d8:	bf00      	nop
}
 800a7da:	371c      	adds	r7, #28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	2000002c 	.word	0x2000002c

0800a7e8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b087      	sub	sp, #28
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a7f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a7f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7fa:	b672      	cpsid	i
}
 800a7fc:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a7fe:	4b09      	ldr	r3, [pc, #36]	; (800a824 <UTIL_SEQ_ResumeTask+0x3c>)
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4313      	orrs	r3, r2
 800a806:	4a07      	ldr	r2, [pc, #28]	; (800a824 <UTIL_SEQ_ResumeTask+0x3c>)
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f383 8810 	msr	PRIMASK, r3
}
 800a814:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a816:	bf00      	nop
}
 800a818:	371c      	adds	r7, #28
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	2000002c 	.word	0x2000002c

0800a828 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a828:	b480      	push	{r7}
 800a82a:	b087      	sub	sp, #28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a830:	f3ef 8310 	mrs	r3, PRIMASK
 800a834:	60fb      	str	r3, [r7, #12]
  return(result);
 800a836:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a838:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a83a:	b672      	cpsid	i
}
 800a83c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a83e:	4b09      	ldr	r3, [pc, #36]	; (800a864 <UTIL_SEQ_SetEvt+0x3c>)
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4313      	orrs	r3, r2
 800a846:	4a07      	ldr	r2, [pc, #28]	; (800a864 <UTIL_SEQ_SetEvt+0x3c>)
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f383 8810 	msr	PRIMASK, r3
}
 800a854:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a856:	bf00      	nop
}
 800a858:	371c      	adds	r7, #28
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	20001354 	.word	0x20001354

0800a868 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b088      	sub	sp, #32
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a870:	4b1f      	ldr	r3, [pc, #124]	; (800a8f0 <UTIL_SEQ_WaitEvt+0x88>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a876:	4b1e      	ldr	r3, [pc, #120]	; (800a8f0 <UTIL_SEQ_WaitEvt+0x88>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87e:	d102      	bne.n	800a886 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800a880:	2300      	movs	r3, #0
 800a882:	61fb      	str	r3, [r7, #28]
 800a884:	e005      	b.n	800a892 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800a886:	4b1a      	ldr	r3, [pc, #104]	; (800a8f0 <UTIL_SEQ_WaitEvt+0x88>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2201      	movs	r2, #1
 800a88c:	fa02 f303 	lsl.w	r3, r2, r3
 800a890:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a892:	4b18      	ldr	r3, [pc, #96]	; (800a8f4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a898:	4a16      	ldr	r2, [pc, #88]	; (800a8f4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800a89e:	e003      	b.n	800a8a8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800a8a0:	6879      	ldr	r1, [r7, #4]
 800a8a2:	69f8      	ldr	r0, [r7, #28]
 800a8a4:	f7f6 fd93 	bl	80013ce <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800a8a8:	4b13      	ldr	r3, [pc, #76]	; (800a8f8 <UTIL_SEQ_WaitEvt+0x90>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0f5      	beq.n	800a8a0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a8b4:	4a0e      	ldr	r2, [pc, #56]	; (800a8f0 <UTIL_SEQ_WaitEvt+0x88>)
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8ba:	f3ef 8310 	mrs	r3, PRIMASK
 800a8be:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8c0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a8c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8c4:	b672      	cpsid	i
}
 800a8c6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	43da      	mvns	r2, r3
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <UTIL_SEQ_WaitEvt+0x90>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	4a09      	ldr	r2, [pc, #36]	; (800a8f8 <UTIL_SEQ_WaitEvt+0x90>)
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f383 8810 	msr	PRIMASK, r3
}
 800a8e0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a8e2:	4a04      	ldr	r2, [pc, #16]	; (800a8f4 <UTIL_SEQ_WaitEvt+0x8c>)
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	6013      	str	r3, [r2, #0]
  return;
 800a8e8:	bf00      	nop
}
 800a8ea:	3720      	adds	r7, #32
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	2000135c 	.word	0x2000135c
 800a8f4:	20001358 	.word	0x20001358
 800a8f8:	20001354 	.word	0x20001354

0800a8fc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a900:	bf00      	nop
}
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a90a:	b480      	push	{r7}
 800a90c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a90e:	bf00      	nop
}
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	0c1b      	lsrs	r3, r3, #16
 800a92c:	041b      	lsls	r3, r3, #16
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d104      	bne.n	800a93c <SEQ_BitPosition+0x24>
 800a932:	2310      	movs	r3, #16
 800a934:	73fb      	strb	r3, [r7, #15]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	041b      	lsls	r3, r3, #16
 800a93a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a942:	2b00      	cmp	r3, #0
 800a944:	d105      	bne.n	800a952 <SEQ_BitPosition+0x3a>
 800a946:	7bfb      	ldrb	r3, [r7, #15]
 800a948:	3308      	adds	r3, #8
 800a94a:	73fb      	strb	r3, [r7, #15]
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	021b      	lsls	r3, r3, #8
 800a950:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d105      	bne.n	800a968 <SEQ_BitPosition+0x50>
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
 800a95e:	3304      	adds	r3, #4
 800a960:	73fb      	strb	r3, [r7, #15]
 800a962:	68bb      	ldr	r3, [r7, #8]
 800a964:	011b      	lsls	r3, r3, #4
 800a966:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	0f1b      	lsrs	r3, r3, #28
 800a96c:	4a07      	ldr	r2, [pc, #28]	; (800a98c <SEQ_BitPosition+0x74>)
 800a96e:	5cd2      	ldrb	r2, [r2, r3]
 800a970:	7bfb      	ldrb	r3, [r7, #15]
 800a972:	4413      	add	r3, r2
 800a974:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	f1c3 031f 	rsb	r3, r3, #31
 800a97c:	b2db      	uxtb	r3, r3
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	0800d05c 	.word	0x0800d05c

0800a990 <__errno>:
 800a990:	4b01      	ldr	r3, [pc, #4]	; (800a998 <__errno+0x8>)
 800a992:	6818      	ldr	r0, [r3, #0]
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	20000034 	.word	0x20000034

0800a99c <__libc_init_array>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	4d0d      	ldr	r5, [pc, #52]	; (800a9d4 <__libc_init_array+0x38>)
 800a9a0:	4c0d      	ldr	r4, [pc, #52]	; (800a9d8 <__libc_init_array+0x3c>)
 800a9a2:	1b64      	subs	r4, r4, r5
 800a9a4:	10a4      	asrs	r4, r4, #2
 800a9a6:	2600      	movs	r6, #0
 800a9a8:	42a6      	cmp	r6, r4
 800a9aa:	d109      	bne.n	800a9c0 <__libc_init_array+0x24>
 800a9ac:	4d0b      	ldr	r5, [pc, #44]	; (800a9dc <__libc_init_array+0x40>)
 800a9ae:	4c0c      	ldr	r4, [pc, #48]	; (800a9e0 <__libc_init_array+0x44>)
 800a9b0:	f001 f8b0 	bl	800bb14 <_init>
 800a9b4:	1b64      	subs	r4, r4, r5
 800a9b6:	10a4      	asrs	r4, r4, #2
 800a9b8:	2600      	movs	r6, #0
 800a9ba:	42a6      	cmp	r6, r4
 800a9bc:	d105      	bne.n	800a9ca <__libc_init_array+0x2e>
 800a9be:	bd70      	pop	{r4, r5, r6, pc}
 800a9c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9c4:	4798      	blx	r3
 800a9c6:	3601      	adds	r6, #1
 800a9c8:	e7ee      	b.n	800a9a8 <__libc_init_array+0xc>
 800a9ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800a9ce:	4798      	blx	r3
 800a9d0:	3601      	adds	r6, #1
 800a9d2:	e7f2      	b.n	800a9ba <__libc_init_array+0x1e>
 800a9d4:	0800d10c 	.word	0x0800d10c
 800a9d8:	0800d10c 	.word	0x0800d10c
 800a9dc:	0800d10c 	.word	0x0800d10c
 800a9e0:	0800d110 	.word	0x0800d110

0800a9e4 <memcpy>:
 800a9e4:	440a      	add	r2, r1
 800a9e6:	4291      	cmp	r1, r2
 800a9e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9ec:	d100      	bne.n	800a9f0 <memcpy+0xc>
 800a9ee:	4770      	bx	lr
 800a9f0:	b510      	push	{r4, lr}
 800a9f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9fa:	4291      	cmp	r1, r2
 800a9fc:	d1f9      	bne.n	800a9f2 <memcpy+0xe>
 800a9fe:	bd10      	pop	{r4, pc}

0800aa00 <memset>:
 800aa00:	4402      	add	r2, r0
 800aa02:	4603      	mov	r3, r0
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d100      	bne.n	800aa0a <memset+0xa>
 800aa08:	4770      	bx	lr
 800aa0a:	f803 1b01 	strb.w	r1, [r3], #1
 800aa0e:	e7f9      	b.n	800aa04 <memset+0x4>

0800aa10 <iprintf>:
 800aa10:	b40f      	push	{r0, r1, r2, r3}
 800aa12:	4b0a      	ldr	r3, [pc, #40]	; (800aa3c <iprintf+0x2c>)
 800aa14:	b513      	push	{r0, r1, r4, lr}
 800aa16:	681c      	ldr	r4, [r3, #0]
 800aa18:	b124      	cbz	r4, 800aa24 <iprintf+0x14>
 800aa1a:	69a3      	ldr	r3, [r4, #24]
 800aa1c:	b913      	cbnz	r3, 800aa24 <iprintf+0x14>
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f000 fa88 	bl	800af34 <__sinit>
 800aa24:	ab05      	add	r3, sp, #20
 800aa26:	9a04      	ldr	r2, [sp, #16]
 800aa28:	68a1      	ldr	r1, [r4, #8]
 800aa2a:	9301      	str	r3, [sp, #4]
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f000 fc91 	bl	800b354 <_vfiprintf_r>
 800aa32:	b002      	add	sp, #8
 800aa34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa38:	b004      	add	sp, #16
 800aa3a:	4770      	bx	lr
 800aa3c:	20000034 	.word	0x20000034

0800aa40 <putchar>:
 800aa40:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <putchar+0x28>)
 800aa42:	b513      	push	{r0, r1, r4, lr}
 800aa44:	681c      	ldr	r4, [r3, #0]
 800aa46:	4601      	mov	r1, r0
 800aa48:	b134      	cbz	r4, 800aa58 <putchar+0x18>
 800aa4a:	69a3      	ldr	r3, [r4, #24]
 800aa4c:	b923      	cbnz	r3, 800aa58 <putchar+0x18>
 800aa4e:	9001      	str	r0, [sp, #4]
 800aa50:	4620      	mov	r0, r4
 800aa52:	f000 fa6f 	bl	800af34 <__sinit>
 800aa56:	9901      	ldr	r1, [sp, #4]
 800aa58:	68a2      	ldr	r2, [r4, #8]
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	b002      	add	sp, #8
 800aa5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa62:	f000 bf3b 	b.w	800b8dc <_putc_r>
 800aa66:	bf00      	nop
 800aa68:	20000034 	.word	0x20000034

0800aa6c <_puts_r>:
 800aa6c:	b570      	push	{r4, r5, r6, lr}
 800aa6e:	460e      	mov	r6, r1
 800aa70:	4605      	mov	r5, r0
 800aa72:	b118      	cbz	r0, 800aa7c <_puts_r+0x10>
 800aa74:	6983      	ldr	r3, [r0, #24]
 800aa76:	b90b      	cbnz	r3, 800aa7c <_puts_r+0x10>
 800aa78:	f000 fa5c 	bl	800af34 <__sinit>
 800aa7c:	69ab      	ldr	r3, [r5, #24]
 800aa7e:	68ac      	ldr	r4, [r5, #8]
 800aa80:	b913      	cbnz	r3, 800aa88 <_puts_r+0x1c>
 800aa82:	4628      	mov	r0, r5
 800aa84:	f000 fa56 	bl	800af34 <__sinit>
 800aa88:	4b2c      	ldr	r3, [pc, #176]	; (800ab3c <_puts_r+0xd0>)
 800aa8a:	429c      	cmp	r4, r3
 800aa8c:	d120      	bne.n	800aad0 <_puts_r+0x64>
 800aa8e:	686c      	ldr	r4, [r5, #4]
 800aa90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa92:	07db      	lsls	r3, r3, #31
 800aa94:	d405      	bmi.n	800aaa2 <_puts_r+0x36>
 800aa96:	89a3      	ldrh	r3, [r4, #12]
 800aa98:	0598      	lsls	r0, r3, #22
 800aa9a:	d402      	bmi.n	800aaa2 <_puts_r+0x36>
 800aa9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa9e:	f000 fae7 	bl	800b070 <__retarget_lock_acquire_recursive>
 800aaa2:	89a3      	ldrh	r3, [r4, #12]
 800aaa4:	0719      	lsls	r1, r3, #28
 800aaa6:	d51d      	bpl.n	800aae4 <_puts_r+0x78>
 800aaa8:	6923      	ldr	r3, [r4, #16]
 800aaaa:	b1db      	cbz	r3, 800aae4 <_puts_r+0x78>
 800aaac:	3e01      	subs	r6, #1
 800aaae:	68a3      	ldr	r3, [r4, #8]
 800aab0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aab4:	3b01      	subs	r3, #1
 800aab6:	60a3      	str	r3, [r4, #8]
 800aab8:	bb39      	cbnz	r1, 800ab0a <_puts_r+0x9e>
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	da38      	bge.n	800ab30 <_puts_r+0xc4>
 800aabe:	4622      	mov	r2, r4
 800aac0:	210a      	movs	r1, #10
 800aac2:	4628      	mov	r0, r5
 800aac4:	f000 f85c 	bl	800ab80 <__swbuf_r>
 800aac8:	3001      	adds	r0, #1
 800aaca:	d011      	beq.n	800aaf0 <_puts_r+0x84>
 800aacc:	250a      	movs	r5, #10
 800aace:	e011      	b.n	800aaf4 <_puts_r+0x88>
 800aad0:	4b1b      	ldr	r3, [pc, #108]	; (800ab40 <_puts_r+0xd4>)
 800aad2:	429c      	cmp	r4, r3
 800aad4:	d101      	bne.n	800aada <_puts_r+0x6e>
 800aad6:	68ac      	ldr	r4, [r5, #8]
 800aad8:	e7da      	b.n	800aa90 <_puts_r+0x24>
 800aada:	4b1a      	ldr	r3, [pc, #104]	; (800ab44 <_puts_r+0xd8>)
 800aadc:	429c      	cmp	r4, r3
 800aade:	bf08      	it	eq
 800aae0:	68ec      	ldreq	r4, [r5, #12]
 800aae2:	e7d5      	b.n	800aa90 <_puts_r+0x24>
 800aae4:	4621      	mov	r1, r4
 800aae6:	4628      	mov	r0, r5
 800aae8:	f000 f89c 	bl	800ac24 <__swsetup_r>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d0dd      	beq.n	800aaac <_puts_r+0x40>
 800aaf0:	f04f 35ff 	mov.w	r5, #4294967295
 800aaf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaf6:	07da      	lsls	r2, r3, #31
 800aaf8:	d405      	bmi.n	800ab06 <_puts_r+0x9a>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	059b      	lsls	r3, r3, #22
 800aafe:	d402      	bmi.n	800ab06 <_puts_r+0x9a>
 800ab00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab02:	f000 fab6 	bl	800b072 <__retarget_lock_release_recursive>
 800ab06:	4628      	mov	r0, r5
 800ab08:	bd70      	pop	{r4, r5, r6, pc}
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	da04      	bge.n	800ab18 <_puts_r+0xac>
 800ab0e:	69a2      	ldr	r2, [r4, #24]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	dc06      	bgt.n	800ab22 <_puts_r+0xb6>
 800ab14:	290a      	cmp	r1, #10
 800ab16:	d004      	beq.n	800ab22 <_puts_r+0xb6>
 800ab18:	6823      	ldr	r3, [r4, #0]
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	6022      	str	r2, [r4, #0]
 800ab1e:	7019      	strb	r1, [r3, #0]
 800ab20:	e7c5      	b.n	800aaae <_puts_r+0x42>
 800ab22:	4622      	mov	r2, r4
 800ab24:	4628      	mov	r0, r5
 800ab26:	f000 f82b 	bl	800ab80 <__swbuf_r>
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	d1bf      	bne.n	800aaae <_puts_r+0x42>
 800ab2e:	e7df      	b.n	800aaf0 <_puts_r+0x84>
 800ab30:	6823      	ldr	r3, [r4, #0]
 800ab32:	250a      	movs	r5, #10
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	6022      	str	r2, [r4, #0]
 800ab38:	701d      	strb	r5, [r3, #0]
 800ab3a:	e7db      	b.n	800aaf4 <_puts_r+0x88>
 800ab3c:	0800d090 	.word	0x0800d090
 800ab40:	0800d0b0 	.word	0x0800d0b0
 800ab44:	0800d070 	.word	0x0800d070

0800ab48 <puts>:
 800ab48:	4b02      	ldr	r3, [pc, #8]	; (800ab54 <puts+0xc>)
 800ab4a:	4601      	mov	r1, r0
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	f7ff bf8d 	b.w	800aa6c <_puts_r>
 800ab52:	bf00      	nop
 800ab54:	20000034 	.word	0x20000034

0800ab58 <strrchr>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	460c      	mov	r4, r1
 800ab5e:	b969      	cbnz	r1, 800ab7c <strrchr+0x24>
 800ab60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab64:	f000 bf55 	b.w	800ba12 <strchr>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	4605      	mov	r5, r0
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 ff4f 	bl	800ba12 <strchr>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	d1f7      	bne.n	800ab68 <strrchr+0x10>
 800ab78:	4628      	mov	r0, r5
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	2500      	movs	r5, #0
 800ab7e:	e7f5      	b.n	800ab6c <strrchr+0x14>

0800ab80 <__swbuf_r>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	460e      	mov	r6, r1
 800ab84:	4614      	mov	r4, r2
 800ab86:	4605      	mov	r5, r0
 800ab88:	b118      	cbz	r0, 800ab92 <__swbuf_r+0x12>
 800ab8a:	6983      	ldr	r3, [r0, #24]
 800ab8c:	b90b      	cbnz	r3, 800ab92 <__swbuf_r+0x12>
 800ab8e:	f000 f9d1 	bl	800af34 <__sinit>
 800ab92:	4b21      	ldr	r3, [pc, #132]	; (800ac18 <__swbuf_r+0x98>)
 800ab94:	429c      	cmp	r4, r3
 800ab96:	d12b      	bne.n	800abf0 <__swbuf_r+0x70>
 800ab98:	686c      	ldr	r4, [r5, #4]
 800ab9a:	69a3      	ldr	r3, [r4, #24]
 800ab9c:	60a3      	str	r3, [r4, #8]
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	071a      	lsls	r2, r3, #28
 800aba2:	d52f      	bpl.n	800ac04 <__swbuf_r+0x84>
 800aba4:	6923      	ldr	r3, [r4, #16]
 800aba6:	b36b      	cbz	r3, 800ac04 <__swbuf_r+0x84>
 800aba8:	6923      	ldr	r3, [r4, #16]
 800abaa:	6820      	ldr	r0, [r4, #0]
 800abac:	1ac0      	subs	r0, r0, r3
 800abae:	6963      	ldr	r3, [r4, #20]
 800abb0:	b2f6      	uxtb	r6, r6
 800abb2:	4283      	cmp	r3, r0
 800abb4:	4637      	mov	r7, r6
 800abb6:	dc04      	bgt.n	800abc2 <__swbuf_r+0x42>
 800abb8:	4621      	mov	r1, r4
 800abba:	4628      	mov	r0, r5
 800abbc:	f000 f926 	bl	800ae0c <_fflush_r>
 800abc0:	bb30      	cbnz	r0, 800ac10 <__swbuf_r+0x90>
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	3b01      	subs	r3, #1
 800abc6:	60a3      	str	r3, [r4, #8]
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	6022      	str	r2, [r4, #0]
 800abce:	701e      	strb	r6, [r3, #0]
 800abd0:	6963      	ldr	r3, [r4, #20]
 800abd2:	3001      	adds	r0, #1
 800abd4:	4283      	cmp	r3, r0
 800abd6:	d004      	beq.n	800abe2 <__swbuf_r+0x62>
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	07db      	lsls	r3, r3, #31
 800abdc:	d506      	bpl.n	800abec <__swbuf_r+0x6c>
 800abde:	2e0a      	cmp	r6, #10
 800abe0:	d104      	bne.n	800abec <__swbuf_r+0x6c>
 800abe2:	4621      	mov	r1, r4
 800abe4:	4628      	mov	r0, r5
 800abe6:	f000 f911 	bl	800ae0c <_fflush_r>
 800abea:	b988      	cbnz	r0, 800ac10 <__swbuf_r+0x90>
 800abec:	4638      	mov	r0, r7
 800abee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abf0:	4b0a      	ldr	r3, [pc, #40]	; (800ac1c <__swbuf_r+0x9c>)
 800abf2:	429c      	cmp	r4, r3
 800abf4:	d101      	bne.n	800abfa <__swbuf_r+0x7a>
 800abf6:	68ac      	ldr	r4, [r5, #8]
 800abf8:	e7cf      	b.n	800ab9a <__swbuf_r+0x1a>
 800abfa:	4b09      	ldr	r3, [pc, #36]	; (800ac20 <__swbuf_r+0xa0>)
 800abfc:	429c      	cmp	r4, r3
 800abfe:	bf08      	it	eq
 800ac00:	68ec      	ldreq	r4, [r5, #12]
 800ac02:	e7ca      	b.n	800ab9a <__swbuf_r+0x1a>
 800ac04:	4621      	mov	r1, r4
 800ac06:	4628      	mov	r0, r5
 800ac08:	f000 f80c 	bl	800ac24 <__swsetup_r>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d0cb      	beq.n	800aba8 <__swbuf_r+0x28>
 800ac10:	f04f 37ff 	mov.w	r7, #4294967295
 800ac14:	e7ea      	b.n	800abec <__swbuf_r+0x6c>
 800ac16:	bf00      	nop
 800ac18:	0800d090 	.word	0x0800d090
 800ac1c:	0800d0b0 	.word	0x0800d0b0
 800ac20:	0800d070 	.word	0x0800d070

0800ac24 <__swsetup_r>:
 800ac24:	4b32      	ldr	r3, [pc, #200]	; (800acf0 <__swsetup_r+0xcc>)
 800ac26:	b570      	push	{r4, r5, r6, lr}
 800ac28:	681d      	ldr	r5, [r3, #0]
 800ac2a:	4606      	mov	r6, r0
 800ac2c:	460c      	mov	r4, r1
 800ac2e:	b125      	cbz	r5, 800ac3a <__swsetup_r+0x16>
 800ac30:	69ab      	ldr	r3, [r5, #24]
 800ac32:	b913      	cbnz	r3, 800ac3a <__swsetup_r+0x16>
 800ac34:	4628      	mov	r0, r5
 800ac36:	f000 f97d 	bl	800af34 <__sinit>
 800ac3a:	4b2e      	ldr	r3, [pc, #184]	; (800acf4 <__swsetup_r+0xd0>)
 800ac3c:	429c      	cmp	r4, r3
 800ac3e:	d10f      	bne.n	800ac60 <__swsetup_r+0x3c>
 800ac40:	686c      	ldr	r4, [r5, #4]
 800ac42:	89a3      	ldrh	r3, [r4, #12]
 800ac44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac48:	0719      	lsls	r1, r3, #28
 800ac4a:	d42c      	bmi.n	800aca6 <__swsetup_r+0x82>
 800ac4c:	06dd      	lsls	r5, r3, #27
 800ac4e:	d411      	bmi.n	800ac74 <__swsetup_r+0x50>
 800ac50:	2309      	movs	r3, #9
 800ac52:	6033      	str	r3, [r6, #0]
 800ac54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac58:	81a3      	strh	r3, [r4, #12]
 800ac5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac5e:	e03e      	b.n	800acde <__swsetup_r+0xba>
 800ac60:	4b25      	ldr	r3, [pc, #148]	; (800acf8 <__swsetup_r+0xd4>)
 800ac62:	429c      	cmp	r4, r3
 800ac64:	d101      	bne.n	800ac6a <__swsetup_r+0x46>
 800ac66:	68ac      	ldr	r4, [r5, #8]
 800ac68:	e7eb      	b.n	800ac42 <__swsetup_r+0x1e>
 800ac6a:	4b24      	ldr	r3, [pc, #144]	; (800acfc <__swsetup_r+0xd8>)
 800ac6c:	429c      	cmp	r4, r3
 800ac6e:	bf08      	it	eq
 800ac70:	68ec      	ldreq	r4, [r5, #12]
 800ac72:	e7e6      	b.n	800ac42 <__swsetup_r+0x1e>
 800ac74:	0758      	lsls	r0, r3, #29
 800ac76:	d512      	bpl.n	800ac9e <__swsetup_r+0x7a>
 800ac78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac7a:	b141      	cbz	r1, 800ac8e <__swsetup_r+0x6a>
 800ac7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac80:	4299      	cmp	r1, r3
 800ac82:	d002      	beq.n	800ac8a <__swsetup_r+0x66>
 800ac84:	4630      	mov	r0, r6
 800ac86:	f000 fa5b 	bl	800b140 <_free_r>
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	6363      	str	r3, [r4, #52]	; 0x34
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac94:	81a3      	strh	r3, [r4, #12]
 800ac96:	2300      	movs	r3, #0
 800ac98:	6063      	str	r3, [r4, #4]
 800ac9a:	6923      	ldr	r3, [r4, #16]
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	f043 0308 	orr.w	r3, r3, #8
 800aca4:	81a3      	strh	r3, [r4, #12]
 800aca6:	6923      	ldr	r3, [r4, #16]
 800aca8:	b94b      	cbnz	r3, 800acbe <__swsetup_r+0x9a>
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800acb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800acb4:	d003      	beq.n	800acbe <__swsetup_r+0x9a>
 800acb6:	4621      	mov	r1, r4
 800acb8:	4630      	mov	r0, r6
 800acba:	f000 fa01 	bl	800b0c0 <__smakebuf_r>
 800acbe:	89a0      	ldrh	r0, [r4, #12]
 800acc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acc4:	f010 0301 	ands.w	r3, r0, #1
 800acc8:	d00a      	beq.n	800ace0 <__swsetup_r+0xbc>
 800acca:	2300      	movs	r3, #0
 800accc:	60a3      	str	r3, [r4, #8]
 800acce:	6963      	ldr	r3, [r4, #20]
 800acd0:	425b      	negs	r3, r3
 800acd2:	61a3      	str	r3, [r4, #24]
 800acd4:	6923      	ldr	r3, [r4, #16]
 800acd6:	b943      	cbnz	r3, 800acea <__swsetup_r+0xc6>
 800acd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acdc:	d1ba      	bne.n	800ac54 <__swsetup_r+0x30>
 800acde:	bd70      	pop	{r4, r5, r6, pc}
 800ace0:	0781      	lsls	r1, r0, #30
 800ace2:	bf58      	it	pl
 800ace4:	6963      	ldrpl	r3, [r4, #20]
 800ace6:	60a3      	str	r3, [r4, #8]
 800ace8:	e7f4      	b.n	800acd4 <__swsetup_r+0xb0>
 800acea:	2000      	movs	r0, #0
 800acec:	e7f7      	b.n	800acde <__swsetup_r+0xba>
 800acee:	bf00      	nop
 800acf0:	20000034 	.word	0x20000034
 800acf4:	0800d090 	.word	0x0800d090
 800acf8:	0800d0b0 	.word	0x0800d0b0
 800acfc:	0800d070 	.word	0x0800d070

0800ad00 <__sflush_r>:
 800ad00:	898a      	ldrh	r2, [r1, #12]
 800ad02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad06:	4605      	mov	r5, r0
 800ad08:	0710      	lsls	r0, r2, #28
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	d458      	bmi.n	800adc0 <__sflush_r+0xc0>
 800ad0e:	684b      	ldr	r3, [r1, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	dc05      	bgt.n	800ad20 <__sflush_r+0x20>
 800ad14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	dc02      	bgt.n	800ad20 <__sflush_r+0x20>
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad22:	2e00      	cmp	r6, #0
 800ad24:	d0f9      	beq.n	800ad1a <__sflush_r+0x1a>
 800ad26:	2300      	movs	r3, #0
 800ad28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad2c:	682f      	ldr	r7, [r5, #0]
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	d032      	beq.n	800ad98 <__sflush_r+0x98>
 800ad32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	075a      	lsls	r2, r3, #29
 800ad38:	d505      	bpl.n	800ad46 <__sflush_r+0x46>
 800ad3a:	6863      	ldr	r3, [r4, #4]
 800ad3c:	1ac0      	subs	r0, r0, r3
 800ad3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad40:	b10b      	cbz	r3, 800ad46 <__sflush_r+0x46>
 800ad42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad44:	1ac0      	subs	r0, r0, r3
 800ad46:	2300      	movs	r3, #0
 800ad48:	4602      	mov	r2, r0
 800ad4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad4c:	6a21      	ldr	r1, [r4, #32]
 800ad4e:	4628      	mov	r0, r5
 800ad50:	47b0      	blx	r6
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	89a3      	ldrh	r3, [r4, #12]
 800ad56:	d106      	bne.n	800ad66 <__sflush_r+0x66>
 800ad58:	6829      	ldr	r1, [r5, #0]
 800ad5a:	291d      	cmp	r1, #29
 800ad5c:	d82c      	bhi.n	800adb8 <__sflush_r+0xb8>
 800ad5e:	4a2a      	ldr	r2, [pc, #168]	; (800ae08 <__sflush_r+0x108>)
 800ad60:	40ca      	lsrs	r2, r1
 800ad62:	07d6      	lsls	r6, r2, #31
 800ad64:	d528      	bpl.n	800adb8 <__sflush_r+0xb8>
 800ad66:	2200      	movs	r2, #0
 800ad68:	6062      	str	r2, [r4, #4]
 800ad6a:	04d9      	lsls	r1, r3, #19
 800ad6c:	6922      	ldr	r2, [r4, #16]
 800ad6e:	6022      	str	r2, [r4, #0]
 800ad70:	d504      	bpl.n	800ad7c <__sflush_r+0x7c>
 800ad72:	1c42      	adds	r2, r0, #1
 800ad74:	d101      	bne.n	800ad7a <__sflush_r+0x7a>
 800ad76:	682b      	ldr	r3, [r5, #0]
 800ad78:	b903      	cbnz	r3, 800ad7c <__sflush_r+0x7c>
 800ad7a:	6560      	str	r0, [r4, #84]	; 0x54
 800ad7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad7e:	602f      	str	r7, [r5, #0]
 800ad80:	2900      	cmp	r1, #0
 800ad82:	d0ca      	beq.n	800ad1a <__sflush_r+0x1a>
 800ad84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad88:	4299      	cmp	r1, r3
 800ad8a:	d002      	beq.n	800ad92 <__sflush_r+0x92>
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f000 f9d7 	bl	800b140 <_free_r>
 800ad92:	2000      	movs	r0, #0
 800ad94:	6360      	str	r0, [r4, #52]	; 0x34
 800ad96:	e7c1      	b.n	800ad1c <__sflush_r+0x1c>
 800ad98:	6a21      	ldr	r1, [r4, #32]
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b0      	blx	r6
 800ada0:	1c41      	adds	r1, r0, #1
 800ada2:	d1c7      	bne.n	800ad34 <__sflush_r+0x34>
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d0c4      	beq.n	800ad34 <__sflush_r+0x34>
 800adaa:	2b1d      	cmp	r3, #29
 800adac:	d001      	beq.n	800adb2 <__sflush_r+0xb2>
 800adae:	2b16      	cmp	r3, #22
 800adb0:	d101      	bne.n	800adb6 <__sflush_r+0xb6>
 800adb2:	602f      	str	r7, [r5, #0]
 800adb4:	e7b1      	b.n	800ad1a <__sflush_r+0x1a>
 800adb6:	89a3      	ldrh	r3, [r4, #12]
 800adb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adbc:	81a3      	strh	r3, [r4, #12]
 800adbe:	e7ad      	b.n	800ad1c <__sflush_r+0x1c>
 800adc0:	690f      	ldr	r7, [r1, #16]
 800adc2:	2f00      	cmp	r7, #0
 800adc4:	d0a9      	beq.n	800ad1a <__sflush_r+0x1a>
 800adc6:	0793      	lsls	r3, r2, #30
 800adc8:	680e      	ldr	r6, [r1, #0]
 800adca:	bf08      	it	eq
 800adcc:	694b      	ldreq	r3, [r1, #20]
 800adce:	600f      	str	r7, [r1, #0]
 800add0:	bf18      	it	ne
 800add2:	2300      	movne	r3, #0
 800add4:	eba6 0807 	sub.w	r8, r6, r7
 800add8:	608b      	str	r3, [r1, #8]
 800adda:	f1b8 0f00 	cmp.w	r8, #0
 800adde:	dd9c      	ble.n	800ad1a <__sflush_r+0x1a>
 800ade0:	6a21      	ldr	r1, [r4, #32]
 800ade2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ade4:	4643      	mov	r3, r8
 800ade6:	463a      	mov	r2, r7
 800ade8:	4628      	mov	r0, r5
 800adea:	47b0      	blx	r6
 800adec:	2800      	cmp	r0, #0
 800adee:	dc06      	bgt.n	800adfe <__sflush_r+0xfe>
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	e78e      	b.n	800ad1c <__sflush_r+0x1c>
 800adfe:	4407      	add	r7, r0
 800ae00:	eba8 0800 	sub.w	r8, r8, r0
 800ae04:	e7e9      	b.n	800adda <__sflush_r+0xda>
 800ae06:	bf00      	nop
 800ae08:	20400001 	.word	0x20400001

0800ae0c <_fflush_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	690b      	ldr	r3, [r1, #16]
 800ae10:	4605      	mov	r5, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	b913      	cbnz	r3, 800ae1c <_fflush_r+0x10>
 800ae16:	2500      	movs	r5, #0
 800ae18:	4628      	mov	r0, r5
 800ae1a:	bd38      	pop	{r3, r4, r5, pc}
 800ae1c:	b118      	cbz	r0, 800ae26 <_fflush_r+0x1a>
 800ae1e:	6983      	ldr	r3, [r0, #24]
 800ae20:	b90b      	cbnz	r3, 800ae26 <_fflush_r+0x1a>
 800ae22:	f000 f887 	bl	800af34 <__sinit>
 800ae26:	4b14      	ldr	r3, [pc, #80]	; (800ae78 <_fflush_r+0x6c>)
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	d11b      	bne.n	800ae64 <_fflush_r+0x58>
 800ae2c:	686c      	ldr	r4, [r5, #4]
 800ae2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0ef      	beq.n	800ae16 <_fflush_r+0xa>
 800ae36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae38:	07d0      	lsls	r0, r2, #31
 800ae3a:	d404      	bmi.n	800ae46 <_fflush_r+0x3a>
 800ae3c:	0599      	lsls	r1, r3, #22
 800ae3e:	d402      	bmi.n	800ae46 <_fflush_r+0x3a>
 800ae40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae42:	f000 f915 	bl	800b070 <__retarget_lock_acquire_recursive>
 800ae46:	4628      	mov	r0, r5
 800ae48:	4621      	mov	r1, r4
 800ae4a:	f7ff ff59 	bl	800ad00 <__sflush_r>
 800ae4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae50:	07da      	lsls	r2, r3, #31
 800ae52:	4605      	mov	r5, r0
 800ae54:	d4e0      	bmi.n	800ae18 <_fflush_r+0xc>
 800ae56:	89a3      	ldrh	r3, [r4, #12]
 800ae58:	059b      	lsls	r3, r3, #22
 800ae5a:	d4dd      	bmi.n	800ae18 <_fflush_r+0xc>
 800ae5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae5e:	f000 f908 	bl	800b072 <__retarget_lock_release_recursive>
 800ae62:	e7d9      	b.n	800ae18 <_fflush_r+0xc>
 800ae64:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <_fflush_r+0x70>)
 800ae66:	429c      	cmp	r4, r3
 800ae68:	d101      	bne.n	800ae6e <_fflush_r+0x62>
 800ae6a:	68ac      	ldr	r4, [r5, #8]
 800ae6c:	e7df      	b.n	800ae2e <_fflush_r+0x22>
 800ae6e:	4b04      	ldr	r3, [pc, #16]	; (800ae80 <_fflush_r+0x74>)
 800ae70:	429c      	cmp	r4, r3
 800ae72:	bf08      	it	eq
 800ae74:	68ec      	ldreq	r4, [r5, #12]
 800ae76:	e7da      	b.n	800ae2e <_fflush_r+0x22>
 800ae78:	0800d090 	.word	0x0800d090
 800ae7c:	0800d0b0 	.word	0x0800d0b0
 800ae80:	0800d070 	.word	0x0800d070

0800ae84 <std>:
 800ae84:	2300      	movs	r3, #0
 800ae86:	b510      	push	{r4, lr}
 800ae88:	4604      	mov	r4, r0
 800ae8a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae92:	6083      	str	r3, [r0, #8]
 800ae94:	8181      	strh	r1, [r0, #12]
 800ae96:	6643      	str	r3, [r0, #100]	; 0x64
 800ae98:	81c2      	strh	r2, [r0, #14]
 800ae9a:	6183      	str	r3, [r0, #24]
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	2208      	movs	r2, #8
 800aea0:	305c      	adds	r0, #92	; 0x5c
 800aea2:	f7ff fdad 	bl	800aa00 <memset>
 800aea6:	4b05      	ldr	r3, [pc, #20]	; (800aebc <std+0x38>)
 800aea8:	6263      	str	r3, [r4, #36]	; 0x24
 800aeaa:	4b05      	ldr	r3, [pc, #20]	; (800aec0 <std+0x3c>)
 800aeac:	62a3      	str	r3, [r4, #40]	; 0x28
 800aeae:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <std+0x40>)
 800aeb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aeb2:	4b05      	ldr	r3, [pc, #20]	; (800aec8 <std+0x44>)
 800aeb4:	6224      	str	r4, [r4, #32]
 800aeb6:	6323      	str	r3, [r4, #48]	; 0x30
 800aeb8:	bd10      	pop	{r4, pc}
 800aeba:	bf00      	nop
 800aebc:	0800b98d 	.word	0x0800b98d
 800aec0:	0800b9af 	.word	0x0800b9af
 800aec4:	0800b9e7 	.word	0x0800b9e7
 800aec8:	0800ba0b 	.word	0x0800ba0b

0800aecc <_cleanup_r>:
 800aecc:	4901      	ldr	r1, [pc, #4]	; (800aed4 <_cleanup_r+0x8>)
 800aece:	f000 b8af 	b.w	800b030 <_fwalk_reent>
 800aed2:	bf00      	nop
 800aed4:	0800ae0d 	.word	0x0800ae0d

0800aed8 <__sfmoreglue>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	2268      	movs	r2, #104	; 0x68
 800aedc:	1e4d      	subs	r5, r1, #1
 800aede:	4355      	muls	r5, r2
 800aee0:	460e      	mov	r6, r1
 800aee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aee6:	f000 f997 	bl	800b218 <_malloc_r>
 800aeea:	4604      	mov	r4, r0
 800aeec:	b140      	cbz	r0, 800af00 <__sfmoreglue+0x28>
 800aeee:	2100      	movs	r1, #0
 800aef0:	e9c0 1600 	strd	r1, r6, [r0]
 800aef4:	300c      	adds	r0, #12
 800aef6:	60a0      	str	r0, [r4, #8]
 800aef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aefc:	f7ff fd80 	bl	800aa00 <memset>
 800af00:	4620      	mov	r0, r4
 800af02:	bd70      	pop	{r4, r5, r6, pc}

0800af04 <__sfp_lock_acquire>:
 800af04:	4801      	ldr	r0, [pc, #4]	; (800af0c <__sfp_lock_acquire+0x8>)
 800af06:	f000 b8b3 	b.w	800b070 <__retarget_lock_acquire_recursive>
 800af0a:	bf00      	nop
 800af0c:	200013f1 	.word	0x200013f1

0800af10 <__sfp_lock_release>:
 800af10:	4801      	ldr	r0, [pc, #4]	; (800af18 <__sfp_lock_release+0x8>)
 800af12:	f000 b8ae 	b.w	800b072 <__retarget_lock_release_recursive>
 800af16:	bf00      	nop
 800af18:	200013f1 	.word	0x200013f1

0800af1c <__sinit_lock_acquire>:
 800af1c:	4801      	ldr	r0, [pc, #4]	; (800af24 <__sinit_lock_acquire+0x8>)
 800af1e:	f000 b8a7 	b.w	800b070 <__retarget_lock_acquire_recursive>
 800af22:	bf00      	nop
 800af24:	200013f2 	.word	0x200013f2

0800af28 <__sinit_lock_release>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__sinit_lock_release+0x8>)
 800af2a:	f000 b8a2 	b.w	800b072 <__retarget_lock_release_recursive>
 800af2e:	bf00      	nop
 800af30:	200013f2 	.word	0x200013f2

0800af34 <__sinit>:
 800af34:	b510      	push	{r4, lr}
 800af36:	4604      	mov	r4, r0
 800af38:	f7ff fff0 	bl	800af1c <__sinit_lock_acquire>
 800af3c:	69a3      	ldr	r3, [r4, #24]
 800af3e:	b11b      	cbz	r3, 800af48 <__sinit+0x14>
 800af40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af44:	f7ff bff0 	b.w	800af28 <__sinit_lock_release>
 800af48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af4c:	6523      	str	r3, [r4, #80]	; 0x50
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <__sinit+0x68>)
 800af50:	4a13      	ldr	r2, [pc, #76]	; (800afa0 <__sinit+0x6c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	62a2      	str	r2, [r4, #40]	; 0x28
 800af56:	42a3      	cmp	r3, r4
 800af58:	bf04      	itt	eq
 800af5a:	2301      	moveq	r3, #1
 800af5c:	61a3      	streq	r3, [r4, #24]
 800af5e:	4620      	mov	r0, r4
 800af60:	f000 f820 	bl	800afa4 <__sfp>
 800af64:	6060      	str	r0, [r4, #4]
 800af66:	4620      	mov	r0, r4
 800af68:	f000 f81c 	bl	800afa4 <__sfp>
 800af6c:	60a0      	str	r0, [r4, #8]
 800af6e:	4620      	mov	r0, r4
 800af70:	f000 f818 	bl	800afa4 <__sfp>
 800af74:	2200      	movs	r2, #0
 800af76:	60e0      	str	r0, [r4, #12]
 800af78:	2104      	movs	r1, #4
 800af7a:	6860      	ldr	r0, [r4, #4]
 800af7c:	f7ff ff82 	bl	800ae84 <std>
 800af80:	68a0      	ldr	r0, [r4, #8]
 800af82:	2201      	movs	r2, #1
 800af84:	2109      	movs	r1, #9
 800af86:	f7ff ff7d 	bl	800ae84 <std>
 800af8a:	68e0      	ldr	r0, [r4, #12]
 800af8c:	2202      	movs	r2, #2
 800af8e:	2112      	movs	r1, #18
 800af90:	f7ff ff78 	bl	800ae84 <std>
 800af94:	2301      	movs	r3, #1
 800af96:	61a3      	str	r3, [r4, #24]
 800af98:	e7d2      	b.n	800af40 <__sinit+0xc>
 800af9a:	bf00      	nop
 800af9c:	0800d06c 	.word	0x0800d06c
 800afa0:	0800aecd 	.word	0x0800aecd

0800afa4 <__sfp>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	4607      	mov	r7, r0
 800afa8:	f7ff ffac 	bl	800af04 <__sfp_lock_acquire>
 800afac:	4b1e      	ldr	r3, [pc, #120]	; (800b028 <__sfp+0x84>)
 800afae:	681e      	ldr	r6, [r3, #0]
 800afb0:	69b3      	ldr	r3, [r6, #24]
 800afb2:	b913      	cbnz	r3, 800afba <__sfp+0x16>
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7ff ffbd 	bl	800af34 <__sinit>
 800afba:	3648      	adds	r6, #72	; 0x48
 800afbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afc0:	3b01      	subs	r3, #1
 800afc2:	d503      	bpl.n	800afcc <__sfp+0x28>
 800afc4:	6833      	ldr	r3, [r6, #0]
 800afc6:	b30b      	cbz	r3, 800b00c <__sfp+0x68>
 800afc8:	6836      	ldr	r6, [r6, #0]
 800afca:	e7f7      	b.n	800afbc <__sfp+0x18>
 800afcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afd0:	b9d5      	cbnz	r5, 800b008 <__sfp+0x64>
 800afd2:	4b16      	ldr	r3, [pc, #88]	; (800b02c <__sfp+0x88>)
 800afd4:	60e3      	str	r3, [r4, #12]
 800afd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afda:	6665      	str	r5, [r4, #100]	; 0x64
 800afdc:	f000 f847 	bl	800b06e <__retarget_lock_init_recursive>
 800afe0:	f7ff ff96 	bl	800af10 <__sfp_lock_release>
 800afe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afec:	6025      	str	r5, [r4, #0]
 800afee:	61a5      	str	r5, [r4, #24]
 800aff0:	2208      	movs	r2, #8
 800aff2:	4629      	mov	r1, r5
 800aff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aff8:	f7ff fd02 	bl	800aa00 <memset>
 800affc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b004:	4620      	mov	r0, r4
 800b006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b008:	3468      	adds	r4, #104	; 0x68
 800b00a:	e7d9      	b.n	800afc0 <__sfp+0x1c>
 800b00c:	2104      	movs	r1, #4
 800b00e:	4638      	mov	r0, r7
 800b010:	f7ff ff62 	bl	800aed8 <__sfmoreglue>
 800b014:	4604      	mov	r4, r0
 800b016:	6030      	str	r0, [r6, #0]
 800b018:	2800      	cmp	r0, #0
 800b01a:	d1d5      	bne.n	800afc8 <__sfp+0x24>
 800b01c:	f7ff ff78 	bl	800af10 <__sfp_lock_release>
 800b020:	230c      	movs	r3, #12
 800b022:	603b      	str	r3, [r7, #0]
 800b024:	e7ee      	b.n	800b004 <__sfp+0x60>
 800b026:	bf00      	nop
 800b028:	0800d06c 	.word	0x0800d06c
 800b02c:	ffff0001 	.word	0xffff0001

0800b030 <_fwalk_reent>:
 800b030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b034:	4606      	mov	r6, r0
 800b036:	4688      	mov	r8, r1
 800b038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b03c:	2700      	movs	r7, #0
 800b03e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b042:	f1b9 0901 	subs.w	r9, r9, #1
 800b046:	d505      	bpl.n	800b054 <_fwalk_reent+0x24>
 800b048:	6824      	ldr	r4, [r4, #0]
 800b04a:	2c00      	cmp	r4, #0
 800b04c:	d1f7      	bne.n	800b03e <_fwalk_reent+0xe>
 800b04e:	4638      	mov	r0, r7
 800b050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b054:	89ab      	ldrh	r3, [r5, #12]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d907      	bls.n	800b06a <_fwalk_reent+0x3a>
 800b05a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b05e:	3301      	adds	r3, #1
 800b060:	d003      	beq.n	800b06a <_fwalk_reent+0x3a>
 800b062:	4629      	mov	r1, r5
 800b064:	4630      	mov	r0, r6
 800b066:	47c0      	blx	r8
 800b068:	4307      	orrs	r7, r0
 800b06a:	3568      	adds	r5, #104	; 0x68
 800b06c:	e7e9      	b.n	800b042 <_fwalk_reent+0x12>

0800b06e <__retarget_lock_init_recursive>:
 800b06e:	4770      	bx	lr

0800b070 <__retarget_lock_acquire_recursive>:
 800b070:	4770      	bx	lr

0800b072 <__retarget_lock_release_recursive>:
 800b072:	4770      	bx	lr

0800b074 <__swhatbuf_r>:
 800b074:	b570      	push	{r4, r5, r6, lr}
 800b076:	460e      	mov	r6, r1
 800b078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b07c:	2900      	cmp	r1, #0
 800b07e:	b096      	sub	sp, #88	; 0x58
 800b080:	4614      	mov	r4, r2
 800b082:	461d      	mov	r5, r3
 800b084:	da08      	bge.n	800b098 <__swhatbuf_r+0x24>
 800b086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	602a      	str	r2, [r5, #0]
 800b08e:	061a      	lsls	r2, r3, #24
 800b090:	d410      	bmi.n	800b0b4 <__swhatbuf_r+0x40>
 800b092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b096:	e00e      	b.n	800b0b6 <__swhatbuf_r+0x42>
 800b098:	466a      	mov	r2, sp
 800b09a:	f000 fce9 	bl	800ba70 <_fstat_r>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	dbf1      	blt.n	800b086 <__swhatbuf_r+0x12>
 800b0a2:	9a01      	ldr	r2, [sp, #4]
 800b0a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0ac:	425a      	negs	r2, r3
 800b0ae:	415a      	adcs	r2, r3
 800b0b0:	602a      	str	r2, [r5, #0]
 800b0b2:	e7ee      	b.n	800b092 <__swhatbuf_r+0x1e>
 800b0b4:	2340      	movs	r3, #64	; 0x40
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	b016      	add	sp, #88	; 0x58
 800b0bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b0c0 <__smakebuf_r>:
 800b0c0:	898b      	ldrh	r3, [r1, #12]
 800b0c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0c4:	079d      	lsls	r5, r3, #30
 800b0c6:	4606      	mov	r6, r0
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	d507      	bpl.n	800b0dc <__smakebuf_r+0x1c>
 800b0cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	6123      	str	r3, [r4, #16]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	6163      	str	r3, [r4, #20]
 800b0d8:	b002      	add	sp, #8
 800b0da:	bd70      	pop	{r4, r5, r6, pc}
 800b0dc:	ab01      	add	r3, sp, #4
 800b0de:	466a      	mov	r2, sp
 800b0e0:	f7ff ffc8 	bl	800b074 <__swhatbuf_r>
 800b0e4:	9900      	ldr	r1, [sp, #0]
 800b0e6:	4605      	mov	r5, r0
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	f000 f895 	bl	800b218 <_malloc_r>
 800b0ee:	b948      	cbnz	r0, 800b104 <__smakebuf_r+0x44>
 800b0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f4:	059a      	lsls	r2, r3, #22
 800b0f6:	d4ef      	bmi.n	800b0d8 <__smakebuf_r+0x18>
 800b0f8:	f023 0303 	bic.w	r3, r3, #3
 800b0fc:	f043 0302 	orr.w	r3, r3, #2
 800b100:	81a3      	strh	r3, [r4, #12]
 800b102:	e7e3      	b.n	800b0cc <__smakebuf_r+0xc>
 800b104:	4b0d      	ldr	r3, [pc, #52]	; (800b13c <__smakebuf_r+0x7c>)
 800b106:	62b3      	str	r3, [r6, #40]	; 0x28
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	6020      	str	r0, [r4, #0]
 800b10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b110:	81a3      	strh	r3, [r4, #12]
 800b112:	9b00      	ldr	r3, [sp, #0]
 800b114:	6163      	str	r3, [r4, #20]
 800b116:	9b01      	ldr	r3, [sp, #4]
 800b118:	6120      	str	r0, [r4, #16]
 800b11a:	b15b      	cbz	r3, 800b134 <__smakebuf_r+0x74>
 800b11c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b120:	4630      	mov	r0, r6
 800b122:	f000 fcb7 	bl	800ba94 <_isatty_r>
 800b126:	b128      	cbz	r0, 800b134 <__smakebuf_r+0x74>
 800b128:	89a3      	ldrh	r3, [r4, #12]
 800b12a:	f023 0303 	bic.w	r3, r3, #3
 800b12e:	f043 0301 	orr.w	r3, r3, #1
 800b132:	81a3      	strh	r3, [r4, #12]
 800b134:	89a0      	ldrh	r0, [r4, #12]
 800b136:	4305      	orrs	r5, r0
 800b138:	81a5      	strh	r5, [r4, #12]
 800b13a:	e7cd      	b.n	800b0d8 <__smakebuf_r+0x18>
 800b13c:	0800aecd 	.word	0x0800aecd

0800b140 <_free_r>:
 800b140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b142:	2900      	cmp	r1, #0
 800b144:	d044      	beq.n	800b1d0 <_free_r+0x90>
 800b146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b14a:	9001      	str	r0, [sp, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f1a1 0404 	sub.w	r4, r1, #4
 800b152:	bfb8      	it	lt
 800b154:	18e4      	addlt	r4, r4, r3
 800b156:	f000 fcbf 	bl	800bad8 <__malloc_lock>
 800b15a:	4a1e      	ldr	r2, [pc, #120]	; (800b1d4 <_free_r+0x94>)
 800b15c:	9801      	ldr	r0, [sp, #4]
 800b15e:	6813      	ldr	r3, [r2, #0]
 800b160:	b933      	cbnz	r3, 800b170 <_free_r+0x30>
 800b162:	6063      	str	r3, [r4, #4]
 800b164:	6014      	str	r4, [r2, #0]
 800b166:	b003      	add	sp, #12
 800b168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b16c:	f000 bcba 	b.w	800bae4 <__malloc_unlock>
 800b170:	42a3      	cmp	r3, r4
 800b172:	d908      	bls.n	800b186 <_free_r+0x46>
 800b174:	6825      	ldr	r5, [r4, #0]
 800b176:	1961      	adds	r1, r4, r5
 800b178:	428b      	cmp	r3, r1
 800b17a:	bf01      	itttt	eq
 800b17c:	6819      	ldreq	r1, [r3, #0]
 800b17e:	685b      	ldreq	r3, [r3, #4]
 800b180:	1949      	addeq	r1, r1, r5
 800b182:	6021      	streq	r1, [r4, #0]
 800b184:	e7ed      	b.n	800b162 <_free_r+0x22>
 800b186:	461a      	mov	r2, r3
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	b10b      	cbz	r3, 800b190 <_free_r+0x50>
 800b18c:	42a3      	cmp	r3, r4
 800b18e:	d9fa      	bls.n	800b186 <_free_r+0x46>
 800b190:	6811      	ldr	r1, [r2, #0]
 800b192:	1855      	adds	r5, r2, r1
 800b194:	42a5      	cmp	r5, r4
 800b196:	d10b      	bne.n	800b1b0 <_free_r+0x70>
 800b198:	6824      	ldr	r4, [r4, #0]
 800b19a:	4421      	add	r1, r4
 800b19c:	1854      	adds	r4, r2, r1
 800b19e:	42a3      	cmp	r3, r4
 800b1a0:	6011      	str	r1, [r2, #0]
 800b1a2:	d1e0      	bne.n	800b166 <_free_r+0x26>
 800b1a4:	681c      	ldr	r4, [r3, #0]
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	6053      	str	r3, [r2, #4]
 800b1aa:	4421      	add	r1, r4
 800b1ac:	6011      	str	r1, [r2, #0]
 800b1ae:	e7da      	b.n	800b166 <_free_r+0x26>
 800b1b0:	d902      	bls.n	800b1b8 <_free_r+0x78>
 800b1b2:	230c      	movs	r3, #12
 800b1b4:	6003      	str	r3, [r0, #0]
 800b1b6:	e7d6      	b.n	800b166 <_free_r+0x26>
 800b1b8:	6825      	ldr	r5, [r4, #0]
 800b1ba:	1961      	adds	r1, r4, r5
 800b1bc:	428b      	cmp	r3, r1
 800b1be:	bf04      	itt	eq
 800b1c0:	6819      	ldreq	r1, [r3, #0]
 800b1c2:	685b      	ldreq	r3, [r3, #4]
 800b1c4:	6063      	str	r3, [r4, #4]
 800b1c6:	bf04      	itt	eq
 800b1c8:	1949      	addeq	r1, r1, r5
 800b1ca:	6021      	streq	r1, [r4, #0]
 800b1cc:	6054      	str	r4, [r2, #4]
 800b1ce:	e7ca      	b.n	800b166 <_free_r+0x26>
 800b1d0:	b003      	add	sp, #12
 800b1d2:	bd30      	pop	{r4, r5, pc}
 800b1d4:	200013f4 	.word	0x200013f4

0800b1d8 <sbrk_aligned>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	4e0e      	ldr	r6, [pc, #56]	; (800b214 <sbrk_aligned+0x3c>)
 800b1dc:	460c      	mov	r4, r1
 800b1de:	6831      	ldr	r1, [r6, #0]
 800b1e0:	4605      	mov	r5, r0
 800b1e2:	b911      	cbnz	r1, 800b1ea <sbrk_aligned+0x12>
 800b1e4:	f000 fbc2 	bl	800b96c <_sbrk_r>
 800b1e8:	6030      	str	r0, [r6, #0]
 800b1ea:	4621      	mov	r1, r4
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	f000 fbbd 	bl	800b96c <_sbrk_r>
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	d00a      	beq.n	800b20c <sbrk_aligned+0x34>
 800b1f6:	1cc4      	adds	r4, r0, #3
 800b1f8:	f024 0403 	bic.w	r4, r4, #3
 800b1fc:	42a0      	cmp	r0, r4
 800b1fe:	d007      	beq.n	800b210 <sbrk_aligned+0x38>
 800b200:	1a21      	subs	r1, r4, r0
 800b202:	4628      	mov	r0, r5
 800b204:	f000 fbb2 	bl	800b96c <_sbrk_r>
 800b208:	3001      	adds	r0, #1
 800b20a:	d101      	bne.n	800b210 <sbrk_aligned+0x38>
 800b20c:	f04f 34ff 	mov.w	r4, #4294967295
 800b210:	4620      	mov	r0, r4
 800b212:	bd70      	pop	{r4, r5, r6, pc}
 800b214:	200013f8 	.word	0x200013f8

0800b218 <_malloc_r>:
 800b218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b21c:	1ccd      	adds	r5, r1, #3
 800b21e:	f025 0503 	bic.w	r5, r5, #3
 800b222:	3508      	adds	r5, #8
 800b224:	2d0c      	cmp	r5, #12
 800b226:	bf38      	it	cc
 800b228:	250c      	movcc	r5, #12
 800b22a:	2d00      	cmp	r5, #0
 800b22c:	4607      	mov	r7, r0
 800b22e:	db01      	blt.n	800b234 <_malloc_r+0x1c>
 800b230:	42a9      	cmp	r1, r5
 800b232:	d905      	bls.n	800b240 <_malloc_r+0x28>
 800b234:	230c      	movs	r3, #12
 800b236:	603b      	str	r3, [r7, #0]
 800b238:	2600      	movs	r6, #0
 800b23a:	4630      	mov	r0, r6
 800b23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b240:	4e2e      	ldr	r6, [pc, #184]	; (800b2fc <_malloc_r+0xe4>)
 800b242:	f000 fc49 	bl	800bad8 <__malloc_lock>
 800b246:	6833      	ldr	r3, [r6, #0]
 800b248:	461c      	mov	r4, r3
 800b24a:	bb34      	cbnz	r4, 800b29a <_malloc_r+0x82>
 800b24c:	4629      	mov	r1, r5
 800b24e:	4638      	mov	r0, r7
 800b250:	f7ff ffc2 	bl	800b1d8 <sbrk_aligned>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	4604      	mov	r4, r0
 800b258:	d14d      	bne.n	800b2f6 <_malloc_r+0xde>
 800b25a:	6834      	ldr	r4, [r6, #0]
 800b25c:	4626      	mov	r6, r4
 800b25e:	2e00      	cmp	r6, #0
 800b260:	d140      	bne.n	800b2e4 <_malloc_r+0xcc>
 800b262:	6823      	ldr	r3, [r4, #0]
 800b264:	4631      	mov	r1, r6
 800b266:	4638      	mov	r0, r7
 800b268:	eb04 0803 	add.w	r8, r4, r3
 800b26c:	f000 fb7e 	bl	800b96c <_sbrk_r>
 800b270:	4580      	cmp	r8, r0
 800b272:	d13a      	bne.n	800b2ea <_malloc_r+0xd2>
 800b274:	6821      	ldr	r1, [r4, #0]
 800b276:	3503      	adds	r5, #3
 800b278:	1a6d      	subs	r5, r5, r1
 800b27a:	f025 0503 	bic.w	r5, r5, #3
 800b27e:	3508      	adds	r5, #8
 800b280:	2d0c      	cmp	r5, #12
 800b282:	bf38      	it	cc
 800b284:	250c      	movcc	r5, #12
 800b286:	4629      	mov	r1, r5
 800b288:	4638      	mov	r0, r7
 800b28a:	f7ff ffa5 	bl	800b1d8 <sbrk_aligned>
 800b28e:	3001      	adds	r0, #1
 800b290:	d02b      	beq.n	800b2ea <_malloc_r+0xd2>
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	442b      	add	r3, r5
 800b296:	6023      	str	r3, [r4, #0]
 800b298:	e00e      	b.n	800b2b8 <_malloc_r+0xa0>
 800b29a:	6822      	ldr	r2, [r4, #0]
 800b29c:	1b52      	subs	r2, r2, r5
 800b29e:	d41e      	bmi.n	800b2de <_malloc_r+0xc6>
 800b2a0:	2a0b      	cmp	r2, #11
 800b2a2:	d916      	bls.n	800b2d2 <_malloc_r+0xba>
 800b2a4:	1961      	adds	r1, r4, r5
 800b2a6:	42a3      	cmp	r3, r4
 800b2a8:	6025      	str	r5, [r4, #0]
 800b2aa:	bf18      	it	ne
 800b2ac:	6059      	strne	r1, [r3, #4]
 800b2ae:	6863      	ldr	r3, [r4, #4]
 800b2b0:	bf08      	it	eq
 800b2b2:	6031      	streq	r1, [r6, #0]
 800b2b4:	5162      	str	r2, [r4, r5]
 800b2b6:	604b      	str	r3, [r1, #4]
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f104 060b 	add.w	r6, r4, #11
 800b2be:	f000 fc11 	bl	800bae4 <__malloc_unlock>
 800b2c2:	f026 0607 	bic.w	r6, r6, #7
 800b2c6:	1d23      	adds	r3, r4, #4
 800b2c8:	1af2      	subs	r2, r6, r3
 800b2ca:	d0b6      	beq.n	800b23a <_malloc_r+0x22>
 800b2cc:	1b9b      	subs	r3, r3, r6
 800b2ce:	50a3      	str	r3, [r4, r2]
 800b2d0:	e7b3      	b.n	800b23a <_malloc_r+0x22>
 800b2d2:	6862      	ldr	r2, [r4, #4]
 800b2d4:	42a3      	cmp	r3, r4
 800b2d6:	bf0c      	ite	eq
 800b2d8:	6032      	streq	r2, [r6, #0]
 800b2da:	605a      	strne	r2, [r3, #4]
 800b2dc:	e7ec      	b.n	800b2b8 <_malloc_r+0xa0>
 800b2de:	4623      	mov	r3, r4
 800b2e0:	6864      	ldr	r4, [r4, #4]
 800b2e2:	e7b2      	b.n	800b24a <_malloc_r+0x32>
 800b2e4:	4634      	mov	r4, r6
 800b2e6:	6876      	ldr	r6, [r6, #4]
 800b2e8:	e7b9      	b.n	800b25e <_malloc_r+0x46>
 800b2ea:	230c      	movs	r3, #12
 800b2ec:	603b      	str	r3, [r7, #0]
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	f000 fbf8 	bl	800bae4 <__malloc_unlock>
 800b2f4:	e7a1      	b.n	800b23a <_malloc_r+0x22>
 800b2f6:	6025      	str	r5, [r4, #0]
 800b2f8:	e7de      	b.n	800b2b8 <_malloc_r+0xa0>
 800b2fa:	bf00      	nop
 800b2fc:	200013f4 	.word	0x200013f4

0800b300 <__sfputc_r>:
 800b300:	6893      	ldr	r3, [r2, #8]
 800b302:	3b01      	subs	r3, #1
 800b304:	2b00      	cmp	r3, #0
 800b306:	b410      	push	{r4}
 800b308:	6093      	str	r3, [r2, #8]
 800b30a:	da08      	bge.n	800b31e <__sfputc_r+0x1e>
 800b30c:	6994      	ldr	r4, [r2, #24]
 800b30e:	42a3      	cmp	r3, r4
 800b310:	db01      	blt.n	800b316 <__sfputc_r+0x16>
 800b312:	290a      	cmp	r1, #10
 800b314:	d103      	bne.n	800b31e <__sfputc_r+0x1e>
 800b316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b31a:	f7ff bc31 	b.w	800ab80 <__swbuf_r>
 800b31e:	6813      	ldr	r3, [r2, #0]
 800b320:	1c58      	adds	r0, r3, #1
 800b322:	6010      	str	r0, [r2, #0]
 800b324:	7019      	strb	r1, [r3, #0]
 800b326:	4608      	mov	r0, r1
 800b328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <__sfputs_r>:
 800b32e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b330:	4606      	mov	r6, r0
 800b332:	460f      	mov	r7, r1
 800b334:	4614      	mov	r4, r2
 800b336:	18d5      	adds	r5, r2, r3
 800b338:	42ac      	cmp	r4, r5
 800b33a:	d101      	bne.n	800b340 <__sfputs_r+0x12>
 800b33c:	2000      	movs	r0, #0
 800b33e:	e007      	b.n	800b350 <__sfputs_r+0x22>
 800b340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b344:	463a      	mov	r2, r7
 800b346:	4630      	mov	r0, r6
 800b348:	f7ff ffda 	bl	800b300 <__sfputc_r>
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	d1f3      	bne.n	800b338 <__sfputs_r+0xa>
 800b350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b354 <_vfiprintf_r>:
 800b354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b358:	460d      	mov	r5, r1
 800b35a:	b09d      	sub	sp, #116	; 0x74
 800b35c:	4614      	mov	r4, r2
 800b35e:	4698      	mov	r8, r3
 800b360:	4606      	mov	r6, r0
 800b362:	b118      	cbz	r0, 800b36c <_vfiprintf_r+0x18>
 800b364:	6983      	ldr	r3, [r0, #24]
 800b366:	b90b      	cbnz	r3, 800b36c <_vfiprintf_r+0x18>
 800b368:	f7ff fde4 	bl	800af34 <__sinit>
 800b36c:	4b89      	ldr	r3, [pc, #548]	; (800b594 <_vfiprintf_r+0x240>)
 800b36e:	429d      	cmp	r5, r3
 800b370:	d11b      	bne.n	800b3aa <_vfiprintf_r+0x56>
 800b372:	6875      	ldr	r5, [r6, #4]
 800b374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b376:	07d9      	lsls	r1, r3, #31
 800b378:	d405      	bmi.n	800b386 <_vfiprintf_r+0x32>
 800b37a:	89ab      	ldrh	r3, [r5, #12]
 800b37c:	059a      	lsls	r2, r3, #22
 800b37e:	d402      	bmi.n	800b386 <_vfiprintf_r+0x32>
 800b380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b382:	f7ff fe75 	bl	800b070 <__retarget_lock_acquire_recursive>
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	071b      	lsls	r3, r3, #28
 800b38a:	d501      	bpl.n	800b390 <_vfiprintf_r+0x3c>
 800b38c:	692b      	ldr	r3, [r5, #16]
 800b38e:	b9eb      	cbnz	r3, 800b3cc <_vfiprintf_r+0x78>
 800b390:	4629      	mov	r1, r5
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff fc46 	bl	800ac24 <__swsetup_r>
 800b398:	b1c0      	cbz	r0, 800b3cc <_vfiprintf_r+0x78>
 800b39a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b39c:	07dc      	lsls	r4, r3, #31
 800b39e:	d50e      	bpl.n	800b3be <_vfiprintf_r+0x6a>
 800b3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a4:	b01d      	add	sp, #116	; 0x74
 800b3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3aa:	4b7b      	ldr	r3, [pc, #492]	; (800b598 <_vfiprintf_r+0x244>)
 800b3ac:	429d      	cmp	r5, r3
 800b3ae:	d101      	bne.n	800b3b4 <_vfiprintf_r+0x60>
 800b3b0:	68b5      	ldr	r5, [r6, #8]
 800b3b2:	e7df      	b.n	800b374 <_vfiprintf_r+0x20>
 800b3b4:	4b79      	ldr	r3, [pc, #484]	; (800b59c <_vfiprintf_r+0x248>)
 800b3b6:	429d      	cmp	r5, r3
 800b3b8:	bf08      	it	eq
 800b3ba:	68f5      	ldreq	r5, [r6, #12]
 800b3bc:	e7da      	b.n	800b374 <_vfiprintf_r+0x20>
 800b3be:	89ab      	ldrh	r3, [r5, #12]
 800b3c0:	0598      	lsls	r0, r3, #22
 800b3c2:	d4ed      	bmi.n	800b3a0 <_vfiprintf_r+0x4c>
 800b3c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3c6:	f7ff fe54 	bl	800b072 <__retarget_lock_release_recursive>
 800b3ca:	e7e9      	b.n	800b3a0 <_vfiprintf_r+0x4c>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b3d0:	2320      	movs	r3, #32
 800b3d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3da:	2330      	movs	r3, #48	; 0x30
 800b3dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b5a0 <_vfiprintf_r+0x24c>
 800b3e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3e4:	f04f 0901 	mov.w	r9, #1
 800b3e8:	4623      	mov	r3, r4
 800b3ea:	469a      	mov	sl, r3
 800b3ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3f0:	b10a      	cbz	r2, 800b3f6 <_vfiprintf_r+0xa2>
 800b3f2:	2a25      	cmp	r2, #37	; 0x25
 800b3f4:	d1f9      	bne.n	800b3ea <_vfiprintf_r+0x96>
 800b3f6:	ebba 0b04 	subs.w	fp, sl, r4
 800b3fa:	d00b      	beq.n	800b414 <_vfiprintf_r+0xc0>
 800b3fc:	465b      	mov	r3, fp
 800b3fe:	4622      	mov	r2, r4
 800b400:	4629      	mov	r1, r5
 800b402:	4630      	mov	r0, r6
 800b404:	f7ff ff93 	bl	800b32e <__sfputs_r>
 800b408:	3001      	adds	r0, #1
 800b40a:	f000 80aa 	beq.w	800b562 <_vfiprintf_r+0x20e>
 800b40e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b410:	445a      	add	r2, fp
 800b412:	9209      	str	r2, [sp, #36]	; 0x24
 800b414:	f89a 3000 	ldrb.w	r3, [sl]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 80a2 	beq.w	800b562 <_vfiprintf_r+0x20e>
 800b41e:	2300      	movs	r3, #0
 800b420:	f04f 32ff 	mov.w	r2, #4294967295
 800b424:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b428:	f10a 0a01 	add.w	sl, sl, #1
 800b42c:	9304      	str	r3, [sp, #16]
 800b42e:	9307      	str	r3, [sp, #28]
 800b430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b434:	931a      	str	r3, [sp, #104]	; 0x68
 800b436:	4654      	mov	r4, sl
 800b438:	2205      	movs	r2, #5
 800b43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b43e:	4858      	ldr	r0, [pc, #352]	; (800b5a0 <_vfiprintf_r+0x24c>)
 800b440:	f7f4 fea6 	bl	8000190 <memchr>
 800b444:	9a04      	ldr	r2, [sp, #16]
 800b446:	b9d8      	cbnz	r0, 800b480 <_vfiprintf_r+0x12c>
 800b448:	06d1      	lsls	r1, r2, #27
 800b44a:	bf44      	itt	mi
 800b44c:	2320      	movmi	r3, #32
 800b44e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b452:	0713      	lsls	r3, r2, #28
 800b454:	bf44      	itt	mi
 800b456:	232b      	movmi	r3, #43	; 0x2b
 800b458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b45c:	f89a 3000 	ldrb.w	r3, [sl]
 800b460:	2b2a      	cmp	r3, #42	; 0x2a
 800b462:	d015      	beq.n	800b490 <_vfiprintf_r+0x13c>
 800b464:	9a07      	ldr	r2, [sp, #28]
 800b466:	4654      	mov	r4, sl
 800b468:	2000      	movs	r0, #0
 800b46a:	f04f 0c0a 	mov.w	ip, #10
 800b46e:	4621      	mov	r1, r4
 800b470:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b474:	3b30      	subs	r3, #48	; 0x30
 800b476:	2b09      	cmp	r3, #9
 800b478:	d94e      	bls.n	800b518 <_vfiprintf_r+0x1c4>
 800b47a:	b1b0      	cbz	r0, 800b4aa <_vfiprintf_r+0x156>
 800b47c:	9207      	str	r2, [sp, #28]
 800b47e:	e014      	b.n	800b4aa <_vfiprintf_r+0x156>
 800b480:	eba0 0308 	sub.w	r3, r0, r8
 800b484:	fa09 f303 	lsl.w	r3, r9, r3
 800b488:	4313      	orrs	r3, r2
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	46a2      	mov	sl, r4
 800b48e:	e7d2      	b.n	800b436 <_vfiprintf_r+0xe2>
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	1d19      	adds	r1, r3, #4
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	9103      	str	r1, [sp, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	bfbb      	ittet	lt
 800b49c:	425b      	neglt	r3, r3
 800b49e:	f042 0202 	orrlt.w	r2, r2, #2
 800b4a2:	9307      	strge	r3, [sp, #28]
 800b4a4:	9307      	strlt	r3, [sp, #28]
 800b4a6:	bfb8      	it	lt
 800b4a8:	9204      	strlt	r2, [sp, #16]
 800b4aa:	7823      	ldrb	r3, [r4, #0]
 800b4ac:	2b2e      	cmp	r3, #46	; 0x2e
 800b4ae:	d10c      	bne.n	800b4ca <_vfiprintf_r+0x176>
 800b4b0:	7863      	ldrb	r3, [r4, #1]
 800b4b2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b4:	d135      	bne.n	800b522 <_vfiprintf_r+0x1ce>
 800b4b6:	9b03      	ldr	r3, [sp, #12]
 800b4b8:	1d1a      	adds	r2, r3, #4
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	9203      	str	r2, [sp, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	bfb8      	it	lt
 800b4c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4c6:	3402      	adds	r4, #2
 800b4c8:	9305      	str	r3, [sp, #20]
 800b4ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b5b0 <_vfiprintf_r+0x25c>
 800b4ce:	7821      	ldrb	r1, [r4, #0]
 800b4d0:	2203      	movs	r2, #3
 800b4d2:	4650      	mov	r0, sl
 800b4d4:	f7f4 fe5c 	bl	8000190 <memchr>
 800b4d8:	b140      	cbz	r0, 800b4ec <_vfiprintf_r+0x198>
 800b4da:	2340      	movs	r3, #64	; 0x40
 800b4dc:	eba0 000a 	sub.w	r0, r0, sl
 800b4e0:	fa03 f000 	lsl.w	r0, r3, r0
 800b4e4:	9b04      	ldr	r3, [sp, #16]
 800b4e6:	4303      	orrs	r3, r0
 800b4e8:	3401      	adds	r4, #1
 800b4ea:	9304      	str	r3, [sp, #16]
 800b4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f0:	482c      	ldr	r0, [pc, #176]	; (800b5a4 <_vfiprintf_r+0x250>)
 800b4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4f6:	2206      	movs	r2, #6
 800b4f8:	f7f4 fe4a 	bl	8000190 <memchr>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d03f      	beq.n	800b580 <_vfiprintf_r+0x22c>
 800b500:	4b29      	ldr	r3, [pc, #164]	; (800b5a8 <_vfiprintf_r+0x254>)
 800b502:	bb1b      	cbnz	r3, 800b54c <_vfiprintf_r+0x1f8>
 800b504:	9b03      	ldr	r3, [sp, #12]
 800b506:	3307      	adds	r3, #7
 800b508:	f023 0307 	bic.w	r3, r3, #7
 800b50c:	3308      	adds	r3, #8
 800b50e:	9303      	str	r3, [sp, #12]
 800b510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b512:	443b      	add	r3, r7
 800b514:	9309      	str	r3, [sp, #36]	; 0x24
 800b516:	e767      	b.n	800b3e8 <_vfiprintf_r+0x94>
 800b518:	fb0c 3202 	mla	r2, ip, r2, r3
 800b51c:	460c      	mov	r4, r1
 800b51e:	2001      	movs	r0, #1
 800b520:	e7a5      	b.n	800b46e <_vfiprintf_r+0x11a>
 800b522:	2300      	movs	r3, #0
 800b524:	3401      	adds	r4, #1
 800b526:	9305      	str	r3, [sp, #20]
 800b528:	4619      	mov	r1, r3
 800b52a:	f04f 0c0a 	mov.w	ip, #10
 800b52e:	4620      	mov	r0, r4
 800b530:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b534:	3a30      	subs	r2, #48	; 0x30
 800b536:	2a09      	cmp	r2, #9
 800b538:	d903      	bls.n	800b542 <_vfiprintf_r+0x1ee>
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0c5      	beq.n	800b4ca <_vfiprintf_r+0x176>
 800b53e:	9105      	str	r1, [sp, #20]
 800b540:	e7c3      	b.n	800b4ca <_vfiprintf_r+0x176>
 800b542:	fb0c 2101 	mla	r1, ip, r1, r2
 800b546:	4604      	mov	r4, r0
 800b548:	2301      	movs	r3, #1
 800b54a:	e7f0      	b.n	800b52e <_vfiprintf_r+0x1da>
 800b54c:	ab03      	add	r3, sp, #12
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	462a      	mov	r2, r5
 800b552:	4b16      	ldr	r3, [pc, #88]	; (800b5ac <_vfiprintf_r+0x258>)
 800b554:	a904      	add	r1, sp, #16
 800b556:	4630      	mov	r0, r6
 800b558:	f3af 8000 	nop.w
 800b55c:	4607      	mov	r7, r0
 800b55e:	1c78      	adds	r0, r7, #1
 800b560:	d1d6      	bne.n	800b510 <_vfiprintf_r+0x1bc>
 800b562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b564:	07d9      	lsls	r1, r3, #31
 800b566:	d405      	bmi.n	800b574 <_vfiprintf_r+0x220>
 800b568:	89ab      	ldrh	r3, [r5, #12]
 800b56a:	059a      	lsls	r2, r3, #22
 800b56c:	d402      	bmi.n	800b574 <_vfiprintf_r+0x220>
 800b56e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b570:	f7ff fd7f 	bl	800b072 <__retarget_lock_release_recursive>
 800b574:	89ab      	ldrh	r3, [r5, #12]
 800b576:	065b      	lsls	r3, r3, #25
 800b578:	f53f af12 	bmi.w	800b3a0 <_vfiprintf_r+0x4c>
 800b57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b57e:	e711      	b.n	800b3a4 <_vfiprintf_r+0x50>
 800b580:	ab03      	add	r3, sp, #12
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	462a      	mov	r2, r5
 800b586:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <_vfiprintf_r+0x258>)
 800b588:	a904      	add	r1, sp, #16
 800b58a:	4630      	mov	r0, r6
 800b58c:	f000 f880 	bl	800b690 <_printf_i>
 800b590:	e7e4      	b.n	800b55c <_vfiprintf_r+0x208>
 800b592:	bf00      	nop
 800b594:	0800d090 	.word	0x0800d090
 800b598:	0800d0b0 	.word	0x0800d0b0
 800b59c:	0800d070 	.word	0x0800d070
 800b5a0:	0800d0d0 	.word	0x0800d0d0
 800b5a4:	0800d0da 	.word	0x0800d0da
 800b5a8:	00000000 	.word	0x00000000
 800b5ac:	0800b32f 	.word	0x0800b32f
 800b5b0:	0800d0d6 	.word	0x0800d0d6

0800b5b4 <_printf_common>:
 800b5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b8:	4616      	mov	r6, r2
 800b5ba:	4699      	mov	r9, r3
 800b5bc:	688a      	ldr	r2, [r1, #8]
 800b5be:	690b      	ldr	r3, [r1, #16]
 800b5c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	bfb8      	it	lt
 800b5c8:	4613      	movlt	r3, r2
 800b5ca:	6033      	str	r3, [r6, #0]
 800b5cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5d0:	4607      	mov	r7, r0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	b10a      	cbz	r2, 800b5da <_printf_common+0x26>
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	6033      	str	r3, [r6, #0]
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	0699      	lsls	r1, r3, #26
 800b5de:	bf42      	ittt	mi
 800b5e0:	6833      	ldrmi	r3, [r6, #0]
 800b5e2:	3302      	addmi	r3, #2
 800b5e4:	6033      	strmi	r3, [r6, #0]
 800b5e6:	6825      	ldr	r5, [r4, #0]
 800b5e8:	f015 0506 	ands.w	r5, r5, #6
 800b5ec:	d106      	bne.n	800b5fc <_printf_common+0x48>
 800b5ee:	f104 0a19 	add.w	sl, r4, #25
 800b5f2:	68e3      	ldr	r3, [r4, #12]
 800b5f4:	6832      	ldr	r2, [r6, #0]
 800b5f6:	1a9b      	subs	r3, r3, r2
 800b5f8:	42ab      	cmp	r3, r5
 800b5fa:	dc26      	bgt.n	800b64a <_printf_common+0x96>
 800b5fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b600:	1e13      	subs	r3, r2, #0
 800b602:	6822      	ldr	r2, [r4, #0]
 800b604:	bf18      	it	ne
 800b606:	2301      	movne	r3, #1
 800b608:	0692      	lsls	r2, r2, #26
 800b60a:	d42b      	bmi.n	800b664 <_printf_common+0xb0>
 800b60c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b610:	4649      	mov	r1, r9
 800b612:	4638      	mov	r0, r7
 800b614:	47c0      	blx	r8
 800b616:	3001      	adds	r0, #1
 800b618:	d01e      	beq.n	800b658 <_printf_common+0xa4>
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	68e5      	ldr	r5, [r4, #12]
 800b61e:	6832      	ldr	r2, [r6, #0]
 800b620:	f003 0306 	and.w	r3, r3, #6
 800b624:	2b04      	cmp	r3, #4
 800b626:	bf08      	it	eq
 800b628:	1aad      	subeq	r5, r5, r2
 800b62a:	68a3      	ldr	r3, [r4, #8]
 800b62c:	6922      	ldr	r2, [r4, #16]
 800b62e:	bf0c      	ite	eq
 800b630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b634:	2500      	movne	r5, #0
 800b636:	4293      	cmp	r3, r2
 800b638:	bfc4      	itt	gt
 800b63a:	1a9b      	subgt	r3, r3, r2
 800b63c:	18ed      	addgt	r5, r5, r3
 800b63e:	2600      	movs	r6, #0
 800b640:	341a      	adds	r4, #26
 800b642:	42b5      	cmp	r5, r6
 800b644:	d11a      	bne.n	800b67c <_printf_common+0xc8>
 800b646:	2000      	movs	r0, #0
 800b648:	e008      	b.n	800b65c <_printf_common+0xa8>
 800b64a:	2301      	movs	r3, #1
 800b64c:	4652      	mov	r2, sl
 800b64e:	4649      	mov	r1, r9
 800b650:	4638      	mov	r0, r7
 800b652:	47c0      	blx	r8
 800b654:	3001      	adds	r0, #1
 800b656:	d103      	bne.n	800b660 <_printf_common+0xac>
 800b658:	f04f 30ff 	mov.w	r0, #4294967295
 800b65c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b660:	3501      	adds	r5, #1
 800b662:	e7c6      	b.n	800b5f2 <_printf_common+0x3e>
 800b664:	18e1      	adds	r1, r4, r3
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	2030      	movs	r0, #48	; 0x30
 800b66a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b66e:	4422      	add	r2, r4
 800b670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b678:	3302      	adds	r3, #2
 800b67a:	e7c7      	b.n	800b60c <_printf_common+0x58>
 800b67c:	2301      	movs	r3, #1
 800b67e:	4622      	mov	r2, r4
 800b680:	4649      	mov	r1, r9
 800b682:	4638      	mov	r0, r7
 800b684:	47c0      	blx	r8
 800b686:	3001      	adds	r0, #1
 800b688:	d0e6      	beq.n	800b658 <_printf_common+0xa4>
 800b68a:	3601      	adds	r6, #1
 800b68c:	e7d9      	b.n	800b642 <_printf_common+0x8e>
	...

0800b690 <_printf_i>:
 800b690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b694:	7e0f      	ldrb	r7, [r1, #24]
 800b696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b698:	2f78      	cmp	r7, #120	; 0x78
 800b69a:	4691      	mov	r9, r2
 800b69c:	4680      	mov	r8, r0
 800b69e:	460c      	mov	r4, r1
 800b6a0:	469a      	mov	sl, r3
 800b6a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6a6:	d807      	bhi.n	800b6b8 <_printf_i+0x28>
 800b6a8:	2f62      	cmp	r7, #98	; 0x62
 800b6aa:	d80a      	bhi.n	800b6c2 <_printf_i+0x32>
 800b6ac:	2f00      	cmp	r7, #0
 800b6ae:	f000 80d8 	beq.w	800b862 <_printf_i+0x1d2>
 800b6b2:	2f58      	cmp	r7, #88	; 0x58
 800b6b4:	f000 80a3 	beq.w	800b7fe <_printf_i+0x16e>
 800b6b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6c0:	e03a      	b.n	800b738 <_printf_i+0xa8>
 800b6c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6c6:	2b15      	cmp	r3, #21
 800b6c8:	d8f6      	bhi.n	800b6b8 <_printf_i+0x28>
 800b6ca:	a101      	add	r1, pc, #4	; (adr r1, 800b6d0 <_printf_i+0x40>)
 800b6cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6d0:	0800b729 	.word	0x0800b729
 800b6d4:	0800b73d 	.word	0x0800b73d
 800b6d8:	0800b6b9 	.word	0x0800b6b9
 800b6dc:	0800b6b9 	.word	0x0800b6b9
 800b6e0:	0800b6b9 	.word	0x0800b6b9
 800b6e4:	0800b6b9 	.word	0x0800b6b9
 800b6e8:	0800b73d 	.word	0x0800b73d
 800b6ec:	0800b6b9 	.word	0x0800b6b9
 800b6f0:	0800b6b9 	.word	0x0800b6b9
 800b6f4:	0800b6b9 	.word	0x0800b6b9
 800b6f8:	0800b6b9 	.word	0x0800b6b9
 800b6fc:	0800b849 	.word	0x0800b849
 800b700:	0800b76d 	.word	0x0800b76d
 800b704:	0800b82b 	.word	0x0800b82b
 800b708:	0800b6b9 	.word	0x0800b6b9
 800b70c:	0800b6b9 	.word	0x0800b6b9
 800b710:	0800b86b 	.word	0x0800b86b
 800b714:	0800b6b9 	.word	0x0800b6b9
 800b718:	0800b76d 	.word	0x0800b76d
 800b71c:	0800b6b9 	.word	0x0800b6b9
 800b720:	0800b6b9 	.word	0x0800b6b9
 800b724:	0800b833 	.word	0x0800b833
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	1d1a      	adds	r2, r3, #4
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	602a      	str	r2, [r5, #0]
 800b730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b738:	2301      	movs	r3, #1
 800b73a:	e0a3      	b.n	800b884 <_printf_i+0x1f4>
 800b73c:	6820      	ldr	r0, [r4, #0]
 800b73e:	6829      	ldr	r1, [r5, #0]
 800b740:	0606      	lsls	r6, r0, #24
 800b742:	f101 0304 	add.w	r3, r1, #4
 800b746:	d50a      	bpl.n	800b75e <_printf_i+0xce>
 800b748:	680e      	ldr	r6, [r1, #0]
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	2e00      	cmp	r6, #0
 800b74e:	da03      	bge.n	800b758 <_printf_i+0xc8>
 800b750:	232d      	movs	r3, #45	; 0x2d
 800b752:	4276      	negs	r6, r6
 800b754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b758:	485e      	ldr	r0, [pc, #376]	; (800b8d4 <_printf_i+0x244>)
 800b75a:	230a      	movs	r3, #10
 800b75c:	e019      	b.n	800b792 <_printf_i+0x102>
 800b75e:	680e      	ldr	r6, [r1, #0]
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b766:	bf18      	it	ne
 800b768:	b236      	sxthne	r6, r6
 800b76a:	e7ef      	b.n	800b74c <_printf_i+0xbc>
 800b76c:	682b      	ldr	r3, [r5, #0]
 800b76e:	6820      	ldr	r0, [r4, #0]
 800b770:	1d19      	adds	r1, r3, #4
 800b772:	6029      	str	r1, [r5, #0]
 800b774:	0601      	lsls	r1, r0, #24
 800b776:	d501      	bpl.n	800b77c <_printf_i+0xec>
 800b778:	681e      	ldr	r6, [r3, #0]
 800b77a:	e002      	b.n	800b782 <_printf_i+0xf2>
 800b77c:	0646      	lsls	r6, r0, #25
 800b77e:	d5fb      	bpl.n	800b778 <_printf_i+0xe8>
 800b780:	881e      	ldrh	r6, [r3, #0]
 800b782:	4854      	ldr	r0, [pc, #336]	; (800b8d4 <_printf_i+0x244>)
 800b784:	2f6f      	cmp	r7, #111	; 0x6f
 800b786:	bf0c      	ite	eq
 800b788:	2308      	moveq	r3, #8
 800b78a:	230a      	movne	r3, #10
 800b78c:	2100      	movs	r1, #0
 800b78e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b792:	6865      	ldr	r5, [r4, #4]
 800b794:	60a5      	str	r5, [r4, #8]
 800b796:	2d00      	cmp	r5, #0
 800b798:	bfa2      	ittt	ge
 800b79a:	6821      	ldrge	r1, [r4, #0]
 800b79c:	f021 0104 	bicge.w	r1, r1, #4
 800b7a0:	6021      	strge	r1, [r4, #0]
 800b7a2:	b90e      	cbnz	r6, 800b7a8 <_printf_i+0x118>
 800b7a4:	2d00      	cmp	r5, #0
 800b7a6:	d04d      	beq.n	800b844 <_printf_i+0x1b4>
 800b7a8:	4615      	mov	r5, r2
 800b7aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7ae:	fb03 6711 	mls	r7, r3, r1, r6
 800b7b2:	5dc7      	ldrb	r7, [r0, r7]
 800b7b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7b8:	4637      	mov	r7, r6
 800b7ba:	42bb      	cmp	r3, r7
 800b7bc:	460e      	mov	r6, r1
 800b7be:	d9f4      	bls.n	800b7aa <_printf_i+0x11a>
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	d10b      	bne.n	800b7dc <_printf_i+0x14c>
 800b7c4:	6823      	ldr	r3, [r4, #0]
 800b7c6:	07de      	lsls	r6, r3, #31
 800b7c8:	d508      	bpl.n	800b7dc <_printf_i+0x14c>
 800b7ca:	6923      	ldr	r3, [r4, #16]
 800b7cc:	6861      	ldr	r1, [r4, #4]
 800b7ce:	4299      	cmp	r1, r3
 800b7d0:	bfde      	ittt	le
 800b7d2:	2330      	movle	r3, #48	; 0x30
 800b7d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b7d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b7dc:	1b52      	subs	r2, r2, r5
 800b7de:	6122      	str	r2, [r4, #16]
 800b7e0:	f8cd a000 	str.w	sl, [sp]
 800b7e4:	464b      	mov	r3, r9
 800b7e6:	aa03      	add	r2, sp, #12
 800b7e8:	4621      	mov	r1, r4
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	f7ff fee2 	bl	800b5b4 <_printf_common>
 800b7f0:	3001      	adds	r0, #1
 800b7f2:	d14c      	bne.n	800b88e <_printf_i+0x1fe>
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	b004      	add	sp, #16
 800b7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7fe:	4835      	ldr	r0, [pc, #212]	; (800b8d4 <_printf_i+0x244>)
 800b800:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b804:	6829      	ldr	r1, [r5, #0]
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	f851 6b04 	ldr.w	r6, [r1], #4
 800b80c:	6029      	str	r1, [r5, #0]
 800b80e:	061d      	lsls	r5, r3, #24
 800b810:	d514      	bpl.n	800b83c <_printf_i+0x1ac>
 800b812:	07df      	lsls	r7, r3, #31
 800b814:	bf44      	itt	mi
 800b816:	f043 0320 	orrmi.w	r3, r3, #32
 800b81a:	6023      	strmi	r3, [r4, #0]
 800b81c:	b91e      	cbnz	r6, 800b826 <_printf_i+0x196>
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	f023 0320 	bic.w	r3, r3, #32
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	2310      	movs	r3, #16
 800b828:	e7b0      	b.n	800b78c <_printf_i+0xfc>
 800b82a:	6823      	ldr	r3, [r4, #0]
 800b82c:	f043 0320 	orr.w	r3, r3, #32
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	2378      	movs	r3, #120	; 0x78
 800b834:	4828      	ldr	r0, [pc, #160]	; (800b8d8 <_printf_i+0x248>)
 800b836:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b83a:	e7e3      	b.n	800b804 <_printf_i+0x174>
 800b83c:	0659      	lsls	r1, r3, #25
 800b83e:	bf48      	it	mi
 800b840:	b2b6      	uxthmi	r6, r6
 800b842:	e7e6      	b.n	800b812 <_printf_i+0x182>
 800b844:	4615      	mov	r5, r2
 800b846:	e7bb      	b.n	800b7c0 <_printf_i+0x130>
 800b848:	682b      	ldr	r3, [r5, #0]
 800b84a:	6826      	ldr	r6, [r4, #0]
 800b84c:	6961      	ldr	r1, [r4, #20]
 800b84e:	1d18      	adds	r0, r3, #4
 800b850:	6028      	str	r0, [r5, #0]
 800b852:	0635      	lsls	r5, r6, #24
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	d501      	bpl.n	800b85c <_printf_i+0x1cc>
 800b858:	6019      	str	r1, [r3, #0]
 800b85a:	e002      	b.n	800b862 <_printf_i+0x1d2>
 800b85c:	0670      	lsls	r0, r6, #25
 800b85e:	d5fb      	bpl.n	800b858 <_printf_i+0x1c8>
 800b860:	8019      	strh	r1, [r3, #0]
 800b862:	2300      	movs	r3, #0
 800b864:	6123      	str	r3, [r4, #16]
 800b866:	4615      	mov	r5, r2
 800b868:	e7ba      	b.n	800b7e0 <_printf_i+0x150>
 800b86a:	682b      	ldr	r3, [r5, #0]
 800b86c:	1d1a      	adds	r2, r3, #4
 800b86e:	602a      	str	r2, [r5, #0]
 800b870:	681d      	ldr	r5, [r3, #0]
 800b872:	6862      	ldr	r2, [r4, #4]
 800b874:	2100      	movs	r1, #0
 800b876:	4628      	mov	r0, r5
 800b878:	f7f4 fc8a 	bl	8000190 <memchr>
 800b87c:	b108      	cbz	r0, 800b882 <_printf_i+0x1f2>
 800b87e:	1b40      	subs	r0, r0, r5
 800b880:	6060      	str	r0, [r4, #4]
 800b882:	6863      	ldr	r3, [r4, #4]
 800b884:	6123      	str	r3, [r4, #16]
 800b886:	2300      	movs	r3, #0
 800b888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b88c:	e7a8      	b.n	800b7e0 <_printf_i+0x150>
 800b88e:	6923      	ldr	r3, [r4, #16]
 800b890:	462a      	mov	r2, r5
 800b892:	4649      	mov	r1, r9
 800b894:	4640      	mov	r0, r8
 800b896:	47d0      	blx	sl
 800b898:	3001      	adds	r0, #1
 800b89a:	d0ab      	beq.n	800b7f4 <_printf_i+0x164>
 800b89c:	6823      	ldr	r3, [r4, #0]
 800b89e:	079b      	lsls	r3, r3, #30
 800b8a0:	d413      	bmi.n	800b8ca <_printf_i+0x23a>
 800b8a2:	68e0      	ldr	r0, [r4, #12]
 800b8a4:	9b03      	ldr	r3, [sp, #12]
 800b8a6:	4298      	cmp	r0, r3
 800b8a8:	bfb8      	it	lt
 800b8aa:	4618      	movlt	r0, r3
 800b8ac:	e7a4      	b.n	800b7f8 <_printf_i+0x168>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	4632      	mov	r2, r6
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	4640      	mov	r0, r8
 800b8b6:	47d0      	blx	sl
 800b8b8:	3001      	adds	r0, #1
 800b8ba:	d09b      	beq.n	800b7f4 <_printf_i+0x164>
 800b8bc:	3501      	adds	r5, #1
 800b8be:	68e3      	ldr	r3, [r4, #12]
 800b8c0:	9903      	ldr	r1, [sp, #12]
 800b8c2:	1a5b      	subs	r3, r3, r1
 800b8c4:	42ab      	cmp	r3, r5
 800b8c6:	dcf2      	bgt.n	800b8ae <_printf_i+0x21e>
 800b8c8:	e7eb      	b.n	800b8a2 <_printf_i+0x212>
 800b8ca:	2500      	movs	r5, #0
 800b8cc:	f104 0619 	add.w	r6, r4, #25
 800b8d0:	e7f5      	b.n	800b8be <_printf_i+0x22e>
 800b8d2:	bf00      	nop
 800b8d4:	0800d0e1 	.word	0x0800d0e1
 800b8d8:	0800d0f2 	.word	0x0800d0f2

0800b8dc <_putc_r>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	460d      	mov	r5, r1
 800b8e0:	4614      	mov	r4, r2
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	b118      	cbz	r0, 800b8ee <_putc_r+0x12>
 800b8e6:	6983      	ldr	r3, [r0, #24]
 800b8e8:	b90b      	cbnz	r3, 800b8ee <_putc_r+0x12>
 800b8ea:	f7ff fb23 	bl	800af34 <__sinit>
 800b8ee:	4b1c      	ldr	r3, [pc, #112]	; (800b960 <_putc_r+0x84>)
 800b8f0:	429c      	cmp	r4, r3
 800b8f2:	d124      	bne.n	800b93e <_putc_r+0x62>
 800b8f4:	6874      	ldr	r4, [r6, #4]
 800b8f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8f8:	07d8      	lsls	r0, r3, #31
 800b8fa:	d405      	bmi.n	800b908 <_putc_r+0x2c>
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	0599      	lsls	r1, r3, #22
 800b900:	d402      	bmi.n	800b908 <_putc_r+0x2c>
 800b902:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b904:	f7ff fbb4 	bl	800b070 <__retarget_lock_acquire_recursive>
 800b908:	68a3      	ldr	r3, [r4, #8]
 800b90a:	3b01      	subs	r3, #1
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	60a3      	str	r3, [r4, #8]
 800b910:	da05      	bge.n	800b91e <_putc_r+0x42>
 800b912:	69a2      	ldr	r2, [r4, #24]
 800b914:	4293      	cmp	r3, r2
 800b916:	db1c      	blt.n	800b952 <_putc_r+0x76>
 800b918:	b2eb      	uxtb	r3, r5
 800b91a:	2b0a      	cmp	r3, #10
 800b91c:	d019      	beq.n	800b952 <_putc_r+0x76>
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	1c5a      	adds	r2, r3, #1
 800b922:	6022      	str	r2, [r4, #0]
 800b924:	701d      	strb	r5, [r3, #0]
 800b926:	b2ed      	uxtb	r5, r5
 800b928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b92a:	07da      	lsls	r2, r3, #31
 800b92c:	d405      	bmi.n	800b93a <_putc_r+0x5e>
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	059b      	lsls	r3, r3, #22
 800b932:	d402      	bmi.n	800b93a <_putc_r+0x5e>
 800b934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b936:	f7ff fb9c 	bl	800b072 <__retarget_lock_release_recursive>
 800b93a:	4628      	mov	r0, r5
 800b93c:	bd70      	pop	{r4, r5, r6, pc}
 800b93e:	4b09      	ldr	r3, [pc, #36]	; (800b964 <_putc_r+0x88>)
 800b940:	429c      	cmp	r4, r3
 800b942:	d101      	bne.n	800b948 <_putc_r+0x6c>
 800b944:	68b4      	ldr	r4, [r6, #8]
 800b946:	e7d6      	b.n	800b8f6 <_putc_r+0x1a>
 800b948:	4b07      	ldr	r3, [pc, #28]	; (800b968 <_putc_r+0x8c>)
 800b94a:	429c      	cmp	r4, r3
 800b94c:	bf08      	it	eq
 800b94e:	68f4      	ldreq	r4, [r6, #12]
 800b950:	e7d1      	b.n	800b8f6 <_putc_r+0x1a>
 800b952:	4629      	mov	r1, r5
 800b954:	4622      	mov	r2, r4
 800b956:	4630      	mov	r0, r6
 800b958:	f7ff f912 	bl	800ab80 <__swbuf_r>
 800b95c:	4605      	mov	r5, r0
 800b95e:	e7e3      	b.n	800b928 <_putc_r+0x4c>
 800b960:	0800d090 	.word	0x0800d090
 800b964:	0800d0b0 	.word	0x0800d0b0
 800b968:	0800d070 	.word	0x0800d070

0800b96c <_sbrk_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4d06      	ldr	r5, [pc, #24]	; (800b988 <_sbrk_r+0x1c>)
 800b970:	2300      	movs	r3, #0
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	f7f7 f854 	bl	8002a24 <_sbrk>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_sbrk_r+0x1a>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_sbrk_r+0x1a>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	200013fc 	.word	0x200013fc

0800b98c <__sread>:
 800b98c:	b510      	push	{r4, lr}
 800b98e:	460c      	mov	r4, r1
 800b990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b994:	f000 f8ac 	bl	800baf0 <_read_r>
 800b998:	2800      	cmp	r0, #0
 800b99a:	bfab      	itete	ge
 800b99c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b99e:	89a3      	ldrhlt	r3, [r4, #12]
 800b9a0:	181b      	addge	r3, r3, r0
 800b9a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9a6:	bfac      	ite	ge
 800b9a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9aa:	81a3      	strhlt	r3, [r4, #12]
 800b9ac:	bd10      	pop	{r4, pc}

0800b9ae <__swrite>:
 800b9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b2:	461f      	mov	r7, r3
 800b9b4:	898b      	ldrh	r3, [r1, #12]
 800b9b6:	05db      	lsls	r3, r3, #23
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	4616      	mov	r6, r2
 800b9be:	d505      	bpl.n	800b9cc <__swrite+0x1e>
 800b9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f000 f874 	bl	800bab4 <_lseek_r>
 800b9cc:	89a3      	ldrh	r3, [r4, #12]
 800b9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9d6:	81a3      	strh	r3, [r4, #12]
 800b9d8:	4632      	mov	r2, r6
 800b9da:	463b      	mov	r3, r7
 800b9dc:	4628      	mov	r0, r5
 800b9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e2:	f000 b823 	b.w	800ba2c <_write_r>

0800b9e6 <__sseek>:
 800b9e6:	b510      	push	{r4, lr}
 800b9e8:	460c      	mov	r4, r1
 800b9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ee:	f000 f861 	bl	800bab4 <_lseek_r>
 800b9f2:	1c43      	adds	r3, r0, #1
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	bf15      	itete	ne
 800b9f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba02:	81a3      	strheq	r3, [r4, #12]
 800ba04:	bf18      	it	ne
 800ba06:	81a3      	strhne	r3, [r4, #12]
 800ba08:	bd10      	pop	{r4, pc}

0800ba0a <__sclose>:
 800ba0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba0e:	f000 b81f 	b.w	800ba50 <_close_r>

0800ba12 <strchr>:
 800ba12:	b2c9      	uxtb	r1, r1
 800ba14:	4603      	mov	r3, r0
 800ba16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba1a:	b11a      	cbz	r2, 800ba24 <strchr+0x12>
 800ba1c:	428a      	cmp	r2, r1
 800ba1e:	d1f9      	bne.n	800ba14 <strchr+0x2>
 800ba20:	4618      	mov	r0, r3
 800ba22:	4770      	bx	lr
 800ba24:	2900      	cmp	r1, #0
 800ba26:	bf18      	it	ne
 800ba28:	2300      	movne	r3, #0
 800ba2a:	e7f9      	b.n	800ba20 <strchr+0xe>

0800ba2c <_write_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4d07      	ldr	r5, [pc, #28]	; (800ba4c <_write_r+0x20>)
 800ba30:	4604      	mov	r4, r0
 800ba32:	4608      	mov	r0, r1
 800ba34:	4611      	mov	r1, r2
 800ba36:	2200      	movs	r2, #0
 800ba38:	602a      	str	r2, [r5, #0]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	f7f6 fb6a 	bl	8002114 <_write>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d102      	bne.n	800ba4a <_write_r+0x1e>
 800ba44:	682b      	ldr	r3, [r5, #0]
 800ba46:	b103      	cbz	r3, 800ba4a <_write_r+0x1e>
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	bd38      	pop	{r3, r4, r5, pc}
 800ba4c:	200013fc 	.word	0x200013fc

0800ba50 <_close_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4d06      	ldr	r5, [pc, #24]	; (800ba6c <_close_r+0x1c>)
 800ba54:	2300      	movs	r3, #0
 800ba56:	4604      	mov	r4, r0
 800ba58:	4608      	mov	r0, r1
 800ba5a:	602b      	str	r3, [r5, #0]
 800ba5c:	f7f6 ffad 	bl	80029ba <_close>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_close_r+0x1a>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_close_r+0x1a>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	200013fc 	.word	0x200013fc

0800ba70 <_fstat_r>:
 800ba70:	b538      	push	{r3, r4, r5, lr}
 800ba72:	4d07      	ldr	r5, [pc, #28]	; (800ba90 <_fstat_r+0x20>)
 800ba74:	2300      	movs	r3, #0
 800ba76:	4604      	mov	r4, r0
 800ba78:	4608      	mov	r0, r1
 800ba7a:	4611      	mov	r1, r2
 800ba7c:	602b      	str	r3, [r5, #0]
 800ba7e:	f7f6 ffa8 	bl	80029d2 <_fstat>
 800ba82:	1c43      	adds	r3, r0, #1
 800ba84:	d102      	bne.n	800ba8c <_fstat_r+0x1c>
 800ba86:	682b      	ldr	r3, [r5, #0]
 800ba88:	b103      	cbz	r3, 800ba8c <_fstat_r+0x1c>
 800ba8a:	6023      	str	r3, [r4, #0]
 800ba8c:	bd38      	pop	{r3, r4, r5, pc}
 800ba8e:	bf00      	nop
 800ba90:	200013fc 	.word	0x200013fc

0800ba94 <_isatty_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	4d06      	ldr	r5, [pc, #24]	; (800bab0 <_isatty_r+0x1c>)
 800ba98:	2300      	movs	r3, #0
 800ba9a:	4604      	mov	r4, r0
 800ba9c:	4608      	mov	r0, r1
 800ba9e:	602b      	str	r3, [r5, #0]
 800baa0:	f7f6 ffa7 	bl	80029f2 <_isatty>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_isatty_r+0x1a>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_isatty_r+0x1a>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	200013fc 	.word	0x200013fc

0800bab4 <_lseek_r>:
 800bab4:	b538      	push	{r3, r4, r5, lr}
 800bab6:	4d07      	ldr	r5, [pc, #28]	; (800bad4 <_lseek_r+0x20>)
 800bab8:	4604      	mov	r4, r0
 800baba:	4608      	mov	r0, r1
 800babc:	4611      	mov	r1, r2
 800babe:	2200      	movs	r2, #0
 800bac0:	602a      	str	r2, [r5, #0]
 800bac2:	461a      	mov	r2, r3
 800bac4:	f7f6 ffa0 	bl	8002a08 <_lseek>
 800bac8:	1c43      	adds	r3, r0, #1
 800baca:	d102      	bne.n	800bad2 <_lseek_r+0x1e>
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	b103      	cbz	r3, 800bad2 <_lseek_r+0x1e>
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	bd38      	pop	{r3, r4, r5, pc}
 800bad4:	200013fc 	.word	0x200013fc

0800bad8 <__malloc_lock>:
 800bad8:	4801      	ldr	r0, [pc, #4]	; (800bae0 <__malloc_lock+0x8>)
 800bada:	f7ff bac9 	b.w	800b070 <__retarget_lock_acquire_recursive>
 800bade:	bf00      	nop
 800bae0:	200013f0 	.word	0x200013f0

0800bae4 <__malloc_unlock>:
 800bae4:	4801      	ldr	r0, [pc, #4]	; (800baec <__malloc_unlock+0x8>)
 800bae6:	f7ff bac4 	b.w	800b072 <__retarget_lock_release_recursive>
 800baea:	bf00      	nop
 800baec:	200013f0 	.word	0x200013f0

0800baf0 <_read_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d07      	ldr	r5, [pc, #28]	; (800bb10 <_read_r+0x20>)
 800baf4:	4604      	mov	r4, r0
 800baf6:	4608      	mov	r0, r1
 800baf8:	4611      	mov	r1, r2
 800bafa:	2200      	movs	r2, #0
 800bafc:	602a      	str	r2, [r5, #0]
 800bafe:	461a      	mov	r2, r3
 800bb00:	f7f6 ff3e 	bl	8002980 <_read>
 800bb04:	1c43      	adds	r3, r0, #1
 800bb06:	d102      	bne.n	800bb0e <_read_r+0x1e>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b103      	cbz	r3, 800bb0e <_read_r+0x1e>
 800bb0c:	6023      	str	r3, [r4, #0]
 800bb0e:	bd38      	pop	{r3, r4, r5, pc}
 800bb10:	200013fc 	.word	0x200013fc

0800bb14 <_init>:
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	bf00      	nop
 800bb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb1a:	bc08      	pop	{r3}
 800bb1c:	469e      	mov	lr, r3
 800bb1e:	4770      	bx	lr

0800bb20 <_fini>:
 800bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb22:	bf00      	nop
 800bb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb26:	bc08      	pop	{r3}
 800bb28:	469e      	mov	lr, r3
 800bb2a:	4770      	bx	lr
 800bb2c:	0000      	movs	r0, r0
	...

0800bb30 <__FLASH_Program_Fast_veneer>:
 800bb30:	f85f f000 	ldr.w	pc, [pc]	; 800bb34 <__FLASH_Program_Fast_veneer+0x4>
 800bb34:	20000099 	.word	0x20000099

Disassembly of section .data:

20000008 <SystemCoreClock>:
20000008:	003d0900                                ..=.

2000000c <uwTickPrio>:
2000000c:	00000010                                ....

20000010 <uwTickFreq>:
20000010:	00000001                                ....

20000014 <a_AdvData>:
20000014:	06000a02 69774509 0305656e feedbeef     .....Ewine......
20000024:	0030ff04                                 ..0..

20000029 <SizeGssid>:
20000029:	                                         .

2000002a <SizeGpass>:
2000002a:	                                         ..

2000002c <TaskMask>:
2000002c:	ffffffff                                ....

20000030 <SuperMask>:
20000030:	ffffffff                                ....

20000034 <_impure_ptr>:
20000034:	20000038                                8.. 

20000038 <impure_data>:
20000038:	00000000 0800d090 0800d0b0 0800d070     ............p...
	...

20000098 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000098:	b480      	push	{r7}
2000009a:	b089      	sub	sp, #36	; 0x24
2000009c:	af00      	add	r7, sp, #0
2000009e:	6078      	str	r0, [r7, #4]
200000a0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
200000a2:	2380      	movs	r3, #128	; 0x80
200000a4:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
200000a6:	687b      	ldr	r3, [r7, #4]
200000a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
200000aa:	683b      	ldr	r3, [r7, #0]
200000ac:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000ae:	4b18      	ldr	r3, [pc, #96]	; (20000110 <FLASH_Program_Fast+0x78>)
200000b0:	695b      	ldr	r3, [r3, #20]
200000b2:	4a17      	ldr	r2, [pc, #92]	; (20000110 <FLASH_Program_Fast+0x78>)
200000b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
200000b8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000ba:	f3ef 8310 	mrs	r3, PRIMASK
200000be:	60fb      	str	r3, [r7, #12]
  return(result);
200000c0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000c4:	b672      	cpsid	i
}
200000c6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
200000c8:	697b      	ldr	r3, [r7, #20]
200000ca:	681a      	ldr	r2, [r3, #0]
200000cc:	69bb      	ldr	r3, [r7, #24]
200000ce:	601a      	str	r2, [r3, #0]
    dest_addr++;
200000d0:	69bb      	ldr	r3, [r7, #24]
200000d2:	3304      	adds	r3, #4
200000d4:	61bb      	str	r3, [r7, #24]
    src_addr++;
200000d6:	697b      	ldr	r3, [r7, #20]
200000d8:	3304      	adds	r3, #4
200000da:	617b      	str	r3, [r7, #20]
    row_index--;
200000dc:	7ffb      	ldrb	r3, [r7, #31]
200000de:	3b01      	subs	r3, #1
200000e0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
200000e2:	7ffb      	ldrb	r3, [r7, #31]
200000e4:	2b00      	cmp	r3, #0
200000e6:	d1ef      	bne.n	200000c8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200000e8:	bf00      	nop
200000ea:	4b09      	ldr	r3, [pc, #36]	; (20000110 <FLASH_Program_Fast+0x78>)
200000ec:	691b      	ldr	r3, [r3, #16]
200000ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200000f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200000f6:	d0f8      	beq.n	200000ea <FLASH_Program_Fast+0x52>
200000f8:	693b      	ldr	r3, [r7, #16]
200000fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000fc:	68bb      	ldr	r3, [r7, #8]
200000fe:	f383 8810 	msr	PRIMASK, r3
}
20000102:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000104:	bf00      	nop
20000106:	3724      	adds	r7, #36	; 0x24
20000108:	46bd      	mov	sp, r7
2000010a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000010e:	4770      	bx	lr
20000110:	58004000 	.word	0x58004000
