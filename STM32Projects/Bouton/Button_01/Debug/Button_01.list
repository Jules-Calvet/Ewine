
Button_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004800  08004800  00014800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004808  08004808  00014808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000008  08004810  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003bc  20000078  08004880  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000434  08004880  00020434  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014aad  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a7a  00000000  00000000  00034b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e0  00000000  00000000  000375d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013e8  00000000  00000000  00038ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00022988  00000000  00000000  00039e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000122b6  00000000  00000000  0005c820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000da1bd  00000000  00000000  0006ead6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00148c93  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005da8  00000000  00000000  00148ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000078 	.word	0x20000078
 8000158:	00000000 	.word	0x00000000
 800015c:	08004668 	.word	0x08004668

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000007c 	.word	0x2000007c
 8000178:	08004668 	.word	0x08004668

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b974 	b.w	800047c <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	468e      	mov	lr, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14d      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4694      	mov	ip, r2
 80001be:	d969      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b152      	cbz	r2, 80001dc <__udivmoddi4+0x30>
 80001c6:	fa01 f302 	lsl.w	r3, r1, r2
 80001ca:	f1c2 0120 	rsb	r1, r2, #32
 80001ce:	fa20 f101 	lsr.w	r1, r0, r1
 80001d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d6:	ea41 0e03 	orr.w	lr, r1, r3
 80001da:	4094      	lsls	r4, r2
 80001dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80001e0:	0c21      	lsrs	r1, r4, #16
 80001e2:	fbbe f6f8 	udiv	r6, lr, r8
 80001e6:	fa1f f78c 	uxth.w	r7, ip
 80001ea:	fb08 e316 	mls	r3, r8, r6, lr
 80001ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f2:	fb06 f107 	mul.w	r1, r6, r7
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000202:	f080 811f 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 811c 	bls.w	8000444 <__udivmoddi4+0x298>
 800020c:	3e02      	subs	r6, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f8 	udiv	r0, r3, r8
 8000218:	fb08 3310 	mls	r3, r8, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x92>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 810a 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8107 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000242:	1be4      	subs	r4, r4, r7
 8000244:	2600      	movs	r6, #0
 8000246:	b11d      	cbz	r5, 8000250 <__udivmoddi4+0xa4>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c5 4300 	strd	r4, r3, [r5]
 8000250:	4631      	mov	r1, r6
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0xc2>
 800025a:	2d00      	cmp	r5, #0
 800025c:	f000 80ef 	beq.w	800043e <__udivmoddi4+0x292>
 8000260:	2600      	movs	r6, #0
 8000262:	e9c5 0100 	strd	r0, r1, [r5]
 8000266:	4630      	mov	r0, r6
 8000268:	4631      	mov	r1, r6
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f683 	clz	r6, r3
 8000272:	2e00      	cmp	r6, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	428b      	cmp	r3, r1
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80f9 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb61 0303 	sbc.w	r3, r1, r3
 8000286:	2001      	movs	r0, #1
 8000288:	469e      	mov	lr, r3
 800028a:	2d00      	cmp	r5, #0
 800028c:	d0e0      	beq.n	8000250 <__udivmoddi4+0xa4>
 800028e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000292:	e7dd      	b.n	8000250 <__udivmoddi4+0xa4>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8092 	bne.w	80003c6 <__udivmoddi4+0x21a>
 80002a2:	eba1 010c 	sub.w	r1, r1, ip
 80002a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002aa:	fa1f fe8c 	uxth.w	lr, ip
 80002ae:	2601      	movs	r6, #1
 80002b0:	0c20      	lsrs	r0, r4, #16
 80002b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80002b6:	fb07 1113 	mls	r1, r7, r3, r1
 80002ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	4288      	cmp	r0, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0101 	adds.w	r1, ip, r1
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	4288      	cmp	r0, r1
 80002d2:	f200 80cb 	bhi.w	800046c <__udivmoddi4+0x2c0>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a09      	subs	r1, r1, r0
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80002e0:	fb07 1110 	mls	r1, r7, r0, r1
 80002e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80002e8:	fb0e fe00 	mul.w	lr, lr, r0
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80bb 	bhi.w	8000476 <__udivmoddi4+0x2ca>
 8000300:	4608      	mov	r0, r1
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79c      	b.n	8000246 <__udivmoddi4+0x9a>
 800030c:	f1c6 0720 	rsb	r7, r6, #32
 8000310:	40b3      	lsls	r3, r6
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa20 f407 	lsr.w	r4, r0, r7
 800031e:	fa01 f306 	lsl.w	r3, r1, r6
 8000322:	431c      	orrs	r4, r3
 8000324:	40f9      	lsrs	r1, r7
 8000326:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800032a:	fa00 f306 	lsl.w	r3, r0, r6
 800032e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000332:	0c20      	lsrs	r0, r4, #16
 8000334:	fa1f fe8c 	uxth.w	lr, ip
 8000338:	fb09 1118 	mls	r1, r9, r8, r1
 800033c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000340:	fb08 f00e 	mul.w	r0, r8, lr
 8000344:	4288      	cmp	r0, r1
 8000346:	fa02 f206 	lsl.w	r2, r2, r6
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0101 	adds.w	r1, ip, r1
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	4288      	cmp	r0, r1
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4461      	add	r1, ip
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f9 	udiv	r0, r1, r9
 800036c:	fb09 1110 	mls	r1, r9, r0, r1
 8000370:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000374:	fb00 fe0e 	mul.w	lr, r0, lr
 8000378:	458e      	cmp	lr, r1
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0101 	adds.w	r1, ip, r1
 8000380:	f100 34ff 	add.w	r4, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	458e      	cmp	lr, r1
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4461      	add	r1, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9402 	umull	r9, r4, r0, r2
 8000396:	eba1 010e 	sub.w	r1, r1, lr
 800039a:	42a1      	cmp	r1, r4
 800039c:	46c8      	mov	r8, r9
 800039e:	46a6      	mov	lr, r4
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	b15d      	cbz	r5, 80003be <__udivmoddi4+0x212>
 80003a6:	ebb3 0208 	subs.w	r2, r3, r8
 80003aa:	eb61 010e 	sbc.w	r1, r1, lr
 80003ae:	fa01 f707 	lsl.w	r7, r1, r7
 80003b2:	fa22 f306 	lsr.w	r3, r2, r6
 80003b6:	40f1      	lsrs	r1, r6
 80003b8:	431f      	orrs	r7, r3
 80003ba:	e9c5 7100 	strd	r7, r1, [r5]
 80003be:	2600      	movs	r6, #0
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	f1c2 0320 	rsb	r3, r2, #32
 80003ca:	40d8      	lsrs	r0, r3
 80003cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d0:	fa21 f303 	lsr.w	r3, r1, r3
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4301      	orrs	r1, r0
 80003d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80003e4:	fb07 3610 	mls	r6, r7, r0, r3
 80003e8:	0c0b      	lsrs	r3, r1, #16
 80003ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80003ee:	fb00 f60e 	mul.w	r6, r0, lr
 80003f2:	429e      	cmp	r6, r3
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	429e      	cmp	r6, r3
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3802      	subs	r0, #2
 800040a:	4463      	add	r3, ip
 800040c:	1b9b      	subs	r3, r3, r6
 800040e:	b289      	uxth	r1, r1
 8000410:	fbb3 f6f7 	udiv	r6, r3, r7
 8000414:	fb07 3316 	mls	r3, r7, r6, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb06 f30e 	mul.w	r3, r6, lr
 8000420:	428b      	cmp	r3, r1
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0101 	adds.w	r1, ip, r1
 8000428:	f106 38ff 	add.w	r8, r6, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	428b      	cmp	r3, r1
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3e02      	subs	r6, #2
 8000434:	4461      	add	r1, ip
 8000436:	1ac9      	subs	r1, r1, r3
 8000438:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	462e      	mov	r6, r5
 8000440:	4628      	mov	r0, r5
 8000442:	e705      	b.n	8000250 <__udivmoddi4+0xa4>
 8000444:	4606      	mov	r6, r0
 8000446:	e6e3      	b.n	8000210 <__udivmoddi4+0x64>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f8      	b.n	800023e <__udivmoddi4+0x92>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4646      	mov	r6, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4620      	mov	r0, r4
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4640      	mov	r0, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	3b02      	subs	r3, #2
 800046e:	4461      	add	r1, ip
 8000470:	e732      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000472:	4630      	mov	r0, r6
 8000474:	e709      	b.n	800028a <__udivmoddi4+0xde>
 8000476:	4464      	add	r4, ip
 8000478:	3802      	subs	r0, #2
 800047a:	e742      	b.n	8000302 <__udivmoddi4+0x156>

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000488:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800048c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000490:	f003 0301 	and.w	r3, r3, #1
 8000494:	2b00      	cmp	r3, #0
 8000496:	d013      	beq.n	80004c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000498:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800049c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d00b      	beq.n	80004c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004a8:	e000      	b.n	80004ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80004aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80004ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d0f9      	beq.n	80004aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80004b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	b2d2      	uxtb	r2, r2
 80004be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80004c0:	687b      	ldr	r3, [r7, #4]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80004d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004de:	f023 0218 	bic.w	r2, r3, #24
 80004e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b085      	sub	sp, #20
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4313      	orrs	r3, r2
 8000510:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4013      	ands	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e009      	b.n	8000552 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	1c5a      	adds	r2, r3, #1
 8000542:	60ba      	str	r2, [r7, #8]
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ff9a 	bl	8000480 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	3301      	adds	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697a      	ldr	r2, [r7, #20]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	429a      	cmp	r2, r3
 8000558:	dbf1      	blt.n	800053e <_write+0x12>
}
return len;
 800055a:	687b      	ldr	r3, [r7, #4]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fbaa 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f824 	bl	80005b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000570:	f000 f898 	bl	80006a4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f92a 	bl	80007cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000578:	f000 f8b2 	bl	80006e0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 800057c:	f000 f8fe 	bl	800077c <MX_USB_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)==1){
 8000580:	2110      	movs	r1, #16
 8000582:	480b      	ldr	r0, [pc, #44]	; (80005b0 <main+0x4c>)
 8000584:	f000 fe9a 	bl	80012bc <HAL_GPIO_ReadPin>
 8000588:	4603      	mov	r3, r0
 800058a:	2b01      	cmp	r3, #1
 800058c:	d1f8      	bne.n	8000580 <main+0x1c>
		  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)==1){
 800058e:	e006      	b.n	800059e <main+0x3a>
			  printf(" ****** ALERTE PORTE OUVERTE ! ****** \n");
 8000590:	4808      	ldr	r0, [pc, #32]	; (80005b4 <main+0x50>)
 8000592:	f003 fbd9 	bl	8003d48 <puts>
			  HAL_Delay(3000);
 8000596:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800059a:	f000 fc17 	bl	8000dcc <HAL_Delay>
		  while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)==1){
 800059e:	2110      	movs	r1, #16
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <main+0x4c>)
 80005a2:	f000 fe8b 	bl	80012bc <HAL_GPIO_ReadPin>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d0f1      	beq.n	8000590 <main+0x2c>
	  if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_4)==1){
 80005ac:	e7e8      	b.n	8000580 <main+0x1c>
 80005ae:	bf00      	nop
 80005b0:	48000800 	.word	0x48000800
 80005b4:	08004680 	.word	0x08004680

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09a      	sub	sp, #104	; 0x68
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2248      	movs	r2, #72	; 0x48
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 fb48 	bl	8003c5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80005de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005ec:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80005ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	f023 0303 	bic.w	r3, r3, #3
 80005f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000602:	f000 ff8f 	bl	8001524 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000606:	2000      	movs	r0, #0
 8000608:	f7ff ff61 	bl	80004ce <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <SystemClock_Config+0xe8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000614:	4a22      	ldr	r2, [pc, #136]	; (80006a0 <SystemClock_Config+0xe8>)
 8000616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <SystemClock_Config+0xe8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000628:	2327      	movs	r3, #39	; 0x27
 800062a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000632:	2301      	movs	r3, #1
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2340      	movs	r3, #64	; 0x40
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000644:	2300      	movs	r3, #0
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000648:	2360      	movs	r3, #96	; 0x60
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064c:	2300      	movs	r3, #0
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 0320 	add.w	r3, r7, #32
 8000654:	4618      	mov	r0, r3
 8000656:	f001 faf9 	bl	8001c4c <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000660:	f000 f8fc 	bl	800085c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000664:	236f      	movs	r3, #111	; 0x6f
 8000666:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000668:	2302      	movs	r3, #2
 800066a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2101      	movs	r1, #1
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fe55 	bl	8002334 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000690:	f000 f8e4 	bl	800085c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000694:	f002 fc10 	bl	8002eb8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000698:	bf00      	nop
 800069a:	3768      	adds	r7, #104	; 0x68
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	58000400 	.word	0x58000400

080006a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	; 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2250      	movs	r2, #80	; 0x50
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fad3 	bl	8003c5c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80006b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ba:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fa80 	bl	8002bcc <HAL_RCCEx_PeriphCLKConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80006d2:	f000 f8c3 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e4:	4b23      	ldr	r3, [pc, #140]	; (8000774 <MX_USART1_UART_Init+0x94>)
 80006e6:	4a24      	ldr	r2, [pc, #144]	; (8000778 <MX_USART1_UART_Init+0x98>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ea:	4b22      	ldr	r3, [pc, #136]	; (8000774 <MX_USART1_UART_Init+0x94>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_USART1_UART_Init+0x94>)
 80006f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006f8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_USART1_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_USART1_UART_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_USART1_UART_Init+0x94>)
 8000708:	220c      	movs	r2, #12
 800070a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_USART1_UART_Init+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_USART1_UART_Init+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_USART1_UART_Init+0x94>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800071e:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_USART1_UART_Init+0x94>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_USART1_UART_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <MX_USART1_UART_Init+0x94>)
 800072c:	f002 fcfb 	bl	8003126 <HAL_UART_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000736:	f000 f891 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_USART1_UART_Init+0x94>)
 800073e:	f003 f95c 	bl	80039fa <HAL_UARTEx_SetTxFifoThreshold>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000748:	f000 f888 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <MX_USART1_UART_Init+0x94>)
 8000750:	f003 f991 	bl	8003a76 <HAL_UARTEx_SetRxFifoThreshold>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800075a:	f000 f87f 	bl	800085c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART1_UART_Init+0x94>)
 8000760:	f003 f912 	bl	8003988 <HAL_UARTEx_DisableFifoMode>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800076a:	f000 f877 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000094 	.word	0x20000094
 8000778:	40013800 	.word	0x40013800

0800077c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <MX_USB_PCD_Init+0x48>)
 8000782:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <MX_USB_PCD_Init+0x4c>)
 8000784:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USB_PCD_Init+0x48>)
 8000788:	2208      	movs	r2, #8
 800078a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_USB_PCD_Init+0x48>)
 800078e:	2202      	movs	r2, #2
 8000790:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USB_PCD_Init+0x48>)
 8000794:	2202      	movs	r2, #2
 8000796:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_USB_PCD_Init+0x48>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USB_PCD_Init+0x48>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_USB_PCD_Init+0x48>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USB_PCD_Init+0x48>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_USB_PCD_Init+0x48>)
 80007b2:	f000 fdb3 	bl	800131c <HAL_PCD_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80007bc:	f000 f84e 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000128 	.word	0x20000128
 80007c8:	40006800 	.word	0x40006800

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e0:	2004      	movs	r0, #4
 80007e2:	f7ff fe8a 	bl	80004fa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2002      	movs	r0, #2
 80007e8:	f7ff fe87 	bl	80004fa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	2001      	movs	r0, #1
 80007ee:	f7ff fe84 	bl	80004fa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f2:	2008      	movs	r0, #8
 80007f4:	f7ff fe81 	bl	80004fa <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2123      	movs	r1, #35	; 0x23
 80007fc:	4814      	ldr	r0, [pc, #80]	; (8000850 <MX_GPIO_Init+0x84>)
 80007fe:	f000 fd75 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000802:	2310      	movs	r3, #16
 8000804:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4810      	ldr	r0, [pc, #64]	; (8000854 <MX_GPIO_Init+0x88>)
 8000814:	f000 fbe2 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000818:	2323      	movs	r3, #35	; 0x23
 800081a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081c:	2301      	movs	r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	4619      	mov	r1, r3
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <MX_GPIO_Init+0x84>)
 800082e:	f000 fbd5 	bl	8000fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000832:	2303      	movs	r3, #3
 8000834:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_GPIO_Init+0x8c>)
 8000844:	f000 fbca 	bl	8000fdc <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	48000400 	.word	0x48000400
 8000854:	48000800 	.word	0x48000800
 8000858:	48000c00 	.word	0x48000c00

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>

08000866 <LL_AHB2_GRP1_EnableClock>:
{
 8000866:	b480      	push	{r7}
 8000868:	b085      	sub	sp, #20
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800086e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4313      	orrs	r3, r2
 800087c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800087e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4013      	ands	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800088a:	68fb      	ldr	r3, [r7, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008bc:	68fb      	ldr	r3, [r7, #12]
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b085      	sub	sp, #20
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4313      	orrs	r3, r2
 80008e0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4013      	ands	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09c      	sub	sp, #112	; 0x70
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2250      	movs	r2, #80	; 0x50
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f003 f995 	bl	8003c5c <memset>
  if(huart->Instance==USART1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <HAL_UART_MspInit+0x84>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d124      	bne.n	8000986 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800093c:	2301      	movs	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4618      	mov	r0, r3
 800094a:	f002 f93f 	bl	8002bcc <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000954:	f7ff ff82 	bl	800085c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000958:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800095c:	f7ff ffb5 	bl	80008ca <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff ff80 	bl	8000866 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000966:	23c0      	movs	r3, #192	; 0xc0
 8000968:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096e:	2301      	movs	r3, #1
 8000970:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000976:	2307      	movs	r3, #7
 8000978:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800097e:	4619      	mov	r1, r3
 8000980:	4804      	ldr	r0, [pc, #16]	; (8000994 <HAL_UART_MspInit+0x88>)
 8000982:	f000 fb2b 	bl	8000fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000986:	bf00      	nop
 8000988:	3770      	adds	r7, #112	; 0x70
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40013800 	.word	0x40013800
 8000994:	48000400 	.word	0x48000400

08000998 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b09c      	sub	sp, #112	; 0x70
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2250      	movs	r2, #80	; 0x50
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f003 f94f 	bl	8003c5c <memset>
  if(hpcd->Instance==USB)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <HAL_PCD_MspInit+0xa8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d136      	bne.n	8000a36 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80009c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80009ce:	2318      	movs	r3, #24
 80009d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80009d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009d6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80009d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80009de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80009e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80009e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009e8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80009ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80009ee:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 f8e9 	bl	8002bcc <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000a00:	f7ff ff2c 	bl	800085c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff ff2e 	bl	8000866 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000a1c:	230a      	movs	r3, #10
 8000a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a24:	4619      	mov	r1, r3
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f000 fad7 	bl	8000fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000a2e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000a32:	f7ff ff31 	bl	8000898 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3770      	adds	r7, #112	; 0x70
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40006800 	.word	0x40006800

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f970 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	e00a      	b.n	8000ac0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aaa:	f3af 8000 	nop.w
 8000aae:	4601      	mov	r1, r0
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	60ba      	str	r2, [r7, #8]
 8000ab6:	b2ca      	uxtb	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf0      	blt.n	8000aaa <_read+0x12>
  }

  return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000afa:	605a      	str	r2, [r3, #4]
  return 0;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <_isatty>:

int _isatty(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3714      	adds	r7, #20
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f003 f84c 	bl	8003c08 <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20030000 	.word	0x20030000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	2000041c 	.word	0x2000041c
 8000ba4:	20000438 	.word	0x20000438

08000ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000bac:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <SystemInit+0x98>)
 8000bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <SystemInit+0x98>)
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000bd4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <SystemInit+0x9c>)
 8000be2:	4013      	ands	r3, r2
 8000be4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000be6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bf2:	f023 0305 	bic.w	r3, r3, #5
 8000bf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c06:	f023 0301 	bic.w	r3, r3, #1
 8000c0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c12:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <SystemInit+0xa0>)
 8000c14:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <SystemInit+0xa0>)
 8000c1c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00
 8000c44:	faf6fefb 	.word	0xfaf6fefb
 8000c48:	22041000 	.word	0x22041000

08000c4c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000c4c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c4e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c50:	3304      	adds	r3, #4

08000c52 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c52:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c54:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000c56:	d3f9      	bcc.n	8000c4c <CopyDataInit>
  bx lr
 8000c58:	4770      	bx	lr

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c5a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c5c:	3004      	adds	r0, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c5e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>
  bx lr
 8000c62:	4770      	bx	lr

08000c64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c68:	f7ff ff9e 	bl	8000ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <LoopForever+0x6>)
 8000c6e:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <LoopForever+0xa>)
 8000c70:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <LoopForever+0xe>)
 8000c72:	2300      	movs	r3, #0
 8000c74:	f7ff ffed 	bl	8000c52 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000c78:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <LoopForever+0x12>)
 8000c7a:	490c      	ldr	r1, [pc, #48]	; (8000cac <LoopForever+0x16>)
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <LoopForever+0x1a>)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f7ff ffe7 	bl	8000c52 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <LoopForever+0x1e>)
 8000c86:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <LoopForever+0x22>)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f7ff ffe8 	bl	8000c5e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c8e:	f002 ffc1 	bl	8003c14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c92:	f7ff fc67 	bl	8000564 <main>

08000c96 <LoopForever>:

LoopForever:
  b LoopForever
 8000c96:	e7fe      	b.n	8000c96 <LoopForever>
  ldr   r0, =_estack
 8000c98:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000078 	.word	0x20000078
 8000ca4:	08004810 	.word	0x08004810
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000ca8:	20030000 	.word	0x20030000
 8000cac:	20030000 	.word	0x20030000
 8000cb0:	08004880 	.word	0x08004880
  INIT_BSS _sbss, _ebss
 8000cb4:	20000078 	.word	0x20000078
 8000cb8:	20000434 	.word	0x20000434

08000cbc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_Init+0x3c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <HAL_Init+0x3c>)
 8000cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f000 f94e 	bl	8000f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f000 f80f 	bl	8000d00 <HAL_InitTick>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	e001      	b.n	8000cf2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cee:	f7ff fe05 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58004000 	.word	0x58004000

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d024      	beq.n	8000d5e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d14:	f001 fcba 	bl	800268c <HAL_RCC_GetHCLKFreq>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d24:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 f948 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10f      	bne.n	8000d58 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b0f      	cmp	r3, #15
 8000d3c:	d809      	bhi.n	8000d52 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	f04f 30ff 	mov.w	r0, #4294967295
 8000d46:	f000 f922 	bl	8000f8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4a:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <HAL_InitTick+0x70>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e007      	b.n	8000d62 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	73fb      	strb	r3, [r7, #15]
 8000d56:	e004      	b.n	8000d62 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	73fb      	strb	r3, [r7, #15]
 8000d5c:	e001      	b.n	8000d62 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000010 	.word	0x20000010
 8000d70:	2000000c 	.word	0x2000000c

08000d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000010 	.word	0x20000010
 8000d98:	20000420 	.word	0x20000420

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000420 	.word	0x20000420

08000db4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_GetTickPrio+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000000c 	.word	0x2000000c

08000dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd4:	f7ff ffe2 	bl	8000d9c <HAL_GetTick>
 8000dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de4:	d005      	beq.n	8000df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_Delay+0x44>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	461a      	mov	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4413      	add	r3, r2
 8000df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df2:	bf00      	nop
 8000df4:	f7ff ffd2 	bl	8000d9c <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	68fa      	ldr	r2, [r7, #12]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d8f7      	bhi.n	8000df4 <HAL_Delay+0x28>
  {
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	3710      	adds	r7, #16
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000010 	.word	0x20000010

08000e14 <__NVIC_SetPriorityGrouping>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_SetPriority>:
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	; (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	; (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <SysTick_Config>:
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f44:	d301      	bcc.n	8000f4a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00f      	b.n	8000f6a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <SysTick_Config+0x40>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f52:	210f      	movs	r1, #15
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f7ff ff8e 	bl	8000e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <SysTick_Config+0x40>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <SysTick_Config+0x40>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff47 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b086      	sub	sp, #24
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5e 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff90 	bl	8000ecc <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5f 	bl	8000e78 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb2 	bl	8000f34 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fea:	e14c      	b.n	8001286 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 813e 	beq.w	8001280 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b01      	cmp	r3, #1
 800100e:	d005      	beq.n	800101c <HAL_GPIO_Init+0x40>
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d130      	bne.n	800107e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	2203      	movs	r2, #3
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	68da      	ldr	r2, [r3, #12]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001052:	2201      	movs	r2, #1
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	091b      	lsrs	r3, r3, #4
 8001068:	f003 0201 	and.w	r2, r3, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b03      	cmp	r3, #3
 8001088:	d017      	beq.n	80010ba <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	2203      	movs	r2, #3
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d123      	bne.n	800110e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	691a      	ldr	r2, [r3, #16]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	08da      	lsrs	r2, r3, #3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3208      	adds	r2, #8
 8001108:	6939      	ldr	r1, [r7, #16]
 800110a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0203 	and.w	r2, r3, #3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114a:	2b00      	cmp	r3, #0
 800114c:	f000 8098 	beq.w	8001280 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001150:	4a54      	ldr	r2, [pc, #336]	; (80012a4 <HAL_GPIO_Init+0x2c8>)
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800117a:	d019      	beq.n	80011b0 <HAL_GPIO_Init+0x1d4>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a4a      	ldr	r2, [pc, #296]	; (80012a8 <HAL_GPIO_Init+0x2cc>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d013      	beq.n	80011ac <HAL_GPIO_Init+0x1d0>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a49      	ldr	r2, [pc, #292]	; (80012ac <HAL_GPIO_Init+0x2d0>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d00d      	beq.n	80011a8 <HAL_GPIO_Init+0x1cc>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a48      	ldr	r2, [pc, #288]	; (80012b0 <HAL_GPIO_Init+0x2d4>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d007      	beq.n	80011a4 <HAL_GPIO_Init+0x1c8>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <HAL_GPIO_Init+0x2d8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d101      	bne.n	80011a0 <HAL_GPIO_Init+0x1c4>
 800119c:	2304      	movs	r3, #4
 800119e:	e008      	b.n	80011b2 <HAL_GPIO_Init+0x1d6>
 80011a0:	2307      	movs	r3, #7
 80011a2:	e006      	b.n	80011b2 <HAL_GPIO_Init+0x1d6>
 80011a4:	2303      	movs	r3, #3
 80011a6:	e004      	b.n	80011b2 <HAL_GPIO_Init+0x1d6>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e002      	b.n	80011b2 <HAL_GPIO_Init+0x1d6>
 80011ac:	2301      	movs	r3, #1
 80011ae:	e000      	b.n	80011b2 <HAL_GPIO_Init+0x1d6>
 80011b0:	2300      	movs	r3, #0
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	f002 0203 	and.w	r2, r2, #3
 80011b8:	0092      	lsls	r2, r2, #2
 80011ba:	4093      	lsls	r3, r2
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011c2:	4938      	ldr	r1, [pc, #224]	; (80012a4 <HAL_GPIO_Init+0x2c8>)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d0:	4b39      	ldr	r3, [pc, #228]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f4:	4a30      	ldr	r2, [pc, #192]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4313      	orrs	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800121e:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001224:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 8001226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800122a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800124a:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 8001254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001258:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	43db      	mvns	r3, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001278:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <HAL_GPIO_Init+0x2dc>)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	3301      	adds	r3, #1
 8001284:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	f47f aeab 	bne.w	8000fec <HAL_GPIO_Init+0x10>
  }
}
 8001296:	bf00      	nop
 8001298:	bf00      	nop
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40010000 	.word	0x40010000
 80012a8:	48000400 	.word	0x48000400
 80012ac:	48000800 	.word	0x48000800
 80012b0:	48000c00 	.word	0x48000c00
 80012b4:	48001000 	.word	0x48001000
 80012b8:	58000800 	.word	0x58000800

080012bc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012d4:	2301      	movs	r3, #1
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e001      	b.n	80012de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001308:	e002      	b.n	8001310 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	b08b      	sub	sp, #44	; 0x2c
 8001320:	af06      	add	r7, sp, #24
 8001322:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e0cb      	b.n	80014c6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d106      	bne.n	8001348 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fb28 	bl	8000998 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2203      	movs	r2, #3
 800134c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f002 fc1b 	bl	8003b90 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e040      	b.n	80013e2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	3301      	adds	r3, #1
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	4613      	mov	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	440b      	add	r3, r1
 800139a:	3303      	adds	r3, #3
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013a0:	7bfa      	ldrb	r2, [r7, #15]
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	440b      	add	r3, r1
 80013ae:	3338      	adds	r3, #56	; 0x38
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	333c      	adds	r3, #60	; 0x3c
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	3340      	adds	r3, #64	; 0x40
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	3301      	adds	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d3b9      	bcc.n	8001360 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]
 80013f0:	e044      	b.n	800147c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013f2:	7bfa      	ldrb	r2, [r7, #15]
 80013f4:	6879      	ldr	r1, [r7, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	440b      	add	r3, r1
 8001400:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4613      	mov	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	3301      	adds	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	429a      	cmp	r2, r3
 8001484:	d3b5      	bcc.n	80013f2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	687e      	ldr	r6, [r7, #4]
 800148e:	466d      	mov	r5, sp
 8001490:	f106 0410 	add.w	r4, r6, #16
 8001494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	602b      	str	r3, [r5, #0]
 800149c:	1d33      	adds	r3, r6, #4
 800149e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014a0:	6838      	ldr	r0, [r7, #0]
 80014a2:	f002 fb90 	bl	8003bc6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d102      	bne.n	80014c4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 f805 	bl	80014ce <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001506:	b29b      	uxth	r3, r3
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	b29a      	uxth	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800152e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	58000400 	.word	0x58000400

08001544 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <HAL_PWREx_GetVoltageRange+0x18>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	58000400 	.word	0x58000400

08001560 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001572:	d101      	bne.n	8001578 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_RCC_HSE_Enable>:
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <LL_RCC_HSE_Disable>:
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80015a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_RCC_HSE_IsReady>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80015d2:	d101      	bne.n	80015d8 <LL_RCC_HSE_IsReady+0x18>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <LL_RCC_HSE_IsReady+0x1a>
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_RCC_HSI_Enable>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_RCC_HSI_Disable>:
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001614:	6013      	str	r3, [r2, #0]
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_RCC_HSI_IsReady>:
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001632:	d101      	bne.n	8001638 <LL_RCC_HSI_IsReady+0x18>
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <LL_RCC_HSI_IsReady+0x1a>
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	061b      	lsls	r3, r3, #24
 800165a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <LL_RCC_HSI48_Enable>:
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800167a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_RCC_HSI48_Disable>:
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800169c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_RCC_HSI48_IsReady>:
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d101      	bne.n	80016ca <LL_RCC_HSI48_IsReady+0x18>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <LL_RCC_HSI48_IsReady+0x1a>
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_RCC_LSE_Enable>:
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_RCC_LSE_Disable>:
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <LL_RCC_LSE_EnableBypass>:
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800171e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001732:	bf00      	nop
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_RCC_LSE_DisableBypass>:
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800174c:	f023 0304 	bic.w	r3, r3, #4
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b02      	cmp	r3, #2
 8001770:	d101      	bne.n	8001776 <LL_RCC_LSE_IsReady+0x18>
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <LL_RCC_LSE_IsReady+0x1a>
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800179a:	bf00      	nop
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d101      	bne.n	80017de <LL_RCC_LSI1_IsReady+0x18>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <LL_RCC_LSI1_IsReady+0x1a>
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017fa:	f043 0304 	orr.w	r3, r3, #4
 80017fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b08      	cmp	r3, #8
 8001840:	d101      	bne.n	8001846 <LL_RCC_LSI2_IsReady+0x18>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <LL_RCC_LSI2_IsReady+0x1a>
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800185a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001862:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800186e:	4313      	orrs	r3, r2
 8001870:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6013      	str	r3, [r2, #0]
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d101      	bne.n	80018d2 <LL_RCC_MSI_IsReady+0x16>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <LL_RCC_MSI_IsReady+0x18>
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800190c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001916:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2bb0      	cmp	r3, #176	; 0xb0
 800191c:	d901      	bls.n	8001922 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800191e:	23b0      	movs	r3, #176	; 0xb0
 8001920:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001922:	687b      	ldr	r3, [r7, #4]
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 0203 	bic.w	r2, r3, #3
 800196c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4313      	orrs	r3, r2
 8001974:	608b      	str	r3, [r1, #8]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 030c 	and.w	r3, r3, #12
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	608b      	str	r3, [r1, #8]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80019ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4313      	orrs	r3, r2
 80019de:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80019f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019fe:	f023 020f 	bic.w	r2, r3, #15
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a90:	011b      	lsls	r3, r3, #4
 8001a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae2:	6013      	str	r3, [r2, #0]
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b00:	6013      	str	r3, [r2, #0]
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b1e:	d101      	bne.n	8001b24 <LL_RCC_PLL_IsReady+0x18>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <LL_RCC_PLL_IsReady+0x1a>
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f003 0303 	and.w	r3, r3, #3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba4:	d101      	bne.n	8001baa <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bca:	d101      	bne.n	8001bd0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf0:	d101      	bne.n	8001bf6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c14:	d101      	bne.n	8001c1a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c38:	d101      	bne.n	8001c3e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b08d      	sub	sp, #52	; 0x34
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e363      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0320 	and.w	r3, r3, #32
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 808d 	beq.w	8001d86 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c6c:	f7ff fe89 	bl	8001982 <LL_RCC_GetSysClkSource>
 8001c70:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c72:	f7ff ff82 	bl	8001b7a <LL_RCC_PLL_GetMainSource>
 8001c76:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <HAL_RCC_OscConfig+0x3e>
 8001c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c80:	2b0c      	cmp	r3, #12
 8001c82:	d147      	bne.n	8001d14 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d144      	bne.n	8001d14 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e347      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c9a:	f7ff fe34 	bl	8001906 <LL_RCC_MSI_GetRange>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	429c      	cmp	r4, r3
 8001ca2:	d914      	bls.n	8001cce <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fd2f 	bl	800270c <RCC_SetFlashLatencyFromMSIRange>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e336      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fe0e 	bl	80018de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fe32 	bl	8001930 <LL_RCC_MSI_SetCalibTrimming>
 8001ccc:	e013      	b.n	8001cf6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fe03 	bl	80018de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fe27 	bl	8001930 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fd10 	bl	800270c <RCC_SetFlashLatencyFromMSIRange>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e317      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001cf6:	f000 fcc9 	bl	800268c <HAL_RCC_GetHCLKFreq>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4aa4      	ldr	r2, [pc, #656]	; (8001f90 <HAL_RCC_OscConfig+0x344>)
 8001cfe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d00:	4ba4      	ldr	r3, [pc, #656]	; (8001f94 <HAL_RCC_OscConfig+0x348>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fffb 	bl	8000d00 <HAL_InitTick>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d039      	beq.n	8001d84 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e308      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d01e      	beq.n	8001d5a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d1c:	f7ff fdb0 	bl	8001880 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d20:	f7ff f83c 	bl	8000d9c <HAL_GetTick>
 8001d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d28:	f7ff f838 	bl	8000d9c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e2f5      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001d3a:	f7ff fdbf 	bl	80018bc <LL_RCC_MSI_IsReady>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f1      	beq.n	8001d28 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fdc8 	bl	80018de <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fdec 	bl	8001930 <LL_RCC_MSI_SetCalibTrimming>
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d5a:	f7ff fda0 	bl	800189e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff f81d 	bl	8000d9c <HAL_GetTick>
 8001d62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d66:	f7ff f819 	bl	8000d9c <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e2d6      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d78:	f7ff fda0 	bl	80018bc <LL_RCC_MSI_IsReady>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f1      	bne.n	8001d66 <HAL_RCC_OscConfig+0x11a>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d84:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d047      	beq.n	8001e22 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d92:	f7ff fdf6 	bl	8001982 <LL_RCC_GetSysClkSource>
 8001d96:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d98:	f7ff feef 	bl	8001b7a <LL_RCC_PLL_GetMainSource>
 8001d9c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_OscConfig+0x164>
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d108      	bne.n	8001dbc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d105      	bne.n	8001dbc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d134      	bne.n	8001e22 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e2b4      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc4:	d102      	bne.n	8001dcc <HAL_RCC_OscConfig+0x180>
 8001dc6:	f7ff fbdd 	bl	8001584 <LL_RCC_HSE_Enable>
 8001dca:	e001      	b.n	8001dd0 <HAL_RCC_OscConfig+0x184>
 8001dcc:	f7ff fbe9 	bl	80015a2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d012      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7fe ffe0 	bl	8000d9c <HAL_GetTick>
 8001ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7fe ffdc 	bl	8000d9c <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e299      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001df2:	f7ff fbe5 	bl	80015c0 <LL_RCC_HSE_IsReady>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f1      	beq.n	8001de0 <HAL_RCC_OscConfig+0x194>
 8001dfc:	e011      	b.n	8001e22 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7fe ffcd 	bl	8000d9c <HAL_GetTick>
 8001e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e06:	f7fe ffc9 	bl	8000d9c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b64      	cmp	r3, #100	; 0x64
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e286      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001e18:	f7ff fbd2 	bl	80015c0 <LL_RCC_HSE_IsReady>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f1      	bne.n	8001e06 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d04c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2e:	f7ff fda8 	bl	8001982 <LL_RCC_GetSysClkSource>
 8001e32:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e34:	f7ff fea1 	bl	8001b7a <LL_RCC_PLL_GetMainSource>
 8001e38:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_OscConfig+0x200>
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d10e      	bne.n	8001e64 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d10b      	bne.n	8001e64 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e266      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fbf1 	bl	8001644 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e62:	e031      	b.n	8001ec8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d019      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6c:	f7ff fbba 	bl	80015e4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7fe ff94 	bl	8000d9c <HAL_GetTick>
 8001e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e78:	f7fe ff90 	bl	8000d9c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e24d      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e8a:	f7ff fbc9 	bl	8001620 <LL_RCC_HSI_IsReady>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f1      	beq.n	8001e78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fbd3 	bl	8001644 <LL_RCC_HSI_SetCalibTrimming>
 8001e9e:	e013      	b.n	8001ec8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea0:	f7ff fbaf 	bl	8001602 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7fe ff7a 	bl	8000d9c <HAL_GetTick>
 8001ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eac:	f7fe ff76 	bl	8000d9c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e233      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001ebe:	f7ff fbaf 	bl	8001620 <LL_RCC_HSI_IsReady>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f1      	bne.n	8001eac <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d106      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a3 	beq.w	8002028 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d076      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d046      	beq.n	8001f84 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001ef6:	f7ff fc66 	bl	80017c6 <LL_RCC_LSI1_IsReady>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d113      	bne.n	8001f28 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001f00:	f7ff fc3f 	bl	8001782 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f04:	f7fe ff4a 	bl	8000d9c <HAL_GetTick>
 8001f08:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f0c:	f7fe ff46 	bl	8000d9c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e203      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001f1e:	f7ff fc52 	bl	80017c6 <LL_RCC_LSI1_IsReady>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f1      	beq.n	8001f0c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001f28:	f7ff fc5f 	bl	80017ea <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ff36 	bl	8000d9c <HAL_GetTick>
 8001f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f34:	f7fe ff32 	bl	8000d9c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1ef      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f46:	f7ff fc72 	bl	800182e <LL_RCC_LSI2_IsReady>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f1      	beq.n	8001f34 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fc7c 	bl	8001852 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001f5a:	f7ff fc23 	bl	80017a4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7fe ff1d 	bl	8000d9c <HAL_GetTick>
 8001f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f66:	f7fe ff19 	bl	8000d9c <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e1d6      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f78:	f7ff fc25 	bl	80017c6 <LL_RCC_LSI1_IsReady>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f1      	bne.n	8001f66 <HAL_RCC_OscConfig+0x31a>
 8001f82:	e051      	b.n	8002028 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001f84:	f7ff fbfd 	bl	8001782 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7fe ff08 	bl	8000d9c <HAL_GetTick>
 8001f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f8e:	e00c      	b.n	8001faa <HAL_RCC_OscConfig+0x35e>
 8001f90:	20000008 	.word	0x20000008
 8001f94:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f98:	f7fe ff00 	bl	8000d9c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1bd      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001faa:	f7ff fc0c 	bl	80017c6 <LL_RCC_LSI1_IsReady>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f1      	beq.n	8001f98 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001fb4:	f7ff fc2a 	bl	800180c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fba:	f7fe feef 	bl	8000d9c <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1ac      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001fcc:	f7ff fc2f 	bl	800182e <LL_RCC_LSI2_IsReady>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f1      	bne.n	8001fba <HAL_RCC_OscConfig+0x36e>
 8001fd6:	e027      	b.n	8002028 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001fd8:	f7ff fc18 	bl	800180c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7fe fede 	bl	8000d9c <HAL_GetTick>
 8001fe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fe4:	f7fe feda 	bl	8000d9c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e197      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001ff6:	f7ff fc1a 	bl	800182e <LL_RCC_LSI2_IsReady>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f1      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002000:	f7ff fbd0 	bl	80017a4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7fe feca 	bl	8000d9c <HAL_GetTick>
 8002008:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800200c:	f7fe fec6 	bl	8000d9c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e183      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800201e:	f7ff fbd2 	bl	80017c6 <LL_RCC_LSI1_IsReady>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f1      	bne.n	800200c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d05b      	beq.n	80020ec <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002034:	4ba7      	ldr	r3, [pc, #668]	; (80022d4 <HAL_RCC_OscConfig+0x688>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d114      	bne.n	800206a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002040:	f7ff fa70 	bl	8001524 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002044:	f7fe feaa 	bl	8000d9c <HAL_GetTick>
 8002048:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800204c:	f7fe fea6 	bl	8000d9c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e163      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800205e:	4b9d      	ldr	r3, [pc, #628]	; (80022d4 <HAL_RCC_OscConfig+0x688>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d102      	bne.n	8002078 <HAL_RCC_OscConfig+0x42c>
 8002072:	f7ff fb30 	bl	80016d6 <LL_RCC_LSE_Enable>
 8002076:	e00c      	b.n	8002092 <HAL_RCC_OscConfig+0x446>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d104      	bne.n	800208a <HAL_RCC_OscConfig+0x43e>
 8002080:	f7ff fb4b 	bl	800171a <LL_RCC_LSE_EnableBypass>
 8002084:	f7ff fb27 	bl	80016d6 <LL_RCC_LSE_Enable>
 8002088:	e003      	b.n	8002092 <HAL_RCC_OscConfig+0x446>
 800208a:	f7ff fb35 	bl	80016f8 <LL_RCC_LSE_Disable>
 800208e:	f7ff fb55 	bl	800173c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d014      	beq.n	80020c4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209a:	f7fe fe7f 	bl	8000d9c <HAL_GetTick>
 800209e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7fe fe7b 	bl	8000d9c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e136      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80020b8:	f7ff fb51 	bl	800175e <LL_RCC_LSE_IsReady>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0ef      	beq.n	80020a2 <HAL_RCC_OscConfig+0x456>
 80020c2:	e013      	b.n	80020ec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7fe fe6a 	bl	8000d9c <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020cc:	f7fe fe66 	bl	8000d9c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e121      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80020e2:	f7ff fb3c 	bl	800175e <LL_RCC_LSE_IsReady>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1ef      	bne.n	80020cc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d02c      	beq.n	8002152 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d014      	beq.n	800212a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002100:	f7ff fab5 	bl	800166e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7fe fe4a 	bl	8000d9c <HAL_GetTick>
 8002108:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800210c:	f7fe fe46 	bl	8000d9c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e103      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800211e:	f7ff fac8 	bl	80016b2 <LL_RCC_HSI48_IsReady>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f1      	beq.n	800210c <HAL_RCC_OscConfig+0x4c0>
 8002128:	e013      	b.n	8002152 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800212a:	f7ff fab1 	bl	8001690 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7fe fe35 	bl	8000d9c <HAL_GetTick>
 8002132:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002136:	f7fe fe31 	bl	8000d9c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0ee      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002148:	f7ff fab3 	bl	80016b2 <LL_RCC_HSI48_IsReady>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f1      	bne.n	8002136 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80e4 	beq.w	8002324 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215c:	f7ff fc11 	bl	8001982 <LL_RCC_GetSysClkSource>
 8002160:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	2b02      	cmp	r3, #2
 8002170:	f040 80b4 	bne.w	80022dc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 0203 	and.w	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	429a      	cmp	r2, r3
 8002180:	d123      	bne.n	80021ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d11c      	bne.n	80021ca <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	0a1b      	lsrs	r3, r3, #8
 8002194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219c:	429a      	cmp	r2, r3
 800219e:	d114      	bne.n	80021ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d10d      	bne.n	80021ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d05d      	beq.n	8002286 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b0c      	cmp	r3, #12
 80021ce:	d058      	beq.n	8002282 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e0a1      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021e2:	f7ff fc84 	bl	8001aee <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021e6:	f7fe fdd9 	bl	8000d9c <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ee:	f7fe fdd5 	bl	8000d9c <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e092      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1ef      	bne.n	80021ee <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_RCC_OscConfig+0x68c>)
 8002216:	4013      	ands	r3, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002220:	4311      	orrs	r1, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002226:	0212      	lsls	r2, r2, #8
 8002228:	4311      	orrs	r1, r2
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800222e:	4311      	orrs	r1, r2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002234:	4311      	orrs	r1, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800223a:	430a      	orrs	r2, r1
 800223c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002240:	4313      	orrs	r3, r2
 8002242:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002244:	f7ff fc44 	bl	8001ad0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002256:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002258:	f7fe fda0 	bl	8000d9c <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fd9c 	bl	8000d9c <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e059      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ef      	beq.n	8002260 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	e050      	b.n	8002324 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e04f      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d147      	bne.n	8002324 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002294:	f7ff fc1c 	bl	8001ad0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022a8:	f7fe fd78 	bl	8000d9c <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fd74 	bl	8000d9c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e031      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ef      	beq.n	80022b0 <HAL_RCC_OscConfig+0x664>
 80022d0:	e028      	b.n	8002324 <HAL_RCC_OscConfig+0x6d8>
 80022d2:	bf00      	nop
 80022d4:	58000400 	.word	0x58000400
 80022d8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b0c      	cmp	r3, #12
 80022e0:	d01e      	beq.n	8002320 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	f7ff fc04 	bl	8001aee <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fd59 	bl	8000d9c <HAL_GetTick>
 80022ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe fd55 	bl	8000d9c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e012      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ef      	bne.n	80022ee <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_OscConfig+0x6e4>)
 800231a:	4013      	ands	r3, r2
 800231c:	60cb      	str	r3, [r1, #12]
 800231e:	e001      	b.n	8002324 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3734      	adds	r7, #52	; 0x34
 800232a:	46bd      	mov	sp, r7
 800232c:	bd90      	pop	{r4, r7, pc}
 800232e:	bf00      	nop
 8002330:	eefefffc 	.word	0xeefefffc

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e12d      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b98      	ldr	r3, [pc, #608]	; (80025ac <HAL_RCC_ClockConfig+0x278>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d91b      	bls.n	800238e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b95      	ldr	r3, [pc, #596]	; (80025ac <HAL_RCC_ClockConfig+0x278>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 0207 	bic.w	r2, r3, #7
 800235e:	4993      	ldr	r1, [pc, #588]	; (80025ac <HAL_RCC_ClockConfig+0x278>)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	4313      	orrs	r3, r2
 8002364:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002366:	f7fe fd19 	bl	8000d9c <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236c:	e008      	b.n	8002380 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800236e:	f7fe fd15 	bl	8000d9c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e111      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002380:	4b8a      	ldr	r3, [pc, #552]	; (80025ac <HAL_RCC_ClockConfig+0x278>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d1ef      	bne.n	800236e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fafb 	bl	800199a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023a4:	f7fe fcfa 	bl	8000d9c <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023ac:	f7fe fcf6 	bl	8000d9c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e0f2      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80023be:	f7ff fbe8 	bl	8001b92 <LL_RCC_IsActiveFlag_HPRE>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f1      	beq.n	80023ac <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d016      	beq.n	8002402 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff faf2 	bl	80019c2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023de:	f7fe fcdd 	bl	8000d9c <HAL_GetTick>
 80023e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023e6:	f7fe fcd9 	bl	8000d9c <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0d5      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023f8:	f7ff fbdd 	bl	8001bb6 <LL_RCC_IsActiveFlag_C2HPRE>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f1      	beq.n	80023e6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d016      	beq.n	800243c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff faeb 	bl	80019ee <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002418:	f7fe fcc0 	bl	8000d9c <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002420:	f7fe fcbc 	bl	8000d9c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0b8      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002432:	f7ff fbd3 	bl	8001bdc <LL_RCC_IsActiveFlag_SHDHPRE>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f1      	beq.n	8002420 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d016      	beq.n	8002476 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fae5 	bl	8001a1c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002452:	f7fe fca3 	bl	8000d9c <HAL_GetTick>
 8002456:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002458:	e008      	b.n	800246c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800245a:	f7fe fc9f 	bl	8000d9c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e09b      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800246c:	f7ff fbc9 	bl	8001c02 <LL_RCC_IsActiveFlag_PPRE1>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f1      	beq.n	800245a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d017      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fadb 	bl	8001a44 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800248e:	f7fe fc85 	bl	8000d9c <HAL_GetTick>
 8002492:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002496:	f7fe fc81 	bl	8000d9c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e07d      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024a8:	f7ff fbbd 	bl	8001c26 <LL_RCC_IsActiveFlag_PPRE2>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f1      	beq.n	8002496 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d043      	beq.n	8002546 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d106      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80024c6:	f7ff f87b 	bl	80015c0 <LL_RCC_HSE_IsReady>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d11e      	bne.n	800250e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e067      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d106      	bne.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80024dc:	f7ff fb16 	bl	8001b0c <LL_RCC_PLL_IsReady>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d113      	bne.n	800250e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e05c      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d106      	bne.n	8002500 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80024f2:	f7ff f9e3 	bl	80018bc <LL_RCC_MSI_IsReady>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d108      	bne.n	800250e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e051      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002500:	f7ff f88e 	bl	8001620 <LL_RCC_HSI_IsReady>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e04a      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fa21 	bl	800195a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002518:	f7fe fc40 	bl	8000d9c <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	e00a      	b.n	8002536 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002520:	f7fe fc3c 	bl	8000d9c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e036      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	f7ff fa24 	bl	8001982 <LL_RCC_GetSysClkSource>
 800253a:	4602      	mov	r2, r0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	429a      	cmp	r2, r3
 8002544:	d1ec      	bne.n	8002520 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_RCC_ClockConfig+0x278>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d21b      	bcs.n	800258c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_RCC_ClockConfig+0x278>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 0207 	bic.w	r2, r3, #7
 800255c:	4913      	ldr	r1, [pc, #76]	; (80025ac <HAL_RCC_ClockConfig+0x278>)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002564:	f7fe fc1a 	bl	8000d9c <HAL_GetTick>
 8002568:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	e008      	b.n	800257e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800256c:	f7fe fc16 	bl	8000d9c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e012      	b.n	80025a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_ClockConfig+0x278>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d1ef      	bne.n	800256c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800258c:	f000 f87e 	bl	800268c <HAL_RCC_GetHCLKFreq>
 8002590:	4603      	mov	r3, r0
 8002592:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <HAL_RCC_ClockConfig+0x27c>)
 8002594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002596:	f7fe fc0d 	bl	8000db4 <HAL_GetTickPrio>
 800259a:	4603      	mov	r3, r0
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fbaf 	bl	8000d00 <HAL_InitTick>
 80025a2:	4603      	mov	r3, r0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	58004000 	.word	0x58004000
 80025b0:	20000008 	.word	0x20000008

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ba:	f7ff f9e2 	bl	8001982 <LL_RCC_GetSysClkSource>
 80025be:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80025c6:	f7ff f99e 	bl	8001906 <LL_RCC_MSI_GetRange>
 80025ca:	4603      	mov	r3, r0
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	4a2b      	ldr	r2, [pc, #172]	; (8002680 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e04b      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025e2:	4b28      	ldr	r3, [pc, #160]	; (8002684 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	e045      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d10a      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025ee:	f7fe ffb7 	bl	8001560 <LL_RCC_HSE_IsEnabledDiv2>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80025f8:	4b22      	ldr	r3, [pc, #136]	; (8002684 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	e03a      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80025fe:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	e037      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002604:	f7ff fab9 	bl	8001b7a <LL_RCC_PLL_GetMainSource>
 8002608:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d003      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x64>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b03      	cmp	r3, #3
 8002614:	d003      	beq.n	800261e <HAL_RCC_GetSysClockFreq+0x6a>
 8002616:	e00d      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002618:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <HAL_RCC_GetSysClockFreq+0xd0>)
 800261a:	60bb      	str	r3, [r7, #8]
        break;
 800261c:	e015      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800261e:	f7fe ff9f 	bl	8001560 <LL_RCC_HSE_IsEnabledDiv2>
 8002622:	4603      	mov	r3, r0
 8002624:	2b01      	cmp	r3, #1
 8002626:	d102      	bne.n	800262e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_RCC_GetSysClockFreq+0xd0>)
 800262a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800262c:	e00d      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800262e:	4b16      	ldr	r3, [pc, #88]	; (8002688 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002630:	60bb      	str	r3, [r7, #8]
        break;
 8002632:	e00a      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002634:	f7ff f967 	bl	8001906 <LL_RCC_MSI_GetRange>
 8002638:	4603      	mov	r3, r0
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	60bb      	str	r3, [r7, #8]
        break;
 8002648:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800264a:	f7ff fa71 	bl	8001b30 <LL_RCC_PLL_GetN>
 800264e:	4602      	mov	r2, r0
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	fb03 f402 	mul.w	r4, r3, r2
 8002656:	f7ff fa84 	bl	8001b62 <LL_RCC_PLL_GetDivider>
 800265a:	4603      	mov	r3, r0
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	3301      	adds	r3, #1
 8002660:	fbb4 f4f3 	udiv	r4, r4, r3
 8002664:	f7ff fa71 	bl	8001b4a <LL_RCC_PLL_GetR>
 8002668:	4603      	mov	r3, r0
 800266a:	0f5b      	lsrs	r3, r3, #29
 800266c:	3301      	adds	r3, #1
 800266e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002672:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002674:	68fb      	ldr	r3, [r7, #12]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}
 800267e:	bf00      	nop
 8002680:	08004734 	.word	0x08004734
 8002684:	00f42400 	.word	0x00f42400
 8002688:	01e84800 	.word	0x01e84800

0800268c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b598      	push	{r3, r4, r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002690:	f7ff ff90 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8002694:	4604      	mov	r4, r0
 8002696:	f7ff f9e9 	bl	8001a6c <LL_RCC_GetAHBPrescaler>
 800269a:	4603      	mov	r3, r0
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	4a03      	ldr	r2, [pc, #12]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80026a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd98      	pop	{r3, r4, r7, pc}
 80026b0:	080046d4 	.word	0x080046d4

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b598      	push	{r3, r4, r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80026b8:	f7ff ffe8 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026bc:	4604      	mov	r4, r0
 80026be:	f7ff f9ef 	bl	8001aa0 <LL_RCC_GetAPB1Prescaler>
 80026c2:	4603      	mov	r3, r0
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	4a04      	ldr	r2, [pc, #16]	; (80026dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d0:	f003 031f 	and.w	r3, r3, #31
 80026d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	bd98      	pop	{r3, r4, r7, pc}
 80026dc:	08004714 	.word	0x08004714

080026e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e0:	b598      	push	{r3, r4, r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80026e4:	f7ff ffd2 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026e8:	4604      	mov	r4, r0
 80026ea:	f7ff f9e5 	bl	8001ab8 <LL_RCC_GetAPB2Prescaler>
 80026ee:	4603      	mov	r3, r0
 80026f0:	0adb      	lsrs	r3, r3, #11
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd98      	pop	{r3, r4, r7, pc}
 8002708:	08004714 	.word	0x08004714

0800270c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800270c:	b590      	push	{r4, r7, lr}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2bb0      	cmp	r3, #176	; 0xb0
 8002718:	d903      	bls.n	8002722 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e007      	b.n	8002732 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	4a11      	ldr	r2, [pc, #68]	; (8002770 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002730:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002732:	f7ff f9a7 	bl	8001a84 <LL_RCC_GetAHB4Prescaler>
 8002736:	4603      	mov	r3, r0
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002750:	fba2 2303 	umull	r2, r3, r2, r3
 8002754:	0c9c      	lsrs	r4, r3, #18
 8002756:	f7fe fef5 	bl	8001544 <HAL_PWREx_GetVoltageRange>
 800275a:	4603      	mov	r3, r0
 800275c:	4619      	mov	r1, r3
 800275e:	4620      	mov	r0, r4
 8002760:	f000 f80c 	bl	800277c <RCC_SetFlashLatency>
 8002764:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	08004734 	.word	0x08004734
 8002774:	080046d4 	.word	0x080046d4
 8002778:	431bde83 	.word	0x431bde83

0800277c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b093      	sub	sp, #76	; 0x4c
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002786:	4b37      	ldr	r3, [pc, #220]	; (8002864 <RCC_SetFlashLatency+0xe8>)
 8002788:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800278c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800278e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002792:	4a35      	ldr	r2, [pc, #212]	; (8002868 <RCC_SetFlashLatency+0xec>)
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	ca07      	ldmia	r2, {r0, r1, r2}
 800279a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800279e:	4b33      	ldr	r3, [pc, #204]	; (800286c <RCC_SetFlashLatency+0xf0>)
 80027a0:	f107 040c 	add.w	r4, r7, #12
 80027a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80027aa:	2300      	movs	r3, #0
 80027ac:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b4:	d11a      	bne.n	80027ec <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	643b      	str	r3, [r7, #64]	; 0x40
 80027ba:	e013      	b.n	80027e4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80027bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	3348      	adds	r3, #72	; 0x48
 80027c2:	443b      	add	r3, r7
 80027c4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d807      	bhi.n	80027de <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	3348      	adds	r3, #72	; 0x48
 80027d4:	443b      	add	r3, r7
 80027d6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027da:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80027dc:	e020      	b.n	8002820 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e0:	3301      	adds	r3, #1
 80027e2:	643b      	str	r3, [r7, #64]	; 0x40
 80027e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d9e8      	bls.n	80027bc <RCC_SetFlashLatency+0x40>
 80027ea:	e019      	b.n	8002820 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f0:	e013      	b.n	800281a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	3348      	adds	r3, #72	; 0x48
 80027f8:	443b      	add	r3, r7
 80027fa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	429a      	cmp	r2, r3
 8002802:	d807      	bhi.n	8002814 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	3348      	adds	r3, #72	; 0x48
 800280a:	443b      	add	r3, r7
 800280c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002810:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002812:	e005      	b.n	8002820 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002816:	3301      	adds	r3, #1
 8002818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800281a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281c:	2b02      	cmp	r3, #2
 800281e:	d9e8      	bls.n	80027f2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002820:	4b13      	ldr	r3, [pc, #76]	; (8002870 <RCC_SetFlashLatency+0xf4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 0207 	bic.w	r2, r3, #7
 8002828:	4911      	ldr	r1, [pc, #68]	; (8002870 <RCC_SetFlashLatency+0xf4>)
 800282a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002830:	f7fe fab4 	bl	8000d9c <HAL_GetTick>
 8002834:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002836:	e008      	b.n	800284a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002838:	f7fe fab0 	bl	8000d9c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e007      	b.n	800285a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <RCC_SetFlashLatency+0xf4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002854:	429a      	cmp	r2, r3
 8002856:	d1ef      	bne.n	8002838 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	374c      	adds	r7, #76	; 0x4c
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}
 8002862:	bf00      	nop
 8002864:	080046a8 	.word	0x080046a8
 8002868:	080046b8 	.word	0x080046b8
 800286c:	080046c4 	.word	0x080046c4
 8002870:	58004000 	.word	0x58004000

08002874 <LL_RCC_LSE_IsEnabled>:
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <LL_RCC_LSE_IsEnabled+0x18>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <LL_RCC_LSE_IsEnabled+0x1a>
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <LL_RCC_LSE_IsReady>:
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d101      	bne.n	80028b0 <LL_RCC_LSE_IsReady+0x18>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <LL_RCC_LSE_IsReady+0x1a>
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_RCC_MSI_EnablePLLMode>:
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80028c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ca:	f043 0304 	orr.w	r3, r3, #4
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_RCC_SetRFWKPClockSource>:
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_RCC_SetSMPSClockSource>:
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	f023 0203 	bic.w	r2, r3, #3
 8002918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4313      	orrs	r3, r2
 8002920:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_RCC_SetSMPSPrescaler>:
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4313      	orrs	r3, r2
 8002948:	624b      	str	r3, [r1, #36]	; 0x24
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_RCC_SetUSARTClockSource>:
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_RCC_SetLPUARTClockSource>:
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800298a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <LL_RCC_SetI2CClockSource>:
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029c6:	43db      	mvns	r3, r3
 80029c8:	401a      	ands	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_RCC_SetLPTIMClockSource>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80029f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0c1b      	lsrs	r3, r3, #16
 80029fc:	041b      	lsls	r3, r3, #16
 80029fe:	43db      	mvns	r3, r3
 8002a00:	401a      	ands	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_RCC_SetSAIClockSource>:
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_RCC_SetRNGClockSource>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_RCC_SetCLK48ClockSource>:
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_RCC_SetUSBClockSource>:
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ffe3 	bl	8002a74 <LL_RCC_SetCLK48ClockSource>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <LL_RCC_SetADCClockSource>:
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <LL_RCC_SetRTCClockSource>:
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_RCC_GetRTCClockSource>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_RCC_ForceBackupDomainReset>:
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_RCC_ReleaseBackupDomainReset>:
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_RCC_PLLSAI1_Enable>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_RCC_PLLSAI1_Disable>:
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b9c:	6013      	str	r3, [r2, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_RCC_PLLSAI1_IsReady>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bba:	d101      	bne.n	8002bc0 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002bd8:	2300      	movs	r3, #0
 8002bda:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d034      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bf0:	d021      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002bf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bf6:	d81b      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bf8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bfc:	d01d      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002bfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c02:	d815      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00b      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002c08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c0c:	d110      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c1e:	e00d      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 f94d 	bl	8002ec4 <RCCEx_PLLSAI1_ConfigNP>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c2e:	e005      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	77fb      	strb	r3, [r7, #31]
        break;
 8002c34:	e002      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c36:	bf00      	nop
 8002c38:	e000      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002c3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c3c:	7ffb      	ldrb	r3, [r7, #31]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d105      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fee8 	bl	8002a1c <LL_RCC_SetSAIClockSource>
 8002c4c:	e001      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
 8002c50:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d046      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002c5e:	f7ff ff56 	bl	8002b0e <LL_RCC_GetRTCClockSource>
 8002c62:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d03c      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c6e:	f7fe fc59 	bl	8001524 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ff30 	bl	8002ae2 <LL_RCC_SetRTCClockSource>
 8002c82:	e02e      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002c8e:	f7ff ff4b 	bl	8002b28 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002c92:	f7ff ff5a 	bl	8002b4a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002cae:	f7ff fde1 	bl	8002874 <LL_RCC_LSE_IsEnabled>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d114      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cb8:	f7fe f870 	bl	8000d9c <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002cbe:	e00b      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe f86c 	bl	8000d9c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d902      	bls.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	77fb      	strb	r3, [r7, #31]
              break;
 8002cd6:	e004      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002cd8:	f7ff fdde 	bl	8002898 <LL_RCC_LSE_IsReady>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	77bb      	strb	r3, [r7, #30]
 8002ce6:	e001      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce8:	7ffb      	ldrb	r3, [r7, #31]
 8002cea:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fe2a 	bl	8002956 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fe35 	bl	8002982 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fe5d 	bl	80029e8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fe52 	bl	80029e8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d004      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fe2a 	bl	80029ae <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fe1f 	bl	80029ae <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d022      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff fe8d 	bl	8002aa0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d8e:	d107      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002da8:	d10b      	bne.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f8e3 	bl	8002f7a <RCCEx_PLLSAI1_ConfigNQ>
 8002db4:	4603      	mov	r3, r0
 8002db6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002db8:	7ffb      	ldrb	r3, [r7, #31]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002dbe:	7ffb      	ldrb	r3, [r7, #31]
 8002dc0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d02b      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd6:	d008      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002de0:	d003      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d105      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fe2a 	bl	8002a48 <LL_RCC_SetRNGClockSource>
 8002df4:	e00a      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7ff fe21 	bl	8002a48 <LL_RCC_SetRNGClockSource>
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff fe34 	bl	8002a74 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002e14:	d107      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e24:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d022      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fe3d 	bl	8002ab6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e44:	d107      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e5e:	d10b      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 f8e3 	bl	8003030 <RCCEx_PLLSAI1_ConfigNR>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002e6e:	7ffb      	ldrb	r3, [r7, #31]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8002e74:	7ffb      	ldrb	r3, [r7, #31]
 8002e76:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fd26 	bl	80028da <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fd45 	bl	800292e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fd2c 	bl	8002906 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8002eae:	7fbb      	ldrb	r3, [r7, #30]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8002ebc:	f7ff fcfe 	bl	80028bc <LL_RCC_MSI_EnablePLLMode>
}
 8002ec0:	bf00      	nop
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ed0:	f7ff fe5b 	bl	8002b8a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ed4:	f7fd ff62 	bl	8000d9c <HAL_GetTick>
 8002ed8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002eda:	e009      	b.n	8002ef0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002edc:	f7fd ff5e 	bl	8000d9c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d902      	bls.n	8002ef0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	73fb      	strb	r3, [r7, #15]
      break;
 8002eee:	e004      	b.n	8002efa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ef0:	f7ff fe5a 	bl	8002ba8 <LL_RCC_PLLSAI1_IsReady>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d137      	bne.n	8002f70 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f14:	4313      	orrs	r3, r2
 8002f16:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f2e:	f7ff fe1d 	bl	8002b6c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f32:	f7fd ff33 	bl	8000d9c <HAL_GetTick>
 8002f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f38:	e009      	b.n	8002f4e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f3a:	f7fd ff2f 	bl	8000d9c <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d902      	bls.n	8002f4e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f4c:	e004      	b.n	8002f58 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f4e:	f7ff fe2b 	bl	8002ba8 <LL_RCC_PLLSAI1_IsReady>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d1f0      	bne.n	8002f3a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d108      	bne.n	8002f70 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f86:	f7ff fe00 	bl	8002b8a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f8a:	f7fd ff07 	bl	8000d9c <HAL_GetTick>
 8002f8e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f90:	e009      	b.n	8002fa6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f92:	f7fd ff03 	bl	8000d9c <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d902      	bls.n	8002fa6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa4:	e004      	b.n	8002fb0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002fa6:	f7ff fdff 	bl	8002ba8 <LL_RCC_PLLSAI1_IsReady>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1f0      	bne.n	8002f92 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d137      	bne.n	8003026 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	021b      	lsls	r3, r3, #8
 8002fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002fe4:	f7ff fdc2 	bl	8002b6c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fe8:	f7fd fed8 	bl	8000d9c <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fee:	e009      	b.n	8003004 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff0:	f7fd fed4 	bl	8000d9c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	73fb      	strb	r3, [r7, #15]
        break;
 8003002:	e004      	b.n	800300e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003004:	f7ff fdd0 	bl	8002ba8 <LL_RCC_PLLSAI1_IsReady>
 8003008:	4603      	mov	r3, r0
 800300a:	2b01      	cmp	r3, #1
 800300c:	d1f0      	bne.n	8002ff0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d108      	bne.n	8003026 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003018:	691a      	ldr	r2, [r3, #16]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003022:	4313      	orrs	r3, r2
 8003024:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800303c:	f7ff fda5 	bl	8002b8a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003040:	f7fd feac 	bl	8000d9c <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003046:	e009      	b.n	800305c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003048:	f7fd fea8 	bl	8000d9c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d902      	bls.n	800305c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	73fb      	strb	r3, [r7, #15]
      break;
 800305a:	e004      	b.n	8003066 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800305c:	f7ff fda4 	bl	8002ba8 <LL_RCC_PLLSAI1_IsReady>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d137      	bne.n	80030dc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003080:	4313      	orrs	r3, r2
 8003082:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003096:	4313      	orrs	r3, r2
 8003098:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800309a:	f7ff fd67 	bl	8002b6c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800309e:	f7fd fe7d 	bl	8000d9c <HAL_GetTick>
 80030a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030a4:	e009      	b.n	80030ba <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030a6:	f7fd fe79 	bl	8000d9c <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d902      	bls.n	80030ba <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	73fb      	strb	r3, [r7, #15]
        break;
 80030b8:	e004      	b.n	80030c4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030ba:	f7ff fd75 	bl	8002ba8 <LL_RCC_PLLSAI1_IsReady>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d1f0      	bne.n	80030a6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d108      	bne.n	80030dc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d8:	4313      	orrs	r3, r2
 80030da:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <LL_RCC_GetUSARTClockSource>:
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80030ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4013      	ands	r3, r2
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <LL_RCC_GetLPUARTClockSource>:
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800310e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003112:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4013      	ands	r3, r2
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e042      	b.n	80031be <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fd fbde 	bl	800090c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2224      	movs	r2, #36	; 0x24
 8003154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f82d 	bl	80031c8 <UART_SetConfig>
 800316e:	4603      	mov	r3, r0
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e022      	b.n	80031be <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fa49 	bl	8003618 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003194:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 fad0 	bl	800375c <UART_CheckIdleState>
 80031bc:	4603      	mov	r3, r0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031cc:	b08c      	sub	sp, #48	; 0x30
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4baf      	ldr	r3, [pc, #700]	; (80034b4 <UART_SetConfig+0x2ec>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003200:	430b      	orrs	r3, r1
 8003202:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4aa4      	ldr	r2, [pc, #656]	; (80034b8 <UART_SetConfig+0x2f0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d004      	beq.n	8003234 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003230:	4313      	orrs	r3, r2
 8003232:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800323e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003248:	430b      	orrs	r3, r1
 800324a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003252:	f023 010f 	bic.w	r1, r3, #15
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a95      	ldr	r2, [pc, #596]	; (80034bc <UART_SetConfig+0x2f4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d125      	bne.n	80032b8 <UART_SetConfig+0xf0>
 800326c:	2003      	movs	r0, #3
 800326e:	f7ff ff3a 	bl	80030e6 <LL_RCC_GetUSARTClockSource>
 8003272:	4603      	mov	r3, r0
 8003274:	2b03      	cmp	r3, #3
 8003276:	d81b      	bhi.n	80032b0 <UART_SetConfig+0xe8>
 8003278:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <UART_SetConfig+0xb8>)
 800327a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327e:	bf00      	nop
 8003280:	08003291 	.word	0x08003291
 8003284:	080032a1 	.word	0x080032a1
 8003288:	08003299 	.word	0x08003299
 800328c:	080032a9 	.word	0x080032a9
 8003290:	2301      	movs	r3, #1
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003296:	e042      	b.n	800331e <UART_SetConfig+0x156>
 8003298:	2302      	movs	r3, #2
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800329e:	e03e      	b.n	800331e <UART_SetConfig+0x156>
 80032a0:	2304      	movs	r3, #4
 80032a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032a6:	e03a      	b.n	800331e <UART_SetConfig+0x156>
 80032a8:	2308      	movs	r3, #8
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ae:	e036      	b.n	800331e <UART_SetConfig+0x156>
 80032b0:	2310      	movs	r3, #16
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032b6:	e032      	b.n	800331e <UART_SetConfig+0x156>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a7e      	ldr	r2, [pc, #504]	; (80034b8 <UART_SetConfig+0x2f0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d12a      	bne.n	8003318 <UART_SetConfig+0x150>
 80032c2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80032c6:	f7ff ff1e 	bl	8003106 <LL_RCC_GetLPUARTClockSource>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032d0:	d01a      	beq.n	8003308 <UART_SetConfig+0x140>
 80032d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032d6:	d81b      	bhi.n	8003310 <UART_SetConfig+0x148>
 80032d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032dc:	d00c      	beq.n	80032f8 <UART_SetConfig+0x130>
 80032de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e2:	d815      	bhi.n	8003310 <UART_SetConfig+0x148>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <UART_SetConfig+0x128>
 80032e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ec:	d008      	beq.n	8003300 <UART_SetConfig+0x138>
 80032ee:	e00f      	b.n	8003310 <UART_SetConfig+0x148>
 80032f0:	2300      	movs	r3, #0
 80032f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032f6:	e012      	b.n	800331e <UART_SetConfig+0x156>
 80032f8:	2302      	movs	r3, #2
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032fe:	e00e      	b.n	800331e <UART_SetConfig+0x156>
 8003300:	2304      	movs	r3, #4
 8003302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003306:	e00a      	b.n	800331e <UART_SetConfig+0x156>
 8003308:	2308      	movs	r3, #8
 800330a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800330e:	e006      	b.n	800331e <UART_SetConfig+0x156>
 8003310:	2310      	movs	r3, #16
 8003312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003316:	e002      	b.n	800331e <UART_SetConfig+0x156>
 8003318:	2310      	movs	r3, #16
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a65      	ldr	r2, [pc, #404]	; (80034b8 <UART_SetConfig+0x2f0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	f040 8097 	bne.w	8003458 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800332a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800332e:	2b08      	cmp	r3, #8
 8003330:	d823      	bhi.n	800337a <UART_SetConfig+0x1b2>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <UART_SetConfig+0x170>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800335d 	.word	0x0800335d
 800333c:	0800337b 	.word	0x0800337b
 8003340:	08003365 	.word	0x08003365
 8003344:	0800337b 	.word	0x0800337b
 8003348:	0800336b 	.word	0x0800336b
 800334c:	0800337b 	.word	0x0800337b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800337b 	.word	0x0800337b
 8003358:	08003373 	.word	0x08003373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7ff f9aa 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8003360:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003362:	e010      	b.n	8003386 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003364:	4b56      	ldr	r3, [pc, #344]	; (80034c0 <UART_SetConfig+0x2f8>)
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003368:	e00d      	b.n	8003386 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336a:	f7ff f923 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800336e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003370:	e009      	b.n	8003386 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003378:	e005      	b.n	8003386 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003384:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 812b 	beq.w	80035e4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	4a4c      	ldr	r2, [pc, #304]	; (80034c4 <UART_SetConfig+0x2fc>)
 8003394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003398:	461a      	mov	r2, r3
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	fbb3 f3f2 	udiv	r3, r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d305      	bcc.n	80033be <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d903      	bls.n	80033c6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033c4:	e10e      	b.n	80035e4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	2200      	movs	r2, #0
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	60fa      	str	r2, [r7, #12]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	4a3c      	ldr	r2, [pc, #240]	; (80034c4 <UART_SetConfig+0x2fc>)
 80033d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2200      	movs	r2, #0
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033e8:	f7fc fec8 	bl	800017c <__aeabi_uldivmod>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	020b      	lsls	r3, r1, #8
 80033fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003402:	0202      	lsls	r2, r0, #8
 8003404:	6979      	ldr	r1, [r7, #20]
 8003406:	6849      	ldr	r1, [r1, #4]
 8003408:	0849      	lsrs	r1, r1, #1
 800340a:	2000      	movs	r0, #0
 800340c:	460c      	mov	r4, r1
 800340e:	4605      	mov	r5, r0
 8003410:	eb12 0804 	adds.w	r8, r2, r4
 8003414:	eb43 0905 	adc.w	r9, r3, r5
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	469a      	mov	sl, r3
 8003420:	4693      	mov	fp, r2
 8003422:	4652      	mov	r2, sl
 8003424:	465b      	mov	r3, fp
 8003426:	4640      	mov	r0, r8
 8003428:	4649      	mov	r1, r9
 800342a:	f7fc fea7 	bl	800017c <__aeabi_uldivmod>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4613      	mov	r3, r2
 8003434:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800343c:	d308      	bcc.n	8003450 <UART_SetConfig+0x288>
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003444:	d204      	bcs.n	8003450 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6a3a      	ldr	r2, [r7, #32]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	e0c9      	b.n	80035e4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003456:	e0c5      	b.n	80035e4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003460:	d16d      	bne.n	800353e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003462:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003466:	3b01      	subs	r3, #1
 8003468:	2b07      	cmp	r3, #7
 800346a:	d82d      	bhi.n	80034c8 <UART_SetConfig+0x300>
 800346c:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <UART_SetConfig+0x2ac>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	08003495 	.word	0x08003495
 8003478:	0800349d 	.word	0x0800349d
 800347c:	080034c9 	.word	0x080034c9
 8003480:	080034a3 	.word	0x080034a3
 8003484:	080034c9 	.word	0x080034c9
 8003488:	080034c9 	.word	0x080034c9
 800348c:	080034c9 	.word	0x080034c9
 8003490:	080034ab 	.word	0x080034ab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003494:	f7ff f924 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 8003498:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800349a:	e01b      	b.n	80034d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <UART_SetConfig+0x2f8>)
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034a0:	e018      	b.n	80034d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a2:	f7ff f887 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 80034a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034a8:	e014      	b.n	80034d4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034b0:	e010      	b.n	80034d4 <UART_SetConfig+0x30c>
 80034b2:	bf00      	nop
 80034b4:	cfff69f3 	.word	0xcfff69f3
 80034b8:	40008000 	.word	0x40008000
 80034bc:	40013800 	.word	0x40013800
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	08004774 	.word	0x08004774
      default:
        pclk = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8084 	beq.w	80035e4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	4a4b      	ldr	r2, [pc, #300]	; (8003610 <UART_SetConfig+0x448>)
 80034e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034e6:	461a      	mov	r2, r3
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80034ee:	005a      	lsls	r2, r3, #1
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	085b      	lsrs	r3, r3, #1
 80034f6:	441a      	add	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	2b0f      	cmp	r3, #15
 8003506:	d916      	bls.n	8003536 <UART_SetConfig+0x36e>
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350e:	d212      	bcs.n	8003536 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	b29b      	uxth	r3, r3
 8003514:	f023 030f 	bic.w	r3, r3, #15
 8003518:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	b29b      	uxth	r3, r3
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	b29a      	uxth	r2, r3
 8003526:	8bfb      	ldrh	r3, [r7, #30]
 8003528:	4313      	orrs	r3, r2
 800352a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	8bfa      	ldrh	r2, [r7, #30]
 8003532:	60da      	str	r2, [r3, #12]
 8003534:	e056      	b.n	80035e4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800353c:	e052      	b.n	80035e4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800353e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003542:	3b01      	subs	r3, #1
 8003544:	2b07      	cmp	r3, #7
 8003546:	d822      	bhi.n	800358e <UART_SetConfig+0x3c6>
 8003548:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <UART_SetConfig+0x388>)
 800354a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354e:	bf00      	nop
 8003550:	08003571 	.word	0x08003571
 8003554:	08003579 	.word	0x08003579
 8003558:	0800358f 	.word	0x0800358f
 800355c:	0800357f 	.word	0x0800357f
 8003560:	0800358f 	.word	0x0800358f
 8003564:	0800358f 	.word	0x0800358f
 8003568:	0800358f 	.word	0x0800358f
 800356c:	08003587 	.word	0x08003587
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003570:	f7ff f8b6 	bl	80026e0 <HAL_RCC_GetPCLK2Freq>
 8003574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003576:	e010      	b.n	800359a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <UART_SetConfig+0x44c>)
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800357c:	e00d      	b.n	800359a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7ff f819 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8003582:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003584:	e009      	b.n	800359a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800358c:	e005      	b.n	800359a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003598:	bf00      	nop
    }

    if (pclk != 0U)
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	2b00      	cmp	r3, #0
 800359e:	d021      	beq.n	80035e4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	4a1a      	ldr	r2, [pc, #104]	; (8003610 <UART_SetConfig+0x448>)
 80035a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035aa:	461a      	mov	r2, r3
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	441a      	add	r2, r3
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035c4:	6a3b      	ldr	r3, [r7, #32]
 80035c6:	2b0f      	cmp	r3, #15
 80035c8:	d909      	bls.n	80035de <UART_SetConfig+0x416>
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d205      	bcs.n	80035de <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60da      	str	r2, [r3, #12]
 80035dc:	e002      	b.n	80035e4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	2200      	movs	r2, #0
 80035f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2200      	movs	r2, #0
 80035fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003600:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003604:	4618      	mov	r0, r3
 8003606:	3730      	adds	r7, #48	; 0x30
 8003608:	46bd      	mov	sp, r7
 800360a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360e:	bf00      	nop
 8003610:	08004774 	.word	0x08004774
 8003614:	00f42400 	.word	0x00f42400

08003618 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01a      	beq.n	800372e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003716:	d10a      	bne.n	800372e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00a      	beq.n	8003750 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]
  }
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af02      	add	r7, sp, #8
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800376c:	f7fd fb16 	bl	8000d9c <HAL_GetTick>
 8003770:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d10e      	bne.n	800379e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f832 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e028      	b.n	80037f0 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d10e      	bne.n	80037ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f81c 	bl	80037f8 <UART_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e012      	b.n	80037f0 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b09c      	sub	sp, #112	; 0x70
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003808:	e0a9      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	f000 80a5 	beq.w	800395e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003814:	f7fd fac2 	bl	8000d9c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003820:	429a      	cmp	r2, r3
 8003822:	d302      	bcc.n	800382a <UART_WaitOnFlagUntilTimeout+0x32>
 8003824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003826:	2b00      	cmp	r3, #0
 8003828:	d140      	bne.n	80038ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800383a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800383e:	667b      	str	r3, [r7, #100]	; 0x64
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003848:	65fb      	str	r3, [r7, #92]	; 0x5c
 800384a:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800384e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e6      	bne.n	800382a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3308      	adds	r3, #8
 8003862:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800386c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	663b      	str	r3, [r7, #96]	; 0x60
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800387c:	64ba      	str	r2, [r7, #72]	; 0x48
 800387e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003884:	e841 2300 	strex	r3, r2, [r1]
 8003888:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800388a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1e5      	bne.n	800385c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e069      	b.n	8003980 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d051      	beq.n	800395e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038c8:	d149      	bne.n	800395e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f2:	637b      	str	r3, [r7, #52]	; 0x34
 80038f4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e6      	bne.n	80038d4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3308      	adds	r3, #8
 800390c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	e853 3f00 	ldrex	r3, [r3]
 8003914:	613b      	str	r3, [r7, #16]
   return(result);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f023 0301 	bic.w	r3, r3, #1
 800391c:	66bb      	str	r3, [r7, #104]	; 0x68
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3308      	adds	r3, #8
 8003924:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003926:	623a      	str	r2, [r7, #32]
 8003928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	69f9      	ldr	r1, [r7, #28]
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	61bb      	str	r3, [r7, #24]
   return(result);
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e5      	bne.n	8003906 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e010      	b.n	8003980 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69da      	ldr	r2, [r3, #28]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	429a      	cmp	r2, r3
 800397a:	f43f af46 	beq.w	800380a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3770      	adds	r7, #112	; 0x70
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_UARTEx_DisableFifoMode+0x16>
 800399a:	2302      	movs	r3, #2
 800399c:	e027      	b.n	80039ee <HAL_UARTEx_DisableFifoMode+0x66>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2224      	movs	r2, #36	; 0x24
 80039aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0201 	bic.w	r2, r2, #1
 80039c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80039cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e02d      	b.n	8003a6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2224      	movs	r2, #36	; 0x24
 8003a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f850 	bl	8003af4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e02d      	b.n	8003aea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2224      	movs	r2, #36	; 0x24
 8003a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f812 	bl	8003af4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d108      	bne.n	8003b16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b14:	e031      	b.n	8003b7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b16:	2308      	movs	r3, #8
 8003b18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	0e5b      	lsrs	r3, r3, #25
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	0f5b      	lsrs	r3, r3, #29
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b3e:	7bbb      	ldrb	r3, [r7, #14]
 8003b40:	7b3a      	ldrb	r2, [r7, #12]
 8003b42:	4911      	ldr	r1, [pc, #68]	; (8003b88 <UARTEx_SetNbDataToProcess+0x94>)
 8003b44:	5c8a      	ldrb	r2, [r1, r2]
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b4a:	7b3a      	ldrb	r2, [r7, #12]
 8003b4c:	490f      	ldr	r1, [pc, #60]	; (8003b8c <UARTEx_SetNbDataToProcess+0x98>)
 8003b4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b50:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
 8003b5e:	7b7a      	ldrb	r2, [r7, #13]
 8003b60:	4909      	ldr	r1, [pc, #36]	; (8003b88 <UARTEx_SetNbDataToProcess+0x94>)
 8003b62:	5c8a      	ldrb	r2, [r1, r2]
 8003b64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b68:	7b7a      	ldrb	r2, [r7, #13]
 8003b6a:	4908      	ldr	r1, [pc, #32]	; (8003b8c <UARTEx_SetNbDataToProcess+0x98>)
 8003b6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	0800478c 	.word	0x0800478c
 8003b8c:	08004794 	.word	0x08004794

08003b90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003b98:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8003b9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	4013      	ands	r3, r2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	f107 0014 	add.w	r0, r7, #20
 8003bd4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	b004      	add	sp, #16
 8003c06:	4770      	bx	lr

08003c08 <__errno>:
 8003c08:	4b01      	ldr	r3, [pc, #4]	; (8003c10 <__errno+0x8>)
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000014 	.word	0x20000014

08003c14 <__libc_init_array>:
 8003c14:	b570      	push	{r4, r5, r6, lr}
 8003c16:	4d0d      	ldr	r5, [pc, #52]	; (8003c4c <__libc_init_array+0x38>)
 8003c18:	4c0d      	ldr	r4, [pc, #52]	; (8003c50 <__libc_init_array+0x3c>)
 8003c1a:	1b64      	subs	r4, r4, r5
 8003c1c:	10a4      	asrs	r4, r4, #2
 8003c1e:	2600      	movs	r6, #0
 8003c20:	42a6      	cmp	r6, r4
 8003c22:	d109      	bne.n	8003c38 <__libc_init_array+0x24>
 8003c24:	4d0b      	ldr	r5, [pc, #44]	; (8003c54 <__libc_init_array+0x40>)
 8003c26:	4c0c      	ldr	r4, [pc, #48]	; (8003c58 <__libc_init_array+0x44>)
 8003c28:	f000 fd1e 	bl	8004668 <_init>
 8003c2c:	1b64      	subs	r4, r4, r5
 8003c2e:	10a4      	asrs	r4, r4, #2
 8003c30:	2600      	movs	r6, #0
 8003c32:	42a6      	cmp	r6, r4
 8003c34:	d105      	bne.n	8003c42 <__libc_init_array+0x2e>
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c3c:	4798      	blx	r3
 8003c3e:	3601      	adds	r6, #1
 8003c40:	e7ee      	b.n	8003c20 <__libc_init_array+0xc>
 8003c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c46:	4798      	blx	r3
 8003c48:	3601      	adds	r6, #1
 8003c4a:	e7f2      	b.n	8003c32 <__libc_init_array+0x1e>
 8003c4c:	08004808 	.word	0x08004808
 8003c50:	08004808 	.word	0x08004808
 8003c54:	08004808 	.word	0x08004808
 8003c58:	0800480c 	.word	0x0800480c

08003c5c <memset>:
 8003c5c:	4402      	add	r2, r0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d100      	bne.n	8003c66 <memset+0xa>
 8003c64:	4770      	bx	lr
 8003c66:	f803 1b01 	strb.w	r1, [r3], #1
 8003c6a:	e7f9      	b.n	8003c60 <memset+0x4>

08003c6c <_puts_r>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	460e      	mov	r6, r1
 8003c70:	4605      	mov	r5, r0
 8003c72:	b118      	cbz	r0, 8003c7c <_puts_r+0x10>
 8003c74:	6983      	ldr	r3, [r0, #24]
 8003c76:	b90b      	cbnz	r3, 8003c7c <_puts_r+0x10>
 8003c78:	f000 fa48 	bl	800410c <__sinit>
 8003c7c:	69ab      	ldr	r3, [r5, #24]
 8003c7e:	68ac      	ldr	r4, [r5, #8]
 8003c80:	b913      	cbnz	r3, 8003c88 <_puts_r+0x1c>
 8003c82:	4628      	mov	r0, r5
 8003c84:	f000 fa42 	bl	800410c <__sinit>
 8003c88:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <_puts_r+0xd0>)
 8003c8a:	429c      	cmp	r4, r3
 8003c8c:	d120      	bne.n	8003cd0 <_puts_r+0x64>
 8003c8e:	686c      	ldr	r4, [r5, #4]
 8003c90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c92:	07db      	lsls	r3, r3, #31
 8003c94:	d405      	bmi.n	8003ca2 <_puts_r+0x36>
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	0598      	lsls	r0, r3, #22
 8003c9a:	d402      	bmi.n	8003ca2 <_puts_r+0x36>
 8003c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c9e:	f000 fad3 	bl	8004248 <__retarget_lock_acquire_recursive>
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	0719      	lsls	r1, r3, #28
 8003ca6:	d51d      	bpl.n	8003ce4 <_puts_r+0x78>
 8003ca8:	6923      	ldr	r3, [r4, #16]
 8003caa:	b1db      	cbz	r3, 8003ce4 <_puts_r+0x78>
 8003cac:	3e01      	subs	r6, #1
 8003cae:	68a3      	ldr	r3, [r4, #8]
 8003cb0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	60a3      	str	r3, [r4, #8]
 8003cb8:	bb39      	cbnz	r1, 8003d0a <_puts_r+0x9e>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	da38      	bge.n	8003d30 <_puts_r+0xc4>
 8003cbe:	4622      	mov	r2, r4
 8003cc0:	210a      	movs	r1, #10
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	f000 f848 	bl	8003d58 <__swbuf_r>
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d011      	beq.n	8003cf0 <_puts_r+0x84>
 8003ccc:	250a      	movs	r5, #10
 8003cce:	e011      	b.n	8003cf4 <_puts_r+0x88>
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <_puts_r+0xd4>)
 8003cd2:	429c      	cmp	r4, r3
 8003cd4:	d101      	bne.n	8003cda <_puts_r+0x6e>
 8003cd6:	68ac      	ldr	r4, [r5, #8]
 8003cd8:	e7da      	b.n	8003c90 <_puts_r+0x24>
 8003cda:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <_puts_r+0xd8>)
 8003cdc:	429c      	cmp	r4, r3
 8003cde:	bf08      	it	eq
 8003ce0:	68ec      	ldreq	r4, [r5, #12]
 8003ce2:	e7d5      	b.n	8003c90 <_puts_r+0x24>
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	f000 f888 	bl	8003dfc <__swsetup_r>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d0dd      	beq.n	8003cac <_puts_r+0x40>
 8003cf0:	f04f 35ff 	mov.w	r5, #4294967295
 8003cf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003cf6:	07da      	lsls	r2, r3, #31
 8003cf8:	d405      	bmi.n	8003d06 <_puts_r+0x9a>
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	059b      	lsls	r3, r3, #22
 8003cfe:	d402      	bmi.n	8003d06 <_puts_r+0x9a>
 8003d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d02:	f000 faa2 	bl	800424a <__retarget_lock_release_recursive>
 8003d06:	4628      	mov	r0, r5
 8003d08:	bd70      	pop	{r4, r5, r6, pc}
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	da04      	bge.n	8003d18 <_puts_r+0xac>
 8003d0e:	69a2      	ldr	r2, [r4, #24]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	dc06      	bgt.n	8003d22 <_puts_r+0xb6>
 8003d14:	290a      	cmp	r1, #10
 8003d16:	d004      	beq.n	8003d22 <_puts_r+0xb6>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	6022      	str	r2, [r4, #0]
 8003d1e:	7019      	strb	r1, [r3, #0]
 8003d20:	e7c5      	b.n	8003cae <_puts_r+0x42>
 8003d22:	4622      	mov	r2, r4
 8003d24:	4628      	mov	r0, r5
 8003d26:	f000 f817 	bl	8003d58 <__swbuf_r>
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d1bf      	bne.n	8003cae <_puts_r+0x42>
 8003d2e:	e7df      	b.n	8003cf0 <_puts_r+0x84>
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	250a      	movs	r5, #10
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	6022      	str	r2, [r4, #0]
 8003d38:	701d      	strb	r5, [r3, #0]
 8003d3a:	e7db      	b.n	8003cf4 <_puts_r+0x88>
 8003d3c:	080047c0 	.word	0x080047c0
 8003d40:	080047e0 	.word	0x080047e0
 8003d44:	080047a0 	.word	0x080047a0

08003d48 <puts>:
 8003d48:	4b02      	ldr	r3, [pc, #8]	; (8003d54 <puts+0xc>)
 8003d4a:	4601      	mov	r1, r0
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	f7ff bf8d 	b.w	8003c6c <_puts_r>
 8003d52:	bf00      	nop
 8003d54:	20000014 	.word	0x20000014

08003d58 <__swbuf_r>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	460e      	mov	r6, r1
 8003d5c:	4614      	mov	r4, r2
 8003d5e:	4605      	mov	r5, r0
 8003d60:	b118      	cbz	r0, 8003d6a <__swbuf_r+0x12>
 8003d62:	6983      	ldr	r3, [r0, #24]
 8003d64:	b90b      	cbnz	r3, 8003d6a <__swbuf_r+0x12>
 8003d66:	f000 f9d1 	bl	800410c <__sinit>
 8003d6a:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <__swbuf_r+0x98>)
 8003d6c:	429c      	cmp	r4, r3
 8003d6e:	d12b      	bne.n	8003dc8 <__swbuf_r+0x70>
 8003d70:	686c      	ldr	r4, [r5, #4]
 8003d72:	69a3      	ldr	r3, [r4, #24]
 8003d74:	60a3      	str	r3, [r4, #8]
 8003d76:	89a3      	ldrh	r3, [r4, #12]
 8003d78:	071a      	lsls	r2, r3, #28
 8003d7a:	d52f      	bpl.n	8003ddc <__swbuf_r+0x84>
 8003d7c:	6923      	ldr	r3, [r4, #16]
 8003d7e:	b36b      	cbz	r3, 8003ddc <__swbuf_r+0x84>
 8003d80:	6923      	ldr	r3, [r4, #16]
 8003d82:	6820      	ldr	r0, [r4, #0]
 8003d84:	1ac0      	subs	r0, r0, r3
 8003d86:	6963      	ldr	r3, [r4, #20]
 8003d88:	b2f6      	uxtb	r6, r6
 8003d8a:	4283      	cmp	r3, r0
 8003d8c:	4637      	mov	r7, r6
 8003d8e:	dc04      	bgt.n	8003d9a <__swbuf_r+0x42>
 8003d90:	4621      	mov	r1, r4
 8003d92:	4628      	mov	r0, r5
 8003d94:	f000 f926 	bl	8003fe4 <_fflush_r>
 8003d98:	bb30      	cbnz	r0, 8003de8 <__swbuf_r+0x90>
 8003d9a:	68a3      	ldr	r3, [r4, #8]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	60a3      	str	r3, [r4, #8]
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	6022      	str	r2, [r4, #0]
 8003da6:	701e      	strb	r6, [r3, #0]
 8003da8:	6963      	ldr	r3, [r4, #20]
 8003daa:	3001      	adds	r0, #1
 8003dac:	4283      	cmp	r3, r0
 8003dae:	d004      	beq.n	8003dba <__swbuf_r+0x62>
 8003db0:	89a3      	ldrh	r3, [r4, #12]
 8003db2:	07db      	lsls	r3, r3, #31
 8003db4:	d506      	bpl.n	8003dc4 <__swbuf_r+0x6c>
 8003db6:	2e0a      	cmp	r6, #10
 8003db8:	d104      	bne.n	8003dc4 <__swbuf_r+0x6c>
 8003dba:	4621      	mov	r1, r4
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	f000 f911 	bl	8003fe4 <_fflush_r>
 8003dc2:	b988      	cbnz	r0, 8003de8 <__swbuf_r+0x90>
 8003dc4:	4638      	mov	r0, r7
 8003dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc8:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <__swbuf_r+0x9c>)
 8003dca:	429c      	cmp	r4, r3
 8003dcc:	d101      	bne.n	8003dd2 <__swbuf_r+0x7a>
 8003dce:	68ac      	ldr	r4, [r5, #8]
 8003dd0:	e7cf      	b.n	8003d72 <__swbuf_r+0x1a>
 8003dd2:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <__swbuf_r+0xa0>)
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	bf08      	it	eq
 8003dd8:	68ec      	ldreq	r4, [r5, #12]
 8003dda:	e7ca      	b.n	8003d72 <__swbuf_r+0x1a>
 8003ddc:	4621      	mov	r1, r4
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 f80c 	bl	8003dfc <__swsetup_r>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d0cb      	beq.n	8003d80 <__swbuf_r+0x28>
 8003de8:	f04f 37ff 	mov.w	r7, #4294967295
 8003dec:	e7ea      	b.n	8003dc4 <__swbuf_r+0x6c>
 8003dee:	bf00      	nop
 8003df0:	080047c0 	.word	0x080047c0
 8003df4:	080047e0 	.word	0x080047e0
 8003df8:	080047a0 	.word	0x080047a0

08003dfc <__swsetup_r>:
 8003dfc:	4b32      	ldr	r3, [pc, #200]	; (8003ec8 <__swsetup_r+0xcc>)
 8003dfe:	b570      	push	{r4, r5, r6, lr}
 8003e00:	681d      	ldr	r5, [r3, #0]
 8003e02:	4606      	mov	r6, r0
 8003e04:	460c      	mov	r4, r1
 8003e06:	b125      	cbz	r5, 8003e12 <__swsetup_r+0x16>
 8003e08:	69ab      	ldr	r3, [r5, #24]
 8003e0a:	b913      	cbnz	r3, 8003e12 <__swsetup_r+0x16>
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	f000 f97d 	bl	800410c <__sinit>
 8003e12:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <__swsetup_r+0xd0>)
 8003e14:	429c      	cmp	r4, r3
 8003e16:	d10f      	bne.n	8003e38 <__swsetup_r+0x3c>
 8003e18:	686c      	ldr	r4, [r5, #4]
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e20:	0719      	lsls	r1, r3, #28
 8003e22:	d42c      	bmi.n	8003e7e <__swsetup_r+0x82>
 8003e24:	06dd      	lsls	r5, r3, #27
 8003e26:	d411      	bmi.n	8003e4c <__swsetup_r+0x50>
 8003e28:	2309      	movs	r3, #9
 8003e2a:	6033      	str	r3, [r6, #0]
 8003e2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e30:	81a3      	strh	r3, [r4, #12]
 8003e32:	f04f 30ff 	mov.w	r0, #4294967295
 8003e36:	e03e      	b.n	8003eb6 <__swsetup_r+0xba>
 8003e38:	4b25      	ldr	r3, [pc, #148]	; (8003ed0 <__swsetup_r+0xd4>)
 8003e3a:	429c      	cmp	r4, r3
 8003e3c:	d101      	bne.n	8003e42 <__swsetup_r+0x46>
 8003e3e:	68ac      	ldr	r4, [r5, #8]
 8003e40:	e7eb      	b.n	8003e1a <__swsetup_r+0x1e>
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <__swsetup_r+0xd8>)
 8003e44:	429c      	cmp	r4, r3
 8003e46:	bf08      	it	eq
 8003e48:	68ec      	ldreq	r4, [r5, #12]
 8003e4a:	e7e6      	b.n	8003e1a <__swsetup_r+0x1e>
 8003e4c:	0758      	lsls	r0, r3, #29
 8003e4e:	d512      	bpl.n	8003e76 <__swsetup_r+0x7a>
 8003e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e52:	b141      	cbz	r1, 8003e66 <__swsetup_r+0x6a>
 8003e54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e58:	4299      	cmp	r1, r3
 8003e5a:	d002      	beq.n	8003e62 <__swsetup_r+0x66>
 8003e5c:	4630      	mov	r0, r6
 8003e5e:	f000 fa5b 	bl	8004318 <_free_r>
 8003e62:	2300      	movs	r3, #0
 8003e64:	6363      	str	r3, [r4, #52]	; 0x34
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6063      	str	r3, [r4, #4]
 8003e72:	6923      	ldr	r3, [r4, #16]
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	f043 0308 	orr.w	r3, r3, #8
 8003e7c:	81a3      	strh	r3, [r4, #12]
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	b94b      	cbnz	r3, 8003e96 <__swsetup_r+0x9a>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8c:	d003      	beq.n	8003e96 <__swsetup_r+0x9a>
 8003e8e:	4621      	mov	r1, r4
 8003e90:	4630      	mov	r0, r6
 8003e92:	f000 fa01 	bl	8004298 <__smakebuf_r>
 8003e96:	89a0      	ldrh	r0, [r4, #12]
 8003e98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e9c:	f010 0301 	ands.w	r3, r0, #1
 8003ea0:	d00a      	beq.n	8003eb8 <__swsetup_r+0xbc>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60a3      	str	r3, [r4, #8]
 8003ea6:	6963      	ldr	r3, [r4, #20]
 8003ea8:	425b      	negs	r3, r3
 8003eaa:	61a3      	str	r3, [r4, #24]
 8003eac:	6923      	ldr	r3, [r4, #16]
 8003eae:	b943      	cbnz	r3, 8003ec2 <__swsetup_r+0xc6>
 8003eb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003eb4:	d1ba      	bne.n	8003e2c <__swsetup_r+0x30>
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	0781      	lsls	r1, r0, #30
 8003eba:	bf58      	it	pl
 8003ebc:	6963      	ldrpl	r3, [r4, #20]
 8003ebe:	60a3      	str	r3, [r4, #8]
 8003ec0:	e7f4      	b.n	8003eac <__swsetup_r+0xb0>
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e7f7      	b.n	8003eb6 <__swsetup_r+0xba>
 8003ec6:	bf00      	nop
 8003ec8:	20000014 	.word	0x20000014
 8003ecc:	080047c0 	.word	0x080047c0
 8003ed0:	080047e0 	.word	0x080047e0
 8003ed4:	080047a0 	.word	0x080047a0

08003ed8 <__sflush_r>:
 8003ed8:	898a      	ldrh	r2, [r1, #12]
 8003eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ede:	4605      	mov	r5, r0
 8003ee0:	0710      	lsls	r0, r2, #28
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	d458      	bmi.n	8003f98 <__sflush_r+0xc0>
 8003ee6:	684b      	ldr	r3, [r1, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	dc05      	bgt.n	8003ef8 <__sflush_r+0x20>
 8003eec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	dc02      	bgt.n	8003ef8 <__sflush_r+0x20>
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003efa:	2e00      	cmp	r6, #0
 8003efc:	d0f9      	beq.n	8003ef2 <__sflush_r+0x1a>
 8003efe:	2300      	movs	r3, #0
 8003f00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f04:	682f      	ldr	r7, [r5, #0]
 8003f06:	602b      	str	r3, [r5, #0]
 8003f08:	d032      	beq.n	8003f70 <__sflush_r+0x98>
 8003f0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	075a      	lsls	r2, r3, #29
 8003f10:	d505      	bpl.n	8003f1e <__sflush_r+0x46>
 8003f12:	6863      	ldr	r3, [r4, #4]
 8003f14:	1ac0      	subs	r0, r0, r3
 8003f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f18:	b10b      	cbz	r3, 8003f1e <__sflush_r+0x46>
 8003f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f1c:	1ac0      	subs	r0, r0, r3
 8003f1e:	2300      	movs	r3, #0
 8003f20:	4602      	mov	r2, r0
 8003f22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f24:	6a21      	ldr	r1, [r4, #32]
 8003f26:	4628      	mov	r0, r5
 8003f28:	47b0      	blx	r6
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	d106      	bne.n	8003f3e <__sflush_r+0x66>
 8003f30:	6829      	ldr	r1, [r5, #0]
 8003f32:	291d      	cmp	r1, #29
 8003f34:	d82c      	bhi.n	8003f90 <__sflush_r+0xb8>
 8003f36:	4a2a      	ldr	r2, [pc, #168]	; (8003fe0 <__sflush_r+0x108>)
 8003f38:	40ca      	lsrs	r2, r1
 8003f3a:	07d6      	lsls	r6, r2, #31
 8003f3c:	d528      	bpl.n	8003f90 <__sflush_r+0xb8>
 8003f3e:	2200      	movs	r2, #0
 8003f40:	6062      	str	r2, [r4, #4]
 8003f42:	04d9      	lsls	r1, r3, #19
 8003f44:	6922      	ldr	r2, [r4, #16]
 8003f46:	6022      	str	r2, [r4, #0]
 8003f48:	d504      	bpl.n	8003f54 <__sflush_r+0x7c>
 8003f4a:	1c42      	adds	r2, r0, #1
 8003f4c:	d101      	bne.n	8003f52 <__sflush_r+0x7a>
 8003f4e:	682b      	ldr	r3, [r5, #0]
 8003f50:	b903      	cbnz	r3, 8003f54 <__sflush_r+0x7c>
 8003f52:	6560      	str	r0, [r4, #84]	; 0x54
 8003f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f56:	602f      	str	r7, [r5, #0]
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	d0ca      	beq.n	8003ef2 <__sflush_r+0x1a>
 8003f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f60:	4299      	cmp	r1, r3
 8003f62:	d002      	beq.n	8003f6a <__sflush_r+0x92>
 8003f64:	4628      	mov	r0, r5
 8003f66:	f000 f9d7 	bl	8004318 <_free_r>
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8003f6e:	e7c1      	b.n	8003ef4 <__sflush_r+0x1c>
 8003f70:	6a21      	ldr	r1, [r4, #32]
 8003f72:	2301      	movs	r3, #1
 8003f74:	4628      	mov	r0, r5
 8003f76:	47b0      	blx	r6
 8003f78:	1c41      	adds	r1, r0, #1
 8003f7a:	d1c7      	bne.n	8003f0c <__sflush_r+0x34>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0c4      	beq.n	8003f0c <__sflush_r+0x34>
 8003f82:	2b1d      	cmp	r3, #29
 8003f84:	d001      	beq.n	8003f8a <__sflush_r+0xb2>
 8003f86:	2b16      	cmp	r3, #22
 8003f88:	d101      	bne.n	8003f8e <__sflush_r+0xb6>
 8003f8a:	602f      	str	r7, [r5, #0]
 8003f8c:	e7b1      	b.n	8003ef2 <__sflush_r+0x1a>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f94:	81a3      	strh	r3, [r4, #12]
 8003f96:	e7ad      	b.n	8003ef4 <__sflush_r+0x1c>
 8003f98:	690f      	ldr	r7, [r1, #16]
 8003f9a:	2f00      	cmp	r7, #0
 8003f9c:	d0a9      	beq.n	8003ef2 <__sflush_r+0x1a>
 8003f9e:	0793      	lsls	r3, r2, #30
 8003fa0:	680e      	ldr	r6, [r1, #0]
 8003fa2:	bf08      	it	eq
 8003fa4:	694b      	ldreq	r3, [r1, #20]
 8003fa6:	600f      	str	r7, [r1, #0]
 8003fa8:	bf18      	it	ne
 8003faa:	2300      	movne	r3, #0
 8003fac:	eba6 0807 	sub.w	r8, r6, r7
 8003fb0:	608b      	str	r3, [r1, #8]
 8003fb2:	f1b8 0f00 	cmp.w	r8, #0
 8003fb6:	dd9c      	ble.n	8003ef2 <__sflush_r+0x1a>
 8003fb8:	6a21      	ldr	r1, [r4, #32]
 8003fba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fbc:	4643      	mov	r3, r8
 8003fbe:	463a      	mov	r2, r7
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	47b0      	blx	r6
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	dc06      	bgt.n	8003fd6 <__sflush_r+0xfe>
 8003fc8:	89a3      	ldrh	r3, [r4, #12]
 8003fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fce:	81a3      	strh	r3, [r4, #12]
 8003fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd4:	e78e      	b.n	8003ef4 <__sflush_r+0x1c>
 8003fd6:	4407      	add	r7, r0
 8003fd8:	eba8 0800 	sub.w	r8, r8, r0
 8003fdc:	e7e9      	b.n	8003fb2 <__sflush_r+0xda>
 8003fde:	bf00      	nop
 8003fe0:	20400001 	.word	0x20400001

08003fe4 <_fflush_r>:
 8003fe4:	b538      	push	{r3, r4, r5, lr}
 8003fe6:	690b      	ldr	r3, [r1, #16]
 8003fe8:	4605      	mov	r5, r0
 8003fea:	460c      	mov	r4, r1
 8003fec:	b913      	cbnz	r3, 8003ff4 <_fflush_r+0x10>
 8003fee:	2500      	movs	r5, #0
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	bd38      	pop	{r3, r4, r5, pc}
 8003ff4:	b118      	cbz	r0, 8003ffe <_fflush_r+0x1a>
 8003ff6:	6983      	ldr	r3, [r0, #24]
 8003ff8:	b90b      	cbnz	r3, 8003ffe <_fflush_r+0x1a>
 8003ffa:	f000 f887 	bl	800410c <__sinit>
 8003ffe:	4b14      	ldr	r3, [pc, #80]	; (8004050 <_fflush_r+0x6c>)
 8004000:	429c      	cmp	r4, r3
 8004002:	d11b      	bne.n	800403c <_fflush_r+0x58>
 8004004:	686c      	ldr	r4, [r5, #4]
 8004006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0ef      	beq.n	8003fee <_fflush_r+0xa>
 800400e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004010:	07d0      	lsls	r0, r2, #31
 8004012:	d404      	bmi.n	800401e <_fflush_r+0x3a>
 8004014:	0599      	lsls	r1, r3, #22
 8004016:	d402      	bmi.n	800401e <_fflush_r+0x3a>
 8004018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800401a:	f000 f915 	bl	8004248 <__retarget_lock_acquire_recursive>
 800401e:	4628      	mov	r0, r5
 8004020:	4621      	mov	r1, r4
 8004022:	f7ff ff59 	bl	8003ed8 <__sflush_r>
 8004026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004028:	07da      	lsls	r2, r3, #31
 800402a:	4605      	mov	r5, r0
 800402c:	d4e0      	bmi.n	8003ff0 <_fflush_r+0xc>
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	059b      	lsls	r3, r3, #22
 8004032:	d4dd      	bmi.n	8003ff0 <_fflush_r+0xc>
 8004034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004036:	f000 f908 	bl	800424a <__retarget_lock_release_recursive>
 800403a:	e7d9      	b.n	8003ff0 <_fflush_r+0xc>
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <_fflush_r+0x70>)
 800403e:	429c      	cmp	r4, r3
 8004040:	d101      	bne.n	8004046 <_fflush_r+0x62>
 8004042:	68ac      	ldr	r4, [r5, #8]
 8004044:	e7df      	b.n	8004006 <_fflush_r+0x22>
 8004046:	4b04      	ldr	r3, [pc, #16]	; (8004058 <_fflush_r+0x74>)
 8004048:	429c      	cmp	r4, r3
 800404a:	bf08      	it	eq
 800404c:	68ec      	ldreq	r4, [r5, #12]
 800404e:	e7da      	b.n	8004006 <_fflush_r+0x22>
 8004050:	080047c0 	.word	0x080047c0
 8004054:	080047e0 	.word	0x080047e0
 8004058:	080047a0 	.word	0x080047a0

0800405c <std>:
 800405c:	2300      	movs	r3, #0
 800405e:	b510      	push	{r4, lr}
 8004060:	4604      	mov	r4, r0
 8004062:	e9c0 3300 	strd	r3, r3, [r0]
 8004066:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800406a:	6083      	str	r3, [r0, #8]
 800406c:	8181      	strh	r1, [r0, #12]
 800406e:	6643      	str	r3, [r0, #100]	; 0x64
 8004070:	81c2      	strh	r2, [r0, #14]
 8004072:	6183      	str	r3, [r0, #24]
 8004074:	4619      	mov	r1, r3
 8004076:	2208      	movs	r2, #8
 8004078:	305c      	adds	r0, #92	; 0x5c
 800407a:	f7ff fdef 	bl	8003c5c <memset>
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <std+0x38>)
 8004080:	6263      	str	r3, [r4, #36]	; 0x24
 8004082:	4b05      	ldr	r3, [pc, #20]	; (8004098 <std+0x3c>)
 8004084:	62a3      	str	r3, [r4, #40]	; 0x28
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <std+0x40>)
 8004088:	62e3      	str	r3, [r4, #44]	; 0x2c
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <std+0x44>)
 800408c:	6224      	str	r4, [r4, #32]
 800408e:	6323      	str	r3, [r4, #48]	; 0x30
 8004090:	bd10      	pop	{r4, pc}
 8004092:	bf00      	nop
 8004094:	080044f9 	.word	0x080044f9
 8004098:	0800451b 	.word	0x0800451b
 800409c:	08004553 	.word	0x08004553
 80040a0:	08004577 	.word	0x08004577

080040a4 <_cleanup_r>:
 80040a4:	4901      	ldr	r1, [pc, #4]	; (80040ac <_cleanup_r+0x8>)
 80040a6:	f000 b8af 	b.w	8004208 <_fwalk_reent>
 80040aa:	bf00      	nop
 80040ac:	08003fe5 	.word	0x08003fe5

080040b0 <__sfmoreglue>:
 80040b0:	b570      	push	{r4, r5, r6, lr}
 80040b2:	2268      	movs	r2, #104	; 0x68
 80040b4:	1e4d      	subs	r5, r1, #1
 80040b6:	4355      	muls	r5, r2
 80040b8:	460e      	mov	r6, r1
 80040ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80040be:	f000 f997 	bl	80043f0 <_malloc_r>
 80040c2:	4604      	mov	r4, r0
 80040c4:	b140      	cbz	r0, 80040d8 <__sfmoreglue+0x28>
 80040c6:	2100      	movs	r1, #0
 80040c8:	e9c0 1600 	strd	r1, r6, [r0]
 80040cc:	300c      	adds	r0, #12
 80040ce:	60a0      	str	r0, [r4, #8]
 80040d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80040d4:	f7ff fdc2 	bl	8003c5c <memset>
 80040d8:	4620      	mov	r0, r4
 80040da:	bd70      	pop	{r4, r5, r6, pc}

080040dc <__sfp_lock_acquire>:
 80040dc:	4801      	ldr	r0, [pc, #4]	; (80040e4 <__sfp_lock_acquire+0x8>)
 80040de:	f000 b8b3 	b.w	8004248 <__retarget_lock_acquire_recursive>
 80040e2:	bf00      	nop
 80040e4:	20000425 	.word	0x20000425

080040e8 <__sfp_lock_release>:
 80040e8:	4801      	ldr	r0, [pc, #4]	; (80040f0 <__sfp_lock_release+0x8>)
 80040ea:	f000 b8ae 	b.w	800424a <__retarget_lock_release_recursive>
 80040ee:	bf00      	nop
 80040f0:	20000425 	.word	0x20000425

080040f4 <__sinit_lock_acquire>:
 80040f4:	4801      	ldr	r0, [pc, #4]	; (80040fc <__sinit_lock_acquire+0x8>)
 80040f6:	f000 b8a7 	b.w	8004248 <__retarget_lock_acquire_recursive>
 80040fa:	bf00      	nop
 80040fc:	20000426 	.word	0x20000426

08004100 <__sinit_lock_release>:
 8004100:	4801      	ldr	r0, [pc, #4]	; (8004108 <__sinit_lock_release+0x8>)
 8004102:	f000 b8a2 	b.w	800424a <__retarget_lock_release_recursive>
 8004106:	bf00      	nop
 8004108:	20000426 	.word	0x20000426

0800410c <__sinit>:
 800410c:	b510      	push	{r4, lr}
 800410e:	4604      	mov	r4, r0
 8004110:	f7ff fff0 	bl	80040f4 <__sinit_lock_acquire>
 8004114:	69a3      	ldr	r3, [r4, #24]
 8004116:	b11b      	cbz	r3, 8004120 <__sinit+0x14>
 8004118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800411c:	f7ff bff0 	b.w	8004100 <__sinit_lock_release>
 8004120:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004124:	6523      	str	r3, [r4, #80]	; 0x50
 8004126:	4b13      	ldr	r3, [pc, #76]	; (8004174 <__sinit+0x68>)
 8004128:	4a13      	ldr	r2, [pc, #76]	; (8004178 <__sinit+0x6c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	62a2      	str	r2, [r4, #40]	; 0x28
 800412e:	42a3      	cmp	r3, r4
 8004130:	bf04      	itt	eq
 8004132:	2301      	moveq	r3, #1
 8004134:	61a3      	streq	r3, [r4, #24]
 8004136:	4620      	mov	r0, r4
 8004138:	f000 f820 	bl	800417c <__sfp>
 800413c:	6060      	str	r0, [r4, #4]
 800413e:	4620      	mov	r0, r4
 8004140:	f000 f81c 	bl	800417c <__sfp>
 8004144:	60a0      	str	r0, [r4, #8]
 8004146:	4620      	mov	r0, r4
 8004148:	f000 f818 	bl	800417c <__sfp>
 800414c:	2200      	movs	r2, #0
 800414e:	60e0      	str	r0, [r4, #12]
 8004150:	2104      	movs	r1, #4
 8004152:	6860      	ldr	r0, [r4, #4]
 8004154:	f7ff ff82 	bl	800405c <std>
 8004158:	68a0      	ldr	r0, [r4, #8]
 800415a:	2201      	movs	r2, #1
 800415c:	2109      	movs	r1, #9
 800415e:	f7ff ff7d 	bl	800405c <std>
 8004162:	68e0      	ldr	r0, [r4, #12]
 8004164:	2202      	movs	r2, #2
 8004166:	2112      	movs	r1, #18
 8004168:	f7ff ff78 	bl	800405c <std>
 800416c:	2301      	movs	r3, #1
 800416e:	61a3      	str	r3, [r4, #24]
 8004170:	e7d2      	b.n	8004118 <__sinit+0xc>
 8004172:	bf00      	nop
 8004174:	0800479c 	.word	0x0800479c
 8004178:	080040a5 	.word	0x080040a5

0800417c <__sfp>:
 800417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417e:	4607      	mov	r7, r0
 8004180:	f7ff ffac 	bl	80040dc <__sfp_lock_acquire>
 8004184:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <__sfp+0x84>)
 8004186:	681e      	ldr	r6, [r3, #0]
 8004188:	69b3      	ldr	r3, [r6, #24]
 800418a:	b913      	cbnz	r3, 8004192 <__sfp+0x16>
 800418c:	4630      	mov	r0, r6
 800418e:	f7ff ffbd 	bl	800410c <__sinit>
 8004192:	3648      	adds	r6, #72	; 0x48
 8004194:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004198:	3b01      	subs	r3, #1
 800419a:	d503      	bpl.n	80041a4 <__sfp+0x28>
 800419c:	6833      	ldr	r3, [r6, #0]
 800419e:	b30b      	cbz	r3, 80041e4 <__sfp+0x68>
 80041a0:	6836      	ldr	r6, [r6, #0]
 80041a2:	e7f7      	b.n	8004194 <__sfp+0x18>
 80041a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041a8:	b9d5      	cbnz	r5, 80041e0 <__sfp+0x64>
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <__sfp+0x88>)
 80041ac:	60e3      	str	r3, [r4, #12]
 80041ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041b2:	6665      	str	r5, [r4, #100]	; 0x64
 80041b4:	f000 f847 	bl	8004246 <__retarget_lock_init_recursive>
 80041b8:	f7ff ff96 	bl	80040e8 <__sfp_lock_release>
 80041bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80041c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80041c4:	6025      	str	r5, [r4, #0]
 80041c6:	61a5      	str	r5, [r4, #24]
 80041c8:	2208      	movs	r2, #8
 80041ca:	4629      	mov	r1, r5
 80041cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041d0:	f7ff fd44 	bl	8003c5c <memset>
 80041d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041dc:	4620      	mov	r0, r4
 80041de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041e0:	3468      	adds	r4, #104	; 0x68
 80041e2:	e7d9      	b.n	8004198 <__sfp+0x1c>
 80041e4:	2104      	movs	r1, #4
 80041e6:	4638      	mov	r0, r7
 80041e8:	f7ff ff62 	bl	80040b0 <__sfmoreglue>
 80041ec:	4604      	mov	r4, r0
 80041ee:	6030      	str	r0, [r6, #0]
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d1d5      	bne.n	80041a0 <__sfp+0x24>
 80041f4:	f7ff ff78 	bl	80040e8 <__sfp_lock_release>
 80041f8:	230c      	movs	r3, #12
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	e7ee      	b.n	80041dc <__sfp+0x60>
 80041fe:	bf00      	nop
 8004200:	0800479c 	.word	0x0800479c
 8004204:	ffff0001 	.word	0xffff0001

08004208 <_fwalk_reent>:
 8004208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800420c:	4606      	mov	r6, r0
 800420e:	4688      	mov	r8, r1
 8004210:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004214:	2700      	movs	r7, #0
 8004216:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800421a:	f1b9 0901 	subs.w	r9, r9, #1
 800421e:	d505      	bpl.n	800422c <_fwalk_reent+0x24>
 8004220:	6824      	ldr	r4, [r4, #0]
 8004222:	2c00      	cmp	r4, #0
 8004224:	d1f7      	bne.n	8004216 <_fwalk_reent+0xe>
 8004226:	4638      	mov	r0, r7
 8004228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800422c:	89ab      	ldrh	r3, [r5, #12]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d907      	bls.n	8004242 <_fwalk_reent+0x3a>
 8004232:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004236:	3301      	adds	r3, #1
 8004238:	d003      	beq.n	8004242 <_fwalk_reent+0x3a>
 800423a:	4629      	mov	r1, r5
 800423c:	4630      	mov	r0, r6
 800423e:	47c0      	blx	r8
 8004240:	4307      	orrs	r7, r0
 8004242:	3568      	adds	r5, #104	; 0x68
 8004244:	e7e9      	b.n	800421a <_fwalk_reent+0x12>

08004246 <__retarget_lock_init_recursive>:
 8004246:	4770      	bx	lr

08004248 <__retarget_lock_acquire_recursive>:
 8004248:	4770      	bx	lr

0800424a <__retarget_lock_release_recursive>:
 800424a:	4770      	bx	lr

0800424c <__swhatbuf_r>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	460e      	mov	r6, r1
 8004250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004254:	2900      	cmp	r1, #0
 8004256:	b096      	sub	sp, #88	; 0x58
 8004258:	4614      	mov	r4, r2
 800425a:	461d      	mov	r5, r3
 800425c:	da08      	bge.n	8004270 <__swhatbuf_r+0x24>
 800425e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	602a      	str	r2, [r5, #0]
 8004266:	061a      	lsls	r2, r3, #24
 8004268:	d410      	bmi.n	800428c <__swhatbuf_r+0x40>
 800426a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426e:	e00e      	b.n	800428e <__swhatbuf_r+0x42>
 8004270:	466a      	mov	r2, sp
 8004272:	f000 f9a7 	bl	80045c4 <_fstat_r>
 8004276:	2800      	cmp	r0, #0
 8004278:	dbf1      	blt.n	800425e <__swhatbuf_r+0x12>
 800427a:	9a01      	ldr	r2, [sp, #4]
 800427c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004280:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004284:	425a      	negs	r2, r3
 8004286:	415a      	adcs	r2, r3
 8004288:	602a      	str	r2, [r5, #0]
 800428a:	e7ee      	b.n	800426a <__swhatbuf_r+0x1e>
 800428c:	2340      	movs	r3, #64	; 0x40
 800428e:	2000      	movs	r0, #0
 8004290:	6023      	str	r3, [r4, #0]
 8004292:	b016      	add	sp, #88	; 0x58
 8004294:	bd70      	pop	{r4, r5, r6, pc}
	...

08004298 <__smakebuf_r>:
 8004298:	898b      	ldrh	r3, [r1, #12]
 800429a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800429c:	079d      	lsls	r5, r3, #30
 800429e:	4606      	mov	r6, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	d507      	bpl.n	80042b4 <__smakebuf_r+0x1c>
 80042a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	6123      	str	r3, [r4, #16]
 80042ac:	2301      	movs	r3, #1
 80042ae:	6163      	str	r3, [r4, #20]
 80042b0:	b002      	add	sp, #8
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	ab01      	add	r3, sp, #4
 80042b6:	466a      	mov	r2, sp
 80042b8:	f7ff ffc8 	bl	800424c <__swhatbuf_r>
 80042bc:	9900      	ldr	r1, [sp, #0]
 80042be:	4605      	mov	r5, r0
 80042c0:	4630      	mov	r0, r6
 80042c2:	f000 f895 	bl	80043f0 <_malloc_r>
 80042c6:	b948      	cbnz	r0, 80042dc <__smakebuf_r+0x44>
 80042c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042cc:	059a      	lsls	r2, r3, #22
 80042ce:	d4ef      	bmi.n	80042b0 <__smakebuf_r+0x18>
 80042d0:	f023 0303 	bic.w	r3, r3, #3
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	81a3      	strh	r3, [r4, #12]
 80042da:	e7e3      	b.n	80042a4 <__smakebuf_r+0xc>
 80042dc:	4b0d      	ldr	r3, [pc, #52]	; (8004314 <__smakebuf_r+0x7c>)
 80042de:	62b3      	str	r3, [r6, #40]	; 0x28
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	6020      	str	r0, [r4, #0]
 80042e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e8:	81a3      	strh	r3, [r4, #12]
 80042ea:	9b00      	ldr	r3, [sp, #0]
 80042ec:	6163      	str	r3, [r4, #20]
 80042ee:	9b01      	ldr	r3, [sp, #4]
 80042f0:	6120      	str	r0, [r4, #16]
 80042f2:	b15b      	cbz	r3, 800430c <__smakebuf_r+0x74>
 80042f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 f975 	bl	80045e8 <_isatty_r>
 80042fe:	b128      	cbz	r0, 800430c <__smakebuf_r+0x74>
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	f023 0303 	bic.w	r3, r3, #3
 8004306:	f043 0301 	orr.w	r3, r3, #1
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	89a0      	ldrh	r0, [r4, #12]
 800430e:	4305      	orrs	r5, r0
 8004310:	81a5      	strh	r5, [r4, #12]
 8004312:	e7cd      	b.n	80042b0 <__smakebuf_r+0x18>
 8004314:	080040a5 	.word	0x080040a5

08004318 <_free_r>:
 8004318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800431a:	2900      	cmp	r1, #0
 800431c:	d044      	beq.n	80043a8 <_free_r+0x90>
 800431e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004322:	9001      	str	r0, [sp, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f1a1 0404 	sub.w	r4, r1, #4
 800432a:	bfb8      	it	lt
 800432c:	18e4      	addlt	r4, r4, r3
 800432e:	f000 f97d 	bl	800462c <__malloc_lock>
 8004332:	4a1e      	ldr	r2, [pc, #120]	; (80043ac <_free_r+0x94>)
 8004334:	9801      	ldr	r0, [sp, #4]
 8004336:	6813      	ldr	r3, [r2, #0]
 8004338:	b933      	cbnz	r3, 8004348 <_free_r+0x30>
 800433a:	6063      	str	r3, [r4, #4]
 800433c:	6014      	str	r4, [r2, #0]
 800433e:	b003      	add	sp, #12
 8004340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004344:	f000 b978 	b.w	8004638 <__malloc_unlock>
 8004348:	42a3      	cmp	r3, r4
 800434a:	d908      	bls.n	800435e <_free_r+0x46>
 800434c:	6825      	ldr	r5, [r4, #0]
 800434e:	1961      	adds	r1, r4, r5
 8004350:	428b      	cmp	r3, r1
 8004352:	bf01      	itttt	eq
 8004354:	6819      	ldreq	r1, [r3, #0]
 8004356:	685b      	ldreq	r3, [r3, #4]
 8004358:	1949      	addeq	r1, r1, r5
 800435a:	6021      	streq	r1, [r4, #0]
 800435c:	e7ed      	b.n	800433a <_free_r+0x22>
 800435e:	461a      	mov	r2, r3
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	b10b      	cbz	r3, 8004368 <_free_r+0x50>
 8004364:	42a3      	cmp	r3, r4
 8004366:	d9fa      	bls.n	800435e <_free_r+0x46>
 8004368:	6811      	ldr	r1, [r2, #0]
 800436a:	1855      	adds	r5, r2, r1
 800436c:	42a5      	cmp	r5, r4
 800436e:	d10b      	bne.n	8004388 <_free_r+0x70>
 8004370:	6824      	ldr	r4, [r4, #0]
 8004372:	4421      	add	r1, r4
 8004374:	1854      	adds	r4, r2, r1
 8004376:	42a3      	cmp	r3, r4
 8004378:	6011      	str	r1, [r2, #0]
 800437a:	d1e0      	bne.n	800433e <_free_r+0x26>
 800437c:	681c      	ldr	r4, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	6053      	str	r3, [r2, #4]
 8004382:	4421      	add	r1, r4
 8004384:	6011      	str	r1, [r2, #0]
 8004386:	e7da      	b.n	800433e <_free_r+0x26>
 8004388:	d902      	bls.n	8004390 <_free_r+0x78>
 800438a:	230c      	movs	r3, #12
 800438c:	6003      	str	r3, [r0, #0]
 800438e:	e7d6      	b.n	800433e <_free_r+0x26>
 8004390:	6825      	ldr	r5, [r4, #0]
 8004392:	1961      	adds	r1, r4, r5
 8004394:	428b      	cmp	r3, r1
 8004396:	bf04      	itt	eq
 8004398:	6819      	ldreq	r1, [r3, #0]
 800439a:	685b      	ldreq	r3, [r3, #4]
 800439c:	6063      	str	r3, [r4, #4]
 800439e:	bf04      	itt	eq
 80043a0:	1949      	addeq	r1, r1, r5
 80043a2:	6021      	streq	r1, [r4, #0]
 80043a4:	6054      	str	r4, [r2, #4]
 80043a6:	e7ca      	b.n	800433e <_free_r+0x26>
 80043a8:	b003      	add	sp, #12
 80043aa:	bd30      	pop	{r4, r5, pc}
 80043ac:	20000428 	.word	0x20000428

080043b0 <sbrk_aligned>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	4e0e      	ldr	r6, [pc, #56]	; (80043ec <sbrk_aligned+0x3c>)
 80043b4:	460c      	mov	r4, r1
 80043b6:	6831      	ldr	r1, [r6, #0]
 80043b8:	4605      	mov	r5, r0
 80043ba:	b911      	cbnz	r1, 80043c2 <sbrk_aligned+0x12>
 80043bc:	f000 f88c 	bl	80044d8 <_sbrk_r>
 80043c0:	6030      	str	r0, [r6, #0]
 80043c2:	4621      	mov	r1, r4
 80043c4:	4628      	mov	r0, r5
 80043c6:	f000 f887 	bl	80044d8 <_sbrk_r>
 80043ca:	1c43      	adds	r3, r0, #1
 80043cc:	d00a      	beq.n	80043e4 <sbrk_aligned+0x34>
 80043ce:	1cc4      	adds	r4, r0, #3
 80043d0:	f024 0403 	bic.w	r4, r4, #3
 80043d4:	42a0      	cmp	r0, r4
 80043d6:	d007      	beq.n	80043e8 <sbrk_aligned+0x38>
 80043d8:	1a21      	subs	r1, r4, r0
 80043da:	4628      	mov	r0, r5
 80043dc:	f000 f87c 	bl	80044d8 <_sbrk_r>
 80043e0:	3001      	adds	r0, #1
 80043e2:	d101      	bne.n	80043e8 <sbrk_aligned+0x38>
 80043e4:	f04f 34ff 	mov.w	r4, #4294967295
 80043e8:	4620      	mov	r0, r4
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	2000042c 	.word	0x2000042c

080043f0 <_malloc_r>:
 80043f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f4:	1ccd      	adds	r5, r1, #3
 80043f6:	f025 0503 	bic.w	r5, r5, #3
 80043fa:	3508      	adds	r5, #8
 80043fc:	2d0c      	cmp	r5, #12
 80043fe:	bf38      	it	cc
 8004400:	250c      	movcc	r5, #12
 8004402:	2d00      	cmp	r5, #0
 8004404:	4607      	mov	r7, r0
 8004406:	db01      	blt.n	800440c <_malloc_r+0x1c>
 8004408:	42a9      	cmp	r1, r5
 800440a:	d905      	bls.n	8004418 <_malloc_r+0x28>
 800440c:	230c      	movs	r3, #12
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	2600      	movs	r6, #0
 8004412:	4630      	mov	r0, r6
 8004414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004418:	4e2e      	ldr	r6, [pc, #184]	; (80044d4 <_malloc_r+0xe4>)
 800441a:	f000 f907 	bl	800462c <__malloc_lock>
 800441e:	6833      	ldr	r3, [r6, #0]
 8004420:	461c      	mov	r4, r3
 8004422:	bb34      	cbnz	r4, 8004472 <_malloc_r+0x82>
 8004424:	4629      	mov	r1, r5
 8004426:	4638      	mov	r0, r7
 8004428:	f7ff ffc2 	bl	80043b0 <sbrk_aligned>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	4604      	mov	r4, r0
 8004430:	d14d      	bne.n	80044ce <_malloc_r+0xde>
 8004432:	6834      	ldr	r4, [r6, #0]
 8004434:	4626      	mov	r6, r4
 8004436:	2e00      	cmp	r6, #0
 8004438:	d140      	bne.n	80044bc <_malloc_r+0xcc>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	4631      	mov	r1, r6
 800443e:	4638      	mov	r0, r7
 8004440:	eb04 0803 	add.w	r8, r4, r3
 8004444:	f000 f848 	bl	80044d8 <_sbrk_r>
 8004448:	4580      	cmp	r8, r0
 800444a:	d13a      	bne.n	80044c2 <_malloc_r+0xd2>
 800444c:	6821      	ldr	r1, [r4, #0]
 800444e:	3503      	adds	r5, #3
 8004450:	1a6d      	subs	r5, r5, r1
 8004452:	f025 0503 	bic.w	r5, r5, #3
 8004456:	3508      	adds	r5, #8
 8004458:	2d0c      	cmp	r5, #12
 800445a:	bf38      	it	cc
 800445c:	250c      	movcc	r5, #12
 800445e:	4629      	mov	r1, r5
 8004460:	4638      	mov	r0, r7
 8004462:	f7ff ffa5 	bl	80043b0 <sbrk_aligned>
 8004466:	3001      	adds	r0, #1
 8004468:	d02b      	beq.n	80044c2 <_malloc_r+0xd2>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	442b      	add	r3, r5
 800446e:	6023      	str	r3, [r4, #0]
 8004470:	e00e      	b.n	8004490 <_malloc_r+0xa0>
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	1b52      	subs	r2, r2, r5
 8004476:	d41e      	bmi.n	80044b6 <_malloc_r+0xc6>
 8004478:	2a0b      	cmp	r2, #11
 800447a:	d916      	bls.n	80044aa <_malloc_r+0xba>
 800447c:	1961      	adds	r1, r4, r5
 800447e:	42a3      	cmp	r3, r4
 8004480:	6025      	str	r5, [r4, #0]
 8004482:	bf18      	it	ne
 8004484:	6059      	strne	r1, [r3, #4]
 8004486:	6863      	ldr	r3, [r4, #4]
 8004488:	bf08      	it	eq
 800448a:	6031      	streq	r1, [r6, #0]
 800448c:	5162      	str	r2, [r4, r5]
 800448e:	604b      	str	r3, [r1, #4]
 8004490:	4638      	mov	r0, r7
 8004492:	f104 060b 	add.w	r6, r4, #11
 8004496:	f000 f8cf 	bl	8004638 <__malloc_unlock>
 800449a:	f026 0607 	bic.w	r6, r6, #7
 800449e:	1d23      	adds	r3, r4, #4
 80044a0:	1af2      	subs	r2, r6, r3
 80044a2:	d0b6      	beq.n	8004412 <_malloc_r+0x22>
 80044a4:	1b9b      	subs	r3, r3, r6
 80044a6:	50a3      	str	r3, [r4, r2]
 80044a8:	e7b3      	b.n	8004412 <_malloc_r+0x22>
 80044aa:	6862      	ldr	r2, [r4, #4]
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	bf0c      	ite	eq
 80044b0:	6032      	streq	r2, [r6, #0]
 80044b2:	605a      	strne	r2, [r3, #4]
 80044b4:	e7ec      	b.n	8004490 <_malloc_r+0xa0>
 80044b6:	4623      	mov	r3, r4
 80044b8:	6864      	ldr	r4, [r4, #4]
 80044ba:	e7b2      	b.n	8004422 <_malloc_r+0x32>
 80044bc:	4634      	mov	r4, r6
 80044be:	6876      	ldr	r6, [r6, #4]
 80044c0:	e7b9      	b.n	8004436 <_malloc_r+0x46>
 80044c2:	230c      	movs	r3, #12
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	4638      	mov	r0, r7
 80044c8:	f000 f8b6 	bl	8004638 <__malloc_unlock>
 80044cc:	e7a1      	b.n	8004412 <_malloc_r+0x22>
 80044ce:	6025      	str	r5, [r4, #0]
 80044d0:	e7de      	b.n	8004490 <_malloc_r+0xa0>
 80044d2:	bf00      	nop
 80044d4:	20000428 	.word	0x20000428

080044d8 <_sbrk_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4d06      	ldr	r5, [pc, #24]	; (80044f4 <_sbrk_r+0x1c>)
 80044dc:	2300      	movs	r3, #0
 80044de:	4604      	mov	r4, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	f7fc fb2a 	bl	8000b3c <_sbrk>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_sbrk_r+0x1a>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_sbrk_r+0x1a>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	20000430 	.word	0x20000430

080044f8 <__sread>:
 80044f8:	b510      	push	{r4, lr}
 80044fa:	460c      	mov	r4, r1
 80044fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004500:	f000 f8a0 	bl	8004644 <_read_r>
 8004504:	2800      	cmp	r0, #0
 8004506:	bfab      	itete	ge
 8004508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800450a:	89a3      	ldrhlt	r3, [r4, #12]
 800450c:	181b      	addge	r3, r3, r0
 800450e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004512:	bfac      	ite	ge
 8004514:	6563      	strge	r3, [r4, #84]	; 0x54
 8004516:	81a3      	strhlt	r3, [r4, #12]
 8004518:	bd10      	pop	{r4, pc}

0800451a <__swrite>:
 800451a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800451e:	461f      	mov	r7, r3
 8004520:	898b      	ldrh	r3, [r1, #12]
 8004522:	05db      	lsls	r3, r3, #23
 8004524:	4605      	mov	r5, r0
 8004526:	460c      	mov	r4, r1
 8004528:	4616      	mov	r6, r2
 800452a:	d505      	bpl.n	8004538 <__swrite+0x1e>
 800452c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004530:	2302      	movs	r3, #2
 8004532:	2200      	movs	r2, #0
 8004534:	f000 f868 	bl	8004608 <_lseek_r>
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800453e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004542:	81a3      	strh	r3, [r4, #12]
 8004544:	4632      	mov	r2, r6
 8004546:	463b      	mov	r3, r7
 8004548:	4628      	mov	r0, r5
 800454a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800454e:	f000 b817 	b.w	8004580 <_write_r>

08004552 <__sseek>:
 8004552:	b510      	push	{r4, lr}
 8004554:	460c      	mov	r4, r1
 8004556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800455a:	f000 f855 	bl	8004608 <_lseek_r>
 800455e:	1c43      	adds	r3, r0, #1
 8004560:	89a3      	ldrh	r3, [r4, #12]
 8004562:	bf15      	itete	ne
 8004564:	6560      	strne	r0, [r4, #84]	; 0x54
 8004566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800456a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800456e:	81a3      	strheq	r3, [r4, #12]
 8004570:	bf18      	it	ne
 8004572:	81a3      	strhne	r3, [r4, #12]
 8004574:	bd10      	pop	{r4, pc}

08004576 <__sclose>:
 8004576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457a:	f000 b813 	b.w	80045a4 <_close_r>
	...

08004580 <_write_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d07      	ldr	r5, [pc, #28]	; (80045a0 <_write_r+0x20>)
 8004584:	4604      	mov	r4, r0
 8004586:	4608      	mov	r0, r1
 8004588:	4611      	mov	r1, r2
 800458a:	2200      	movs	r2, #0
 800458c:	602a      	str	r2, [r5, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f7fb ffcc 	bl	800052c <_write>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_write_r+0x1e>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_write_r+0x1e>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	20000430 	.word	0x20000430

080045a4 <_close_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4d06      	ldr	r5, [pc, #24]	; (80045c0 <_close_r+0x1c>)
 80045a8:	2300      	movs	r3, #0
 80045aa:	4604      	mov	r4, r0
 80045ac:	4608      	mov	r0, r1
 80045ae:	602b      	str	r3, [r5, #0]
 80045b0:	f7fc fa8f 	bl	8000ad2 <_close>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_close_r+0x1a>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_close_r+0x1a>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	20000430 	.word	0x20000430

080045c4 <_fstat_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4d07      	ldr	r5, [pc, #28]	; (80045e4 <_fstat_r+0x20>)
 80045c8:	2300      	movs	r3, #0
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	4611      	mov	r1, r2
 80045d0:	602b      	str	r3, [r5, #0]
 80045d2:	f7fc fa8a 	bl	8000aea <_fstat>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	d102      	bne.n	80045e0 <_fstat_r+0x1c>
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	b103      	cbz	r3, 80045e0 <_fstat_r+0x1c>
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	bd38      	pop	{r3, r4, r5, pc}
 80045e2:	bf00      	nop
 80045e4:	20000430 	.word	0x20000430

080045e8 <_isatty_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4d06      	ldr	r5, [pc, #24]	; (8004604 <_isatty_r+0x1c>)
 80045ec:	2300      	movs	r3, #0
 80045ee:	4604      	mov	r4, r0
 80045f0:	4608      	mov	r0, r1
 80045f2:	602b      	str	r3, [r5, #0]
 80045f4:	f7fc fa89 	bl	8000b0a <_isatty>
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d102      	bne.n	8004602 <_isatty_r+0x1a>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	b103      	cbz	r3, 8004602 <_isatty_r+0x1a>
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	bd38      	pop	{r3, r4, r5, pc}
 8004604:	20000430 	.word	0x20000430

08004608 <_lseek_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4d07      	ldr	r5, [pc, #28]	; (8004628 <_lseek_r+0x20>)
 800460c:	4604      	mov	r4, r0
 800460e:	4608      	mov	r0, r1
 8004610:	4611      	mov	r1, r2
 8004612:	2200      	movs	r2, #0
 8004614:	602a      	str	r2, [r5, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	f7fc fa82 	bl	8000b20 <_lseek>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_lseek_r+0x1e>
 8004620:	682b      	ldr	r3, [r5, #0]
 8004622:	b103      	cbz	r3, 8004626 <_lseek_r+0x1e>
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	20000430 	.word	0x20000430

0800462c <__malloc_lock>:
 800462c:	4801      	ldr	r0, [pc, #4]	; (8004634 <__malloc_lock+0x8>)
 800462e:	f7ff be0b 	b.w	8004248 <__retarget_lock_acquire_recursive>
 8004632:	bf00      	nop
 8004634:	20000424 	.word	0x20000424

08004638 <__malloc_unlock>:
 8004638:	4801      	ldr	r0, [pc, #4]	; (8004640 <__malloc_unlock+0x8>)
 800463a:	f7ff be06 	b.w	800424a <__retarget_lock_release_recursive>
 800463e:	bf00      	nop
 8004640:	20000424 	.word	0x20000424

08004644 <_read_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4d07      	ldr	r5, [pc, #28]	; (8004664 <_read_r+0x20>)
 8004648:	4604      	mov	r4, r0
 800464a:	4608      	mov	r0, r1
 800464c:	4611      	mov	r1, r2
 800464e:	2200      	movs	r2, #0
 8004650:	602a      	str	r2, [r5, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	f7fc fa20 	bl	8000a98 <_read>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_read_r+0x1e>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_read_r+0x1e>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	20000430 	.word	0x20000430

08004668 <_init>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	bf00      	nop
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr

08004674 <_fini>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	bf00      	nop
 8004678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467a:	bc08      	pop	{r3}
 800467c:	469e      	mov	lr, r3
 800467e:	4770      	bx	lr
