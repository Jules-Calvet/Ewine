
FLASH_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080054f4  080054f4  000154f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080054fc  080054fc  000154fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000ec  20000008  08005504  00020008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          000003f8  200000f4  080055f0  000200f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200004ec  080055f0  000204ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015f37  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003008  00000000  00000000  0003605b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001658  00000000  00000000  00039068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001540  00000000  00000000  0003a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00023413  00000000  00000000  0003bc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013b61  00000000  00000000  0005f013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000dd419  00000000  00000000  00072b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0014ff8d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006558  00000000  00000000  0014ffe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000f4 	.word	0x200000f4
 800015c:	00000000 	.word	0x00000000
 8000160:	08005318 	.word	0x08005318

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f8 	.word	0x200000f8
 800017c:	08005318 	.word	0x08005318

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800052c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000530:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	2b00      	cmp	r3, #0
 800053a:	d013      	beq.n	8000564 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800053c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000540:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000544:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000548:	2b00      	cmp	r3, #0
 800054a:	d00b      	beq.n	8000564 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800054c:	e000      	b.n	8000550 <ITM_SendChar+0x2c>
    {
      __NOP();
 800054e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000550:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0f9      	beq.n	800054e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800055a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	b2d2      	uxtb	r2, r2
 8000562:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000564:	687b      	ldr	r3, [r7, #4]
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800057a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800057e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000582:	f023 0218 	bic.w	r2, r3, #24
 8000586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4313      	orrs	r3, r2
 800058e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800059e:	b480      	push	{r7}
 80005a0:	b085      	sub	sp, #20
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	e009      	b.n	80005f6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	60ba      	str	r2, [r7, #8]
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff ff9a 	bl	8000524 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	3301      	adds	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	dbf1      	blt.n	80005e2 <_write+0x12>
	}
	return len;
 80005fe:	687b      	ldr	r3, [r7, #4]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 800060c:	b08f      	sub	sp, #60	; 0x3c
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t DATA_32 = "bonjour";
 8000610:	498f      	ldr	r1, [pc, #572]	; (8000850 <main+0x248>)
 8000612:	62f9      	str	r1, [r7, #44]	; 0x2c
	uint64_t DATA_64 = "bonjour";
 8000614:	498e      	ldr	r1, [pc, #568]	; (8000850 <main+0x248>)
 8000616:	17c8      	asrs	r0, r1, #31
 8000618:	460a      	mov	r2, r1
 800061a:	4603      	mov	r3, r0
 800061c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fcc4 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f930 	bl	8000888 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000628:	f000 f9a4 	bl	8000974 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fa36 	bl	8000a9c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000630:	f000 f9be 	bl	80009b0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000634:	f000 fa0a 	bl	8000a4c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize LED2, LED1 and LED3 */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4885      	ldr	r0, [pc, #532]	; (8000854 <main+0x24c>)
 800063e:	f001 f98d 	bl	800195c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2101      	movs	r1, #1
 8000646:	4883      	ldr	r0, [pc, #524]	; (8000854 <main+0x24c>)
 8000648:	f001 f988 	bl	800195c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2120      	movs	r1, #32
 8000650:	4880      	ldr	r0, [pc, #512]	; (8000854 <main+0x24c>)
 8000652:	f001 f983 	bl	800195c <HAL_GPIO_WritePin>

    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 8000656:	f000 fe7b 	bl	8001350 <HAL_FLASH_Unlock>

   /* Clear OPTVERR bit set on virgin samples */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800065a:	4b7f      	ldr	r3, [pc, #508]	; (8000858 <main+0x250>)
 800065c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000660:	611a      	str	r2, [r3, #16]

    /* Erase the user Flash area
      (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

    /* Get the 1st page to erase */
    FirstPage = GetPage(FLASH_USER_START_ADDR);
 8000662:	487e      	ldr	r0, [pc, #504]	; (800085c <main+0x254>)
 8000664:	f000 fa62 	bl	8000b2c <GetPage>
 8000668:	4603      	mov	r3, r0
 800066a:	4a7d      	ldr	r2, [pc, #500]	; (8000860 <main+0x258>)
 800066c:	6013      	str	r3, [r2, #0]

    /* Get the number of pages to erase from 1st page */
    NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 800066e:	487d      	ldr	r0, [pc, #500]	; (8000864 <main+0x25c>)
 8000670:	f000 fa5c 	bl	8000b2c <GetPage>
 8000674:	4602      	mov	r2, r0
 8000676:	4b7a      	ldr	r3, [pc, #488]	; (8000860 <main+0x258>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	3301      	adds	r3, #1
 800067e:	4a7a      	ldr	r2, [pc, #488]	; (8000868 <main+0x260>)
 8000680:	6013      	str	r3, [r2, #0]

    /* Fill EraseInit structure*/
    EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000682:	4b7a      	ldr	r3, [pc, #488]	; (800086c <main+0x264>)
 8000684:	2202      	movs	r2, #2
 8000686:	601a      	str	r2, [r3, #0]
    EraseInitStruct.Page        = FirstPage;
 8000688:	4b75      	ldr	r3, [pc, #468]	; (8000860 <main+0x258>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a77      	ldr	r2, [pc, #476]	; (800086c <main+0x264>)
 800068e:	6053      	str	r3, [r2, #4]
    EraseInitStruct.NbPages     = NbOfPages;
 8000690:	4b75      	ldr	r3, [pc, #468]	; (8000868 <main+0x260>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a75      	ldr	r2, [pc, #468]	; (800086c <main+0x264>)
 8000696:	6093      	str	r3, [r2, #8]

    /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
       you have to make sure that these data are rewritten before they are accessed during code
       execution. If this cannot be done safely, it is recommended to flush the caches by setting the
       DCRST and ICRST bits in the FLASH_CR register. */
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8000698:	4975      	ldr	r1, [pc, #468]	; (8000870 <main+0x268>)
 800069a:	4874      	ldr	r0, [pc, #464]	; (800086c <main+0x264>)
 800069c:	f000 ff2a 	bl	80014f4 <HAL_FLASHEx_Erase>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d004      	beq.n	80006b0 <main+0xa8>
      */
      /* Infinite loop */
      while (1)
      {
        /* Turn on LED3 */
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80006a6:	2102      	movs	r1, #2
 80006a8:	486a      	ldr	r0, [pc, #424]	; (8000854 <main+0x24c>)
 80006aa:	f001 f96f 	bl	800198c <HAL_GPIO_TogglePin>
 80006ae:	e7fa      	b.n	80006a6 <main+0x9e>
    }

    /* Program the user Flash area word by word
      (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

    Address = FLASH_USER_START_ADDR;
 80006b0:	4b70      	ldr	r3, [pc, #448]	; (8000874 <main+0x26c>)
 80006b2:	4a6a      	ldr	r2, [pc, #424]	; (800085c <main+0x254>)
 80006b4:	601a      	str	r2, [r3, #0]


    while (Address < FLASH_USER_END_ADDR)
 80006b6:	e014      	b.n	80006e2 <main+0xda>
    {
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_64) == HAL_OK)
 80006b8:	4b6e      	ldr	r3, [pc, #440]	; (8000874 <main+0x26c>)
 80006ba:	6819      	ldr	r1, [r3, #0]
 80006bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80006c0:	2001      	movs	r0, #1
 80006c2:	f000 fe01 	bl	80012c8 <HAL_FLASH_Program>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d105      	bne.n	80006d8 <main+0xd0>
      {
        Address = Address + 8;  /* increment to next double word*/
 80006cc:	4b69      	ldr	r3, [pc, #420]	; (8000874 <main+0x26c>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3308      	adds	r3, #8
 80006d2:	4a68      	ldr	r2, [pc, #416]	; (8000874 <main+0x26c>)
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	e004      	b.n	80006e2 <main+0xda>
        /* Error occurred while writing data in Flash memory.
           User can add here some code to deal with this error */
        while (1)
        {
          /* Turn on LED3 */
      	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80006d8:	2102      	movs	r1, #2
 80006da:	485e      	ldr	r0, [pc, #376]	; (8000854 <main+0x24c>)
 80006dc:	f001 f956 	bl	800198c <HAL_GPIO_TogglePin>
 80006e0:	e7fa      	b.n	80006d8 <main+0xd0>
    while (Address < FLASH_USER_END_ADDR)
 80006e2:	4b64      	ldr	r3, [pc, #400]	; (8000874 <main+0x26c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a5f      	ldr	r2, [pc, #380]	; (8000864 <main+0x25c>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d3e5      	bcc.n	80006b8 <main+0xb0>
      }
    }

    /* Lock the Flash to disable the flash control register access (recommended
       to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 80006ec:	f000 fe52 	bl	8001394 <HAL_FLASH_Lock>
  {
    /* USER CODE END WHILE */
	  /* Check if the programmed data is OK
	         MemoryProgramStatus = 0: data programmed correctly
	         MemoryProgramStatus != 0: number of words not programmed correctly ******/
	     Address = FLASH_USER_START_ADDR;
 80006f0:	4b60      	ldr	r3, [pc, #384]	; (8000874 <main+0x26c>)
 80006f2:	4a5a      	ldr	r2, [pc, #360]	; (800085c <main+0x254>)
 80006f4:	601a      	str	r2, [r3, #0]
	     MemoryProgramStatus = 0x0;
 80006f6:	4b60      	ldr	r3, [pc, #384]	; (8000878 <main+0x270>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]

	     uint32_t *flash_address = (uint32_t *)FLASH_USER_START_ADDR;
 80006fc:	4b57      	ldr	r3, [pc, #348]	; (800085c <main+0x254>)
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
	     uint32_t flash_data = *flash_address;
 8000700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
	     printf("%s\n", (char*)flash_data);
 8000706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000708:	4618      	mov	r0, r3
 800070a:	f003 fe87 	bl	800441c <puts>

	     while (Address < FLASH_USER_END_ADDR)
 800070e:	e014      	b.n	800073a <main+0x132>
	     {
	       data32 = *(__IO uint32_t *)Address;
 8000710:	4b58      	ldr	r3, [pc, #352]	; (8000874 <main+0x26c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a59      	ldr	r2, [pc, #356]	; (800087c <main+0x274>)
 8000718:	6013      	str	r3, [r2, #0]

	       if ((char*)data32 != DATA_64)
 800071a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800071c:	461a      	mov	r2, r3
 800071e:	4b57      	ldr	r3, [pc, #348]	; (800087c <main+0x274>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	429a      	cmp	r2, r3
 8000724:	d004      	beq.n	8000730 <main+0x128>
	       {
	         MemoryProgramStatus++;
 8000726:	4b54      	ldr	r3, [pc, #336]	; (8000878 <main+0x270>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	4a52      	ldr	r2, [pc, #328]	; (8000878 <main+0x270>)
 800072e:	6013      	str	r3, [r2, #0]
	       }
	       Address = Address + 8;
 8000730:	4b50      	ldr	r3, [pc, #320]	; (8000874 <main+0x26c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3308      	adds	r3, #8
 8000736:	4a4f      	ldr	r2, [pc, #316]	; (8000874 <main+0x26c>)
 8000738:	6013      	str	r3, [r2, #0]
	     while (Address < FLASH_USER_END_ADDR)
 800073a:	4b4e      	ldr	r3, [pc, #312]	; (8000874 <main+0x26c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a49      	ldr	r2, [pc, #292]	; (8000864 <main+0x25c>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d3e5      	bcc.n	8000710 <main+0x108>
	     }

	     /*Check if there is an issue to program data*/
	     if (MemoryProgramStatus == 0)
 8000744:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <main+0x270>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d104      	bne.n	8000756 <main+0x14e>
	     {
	       /* No error detected. Switch on LED2*/
	   	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800074c:	2101      	movs	r1, #1
 800074e:	4841      	ldr	r0, [pc, #260]	; (8000854 <main+0x24c>)
 8000750:	f001 f91c 	bl	800198c <HAL_GPIO_TogglePin>
 8000754:	e003      	b.n	800075e <main+0x156>
	     }
	     else
	     {
	       /* Error detected. Switch on LED1*/
	   	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000756:	2120      	movs	r1, #32
 8000758:	483e      	ldr	r0, [pc, #248]	; (8000854 <main+0x24c>)
 800075a:	f001 f917 	bl	800198c <HAL_GPIO_TogglePin>
	     }
	     HAL_Delay(5000);
 800075e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000762:	f000 fca9 	bl	80010b8 <HAL_Delay>
	     /*Check if there is an issue to program data*/
		 if (MemoryProgramStatus == 0)
 8000766:	4b44      	ldr	r3, [pc, #272]	; (8000878 <main+0x270>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d104      	bne.n	8000778 <main+0x170>
		 {
		   /* No error detected. Switch on LED2*/
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800076e:	2101      	movs	r1, #1
 8000770:	4838      	ldr	r0, [pc, #224]	; (8000854 <main+0x24c>)
 8000772:	f001 f90b 	bl	800198c <HAL_GPIO_TogglePin>
 8000776:	e003      	b.n	8000780 <main+0x178>
		 }
		 else
		 {
		   /* Error detected. Switch on LED1*/
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000778:	2120      	movs	r1, #32
 800077a:	4836      	ldr	r0, [pc, #216]	; (8000854 <main+0x24c>)
 800077c:	f001 f906 	bl	800198c <HAL_GPIO_TogglePin>
		 }

		 char ssid[30] = "Reseau du KGB";
 8000780:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <main+0x278>)
 8000782:	1d3c      	adds	r4, r7, #4
 8000784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000786:	c407      	stmia	r4!, {r0, r1, r2}
 8000788:	8023      	strh	r3, [r4, #0]
 800078a:	f107 0312 	add.w	r3, r7, #18
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
		 DATA_32 = (uint32_t)ssid;
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
		 DATA_64 = (uint64_t)ssid;
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	17da      	asrs	r2, r3, #31
 80007a0:	4698      	mov	r8, r3
 80007a2:	4691      	mov	r9, r2
 80007a4:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
		 printf("\n%s\n", (char*)DATA_64);
 80007a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007aa:	4619      	mov	r1, r3
 80007ac:	4835      	ldr	r0, [pc, #212]	; (8000884 <main+0x27c>)
 80007ae:	f003 fdaf 	bl	8004310 <iprintf>

		 HAL_FLASH_Unlock();
 80007b2:	f000 fdcd 	bl	8001350 <HAL_FLASH_Unlock>
		 /* Clear OPTVERR bit set on virgin samples */
		     __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <main+0x250>)
 80007b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007bc:	611a      	str	r2, [r3, #16]

		     /* Erase the user Flash area
		       (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

		     /* Get the 1st page to erase */
		     FirstPage = GetPage(FLASH_USER_START_ADDR);
 80007be:	4827      	ldr	r0, [pc, #156]	; (800085c <main+0x254>)
 80007c0:	f000 f9b4 	bl	8000b2c <GetPage>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a26      	ldr	r2, [pc, #152]	; (8000860 <main+0x258>)
 80007c8:	6013      	str	r3, [r2, #0]

		     /* Get the number of pages to erase from 1st page */
		     NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 80007ca:	4826      	ldr	r0, [pc, #152]	; (8000864 <main+0x25c>)
 80007cc:	f000 f9ae 	bl	8000b2c <GetPage>
 80007d0:	4602      	mov	r2, r0
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <main+0x258>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	4a23      	ldr	r2, [pc, #140]	; (8000868 <main+0x260>)
 80007dc:	6013      	str	r3, [r2, #0]

		     /* Fill EraseInit structure*/
		     EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <main+0x264>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	601a      	str	r2, [r3, #0]
		     EraseInitStruct.Page        = FirstPage;
 80007e4:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <main+0x258>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <main+0x264>)
 80007ea:	6053      	str	r3, [r2, #4]
		     EraseInitStruct.NbPages     = NbOfPages;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <main+0x260>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a1e      	ldr	r2, [pc, #120]	; (800086c <main+0x264>)
 80007f2:	6093      	str	r3, [r2, #8]

		     /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
		        you have to make sure that these data are rewritten before they are accessed during code
		        execution. If this cannot be done safely, it is recommended to flush the caches by setting the
		        DCRST and ICRST bits in the FLASH_CR register. */
		     if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 80007f4:	491e      	ldr	r1, [pc, #120]	; (8000870 <main+0x268>)
 80007f6:	481d      	ldr	r0, [pc, #116]	; (800086c <main+0x264>)
 80007f8:	f000 fe7c 	bl	80014f4 <HAL_FLASHEx_Erase>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d004      	beq.n	800080c <main+0x204>
		       */
		       /* Infinite loop */
		       while (1)
		       {
		         /* Turn on LED3 */
		         HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000802:	2102      	movs	r1, #2
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <main+0x24c>)
 8000806:	f001 f8c1 	bl	800198c <HAL_GPIO_TogglePin>
 800080a:	e7fa      	b.n	8000802 <main+0x1fa>
		       }
		     }
		 Address = FLASH_USER_START_ADDR;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <main+0x26c>)
 800080e:	4a13      	ldr	r2, [pc, #76]	; (800085c <main+0x254>)
 8000810:	601a      	str	r2, [r3, #0]

		 while (Address < FLASH_USER_END_ADDR)
 8000812:	e014      	b.n	800083e <main+0x236>
		     {
		       if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_64) == HAL_OK)
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <main+0x26c>)
 8000816:	6819      	ldr	r1, [r3, #0]
 8000818:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800081c:	2001      	movs	r0, #1
 800081e:	f000 fd53 	bl	80012c8 <HAL_FLASH_Program>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d105      	bne.n	8000834 <main+0x22c>
		       {
		         Address = Address + 8;  /* increment to next double word*/
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <main+0x26c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3308      	adds	r3, #8
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <main+0x26c>)
 8000830:	6013      	str	r3, [r2, #0]
 8000832:	e004      	b.n	800083e <main+0x236>
		         /* Error occurred while writing data in Flash memory.
		            User can add here some code to deal with this error */
		         while (1)
		         {
		           /* Turn on LED3 */
		       	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000834:	2102      	movs	r1, #2
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <main+0x24c>)
 8000838:	f001 f8a8 	bl	800198c <HAL_GPIO_TogglePin>
 800083c:	e7fa      	b.n	8000834 <main+0x22c>
		 while (Address < FLASH_USER_END_ADDR)
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <main+0x26c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <main+0x25c>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d3e5      	bcc.n	8000814 <main+0x20c>
		         }
		       }
		     }
		 HAL_FLASH_Lock();
 8000848:	f000 fda4 	bl	8001394 <HAL_FLASH_Lock>
  {
 800084c:	e750      	b.n	80006f0 <main+0xe8>
 800084e:	bf00      	nop
 8000850:	08005338 	.word	0x08005338
 8000854:	48000400 	.word	0x48000400
 8000858:	58004000 	.word	0x58004000
 800085c:	08010000 	.word	0x08010000
 8000860:	20000498 	.word	0x20000498
 8000864:	0807ffff 	.word	0x0807ffff
 8000868:	2000049c 	.word	0x2000049c
 800086c:	200004b0 	.word	0x200004b0
 8000870:	200004a4 	.word	0x200004a4
 8000874:	200004a0 	.word	0x200004a0
 8000878:	200004a8 	.word	0x200004a8
 800087c:	200004ac 	.word	0x200004ac
 8000880:	08005348 	.word	0x08005348
 8000884:	08005340 	.word	0x08005340

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b09a      	sub	sp, #104	; 0x68
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2248      	movs	r2, #72	; 0x48
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f003 fd32 	bl	8004300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]
 80008aa:	615a      	str	r2, [r3, #20]
 80008ac:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80008ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008bc:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80008be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	f023 0303 	bic.w	r3, r3, #3
 80008c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d2:	f001 f979 	bl	8001bc8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008d6:	2000      	movs	r0, #0
 80008d8:	f7ff fe4b 	bl	8000572 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <SystemClock_Config+0xe8>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008e4:	4a22      	ldr	r2, [pc, #136]	; (8000970 <SystemClock_Config+0xe8>)
 80008e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <SystemClock_Config+0xe8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80008f8:	2327      	movs	r3, #39	; 0x27
 80008fa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000902:	2301      	movs	r3, #1
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800090c:	2301      	movs	r3, #1
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000910:	2340      	movs	r3, #64	; 0x40
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000914:	2300      	movs	r3, #0
 8000916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000918:	2360      	movs	r3, #96	; 0x60
 800091a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	4618      	mov	r0, r3
 8000926:	f001 fce3 	bl	80022f0 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000930:	f000 f90a 	bl	8000b48 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000934:	236f      	movs	r3, #111	; 0x6f
 8000936:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000938:	2302      	movs	r3, #2
 800093a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2101      	movs	r1, #1
 8000954:	4618      	mov	r0, r3
 8000956:	f002 f83f 	bl	80029d8 <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000960:	f000 f8f2 	bl	8000b48 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000964:	f002 fdfa 	bl	800355c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000968:	bf00      	nop
 800096a:	3768      	adds	r7, #104	; 0x68
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	58000400 	.word	0x58000400

08000974 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2250      	movs	r2, #80	; 0x50
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f003 fcbd 	bl	8004300 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800098c:	2300      	movs	r3, #0
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000990:	2300      	movs	r3, #0
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4618      	mov	r0, r3
 8000998:	f002 fc6a 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80009a2:	f000 f8d1 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80009a6:	bf00      	nop
 80009a8:	3750      	adds	r7, #80	; 0x50
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <MX_USART1_UART_Init+0x98>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ba:	4b22      	ldr	r3, [pc, #136]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80009c2:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009c8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009d8:	220c      	movs	r2, #12
 80009da:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009fa:	4812      	ldr	r0, [pc, #72]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009fc:	f002 fee5 	bl	80037ca <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000a06:	f000 f89f 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 8000a0e:	f003 fb46 	bl	800409e <HAL_UARTEx_SetTxFifoThreshold>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000a18:	f000 f896 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 8000a20:	f003 fb7b 	bl	800411a <HAL_UARTEx_SetRxFifoThreshold>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000a2a:	f000 f88d 	bl	8000b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 8000a30:	f003 fafc 	bl	800402c <HAL_UARTEx_DisableFifoMode>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000a3a:	f000 f885 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000110 	.word	0x20000110
 8000a48:	40013800 	.word	0x40013800

08000a4c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000a50:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_USB_PCD_Init+0x48>)
 8000a52:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <MX_USB_PCD_Init+0x4c>)
 8000a54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_USB_PCD_Init+0x48>)
 8000a58:	2208      	movs	r2, #8
 8000a5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_USB_PCD_Init+0x48>)
 8000a5e:	2202      	movs	r2, #2
 8000a60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USB_PCD_Init+0x48>)
 8000a64:	2202      	movs	r2, #2
 8000a66:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_USB_PCD_Init+0x48>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USB_PCD_Init+0x48>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_USB_PCD_Init+0x48>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USB_PCD_Init+0x48>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_USB_PCD_Init+0x48>)
 8000a82:	f000 ff9d 	bl	80019c0 <HAL_PCD_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000a8c:	f000 f85c 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200001a4 	.word	0x200001a4
 8000a98:	40006800 	.word	0x40006800

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	2004      	movs	r0, #4
 8000ab2:	f7ff fd74 	bl	800059e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	2002      	movs	r0, #2
 8000ab8:	f7ff fd71 	bl	800059e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff fd6e 	bl	800059e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	2008      	movs	r0, #8
 8000ac4:	f7ff fd6b 	bl	800059e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2123      	movs	r1, #35	; 0x23
 8000acc:	4814      	ldr	r0, [pc, #80]	; (8000b20 <MX_GPIO_Init+0x84>)
 8000ace:	f000 ff45 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4810      	ldr	r0, [pc, #64]	; (8000b24 <MX_GPIO_Init+0x88>)
 8000ae4:	f000 fdca 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000ae8:	2323      	movs	r3, #35	; 0x23
 8000aea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <MX_GPIO_Init+0x84>)
 8000afe:	f000 fdbd 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000b02:	2303      	movs	r3, #3
 8000b04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_GPIO_Init+0x8c>)
 8000b14:	f000 fdb2 	bl	800167c <HAL_GPIO_Init>

}
 8000b18:	bf00      	nop
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48000800 	.word	0x48000800
 8000b28:	48000c00 	.word	0x48000c00

08000b2c <GetPage>:
  * @brief  Gets the page of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static uint32_t GetPage(uint32_t Addr)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000b3a:	0b1b      	lsrs	r3, r3, #12
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>

08000b52 <LL_AHB2_GRP1_EnableClock>:
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4013      	ands	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b09c      	sub	sp, #112	; 0x70
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2250      	movs	r2, #80	; 0x50
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 fb71 	bl	8004300 <memset>
  if(huart->Instance==USART1)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <HAL_UART_MspInit+0x84>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d124      	bne.n	8000c72 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	4618      	mov	r0, r3
 8000c36:	f002 fb1b 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c40:	f7ff ff82 	bl	8000b48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c48:	f7ff ffb5 	bl	8000bb6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f7ff ff80 	bl	8000b52 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000c52:	23c0      	movs	r3, #192	; 0xc0
 8000c54:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c62:	2307      	movs	r3, #7
 8000c64:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c66:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <HAL_UART_MspInit+0x88>)
 8000c6e:	f000 fd05 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3770      	adds	r7, #112	; 0x70
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40013800 	.word	0x40013800
 8000c80:	48000400 	.word	0x48000400

08000c84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09c      	sub	sp, #112	; 0x70
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	2250      	movs	r2, #80	; 0x50
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f003 fb2b 	bl	8004300 <memset>
  if(hpcd->Instance==USB)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <HAL_PCD_MspInit+0xa8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d136      	bne.n	8000d22 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000cba:	2318      	movs	r3, #24
 8000cbc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000cbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000cca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cce:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000cd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cd4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000cd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000cda:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f002 fac5 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000cec:	f7ff ff2c 	bl	8000b48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ff2e 	bl	8000b52 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cf6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000d08:	230a      	movs	r3, #10
 8000d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d10:	4619      	mov	r1, r3
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f000 fcb1 	bl	800167c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d1a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000d1e:	f7ff ff31 	bl	8000b84 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3770      	adds	r7, #112	; 0x70
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40006800 	.word	0x40006800

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f970 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00a      	b.n	8000dac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d96:	f3af 8000 	nop.w
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf0      	blt.n	8000d96 <_read+0x12>
  }

  return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de6:	605a      	str	r2, [r3, #4]
  return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_isatty>:

int _isatty(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f003 fa28 	bl	80042ac <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20030000 	.word	0x20030000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	200004bc 	.word	0x200004bc
 8000e90:	200004f0 	.word	0x200004f0

08000e94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <SystemInit+0x98>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <SystemInit+0x98>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ebc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ec0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <SystemInit+0x9c>)
 8000ece:	4013      	ands	r3, r2
 8000ed0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ede:	f023 0305 	bic.w	r3, r3, #5
 8000ee2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef2:	f023 0301 	bic.w	r3, r3, #1
 8000ef6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efe:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <SystemInit+0xa0>)
 8000f00:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f06:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <SystemInit+0xa0>)
 8000f08:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	faf6fefb 	.word	0xfaf6fefb
 8000f34:	22041000 	.word	0x22041000

08000f38 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f38:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3c:	3304      	adds	r3, #4

08000f3e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f40:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f42:	d3f9      	bcc.n	8000f38 <CopyDataInit>
  bx lr
 8000f44:	4770      	bx	lr

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f46:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f48:	3004      	adds	r0, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f4a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>
  bx lr
 8000f4e:	4770      	bx	lr

08000f50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f52:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f54:	f7ff ff9e 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f58:	480b      	ldr	r0, [pc, #44]	; (8000f88 <LoopForever+0x6>)
 8000f5a:	490c      	ldr	r1, [pc, #48]	; (8000f8c <LoopForever+0xa>)
 8000f5c:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <LoopForever+0xe>)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f7ff ffed 	bl	8000f3e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <LoopForever+0x12>)
 8000f66:	490c      	ldr	r1, [pc, #48]	; (8000f98 <LoopForever+0x16>)
 8000f68:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <LoopForever+0x1a>)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f7ff ffe7 	bl	8000f3e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000f70:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <LoopForever+0x1e>)
 8000f72:	490c      	ldr	r1, [pc, #48]	; (8000fa4 <LoopForever+0x22>)
 8000f74:	2300      	movs	r3, #0
 8000f76:	f7ff ffe8 	bl	8000f4a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f7a:	f003 f99d 	bl	80042b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f7e:	f7ff fb43 	bl	8000608 <main>

08000f82 <LoopForever>:

LoopForever:
  b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   r0, =_estack
 8000f84:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	200000f4 	.word	0x200000f4
 8000f90:	08005504 	.word	0x08005504
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f94:	20030000 	.word	0x20030000
 8000f98:	20030000 	.word	0x20030000
 8000f9c:	080055f0 	.word	0x080055f0
  INIT_BSS _sbss, _ebss
 8000fa0:	200000f4 	.word	0x200000f4
 8000fa4:	200004ec 	.word	0x200004ec

08000fa8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <HAL_Init+0x3c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <HAL_Init+0x3c>)
 8000fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f000 f94e 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 f80f 	bl	8000fec <HAL_InitTick>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	e001      	b.n	8000fde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fda:	f7ff fe05 	bl	8000be8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fde:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	58004000 	.word	0x58004000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_InitTick+0x6c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d024      	beq.n	800104a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001000:	f001 fe96 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8001004:	4602      	mov	r2, r0
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_InitTick+0x6c>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001010:	fbb3 f3f1 	udiv	r3, r3, r1
 8001014:	fbb2 f3f3 	udiv	r3, r2, r3
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f948 	bl	80012ae <HAL_SYSTICK_Config>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d10f      	bne.n	8001044 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b0f      	cmp	r3, #15
 8001028:	d809      	bhi.n	800103e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102a:	2200      	movs	r2, #0
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	f04f 30ff 	mov.w	r0, #4294967295
 8001032:	f000 f922 	bl	800127a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001036:	4a09      	ldr	r2, [pc, #36]	; (800105c <HAL_InitTick+0x70>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e007      	b.n	800104e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e004      	b.n	800104e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e001      	b.n	800104e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000010 	.word	0x20000010
 800105c:	2000000c 	.word	0x2000000c

08001060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20000010 	.word	0x20000010
 8001084:	200004c0 	.word	0x200004c0

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	200004c0 	.word	0x200004c0

080010a0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80010a4:	4b03      	ldr	r3, [pc, #12]	; (80010b4 <HAL_GetTickPrio+0x14>)
 80010a6:	681b      	ldr	r3, [r3, #0]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	2000000c 	.word	0x2000000c

080010b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff ffe2 	bl	8001088 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d0:	d005      	beq.n	80010de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Delay+0x44>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4413      	add	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010de:	bf00      	nop
 80010e0:	f7ff ffd2 	bl	8001088 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d8f7      	bhi.n	80010e0 <HAL_Delay+0x28>
  {
  }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000010 	.word	0x20000010

08001100 <__NVIC_SetPriorityGrouping>:
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_SetPriority>:
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff47 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff5e 	bl	8001148 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff90 	bl	80011b8 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5f 	bl	8001164 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffb2 	bl	8001220 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <HAL_FLASH_Program+0x80>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_FLASH_Program+0x1a>
 80012de:	2302      	movs	r3, #2
 80012e0:	e02d      	b.n	800133e <HAL_FLASH_Program+0x76>
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_FLASH_Program+0x80>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_FLASH_Program+0x80>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012f2:	f000 f869 	bl	80013c8 <FLASH_WaitForLastOperation>
 80012f6:	4603      	mov	r3, r0
 80012f8:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80012fa:	7dfb      	ldrb	r3, [r7, #23]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d11a      	bne.n	8001336 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d105      	bne.n	8001312 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f000 f8cc 	bl	80014a8 <FLASH_Program_DoubleWord>
 8001310:	e004      	b.n	800131c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	68b8      	ldr	r0, [r7, #8]
 8001318:	f004 f80a 	bl	8005330 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800131c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001320:	f000 f852 	bl	80013c8 <FLASH_WaitForLastOperation>
 8001324:	4603      	mov	r3, r0
 8001326:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <HAL_FLASH_Program+0x84>)
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	4906      	ldr	r1, [pc, #24]	; (800134c <HAL_FLASH_Program+0x84>)
 8001332:	4013      	ands	r3, r2
 8001334:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <HAL_FLASH_Program+0x80>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800133c:	7dfb      	ldrb	r3, [r7, #23]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200004c4 	.word	0x200004c4
 800134c:	58004000 	.word	0x58004000

08001350 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_FLASH_Unlock+0x38>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	2b00      	cmp	r3, #0
 8001360:	da0b      	bge.n	800137a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_FLASH_Unlock+0x38>)
 8001364:	4a09      	ldr	r2, [pc, #36]	; (800138c <HAL_FLASH_Unlock+0x3c>)
 8001366:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_FLASH_Unlock+0x38>)
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_FLASH_Unlock+0x40>)
 800136c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_FLASH_Unlock+0x38>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	2b00      	cmp	r3, #0
 8001374:	da01      	bge.n	800137a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800137a:	79fb      	ldrb	r3, [r7, #7]
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	58004000 	.word	0x58004000
 800138c:	45670123 	.word	0x45670123
 8001390:	cdef89ab 	.word	0xcdef89ab

08001394 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_FLASH_Lock+0x30>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_FLASH_Lock+0x30>)
 80013a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013a8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <HAL_FLASH_Lock+0x30>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db01      	blt.n	80013b6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80013b6:	79fb      	ldrb	r3, [r7, #7]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	58004000 	.word	0x58004000

080013c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80013d0:	f7ff fe5a 	bl	8001088 <HAL_GetTick>
 80013d4:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80013d6:	e009      	b.n	80013ec <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80013d8:	f7ff fe56 	bl	8001088 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d801      	bhi.n	80013ec <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e054      	b.n	8001496 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <FLASH_WaitForLastOperation+0xd8>)
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d0ee      	beq.n	80013d8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 80013fa:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <FLASH_WaitForLastOperation+0xd8>)
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <FLASH_WaitForLastOperation+0xd8>)
 800140c:	2201      	movs	r2, #1
 800140e:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800141a:	4b21      	ldr	r3, [pc, #132]	; (80014a0 <FLASH_WaitForLastOperation+0xd8>)
 800141c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001420:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001428:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <FLASH_WaitForLastOperation+0x86>
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <FLASH_WaitForLastOperation+0xd8>)
 8001440:	699a      	ldr	r2, [r3, #24]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001448:	4915      	ldr	r1, [pc, #84]	; (80014a0 <FLASH_WaitForLastOperation+0xd8>)
 800144a:	4313      	orrs	r3, r2
 800144c:	618b      	str	r3, [r1, #24]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d004      	beq.n	8001462 <FLASH_WaitForLastOperation+0x9a>
 8001458:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <FLASH_WaitForLastOperation+0xd8>)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001460:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00e      	beq.n	8001486 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001468:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <FLASH_WaitForLastOperation+0xdc>)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e011      	b.n	8001496 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001472:	f7ff fe09 	bl	8001088 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	429a      	cmp	r2, r3
 8001480:	d801      	bhi.n	8001486 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e007      	b.n	8001496 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001486:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <FLASH_WaitForLastOperation+0xd8>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001492:	d0ee      	beq.n	8001472 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	58004000 	.word	0x58004000
 80014a4:	200004c4 	.word	0x200004c4

080014a8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <FLASH_Program_DoubleWord+0x48>)
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <FLASH_Program_DoubleWord+0x48>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80014c6:	f3bf 8f6f 	isb	sy
}
 80014ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80014cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	000a      	movs	r2, r1
 80014da:	2300      	movs	r3, #0
 80014dc:	68f9      	ldr	r1, [r7, #12]
 80014de:	3104      	adds	r1, #4
 80014e0:	4613      	mov	r3, r2
 80014e2:	600b      	str	r3, [r1, #0]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	58004000 	.word	0x58004000

080014f4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014fe:	4b24      	ldr	r3, [pc, #144]	; (8001590 <HAL_FLASHEx_Erase+0x9c>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_FLASHEx_Erase+0x16>
 8001506:	2302      	movs	r3, #2
 8001508:	e03d      	b.n	8001586 <HAL_FLASHEx_Erase+0x92>
 800150a:	4b21      	ldr	r3, [pc, #132]	; (8001590 <HAL_FLASHEx_Erase+0x9c>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001510:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_FLASHEx_Erase+0x9c>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800151a:	f7ff ff55 	bl	80013c8 <FLASH_WaitForLastOperation>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d12a      	bne.n	800157e <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d124      	bne.n	800157a <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	f04f 32ff 	mov.w	r2, #4294967295
 8001536:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	e012      	b.n	8001566 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8001540:	68b8      	ldr	r0, [r7, #8]
 8001542:	f000 f827 	bl	8001594 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001546:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800154a:	f7ff ff3d 	bl	80013c8 <FLASH_WaitForLastOperation>
 800154e:	4603      	mov	r3, r0
 8001550:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	601a      	str	r2, [r3, #0]
          break;
 800155e:	e00a      	b.n	8001576 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	3301      	adds	r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	4413      	add	r3, r2
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	429a      	cmp	r2, r3
 8001574:	d3e4      	bcc.n	8001540 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8001576:	f000 f86f 	bl	8001658 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800157a:	f000 f825 	bl	80015c8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <HAL_FLASHEx_Erase+0x9c>)
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]

  return status;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200004c4 	.word	0x200004c4

08001594 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <FLASH_PageErase+0x30>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4313      	orrs	r3, r2
 80015aa:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <FLASH_PageErase+0x30>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6153      	str	r3, [r2, #20]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	58004000 	.word	0x58004000

080015c8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <FLASH_FlushCaches+0x8c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d8:	d117      	bne.n	800160a <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <FLASH_FlushCaches+0x8c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <FLASH_FlushCaches+0x8c>)
 80015e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015e4:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <FLASH_FlushCaches+0x8c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <FLASH_FlushCaches+0x8c>)
 80015ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <FLASH_FlushCaches+0x8c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a17      	ldr	r2, [pc, #92]	; (8001654 <FLASH_FlushCaches+0x8c>)
 80015f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015fc:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <FLASH_FlushCaches+0x8c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <FLASH_FlushCaches+0x8c>)
 8001604:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001608:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <FLASH_FlushCaches+0x8c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001616:	d117      	bne.n	8001648 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <FLASH_FlushCaches+0x8c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <FLASH_FlushCaches+0x8c>)
 800161e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001622:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <FLASH_FlushCaches+0x8c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <FLASH_FlushCaches+0x8c>)
 800162a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <FLASH_FlushCaches+0x8c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <FLASH_FlushCaches+0x8c>)
 8001636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800163a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <FLASH_FlushCaches+0x8c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <FLASH_FlushCaches+0x8c>)
 8001642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001646:	6013      	str	r3, [r2, #0]
  }
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	58004000 	.word	0x58004000

08001658 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <FLASH_AcknowledgePageErase+0x20>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	4a05      	ldr	r2, [pc, #20]	; (8001678 <FLASH_AcknowledgePageErase+0x20>)
 8001662:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001666:	f023 0302 	bic.w	r3, r3, #2
 800166a:	6153      	str	r3, [r2, #20]
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	58004000 	.word	0x58004000

0800167c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168a:	e14c      	b.n	8001926 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 813e 	beq.w	8001920 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d005      	beq.n	80016bc <HAL_GPIO_Init+0x40>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d130      	bne.n	800171e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016f2:	2201      	movs	r2, #1
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	091b      	lsrs	r3, r3, #4
 8001708:	f003 0201 	and.w	r2, r3, #1
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b03      	cmp	r3, #3
 8001728:	d017      	beq.n	800175a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2203      	movs	r2, #3
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d123      	bne.n	80017ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	08da      	lsrs	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3208      	adds	r2, #8
 800176e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	691a      	ldr	r2, [r3, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	08da      	lsrs	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3208      	adds	r2, #8
 80017a8:	6939      	ldr	r1, [r7, #16]
 80017aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0203 	and.w	r2, r3, #3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8098 	beq.w	8001920 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80017f0:	4a54      	ldr	r2, [pc, #336]	; (8001944 <HAL_GPIO_Init+0x2c8>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800181a:	d019      	beq.n	8001850 <HAL_GPIO_Init+0x1d4>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a4a      	ldr	r2, [pc, #296]	; (8001948 <HAL_GPIO_Init+0x2cc>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d013      	beq.n	800184c <HAL_GPIO_Init+0x1d0>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a49      	ldr	r2, [pc, #292]	; (800194c <HAL_GPIO_Init+0x2d0>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00d      	beq.n	8001848 <HAL_GPIO_Init+0x1cc>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a48      	ldr	r2, [pc, #288]	; (8001950 <HAL_GPIO_Init+0x2d4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d007      	beq.n	8001844 <HAL_GPIO_Init+0x1c8>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a47      	ldr	r2, [pc, #284]	; (8001954 <HAL_GPIO_Init+0x2d8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_GPIO_Init+0x1c4>
 800183c:	2304      	movs	r3, #4
 800183e:	e008      	b.n	8001852 <HAL_GPIO_Init+0x1d6>
 8001840:	2307      	movs	r3, #7
 8001842:	e006      	b.n	8001852 <HAL_GPIO_Init+0x1d6>
 8001844:	2303      	movs	r3, #3
 8001846:	e004      	b.n	8001852 <HAL_GPIO_Init+0x1d6>
 8001848:	2302      	movs	r3, #2
 800184a:	e002      	b.n	8001852 <HAL_GPIO_Init+0x1d6>
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_GPIO_Init+0x1d6>
 8001850:	2300      	movs	r3, #0
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	f002 0203 	and.w	r2, r2, #3
 8001858:	0092      	lsls	r2, r2, #2
 800185a:	4093      	lsls	r3, r2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001862:	4938      	ldr	r1, [pc, #224]	; (8001944 <HAL_GPIO_Init+0x2c8>)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001870:	4b39      	ldr	r3, [pc, #228]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001894:	4a30      	ldr	r2, [pc, #192]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800189a:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018be:	4a26      	ldr	r2, [pc, #152]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 80018c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018ea:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80018f2:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 80018f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001918:	4a0f      	ldr	r2, [pc, #60]	; (8001958 <HAL_GPIO_Init+0x2dc>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3301      	adds	r3, #1
 8001924:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	f47f aeab 	bne.w	800168c <HAL_GPIO_Init+0x10>
  }
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40010000 	.word	0x40010000
 8001948:	48000400 	.word	0x48000400
 800194c:	48000800 	.word	0x48000800
 8001950:	48000c00 	.word	0x48000c00
 8001954:	48001000 	.word	0x48001000
 8001958:	58000800 	.word	0x58000800

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001978:	e002      	b.n	8001980 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4013      	ands	r3, r2
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43d9      	mvns	r1, r3
 80019aa:	887b      	ldrh	r3, [r7, #2]
 80019ac:	400b      	ands	r3, r1
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c2:	b08b      	sub	sp, #44	; 0x2c
 80019c4:	af06      	add	r7, sp, #24
 80019c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0cb      	b.n	8001b6a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff f94c 	bl	8000c84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2203      	movs	r2, #3
 80019f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 fc1b 	bl	8004234 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	e040      	b.n	8001a86 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	440b      	add	r3, r1
 8001a14:	3301      	adds	r3, #1
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	7bfa      	ldrb	r2, [r7, #15]
 8001a2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	1c5a      	adds	r2, r3, #1
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3303      	adds	r3, #3
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	3338      	adds	r3, #56	; 0x38
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	333c      	adds	r3, #60	; 0x3c
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a6c:	7bfa      	ldrb	r2, [r7, #15]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	3340      	adds	r3, #64	; 0x40
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	3301      	adds	r3, #1
 8001a84:	73fb      	strb	r3, [r7, #15]
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d3b9      	bcc.n	8001a04 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e044      	b.n	8001b20 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aac:	7bfa      	ldrb	r2, [r7, #15]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001abe:	7bfa      	ldrb	r2, [r7, #15]
 8001ac0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ac2:	7bfa      	ldrb	r2, [r7, #15]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	440b      	add	r3, r1
 8001ad0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aee:	7bfa      	ldrb	r2, [r7, #15]
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	440b      	add	r3, r1
 8001afc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d3b5      	bcc.n	8001a96 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	687e      	ldr	r6, [r7, #4]
 8001b32:	466d      	mov	r5, sp
 8001b34:	f106 0410 	add.w	r4, r6, #16
 8001b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	602b      	str	r3, [r5, #0]
 8001b40:	1d33      	adds	r3, r6, #4
 8001b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b44:	6838      	ldr	r0, [r7, #0]
 8001b46:	f002 fb90 	bl	800426a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f805 	bl	8001b72 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b72 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b085      	sub	sp, #20
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	58000400 	.word	0x58000400

08001be8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	58000400 	.word	0x58000400

08001c04 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c16:	d101      	bne.n	8001c1c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_RCC_HSE_Enable>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_RCC_HSE_Disable>:
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_RCC_HSE_IsReady>:
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c76:	d101      	bne.n	8001c7c <LL_RCC_HSE_IsReady+0x18>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <LL_RCC_HSE_IsReady+0x1a>
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_RCC_HSI_Enable>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9a:	6013      	str	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_HSI_Disable>:
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_RCC_HSI_IsReady>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd6:	d101      	bne.n	8001cdc <LL_RCC_HSI_IsReady+0x18>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <LL_RCC_HSI_IsReady+0x1a>
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_RCC_HSI48_Enable>:
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_RCC_HSI48_Disable>:
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_RCC_HSI48_IsReady>:
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d101      	bne.n	8001d6e <LL_RCC_HSI48_IsReady+0x18>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <LL_RCC_HSI48_IsReady+0x1a>
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_RCC_LSE_Enable>:
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_RCC_LSE_Disable>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <LL_RCC_LSE_EnableBypass>:
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_RCC_LSE_DisableBypass>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001df0:	f023 0304 	bic.w	r3, r3, #4
 8001df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d101      	bne.n	8001e1a <LL_RCC_LSE_IsReady+0x18>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <LL_RCC_LSE_IsReady+0x1a>
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d101      	bne.n	8001e82 <LL_RCC_LSI1_IsReady+0x18>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <LL_RCC_LSI1_IsReady+0x1a>
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d101      	bne.n	8001eea <LL_RCC_LSI2_IsReady+0x18>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_RCC_LSI2_IsReady+0x1a>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	6013      	str	r3, [r2, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	6013      	str	r3, [r2, #0]
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d101      	bne.n	8001f76 <LL_RCC_MSI_IsReady+0x16>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <LL_RCC_MSI_IsReady+0x18>
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fba:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2bb0      	cmp	r3, #176	; 0xb0
 8001fc0:	d901      	bls.n	8001fc6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001fc2:	23b0      	movs	r3, #176	; 0xb0
 8001fc4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001fc6:	687b      	ldr	r3, [r7, #4]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 0203 	bic.w	r2, r3, #3
 8002010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 030c 	and.w	r3, r3, #12
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002072:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800209a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800209e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020a2:	f023 020f 	bic.w	r2, r3, #15
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80020f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002130:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002182:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021a4:	6013      	str	r3, [r2, #0]
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021c2:	d101      	bne.n	80021c8 <LL_RCC_PLL_IsReady+0x18>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <LL_RCC_PLL_IsReady+0x1a>
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0303 	and.w	r3, r3, #3
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800223a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002248:	d101      	bne.n	800224e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002262:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800226e:	d101      	bne.n	8002274 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800228c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d101      	bne.n	800229a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022b8:	d101      	bne.n	80022be <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80022ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022dc:	d101      	bne.n	80022e2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b08d      	sub	sp, #52	; 0x34
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e363      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 808d 	beq.w	800242a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002310:	f7ff fe89 	bl	8002026 <LL_RCC_GetSysClkSource>
 8002314:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002316:	f7ff ff82 	bl	800221e <LL_RCC_PLL_GetMainSource>
 800231a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_RCC_OscConfig+0x3e>
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d147      	bne.n	80023b8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232a:	2b01      	cmp	r3, #1
 800232c:	d144      	bne.n	80023b8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e347      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800233e:	f7ff fe34 	bl	8001faa <LL_RCC_MSI_GetRange>
 8002342:	4603      	mov	r3, r0
 8002344:	429c      	cmp	r4, r3
 8002346:	d914      	bls.n	8002372 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fd2f 	bl	8002db0 <RCC_SetFlashLatencyFromMSIRange>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e336      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fe0e 	bl	8001f82 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fe32 	bl	8001fd4 <LL_RCC_MSI_SetCalibTrimming>
 8002370:	e013      	b.n	800239a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fe03 	bl	8001f82 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe27 	bl	8001fd4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fd10 	bl	8002db0 <RCC_SetFlashLatencyFromMSIRange>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e317      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800239a:	f000 fcc9 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 800239e:	4603      	mov	r3, r0
 80023a0:	4aa4      	ldr	r2, [pc, #656]	; (8002634 <HAL_RCC_OscConfig+0x344>)
 80023a2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023a4:	4ba4      	ldr	r3, [pc, #656]	; (8002638 <HAL_RCC_OscConfig+0x348>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fe1f 	bl	8000fec <HAL_InitTick>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d039      	beq.n	8002428 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e308      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01e      	beq.n	80023fe <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023c0:	f7ff fdb0 	bl	8001f24 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fe60 	bl	8001088 <HAL_GetTick>
 80023c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023cc:	f7fe fe5c 	bl	8001088 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e2f5      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80023de:	f7ff fdbf 	bl	8001f60 <LL_RCC_MSI_IsReady>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f1      	beq.n	80023cc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fdc8 	bl	8001f82 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7ff fdec 	bl	8001fd4 <LL_RCC_MSI_SetCalibTrimming>
 80023fc:	e015      	b.n	800242a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023fe:	f7ff fda0 	bl	8001f42 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002402:	f7fe fe41 	bl	8001088 <HAL_GetTick>
 8002406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800240a:	f7fe fe3d 	bl	8001088 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e2d6      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800241c:	f7ff fda0 	bl	8001f60 <LL_RCC_MSI_IsReady>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f1      	bne.n	800240a <HAL_RCC_OscConfig+0x11a>
 8002426:	e000      	b.n	800242a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002428:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d047      	beq.n	80024c6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002436:	f7ff fdf6 	bl	8002026 <LL_RCC_GetSysClkSource>
 800243a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800243c:	f7ff feef 	bl	800221e <LL_RCC_PLL_GetMainSource>
 8002440:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	2b08      	cmp	r3, #8
 8002446:	d005      	beq.n	8002454 <HAL_RCC_OscConfig+0x164>
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	2b0c      	cmp	r3, #12
 800244c:	d108      	bne.n	8002460 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d105      	bne.n	8002460 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d134      	bne.n	80024c6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e2b4      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002468:	d102      	bne.n	8002470 <HAL_RCC_OscConfig+0x180>
 800246a:	f7ff fbdd 	bl	8001c28 <LL_RCC_HSE_Enable>
 800246e:	e001      	b.n	8002474 <HAL_RCC_OscConfig+0x184>
 8002470:	f7ff fbe9 	bl	8001c46 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe fe04 	bl	8001088 <HAL_GetTick>
 8002480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002484:	f7fe fe00 	bl	8001088 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b64      	cmp	r3, #100	; 0x64
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e299      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002496:	f7ff fbe5 	bl	8001c64 <LL_RCC_HSE_IsReady>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0f1      	beq.n	8002484 <HAL_RCC_OscConfig+0x194>
 80024a0:	e011      	b.n	80024c6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fdf1 	bl	8001088 <HAL_GetTick>
 80024a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024aa:	f7fe fded 	bl	8001088 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b64      	cmp	r3, #100	; 0x64
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e286      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80024bc:	f7ff fbd2 	bl	8001c64 <LL_RCC_HSE_IsReady>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f1      	bne.n	80024aa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04c      	beq.n	800256c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d2:	f7ff fda8 	bl	8002026 <LL_RCC_GetSysClkSource>
 80024d6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d8:	f7ff fea1 	bl	800221e <LL_RCC_PLL_GetMainSource>
 80024dc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_OscConfig+0x200>
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d10e      	bne.n	8002508 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d10b      	bne.n	8002508 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e266      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fbf1 	bl	8001ce8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002506:	e031      	b.n	800256c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d019      	beq.n	8002544 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002510:	f7ff fbba 	bl	8001c88 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fdb8 	bl	8001088 <HAL_GetTick>
 8002518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251c:	f7fe fdb4 	bl	8001088 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e24d      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800252e:	f7ff fbc9 	bl	8001cc4 <LL_RCC_HSI_IsReady>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f1      	beq.n	800251c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fbd3 	bl	8001ce8 <LL_RCC_HSI_SetCalibTrimming>
 8002542:	e013      	b.n	800256c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002544:	f7ff fbaf 	bl	8001ca6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fd9e 	bl	8001088 <HAL_GetTick>
 800254c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002550:	f7fe fd9a 	bl	8001088 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e233      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002562:	f7ff fbaf 	bl	8001cc4 <LL_RCC_HSI_IsReady>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f1      	bne.n	8002550 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d106      	bne.n	8002586 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a3 	beq.w	80026cc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d076      	beq.n	800267c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d046      	beq.n	8002628 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800259a:	f7ff fc66 	bl	8001e6a <LL_RCC_LSI1_IsReady>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d113      	bne.n	80025cc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80025a4:	f7ff fc3f 	bl	8001e26 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025a8:	f7fe fd6e 	bl	8001088 <HAL_GetTick>
 80025ac:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80025b0:	f7fe fd6a 	bl	8001088 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e203      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80025c2:	f7ff fc52 	bl	8001e6a <LL_RCC_LSI1_IsReady>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f1      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80025cc:	f7ff fc5f 	bl	8001e8e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fd5a 	bl	8001088 <HAL_GetTick>
 80025d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025d8:	f7fe fd56 	bl	8001088 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e1ef      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80025ea:	f7ff fc72 	bl	8001ed2 <LL_RCC_LSI2_IsReady>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f1      	beq.n	80025d8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fc7c 	bl	8001ef6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80025fe:	f7ff fc23 	bl	8001e48 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe fd41 	bl	8001088 <HAL_GetTick>
 8002606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800260a:	f7fe fd3d 	bl	8001088 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1d6      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800261c:	f7ff fc25 	bl	8001e6a <LL_RCC_LSI1_IsReady>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f1      	bne.n	800260a <HAL_RCC_OscConfig+0x31a>
 8002626:	e051      	b.n	80026cc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002628:	f7ff fbfd 	bl	8001e26 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fd2c 	bl	8001088 <HAL_GetTick>
 8002630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002632:	e00c      	b.n	800264e <HAL_RCC_OscConfig+0x35e>
 8002634:	20000008 	.word	0x20000008
 8002638:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800263c:	f7fe fd24 	bl	8001088 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1bd      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800264e:	f7ff fc0c 	bl	8001e6a <LL_RCC_LSI1_IsReady>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f1      	beq.n	800263c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002658:	f7ff fc2a 	bl	8001eb0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800265e:	f7fe fd13 	bl	8001088 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b03      	cmp	r3, #3
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e1ac      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002670:	f7ff fc2f 	bl	8001ed2 <LL_RCC_LSI2_IsReady>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f1      	bne.n	800265e <HAL_RCC_OscConfig+0x36e>
 800267a:	e027      	b.n	80026cc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800267c:	f7ff fc18 	bl	8001eb0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe fd02 	bl	8001088 <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002688:	f7fe fcfe 	bl	8001088 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b03      	cmp	r3, #3
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e197      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800269a:	f7ff fc1a 	bl	8001ed2 <LL_RCC_LSI2_IsReady>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f1      	bne.n	8002688 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80026a4:	f7ff fbd0 	bl	8001e48 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fcee 	bl	8001088 <HAL_GetTick>
 80026ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80026b0:	f7fe fcea 	bl	8001088 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e183      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80026c2:	f7ff fbd2 	bl	8001e6a <LL_RCC_LSI1_IsReady>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f1      	bne.n	80026b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d05b      	beq.n	8002790 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d8:	4ba7      	ldr	r3, [pc, #668]	; (8002978 <HAL_RCC_OscConfig+0x688>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d114      	bne.n	800270e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80026e4:	f7ff fa70 	bl	8001bc8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e8:	f7fe fcce 	bl	8001088 <HAL_GetTick>
 80026ec:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f0:	f7fe fcca 	bl	8001088 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e163      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002702:	4b9d      	ldr	r3, [pc, #628]	; (8002978 <HAL_RCC_OscConfig+0x688>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d102      	bne.n	800271c <HAL_RCC_OscConfig+0x42c>
 8002716:	f7ff fb30 	bl	8001d7a <LL_RCC_LSE_Enable>
 800271a:	e00c      	b.n	8002736 <HAL_RCC_OscConfig+0x446>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b05      	cmp	r3, #5
 8002722:	d104      	bne.n	800272e <HAL_RCC_OscConfig+0x43e>
 8002724:	f7ff fb4b 	bl	8001dbe <LL_RCC_LSE_EnableBypass>
 8002728:	f7ff fb27 	bl	8001d7a <LL_RCC_LSE_Enable>
 800272c:	e003      	b.n	8002736 <HAL_RCC_OscConfig+0x446>
 800272e:	f7ff fb35 	bl	8001d9c <LL_RCC_LSE_Disable>
 8002732:	f7ff fb55 	bl	8001de0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d014      	beq.n	8002768 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273e:	f7fe fca3 	bl	8001088 <HAL_GetTick>
 8002742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002744:	e00a      	b.n	800275c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002746:	f7fe fc9f 	bl	8001088 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f241 3288 	movw	r2, #5000	; 0x1388
 8002754:	4293      	cmp	r3, r2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e136      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800275c:	f7ff fb51 	bl	8001e02 <LL_RCC_LSE_IsReady>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ef      	beq.n	8002746 <HAL_RCC_OscConfig+0x456>
 8002766:	e013      	b.n	8002790 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe fc8e 	bl	8001088 <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7fe fc8a 	bl	8001088 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e121      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002786:	f7ff fb3c 	bl	8001e02 <LL_RCC_LSE_IsReady>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ef      	bne.n	8002770 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d014      	beq.n	80027ce <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027a4:	f7ff fab5 	bl	8001d12 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe fc6e 	bl	8001088 <HAL_GetTick>
 80027ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b0:	f7fe fc6a 	bl	8001088 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e103      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80027c2:	f7ff fac8 	bl	8001d56 <LL_RCC_HSI48_IsReady>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f1      	beq.n	80027b0 <HAL_RCC_OscConfig+0x4c0>
 80027cc:	e013      	b.n	80027f6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ce:	f7ff fab1 	bl	8001d34 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fe fc59 	bl	8001088 <HAL_GetTick>
 80027d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027da:	f7fe fc55 	bl	8001088 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e0ee      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80027ec:	f7ff fab3 	bl	8001d56 <LL_RCC_HSI48_IsReady>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f1      	bne.n	80027da <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80e4 	beq.w	80029c8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002800:	f7ff fc11 	bl	8002026 <LL_RCC_GetSysClkSource>
 8002804:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002812:	2b02      	cmp	r3, #2
 8002814:	f040 80b4 	bne.w	8002980 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0203 	and.w	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	429a      	cmp	r2, r3
 8002824:	d123      	bne.n	800286e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d11c      	bne.n	800286e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d114      	bne.n	800286e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d10d      	bne.n	800286e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d05d      	beq.n	800292a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b0c      	cmp	r3, #12
 8002872:	d058      	beq.n	8002926 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0a1      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002886:	f7ff fc84 	bl	8002192 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800288a:	f7fe fbfd 	bl	8001088 <HAL_GetTick>
 800288e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002892:	f7fe fbf9 	bl	8001088 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e092      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1ef      	bne.n	8002892 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	4b30      	ldr	r3, [pc, #192]	; (800297c <HAL_RCC_OscConfig+0x68c>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028ca:	0212      	lsls	r2, r2, #8
 80028cc:	4311      	orrs	r1, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028d2:	4311      	orrs	r1, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80028de:	430a      	orrs	r2, r1
 80028e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028e8:	f7ff fc44 	bl	8002174 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028fc:	f7fe fbc4 	bl	8001088 <HAL_GetTick>
 8002900:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe fbc0 	bl	8001088 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e059      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ef      	beq.n	8002904 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002924:	e050      	b.n	80029c8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e04f      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d147      	bne.n	80029c8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002938:	f7ff fc1c 	bl	8002174 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800294c:	f7fe fb9c 	bl	8001088 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe fb98 	bl	8001088 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e031      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <HAL_RCC_OscConfig+0x664>
 8002974:	e028      	b.n	80029c8 <HAL_RCC_OscConfig+0x6d8>
 8002976:	bf00      	nop
 8002978:	58000400 	.word	0x58000400
 800297c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d01e      	beq.n	80029c4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002986:	f7ff fc04 	bl	8002192 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7fe fb7d 	bl	8001088 <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002992:	f7fe fb79 	bl	8001088 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e012      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1ef      	bne.n	8002992 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80029b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b6:	68da      	ldr	r2, [r3, #12]
 80029b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_OscConfig+0x6e4>)
 80029be:	4013      	ands	r3, r2
 80029c0:	60cb      	str	r3, [r1, #12]
 80029c2:	e001      	b.n	80029c8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3734      	adds	r7, #52	; 0x34
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	eefefffc 	.word	0xeefefffc

080029d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e12d      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b98      	ldr	r3, [pc, #608]	; (8002c50 <HAL_RCC_ClockConfig+0x278>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d91b      	bls.n	8002a32 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b95      	ldr	r3, [pc, #596]	; (8002c50 <HAL_RCC_ClockConfig+0x278>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4993      	ldr	r1, [pc, #588]	; (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0a:	f7fe fb3d 	bl	8001088 <HAL_GetTick>
 8002a0e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a12:	f7fe fb39 	bl	8001088 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e111      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a24:	4b8a      	ldr	r3, [pc, #552]	; (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d1ef      	bne.n	8002a12 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fafb 	bl	800203e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a48:	f7fe fb1e 	bl	8001088 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a50:	f7fe fb1a 	bl	8001088 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e0f2      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002a62:	f7ff fbe8 	bl	8002236 <LL_RCC_IsActiveFlag_HPRE>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f1      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d016      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff faf2 	bl	8002066 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a82:	f7fe fb01 	bl	8001088 <HAL_GetTick>
 8002a86:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a8a:	f7fe fafd 	bl	8001088 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e0d5      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002a9c:	f7ff fbdd 	bl	800225a <LL_RCC_IsActiveFlag_C2HPRE>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f1      	beq.n	8002a8a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d016      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff faeb 	bl	8002092 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002abc:	f7fe fae4 	bl	8001088 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002ac4:	f7fe fae0 	bl	8001088 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e0b8      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002ad6:	f7ff fbd3 	bl	8002280 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f1      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d016      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fae5 	bl	80020c0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002af6:	f7fe fac7 	bl	8001088 <HAL_GetTick>
 8002afa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002afe:	f7fe fac3 	bl	8001088 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e09b      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002b10:	f7ff fbc9 	bl	80022a6 <LL_RCC_IsActiveFlag_PPRE1>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f1      	beq.n	8002afe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d017      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fadb 	bl	80020e8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002b32:	f7fe faa9 	bl	8001088 <HAL_GetTick>
 8002b36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002b3a:	f7fe faa5 	bl	8001088 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e07d      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002b4c:	f7ff fbbd 	bl	80022ca <LL_RCC_IsActiveFlag_PPRE2>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f1      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d043      	beq.n	8002bea <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d106      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002b6a:	f7ff f87b 	bl	8001c64 <LL_RCC_HSE_IsReady>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d11e      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e067      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d106      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002b80:	f7ff fb16 	bl	80021b0 <LL_RCC_PLL_IsReady>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d113      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e05c      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002b96:	f7ff f9e3 	bl	8001f60 <LL_RCC_MSI_IsReady>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d108      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e051      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002ba4:	f7ff f88e 	bl	8001cc4 <LL_RCC_HSI_IsReady>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e04a      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fa21 	bl	8001ffe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fa64 	bl	8001088 <HAL_GetTick>
 8002bc0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc4:	f7fe fa60 	bl	8001088 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e036      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	f7ff fa24 	bl	8002026 <LL_RCC_GetSysClkSource>
 8002bde:	4602      	mov	r2, r0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d1ec      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bea:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d21b      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf8:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f023 0207 	bic.w	r2, r3, #7
 8002c00:	4913      	ldr	r1, [pc, #76]	; (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c08:	f7fe fa3e 	bl	8001088 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002c10:	f7fe fa3a 	bl	8001088 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e012      	b.n	8002c48 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RCC_ClockConfig+0x278>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1ef      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c30:	f000 f87e 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <HAL_RCC_ClockConfig+0x27c>)
 8002c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002c3a:	f7fe fa31 	bl	80010a0 <HAL_GetTickPrio>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe f9d3 	bl	8000fec <HAL_InitTick>
 8002c46:	4603      	mov	r3, r0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	58004000 	.word	0x58004000
 8002c54:	20000008 	.word	0x20000008

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c5e:	f7ff f9e2 	bl	8002026 <LL_RCC_GetSysClkSource>
 8002c62:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c6a:	f7ff f99e 	bl	8001faa <LL_RCC_MSI_GetRange>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	4a2b      	ldr	r2, [pc, #172]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e04b      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d102      	bne.n	8002c8c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c86:	4b28      	ldr	r3, [pc, #160]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e045      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d10a      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c92:	f7fe ffb7 	bl	8001c04 <LL_RCC_HSE_IsEnabledDiv2>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c9c:	4b22      	ldr	r3, [pc, #136]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e03a      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e037      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002ca8:	f7ff fab9 	bl	800221e <LL_RCC_PLL_GetMainSource>
 8002cac:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d003      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x64>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x6a>
 8002cba:	e00d      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002cbc:	4b1a      	ldr	r3, [pc, #104]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cbe:	60bb      	str	r3, [r7, #8]
        break;
 8002cc0:	e015      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002cc2:	f7fe ff9f 	bl	8001c04 <LL_RCC_HSE_IsEnabledDiv2>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d102      	bne.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cce:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002cd0:	e00d      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002cd2:	4b16      	ldr	r3, [pc, #88]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002cd4:	60bb      	str	r3, [r7, #8]
        break;
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002cd8:	f7ff f967 	bl	8001faa <LL_RCC_MSI_GetRange>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	4a0f      	ldr	r2, [pc, #60]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cea:	60bb      	str	r3, [r7, #8]
        break;
 8002cec:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002cee:	f7ff fa71 	bl	80021d4 <LL_RCC_PLL_GetN>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	fb03 f402 	mul.w	r4, r3, r2
 8002cfa:	f7ff fa84 	bl	8002206 <LL_RCC_PLL_GetDivider>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	3301      	adds	r3, #1
 8002d04:	fbb4 f4f3 	udiv	r4, r4, r3
 8002d08:	f7ff fa71 	bl	80021ee <LL_RCC_PLL_GetR>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	0f5b      	lsrs	r3, r3, #29
 8002d10:	3301      	adds	r3, #1
 8002d12:	fbb4 f3f3 	udiv	r3, r4, r3
 8002d16:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002d18:	68fb      	ldr	r3, [r7, #12]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd90      	pop	{r4, r7, pc}
 8002d22:	bf00      	nop
 8002d24:	080053f4 	.word	0x080053f4
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	01e84800 	.word	0x01e84800

08002d30 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b598      	push	{r3, r4, r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002d34:	f7ff ff90 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002d38:	4604      	mov	r4, r0
 8002d3a:	f7ff f9e9 	bl	8002110 <LL_RCC_GetAHBPrescaler>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	4a03      	ldr	r2, [pc, #12]	; (8002d54 <HAL_RCC_GetHCLKFreq+0x24>)
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd98      	pop	{r3, r4, r7, pc}
 8002d54:	08005394 	.word	0x08005394

08002d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d58:	b598      	push	{r3, r4, r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d5c:	f7ff ffe8 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d60:	4604      	mov	r4, r0
 8002d62:	f7ff f9ef 	bl	8002144 <LL_RCC_GetAPB1Prescaler>
 8002d66:	4603      	mov	r3, r0
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd98      	pop	{r3, r4, r7, pc}
 8002d80:	080053d4 	.word	0x080053d4

08002d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d84:	b598      	push	{r3, r4, r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d88:	f7ff ffd2 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	f7ff f9e5 	bl	800215c <LL_RCC_GetAPB2Prescaler>
 8002d92:	4603      	mov	r3, r0
 8002d94:	0adb      	lsrs	r3, r3, #11
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	4a04      	ldr	r2, [pc, #16]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd98      	pop	{r3, r4, r7, pc}
 8002dac:	080053d4 	.word	0x080053d4

08002db0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2bb0      	cmp	r3, #176	; 0xb0
 8002dbc:	d903      	bls.n	8002dc6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e007      	b.n	8002dd6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	4a11      	ldr	r2, [pc, #68]	; (8002e14 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002dd6:	f7ff f9a7 	bl	8002128 <LL_RCC_GetAHB4Prescaler>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	0c9c      	lsrs	r4, r3, #18
 8002dfa:	f7fe fef5 	bl	8001be8 <HAL_PWREx_GetVoltageRange>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4619      	mov	r1, r3
 8002e02:	4620      	mov	r0, r4
 8002e04:	f000 f80c 	bl	8002e20 <RCC_SetFlashLatency>
 8002e08:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd90      	pop	{r4, r7, pc}
 8002e12:	bf00      	nop
 8002e14:	080053f4 	.word	0x080053f4
 8002e18:	08005394 	.word	0x08005394
 8002e1c:	431bde83 	.word	0x431bde83

08002e20 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002e20:	b590      	push	{r4, r7, lr}
 8002e22:	b093      	sub	sp, #76	; 0x4c
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <RCC_SetFlashLatency+0xe8>)
 8002e2c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002e30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002e36:	4a35      	ldr	r2, [pc, #212]	; (8002f0c <RCC_SetFlashLatency+0xec>)
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002e42:	4b33      	ldr	r3, [pc, #204]	; (8002f10 <RCC_SetFlashLatency+0xf0>)
 8002e44:	f107 040c 	add.w	r4, r7, #12
 8002e48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e4e:	2300      	movs	r3, #0
 8002e50:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e58:	d11a      	bne.n	8002e90 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8002e5e:	e013      	b.n	8002e88 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	3348      	adds	r3, #72	; 0x48
 8002e66:	443b      	add	r3, r7
 8002e68:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d807      	bhi.n	8002e82 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	3348      	adds	r3, #72	; 0x48
 8002e78:	443b      	add	r3, r7
 8002e7a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e7e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e80:	e020      	b.n	8002ec4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e84:	3301      	adds	r3, #1
 8002e86:	643b      	str	r3, [r7, #64]	; 0x40
 8002e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d9e8      	bls.n	8002e60 <RCC_SetFlashLatency+0x40>
 8002e8e:	e019      	b.n	8002ec4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e94:	e013      	b.n	8002ebe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	3348      	adds	r3, #72	; 0x48
 8002e9c:	443b      	add	r3, r7
 8002e9e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d807      	bhi.n	8002eb8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	3348      	adds	r3, #72	; 0x48
 8002eae:	443b      	add	r3, r7
 8002eb0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002eb4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002eb6:	e005      	b.n	8002ec4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eba:	3301      	adds	r3, #1
 8002ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d9e8      	bls.n	8002e96 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002ec4:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <RCC_SetFlashLatency+0xf4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f023 0207 	bic.w	r2, r3, #7
 8002ecc:	4911      	ldr	r1, [pc, #68]	; (8002f14 <RCC_SetFlashLatency+0xf4>)
 8002ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ed4:	f7fe f8d8 	bl	8001088 <HAL_GetTick>
 8002ed8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002eda:	e008      	b.n	8002eee <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002edc:	f7fe f8d4 	bl	8001088 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e007      	b.n	8002efe <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <RCC_SetFlashLatency+0xf4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d1ef      	bne.n	8002edc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	374c      	adds	r7, #76	; 0x4c
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd90      	pop	{r4, r7, pc}
 8002f06:	bf00      	nop
 8002f08:	08005368 	.word	0x08005368
 8002f0c:	08005378 	.word	0x08005378
 8002f10:	08005384 	.word	0x08005384
 8002f14:	58004000 	.word	0x58004000

08002f18 <LL_RCC_LSE_IsEnabled>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <LL_RCC_LSE_IsEnabled+0x18>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <LL_RCC_LSE_IsEnabled+0x1a>
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_RCC_LSE_IsReady>:
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d101      	bne.n	8002f54 <LL_RCC_LSE_IsReady+0x18>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <LL_RCC_LSE_IsReady+0x1a>
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_RCC_MSI_EnablePLLMode>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6e:	f043 0304 	orr.w	r3, r3, #4
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_RCC_SetRFWKPClockSource>:
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_RCC_SetSMPSClockSource>:
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	f023 0203 	bic.w	r2, r3, #3
 8002fbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <LL_RCC_SetSMPSPrescaler>:
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fe4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_RCC_SetUSARTClockSource>:
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <LL_RCC_SetLPUARTClockSource>:
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800303a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <LL_RCC_SetI2CClockSource>:
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800305a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800306a:	43db      	mvns	r3, r3
 800306c:	401a      	ands	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <LL_RCC_SetLPTIMClockSource>:
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003098:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0c1b      	lsrs	r3, r3, #16
 80030a0:	041b      	lsls	r3, r3, #16
 80030a2:	43db      	mvns	r3, r3
 80030a4:	401a      	ands	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	041b      	lsls	r3, r3, #16
 80030aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_RCC_SetSAIClockSource>:
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_RCC_SetRNGClockSource>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80030f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003100:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_RCC_SetCLK48ClockSource>:
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800312c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_RCC_SetUSBClockSource>:
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ffe3 	bl	8003118 <LL_RCC_SetCLK48ClockSource>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <LL_RCC_SetADCClockSource>:
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800316e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_RCC_SetRTCClockSource>:
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800318e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_RCC_GetRTCClockSource>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80031b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031be:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_RCC_ForceBackupDomainReset>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80031f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003202:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003206:	bf00      	nop
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_RCC_PLLSAI1_Enable>:
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003222:	6013      	str	r3, [r2, #0]
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_RCC_PLLSAI1_Disable>:
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003240:	6013      	str	r3, [r2, #0]
}
 8003242:	bf00      	nop
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_RCC_PLLSAI1_IsReady>:
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800325e:	d101      	bne.n	8003264 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003278:	2300      	movs	r3, #0
 800327a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800327c:	2300      	movs	r3, #0
 800327e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d034      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003294:	d021      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003296:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800329a:	d81b      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800329c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a0:	d01d      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80032a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032a6:	d815      	bhi.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00b      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80032ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b0:	d110      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80032c2:	e00d      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f94d 	bl	8003568 <RCCEx_PLLSAI1_ConfigNP>
 80032ce:	4603      	mov	r3, r0
 80032d0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80032d2:	e005      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	77fb      	strb	r3, [r7, #31]
        break;
 80032d8:	e002      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80032de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e0:	7ffb      	ldrb	r3, [r7, #31]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d105      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff fee8 	bl	80030c0 <LL_RCC_SetSAIClockSource>
 80032f0:	e001      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f2:	7ffb      	ldrb	r3, [r7, #31]
 80032f4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d046      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003302:	f7ff ff56 	bl	80031b2 <LL_RCC_GetRTCClockSource>
 8003306:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	429a      	cmp	r2, r3
 8003310:	d03c      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003312:	f7fe fc59 	bl	8001bc8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff30 	bl	8003186 <LL_RCC_SetRTCClockSource>
 8003326:	e02e      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003332:	f7ff ff4b 	bl	80031cc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003336:	f7ff ff5a 	bl	80031ee <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003352:	f7ff fde1 	bl	8002f18 <LL_RCC_LSE_IsEnabled>
 8003356:	4603      	mov	r3, r0
 8003358:	2b01      	cmp	r3, #1
 800335a:	d114      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800335c:	f7fd fe94 	bl	8001088 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003362:	e00b      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003364:	f7fd fe90 	bl	8001088 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d902      	bls.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	77fb      	strb	r3, [r7, #31]
              break;
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800337c:	f7ff fdde 	bl	8002f3c <LL_RCC_LSE_IsReady>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d1ee      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003386:	7ffb      	ldrb	r3, [r7, #31]
 8003388:	77bb      	strb	r3, [r7, #30]
 800338a:	e001      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	7ffb      	ldrb	r3, [r7, #31]
 800338e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b00      	cmp	r3, #0
 800339a:	d004      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fe2a 	bl	8002ffa <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fe35 	bl	8003026 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fe5d 	bl	800308c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fe52 	bl	800308c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d004      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fe2a 	bl	8003052 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d004      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fe1f 	bl	8003052 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	2b00      	cmp	r3, #0
 800341e:	d022      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fe8d 	bl	8003144 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003432:	d107      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800343e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003442:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003448:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800344c:	d10b      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f8e3 	bl	800361e <RCCEx_PLLSAI1_ConfigNQ>
 8003458:	4603      	mov	r3, r0
 800345a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800345c:	7ffb      	ldrb	r3, [r7, #31]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003462:	7ffb      	ldrb	r3, [r7, #31]
 8003464:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346e:	2b00      	cmp	r3, #0
 8003470:	d02b      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347a:	d008      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003484:	d003      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	2b00      	cmp	r3, #0
 800348c:	d105      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fe2a 	bl	80030ec <LL_RCC_SetRNGClockSource>
 8003498:	e00a      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	2000      	movs	r0, #0
 80034a6:	f7ff fe21 	bl	80030ec <LL_RCC_SetRNGClockSource>
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7ff fe34 	bl	8003118 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80034b8:	d107      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80034ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034c8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d022      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fe3d 	bl	800315a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034e8:	d107      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003502:	d10b      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3304      	adds	r3, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f000 f8e3 	bl	80036d4 <RCCEx_PLLSAI1_ConfigNR>
 800350e:	4603      	mov	r3, r0
 8003510:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003512:	7ffb      	ldrb	r3, [r7, #31]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003518:	7ffb      	ldrb	r3, [r7, #31]
 800351a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d004      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff fd26 	bl	8002f7e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fd45 	bl	8002fd2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fd2c 	bl	8002faa <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003552:	7fbb      	ldrb	r3, [r7, #30]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003560:	f7ff fcfe 	bl	8002f60 <LL_RCC_MSI_EnablePLLMode>
}
 8003564:	bf00      	nop
 8003566:	bd80      	pop	{r7, pc}

08003568 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003574:	f7ff fe5b 	bl	800322e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003578:	f7fd fd86 	bl	8001088 <HAL_GetTick>
 800357c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800357e:	e009      	b.n	8003594 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003580:	f7fd fd82 	bl	8001088 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d902      	bls.n	8003594 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	73fb      	strb	r3, [r7, #15]
      break;
 8003592:	e004      	b.n	800359e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003594:	f7ff fe5a 	bl	800324c <LL_RCC_PLLSAI1_IsReady>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d137      	bne.n	8003614 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80035a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b8:	4313      	orrs	r3, r2
 80035ba:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80035bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ce:	4313      	orrs	r3, r2
 80035d0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035d2:	f7ff fe1d 	bl	8003210 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d6:	f7fd fd57 	bl	8001088 <HAL_GetTick>
 80035da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035dc:	e009      	b.n	80035f2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035de:	f7fd fd53 	bl	8001088 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d902      	bls.n	80035f2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	73fb      	strb	r3, [r7, #15]
        break;
 80035f0:	e004      	b.n	80035fc <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035f2:	f7ff fe2b 	bl	800324c <LL_RCC_PLLSAI1_IsReady>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d1f0      	bne.n	80035de <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d108      	bne.n	8003614 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003610:	4313      	orrs	r3, r2
 8003612:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800362a:	f7ff fe00 	bl	800322e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800362e:	f7fd fd2b 	bl	8001088 <HAL_GetTick>
 8003632:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003634:	e009      	b.n	800364a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003636:	f7fd fd27 	bl	8001088 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d902      	bls.n	800364a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	73fb      	strb	r3, [r7, #15]
      break;
 8003648:	e004      	b.n	8003654 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800364a:	f7ff fdff 	bl	800324c <LL_RCC_PLLSAI1_IsReady>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f0      	bne.n	8003636 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d137      	bne.n	80036ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800366e:	4313      	orrs	r3, r2
 8003670:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003684:	4313      	orrs	r3, r2
 8003686:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003688:	f7ff fdc2 	bl	8003210 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368c:	f7fd fcfc 	bl	8001088 <HAL_GetTick>
 8003690:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003692:	e009      	b.n	80036a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003694:	f7fd fcf8 	bl	8001088 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d902      	bls.n	80036a8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	73fb      	strb	r3, [r7, #15]
        break;
 80036a6:	e004      	b.n	80036b2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80036a8:	f7ff fdd0 	bl	800324c <LL_RCC_PLLSAI1_IsReady>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d1f0      	bne.n	8003694 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d108      	bne.n	80036ca <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036c6:	4313      	orrs	r3, r2
 80036c8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80036e0:	f7ff fda5 	bl	800322e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80036e4:	f7fd fcd0 	bl	8001088 <HAL_GetTick>
 80036e8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80036ea:	e009      	b.n	8003700 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036ec:	f7fd fccc 	bl	8001088 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d902      	bls.n	8003700 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	73fb      	strb	r3, [r7, #15]
      break;
 80036fe:	e004      	b.n	800370a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003700:	f7ff fda4 	bl	800324c <LL_RCC_PLLSAI1_IsReady>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800370a:	7bfb      	ldrb	r3, [r7, #15]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d137      	bne.n	8003780 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003724:	4313      	orrs	r3, r2
 8003726:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800373a:	4313      	orrs	r3, r2
 800373c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800373e:	f7ff fd67 	bl	8003210 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003742:	f7fd fca1 	bl	8001088 <HAL_GetTick>
 8003746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003748:	e009      	b.n	800375e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800374a:	f7fd fc9d 	bl	8001088 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d902      	bls.n	800375e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	73fb      	strb	r3, [r7, #15]
        break;
 800375c:	e004      	b.n	8003768 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800375e:	f7ff fd75 	bl	800324c <LL_RCC_PLLSAI1_IsReady>
 8003762:	4603      	mov	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	d1f0      	bne.n	800374a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d108      	bne.n	8003780 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800376e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377c:	4313      	orrs	r3, r2
 800377e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <LL_RCC_GetUSARTClockSource>:
{
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003796:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4013      	ands	r3, r2
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <LL_RCC_GetLPUARTClockSource>:
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4013      	ands	r3, r2
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e042      	b.n	8003862 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d106      	bne.n	80037f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fd fa02 	bl	8000bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2224      	movs	r2, #36	; 0x24
 80037f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f82d 	bl	800386c <UART_SetConfig>
 8003812:	4603      	mov	r3, r0
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e022      	b.n	8003862 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fa49 	bl	8003cbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003838:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003848:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fad0 	bl	8003e00 <UART_CheckIdleState>
 8003860:	4603      	mov	r3, r0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800386c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003870:	b08c      	sub	sp, #48	; 0x30
 8003872:	af00      	add	r7, sp, #0
 8003874:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	431a      	orrs	r2, r3
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	431a      	orrs	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	4313      	orrs	r3, r2
 8003892:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4baf      	ldr	r3, [pc, #700]	; (8003b58 <UART_SetConfig+0x2ec>)
 800389c:	4013      	ands	r3, r2
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4aa4      	ldr	r2, [pc, #656]	; (8003b5c <UART_SetConfig+0x2f0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d4:	4313      	orrs	r3, r2
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80038e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	f023 010f 	bic.w	r1, r3, #15
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a95      	ldr	r2, [pc, #596]	; (8003b60 <UART_SetConfig+0x2f4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d125      	bne.n	800395c <UART_SetConfig+0xf0>
 8003910:	2003      	movs	r0, #3
 8003912:	f7ff ff3a 	bl	800378a <LL_RCC_GetUSARTClockSource>
 8003916:	4603      	mov	r3, r0
 8003918:	2b03      	cmp	r3, #3
 800391a:	d81b      	bhi.n	8003954 <UART_SetConfig+0xe8>
 800391c:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <UART_SetConfig+0xb8>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003935 	.word	0x08003935
 8003928:	08003945 	.word	0x08003945
 800392c:	0800393d 	.word	0x0800393d
 8003930:	0800394d 	.word	0x0800394d
 8003934:	2301      	movs	r3, #1
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800393a:	e042      	b.n	80039c2 <UART_SetConfig+0x156>
 800393c:	2302      	movs	r3, #2
 800393e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003942:	e03e      	b.n	80039c2 <UART_SetConfig+0x156>
 8003944:	2304      	movs	r3, #4
 8003946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394a:	e03a      	b.n	80039c2 <UART_SetConfig+0x156>
 800394c:	2308      	movs	r3, #8
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003952:	e036      	b.n	80039c2 <UART_SetConfig+0x156>
 8003954:	2310      	movs	r3, #16
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395a:	e032      	b.n	80039c2 <UART_SetConfig+0x156>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a7e      	ldr	r2, [pc, #504]	; (8003b5c <UART_SetConfig+0x2f0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d12a      	bne.n	80039bc <UART_SetConfig+0x150>
 8003966:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800396a:	f7ff ff1e 	bl	80037aa <LL_RCC_GetLPUARTClockSource>
 800396e:	4603      	mov	r3, r0
 8003970:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003974:	d01a      	beq.n	80039ac <UART_SetConfig+0x140>
 8003976:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800397a:	d81b      	bhi.n	80039b4 <UART_SetConfig+0x148>
 800397c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003980:	d00c      	beq.n	800399c <UART_SetConfig+0x130>
 8003982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003986:	d815      	bhi.n	80039b4 <UART_SetConfig+0x148>
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <UART_SetConfig+0x128>
 800398c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003990:	d008      	beq.n	80039a4 <UART_SetConfig+0x138>
 8003992:	e00f      	b.n	80039b4 <UART_SetConfig+0x148>
 8003994:	2300      	movs	r3, #0
 8003996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800399a:	e012      	b.n	80039c2 <UART_SetConfig+0x156>
 800399c:	2302      	movs	r3, #2
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039a2:	e00e      	b.n	80039c2 <UART_SetConfig+0x156>
 80039a4:	2304      	movs	r3, #4
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039aa:	e00a      	b.n	80039c2 <UART_SetConfig+0x156>
 80039ac:	2308      	movs	r3, #8
 80039ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039b2:	e006      	b.n	80039c2 <UART_SetConfig+0x156>
 80039b4:	2310      	movs	r3, #16
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ba:	e002      	b.n	80039c2 <UART_SetConfig+0x156>
 80039bc:	2310      	movs	r3, #16
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a65      	ldr	r2, [pc, #404]	; (8003b5c <UART_SetConfig+0x2f0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	f040 8097 	bne.w	8003afc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d823      	bhi.n	8003a1e <UART_SetConfig+0x1b2>
 80039d6:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <UART_SetConfig+0x170>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a1f 	.word	0x08003a1f
 80039e4:	08003a09 	.word	0x08003a09
 80039e8:	08003a1f 	.word	0x08003a1f
 80039ec:	08003a0f 	.word	0x08003a0f
 80039f0:	08003a1f 	.word	0x08003a1f
 80039f4:	08003a1f 	.word	0x08003a1f
 80039f8:	08003a1f 	.word	0x08003a1f
 80039fc:	08003a17 	.word	0x08003a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a00:	f7ff f9aa 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8003a04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a06:	e010      	b.n	8003a2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a08:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <UART_SetConfig+0x2f8>)
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a0c:	e00d      	b.n	8003a2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0e:	f7ff f923 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8003a12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a14:	e009      	b.n	8003a2a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a1c:	e005      	b.n	8003a2a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 812b 	beq.w	8003c88 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	4a4c      	ldr	r2, [pc, #304]	; (8003b68 <UART_SetConfig+0x2fc>)
 8003a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d305      	bcc.n	8003a62 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d903      	bls.n	8003a6a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a68:	e10e      	b.n	8003c88 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	60fa      	str	r2, [r7, #12]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	4a3c      	ldr	r2, [pc, #240]	; (8003b68 <UART_SetConfig+0x2fc>)
 8003a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2200      	movs	r2, #0
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a8c:	f7fc fbc8 	bl	8000220 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	020b      	lsls	r3, r1, #8
 8003aa2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003aa6:	0202      	lsls	r2, r0, #8
 8003aa8:	6979      	ldr	r1, [r7, #20]
 8003aaa:	6849      	ldr	r1, [r1, #4]
 8003aac:	0849      	lsrs	r1, r1, #1
 8003aae:	2000      	movs	r0, #0
 8003ab0:	460c      	mov	r4, r1
 8003ab2:	4605      	mov	r5, r0
 8003ab4:	eb12 0804 	adds.w	r8, r2, r4
 8003ab8:	eb43 0905 	adc.w	r9, r3, r5
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	469a      	mov	sl, r3
 8003ac4:	4693      	mov	fp, r2
 8003ac6:	4652      	mov	r2, sl
 8003ac8:	465b      	mov	r3, fp
 8003aca:	4640      	mov	r0, r8
 8003acc:	4649      	mov	r1, r9
 8003ace:	f7fc fba7 	bl	8000220 <__aeabi_uldivmod>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae0:	d308      	bcc.n	8003af4 <UART_SetConfig+0x288>
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae8:	d204      	bcs.n	8003af4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a3a      	ldr	r2, [r7, #32]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	e0c9      	b.n	8003c88 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003afa:	e0c5      	b.n	8003c88 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b04:	d16d      	bne.n	8003be2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003b06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	2b07      	cmp	r3, #7
 8003b0e:	d82d      	bhi.n	8003b6c <UART_SetConfig+0x300>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <UART_SetConfig+0x2ac>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b39 	.word	0x08003b39
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003b6d 	.word	0x08003b6d
 8003b24:	08003b47 	.word	0x08003b47
 8003b28:	08003b6d 	.word	0x08003b6d
 8003b2c:	08003b6d 	.word	0x08003b6d
 8003b30:	08003b6d 	.word	0x08003b6d
 8003b34:	08003b4f 	.word	0x08003b4f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b38:	f7ff f924 	bl	8002d84 <HAL_RCC_GetPCLK2Freq>
 8003b3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b3e:	e01b      	b.n	8003b78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <UART_SetConfig+0x2f8>)
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b44:	e018      	b.n	8003b78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b46:	f7ff f887 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8003b4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003b4c:	e014      	b.n	8003b78 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003b54:	e010      	b.n	8003b78 <UART_SetConfig+0x30c>
 8003b56:	bf00      	nop
 8003b58:	cfff69f3 	.word	0xcfff69f3
 8003b5c:	40008000 	.word	0x40008000
 8003b60:	40013800 	.word	0x40013800
 8003b64:	00f42400 	.word	0x00f42400
 8003b68:	08005434 	.word	0x08005434
      default:
        pclk = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003b76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 8084 	beq.w	8003c88 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	4a4b      	ldr	r2, [pc, #300]	; (8003cb4 <UART_SetConfig+0x448>)
 8003b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b92:	005a      	lsls	r2, r3, #1
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	441a      	add	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	2b0f      	cmp	r3, #15
 8003baa:	d916      	bls.n	8003bda <UART_SetConfig+0x36e>
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb2:	d212      	bcs.n	8003bda <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f023 030f 	bic.w	r3, r3, #15
 8003bbc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	8bfb      	ldrh	r3, [r7, #30]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	8bfa      	ldrh	r2, [r7, #30]
 8003bd6:	60da      	str	r2, [r3, #12]
 8003bd8:	e056      	b.n	8003c88 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003be0:	e052      	b.n	8003c88 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003be2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003be6:	3b01      	subs	r3, #1
 8003be8:	2b07      	cmp	r3, #7
 8003bea:	d822      	bhi.n	8003c32 <UART_SetConfig+0x3c6>
 8003bec:	a201      	add	r2, pc, #4	; (adr r2, 8003bf4 <UART_SetConfig+0x388>)
 8003bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf2:	bf00      	nop
 8003bf4:	08003c15 	.word	0x08003c15
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c33 	.word	0x08003c33
 8003c00:	08003c23 	.word	0x08003c23
 8003c04:	08003c33 	.word	0x08003c33
 8003c08:	08003c33 	.word	0x08003c33
 8003c0c:	08003c33 	.word	0x08003c33
 8003c10:	08003c2b 	.word	0x08003c2b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c14:	f7ff f8b6 	bl	8002d84 <HAL_RCC_GetPCLK2Freq>
 8003c18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c1a:	e010      	b.n	8003c3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c1c:	4b26      	ldr	r3, [pc, #152]	; (8003cb8 <UART_SetConfig+0x44c>)
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c20:	e00d      	b.n	8003c3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c22:	f7ff f819 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8003c26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003c28:	e009      	b.n	8003c3e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003c30:	e005      	b.n	8003c3e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003c3c:	bf00      	nop
    }

    if (pclk != 0U)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d021      	beq.n	8003c88 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	4a1a      	ldr	r2, [pc, #104]	; (8003cb4 <UART_SetConfig+0x448>)
 8003c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	441a      	add	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	2b0f      	cmp	r3, #15
 8003c6c:	d909      	bls.n	8003c82 <UART_SetConfig+0x416>
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d205      	bcs.n	8003c82 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60da      	str	r2, [r3, #12]
 8003c80:	e002      	b.n	8003c88 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003ca4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3730      	adds	r7, #48	; 0x30
 8003cac:	46bd      	mov	sp, r7
 8003cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cb2:	bf00      	nop
 8003cb4:	08005434 	.word	0x08005434
 8003cb8:	00f42400 	.word	0x00f42400

08003cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	f003 0310 	and.w	r3, r3, #16
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01a      	beq.n	8003dd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dba:	d10a      	bne.n	8003dd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	605a      	str	r2, [r3, #4]
  }
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e10:	f7fd f93a 	bl	8001088 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d10e      	bne.n	8003e42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f832 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e028      	b.n	8003e94 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d10e      	bne.n	8003e6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f81c 	bl	8003e9c <UART_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e012      	b.n	8003e94 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b09c      	sub	sp, #112	; 0x70
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	603b      	str	r3, [r7, #0]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eac:	e0a9      	b.n	8004002 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb4:	f000 80a5 	beq.w	8004002 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb8:	f7fd f8e6 	bl	8001088 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d302      	bcc.n	8003ece <UART_WaitOnFlagUntilTimeout+0x32>
 8003ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d140      	bne.n	8003f50 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed6:	e853 3f00 	ldrex	r3, [r3]
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ede:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ee2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eee:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ef2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e6      	bne.n	8003ece <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3308      	adds	r3, #8
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0a:	e853 3f00 	ldrex	r3, [r3]
 8003f0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	663b      	str	r3, [r7, #96]	; 0x60
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f20:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f28:	e841 2300 	strex	r3, r2, [r1]
 8003f2c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1e5      	bne.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e069      	b.n	8004024 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d051      	beq.n	8004002 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f6c:	d149      	bne.n	8004002 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f76:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f80:	e853 3f00 	ldrex	r3, [r3]
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34
 8003f98:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e6      	bne.n	8003f78 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3308      	adds	r3, #8
 8003fb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fca:	623a      	str	r2, [r7, #32]
 8003fcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	69f9      	ldr	r1, [r7, #28]
 8003fd0:	6a3a      	ldr	r2, [r7, #32]
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e5      	bne.n	8003faa <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e010      	b.n	8004024 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4013      	ands	r3, r2
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	bf0c      	ite	eq
 8004012:	2301      	moveq	r3, #1
 8004014:	2300      	movne	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	429a      	cmp	r2, r3
 800401e:	f43f af46 	beq.w	8003eae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3770      	adds	r7, #112	; 0x70
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_UARTEx_DisableFifoMode+0x16>
 800403e:	2302      	movs	r3, #2
 8004040:	e027      	b.n	8004092 <HAL_UARTEx_DisableFifoMode+0x66>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2224      	movs	r2, #36	; 0x24
 800404e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004070:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
 80040a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d101      	bne.n	80040b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040b2:	2302      	movs	r3, #2
 80040b4:	e02d      	b.n	8004112 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2224      	movs	r2, #36	; 0x24
 80040c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f850 	bl	8004198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800412e:	2302      	movs	r3, #2
 8004130:	e02d      	b.n	800418e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2224      	movs	r2, #36	; 0x24
 800413e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 0201 	bic.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f812 	bl	8004198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d108      	bne.n	80041ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041b8:	e031      	b.n	800421e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041ba:	2308      	movs	r3, #8
 80041bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041be:	2308      	movs	r3, #8
 80041c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	0e5b      	lsrs	r3, r3, #25
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	0f5b      	lsrs	r3, r3, #29
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041e2:	7bbb      	ldrb	r3, [r7, #14]
 80041e4:	7b3a      	ldrb	r2, [r7, #12]
 80041e6:	4911      	ldr	r1, [pc, #68]	; (800422c <UARTEx_SetNbDataToProcess+0x94>)
 80041e8:	5c8a      	ldrb	r2, [r1, r2]
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80041ee:	7b3a      	ldrb	r2, [r7, #12]
 80041f0:	490f      	ldr	r1, [pc, #60]	; (8004230 <UARTEx_SetNbDataToProcess+0x98>)
 80041f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	7b7a      	ldrb	r2, [r7, #13]
 8004204:	4909      	ldr	r1, [pc, #36]	; (800422c <UARTEx_SetNbDataToProcess+0x94>)
 8004206:	5c8a      	ldrb	r2, [r1, r2]
 8004208:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800420c:	7b7a      	ldrb	r2, [r7, #13]
 800420e:	4908      	ldr	r1, [pc, #32]	; (8004230 <UARTEx_SetNbDataToProcess+0x98>)
 8004210:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004212:	fb93 f3f2 	sdiv	r3, r3, r2
 8004216:	b29a      	uxth	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	0800544c 	.word	0x0800544c
 8004230:	08005454 	.word	0x08005454

08004234 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800423c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004240:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	b29b      	uxth	r3, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	b29b      	uxth	r3, r3
 8004252:	4013      	ands	r3, r2
 8004254:	b29a      	uxth	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800426a:	b084      	sub	sp, #16
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	f107 0014 	add.w	r0, r7, #20
 8004278:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	b004      	add	sp, #16
 80042aa:	4770      	bx	lr

080042ac <__errno>:
 80042ac:	4b01      	ldr	r3, [pc, #4]	; (80042b4 <__errno+0x8>)
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000014 	.word	0x20000014

080042b8 <__libc_init_array>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	4d0d      	ldr	r5, [pc, #52]	; (80042f0 <__libc_init_array+0x38>)
 80042bc:	4c0d      	ldr	r4, [pc, #52]	; (80042f4 <__libc_init_array+0x3c>)
 80042be:	1b64      	subs	r4, r4, r5
 80042c0:	10a4      	asrs	r4, r4, #2
 80042c2:	2600      	movs	r6, #0
 80042c4:	42a6      	cmp	r6, r4
 80042c6:	d109      	bne.n	80042dc <__libc_init_array+0x24>
 80042c8:	4d0b      	ldr	r5, [pc, #44]	; (80042f8 <__libc_init_array+0x40>)
 80042ca:	4c0c      	ldr	r4, [pc, #48]	; (80042fc <__libc_init_array+0x44>)
 80042cc:	f001 f824 	bl	8005318 <_init>
 80042d0:	1b64      	subs	r4, r4, r5
 80042d2:	10a4      	asrs	r4, r4, #2
 80042d4:	2600      	movs	r6, #0
 80042d6:	42a6      	cmp	r6, r4
 80042d8:	d105      	bne.n	80042e6 <__libc_init_array+0x2e>
 80042da:	bd70      	pop	{r4, r5, r6, pc}
 80042dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e0:	4798      	blx	r3
 80042e2:	3601      	adds	r6, #1
 80042e4:	e7ee      	b.n	80042c4 <__libc_init_array+0xc>
 80042e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ea:	4798      	blx	r3
 80042ec:	3601      	adds	r6, #1
 80042ee:	e7f2      	b.n	80042d6 <__libc_init_array+0x1e>
 80042f0:	080054fc 	.word	0x080054fc
 80042f4:	080054fc 	.word	0x080054fc
 80042f8:	080054fc 	.word	0x080054fc
 80042fc:	08005500 	.word	0x08005500

08004300 <memset>:
 8004300:	4402      	add	r2, r0
 8004302:	4603      	mov	r3, r0
 8004304:	4293      	cmp	r3, r2
 8004306:	d100      	bne.n	800430a <memset+0xa>
 8004308:	4770      	bx	lr
 800430a:	f803 1b01 	strb.w	r1, [r3], #1
 800430e:	e7f9      	b.n	8004304 <memset+0x4>

08004310 <iprintf>:
 8004310:	b40f      	push	{r0, r1, r2, r3}
 8004312:	4b0a      	ldr	r3, [pc, #40]	; (800433c <iprintf+0x2c>)
 8004314:	b513      	push	{r0, r1, r4, lr}
 8004316:	681c      	ldr	r4, [r3, #0]
 8004318:	b124      	cbz	r4, 8004324 <iprintf+0x14>
 800431a:	69a3      	ldr	r3, [r4, #24]
 800431c:	b913      	cbnz	r3, 8004324 <iprintf+0x14>
 800431e:	4620      	mov	r0, r4
 8004320:	f000 fa5e 	bl	80047e0 <__sinit>
 8004324:	ab05      	add	r3, sp, #20
 8004326:	9a04      	ldr	r2, [sp, #16]
 8004328:	68a1      	ldr	r1, [r4, #8]
 800432a:	9301      	str	r3, [sp, #4]
 800432c:	4620      	mov	r0, r4
 800432e:	f000 fc67 	bl	8004c00 <_vfiprintf_r>
 8004332:	b002      	add	sp, #8
 8004334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004338:	b004      	add	sp, #16
 800433a:	4770      	bx	lr
 800433c:	20000014 	.word	0x20000014

08004340 <_puts_r>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	460e      	mov	r6, r1
 8004344:	4605      	mov	r5, r0
 8004346:	b118      	cbz	r0, 8004350 <_puts_r+0x10>
 8004348:	6983      	ldr	r3, [r0, #24]
 800434a:	b90b      	cbnz	r3, 8004350 <_puts_r+0x10>
 800434c:	f000 fa48 	bl	80047e0 <__sinit>
 8004350:	69ab      	ldr	r3, [r5, #24]
 8004352:	68ac      	ldr	r4, [r5, #8]
 8004354:	b913      	cbnz	r3, 800435c <_puts_r+0x1c>
 8004356:	4628      	mov	r0, r5
 8004358:	f000 fa42 	bl	80047e0 <__sinit>
 800435c:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <_puts_r+0xd0>)
 800435e:	429c      	cmp	r4, r3
 8004360:	d120      	bne.n	80043a4 <_puts_r+0x64>
 8004362:	686c      	ldr	r4, [r5, #4]
 8004364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004366:	07db      	lsls	r3, r3, #31
 8004368:	d405      	bmi.n	8004376 <_puts_r+0x36>
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	0598      	lsls	r0, r3, #22
 800436e:	d402      	bmi.n	8004376 <_puts_r+0x36>
 8004370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004372:	f000 fad3 	bl	800491c <__retarget_lock_acquire_recursive>
 8004376:	89a3      	ldrh	r3, [r4, #12]
 8004378:	0719      	lsls	r1, r3, #28
 800437a:	d51d      	bpl.n	80043b8 <_puts_r+0x78>
 800437c:	6923      	ldr	r3, [r4, #16]
 800437e:	b1db      	cbz	r3, 80043b8 <_puts_r+0x78>
 8004380:	3e01      	subs	r6, #1
 8004382:	68a3      	ldr	r3, [r4, #8]
 8004384:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004388:	3b01      	subs	r3, #1
 800438a:	60a3      	str	r3, [r4, #8]
 800438c:	bb39      	cbnz	r1, 80043de <_puts_r+0x9e>
 800438e:	2b00      	cmp	r3, #0
 8004390:	da38      	bge.n	8004404 <_puts_r+0xc4>
 8004392:	4622      	mov	r2, r4
 8004394:	210a      	movs	r1, #10
 8004396:	4628      	mov	r0, r5
 8004398:	f000 f848 	bl	800442c <__swbuf_r>
 800439c:	3001      	adds	r0, #1
 800439e:	d011      	beq.n	80043c4 <_puts_r+0x84>
 80043a0:	250a      	movs	r5, #10
 80043a2:	e011      	b.n	80043c8 <_puts_r+0x88>
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <_puts_r+0xd4>)
 80043a6:	429c      	cmp	r4, r3
 80043a8:	d101      	bne.n	80043ae <_puts_r+0x6e>
 80043aa:	68ac      	ldr	r4, [r5, #8]
 80043ac:	e7da      	b.n	8004364 <_puts_r+0x24>
 80043ae:	4b1a      	ldr	r3, [pc, #104]	; (8004418 <_puts_r+0xd8>)
 80043b0:	429c      	cmp	r4, r3
 80043b2:	bf08      	it	eq
 80043b4:	68ec      	ldreq	r4, [r5, #12]
 80043b6:	e7d5      	b.n	8004364 <_puts_r+0x24>
 80043b8:	4621      	mov	r1, r4
 80043ba:	4628      	mov	r0, r5
 80043bc:	f000 f888 	bl	80044d0 <__swsetup_r>
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d0dd      	beq.n	8004380 <_puts_r+0x40>
 80043c4:	f04f 35ff 	mov.w	r5, #4294967295
 80043c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043ca:	07da      	lsls	r2, r3, #31
 80043cc:	d405      	bmi.n	80043da <_puts_r+0x9a>
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	059b      	lsls	r3, r3, #22
 80043d2:	d402      	bmi.n	80043da <_puts_r+0x9a>
 80043d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043d6:	f000 faa2 	bl	800491e <__retarget_lock_release_recursive>
 80043da:	4628      	mov	r0, r5
 80043dc:	bd70      	pop	{r4, r5, r6, pc}
 80043de:	2b00      	cmp	r3, #0
 80043e0:	da04      	bge.n	80043ec <_puts_r+0xac>
 80043e2:	69a2      	ldr	r2, [r4, #24]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	dc06      	bgt.n	80043f6 <_puts_r+0xb6>
 80043e8:	290a      	cmp	r1, #10
 80043ea:	d004      	beq.n	80043f6 <_puts_r+0xb6>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	6022      	str	r2, [r4, #0]
 80043f2:	7019      	strb	r1, [r3, #0]
 80043f4:	e7c5      	b.n	8004382 <_puts_r+0x42>
 80043f6:	4622      	mov	r2, r4
 80043f8:	4628      	mov	r0, r5
 80043fa:	f000 f817 	bl	800442c <__swbuf_r>
 80043fe:	3001      	adds	r0, #1
 8004400:	d1bf      	bne.n	8004382 <_puts_r+0x42>
 8004402:	e7df      	b.n	80043c4 <_puts_r+0x84>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	250a      	movs	r5, #10
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	6022      	str	r2, [r4, #0]
 800440c:	701d      	strb	r5, [r3, #0]
 800440e:	e7db      	b.n	80043c8 <_puts_r+0x88>
 8004410:	08005480 	.word	0x08005480
 8004414:	080054a0 	.word	0x080054a0
 8004418:	08005460 	.word	0x08005460

0800441c <puts>:
 800441c:	4b02      	ldr	r3, [pc, #8]	; (8004428 <puts+0xc>)
 800441e:	4601      	mov	r1, r0
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	f7ff bf8d 	b.w	8004340 <_puts_r>
 8004426:	bf00      	nop
 8004428:	20000014 	.word	0x20000014

0800442c <__swbuf_r>:
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800442e:	460e      	mov	r6, r1
 8004430:	4614      	mov	r4, r2
 8004432:	4605      	mov	r5, r0
 8004434:	b118      	cbz	r0, 800443e <__swbuf_r+0x12>
 8004436:	6983      	ldr	r3, [r0, #24]
 8004438:	b90b      	cbnz	r3, 800443e <__swbuf_r+0x12>
 800443a:	f000 f9d1 	bl	80047e0 <__sinit>
 800443e:	4b21      	ldr	r3, [pc, #132]	; (80044c4 <__swbuf_r+0x98>)
 8004440:	429c      	cmp	r4, r3
 8004442:	d12b      	bne.n	800449c <__swbuf_r+0x70>
 8004444:	686c      	ldr	r4, [r5, #4]
 8004446:	69a3      	ldr	r3, [r4, #24]
 8004448:	60a3      	str	r3, [r4, #8]
 800444a:	89a3      	ldrh	r3, [r4, #12]
 800444c:	071a      	lsls	r2, r3, #28
 800444e:	d52f      	bpl.n	80044b0 <__swbuf_r+0x84>
 8004450:	6923      	ldr	r3, [r4, #16]
 8004452:	b36b      	cbz	r3, 80044b0 <__swbuf_r+0x84>
 8004454:	6923      	ldr	r3, [r4, #16]
 8004456:	6820      	ldr	r0, [r4, #0]
 8004458:	1ac0      	subs	r0, r0, r3
 800445a:	6963      	ldr	r3, [r4, #20]
 800445c:	b2f6      	uxtb	r6, r6
 800445e:	4283      	cmp	r3, r0
 8004460:	4637      	mov	r7, r6
 8004462:	dc04      	bgt.n	800446e <__swbuf_r+0x42>
 8004464:	4621      	mov	r1, r4
 8004466:	4628      	mov	r0, r5
 8004468:	f000 f926 	bl	80046b8 <_fflush_r>
 800446c:	bb30      	cbnz	r0, 80044bc <__swbuf_r+0x90>
 800446e:	68a3      	ldr	r3, [r4, #8]
 8004470:	3b01      	subs	r3, #1
 8004472:	60a3      	str	r3, [r4, #8]
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	6022      	str	r2, [r4, #0]
 800447a:	701e      	strb	r6, [r3, #0]
 800447c:	6963      	ldr	r3, [r4, #20]
 800447e:	3001      	adds	r0, #1
 8004480:	4283      	cmp	r3, r0
 8004482:	d004      	beq.n	800448e <__swbuf_r+0x62>
 8004484:	89a3      	ldrh	r3, [r4, #12]
 8004486:	07db      	lsls	r3, r3, #31
 8004488:	d506      	bpl.n	8004498 <__swbuf_r+0x6c>
 800448a:	2e0a      	cmp	r6, #10
 800448c:	d104      	bne.n	8004498 <__swbuf_r+0x6c>
 800448e:	4621      	mov	r1, r4
 8004490:	4628      	mov	r0, r5
 8004492:	f000 f911 	bl	80046b8 <_fflush_r>
 8004496:	b988      	cbnz	r0, 80044bc <__swbuf_r+0x90>
 8004498:	4638      	mov	r0, r7
 800449a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800449c:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <__swbuf_r+0x9c>)
 800449e:	429c      	cmp	r4, r3
 80044a0:	d101      	bne.n	80044a6 <__swbuf_r+0x7a>
 80044a2:	68ac      	ldr	r4, [r5, #8]
 80044a4:	e7cf      	b.n	8004446 <__swbuf_r+0x1a>
 80044a6:	4b09      	ldr	r3, [pc, #36]	; (80044cc <__swbuf_r+0xa0>)
 80044a8:	429c      	cmp	r4, r3
 80044aa:	bf08      	it	eq
 80044ac:	68ec      	ldreq	r4, [r5, #12]
 80044ae:	e7ca      	b.n	8004446 <__swbuf_r+0x1a>
 80044b0:	4621      	mov	r1, r4
 80044b2:	4628      	mov	r0, r5
 80044b4:	f000 f80c 	bl	80044d0 <__swsetup_r>
 80044b8:	2800      	cmp	r0, #0
 80044ba:	d0cb      	beq.n	8004454 <__swbuf_r+0x28>
 80044bc:	f04f 37ff 	mov.w	r7, #4294967295
 80044c0:	e7ea      	b.n	8004498 <__swbuf_r+0x6c>
 80044c2:	bf00      	nop
 80044c4:	08005480 	.word	0x08005480
 80044c8:	080054a0 	.word	0x080054a0
 80044cc:	08005460 	.word	0x08005460

080044d0 <__swsetup_r>:
 80044d0:	4b32      	ldr	r3, [pc, #200]	; (800459c <__swsetup_r+0xcc>)
 80044d2:	b570      	push	{r4, r5, r6, lr}
 80044d4:	681d      	ldr	r5, [r3, #0]
 80044d6:	4606      	mov	r6, r0
 80044d8:	460c      	mov	r4, r1
 80044da:	b125      	cbz	r5, 80044e6 <__swsetup_r+0x16>
 80044dc:	69ab      	ldr	r3, [r5, #24]
 80044de:	b913      	cbnz	r3, 80044e6 <__swsetup_r+0x16>
 80044e0:	4628      	mov	r0, r5
 80044e2:	f000 f97d 	bl	80047e0 <__sinit>
 80044e6:	4b2e      	ldr	r3, [pc, #184]	; (80045a0 <__swsetup_r+0xd0>)
 80044e8:	429c      	cmp	r4, r3
 80044ea:	d10f      	bne.n	800450c <__swsetup_r+0x3c>
 80044ec:	686c      	ldr	r4, [r5, #4]
 80044ee:	89a3      	ldrh	r3, [r4, #12]
 80044f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044f4:	0719      	lsls	r1, r3, #28
 80044f6:	d42c      	bmi.n	8004552 <__swsetup_r+0x82>
 80044f8:	06dd      	lsls	r5, r3, #27
 80044fa:	d411      	bmi.n	8004520 <__swsetup_r+0x50>
 80044fc:	2309      	movs	r3, #9
 80044fe:	6033      	str	r3, [r6, #0]
 8004500:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004504:	81a3      	strh	r3, [r4, #12]
 8004506:	f04f 30ff 	mov.w	r0, #4294967295
 800450a:	e03e      	b.n	800458a <__swsetup_r+0xba>
 800450c:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <__swsetup_r+0xd4>)
 800450e:	429c      	cmp	r4, r3
 8004510:	d101      	bne.n	8004516 <__swsetup_r+0x46>
 8004512:	68ac      	ldr	r4, [r5, #8]
 8004514:	e7eb      	b.n	80044ee <__swsetup_r+0x1e>
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <__swsetup_r+0xd8>)
 8004518:	429c      	cmp	r4, r3
 800451a:	bf08      	it	eq
 800451c:	68ec      	ldreq	r4, [r5, #12]
 800451e:	e7e6      	b.n	80044ee <__swsetup_r+0x1e>
 8004520:	0758      	lsls	r0, r3, #29
 8004522:	d512      	bpl.n	800454a <__swsetup_r+0x7a>
 8004524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004526:	b141      	cbz	r1, 800453a <__swsetup_r+0x6a>
 8004528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800452c:	4299      	cmp	r1, r3
 800452e:	d002      	beq.n	8004536 <__swsetup_r+0x66>
 8004530:	4630      	mov	r0, r6
 8004532:	f000 fa5b 	bl	80049ec <_free_r>
 8004536:	2300      	movs	r3, #0
 8004538:	6363      	str	r3, [r4, #52]	; 0x34
 800453a:	89a3      	ldrh	r3, [r4, #12]
 800453c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004540:	81a3      	strh	r3, [r4, #12]
 8004542:	2300      	movs	r3, #0
 8004544:	6063      	str	r3, [r4, #4]
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	6023      	str	r3, [r4, #0]
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	f043 0308 	orr.w	r3, r3, #8
 8004550:	81a3      	strh	r3, [r4, #12]
 8004552:	6923      	ldr	r3, [r4, #16]
 8004554:	b94b      	cbnz	r3, 800456a <__swsetup_r+0x9a>
 8004556:	89a3      	ldrh	r3, [r4, #12]
 8004558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800455c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004560:	d003      	beq.n	800456a <__swsetup_r+0x9a>
 8004562:	4621      	mov	r1, r4
 8004564:	4630      	mov	r0, r6
 8004566:	f000 fa01 	bl	800496c <__smakebuf_r>
 800456a:	89a0      	ldrh	r0, [r4, #12]
 800456c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004570:	f010 0301 	ands.w	r3, r0, #1
 8004574:	d00a      	beq.n	800458c <__swsetup_r+0xbc>
 8004576:	2300      	movs	r3, #0
 8004578:	60a3      	str	r3, [r4, #8]
 800457a:	6963      	ldr	r3, [r4, #20]
 800457c:	425b      	negs	r3, r3
 800457e:	61a3      	str	r3, [r4, #24]
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	b943      	cbnz	r3, 8004596 <__swsetup_r+0xc6>
 8004584:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004588:	d1ba      	bne.n	8004500 <__swsetup_r+0x30>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	0781      	lsls	r1, r0, #30
 800458e:	bf58      	it	pl
 8004590:	6963      	ldrpl	r3, [r4, #20]
 8004592:	60a3      	str	r3, [r4, #8]
 8004594:	e7f4      	b.n	8004580 <__swsetup_r+0xb0>
 8004596:	2000      	movs	r0, #0
 8004598:	e7f7      	b.n	800458a <__swsetup_r+0xba>
 800459a:	bf00      	nop
 800459c:	20000014 	.word	0x20000014
 80045a0:	08005480 	.word	0x08005480
 80045a4:	080054a0 	.word	0x080054a0
 80045a8:	08005460 	.word	0x08005460

080045ac <__sflush_r>:
 80045ac:	898a      	ldrh	r2, [r1, #12]
 80045ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b2:	4605      	mov	r5, r0
 80045b4:	0710      	lsls	r0, r2, #28
 80045b6:	460c      	mov	r4, r1
 80045b8:	d458      	bmi.n	800466c <__sflush_r+0xc0>
 80045ba:	684b      	ldr	r3, [r1, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	dc05      	bgt.n	80045cc <__sflush_r+0x20>
 80045c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	dc02      	bgt.n	80045cc <__sflush_r+0x20>
 80045c6:	2000      	movs	r0, #0
 80045c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045ce:	2e00      	cmp	r6, #0
 80045d0:	d0f9      	beq.n	80045c6 <__sflush_r+0x1a>
 80045d2:	2300      	movs	r3, #0
 80045d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045d8:	682f      	ldr	r7, [r5, #0]
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	d032      	beq.n	8004644 <__sflush_r+0x98>
 80045de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	075a      	lsls	r2, r3, #29
 80045e4:	d505      	bpl.n	80045f2 <__sflush_r+0x46>
 80045e6:	6863      	ldr	r3, [r4, #4]
 80045e8:	1ac0      	subs	r0, r0, r3
 80045ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045ec:	b10b      	cbz	r3, 80045f2 <__sflush_r+0x46>
 80045ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045f0:	1ac0      	subs	r0, r0, r3
 80045f2:	2300      	movs	r3, #0
 80045f4:	4602      	mov	r2, r0
 80045f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045f8:	6a21      	ldr	r1, [r4, #32]
 80045fa:	4628      	mov	r0, r5
 80045fc:	47b0      	blx	r6
 80045fe:	1c43      	adds	r3, r0, #1
 8004600:	89a3      	ldrh	r3, [r4, #12]
 8004602:	d106      	bne.n	8004612 <__sflush_r+0x66>
 8004604:	6829      	ldr	r1, [r5, #0]
 8004606:	291d      	cmp	r1, #29
 8004608:	d82c      	bhi.n	8004664 <__sflush_r+0xb8>
 800460a:	4a2a      	ldr	r2, [pc, #168]	; (80046b4 <__sflush_r+0x108>)
 800460c:	40ca      	lsrs	r2, r1
 800460e:	07d6      	lsls	r6, r2, #31
 8004610:	d528      	bpl.n	8004664 <__sflush_r+0xb8>
 8004612:	2200      	movs	r2, #0
 8004614:	6062      	str	r2, [r4, #4]
 8004616:	04d9      	lsls	r1, r3, #19
 8004618:	6922      	ldr	r2, [r4, #16]
 800461a:	6022      	str	r2, [r4, #0]
 800461c:	d504      	bpl.n	8004628 <__sflush_r+0x7c>
 800461e:	1c42      	adds	r2, r0, #1
 8004620:	d101      	bne.n	8004626 <__sflush_r+0x7a>
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	b903      	cbnz	r3, 8004628 <__sflush_r+0x7c>
 8004626:	6560      	str	r0, [r4, #84]	; 0x54
 8004628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800462a:	602f      	str	r7, [r5, #0]
 800462c:	2900      	cmp	r1, #0
 800462e:	d0ca      	beq.n	80045c6 <__sflush_r+0x1a>
 8004630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004634:	4299      	cmp	r1, r3
 8004636:	d002      	beq.n	800463e <__sflush_r+0x92>
 8004638:	4628      	mov	r0, r5
 800463a:	f000 f9d7 	bl	80049ec <_free_r>
 800463e:	2000      	movs	r0, #0
 8004640:	6360      	str	r0, [r4, #52]	; 0x34
 8004642:	e7c1      	b.n	80045c8 <__sflush_r+0x1c>
 8004644:	6a21      	ldr	r1, [r4, #32]
 8004646:	2301      	movs	r3, #1
 8004648:	4628      	mov	r0, r5
 800464a:	47b0      	blx	r6
 800464c:	1c41      	adds	r1, r0, #1
 800464e:	d1c7      	bne.n	80045e0 <__sflush_r+0x34>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0c4      	beq.n	80045e0 <__sflush_r+0x34>
 8004656:	2b1d      	cmp	r3, #29
 8004658:	d001      	beq.n	800465e <__sflush_r+0xb2>
 800465a:	2b16      	cmp	r3, #22
 800465c:	d101      	bne.n	8004662 <__sflush_r+0xb6>
 800465e:	602f      	str	r7, [r5, #0]
 8004660:	e7b1      	b.n	80045c6 <__sflush_r+0x1a>
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004668:	81a3      	strh	r3, [r4, #12]
 800466a:	e7ad      	b.n	80045c8 <__sflush_r+0x1c>
 800466c:	690f      	ldr	r7, [r1, #16]
 800466e:	2f00      	cmp	r7, #0
 8004670:	d0a9      	beq.n	80045c6 <__sflush_r+0x1a>
 8004672:	0793      	lsls	r3, r2, #30
 8004674:	680e      	ldr	r6, [r1, #0]
 8004676:	bf08      	it	eq
 8004678:	694b      	ldreq	r3, [r1, #20]
 800467a:	600f      	str	r7, [r1, #0]
 800467c:	bf18      	it	ne
 800467e:	2300      	movne	r3, #0
 8004680:	eba6 0807 	sub.w	r8, r6, r7
 8004684:	608b      	str	r3, [r1, #8]
 8004686:	f1b8 0f00 	cmp.w	r8, #0
 800468a:	dd9c      	ble.n	80045c6 <__sflush_r+0x1a>
 800468c:	6a21      	ldr	r1, [r4, #32]
 800468e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004690:	4643      	mov	r3, r8
 8004692:	463a      	mov	r2, r7
 8004694:	4628      	mov	r0, r5
 8004696:	47b0      	blx	r6
 8004698:	2800      	cmp	r0, #0
 800469a:	dc06      	bgt.n	80046aa <__sflush_r+0xfe>
 800469c:	89a3      	ldrh	r3, [r4, #12]
 800469e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	f04f 30ff 	mov.w	r0, #4294967295
 80046a8:	e78e      	b.n	80045c8 <__sflush_r+0x1c>
 80046aa:	4407      	add	r7, r0
 80046ac:	eba8 0800 	sub.w	r8, r8, r0
 80046b0:	e7e9      	b.n	8004686 <__sflush_r+0xda>
 80046b2:	bf00      	nop
 80046b4:	20400001 	.word	0x20400001

080046b8 <_fflush_r>:
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	690b      	ldr	r3, [r1, #16]
 80046bc:	4605      	mov	r5, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	b913      	cbnz	r3, 80046c8 <_fflush_r+0x10>
 80046c2:	2500      	movs	r5, #0
 80046c4:	4628      	mov	r0, r5
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	b118      	cbz	r0, 80046d2 <_fflush_r+0x1a>
 80046ca:	6983      	ldr	r3, [r0, #24]
 80046cc:	b90b      	cbnz	r3, 80046d2 <_fflush_r+0x1a>
 80046ce:	f000 f887 	bl	80047e0 <__sinit>
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <_fflush_r+0x6c>)
 80046d4:	429c      	cmp	r4, r3
 80046d6:	d11b      	bne.n	8004710 <_fflush_r+0x58>
 80046d8:	686c      	ldr	r4, [r5, #4]
 80046da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0ef      	beq.n	80046c2 <_fflush_r+0xa>
 80046e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046e4:	07d0      	lsls	r0, r2, #31
 80046e6:	d404      	bmi.n	80046f2 <_fflush_r+0x3a>
 80046e8:	0599      	lsls	r1, r3, #22
 80046ea:	d402      	bmi.n	80046f2 <_fflush_r+0x3a>
 80046ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046ee:	f000 f915 	bl	800491c <__retarget_lock_acquire_recursive>
 80046f2:	4628      	mov	r0, r5
 80046f4:	4621      	mov	r1, r4
 80046f6:	f7ff ff59 	bl	80045ac <__sflush_r>
 80046fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046fc:	07da      	lsls	r2, r3, #31
 80046fe:	4605      	mov	r5, r0
 8004700:	d4e0      	bmi.n	80046c4 <_fflush_r+0xc>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	059b      	lsls	r3, r3, #22
 8004706:	d4dd      	bmi.n	80046c4 <_fflush_r+0xc>
 8004708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800470a:	f000 f908 	bl	800491e <__retarget_lock_release_recursive>
 800470e:	e7d9      	b.n	80046c4 <_fflush_r+0xc>
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <_fflush_r+0x70>)
 8004712:	429c      	cmp	r4, r3
 8004714:	d101      	bne.n	800471a <_fflush_r+0x62>
 8004716:	68ac      	ldr	r4, [r5, #8]
 8004718:	e7df      	b.n	80046da <_fflush_r+0x22>
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <_fflush_r+0x74>)
 800471c:	429c      	cmp	r4, r3
 800471e:	bf08      	it	eq
 8004720:	68ec      	ldreq	r4, [r5, #12]
 8004722:	e7da      	b.n	80046da <_fflush_r+0x22>
 8004724:	08005480 	.word	0x08005480
 8004728:	080054a0 	.word	0x080054a0
 800472c:	08005460 	.word	0x08005460

08004730 <std>:
 8004730:	2300      	movs	r3, #0
 8004732:	b510      	push	{r4, lr}
 8004734:	4604      	mov	r4, r0
 8004736:	e9c0 3300 	strd	r3, r3, [r0]
 800473a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800473e:	6083      	str	r3, [r0, #8]
 8004740:	8181      	strh	r1, [r0, #12]
 8004742:	6643      	str	r3, [r0, #100]	; 0x64
 8004744:	81c2      	strh	r2, [r0, #14]
 8004746:	6183      	str	r3, [r0, #24]
 8004748:	4619      	mov	r1, r3
 800474a:	2208      	movs	r2, #8
 800474c:	305c      	adds	r0, #92	; 0x5c
 800474e:	f7ff fdd7 	bl	8004300 <memset>
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <std+0x38>)
 8004754:	6263      	str	r3, [r4, #36]	; 0x24
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <std+0x3c>)
 8004758:	62a3      	str	r3, [r4, #40]	; 0x28
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <std+0x40>)
 800475c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <std+0x44>)
 8004760:	6224      	str	r4, [r4, #32]
 8004762:	6323      	str	r3, [r4, #48]	; 0x30
 8004764:	bd10      	pop	{r4, pc}
 8004766:	bf00      	nop
 8004768:	080051a9 	.word	0x080051a9
 800476c:	080051cb 	.word	0x080051cb
 8004770:	08005203 	.word	0x08005203
 8004774:	08005227 	.word	0x08005227

08004778 <_cleanup_r>:
 8004778:	4901      	ldr	r1, [pc, #4]	; (8004780 <_cleanup_r+0x8>)
 800477a:	f000 b8af 	b.w	80048dc <_fwalk_reent>
 800477e:	bf00      	nop
 8004780:	080046b9 	.word	0x080046b9

08004784 <__sfmoreglue>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	2268      	movs	r2, #104	; 0x68
 8004788:	1e4d      	subs	r5, r1, #1
 800478a:	4355      	muls	r5, r2
 800478c:	460e      	mov	r6, r1
 800478e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004792:	f000 f997 	bl	8004ac4 <_malloc_r>
 8004796:	4604      	mov	r4, r0
 8004798:	b140      	cbz	r0, 80047ac <__sfmoreglue+0x28>
 800479a:	2100      	movs	r1, #0
 800479c:	e9c0 1600 	strd	r1, r6, [r0]
 80047a0:	300c      	adds	r0, #12
 80047a2:	60a0      	str	r0, [r4, #8]
 80047a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047a8:	f7ff fdaa 	bl	8004300 <memset>
 80047ac:	4620      	mov	r0, r4
 80047ae:	bd70      	pop	{r4, r5, r6, pc}

080047b0 <__sfp_lock_acquire>:
 80047b0:	4801      	ldr	r0, [pc, #4]	; (80047b8 <__sfp_lock_acquire+0x8>)
 80047b2:	f000 b8b3 	b.w	800491c <__retarget_lock_acquire_recursive>
 80047b6:	bf00      	nop
 80047b8:	200004dd 	.word	0x200004dd

080047bc <__sfp_lock_release>:
 80047bc:	4801      	ldr	r0, [pc, #4]	; (80047c4 <__sfp_lock_release+0x8>)
 80047be:	f000 b8ae 	b.w	800491e <__retarget_lock_release_recursive>
 80047c2:	bf00      	nop
 80047c4:	200004dd 	.word	0x200004dd

080047c8 <__sinit_lock_acquire>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__sinit_lock_acquire+0x8>)
 80047ca:	f000 b8a7 	b.w	800491c <__retarget_lock_acquire_recursive>
 80047ce:	bf00      	nop
 80047d0:	200004de 	.word	0x200004de

080047d4 <__sinit_lock_release>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__sinit_lock_release+0x8>)
 80047d6:	f000 b8a2 	b.w	800491e <__retarget_lock_release_recursive>
 80047da:	bf00      	nop
 80047dc:	200004de 	.word	0x200004de

080047e0 <__sinit>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4604      	mov	r4, r0
 80047e4:	f7ff fff0 	bl	80047c8 <__sinit_lock_acquire>
 80047e8:	69a3      	ldr	r3, [r4, #24]
 80047ea:	b11b      	cbz	r3, 80047f4 <__sinit+0x14>
 80047ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f0:	f7ff bff0 	b.w	80047d4 <__sinit_lock_release>
 80047f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80047f8:	6523      	str	r3, [r4, #80]	; 0x50
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <__sinit+0x68>)
 80047fc:	4a13      	ldr	r2, [pc, #76]	; (800484c <__sinit+0x6c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	62a2      	str	r2, [r4, #40]	; 0x28
 8004802:	42a3      	cmp	r3, r4
 8004804:	bf04      	itt	eq
 8004806:	2301      	moveq	r3, #1
 8004808:	61a3      	streq	r3, [r4, #24]
 800480a:	4620      	mov	r0, r4
 800480c:	f000 f820 	bl	8004850 <__sfp>
 8004810:	6060      	str	r0, [r4, #4]
 8004812:	4620      	mov	r0, r4
 8004814:	f000 f81c 	bl	8004850 <__sfp>
 8004818:	60a0      	str	r0, [r4, #8]
 800481a:	4620      	mov	r0, r4
 800481c:	f000 f818 	bl	8004850 <__sfp>
 8004820:	2200      	movs	r2, #0
 8004822:	60e0      	str	r0, [r4, #12]
 8004824:	2104      	movs	r1, #4
 8004826:	6860      	ldr	r0, [r4, #4]
 8004828:	f7ff ff82 	bl	8004730 <std>
 800482c:	68a0      	ldr	r0, [r4, #8]
 800482e:	2201      	movs	r2, #1
 8004830:	2109      	movs	r1, #9
 8004832:	f7ff ff7d 	bl	8004730 <std>
 8004836:	68e0      	ldr	r0, [r4, #12]
 8004838:	2202      	movs	r2, #2
 800483a:	2112      	movs	r1, #18
 800483c:	f7ff ff78 	bl	8004730 <std>
 8004840:	2301      	movs	r3, #1
 8004842:	61a3      	str	r3, [r4, #24]
 8004844:	e7d2      	b.n	80047ec <__sinit+0xc>
 8004846:	bf00      	nop
 8004848:	0800545c 	.word	0x0800545c
 800484c:	08004779 	.word	0x08004779

08004850 <__sfp>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	4607      	mov	r7, r0
 8004854:	f7ff ffac 	bl	80047b0 <__sfp_lock_acquire>
 8004858:	4b1e      	ldr	r3, [pc, #120]	; (80048d4 <__sfp+0x84>)
 800485a:	681e      	ldr	r6, [r3, #0]
 800485c:	69b3      	ldr	r3, [r6, #24]
 800485e:	b913      	cbnz	r3, 8004866 <__sfp+0x16>
 8004860:	4630      	mov	r0, r6
 8004862:	f7ff ffbd 	bl	80047e0 <__sinit>
 8004866:	3648      	adds	r6, #72	; 0x48
 8004868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800486c:	3b01      	subs	r3, #1
 800486e:	d503      	bpl.n	8004878 <__sfp+0x28>
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	b30b      	cbz	r3, 80048b8 <__sfp+0x68>
 8004874:	6836      	ldr	r6, [r6, #0]
 8004876:	e7f7      	b.n	8004868 <__sfp+0x18>
 8004878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800487c:	b9d5      	cbnz	r5, 80048b4 <__sfp+0x64>
 800487e:	4b16      	ldr	r3, [pc, #88]	; (80048d8 <__sfp+0x88>)
 8004880:	60e3      	str	r3, [r4, #12]
 8004882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004886:	6665      	str	r5, [r4, #100]	; 0x64
 8004888:	f000 f847 	bl	800491a <__retarget_lock_init_recursive>
 800488c:	f7ff ff96 	bl	80047bc <__sfp_lock_release>
 8004890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004898:	6025      	str	r5, [r4, #0]
 800489a:	61a5      	str	r5, [r4, #24]
 800489c:	2208      	movs	r2, #8
 800489e:	4629      	mov	r1, r5
 80048a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048a4:	f7ff fd2c 	bl	8004300 <memset>
 80048a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048b0:	4620      	mov	r0, r4
 80048b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048b4:	3468      	adds	r4, #104	; 0x68
 80048b6:	e7d9      	b.n	800486c <__sfp+0x1c>
 80048b8:	2104      	movs	r1, #4
 80048ba:	4638      	mov	r0, r7
 80048bc:	f7ff ff62 	bl	8004784 <__sfmoreglue>
 80048c0:	4604      	mov	r4, r0
 80048c2:	6030      	str	r0, [r6, #0]
 80048c4:	2800      	cmp	r0, #0
 80048c6:	d1d5      	bne.n	8004874 <__sfp+0x24>
 80048c8:	f7ff ff78 	bl	80047bc <__sfp_lock_release>
 80048cc:	230c      	movs	r3, #12
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	e7ee      	b.n	80048b0 <__sfp+0x60>
 80048d2:	bf00      	nop
 80048d4:	0800545c 	.word	0x0800545c
 80048d8:	ffff0001 	.word	0xffff0001

080048dc <_fwalk_reent>:
 80048dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048e0:	4606      	mov	r6, r0
 80048e2:	4688      	mov	r8, r1
 80048e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80048e8:	2700      	movs	r7, #0
 80048ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048ee:	f1b9 0901 	subs.w	r9, r9, #1
 80048f2:	d505      	bpl.n	8004900 <_fwalk_reent+0x24>
 80048f4:	6824      	ldr	r4, [r4, #0]
 80048f6:	2c00      	cmp	r4, #0
 80048f8:	d1f7      	bne.n	80048ea <_fwalk_reent+0xe>
 80048fa:	4638      	mov	r0, r7
 80048fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004900:	89ab      	ldrh	r3, [r5, #12]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d907      	bls.n	8004916 <_fwalk_reent+0x3a>
 8004906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800490a:	3301      	adds	r3, #1
 800490c:	d003      	beq.n	8004916 <_fwalk_reent+0x3a>
 800490e:	4629      	mov	r1, r5
 8004910:	4630      	mov	r0, r6
 8004912:	47c0      	blx	r8
 8004914:	4307      	orrs	r7, r0
 8004916:	3568      	adds	r5, #104	; 0x68
 8004918:	e7e9      	b.n	80048ee <_fwalk_reent+0x12>

0800491a <__retarget_lock_init_recursive>:
 800491a:	4770      	bx	lr

0800491c <__retarget_lock_acquire_recursive>:
 800491c:	4770      	bx	lr

0800491e <__retarget_lock_release_recursive>:
 800491e:	4770      	bx	lr

08004920 <__swhatbuf_r>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	460e      	mov	r6, r1
 8004924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004928:	2900      	cmp	r1, #0
 800492a:	b096      	sub	sp, #88	; 0x58
 800492c:	4614      	mov	r4, r2
 800492e:	461d      	mov	r5, r3
 8004930:	da08      	bge.n	8004944 <__swhatbuf_r+0x24>
 8004932:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	061a      	lsls	r2, r3, #24
 800493c:	d410      	bmi.n	8004960 <__swhatbuf_r+0x40>
 800493e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004942:	e00e      	b.n	8004962 <__swhatbuf_r+0x42>
 8004944:	466a      	mov	r2, sp
 8004946:	f000 fc95 	bl	8005274 <_fstat_r>
 800494a:	2800      	cmp	r0, #0
 800494c:	dbf1      	blt.n	8004932 <__swhatbuf_r+0x12>
 800494e:	9a01      	ldr	r2, [sp, #4]
 8004950:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004954:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004958:	425a      	negs	r2, r3
 800495a:	415a      	adcs	r2, r3
 800495c:	602a      	str	r2, [r5, #0]
 800495e:	e7ee      	b.n	800493e <__swhatbuf_r+0x1e>
 8004960:	2340      	movs	r3, #64	; 0x40
 8004962:	2000      	movs	r0, #0
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	b016      	add	sp, #88	; 0x58
 8004968:	bd70      	pop	{r4, r5, r6, pc}
	...

0800496c <__smakebuf_r>:
 800496c:	898b      	ldrh	r3, [r1, #12]
 800496e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004970:	079d      	lsls	r5, r3, #30
 8004972:	4606      	mov	r6, r0
 8004974:	460c      	mov	r4, r1
 8004976:	d507      	bpl.n	8004988 <__smakebuf_r+0x1c>
 8004978:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	6123      	str	r3, [r4, #16]
 8004980:	2301      	movs	r3, #1
 8004982:	6163      	str	r3, [r4, #20]
 8004984:	b002      	add	sp, #8
 8004986:	bd70      	pop	{r4, r5, r6, pc}
 8004988:	ab01      	add	r3, sp, #4
 800498a:	466a      	mov	r2, sp
 800498c:	f7ff ffc8 	bl	8004920 <__swhatbuf_r>
 8004990:	9900      	ldr	r1, [sp, #0]
 8004992:	4605      	mov	r5, r0
 8004994:	4630      	mov	r0, r6
 8004996:	f000 f895 	bl	8004ac4 <_malloc_r>
 800499a:	b948      	cbnz	r0, 80049b0 <__smakebuf_r+0x44>
 800499c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a0:	059a      	lsls	r2, r3, #22
 80049a2:	d4ef      	bmi.n	8004984 <__smakebuf_r+0x18>
 80049a4:	f023 0303 	bic.w	r3, r3, #3
 80049a8:	f043 0302 	orr.w	r3, r3, #2
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	e7e3      	b.n	8004978 <__smakebuf_r+0xc>
 80049b0:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <__smakebuf_r+0x7c>)
 80049b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	6020      	str	r0, [r4, #0]
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	9b00      	ldr	r3, [sp, #0]
 80049c0:	6163      	str	r3, [r4, #20]
 80049c2:	9b01      	ldr	r3, [sp, #4]
 80049c4:	6120      	str	r0, [r4, #16]
 80049c6:	b15b      	cbz	r3, 80049e0 <__smakebuf_r+0x74>
 80049c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 fc63 	bl	8005298 <_isatty_r>
 80049d2:	b128      	cbz	r0, 80049e0 <__smakebuf_r+0x74>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	89a0      	ldrh	r0, [r4, #12]
 80049e2:	4305      	orrs	r5, r0
 80049e4:	81a5      	strh	r5, [r4, #12]
 80049e6:	e7cd      	b.n	8004984 <__smakebuf_r+0x18>
 80049e8:	08004779 	.word	0x08004779

080049ec <_free_r>:
 80049ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049ee:	2900      	cmp	r1, #0
 80049f0:	d044      	beq.n	8004a7c <_free_r+0x90>
 80049f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049f6:	9001      	str	r0, [sp, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f1a1 0404 	sub.w	r4, r1, #4
 80049fe:	bfb8      	it	lt
 8004a00:	18e4      	addlt	r4, r4, r3
 8004a02:	f000 fc6b 	bl	80052dc <__malloc_lock>
 8004a06:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <_free_r+0x94>)
 8004a08:	9801      	ldr	r0, [sp, #4]
 8004a0a:	6813      	ldr	r3, [r2, #0]
 8004a0c:	b933      	cbnz	r3, 8004a1c <_free_r+0x30>
 8004a0e:	6063      	str	r3, [r4, #4]
 8004a10:	6014      	str	r4, [r2, #0]
 8004a12:	b003      	add	sp, #12
 8004a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a18:	f000 bc66 	b.w	80052e8 <__malloc_unlock>
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	d908      	bls.n	8004a32 <_free_r+0x46>
 8004a20:	6825      	ldr	r5, [r4, #0]
 8004a22:	1961      	adds	r1, r4, r5
 8004a24:	428b      	cmp	r3, r1
 8004a26:	bf01      	itttt	eq
 8004a28:	6819      	ldreq	r1, [r3, #0]
 8004a2a:	685b      	ldreq	r3, [r3, #4]
 8004a2c:	1949      	addeq	r1, r1, r5
 8004a2e:	6021      	streq	r1, [r4, #0]
 8004a30:	e7ed      	b.n	8004a0e <_free_r+0x22>
 8004a32:	461a      	mov	r2, r3
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	b10b      	cbz	r3, 8004a3c <_free_r+0x50>
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	d9fa      	bls.n	8004a32 <_free_r+0x46>
 8004a3c:	6811      	ldr	r1, [r2, #0]
 8004a3e:	1855      	adds	r5, r2, r1
 8004a40:	42a5      	cmp	r5, r4
 8004a42:	d10b      	bne.n	8004a5c <_free_r+0x70>
 8004a44:	6824      	ldr	r4, [r4, #0]
 8004a46:	4421      	add	r1, r4
 8004a48:	1854      	adds	r4, r2, r1
 8004a4a:	42a3      	cmp	r3, r4
 8004a4c:	6011      	str	r1, [r2, #0]
 8004a4e:	d1e0      	bne.n	8004a12 <_free_r+0x26>
 8004a50:	681c      	ldr	r4, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	6053      	str	r3, [r2, #4]
 8004a56:	4421      	add	r1, r4
 8004a58:	6011      	str	r1, [r2, #0]
 8004a5a:	e7da      	b.n	8004a12 <_free_r+0x26>
 8004a5c:	d902      	bls.n	8004a64 <_free_r+0x78>
 8004a5e:	230c      	movs	r3, #12
 8004a60:	6003      	str	r3, [r0, #0]
 8004a62:	e7d6      	b.n	8004a12 <_free_r+0x26>
 8004a64:	6825      	ldr	r5, [r4, #0]
 8004a66:	1961      	adds	r1, r4, r5
 8004a68:	428b      	cmp	r3, r1
 8004a6a:	bf04      	itt	eq
 8004a6c:	6819      	ldreq	r1, [r3, #0]
 8004a6e:	685b      	ldreq	r3, [r3, #4]
 8004a70:	6063      	str	r3, [r4, #4]
 8004a72:	bf04      	itt	eq
 8004a74:	1949      	addeq	r1, r1, r5
 8004a76:	6021      	streq	r1, [r4, #0]
 8004a78:	6054      	str	r4, [r2, #4]
 8004a7a:	e7ca      	b.n	8004a12 <_free_r+0x26>
 8004a7c:	b003      	add	sp, #12
 8004a7e:	bd30      	pop	{r4, r5, pc}
 8004a80:	200004e0 	.word	0x200004e0

08004a84 <sbrk_aligned>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	4e0e      	ldr	r6, [pc, #56]	; (8004ac0 <sbrk_aligned+0x3c>)
 8004a88:	460c      	mov	r4, r1
 8004a8a:	6831      	ldr	r1, [r6, #0]
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	b911      	cbnz	r1, 8004a96 <sbrk_aligned+0x12>
 8004a90:	f000 fb7a 	bl	8005188 <_sbrk_r>
 8004a94:	6030      	str	r0, [r6, #0]
 8004a96:	4621      	mov	r1, r4
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f000 fb75 	bl	8005188 <_sbrk_r>
 8004a9e:	1c43      	adds	r3, r0, #1
 8004aa0:	d00a      	beq.n	8004ab8 <sbrk_aligned+0x34>
 8004aa2:	1cc4      	adds	r4, r0, #3
 8004aa4:	f024 0403 	bic.w	r4, r4, #3
 8004aa8:	42a0      	cmp	r0, r4
 8004aaa:	d007      	beq.n	8004abc <sbrk_aligned+0x38>
 8004aac:	1a21      	subs	r1, r4, r0
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 fb6a 	bl	8005188 <_sbrk_r>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d101      	bne.n	8004abc <sbrk_aligned+0x38>
 8004ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8004abc:	4620      	mov	r0, r4
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
 8004ac0:	200004e4 	.word	0x200004e4

08004ac4 <_malloc_r>:
 8004ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac8:	1ccd      	adds	r5, r1, #3
 8004aca:	f025 0503 	bic.w	r5, r5, #3
 8004ace:	3508      	adds	r5, #8
 8004ad0:	2d0c      	cmp	r5, #12
 8004ad2:	bf38      	it	cc
 8004ad4:	250c      	movcc	r5, #12
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	4607      	mov	r7, r0
 8004ada:	db01      	blt.n	8004ae0 <_malloc_r+0x1c>
 8004adc:	42a9      	cmp	r1, r5
 8004ade:	d905      	bls.n	8004aec <_malloc_r+0x28>
 8004ae0:	230c      	movs	r3, #12
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	2600      	movs	r6, #0
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aec:	4e2e      	ldr	r6, [pc, #184]	; (8004ba8 <_malloc_r+0xe4>)
 8004aee:	f000 fbf5 	bl	80052dc <__malloc_lock>
 8004af2:	6833      	ldr	r3, [r6, #0]
 8004af4:	461c      	mov	r4, r3
 8004af6:	bb34      	cbnz	r4, 8004b46 <_malloc_r+0x82>
 8004af8:	4629      	mov	r1, r5
 8004afa:	4638      	mov	r0, r7
 8004afc:	f7ff ffc2 	bl	8004a84 <sbrk_aligned>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	4604      	mov	r4, r0
 8004b04:	d14d      	bne.n	8004ba2 <_malloc_r+0xde>
 8004b06:	6834      	ldr	r4, [r6, #0]
 8004b08:	4626      	mov	r6, r4
 8004b0a:	2e00      	cmp	r6, #0
 8004b0c:	d140      	bne.n	8004b90 <_malloc_r+0xcc>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	4631      	mov	r1, r6
 8004b12:	4638      	mov	r0, r7
 8004b14:	eb04 0803 	add.w	r8, r4, r3
 8004b18:	f000 fb36 	bl	8005188 <_sbrk_r>
 8004b1c:	4580      	cmp	r8, r0
 8004b1e:	d13a      	bne.n	8004b96 <_malloc_r+0xd2>
 8004b20:	6821      	ldr	r1, [r4, #0]
 8004b22:	3503      	adds	r5, #3
 8004b24:	1a6d      	subs	r5, r5, r1
 8004b26:	f025 0503 	bic.w	r5, r5, #3
 8004b2a:	3508      	adds	r5, #8
 8004b2c:	2d0c      	cmp	r5, #12
 8004b2e:	bf38      	it	cc
 8004b30:	250c      	movcc	r5, #12
 8004b32:	4629      	mov	r1, r5
 8004b34:	4638      	mov	r0, r7
 8004b36:	f7ff ffa5 	bl	8004a84 <sbrk_aligned>
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	d02b      	beq.n	8004b96 <_malloc_r+0xd2>
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	442b      	add	r3, r5
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	e00e      	b.n	8004b64 <_malloc_r+0xa0>
 8004b46:	6822      	ldr	r2, [r4, #0]
 8004b48:	1b52      	subs	r2, r2, r5
 8004b4a:	d41e      	bmi.n	8004b8a <_malloc_r+0xc6>
 8004b4c:	2a0b      	cmp	r2, #11
 8004b4e:	d916      	bls.n	8004b7e <_malloc_r+0xba>
 8004b50:	1961      	adds	r1, r4, r5
 8004b52:	42a3      	cmp	r3, r4
 8004b54:	6025      	str	r5, [r4, #0]
 8004b56:	bf18      	it	ne
 8004b58:	6059      	strne	r1, [r3, #4]
 8004b5a:	6863      	ldr	r3, [r4, #4]
 8004b5c:	bf08      	it	eq
 8004b5e:	6031      	streq	r1, [r6, #0]
 8004b60:	5162      	str	r2, [r4, r5]
 8004b62:	604b      	str	r3, [r1, #4]
 8004b64:	4638      	mov	r0, r7
 8004b66:	f104 060b 	add.w	r6, r4, #11
 8004b6a:	f000 fbbd 	bl	80052e8 <__malloc_unlock>
 8004b6e:	f026 0607 	bic.w	r6, r6, #7
 8004b72:	1d23      	adds	r3, r4, #4
 8004b74:	1af2      	subs	r2, r6, r3
 8004b76:	d0b6      	beq.n	8004ae6 <_malloc_r+0x22>
 8004b78:	1b9b      	subs	r3, r3, r6
 8004b7a:	50a3      	str	r3, [r4, r2]
 8004b7c:	e7b3      	b.n	8004ae6 <_malloc_r+0x22>
 8004b7e:	6862      	ldr	r2, [r4, #4]
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	bf0c      	ite	eq
 8004b84:	6032      	streq	r2, [r6, #0]
 8004b86:	605a      	strne	r2, [r3, #4]
 8004b88:	e7ec      	b.n	8004b64 <_malloc_r+0xa0>
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	6864      	ldr	r4, [r4, #4]
 8004b8e:	e7b2      	b.n	8004af6 <_malloc_r+0x32>
 8004b90:	4634      	mov	r4, r6
 8004b92:	6876      	ldr	r6, [r6, #4]
 8004b94:	e7b9      	b.n	8004b0a <_malloc_r+0x46>
 8004b96:	230c      	movs	r3, #12
 8004b98:	603b      	str	r3, [r7, #0]
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	f000 fba4 	bl	80052e8 <__malloc_unlock>
 8004ba0:	e7a1      	b.n	8004ae6 <_malloc_r+0x22>
 8004ba2:	6025      	str	r5, [r4, #0]
 8004ba4:	e7de      	b.n	8004b64 <_malloc_r+0xa0>
 8004ba6:	bf00      	nop
 8004ba8:	200004e0 	.word	0x200004e0

08004bac <__sfputc_r>:
 8004bac:	6893      	ldr	r3, [r2, #8]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	b410      	push	{r4}
 8004bb4:	6093      	str	r3, [r2, #8]
 8004bb6:	da08      	bge.n	8004bca <__sfputc_r+0x1e>
 8004bb8:	6994      	ldr	r4, [r2, #24]
 8004bba:	42a3      	cmp	r3, r4
 8004bbc:	db01      	blt.n	8004bc2 <__sfputc_r+0x16>
 8004bbe:	290a      	cmp	r1, #10
 8004bc0:	d103      	bne.n	8004bca <__sfputc_r+0x1e>
 8004bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bc6:	f7ff bc31 	b.w	800442c <__swbuf_r>
 8004bca:	6813      	ldr	r3, [r2, #0]
 8004bcc:	1c58      	adds	r0, r3, #1
 8004bce:	6010      	str	r0, [r2, #0]
 8004bd0:	7019      	strb	r1, [r3, #0]
 8004bd2:	4608      	mov	r0, r1
 8004bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <__sfputs_r>:
 8004bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bdc:	4606      	mov	r6, r0
 8004bde:	460f      	mov	r7, r1
 8004be0:	4614      	mov	r4, r2
 8004be2:	18d5      	adds	r5, r2, r3
 8004be4:	42ac      	cmp	r4, r5
 8004be6:	d101      	bne.n	8004bec <__sfputs_r+0x12>
 8004be8:	2000      	movs	r0, #0
 8004bea:	e007      	b.n	8004bfc <__sfputs_r+0x22>
 8004bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bf0:	463a      	mov	r2, r7
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f7ff ffda 	bl	8004bac <__sfputc_r>
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d1f3      	bne.n	8004be4 <__sfputs_r+0xa>
 8004bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c00 <_vfiprintf_r>:
 8004c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c04:	460d      	mov	r5, r1
 8004c06:	b09d      	sub	sp, #116	; 0x74
 8004c08:	4614      	mov	r4, r2
 8004c0a:	4698      	mov	r8, r3
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	b118      	cbz	r0, 8004c18 <_vfiprintf_r+0x18>
 8004c10:	6983      	ldr	r3, [r0, #24]
 8004c12:	b90b      	cbnz	r3, 8004c18 <_vfiprintf_r+0x18>
 8004c14:	f7ff fde4 	bl	80047e0 <__sinit>
 8004c18:	4b89      	ldr	r3, [pc, #548]	; (8004e40 <_vfiprintf_r+0x240>)
 8004c1a:	429d      	cmp	r5, r3
 8004c1c:	d11b      	bne.n	8004c56 <_vfiprintf_r+0x56>
 8004c1e:	6875      	ldr	r5, [r6, #4]
 8004c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c22:	07d9      	lsls	r1, r3, #31
 8004c24:	d405      	bmi.n	8004c32 <_vfiprintf_r+0x32>
 8004c26:	89ab      	ldrh	r3, [r5, #12]
 8004c28:	059a      	lsls	r2, r3, #22
 8004c2a:	d402      	bmi.n	8004c32 <_vfiprintf_r+0x32>
 8004c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c2e:	f7ff fe75 	bl	800491c <__retarget_lock_acquire_recursive>
 8004c32:	89ab      	ldrh	r3, [r5, #12]
 8004c34:	071b      	lsls	r3, r3, #28
 8004c36:	d501      	bpl.n	8004c3c <_vfiprintf_r+0x3c>
 8004c38:	692b      	ldr	r3, [r5, #16]
 8004c3a:	b9eb      	cbnz	r3, 8004c78 <_vfiprintf_r+0x78>
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f7ff fc46 	bl	80044d0 <__swsetup_r>
 8004c44:	b1c0      	cbz	r0, 8004c78 <_vfiprintf_r+0x78>
 8004c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c48:	07dc      	lsls	r4, r3, #31
 8004c4a:	d50e      	bpl.n	8004c6a <_vfiprintf_r+0x6a>
 8004c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c50:	b01d      	add	sp, #116	; 0x74
 8004c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c56:	4b7b      	ldr	r3, [pc, #492]	; (8004e44 <_vfiprintf_r+0x244>)
 8004c58:	429d      	cmp	r5, r3
 8004c5a:	d101      	bne.n	8004c60 <_vfiprintf_r+0x60>
 8004c5c:	68b5      	ldr	r5, [r6, #8]
 8004c5e:	e7df      	b.n	8004c20 <_vfiprintf_r+0x20>
 8004c60:	4b79      	ldr	r3, [pc, #484]	; (8004e48 <_vfiprintf_r+0x248>)
 8004c62:	429d      	cmp	r5, r3
 8004c64:	bf08      	it	eq
 8004c66:	68f5      	ldreq	r5, [r6, #12]
 8004c68:	e7da      	b.n	8004c20 <_vfiprintf_r+0x20>
 8004c6a:	89ab      	ldrh	r3, [r5, #12]
 8004c6c:	0598      	lsls	r0, r3, #22
 8004c6e:	d4ed      	bmi.n	8004c4c <_vfiprintf_r+0x4c>
 8004c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c72:	f7ff fe54 	bl	800491e <__retarget_lock_release_recursive>
 8004c76:	e7e9      	b.n	8004c4c <_vfiprintf_r+0x4c>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c86:	2330      	movs	r3, #48	; 0x30
 8004c88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004e4c <_vfiprintf_r+0x24c>
 8004c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c90:	f04f 0901 	mov.w	r9, #1
 8004c94:	4623      	mov	r3, r4
 8004c96:	469a      	mov	sl, r3
 8004c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c9c:	b10a      	cbz	r2, 8004ca2 <_vfiprintf_r+0xa2>
 8004c9e:	2a25      	cmp	r2, #37	; 0x25
 8004ca0:	d1f9      	bne.n	8004c96 <_vfiprintf_r+0x96>
 8004ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8004ca6:	d00b      	beq.n	8004cc0 <_vfiprintf_r+0xc0>
 8004ca8:	465b      	mov	r3, fp
 8004caa:	4622      	mov	r2, r4
 8004cac:	4629      	mov	r1, r5
 8004cae:	4630      	mov	r0, r6
 8004cb0:	f7ff ff93 	bl	8004bda <__sfputs_r>
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	f000 80aa 	beq.w	8004e0e <_vfiprintf_r+0x20e>
 8004cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cbc:	445a      	add	r2, fp
 8004cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8004cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 80a2 	beq.w	8004e0e <_vfiprintf_r+0x20e>
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cd4:	f10a 0a01 	add.w	sl, sl, #1
 8004cd8:	9304      	str	r3, [sp, #16]
 8004cda:	9307      	str	r3, [sp, #28]
 8004cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8004ce2:	4654      	mov	r4, sl
 8004ce4:	2205      	movs	r2, #5
 8004ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cea:	4858      	ldr	r0, [pc, #352]	; (8004e4c <_vfiprintf_r+0x24c>)
 8004cec:	f7fb fa48 	bl	8000180 <memchr>
 8004cf0:	9a04      	ldr	r2, [sp, #16]
 8004cf2:	b9d8      	cbnz	r0, 8004d2c <_vfiprintf_r+0x12c>
 8004cf4:	06d1      	lsls	r1, r2, #27
 8004cf6:	bf44      	itt	mi
 8004cf8:	2320      	movmi	r3, #32
 8004cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cfe:	0713      	lsls	r3, r2, #28
 8004d00:	bf44      	itt	mi
 8004d02:	232b      	movmi	r3, #43	; 0x2b
 8004d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d08:	f89a 3000 	ldrb.w	r3, [sl]
 8004d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d0e:	d015      	beq.n	8004d3c <_vfiprintf_r+0x13c>
 8004d10:	9a07      	ldr	r2, [sp, #28]
 8004d12:	4654      	mov	r4, sl
 8004d14:	2000      	movs	r0, #0
 8004d16:	f04f 0c0a 	mov.w	ip, #10
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d20:	3b30      	subs	r3, #48	; 0x30
 8004d22:	2b09      	cmp	r3, #9
 8004d24:	d94e      	bls.n	8004dc4 <_vfiprintf_r+0x1c4>
 8004d26:	b1b0      	cbz	r0, 8004d56 <_vfiprintf_r+0x156>
 8004d28:	9207      	str	r2, [sp, #28]
 8004d2a:	e014      	b.n	8004d56 <_vfiprintf_r+0x156>
 8004d2c:	eba0 0308 	sub.w	r3, r0, r8
 8004d30:	fa09 f303 	lsl.w	r3, r9, r3
 8004d34:	4313      	orrs	r3, r2
 8004d36:	9304      	str	r3, [sp, #16]
 8004d38:	46a2      	mov	sl, r4
 8004d3a:	e7d2      	b.n	8004ce2 <_vfiprintf_r+0xe2>
 8004d3c:	9b03      	ldr	r3, [sp, #12]
 8004d3e:	1d19      	adds	r1, r3, #4
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	9103      	str	r1, [sp, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bfbb      	ittet	lt
 8004d48:	425b      	neglt	r3, r3
 8004d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8004d4e:	9307      	strge	r3, [sp, #28]
 8004d50:	9307      	strlt	r3, [sp, #28]
 8004d52:	bfb8      	it	lt
 8004d54:	9204      	strlt	r2, [sp, #16]
 8004d56:	7823      	ldrb	r3, [r4, #0]
 8004d58:	2b2e      	cmp	r3, #46	; 0x2e
 8004d5a:	d10c      	bne.n	8004d76 <_vfiprintf_r+0x176>
 8004d5c:	7863      	ldrb	r3, [r4, #1]
 8004d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d60:	d135      	bne.n	8004dce <_vfiprintf_r+0x1ce>
 8004d62:	9b03      	ldr	r3, [sp, #12]
 8004d64:	1d1a      	adds	r2, r3, #4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	9203      	str	r2, [sp, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bfb8      	it	lt
 8004d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d72:	3402      	adds	r4, #2
 8004d74:	9305      	str	r3, [sp, #20]
 8004d76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e5c <_vfiprintf_r+0x25c>
 8004d7a:	7821      	ldrb	r1, [r4, #0]
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	4650      	mov	r0, sl
 8004d80:	f7fb f9fe 	bl	8000180 <memchr>
 8004d84:	b140      	cbz	r0, 8004d98 <_vfiprintf_r+0x198>
 8004d86:	2340      	movs	r3, #64	; 0x40
 8004d88:	eba0 000a 	sub.w	r0, r0, sl
 8004d8c:	fa03 f000 	lsl.w	r0, r3, r0
 8004d90:	9b04      	ldr	r3, [sp, #16]
 8004d92:	4303      	orrs	r3, r0
 8004d94:	3401      	adds	r4, #1
 8004d96:	9304      	str	r3, [sp, #16]
 8004d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d9c:	482c      	ldr	r0, [pc, #176]	; (8004e50 <_vfiprintf_r+0x250>)
 8004d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004da2:	2206      	movs	r2, #6
 8004da4:	f7fb f9ec 	bl	8000180 <memchr>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d03f      	beq.n	8004e2c <_vfiprintf_r+0x22c>
 8004dac:	4b29      	ldr	r3, [pc, #164]	; (8004e54 <_vfiprintf_r+0x254>)
 8004dae:	bb1b      	cbnz	r3, 8004df8 <_vfiprintf_r+0x1f8>
 8004db0:	9b03      	ldr	r3, [sp, #12]
 8004db2:	3307      	adds	r3, #7
 8004db4:	f023 0307 	bic.w	r3, r3, #7
 8004db8:	3308      	adds	r3, #8
 8004dba:	9303      	str	r3, [sp, #12]
 8004dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dbe:	443b      	add	r3, r7
 8004dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc2:	e767      	b.n	8004c94 <_vfiprintf_r+0x94>
 8004dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dc8:	460c      	mov	r4, r1
 8004dca:	2001      	movs	r0, #1
 8004dcc:	e7a5      	b.n	8004d1a <_vfiprintf_r+0x11a>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	3401      	adds	r4, #1
 8004dd2:	9305      	str	r3, [sp, #20]
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	f04f 0c0a 	mov.w	ip, #10
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004de0:	3a30      	subs	r2, #48	; 0x30
 8004de2:	2a09      	cmp	r2, #9
 8004de4:	d903      	bls.n	8004dee <_vfiprintf_r+0x1ee>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0c5      	beq.n	8004d76 <_vfiprintf_r+0x176>
 8004dea:	9105      	str	r1, [sp, #20]
 8004dec:	e7c3      	b.n	8004d76 <_vfiprintf_r+0x176>
 8004dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8004df2:	4604      	mov	r4, r0
 8004df4:	2301      	movs	r3, #1
 8004df6:	e7f0      	b.n	8004dda <_vfiprintf_r+0x1da>
 8004df8:	ab03      	add	r3, sp, #12
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	462a      	mov	r2, r5
 8004dfe:	4b16      	ldr	r3, [pc, #88]	; (8004e58 <_vfiprintf_r+0x258>)
 8004e00:	a904      	add	r1, sp, #16
 8004e02:	4630      	mov	r0, r6
 8004e04:	f3af 8000 	nop.w
 8004e08:	4607      	mov	r7, r0
 8004e0a:	1c78      	adds	r0, r7, #1
 8004e0c:	d1d6      	bne.n	8004dbc <_vfiprintf_r+0x1bc>
 8004e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e10:	07d9      	lsls	r1, r3, #31
 8004e12:	d405      	bmi.n	8004e20 <_vfiprintf_r+0x220>
 8004e14:	89ab      	ldrh	r3, [r5, #12]
 8004e16:	059a      	lsls	r2, r3, #22
 8004e18:	d402      	bmi.n	8004e20 <_vfiprintf_r+0x220>
 8004e1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e1c:	f7ff fd7f 	bl	800491e <__retarget_lock_release_recursive>
 8004e20:	89ab      	ldrh	r3, [r5, #12]
 8004e22:	065b      	lsls	r3, r3, #25
 8004e24:	f53f af12 	bmi.w	8004c4c <_vfiprintf_r+0x4c>
 8004e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e2a:	e711      	b.n	8004c50 <_vfiprintf_r+0x50>
 8004e2c:	ab03      	add	r3, sp, #12
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	462a      	mov	r2, r5
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <_vfiprintf_r+0x258>)
 8004e34:	a904      	add	r1, sp, #16
 8004e36:	4630      	mov	r0, r6
 8004e38:	f000 f880 	bl	8004f3c <_printf_i>
 8004e3c:	e7e4      	b.n	8004e08 <_vfiprintf_r+0x208>
 8004e3e:	bf00      	nop
 8004e40:	08005480 	.word	0x08005480
 8004e44:	080054a0 	.word	0x080054a0
 8004e48:	08005460 	.word	0x08005460
 8004e4c:	080054c0 	.word	0x080054c0
 8004e50:	080054ca 	.word	0x080054ca
 8004e54:	00000000 	.word	0x00000000
 8004e58:	08004bdb 	.word	0x08004bdb
 8004e5c:	080054c6 	.word	0x080054c6

08004e60 <_printf_common>:
 8004e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e64:	4616      	mov	r6, r2
 8004e66:	4699      	mov	r9, r3
 8004e68:	688a      	ldr	r2, [r1, #8]
 8004e6a:	690b      	ldr	r3, [r1, #16]
 8004e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e70:	4293      	cmp	r3, r2
 8004e72:	bfb8      	it	lt
 8004e74:	4613      	movlt	r3, r2
 8004e76:	6033      	str	r3, [r6, #0]
 8004e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e7c:	4607      	mov	r7, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	b10a      	cbz	r2, 8004e86 <_printf_common+0x26>
 8004e82:	3301      	adds	r3, #1
 8004e84:	6033      	str	r3, [r6, #0]
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	0699      	lsls	r1, r3, #26
 8004e8a:	bf42      	ittt	mi
 8004e8c:	6833      	ldrmi	r3, [r6, #0]
 8004e8e:	3302      	addmi	r3, #2
 8004e90:	6033      	strmi	r3, [r6, #0]
 8004e92:	6825      	ldr	r5, [r4, #0]
 8004e94:	f015 0506 	ands.w	r5, r5, #6
 8004e98:	d106      	bne.n	8004ea8 <_printf_common+0x48>
 8004e9a:	f104 0a19 	add.w	sl, r4, #25
 8004e9e:	68e3      	ldr	r3, [r4, #12]
 8004ea0:	6832      	ldr	r2, [r6, #0]
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	42ab      	cmp	r3, r5
 8004ea6:	dc26      	bgt.n	8004ef6 <_printf_common+0x96>
 8004ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eac:	1e13      	subs	r3, r2, #0
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	bf18      	it	ne
 8004eb2:	2301      	movne	r3, #1
 8004eb4:	0692      	lsls	r2, r2, #26
 8004eb6:	d42b      	bmi.n	8004f10 <_printf_common+0xb0>
 8004eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ebc:	4649      	mov	r1, r9
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	47c0      	blx	r8
 8004ec2:	3001      	adds	r0, #1
 8004ec4:	d01e      	beq.n	8004f04 <_printf_common+0xa4>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	68e5      	ldr	r5, [r4, #12]
 8004eca:	6832      	ldr	r2, [r6, #0]
 8004ecc:	f003 0306 	and.w	r3, r3, #6
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	bf08      	it	eq
 8004ed4:	1aad      	subeq	r5, r5, r2
 8004ed6:	68a3      	ldr	r3, [r4, #8]
 8004ed8:	6922      	ldr	r2, [r4, #16]
 8004eda:	bf0c      	ite	eq
 8004edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee0:	2500      	movne	r5, #0
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	bfc4      	itt	gt
 8004ee6:	1a9b      	subgt	r3, r3, r2
 8004ee8:	18ed      	addgt	r5, r5, r3
 8004eea:	2600      	movs	r6, #0
 8004eec:	341a      	adds	r4, #26
 8004eee:	42b5      	cmp	r5, r6
 8004ef0:	d11a      	bne.n	8004f28 <_printf_common+0xc8>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	e008      	b.n	8004f08 <_printf_common+0xa8>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4652      	mov	r2, sl
 8004efa:	4649      	mov	r1, r9
 8004efc:	4638      	mov	r0, r7
 8004efe:	47c0      	blx	r8
 8004f00:	3001      	adds	r0, #1
 8004f02:	d103      	bne.n	8004f0c <_printf_common+0xac>
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
 8004f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0c:	3501      	adds	r5, #1
 8004f0e:	e7c6      	b.n	8004e9e <_printf_common+0x3e>
 8004f10:	18e1      	adds	r1, r4, r3
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	2030      	movs	r0, #48	; 0x30
 8004f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f1a:	4422      	add	r2, r4
 8004f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f24:	3302      	adds	r3, #2
 8004f26:	e7c7      	b.n	8004eb8 <_printf_common+0x58>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	4622      	mov	r2, r4
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	4638      	mov	r0, r7
 8004f30:	47c0      	blx	r8
 8004f32:	3001      	adds	r0, #1
 8004f34:	d0e6      	beq.n	8004f04 <_printf_common+0xa4>
 8004f36:	3601      	adds	r6, #1
 8004f38:	e7d9      	b.n	8004eee <_printf_common+0x8e>
	...

08004f3c <_printf_i>:
 8004f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f40:	7e0f      	ldrb	r7, [r1, #24]
 8004f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f44:	2f78      	cmp	r7, #120	; 0x78
 8004f46:	4691      	mov	r9, r2
 8004f48:	4680      	mov	r8, r0
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	469a      	mov	sl, r3
 8004f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f52:	d807      	bhi.n	8004f64 <_printf_i+0x28>
 8004f54:	2f62      	cmp	r7, #98	; 0x62
 8004f56:	d80a      	bhi.n	8004f6e <_printf_i+0x32>
 8004f58:	2f00      	cmp	r7, #0
 8004f5a:	f000 80d8 	beq.w	800510e <_printf_i+0x1d2>
 8004f5e:	2f58      	cmp	r7, #88	; 0x58
 8004f60:	f000 80a3 	beq.w	80050aa <_printf_i+0x16e>
 8004f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f6c:	e03a      	b.n	8004fe4 <_printf_i+0xa8>
 8004f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f72:	2b15      	cmp	r3, #21
 8004f74:	d8f6      	bhi.n	8004f64 <_printf_i+0x28>
 8004f76:	a101      	add	r1, pc, #4	; (adr r1, 8004f7c <_printf_i+0x40>)
 8004f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f7c:	08004fd5 	.word	0x08004fd5
 8004f80:	08004fe9 	.word	0x08004fe9
 8004f84:	08004f65 	.word	0x08004f65
 8004f88:	08004f65 	.word	0x08004f65
 8004f8c:	08004f65 	.word	0x08004f65
 8004f90:	08004f65 	.word	0x08004f65
 8004f94:	08004fe9 	.word	0x08004fe9
 8004f98:	08004f65 	.word	0x08004f65
 8004f9c:	08004f65 	.word	0x08004f65
 8004fa0:	08004f65 	.word	0x08004f65
 8004fa4:	08004f65 	.word	0x08004f65
 8004fa8:	080050f5 	.word	0x080050f5
 8004fac:	08005019 	.word	0x08005019
 8004fb0:	080050d7 	.word	0x080050d7
 8004fb4:	08004f65 	.word	0x08004f65
 8004fb8:	08004f65 	.word	0x08004f65
 8004fbc:	08005117 	.word	0x08005117
 8004fc0:	08004f65 	.word	0x08004f65
 8004fc4:	08005019 	.word	0x08005019
 8004fc8:	08004f65 	.word	0x08004f65
 8004fcc:	08004f65 	.word	0x08004f65
 8004fd0:	080050df 	.word	0x080050df
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	1d1a      	adds	r2, r3, #4
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	602a      	str	r2, [r5, #0]
 8004fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0a3      	b.n	8005130 <_printf_i+0x1f4>
 8004fe8:	6820      	ldr	r0, [r4, #0]
 8004fea:	6829      	ldr	r1, [r5, #0]
 8004fec:	0606      	lsls	r6, r0, #24
 8004fee:	f101 0304 	add.w	r3, r1, #4
 8004ff2:	d50a      	bpl.n	800500a <_printf_i+0xce>
 8004ff4:	680e      	ldr	r6, [r1, #0]
 8004ff6:	602b      	str	r3, [r5, #0]
 8004ff8:	2e00      	cmp	r6, #0
 8004ffa:	da03      	bge.n	8005004 <_printf_i+0xc8>
 8004ffc:	232d      	movs	r3, #45	; 0x2d
 8004ffe:	4276      	negs	r6, r6
 8005000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005004:	485e      	ldr	r0, [pc, #376]	; (8005180 <_printf_i+0x244>)
 8005006:	230a      	movs	r3, #10
 8005008:	e019      	b.n	800503e <_printf_i+0x102>
 800500a:	680e      	ldr	r6, [r1, #0]
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005012:	bf18      	it	ne
 8005014:	b236      	sxthne	r6, r6
 8005016:	e7ef      	b.n	8004ff8 <_printf_i+0xbc>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	6820      	ldr	r0, [r4, #0]
 800501c:	1d19      	adds	r1, r3, #4
 800501e:	6029      	str	r1, [r5, #0]
 8005020:	0601      	lsls	r1, r0, #24
 8005022:	d501      	bpl.n	8005028 <_printf_i+0xec>
 8005024:	681e      	ldr	r6, [r3, #0]
 8005026:	e002      	b.n	800502e <_printf_i+0xf2>
 8005028:	0646      	lsls	r6, r0, #25
 800502a:	d5fb      	bpl.n	8005024 <_printf_i+0xe8>
 800502c:	881e      	ldrh	r6, [r3, #0]
 800502e:	4854      	ldr	r0, [pc, #336]	; (8005180 <_printf_i+0x244>)
 8005030:	2f6f      	cmp	r7, #111	; 0x6f
 8005032:	bf0c      	ite	eq
 8005034:	2308      	moveq	r3, #8
 8005036:	230a      	movne	r3, #10
 8005038:	2100      	movs	r1, #0
 800503a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800503e:	6865      	ldr	r5, [r4, #4]
 8005040:	60a5      	str	r5, [r4, #8]
 8005042:	2d00      	cmp	r5, #0
 8005044:	bfa2      	ittt	ge
 8005046:	6821      	ldrge	r1, [r4, #0]
 8005048:	f021 0104 	bicge.w	r1, r1, #4
 800504c:	6021      	strge	r1, [r4, #0]
 800504e:	b90e      	cbnz	r6, 8005054 <_printf_i+0x118>
 8005050:	2d00      	cmp	r5, #0
 8005052:	d04d      	beq.n	80050f0 <_printf_i+0x1b4>
 8005054:	4615      	mov	r5, r2
 8005056:	fbb6 f1f3 	udiv	r1, r6, r3
 800505a:	fb03 6711 	mls	r7, r3, r1, r6
 800505e:	5dc7      	ldrb	r7, [r0, r7]
 8005060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005064:	4637      	mov	r7, r6
 8005066:	42bb      	cmp	r3, r7
 8005068:	460e      	mov	r6, r1
 800506a:	d9f4      	bls.n	8005056 <_printf_i+0x11a>
 800506c:	2b08      	cmp	r3, #8
 800506e:	d10b      	bne.n	8005088 <_printf_i+0x14c>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	07de      	lsls	r6, r3, #31
 8005074:	d508      	bpl.n	8005088 <_printf_i+0x14c>
 8005076:	6923      	ldr	r3, [r4, #16]
 8005078:	6861      	ldr	r1, [r4, #4]
 800507a:	4299      	cmp	r1, r3
 800507c:	bfde      	ittt	le
 800507e:	2330      	movle	r3, #48	; 0x30
 8005080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005088:	1b52      	subs	r2, r2, r5
 800508a:	6122      	str	r2, [r4, #16]
 800508c:	f8cd a000 	str.w	sl, [sp]
 8005090:	464b      	mov	r3, r9
 8005092:	aa03      	add	r2, sp, #12
 8005094:	4621      	mov	r1, r4
 8005096:	4640      	mov	r0, r8
 8005098:	f7ff fee2 	bl	8004e60 <_printf_common>
 800509c:	3001      	adds	r0, #1
 800509e:	d14c      	bne.n	800513a <_printf_i+0x1fe>
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	b004      	add	sp, #16
 80050a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050aa:	4835      	ldr	r0, [pc, #212]	; (8005180 <_printf_i+0x244>)
 80050ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050b0:	6829      	ldr	r1, [r5, #0]
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80050b8:	6029      	str	r1, [r5, #0]
 80050ba:	061d      	lsls	r5, r3, #24
 80050bc:	d514      	bpl.n	80050e8 <_printf_i+0x1ac>
 80050be:	07df      	lsls	r7, r3, #31
 80050c0:	bf44      	itt	mi
 80050c2:	f043 0320 	orrmi.w	r3, r3, #32
 80050c6:	6023      	strmi	r3, [r4, #0]
 80050c8:	b91e      	cbnz	r6, 80050d2 <_printf_i+0x196>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	f023 0320 	bic.w	r3, r3, #32
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	2310      	movs	r3, #16
 80050d4:	e7b0      	b.n	8005038 <_printf_i+0xfc>
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	f043 0320 	orr.w	r3, r3, #32
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	2378      	movs	r3, #120	; 0x78
 80050e0:	4828      	ldr	r0, [pc, #160]	; (8005184 <_printf_i+0x248>)
 80050e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050e6:	e7e3      	b.n	80050b0 <_printf_i+0x174>
 80050e8:	0659      	lsls	r1, r3, #25
 80050ea:	bf48      	it	mi
 80050ec:	b2b6      	uxthmi	r6, r6
 80050ee:	e7e6      	b.n	80050be <_printf_i+0x182>
 80050f0:	4615      	mov	r5, r2
 80050f2:	e7bb      	b.n	800506c <_printf_i+0x130>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	6826      	ldr	r6, [r4, #0]
 80050f8:	6961      	ldr	r1, [r4, #20]
 80050fa:	1d18      	adds	r0, r3, #4
 80050fc:	6028      	str	r0, [r5, #0]
 80050fe:	0635      	lsls	r5, r6, #24
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	d501      	bpl.n	8005108 <_printf_i+0x1cc>
 8005104:	6019      	str	r1, [r3, #0]
 8005106:	e002      	b.n	800510e <_printf_i+0x1d2>
 8005108:	0670      	lsls	r0, r6, #25
 800510a:	d5fb      	bpl.n	8005104 <_printf_i+0x1c8>
 800510c:	8019      	strh	r1, [r3, #0]
 800510e:	2300      	movs	r3, #0
 8005110:	6123      	str	r3, [r4, #16]
 8005112:	4615      	mov	r5, r2
 8005114:	e7ba      	b.n	800508c <_printf_i+0x150>
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	1d1a      	adds	r2, r3, #4
 800511a:	602a      	str	r2, [r5, #0]
 800511c:	681d      	ldr	r5, [r3, #0]
 800511e:	6862      	ldr	r2, [r4, #4]
 8005120:	2100      	movs	r1, #0
 8005122:	4628      	mov	r0, r5
 8005124:	f7fb f82c 	bl	8000180 <memchr>
 8005128:	b108      	cbz	r0, 800512e <_printf_i+0x1f2>
 800512a:	1b40      	subs	r0, r0, r5
 800512c:	6060      	str	r0, [r4, #4]
 800512e:	6863      	ldr	r3, [r4, #4]
 8005130:	6123      	str	r3, [r4, #16]
 8005132:	2300      	movs	r3, #0
 8005134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005138:	e7a8      	b.n	800508c <_printf_i+0x150>
 800513a:	6923      	ldr	r3, [r4, #16]
 800513c:	462a      	mov	r2, r5
 800513e:	4649      	mov	r1, r9
 8005140:	4640      	mov	r0, r8
 8005142:	47d0      	blx	sl
 8005144:	3001      	adds	r0, #1
 8005146:	d0ab      	beq.n	80050a0 <_printf_i+0x164>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	079b      	lsls	r3, r3, #30
 800514c:	d413      	bmi.n	8005176 <_printf_i+0x23a>
 800514e:	68e0      	ldr	r0, [r4, #12]
 8005150:	9b03      	ldr	r3, [sp, #12]
 8005152:	4298      	cmp	r0, r3
 8005154:	bfb8      	it	lt
 8005156:	4618      	movlt	r0, r3
 8005158:	e7a4      	b.n	80050a4 <_printf_i+0x168>
 800515a:	2301      	movs	r3, #1
 800515c:	4632      	mov	r2, r6
 800515e:	4649      	mov	r1, r9
 8005160:	4640      	mov	r0, r8
 8005162:	47d0      	blx	sl
 8005164:	3001      	adds	r0, #1
 8005166:	d09b      	beq.n	80050a0 <_printf_i+0x164>
 8005168:	3501      	adds	r5, #1
 800516a:	68e3      	ldr	r3, [r4, #12]
 800516c:	9903      	ldr	r1, [sp, #12]
 800516e:	1a5b      	subs	r3, r3, r1
 8005170:	42ab      	cmp	r3, r5
 8005172:	dcf2      	bgt.n	800515a <_printf_i+0x21e>
 8005174:	e7eb      	b.n	800514e <_printf_i+0x212>
 8005176:	2500      	movs	r5, #0
 8005178:	f104 0619 	add.w	r6, r4, #25
 800517c:	e7f5      	b.n	800516a <_printf_i+0x22e>
 800517e:	bf00      	nop
 8005180:	080054d1 	.word	0x080054d1
 8005184:	080054e2 	.word	0x080054e2

08005188 <_sbrk_r>:
 8005188:	b538      	push	{r3, r4, r5, lr}
 800518a:	4d06      	ldr	r5, [pc, #24]	; (80051a4 <_sbrk_r+0x1c>)
 800518c:	2300      	movs	r3, #0
 800518e:	4604      	mov	r4, r0
 8005190:	4608      	mov	r0, r1
 8005192:	602b      	str	r3, [r5, #0]
 8005194:	f7fb fe48 	bl	8000e28 <_sbrk>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_sbrk_r+0x1a>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_sbrk_r+0x1a>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	200004e8 	.word	0x200004e8

080051a8 <__sread>:
 80051a8:	b510      	push	{r4, lr}
 80051aa:	460c      	mov	r4, r1
 80051ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b0:	f000 f8a0 	bl	80052f4 <_read_r>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	bfab      	itete	ge
 80051b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051ba:	89a3      	ldrhlt	r3, [r4, #12]
 80051bc:	181b      	addge	r3, r3, r0
 80051be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051c2:	bfac      	ite	ge
 80051c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80051c6:	81a3      	strhlt	r3, [r4, #12]
 80051c8:	bd10      	pop	{r4, pc}

080051ca <__swrite>:
 80051ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ce:	461f      	mov	r7, r3
 80051d0:	898b      	ldrh	r3, [r1, #12]
 80051d2:	05db      	lsls	r3, r3, #23
 80051d4:	4605      	mov	r5, r0
 80051d6:	460c      	mov	r4, r1
 80051d8:	4616      	mov	r6, r2
 80051da:	d505      	bpl.n	80051e8 <__swrite+0x1e>
 80051dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051e0:	2302      	movs	r3, #2
 80051e2:	2200      	movs	r2, #0
 80051e4:	f000 f868 	bl	80052b8 <_lseek_r>
 80051e8:	89a3      	ldrh	r3, [r4, #12]
 80051ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051f2:	81a3      	strh	r3, [r4, #12]
 80051f4:	4632      	mov	r2, r6
 80051f6:	463b      	mov	r3, r7
 80051f8:	4628      	mov	r0, r5
 80051fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051fe:	f000 b817 	b.w	8005230 <_write_r>

08005202 <__sseek>:
 8005202:	b510      	push	{r4, lr}
 8005204:	460c      	mov	r4, r1
 8005206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800520a:	f000 f855 	bl	80052b8 <_lseek_r>
 800520e:	1c43      	adds	r3, r0, #1
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	bf15      	itete	ne
 8005214:	6560      	strne	r0, [r4, #84]	; 0x54
 8005216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800521a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800521e:	81a3      	strheq	r3, [r4, #12]
 8005220:	bf18      	it	ne
 8005222:	81a3      	strhne	r3, [r4, #12]
 8005224:	bd10      	pop	{r4, pc}

08005226 <__sclose>:
 8005226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522a:	f000 b813 	b.w	8005254 <_close_r>
	...

08005230 <_write_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d07      	ldr	r5, [pc, #28]	; (8005250 <_write_r+0x20>)
 8005234:	4604      	mov	r4, r0
 8005236:	4608      	mov	r0, r1
 8005238:	4611      	mov	r1, r2
 800523a:	2200      	movs	r2, #0
 800523c:	602a      	str	r2, [r5, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	f7fb f9c6 	bl	80005d0 <_write>
 8005244:	1c43      	adds	r3, r0, #1
 8005246:	d102      	bne.n	800524e <_write_r+0x1e>
 8005248:	682b      	ldr	r3, [r5, #0]
 800524a:	b103      	cbz	r3, 800524e <_write_r+0x1e>
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	bd38      	pop	{r3, r4, r5, pc}
 8005250:	200004e8 	.word	0x200004e8

08005254 <_close_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d06      	ldr	r5, [pc, #24]	; (8005270 <_close_r+0x1c>)
 8005258:	2300      	movs	r3, #0
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fb fdad 	bl	8000dbe <_close>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_close_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_close_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	200004e8 	.word	0x200004e8

08005274 <_fstat_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d07      	ldr	r5, [pc, #28]	; (8005294 <_fstat_r+0x20>)
 8005278:	2300      	movs	r3, #0
 800527a:	4604      	mov	r4, r0
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	602b      	str	r3, [r5, #0]
 8005282:	f7fb fda8 	bl	8000dd6 <_fstat>
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	d102      	bne.n	8005290 <_fstat_r+0x1c>
 800528a:	682b      	ldr	r3, [r5, #0]
 800528c:	b103      	cbz	r3, 8005290 <_fstat_r+0x1c>
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	bd38      	pop	{r3, r4, r5, pc}
 8005292:	bf00      	nop
 8005294:	200004e8 	.word	0x200004e8

08005298 <_isatty_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4d06      	ldr	r5, [pc, #24]	; (80052b4 <_isatty_r+0x1c>)
 800529c:	2300      	movs	r3, #0
 800529e:	4604      	mov	r4, r0
 80052a0:	4608      	mov	r0, r1
 80052a2:	602b      	str	r3, [r5, #0]
 80052a4:	f7fb fda7 	bl	8000df6 <_isatty>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d102      	bne.n	80052b2 <_isatty_r+0x1a>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	b103      	cbz	r3, 80052b2 <_isatty_r+0x1a>
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	200004e8 	.word	0x200004e8

080052b8 <_lseek_r>:
 80052b8:	b538      	push	{r3, r4, r5, lr}
 80052ba:	4d07      	ldr	r5, [pc, #28]	; (80052d8 <_lseek_r+0x20>)
 80052bc:	4604      	mov	r4, r0
 80052be:	4608      	mov	r0, r1
 80052c0:	4611      	mov	r1, r2
 80052c2:	2200      	movs	r2, #0
 80052c4:	602a      	str	r2, [r5, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	f7fb fda0 	bl	8000e0c <_lseek>
 80052cc:	1c43      	adds	r3, r0, #1
 80052ce:	d102      	bne.n	80052d6 <_lseek_r+0x1e>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	b103      	cbz	r3, 80052d6 <_lseek_r+0x1e>
 80052d4:	6023      	str	r3, [r4, #0]
 80052d6:	bd38      	pop	{r3, r4, r5, pc}
 80052d8:	200004e8 	.word	0x200004e8

080052dc <__malloc_lock>:
 80052dc:	4801      	ldr	r0, [pc, #4]	; (80052e4 <__malloc_lock+0x8>)
 80052de:	f7ff bb1d 	b.w	800491c <__retarget_lock_acquire_recursive>
 80052e2:	bf00      	nop
 80052e4:	200004dc 	.word	0x200004dc

080052e8 <__malloc_unlock>:
 80052e8:	4801      	ldr	r0, [pc, #4]	; (80052f0 <__malloc_unlock+0x8>)
 80052ea:	f7ff bb18 	b.w	800491e <__retarget_lock_release_recursive>
 80052ee:	bf00      	nop
 80052f0:	200004dc 	.word	0x200004dc

080052f4 <_read_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4d07      	ldr	r5, [pc, #28]	; (8005314 <_read_r+0x20>)
 80052f8:	4604      	mov	r4, r0
 80052fa:	4608      	mov	r0, r1
 80052fc:	4611      	mov	r1, r2
 80052fe:	2200      	movs	r2, #0
 8005300:	602a      	str	r2, [r5, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	f7fb fd3e 	bl	8000d84 <_read>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_read_r+0x1e>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_read_r+0x1e>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	200004e8 	.word	0x200004e8

08005318 <_init>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	bf00      	nop
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr

08005324 <_fini>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	bf00      	nop
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr

08005330 <__FLASH_Program_Fast_veneer>:
 8005330:	f85f f000 	ldr.w	pc, [pc]	; 8005334 <__FLASH_Program_Fast_veneer+0x4>
 8005334:	20000079 	.word	0x20000079

Disassembly of section .data:

20000008 <SystemCoreClock>:
20000008:	003d0900                                ..=.

2000000c <uwTickPrio>:
2000000c:	00000010                                ....

20000010 <uwTickFreq>:
20000010:	00000001                                ....

20000014 <_impure_ptr>:
20000014:	20000018                                ... 

20000018 <impure_data>:
20000018:	00000000 08005480 080054a0 08005460     .....T...T..`T..
	...

20000078 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000078:	b480      	push	{r7}
2000007a:	b089      	sub	sp, #36	; 0x24
2000007c:	af00      	add	r7, sp, #0
2000007e:	6078      	str	r0, [r7, #4]
20000080:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
20000082:	2380      	movs	r3, #128	; 0x80
20000084:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
20000086:	687b      	ldr	r3, [r7, #4]
20000088:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
2000008a:	683b      	ldr	r3, [r7, #0]
2000008c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000008e:	4b18      	ldr	r3, [pc, #96]	; (200000f0 <FLASH_Program_Fast+0x78>)
20000090:	695b      	ldr	r3, [r3, #20]
20000092:	4a17      	ldr	r2, [pc, #92]	; (200000f0 <FLASH_Program_Fast+0x78>)
20000094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20000098:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
2000009a:	f3ef 8310 	mrs	r3, PRIMASK
2000009e:	60fb      	str	r3, [r7, #12]
  return(result);
200000a0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000a4:	b672      	cpsid	i
}
200000a6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
200000a8:	697b      	ldr	r3, [r7, #20]
200000aa:	681a      	ldr	r2, [r3, #0]
200000ac:	69bb      	ldr	r3, [r7, #24]
200000ae:	601a      	str	r2, [r3, #0]
    dest_addr++;
200000b0:	69bb      	ldr	r3, [r7, #24]
200000b2:	3304      	adds	r3, #4
200000b4:	61bb      	str	r3, [r7, #24]
    src_addr++;
200000b6:	697b      	ldr	r3, [r7, #20]
200000b8:	3304      	adds	r3, #4
200000ba:	617b      	str	r3, [r7, #20]
    row_index--;
200000bc:	7ffb      	ldrb	r3, [r7, #31]
200000be:	3b01      	subs	r3, #1
200000c0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
200000c2:	7ffb      	ldrb	r3, [r7, #31]
200000c4:	2b00      	cmp	r3, #0
200000c6:	d1ef      	bne.n	200000a8 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200000c8:	bf00      	nop
200000ca:	4b09      	ldr	r3, [pc, #36]	; (200000f0 <FLASH_Program_Fast+0x78>)
200000cc:	691b      	ldr	r3, [r3, #16]
200000ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200000d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200000d6:	d0f8      	beq.n	200000ca <FLASH_Program_Fast+0x52>
200000d8:	693b      	ldr	r3, [r7, #16]
200000da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000dc:	68bb      	ldr	r3, [r7, #8]
200000de:	f383 8810 	msr	PRIMASK, r3
}
200000e2:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200000e4:	bf00      	nop
200000e6:	3724      	adds	r7, #36	; 0x24
200000e8:	46bd      	mov	sp, r7
200000ea:	f85d 7b04 	ldr.w	r7, [sp], #4
200000ee:	4770      	bx	lr
200000f0:	58004000 	.word	0x58004000
