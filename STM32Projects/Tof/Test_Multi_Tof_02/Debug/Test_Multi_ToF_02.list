
Test_Multi_ToF_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a108  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0801a248  0801a248  0002a248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a4d4  0801a4d4  0002a4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a4dc  0801a4dc  0002a4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a4e0  0801a4e0  0002a4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000e4  20000008  0801a4e4  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000085d4  200000f0  0801a5c8  000300f0  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200086c4  0801a5c8  000386c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005e910  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000063f2  00000000  00000000  0008ea2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002d20  00000000  00000000  00094e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002a78  00000000  00000000  00097b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002db3b  00000000  00000000  0009a5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003414c  00000000  00000000  000c80f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001102b9  00000000  00000000  000fc23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020c4f8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ca98  00000000  00000000  0020c548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000f0 	.word	0x200000f0
 800015c:	00000000 	.word	0x00000000
 8000160:	0801a230 	.word	0x0801a230

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000f4 	.word	0x200000f4
 800017c:	0801a230 	.word	0x0801a230

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_ldivmod>:
 8000220:	b97b      	cbnz	r3, 8000242 <__aeabi_ldivmod+0x22>
 8000222:	b972      	cbnz	r2, 8000242 <__aeabi_ldivmod+0x22>
 8000224:	2900      	cmp	r1, #0
 8000226:	bfbe      	ittt	lt
 8000228:	2000      	movlt	r0, #0
 800022a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800022e:	e006      	blt.n	800023e <__aeabi_ldivmod+0x1e>
 8000230:	bf08      	it	eq
 8000232:	2800      	cmpeq	r0, #0
 8000234:	bf1c      	itt	ne
 8000236:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800023a:	f04f 30ff 	movne.w	r0, #4294967295
 800023e:	f000 b9bf 	b.w	80005c0 <__aeabi_idiv0>
 8000242:	f1ad 0c08 	sub.w	ip, sp, #8
 8000246:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024a:	2900      	cmp	r1, #0
 800024c:	db09      	blt.n	8000262 <__aeabi_ldivmod+0x42>
 800024e:	2b00      	cmp	r3, #0
 8000250:	db1a      	blt.n	8000288 <__aeabi_ldivmod+0x68>
 8000252:	f000 f84d 	bl	80002f0 <__udivmoddi4>
 8000256:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025e:	b004      	add	sp, #16
 8000260:	4770      	bx	lr
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	db1b      	blt.n	80002a4 <__aeabi_ldivmod+0x84>
 800026c:	f000 f840 	bl	80002f0 <__udivmoddi4>
 8000270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000278:	b004      	add	sp, #16
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	4252      	negs	r2, r2
 8000282:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000286:	4770      	bx	lr
 8000288:	4252      	negs	r2, r2
 800028a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028e:	f000 f82f 	bl	80002f0 <__udivmoddi4>
 8000292:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029a:	b004      	add	sp, #16
 800029c:	4240      	negs	r0, r0
 800029e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a2:	4770      	bx	lr
 80002a4:	4252      	negs	r2, r2
 80002a6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002aa:	f000 f821 	bl	80002f0 <__udivmoddi4>
 80002ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b6:	b004      	add	sp, #16
 80002b8:	4252      	negs	r2, r2
 80002ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d013      	beq.n	8000604 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00b      	beq.n	8000604 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ec:	e000      	b.n	80005f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d0f9      	beq.n	80005ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800061a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800061e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000622:	f023 0218 	bic.w	r2, r3, #24
 8000626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4313      	orrs	r3, r2
 800062e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000632:	bf00      	nop
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800063e:	b480      	push	{r7}
 8000640:	b085      	sub	sp, #20
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800064c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	4313      	orrs	r3, r2
 8000654:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800065a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4013      	ands	r3, r2
 8000660:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000662:	68fb      	ldr	r3, [r7, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <_write>:
static void MX_GPIO_Init(void);
static void MX_USB_PCD_Init(void);
int _write(int file, char *ptr, int len);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]
int DataIdx;
for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	e009      	b.n	8000696 <_write+0x26>
{
//__io_putchar(*ptr++);
ITM_SendChar(*ptr++);
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	60ba      	str	r2, [r7, #8]
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff9a 	bl	80005c4 <ITM_SendChar>
for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	3301      	adds	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
 8000696:	697a      	ldr	r2, [r7, #20]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	429a      	cmp	r2, r3
 800069c:	dbf1      	blt.n	8000682 <_write+0x12>
}
return len;
 800069e:	687b      	ldr	r3, [r7, #4]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3718      	adds	r7, #24
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f014 fd16 	bl	80150dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f80c 	bl	80006cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006b4:	f000 f880 	bl	80007b8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b8:	f000 f8c4 	bl	8000844 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80006bc:	f000 f89a 	bl	80007f4 <MX_USB_PCD_Init>
  MX_TOF_Init();
 80006c0:	f018 fbf6 	bl	8018eb0 <MX_TOF_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 80006c4:	f018 fbfa 	bl	8018ebc <MX_TOF_Process>
 80006c8:	e7fc      	b.n	80006c4 <main+0x1c>
	...

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b09a      	sub	sp, #104	; 0x68
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	2248      	movs	r2, #72	; 0x48
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f018 fd2a 	bl	8019134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
 80006ee:	615a      	str	r2, [r3, #20]
 80006f0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80006f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000700:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	f023 0303 	bic.w	r3, r3, #3
 800070c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000716:	f015 ffef 	bl	80166f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff ff79 	bl	8000612 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <SystemClock_Config+0xe8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000728:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <SystemClock_Config+0xe8>)
 800072a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <SystemClock_Config+0xe8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800073c:	2327      	movs	r3, #39	; 0x27
 800073e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000746:	2301      	movs	r3, #1
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2340      	movs	r3, #64	; 0x40
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000758:	2300      	movs	r3, #0
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800075c:	2360      	movs	r3, #96	; 0x60
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000760:	2300      	movs	r3, #0
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	4618      	mov	r0, r3
 800076a:	f016 fb59 	bl	8016e20 <HAL_RCC_OscConfig>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000774:	f000 f8ae 	bl	80008d4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000778:	236f      	movs	r3, #111	; 0x6f
 800077a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800077c:	2302      	movs	r3, #2
 800077e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2101      	movs	r1, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f016 feb5 	bl	8017508 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80007a4:	f000 f896 	bl	80008d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007a8:	f017 fc70 	bl	801808c <HAL_RCCEx_EnableMSIPLLMode>
}
 80007ac:	bf00      	nop
 80007ae:	3768      	adds	r7, #104	; 0x68
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	58000400 	.word	0x58000400

080007b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2250      	movs	r2, #80	; 0x50
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f018 fcb5 	bl	8019134 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80007ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ce:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007d0:	2300      	movs	r3, #0
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4618      	mov	r0, r3
 80007dc:	f017 fae0 	bl	8017da0 <HAL_RCCEx_PeriphCLKConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80007e6:	f000 f875 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	; 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_USB_PCD_Init+0x48>)
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <MX_USB_PCD_Init+0x4c>)
 80007fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_USB_PCD_Init+0x48>)
 8000800:	2208      	movs	r2, #8
 8000802:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_USB_PCD_Init+0x48>)
 8000806:	2202      	movs	r2, #2
 8000808:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USB_PCD_Init+0x48>)
 800080c:	2202      	movs	r2, #2
 800080e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_USB_PCD_Init+0x48>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USB_PCD_Init+0x48>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_USB_PCD_Init+0x48>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USB_PCD_Init+0x48>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_USB_PCD_Init+0x48>)
 800082a:	f015 fe62 	bl	80164f2 <HAL_PCD_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000834:	f000 f84e 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000010c 	.word	0x2000010c
 8000840:	40006800 	.word	0x40006800

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000858:	2004      	movs	r0, #4
 800085a:	f7ff fef0 	bl	800063e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2002      	movs	r0, #2
 8000860:	f7ff feed 	bl	800063e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff feea 	bl	800063e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2008      	movs	r0, #8
 800086c:	f7ff fee7 	bl	800063e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2123      	movs	r1, #35	; 0x23
 8000874:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MX_GPIO_Init+0x84>)
 8000876:	f015 f825 	bl	80158c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087a:	2310      	movs	r3, #16
 800087c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4619      	mov	r1, r3
 800088a:	4810      	ldr	r0, [pc, #64]	; (80008cc <MX_GPIO_Init+0x88>)
 800088c:	f014 fdb4 	bl	80153f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000890:	2323      	movs	r3, #35	; 0x23
 8000892:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <MX_GPIO_Init+0x84>)
 80008a6:	f014 fda7 	bl	80153f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80008aa:	2303      	movs	r3, #3
 80008ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	4619      	mov	r1, r3
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_GPIO_Init+0x8c>)
 80008bc:	f014 fd9c 	bl	80153f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	48000400 	.word	0x48000400
 80008cc:	48000800 	.word	0x48000800
 80008d0:	48000c00 	.word	0x48000c00

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>

080008de <LL_AHB2_GRP1_EnableClock>:
{
 80008de:	b480      	push	{r7}
 80008e0:	b085      	sub	sp, #20
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4013      	ands	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000902:	68fb      	ldr	r3, [r7, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800091c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800091e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4313      	orrs	r3, r2
 8000926:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800092c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000934:	68fb      	ldr	r3, [r7, #12]
}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b09c      	sub	sp, #112	; 0x70
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2250      	movs	r2, #80	; 0x50
 800096e:	2100      	movs	r1, #0
 8000970:	4618      	mov	r0, r3
 8000972:	f018 fbdf 	bl	8019134 <memset>
  if(hpcd->Instance==USB)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <HAL_PCD_MspInit+0xa8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d136      	bne.n	80009ee <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000984:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000986:	2318      	movs	r3, #24
 8000988:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800098a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800098e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000990:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000994:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000996:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800099a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800099c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009a0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80009a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80009a6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4618      	mov	r0, r3
 80009ae:	f017 f9f7 	bl	8017da0 <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80009b8:	f7ff ff8c 	bl	80008d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	2001      	movs	r0, #1
 80009be:	f7ff ff8e 	bl	80008de <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80009d4:	230a      	movs	r3, #10
 80009d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f014 fd09 	bl	80153f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80009e6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80009ea:	f7ff ff91 	bl	8000910 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3770      	adds	r7, #112	; 0x70
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40006800 	.word	0x40006800

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f014 fba2 	bl	8015190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LL_AHB2_GRP1_EnableClock>:
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a74:	68fb      	ldr	r3, [r7, #12]
}
 8000a76:	bf00      	nop
 8000a78:	3714      	adds	r7, #20
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <LL_APB1_GRP1_EnableClock>:
{
 8000a82:	b480      	push	{r7}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8000abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aca:	4013      	ands	r3, r2
 8000acc:	658b      	str	r3, [r1, #88]	; 0x58
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <BSP_I2C1_Init+0x70>)
 8000ae8:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <BSP_I2C1_Init+0x74>)
 8000aea:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <BSP_I2C1_Init+0x78>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	1c5a      	adds	r2, r3, #1
 8000af2:	4918      	ldr	r1, [pc, #96]	; (8000b54 <BSP_I2C1_Init+0x78>)
 8000af4:	600a      	str	r2, [r1, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d122      	bne.n	8000b40 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8000afa:	4814      	ldr	r0, [pc, #80]	; (8000b4c <BSP_I2C1_Init+0x70>)
 8000afc:	f015 f9b6 	bl	8015e6c <HAL_I2C_GetState>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d11c      	bne.n	8000b40 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8000b06:	4811      	ldr	r0, [pc, #68]	; (8000b4c <BSP_I2C1_Init+0x70>)
 8000b08:	f000 f8ee 	bl	8000ce8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d116      	bne.n	8000b40 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <BSP_I2C1_Init+0x70>)
 8000b14:	f000 f8a4 	bl	8000c60 <MX_I2C1_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000b1e:	f06f 0307 	mvn.w	r3, #7
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	e00c      	b.n	8000b40 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4808      	ldr	r0, [pc, #32]	; (8000b4c <BSP_I2C1_Init+0x70>)
 8000b2a:	f015 fc4b 	bl	80163c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8000b34:	f06f 0307 	mvn.w	r3, #7
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	e001      	b.n	8000b40 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000400 	.word	0x20000400
 8000b50:	40005400 	.word	0x40005400
 8000b54:	20000454 	.word	0x20000454

08000b58 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <BSP_I2C1_DeInit+0x48>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d014      	beq.n	8000b94 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <BSP_I2C1_DeInit+0x48>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <BSP_I2C1_DeInit+0x48>)
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <BSP_I2C1_DeInit+0x48>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10b      	bne.n	8000b94 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <BSP_I2C1_DeInit+0x4c>)
 8000b7e:	f000 f8f7 	bl	8000d70 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000b82:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <BSP_I2C1_DeInit+0x4c>)
 8000b84:	f014 ff45 	bl	8015a12 <HAL_I2C_DeInit>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8000b8e:	f06f 0307 	mvn.w	r3, #7
 8000b92:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000454 	.word	0x20000454
 8000ba4:	20000400 	.word	0x20000400

08000ba8 <BSP_I2C1_Send>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Send(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	80fb      	strh	r3, [r7, #6]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Transmit(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000bbc:	88bb      	ldrh	r3, [r7, #4]
 8000bbe:	88f9      	ldrh	r1, [r7, #6]
 8000bc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bc4:	9200      	str	r2, [sp, #0]
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <BSP_I2C1_Send+0x50>)
 8000bca:	f014 ff65 	bl	8015a98 <HAL_I2C_Master_Transmit>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d00c      	beq.n	8000bee <BSP_I2C1_Send+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <BSP_I2C1_Send+0x50>)
 8000bd6:	f015 f957 	bl	8015e88 <HAL_I2C_GetError>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b04      	cmp	r3, #4
 8000bde:	d003      	beq.n	8000be8 <BSP_I2C1_Send+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000be0:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e002      	b.n	8000bee <BSP_I2C1_Send+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000be8:	f06f 0303 	mvn.w	r3, #3
 8000bec:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000400 	.word	0x20000400

08000bfc <BSP_I2C1_Recv>:
  * @param  DevAddr: Device address on Bus.
  * @param  pData: Data pointer
  * @param  Length: Data length
  * @retval BSP status
  */
int32_t BSP_I2C1_Recv(uint16_t DevAddr, uint8_t *pData, uint16_t Length) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	80fb      	strh	r3, [r7, #6]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]

  if (HAL_I2C_Master_Receive(&hi2c1, DevAddr, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000c10:	88bb      	ldrh	r3, [r7, #4]
 8000c12:	88f9      	ldrh	r1, [r7, #6]
 8000c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c18:	9200      	str	r2, [sp, #0]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	480b      	ldr	r0, [pc, #44]	; (8000c4c <BSP_I2C1_Recv+0x50>)
 8000c1e:	f015 f82f 	bl	8015c80 <HAL_I2C_Master_Receive>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00c      	beq.n	8000c42 <BSP_I2C1_Recv+0x46>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <BSP_I2C1_Recv+0x50>)
 8000c2a:	f015 f92d 	bl	8015e88 <HAL_I2C_GetError>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d003      	beq.n	8000c3c <BSP_I2C1_Recv+0x40>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8000c34:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	e002      	b.n	8000c42 <BSP_I2C1_Recv+0x46>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000c3c:	f06f 0303 	mvn.w	r3, #3
 8000c40:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000400 	.word	0x20000400

08000c50 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000c54:	f014 fab0 	bl	80151b8 <HAL_GetTick>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ce0 <MX_I2C1_Init+0x80>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00300F38;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <MX_I2C1_Init+0x84>)
 8000c76:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f014 fe26 	bl	80158f4 <HAL_I2C_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f015 fb85 	bl	80163c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f015 fbc7 	bl	801645a <HAL_I2CEx_ConfigDigitalFilter>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	00300f38 	.word	0x00300f38

08000ce8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b09c      	sub	sp, #112	; 0x70
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2250      	movs	r2, #80	; 0x50
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f018 fa1b 	bl	8019134 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d02:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f017 f847 	bl	8017da0 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	2002      	movs	r0, #2
 8000d14:	f7ff fe9c 	bl	8000a50 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8000d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1e:	2312      	movs	r3, #18
 8000d20:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000d2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d32:	4619      	mov	r1, r3
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <I2C1_MspInit+0x84>)
 8000d36:	f014 fb5f 	bl	80153f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8000d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d40:	2312      	movs	r3, #18
 8000d42:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000d50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d54:	4619      	mov	r1, r3
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <I2C1_MspInit+0x84>)
 8000d58:	f014 fb4e 	bl	80153f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d60:	f7ff fe8f 	bl	8000a82 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3770      	adds	r7, #112	; 0x70
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	48000400 	.word	0x48000400

08000d70 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000d78:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000d7c:	f7ff fe9a 	bl	8000ab4 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8000d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <I2C1_MspDeInit+0x2c>)
 8000d86:	f014 fca7 	bl	80156d8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <I2C1_MspDeInit+0x2c>)
 8000d90:	f014 fca2 	bl	80156d8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	48000400 	.word	0x48000400

08000da0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e00a      	b.n	8000dc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000db2:	f3af 8000 	nop.w
 8000db6:	4601      	mov	r1, r0
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	60ba      	str	r2, [r7, #8]
 8000dbe:	b2ca      	uxtb	r2, r1
 8000dc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dbf0      	blt.n	8000db2 <_read+0x12>
  }

  return len;
 8000dd0:	687b      	ldr	r3, [r7, #4]
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3718      	adds	r7, #24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000df2:	b480      	push	{r7}
 8000df4:	b083      	sub	sp, #12
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e02:	605a      	str	r2, [r3, #4]
  return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <_isatty>:

int _isatty(int file)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <_sbrk+0x5c>)
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <_sbrk+0x60>)
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <_sbrk+0x64>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <_sbrk+0x64>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <_sbrk+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d207      	bcs.n	8000e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e74:	f018 f926 	bl	80190c4 <__errno>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e82:	e009      	b.n	8000e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <_sbrk+0x64>)
 8000e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20030000 	.word	0x20030000
 8000ea4:	00000400 	.word	0x00000400
 8000ea8:	20000458 	.word	0x20000458
 8000eac:	200086c8 	.word	0x200086c8

08000eb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000eb4:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <SystemInit+0x98>)
 8000eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eba:	4a23      	ldr	r2, [pc, #140]	; (8000f48 <SystemInit+0x98>)
 8000ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000edc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <SystemInit+0x9c>)
 8000eea:	4013      	ands	r3, r2
 8000eec:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000efa:	f023 0305 	bic.w	r3, r3, #5
 8000efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f0e:	f023 0301 	bic.w	r3, r3, #1
 8000f12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1a:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <SystemInit+0xa0>)
 8000f1c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <SystemInit+0xa0>)
 8000f24:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00
 8000f4c:	faf6fefb 	.word	0xfaf6fefb
 8000f50:	22041000 	.word	0x22041000

08000f54 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000f54:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f56:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f58:	3304      	adds	r3, #4

08000f5a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000f5e:	d3f9      	bcc.n	8000f54 <CopyDataInit>
  bx lr
 8000f60:	4770      	bx	lr

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000f62:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000f64:	3004      	adds	r0, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000f66:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>
  bx lr
 8000f6a:	4770      	bx	lr

08000f6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f70:	f7ff ff9e 	bl	8000eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f74:	480b      	ldr	r0, [pc, #44]	; (8000fa4 <LoopForever+0x6>)
 8000f76:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <LoopForever+0xa>)
 8000f78:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <LoopForever+0xe>)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f7ff ffed 	bl	8000f5a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000f80:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <LoopForever+0x12>)
 8000f82:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <LoopForever+0x16>)
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <LoopForever+0x1a>)
 8000f86:	2300      	movs	r3, #0
 8000f88:	f7ff ffe7 	bl	8000f5a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000f8c:	480b      	ldr	r0, [pc, #44]	; (8000fbc <LoopForever+0x1e>)
 8000f8e:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <LoopForever+0x22>)
 8000f90:	2300      	movs	r3, #0
 8000f92:	f7ff ffe8 	bl	8000f66 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f96:	f018 f89b 	bl	80190d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f9a:	f7ff fb85 	bl	80006a8 <main>

08000f9e <LoopForever>:

LoopForever:
  b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   r0, =_estack
 8000fa0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	200000ec 	.word	0x200000ec
 8000fac:	0801a4e4 	.word	0x0801a4e4
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000fb0:	20030000 	.word	0x20030000
 8000fb4:	20030000 	.word	0x20030000
 8000fb8:	0801a5c8 	.word	0x0801a5c8
  INIT_BSS _sbss, _ebss
 8000fbc:	200000f0 	.word	0x200000f0
 8000fc0:	200086c4 	.word	0x200086c4

08000fc4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC1_IRQHandler>

08000fc6 <LL_AHB2_GRP1_EnableClock>:
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b085      	sub	sp, #20
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <VL53L1A2_Init>:
  * @brief Initialize X-NUCLEO-53L1A2 STM32 expansion board
  * @note All devices XSDN are asserted and display is turned off
  * @return 0 on success
  */
int32_t VL53L1A2_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
  int32_t status = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
  uint8_t ExpanderData[2];

  if (InitCounter++ == 0U)
 8001002:	4b36      	ldr	r3, [pc, #216]	; (80010dc <VL53L1A2_Init+0xe4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	1c5a      	adds	r2, r3, #1
 8001008:	4934      	ldr	r1, [pc, #208]	; (80010dc <VL53L1A2_Init+0xe4>)
 800100a:	600a      	str	r2, [r1, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d154      	bne.n	80010ba <VL53L1A2_Init+0xc2>
  {
    status |= _I2cFailRecover();
 8001010:	f000 f8d4 	bl	80011bc <_I2cFailRecover>
 8001014:	4602      	mov	r2, r0
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4313      	orrs	r3, r2
 800101a:	607b      	str	r3, [r7, #4]
    status |= VL53L1A2_I2C_Init();
 800101c:	f7ff fd5e 	bl	8000adc <BSP_I2C1_Init>
 8001020:	4602      	mov	r2, r0
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4313      	orrs	r3, r2
 8001026:	607b      	str	r3, [r7, #4]

    if (status != BSP_ERROR_NONE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d147      	bne.n	80010be <VL53L1A2_Init+0xc6>
    {
      goto done_err;
    }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR0, 0, ExpanderData, 2);
 800102e:	463a      	mov	r2, r7
 8001030:	2302      	movs	r3, #2
 8001032:	2100      	movs	r1, #0
 8001034:	2086      	movs	r0, #134	; 0x86
 8001036:	f000 f953 	bl	80012e0 <_ExpanderRd>
 800103a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d13f      	bne.n	80010c2 <VL53L1A2_Init+0xca>
 8001042:	783b      	ldrb	r3, [r7, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d13c      	bne.n	80010c2 <VL53L1A2_Init+0xca>
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b16      	cmp	r3, #22
 800104c:	d139      	bne.n	80010c2 <VL53L1A2_Init+0xca>
	  {
      VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR0);
      goto done_err;
	  }

	  status = _ExpanderRd(I2C_EXPANDER_ADDR1, 0, ExpanderData, 2);
 800104e:	463a      	mov	r2, r7
 8001050:	2302      	movs	r3, #2
 8001052:	2100      	movs	r1, #0
 8001054:	2084      	movs	r0, #132	; 0x84
 8001056:	f000 f943 	bl	80012e0 <_ExpanderRd>
 800105a:	6078      	str	r0, [r7, #4]

	  if ((status != 0) || (ExpanderData[0] != 0x00U) || (ExpanderData[1] != 0x16U))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d131      	bne.n	80010c6 <VL53L1A2_Init+0xce>
 8001062:	783b      	ldrb	r3, [r7, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d12e      	bne.n	80010c6 <VL53L1A2_Init+0xce>
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b16      	cmp	r3, #22
 800106c:	d12b      	bne.n	80010c6 <VL53L1A2_Init+0xce>
	  {
		  VL53L1A2_ErrLog("I2C Expander @0x%02X not detected", (int)I2C_EXPANDER_ADDR1);
		  goto done_err;
	  }

	  CurIOVal.u32 = 0x0U;
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <VL53L1A2_Init+0xe8>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

	  /* setup expander   i/o direction  all output but exp1 bit 14*/
	  ExpanderData[0] = 0xFFU;
 8001074:	23ff      	movs	r3, #255	; 0xff
 8001076:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xFFU;
 8001078:	23ff      	movs	r3, #255	; 0xff
 800107a:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPDR, ExpanderData, 2);
 800107c:	463a      	mov	r2, r7
 800107e:	2302      	movs	r3, #2
 8001080:	2114      	movs	r1, #20
 8001082:	2086      	movs	r0, #134	; 0x86
 8001084:	f000 f95e 	bl	8001344 <_ExpanderWR>
 8001088:	6078      	str	r0, [r7, #4]

	  if (status)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d11c      	bne.n	80010ca <VL53L1A2_Init+0xd2>
	  {
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR0);
		goto done_err;
	  }

	  ExpanderData[0] = 0xFFU;
 8001090:	23ff      	movs	r3, #255	; 0xff
 8001092:	703b      	strb	r3, [r7, #0]
	  ExpanderData[1] = 0xBFU; /* all but bit 14-15 that is pb1 and xhurt */
 8001094:	23bf      	movs	r3, #191	; 0xbf
 8001096:	707b      	strb	r3, [r7, #1]

	  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPDR, ExpanderData, 2);
 8001098:	463a      	mov	r2, r7
 800109a:	2302      	movs	r3, #2
 800109c:	2114      	movs	r1, #20
 800109e:	2084      	movs	r0, #132	; 0x84
 80010a0:	f000 f950 	bl	8001344 <_ExpanderWR>
 80010a4:	6078      	str	r0, [r7, #4]

	  if (status)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d110      	bne.n	80010ce <VL53L1A2_Init+0xd6>
		VL53L1A2_ErrLog("Set Expander @0x%02X DR", I2C_EXPANDER_ADDR1);
		goto done_err;
	  }

	  /* shut down all segment and all device */
	  CurIOVal.u32 = 0x7FU + (0x7FU << 7) + (0x7FU << 16) + (0x7FU << (16 + 7));
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <VL53L1A2_Init+0xe8>)
 80010ae:	f06f 22c0 	mvn.w	r2, #3221274624	; 0xc000c000
 80010b2:	601a      	str	r2, [r3, #0]

	  status = _ExpandersSetAllIO();
 80010b4:	f000 f8f4 	bl	80012a0 <_ExpandersSetAllIO>
 80010b8:	6078      	str	r0, [r7, #4]
	  {
		VL53L1A2_ErrLog("Set initial i/o ");
	  }
  }

done_err:
 80010ba:	bf00      	nop
 80010bc:	e008      	b.n	80010d0 <VL53L1A2_Init+0xd8>
      goto done_err;
 80010be:	bf00      	nop
 80010c0:	e006      	b.n	80010d0 <VL53L1A2_Init+0xd8>
      goto done_err;
 80010c2:	bf00      	nop
 80010c4:	e004      	b.n	80010d0 <VL53L1A2_Init+0xd8>
		  goto done_err;
 80010c6:	bf00      	nop
 80010c8:	e002      	b.n	80010d0 <VL53L1A2_Init+0xd8>
		goto done_err;
 80010ca:	bf00      	nop
 80010cc:	e000      	b.n	80010d0 <VL53L1A2_Init+0xd8>
		goto done_err;
 80010ce:	bf00      	nop
  return status;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000045c 	.word	0x2000045c
 80010e0:	20000460 	.word	0x20000460

080010e4 <VL53L1A2_ResetId>:
  * @param  DevNo The device number, use @ref VL53L1A2_dev_e.
  * @param  state  State of the device reset (xsdn) pin @warning reset pin is active low
  * @return 0 on success
  */
int32_t VL53L1A2_ResetId(uint8_t DevNo, uint8_t state)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	460a      	mov	r2, r1
 80010ee:	71fb      	strb	r3, [r7, #7]
 80010f0:	4613      	mov	r3, r2
 80010f2:	71bb      	strb	r3, [r7, #6]
  int32_t status;

  switch (DevNo)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d037      	beq.n	800116a <VL53L1A2_ResetId+0x86>
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	dc4e      	bgt.n	800119c <VL53L1A2_ResetId+0xb8>
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d01a      	beq.n	8001138 <VL53L1A2_ResetId+0x54>
 8001102:	2b01      	cmp	r3, #1
 8001104:	d14a      	bne.n	800119c <VL53L1A2_ResetId+0xb8>
  {
    case VL53L1A2_DEV_CENTER :
      CurIOVal.bytes[3] &= ~0x80U; /* bit 15 expander 1  => byte #3 */
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 8001108:	78db      	ldrb	r3, [r3, #3]
 800110a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800110e:	b2da      	uxtb	r2, r3
 8001110:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 8001112:	70da      	strb	r2, [r3, #3]

      if (state)
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <VL53L1A2_ResetId+0x44>
      {
        CurIOVal.bytes[3] |= 0x80U;  /* bit 15 expander 1  => byte #3 */
 800111a:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 800111c:	78db      	ldrb	r3, [r3, #3]
 800111e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b22      	ldr	r3, [pc, #136]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 8001126:	70da      	strb	r2, [r3, #3]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR + 1, &CurIOVal.bytes[3], 1);
 8001128:	2301      	movs	r3, #1
 800112a:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <VL53L1A2_ResetId+0xd0>)
 800112c:	2113      	movs	r1, #19
 800112e:	2084      	movs	r0, #132	; 0x84
 8001130:	f000 f908 	bl	8001344 <_ExpanderWR>
 8001134:	60f8      	str	r0, [r7, #12]
      break;
 8001136:	e035      	b.n	80011a4 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_LEFT :
      CurIOVal.bytes[1] &= ~0x40U; /* bit 14 expander 0 => byte #1*/
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 800113a:	785b      	ldrb	r3, [r3, #1]
 800113c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 8001144:	705a      	strb	r2, [r3, #1]

      if (state)
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <VL53L1A2_ResetId+0x76>
      {
        CurIOVal.bytes[1] |= 0x40U;  /* bit 14 expander 0 => byte #1*/
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 800114e:	785b      	ldrb	r3, [r3, #1]
 8001150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 8001158:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800115a:	2301      	movs	r3, #1
 800115c:	4a16      	ldr	r2, [pc, #88]	; (80011b8 <VL53L1A2_ResetId+0xd4>)
 800115e:	2113      	movs	r1, #19
 8001160:	2086      	movs	r0, #134	; 0x86
 8001162:	f000 f8ef 	bl	8001344 <_ExpanderWR>
 8001166:	60f8      	str	r0, [r7, #12]
      break;
 8001168:	e01c      	b.n	80011a4 <VL53L1A2_ResetId+0xc0>

    case VL53L1A2_DEV_RIGHT :
      CurIOVal.bytes[1] &= ~0x80U; /* bit 15 expander 0  => byte #1 */
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 800116c:	785b      	ldrb	r3, [r3, #1]
 800116e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 8001176:	705a      	strb	r2, [r3, #1]

      if (state)
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <VL53L1A2_ResetId+0xa8>
      {
        CurIOVal.bytes[1] |= 0x80U;  /* bit 15 expander 0 => byte #1*/
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <VL53L1A2_ResetId+0xcc>)
 800118a:	705a      	strb	r2, [r3, #1]
      }

      status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR + 1, &CurIOVal.bytes[1], 1);
 800118c:	2301      	movs	r3, #1
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <VL53L1A2_ResetId+0xd4>)
 8001190:	2113      	movs	r1, #19
 8001192:	2086      	movs	r0, #134	; 0x86
 8001194:	f000 f8d6 	bl	8001344 <_ExpanderWR>
 8001198:	60f8      	str	r0, [r7, #12]
      break;
 800119a:	e003      	b.n	80011a4 <VL53L1A2_ResetId+0xc0>

    default:
      VL53L1A2_ErrLog("Invalid DevNo %d", DevNo);
      status = -1;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
 80011a0:	60fb      	str	r3, [r7, #12]
      goto done;
 80011a2:	e000      	b.n	80011a6 <VL53L1A2_ResetId+0xc2>
  if (status)
  {
    VL53L1A2_ErrLog("expander i/o error for DevNo %d state %d ", DevNo, state);
  }

done:
 80011a4:	bf00      	nop
  return status;
 80011a6:	68fb      	ldr	r3, [r7, #12]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000460 	.word	0x20000460
 80011b4:	20000463 	.word	0x20000463
 80011b8:	20000461 	.word	0x20000461

080011bc <_I2cFailRecover>:
  * We may get reset in middle of an i2c access (h/w reset button, debug or f/w load)
  * hence some agent on bus may be in middle of a transaction and can create issue or even prevent starting (SDA is low)
  * this routine does use gpio to manipulate and recover i2c bus line in all cases.
  */
static int32_t _I2cFailRecover(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	75bb      	strb	r3, [r7, #22]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 80011c6:	4b34      	ldr	r3, [pc, #208]	; (8001298 <_I2cFailRecover+0xdc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d101      	bne.n	80011d2 <_I2cFailRecover+0x16>
  {
    return BSP_ERROR_NONE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e05e      	b.n	8001290 <_I2cFailRecover+0xd4>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2002      	movs	r0, #2
 80011d4:	f7ff fef7 	bl	8000fc6 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SCL_GPIO_PIN;
 80011d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011de:	2311      	movs	r3, #17
 80011e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	482c      	ldr	r0, [pc, #176]	; (800129c <_I2cFailRecover+0xe0>)
 80011ec:	f014 f904 	bl	80153f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L1A2_I2C_SDA_GPIO_PIN;
 80011f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011f6:	2311      	movs	r3, #17
 80011f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(VL53L1A2_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 80011fe:	463b      	mov	r3, r7
 8001200:	4619      	mov	r1, r3
 8001202:	4826      	ldr	r0, [pc, #152]	; (800129c <_I2cFailRecover+0xe0>)
 8001204:	f014 f8f8 	bl	80153f8 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800120e:	4823      	ldr	r0, [pc, #140]	; (800129c <_I2cFailRecover+0xe0>)
 8001210:	f014 fb58 	bl	80158c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121a:	4820      	ldr	r0, [pc, #128]	; (800129c <_I2cFailRecover+0xe0>)
 800121c:	f014 fb52 	bl	80158c4 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	75fb      	strb	r3, [r7, #23]
 8001224:	e014      	b.n	8001250 <_I2cFailRecover+0x94>
    {
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122c:	481b      	ldr	r0, [pc, #108]	; (800129c <_I2cFailRecover+0xe0>)
 800122e:	f014 fb49 	bl	80158c4 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001232:	2001      	movs	r0, #1
 8001234:	f013 ffd8 	bl	80151e8 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800123e:	4817      	ldr	r0, [pc, #92]	; (800129c <_I2cFailRecover+0xe0>)
 8001240:	f014 fb40 	bl	80158c4 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f013 ffcf 	bl	80151e8 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 800124a:	7dfb      	ldrb	r3, [r7, #23]
 800124c:	3301      	adds	r3, #1
 800124e:	75fb      	strb	r3, [r7, #23]
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b09      	cmp	r3, #9
 8001254:	d9e7      	bls.n	8001226 <_I2cFailRecover+0x6a>
    }
    retry_cnt++;
 8001256:	7dbb      	ldrb	r3, [r7, #22]
 8001258:	3301      	adds	r3, #1
 800125a:	75bb      	strb	r3, [r7, #22]
  } while ((HAL_GPIO_ReadPin(VL53L1A2_I2C_SDA_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 800125c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001260:	480e      	ldr	r0, [pc, #56]	; (800129c <_I2cFailRecover+0xe0>)
 8001262:	f014 fb17 	bl	8015894 <HAL_GPIO_ReadPin>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_I2cFailRecover+0xb6>
 800126c:	7dbb      	ldrb	r3, [r7, #22]
 800126e:	2b06      	cmp	r3, #6
 8001270:	d9d6      	bls.n	8001220 <_I2cFailRecover+0x64>

  if (HAL_GPIO_ReadPin(VL53L1A2_I2C_SCL_GPIO_PORT, VL53L1A2_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8001272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001276:	4809      	ldr	r0, [pc, #36]	; (800129c <_I2cFailRecover+0xe0>)
 8001278:	f014 fb0c 	bl	8015894 <HAL_GPIO_ReadPin>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <_I2cFailRecover+0xcc>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8001282:	f06f 0304 	mvn.w	r3, #4
 8001286:	e003      	b.n	8001290 <_I2cFailRecover+0xd4>
  }

  is_already_init = 1U;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <_I2cFailRecover+0xdc>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000464 	.word	0x20000464
 800129c:	48000400 	.word	0x48000400

080012a0 <_ExpandersSetAllIO>:
/**
  * @brief Set all i2c expended gpio in one go
  * @return i/o operation status
  */
static int32_t _ExpandersSetAllIO(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  int32_t status;

  status = _ExpanderWR(I2C_EXPANDER_ADDR0, GPSR, &CurIOVal.bytes[0], 2);
 80012a6:	2302      	movs	r3, #2
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <_ExpandersSetAllIO+0x38>)
 80012aa:	2112      	movs	r1, #18
 80012ac:	2086      	movs	r0, #134	; 0x86
 80012ae:	f000 f849 	bl	8001344 <_ExpanderWR>
 80012b2:	6078      	str	r0, [r7, #4]

  if (status)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d107      	bne.n	80012ca <_ExpandersSetAllIO+0x2a>
  {
    goto done_err;
  }

  status = _ExpanderWR(I2C_EXPANDER_ADDR1, GPSR, &CurIOVal.bytes[2], 2);
 80012ba:	2302      	movs	r3, #2
 80012bc:	4a07      	ldr	r2, [pc, #28]	; (80012dc <_ExpandersSetAllIO+0x3c>)
 80012be:	2112      	movs	r1, #18
 80012c0:	2084      	movs	r0, #132	; 0x84
 80012c2:	f000 f83f 	bl	8001344 <_ExpanderWR>
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	e000      	b.n	80012cc <_ExpandersSetAllIO+0x2c>
    goto done_err;
 80012ca:	bf00      	nop

done_err:
  return status;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000460 	.word	0x20000460
 80012dc:	20000462 	.word	0x20000462

080012e0 <_ExpanderRd>:
  * @param data       read data buffer
  * @param n_data     number of byte to read
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderRd(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr;

  RegAddr = index;
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	74fb      	strb	r3, [r7, #19]
  VL53L1A2_GetI2cBus();

  do
  {
    status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, &RegAddr, 1, 100);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	b299      	uxth	r1, r3
 80012f8:	f107 0213 	add.w	r2, r7, #19
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	480f      	ldr	r0, [pc, #60]	; (8001340 <_ExpanderRd+0x60>)
 8001304:	f014 fbc8 	bl	8015a98 <HAL_I2C_Master_Transmit>
 8001308:	4603      	mov	r3, r0
 800130a:	617b      	str	r3, [r7, #20]

    if (status)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d110      	bne.n	8001334 <_ExpanderRd+0x54>
    {
      break;
    }

    status = HAL_I2C_Master_Receive(&VL53L1A2_hi2c, I2cExpAddr, data, n_data, n_data * 100);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	b299      	uxth	r1, r3
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	b29a      	uxth	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2064      	movs	r0, #100	; 0x64
 800131e:	fb00 f303 	mul.w	r3, r0, r3
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <_ExpanderRd+0x60>)
 800132a:	f014 fca9 	bl	8015c80 <HAL_I2C_Master_Receive>
 800132e:	4603      	mov	r3, r0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e000      	b.n	8001336 <_ExpanderRd+0x56>
      break;
 8001334:	bf00      	nop
  } while (0);

  VL53L1A2_PutI2cBus();

  return status;
 8001336:	697b      	ldr	r3, [r7, #20]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000400 	.word	0x20000400

08001344 <_ExpanderWR>:
  * @param data       data buffer
  * @param n_data     number of byte to write
  * @return           of if ok else i2c I/O operation status
  */
static int32_t _ExpanderWR(uint32_t I2cExpAddr, uint32_t index, uint8_t *data, uint32_t n_data)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af02      	add	r7, sp, #8
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
 8001350:	603b      	str	r3, [r7, #0]
  int32_t status;
  uint8_t RegAddr[0x10];

  RegAddr[0] = index;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	753b      	strb	r3, [r7, #20]
  memcpy(RegAddr + 1, data, n_data);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	3301      	adds	r3, #1
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	f017 fed8 	bl	8019118 <memcpy>

  VL53L1A2_GetI2cBus();
  status = HAL_I2C_Master_Transmit(&VL53L1A2_hi2c, I2cExpAddr, RegAddr, n_data + 1, 100);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	b299      	uxth	r1, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	b29b      	uxth	r3, r3
 8001374:	f107 0214 	add.w	r2, r7, #20
 8001378:	2064      	movs	r0, #100	; 0x64
 800137a:	9000      	str	r0, [sp, #0]
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <_ExpanderWR+0x4c>)
 800137e:	f014 fb8b 	bl	8015a98 <HAL_I2C_Master_Transmit>
 8001382:	4603      	mov	r3, r0
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  VL53L1A2_PutI2cBus();

  return status;
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001388:	4618      	mov	r0, r3
 800138a:	3728      	adds	r7, #40	; 0x28
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000400 	.word	0x20000400

08001394 <VL53L1A2_RANGING_SENSOR_Init>:
  * @brief Initialize the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Init(uint32_t Instance)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d903      	bls.n	80013aa <VL53L1A2_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013a2:	f06f 0301 	mvn.w	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e014      	b.n	80013d4 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else if (VL53L1A2_Init() != 0)
 80013aa:	f7ff fe25 	bl	8000ff8 <VL53L1A2_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <VL53L1A2_RANGING_SENSOR_Init+0x28>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80013b4:	f06f 0303 	mvn.w	r3, #3
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	e00b      	b.n	80013d4 <VL53L1A2_RANGING_SENSOR_Init+0x40>
  }
  else
  {
    /* reset XSHUT (XSDN) pin */
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_OFF);
 80013bc:	2101      	movs	r1, #1
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f8d6 	bl	8001570 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    (void)VL53L1A2_RANGING_SENSOR_SetPowerMode(Instance, RANGING_SENSOR_POWERMODE_ON);
 80013c4:	2100      	movs	r1, #0
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f8d2 	bl	8001570 <VL53L1A2_RANGING_SENSOR_SetPowerMode>

    ret = VL53L1CB_Probe(Instance);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f90f 	bl	80015f0 <VL53L1CB_Probe>
 80013d2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <VL53L1A2_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d903      	bls.n	80013f8 <VL53L1A2_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013f0:	f06f 0301 	mvn.w	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e012      	b.n	800141e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ReadID(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <VL53L1A2_RANGING_SENSOR_ReadID+0x48>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	490b      	ldr	r1, [pc, #44]	; (800142c <VL53L1A2_RANGING_SENSOR_ReadID+0x4c>)
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	4610      	mov	r0, r2
 800140a:	4798      	blx	r3
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	da03      	bge.n	800141a <VL53L1A2_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001412:	f06f 0304 	mvn.w	r3, #4
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e001      	b.n	800141e <VL53L1A2_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000474 	.word	0x20000474
 800142c:	20000468 	.word	0x20000468

08001430 <VL53L1A2_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d903      	bls.n	8001448 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001440:	f06f 0301 	mvn.w	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	e012      	b.n	800146e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->ConfigProfile(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x48>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	490b      	ldr	r1, [pc, #44]	; (800147c <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x4c>)
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	4610      	mov	r0, r2
 800145a:	4798      	blx	r3
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	da03      	bge.n	800146a <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001462:	f06f 0304 	mvn.w	r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e001      	b.n	800146e <VL53L1A2_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000474 	.word	0x20000474
 800147c:	20000468 	.word	0x20000468

08001480 <VL53L1A2_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d903      	bls.n	8001498 <VL53L1A2_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001490:	f06f 0301 	mvn.w	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	e012      	b.n	80014be <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->GetDistance(VL53L1A2_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <VL53L1A2_RANGING_SENSOR_GetDistance+0x48>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	490b      	ldr	r1, [pc, #44]	; (80014cc <VL53L1A2_RANGING_SENSOR_GetDistance+0x4c>)
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014a6:	6839      	ldr	r1, [r7, #0]
 80014a8:	4610      	mov	r0, r2
 80014aa:	4798      	blx	r3
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da03      	bge.n	80014ba <VL53L1A2_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80014b2:	f06f 0304 	mvn.w	r3, #4
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e001      	b.n	80014be <VL53L1A2_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000474 	.word	0x20000474
 80014cc:	20000468 	.word	0x20000468

080014d0 <VL53L1A2_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired RANGING_SENSOR_Mode_t
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d903      	bls.n	80014e8 <VL53L1A2_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014e0:	f06f 0301 	mvn.w	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	e012      	b.n	800150e <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->Start(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <VL53L1A2_RANGING_SENSOR_Start+0x48>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6a1b      	ldr	r3, [r3, #32]
 80014ee:	490b      	ldr	r1, [pc, #44]	; (800151c <VL53L1A2_RANGING_SENSOR_Start+0x4c>)
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014f6:	6839      	ldr	r1, [r7, #0]
 80014f8:	4610      	mov	r0, r2
 80014fa:	4798      	blx	r3
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	da03      	bge.n	800150a <VL53L1A2_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001502:	f06f 0304 	mvn.w	r3, #4
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e001      	b.n	800150e <VL53L1A2_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800150e:	68fb      	ldr	r3, [r7, #12]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000474 	.word	0x20000474
 800151c:	20000468 	.word	0x20000468

08001520 <VL53L1A2_RANGING_SENSOR_SetAddress>:
  * @param Instance    Ranging sensor instance.
  * @param Address     New I2C address.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetAddress(uint32_t Instance, uint32_t Address)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d903      	bls.n	8001538 <VL53L1A2_RANGING_SENSOR_SetAddress+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001530:	f06f 0301 	mvn.w	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	e012      	b.n	800155e <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else if (VL53L1A2_RANGING_SENSOR_Drv->SetAddress(VL53L1A2_RANGING_SENSOR_CompObj[Instance], Address) < 0)
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <VL53L1A2_RANGING_SENSOR_SetAddress+0x48>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	490b      	ldr	r1, [pc, #44]	; (800156c <VL53L1A2_RANGING_SENSOR_SetAddress+0x4c>)
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	4610      	mov	r0, r2
 800154a:	4798      	blx	r3
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	da03      	bge.n	800155a <VL53L1A2_RANGING_SENSOR_SetAddress+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001552:	f06f 0304 	mvn.w	r3, #4
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	e001      	b.n	800155e <VL53L1A2_RANGING_SENSOR_SetAddress+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800155e:	68fb      	ldr	r3, [r7, #12]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000474 	.word	0x20000474
 800156c:	20000468 	.word	0x20000468

08001570 <VL53L1A2_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L1A2_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d903      	bls.n	8001588 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001580:	f06f 0301 	mvn.w	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e02e      	b.n	80015e6 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_ON)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d112      	bne.n	80015b4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x44>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 1) < 0)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2101      	movs	r1, #1
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff fda5 	bl	80010e4 <VL53L1A2_ResetId>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	da03      	bge.n	80015a8 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80015a0:	f06f 0303 	mvn.w	r3, #3
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	e01e      	b.n	80015e6 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 80015a8:	2002      	movs	r0, #2
 80015aa:	f013 fe1d 	bl	80151e8 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e018      	b.n	80015e6 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else if (PowerMode == RANGING_SENSOR_POWERMODE_OFF)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d112      	bne.n	80015e0 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x70>
  {
    if (VL53L1A2_ResetId((uint8_t)Instance, 0) < 0)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fd8f 	bl	80010e4 <VL53L1A2_ResetId>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da03      	bge.n	80015d4 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x64>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80015cc:	f06f 0303 	mvn.w	r3, #3
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	e008      	b.n	80015e6 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
    else
    {
      HAL_Delay(2);
 80015d4:	2002      	movs	r0, #2
 80015d6:	f013 fe07 	bl	80151e8 <HAL_Delay>
      ret = BSP_ERROR_NONE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	e002      	b.n	80015e6 <VL53L1A2_RANGING_SENSOR_SetPowerMode+0x76>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015e0:	f06f 0301 	mvn.w	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80015e6:	68fb      	ldr	r3, [r7, #12]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <VL53L1CB_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L1CB_Probe(uint32_t Instance)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  VL53L1CB_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L1CB_Object_t   VL53L1CBObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L1CB_ADDRESS;
 80015f8:	2352      	movs	r3, #82	; 0x52
 80015fa:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L1A2_I2C_Init;
 80015fc:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <VL53L1CB_Probe+0xf0>)
 80015fe:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L1A2_I2C_DeInit;
 8001600:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <VL53L1CB_Probe+0xf4>)
 8001602:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L1A2_I2C_WriteReg;
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <VL53L1CB_Probe+0xf8>)
 8001606:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L1A2_I2C_ReadReg;
 8001608:	4b38      	ldr	r3, [pc, #224]	; (80016ec <VL53L1CB_Probe+0xfc>)
 800160a:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L1A2_GetTick;
 800160c:	4b38      	ldr	r3, [pc, #224]	; (80016f0 <VL53L1CB_Probe+0x100>)
 800160e:	623b      	str	r3, [r7, #32]

  if (VL53L1CB_RegisterBusIO(&(VL53L1CBObj[Instance]), &IOCtx) != VL53L1CB_OK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f642 2290 	movw	r2, #10896	; 0x2a90
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	4a36      	ldr	r2, [pc, #216]	; (80016f4 <VL53L1CB_Probe+0x104>)
 800161c:	4413      	add	r3, r2
 800161e:	f107 020c 	add.w	r2, r7, #12
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f013 f824 	bl	8014672 <VL53L1CB_RegisterBusIO>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <VL53L1CB_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001630:	f06f 0304 	mvn.w	r3, #4
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
 8001636:	e04d      	b.n	80016d4 <VL53L1CB_Probe+0xe4>
  }
  else if (VL53L1CB_ReadID(&(VL53L1CBObj[Instance]), &id) != VL53L1CB_OK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f642 2290 	movw	r2, #10896	; 0x2a90
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	4a2c      	ldr	r2, [pc, #176]	; (80016f4 <VL53L1CB_Probe+0x104>)
 8001644:	4413      	add	r3, r2
 8001646:	f107 0208 	add.w	r2, r7, #8
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f013 f8cc 	bl	80147ea <VL53L1CB_ReadID>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <VL53L1CB_Probe+0x70>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8001658:	f06f 0304 	mvn.w	r3, #4
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
 800165e:	e039      	b.n	80016d4 <VL53L1CB_Probe+0xe4>
  }
  else
  {
    if (id != VL53L1CB_ID)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	f64e 22cc 	movw	r2, #60108	; 0xeacc
 8001666:	4293      	cmp	r3, r2
 8001668:	d003      	beq.n	8001672 <VL53L1CB_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800166a:	f06f 0306 	mvn.w	r3, #6
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
 8001670:	e030      	b.n	80016d4 <VL53L1CB_Probe+0xe4>
    }
    else
    {
      VL53L1A2_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L1CB_RANGING_SENSOR_Driver;
 8001672:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <VL53L1CB_Probe+0x108>)
 8001674:	4a21      	ldr	r2, [pc, #132]	; (80016fc <VL53L1CB_Probe+0x10c>)
 8001676:	601a      	str	r2, [r3, #0]
      VL53L1A2_RANGING_SENSOR_CompObj[Instance] = &(VL53L1CBObj[Instance]);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f642 2290 	movw	r2, #10896	; 0x2a90
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <VL53L1CB_Probe+0x104>)
 8001684:	441a      	add	r2, r3
 8001686:	491e      	ldr	r1, [pc, #120]	; (8001700 <VL53L1CB_Probe+0x110>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (VL53L1A2_RANGING_SENSOR_Drv->Init(VL53L1A2_RANGING_SENSOR_CompObj[Instance]) != VL53L1CB_OK)
 800168e:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <VL53L1CB_Probe+0x108>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	491a      	ldr	r1, [pc, #104]	; (8001700 <VL53L1CB_Probe+0x110>)
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800169c:	4610      	mov	r0, r2
 800169e:	4798      	blx	r3
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <VL53L1CB_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80016a6:	f06f 0304 	mvn.w	r3, #4
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
 80016ac:	e012      	b.n	80016d4 <VL53L1CB_Probe+0xe4>
      }
      else if (VL53L1A2_RANGING_SENSOR_Drv->GetCapabilities(VL53L1A2_RANGING_SENSOR_CompObj[Instance], &VL53L1A2_RANGING_SENSOR_Cap) != VL53L1CB_OK)
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <VL53L1CB_Probe+0x108>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4912      	ldr	r1, [pc, #72]	; (8001700 <VL53L1CB_Probe+0x110>)
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016bc:	4911      	ldr	r1, [pc, #68]	; (8001704 <VL53L1CB_Probe+0x114>)
 80016be:	4610      	mov	r0, r2
 80016c0:	4798      	blx	r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <VL53L1CB_Probe+0xe0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80016c8:	f06f 0304 	mvn.w	r3, #4
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
 80016ce:	e001      	b.n	80016d4 <VL53L1CB_Probe+0xe4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	08000add 	.word	0x08000add
 80016e4:	08000b59 	.word	0x08000b59
 80016e8:	08000ba9 	.word	0x08000ba9
 80016ec:	08000bfd 	.word	0x08000bfd
 80016f0:	08000c51 	.word	0x08000c51
 80016f4:	20000488 	.word	0x20000488
 80016f8:	20000474 	.word	0x20000474
 80016fc:	20000038 	.word	0x20000038
 8001700:	20000468 	.word	0x20000468
 8001704:	20000478 	.word	0x20000478

08001708 <CheckValidRectRoi>:

}


static VL53L1_Error CheckValidRectRoi(VL53L1_UserRoi_t ROI)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001714:	793b      	ldrb	r3, [r7, #4]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	d808      	bhi.n	800172c <CheckValidRectRoi+0x24>
 800171a:	797b      	ldrb	r3, [r7, #5]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d805      	bhi.n	800172c <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001720:	79bb      	ldrb	r3, [r7, #6]
	if ((ROI.TopLeftX > 15) || (ROI.TopLeftY > 15) ||
 8001722:	2b0f      	cmp	r3, #15
 8001724:	d802      	bhi.n	800172c <CheckValidRectRoi+0x24>
		(ROI.BotRightX > 15) || (ROI.BotRightY > 15))
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d901      	bls.n	8001730 <CheckValidRectRoi+0x28>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800172c:	23fc      	movs	r3, #252	; 0xfc
 800172e:	73fb      	strb	r3, [r7, #15]

	if ((ROI.TopLeftX > ROI.BotRightX) || (ROI.TopLeftY < ROI.BotRightY))
 8001730:	793a      	ldrb	r2, [r7, #4]
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	429a      	cmp	r2, r3
 8001736:	d803      	bhi.n	8001740 <CheckValidRectRoi+0x38>
 8001738:	797a      	ldrb	r2, [r7, #5]
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	429a      	cmp	r2, r3
 800173e:	d201      	bcs.n	8001744 <CheckValidRectRoi+0x3c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001740:	23fc      	movs	r3, #252	; 0xfc
 8001742:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <VL53L1_SetDeviceAddress>:




VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3318      	adds	r3, #24
 8001768:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8001770:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	2101      	movs	r1, #1
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f012 fd7d 	bl	801427c <VL53L1_WrByte>
 8001782:	4603      	mov	r3, r0
 8001784:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001790:	b2da      	uxtb	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001796:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d105      	bne.n	80017c2 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 80017b6:	2101      	movs	r1, #1
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f002 fc56 	bl	800406a <VL53L1_data_init>
 80017be:	4603      	mov	r3, r0
 80017c0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10b      	bne.n	80017e2 <VL53L1_DataInit+0x40>
		pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3318      	adds	r3, #24
 80017ce:	60bb      	str	r3, [r7, #8]
		memset(&pdev->per_vcsel_cal_data, 0,
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 80017d6:	3308      	adds	r3, #8
 80017d8:	220c      	movs	r2, #12
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f017 fca9 	bl	8019134 <memset>
				sizeof(pdev->per_vcsel_cal_data));
	}

	if (Status == VL53L1_ERROR_NONE)
 80017e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <VL53L1_DataInit+0x54>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80017f6:	2300      	movs	r3, #0
 80017f8:	73bb      	strb	r3, [r7, #14]
 80017fa:	e012      	b.n	8001822 <VL53L1_DataInit+0x80>
		if (Status == VL53L1_ERROR_NONE)
 80017fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d112      	bne.n	800182a <VL53L1_DataInit+0x88>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8001804:	7bbb      	ldrb	r3, [r7, #14]
 8001806:	b29b      	uxth	r3, r3
 8001808:	2201      	movs	r2, #1
 800180a:	4619      	mov	r1, r3
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fc90 	bl	8002132 <VL53L1_SetLimitCheckEnable>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	4313      	orrs	r3, r2
 800181a:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800181c:	7bbb      	ldrb	r3, [r7, #14]
 800181e:	3301      	adds	r3, #1
 8001820:	73bb      	strb	r3, [r7, #14]
 8001822:	7bbb      	ldrb	r3, [r7, #14]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d9e9      	bls.n	80017fc <VL53L1_DataInit+0x5a>
 8001828:	e000      	b.n	800182c <VL53L1_DataInit+0x8a>
		else
			break;
 800182a:	bf00      	nop

	}


	if (Status == VL53L1_ERROR_NONE) {
 800182c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <VL53L1_DataInit+0x9e>
		Status = VL53L1_set_dmax_mode(Dev,
 8001834:	2102      	movs	r1, #2
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f005 faef 	bl	8006e1a <VL53L1_set_dmax_mode>
 800183c:	4603      	mov	r3, r0
 800183e:	73fb      	strb	r3, [r7, #15]
				VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA);
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001840:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800185e:	2203      	movs	r2, #3
 8001860:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001864:	2320      	movs	r3, #32
 8001866:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7bba      	ldrb	r2, [r7, #14]
 800186c:	76da      	strb	r2, [r3, #27]

	Status = VL53L1_SetPresetMode(Dev,
 800186e:	2101      	movs	r1, #1
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f947 	bl	8001b04 <VL53L1_SetPresetMode>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_RANGING);
	VL53L1_SetDistanceMode(Dev,
 800187a:	2102      	movs	r1, #2
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f98b 	bl	8001b98 <VL53L1_SetDistanceMode>
			VL53L1_DISTANCEMODE_MEDIUM);
	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	VL53L1_SmudgeCorrectionEnable(Dev,
 800188e:	2100      	movs	r1, #0
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f001 fe69 	bl	8003568 <VL53L1_SmudgeCorrectionEnable>
			VL53L1_SMUDGE_CORRECTION_NONE);

	LOG_FUNCTION_END(Status);
	return Status;
 8001896:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 80018ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f011 ffa1 	bl	80137fa <VL53L1_poll_for_boot_completion>
 80018b8:	4603      	mov	r3, r0
 80018ba:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80018bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <ComputeDevicePresetMode>:

static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	603a      	str	r2, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	460b      	mov	r3, r1
 80018d6:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80018d8:	2300      	movs	r3, #0
 80018da:	77fb      	strb	r3, [r7, #31]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 80018dc:	4a48      	ldr	r2, [pc, #288]	; (8001a00 <ComputeDevicePresetMode+0x138>)
 80018de:	f107 0318 	add.w	r3, r7, #24
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	4611      	mov	r1, r2
 80018e6:	8019      	strh	r1, [r3, #0]
 80018e8:	3302      	adds	r3, #2
 80018ea:	0c12      	lsrs	r2, r2, #16
 80018ec:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes RangingModes[3] = {
 80018ee:	4a45      	ldr	r2, [pc, #276]	; (8001a04 <ComputeDevicePresetMode+0x13c>)
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	4611      	mov	r1, r2
 80018f8:	8019      	strh	r1, [r3, #0]
 80018fa:	3302      	adds	r3, #2
 80018fc:	0c12      	lsrs	r2, r2, #16
 80018fe:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE};

	VL53L1_DevicePresetModes ScanningModes[3] = {
 8001900:	4a41      	ldr	r2, [pc, #260]	; (8001a08 <ComputeDevicePresetMode+0x140>)
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	4611      	mov	r1, r2
 800190a:	8019      	strh	r1, [r3, #0]
 800190c:	3302      	adds	r3, #2
 800190e:	0c12      	lsrs	r2, r2, #16
 8001910:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE,
		VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE};

	VL53L1_DevicePresetModes TimedModes[3] = {
 8001912:	4a3e      	ldr	r2, [pc, #248]	; (8001a0c <ComputeDevicePresetMode+0x144>)
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	4611      	mov	r1, r2
 800191c:	8019      	strh	r1, [r3, #0]
 800191e:	3302      	adds	r3, #2
 8001920:	0c12      	lsrs	r2, r2, #16
 8001922:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8001924:	4a3a      	ldr	r2, [pc, #232]	; (8001a10 <ComputeDevicePresetMode+0x148>)
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	4611      	mov	r1, r2
 800192e:	8019      	strh	r1, [r3, #0]
 8001930:	3302      	adds	r3, #2
 8001932:	0c12      	lsrs	r2, r2, #16
 8001934:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d002      	beq.n	8001948 <ComputeDevicePresetMode+0x80>
 8001942:	2b02      	cmp	r3, #2
 8001944:	d003      	beq.n	800194e <ComputeDevicePresetMode+0x86>
 8001946:	e005      	b.n	8001954 <ComputeDevicePresetMode+0x8c>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	77bb      	strb	r3, [r7, #30]
		break;
 800194c:	e004      	b.n	8001958 <ComputeDevicePresetMode+0x90>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800194e:	2301      	movs	r3, #1
 8001950:	77bb      	strb	r3, [r7, #30]
		break;
 8001952:	e001      	b.n	8001958 <ComputeDevicePresetMode+0x90>
	default:
		DistIdx = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	77bb      	strb	r3, [r7, #30]
	}

	switch (PresetMode) {
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	3b01      	subs	r3, #1
 800195c:	2b08      	cmp	r3, #8
 800195e:	d845      	bhi.n	80019ec <ComputeDevicePresetMode+0x124>
 8001960:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <ComputeDevicePresetMode+0xa0>)
 8001962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001966:	bf00      	nop
 8001968:	0800199d 	.word	0x0800199d
 800196c:	080019ad 	.word	0x080019ad
 8001970:	080019bd 	.word	0x080019bd
 8001974:	0800198d 	.word	0x0800198d
 8001978:	080019ed 	.word	0x080019ed
 800197c:	080019ed 	.word	0x080019ed
 8001980:	080019dd 	.word	0x080019dd
 8001984:	080019cd 	.word	0x080019cd
 8001988:	080019e5 	.word	0x080019e5
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800198c:	7fbb      	ldrb	r3, [r7, #30]
 800198e:	3320      	adds	r3, #32
 8001990:	443b      	add	r3, r7
 8001992:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	701a      	strb	r2, [r3, #0]
		break;
 800199a:	e029      	b.n	80019f0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_RANGING:
		*pDevicePresetMode = RangingModes[DistIdx];
 800199c:	7fbb      	ldrb	r3, [r7, #30]
 800199e:	3320      	adds	r3, #32
 80019a0:	443b      	add	r3, r7
 80019a2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	701a      	strb	r2, [r3, #0]
		break;
 80019aa:	e021      	b.n	80019f0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		*pDevicePresetMode = ScanningModes[DistIdx];
 80019ac:	7fbb      	ldrb	r3, [r7, #30]
 80019ae:	3320      	adds	r3, #32
 80019b0:	443b      	add	r3, r7
 80019b2:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	701a      	strb	r2, [r3, #0]
		break;
 80019ba:	e019      	b.n	80019f0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 80019bc:	7fbb      	ldrb	r3, [r7, #30]
 80019be:	3320      	adds	r3, #32
 80019c0:	443b      	add	r3, r7
 80019c2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	701a      	strb	r2, [r3, #0]
		break;
 80019ca:	e011      	b.n	80019f0 <ComputeDevicePresetMode+0x128>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 80019cc:	7fbb      	ldrb	r3, [r7, #30]
 80019ce:	3320      	adds	r3, #32
 80019d0:	443b      	add	r3, r7
 80019d2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	701a      	strb	r2, [r3, #0]
		break;
 80019da:	e009      	b.n	80019f0 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_OLT:
		*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_OLT;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2211      	movs	r2, #17
 80019e0:	701a      	strb	r2, [r3, #0]
		break;
 80019e2:	e005      	b.n	80019f0 <ComputeDevicePresetMode+0x128>
	case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
		*pDevicePresetMode =
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2227      	movs	r2, #39	; 0x27
 80019e8:	701a      	strb	r2, [r3, #0]
			VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE;
		break;
 80019ea:	e001      	b.n	80019f0 <ComputeDevicePresetMode+0x128>

	default:

		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80019ec:	23f8      	movs	r3, #248	; 0xf8
 80019ee:	77fb      	strb	r3, [r7, #31]
	}

	return Status;
 80019f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3724      	adds	r7, #36	; 0x24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	0801a274 	.word	0x0801a274
 8001a04:	0801a278 	.word	0x0801a278
 8001a08:	0801a27c 	.word	0x0801a27c
 8001a0c:	0801a280 	.word	0x0801a280
 8001a10:	0801a284 	.word	0x0801a284

08001a14 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8001a14:	b5b0      	push	{r4, r5, r7, lr}
 8001a16:	b08e      	sub	sp, #56	; 0x38
 8001a18:	af04      	add	r7, sp, #16
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	72fb      	strb	r3, [r7, #11]
 8001a22:	4613      	mov	r3, r2
 8001a24:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d002      	beq.n	8001a48 <SetPresetMode+0x34>
 8001a42:	7afb      	ldrb	r3, [r7, #11]
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d103      	bne.n	8001a50 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8001a48:	2340      	movs	r3, #64	; 0x40
 8001a4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001a4e:	e002      	b.n	8001a56 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8001a50:	2320      	movs	r3, #32
 8001a52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8001a56:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8001a5a:	7ab9      	ldrb	r1, [r7, #10]
 8001a5c:	7afb      	ldrb	r3, [r7, #11]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff32 	bl	80018c8 <ComputeDevicePresetMode>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001a6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d112      	bne.n	8001a98 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8001a72:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001a76:	f107 001c 	add.w	r0, r7, #28
 8001a7a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	9301      	str	r3, [sp, #4]
 8001a84:	f107 0318 	add.w	r3, r7, #24
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f002 ffaf 	bl	80049f0 <VL53L1_get_preset_mode_timing_cfg>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8001a98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d112      	bne.n	8001ac6 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8001aa0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001aa4:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8001aa6:	69fd      	ldr	r5, [r7, #28]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	9102      	str	r1, [sp, #8]
 8001ab0:	9201      	str	r2, [sp, #4]
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	462b      	mov	r3, r5
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	4601      	mov	r1, r0
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f003 f8ee 	bl	8004c9c <VL53L1_set_preset_mode>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8001ac6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d103      	bne.n	8001ad6 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001ad4:	76da      	strb	r2, [r3, #27]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8001ad6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <SetPresetMode+0xd8>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	f882 3a6c 	strb.w	r3, [r2, #2668]	; 0xa6c

	VL53L1DevDataSet(Dev, CurrentParameters.OutputMode,
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2a6d 	strb.w	r2, [r3, #2669]	; 0xa6d
			VL53L1_OUTPUTMODE_NEAREST);
	LOG_FUNCTION_END(Status);
	return Status;
 8001af8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bdb0      	pop	{r4, r5, r7, pc}

08001b04 <VL53L1_SetPresetMode>:


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8001b14:	2303      	movs	r3, #3
 8001b16:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);


	Status = VL53L1_low_power_auto_data_init(Dev);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f00c f94a 	bl	800ddb2 <VL53L1_low_power_auto_data_init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	73fb      	strb	r3, [r7, #15]

	if (PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE)
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	2b09      	cmp	r3, #9
 8001b26:	d101      	bne.n	8001b2c <VL53L1_SetPresetMode+0x28>
		DistanceMode = VL53L1_DISTANCEMODE_SHORT;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	73bb      	strb	r3, [r7, #14]
	Status = SetPresetMode(Dev,
 8001b2c:	7bba      	ldrb	r2, [r7, #14]
 8001b2e:	78f9      	ldrb	r1, [r7, #3]
 8001b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ff6d 	bl	8001a14 <SetPresetMode>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d117      	bne.n	8001b76 <VL53L1_SetPresetMode+0x72>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d005      	beq.n	8001b58 <VL53L1_SetPresetMode+0x54>
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d002      	beq.n	8001b58 <VL53L1_SetPresetMode+0x54>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d107      	bne.n	8001b68 <VL53L1_SetPresetMode+0x64>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001b58:	f24a 0128 	movw	r1, #41000	; 0xa028
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f8a9 	bl	8001cb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8001b62:	4603      	mov	r3, r0
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	e006      	b.n	8001b76 <VL53L1_SetPresetMode+0x72>
				Dev, 41000);
		else

			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8001b68:	f248 2135 	movw	r1, #33333	; 0x8235
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f8a1 	bl	8001cb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8001b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d106      	bne.n	8001b8c <VL53L1_SetPresetMode+0x88>

		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8001b7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fa68 	bl	8002058 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0a2      	sub	sp, #136	; 0x88
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t MmTimeoutUs = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t PhaseCalTimeoutUs = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	677b      	str	r3, [r7, #116]	; 0x74
	VL53L1_zone_config_t zone_config;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001bbc:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8001bc0:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86



	if ((PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE) &&
 8001bc4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001bc8:	2b09      	cmp	r3, #9
 8001bca:	d105      	bne.n	8001bd8 <VL53L1_SetDistanceMode+0x40>
 8001bcc:	78fb      	ldrb	r3, [r7, #3]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d002      	beq.n	8001bd8 <VL53L1_SetDistanceMode+0x40>
		(DistanceMode != VL53L1_DISTANCEMODE_SHORT))
		return VL53L1_ERROR_INVALID_PARAMS;
 8001bd2:	f06f 0303 	mvn.w	r3, #3
 8001bd6:	e069      	b.n	8001cac <VL53L1_SetDistanceMode+0x114>
	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d008      	beq.n	8001bf0 <VL53L1_SetDistanceMode+0x58>
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d005      	beq.n	8001bf0 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d002      	beq.n	8001bf0 <VL53L1_SetDistanceMode+0x58>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8001bea:	f06f 0303 	mvn.w	r3, #3
 8001bee:	e05d      	b.n	8001cac <VL53L1_SetDistanceMode+0x114>

	if (Status == VL53L1_ERROR_NONE)
 8001bf0:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d108      	bne.n	8001c0a <VL53L1_SetDistanceMode+0x72>
		Status = VL53L1_get_zone_config(Dev, &zone_config);
 8001bf8:	f107 0308 	add.w	r3, r7, #8
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f002 fede 	bl	80049c0 <VL53L1_get_zone_config>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8001c12:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10b      	bne.n	8001c32 <VL53L1_SetDistanceMode+0x9a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001c1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c1e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001c22:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f002 fd8a 	bl	8004740 <VL53L1_get_timeouts_us>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8001c32:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10a      	bne.n	8001c50 <VL53L1_SetDistanceMode+0xb8>
		Status = SetPresetMode(Dev,
 8001c3a:	78fa      	ldrb	r2, [r7, #3]
 8001c3c:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 8001c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff fee5 	bl	8001a14 <SetPresetMode>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8001c50:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d106      	bne.n	8001c66 <VL53L1_SetDistanceMode+0xce>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001c5e:	461a      	mov	r2, r3
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f882 3a6e 	strb.w	r3, [r2, #2670]	; 0xa6e
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8001c66:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d10f      	bne.n	8001c8e <VL53L1_SetDistanceMode+0xf6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8001c6e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001c70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001c72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f002 fd2a 	bl	80046ce <VL53L1_set_timeouts_us>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8001c80:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d102      	bne.n	8001c8e <VL53L1_SetDistanceMode+0xf6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8001c88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8001c8e:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d108      	bne.n	8001ca8 <VL53L1_SetDistanceMode+0x110>
		Status = VL53L1_set_zone_config(Dev, &zone_config);
 8001c96:	f107 0308 	add.w	r3, r7, #8
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f002 fe4c 	bl	800493a <VL53L1_set_zone_config>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	LOG_FUNCTION_END(Status);
	return Status;
 8001ca8:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3788      	adds	r7, #136	; 0x88
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	; 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8001cd8:	4b75      	ldr	r3, [pc, #468]	; (8001eb0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1fc>)
 8001cda:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");


	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4a75      	ldr	r2, [pc, #468]	; (8001eb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x200>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d902      	bls.n	8001cea <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8001ce4:	23fc      	movs	r3, #252	; 0xfc
 8001ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8001cea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8001cf2:	f107 031a 	add.w	r3, r7, #26
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 fb9a 	bl	8002434 <VL53L1_GetSequenceStepEnable>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8001d06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8001d0e:	f107 0319 	add.w	r3, r7, #25
 8001d12:	461a      	mov	r2, r3
 8001d14:	2106      	movs	r1, #6
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fb8c 	bl	8002434 <VL53L1_GetSequenceStepEnable>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8001d22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10b      	bne.n	8001d42 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	f107 0210 	add.w	r2, r7, #16
 8001d32:	f107 010c 	add.w	r1, r7, #12
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f002 fd02 	bl	8004740 <VL53L1_get_timeouts_us>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8001d42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 80a0 	bne.w	8001e8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
		PresetMode = VL53L1DevDataGet(Dev,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001d52:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8001d56:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8001d60:	7efb      	ldrb	r3, [r7, #27]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d861      	bhi.n	8001e2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
 8001d68:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbc>)
 8001d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d6e:	bf00      	nop
 8001d70:	08001e15 	.word	0x08001e15
 8001d74:	08001e15 	.word	0x08001e15
 8001d78:	08001db1 	.word	0x08001db1
 8001d7c:	08001d95 	.word	0x08001d95
 8001d80:	08001e2d 	.word	0x08001e2d
 8001d84:	08001e2d 	.word	0x08001e2d
 8001d88:	08001e21 	.word	0x08001e21
 8001d8c:	08001dd7 	.word	0x08001dd7
 8001d90:	08001e15 	.word	0x08001e15
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001d94:	7ebb      	ldrb	r3, [r7, #26]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d002      	beq.n	8001da0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 8001d9a:	7e7b      	ldrb	r3, [r7, #25]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d103      	bne.n	8001da8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf4>
				TimingGuard = 5000;
 8001da0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001da4:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8001da6:	e044      	b.n	8001e32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
				TimingGuard = 1000;
 8001da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001dae:	e040      	b.n	8001e32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001db6:	7ebb      	ldrb	r3, [r7, #26]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d002      	beq.n	8001dc2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x10e>
 8001dbc:	7e7b      	ldrb	r3, [r7, #25]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d103      	bne.n	8001dca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x116>
				TimingGuard = 26600;
 8001dc2:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc8:	e002      	b.n	8001dd0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x11c>
			else
				TimingGuard = 21600;
 8001dca:	f245 4360 	movw	r3, #21600	; 0x5460
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001dd4:	e02d      	b.n	8001e32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8001ddc:	23f5      	movs	r3, #245	; 0xf5
 8001dde:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8001de0:	f107 0308 	add.w	r3, r7, #8
 8001de4:	461a      	mov	r2, r3
 8001de6:	f248 0188 	movw	r1, #32904	; 0x8088
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f005 f88c 	bl	8006f08 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	dd07      	ble.n	8001e06 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x152>
				vhv += vhv_loops *
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	22f5      	movs	r2, #245	; 0xf5
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	4413      	add	r3, r2
 8001e04:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001e12:	e00e      	b.n	8001e32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			TimingGuard = 1700;
 8001e14:	f240 63a4 	movw	r3, #1700	; 0x6a4
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 6;
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8001e1e:	e008      	b.n	8001e32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>

		case VL53L1_PRESETMODE_OLT:
			TimingGuard = MmTimeoutUs + 5000;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001e26:	3308      	adds	r3, #8
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001e2a:	e002      	b.n	8001e32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x17e>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8001e2c:	23f8      	movs	r3, #248	; 0xf8
 8001e2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d803      	bhi.n	8001e42 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8001e3a:	23fc      	movs	r3, #252	; 0xfc
 8001e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e40:	e003      	b.n	8001e4a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e46:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8001e48:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8001e4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d11c      	bne.n	8001e8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d203      	bcs.n	8001e62 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ae>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8001e5a:	23fc      	movs	r3, #252	; 0xfc
 8001e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e60:	e00d      	b.n	8001e7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ca>
			else {
				TimingBudget /= divisor;
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8001e6c:	68f9      	ldr	r1, [r7, #12]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f002 fc2b 	bl	80046ce <VL53L1_set_timeouts_us>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8001e7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1d8>
				VL53L1DevDataSet(Dev,
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8001e8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d106      	bne.n	8001ea2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1ee>
		VL53L1DevDataSet(Dev,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f8c2 3a70 	str.w	r3, [r2, #2672]	; 0xa70
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001ea2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3730      	adds	r7, #48	; 0x30
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	00086470 	.word	0x00086470
 8001eb4:	00989680 	.word	0x00989680

08001eb8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08c      	sub	sp, #48	; 0x30
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8001ee6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8001eee:	f107 031b 	add.w	r3, r7, #27
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2105      	movs	r1, #5
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fa9c 	bl	8002434 <VL53L1_GetSequenceStepEnable>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8001f02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8001f0a:	f107 031a 	add.w	r3, r7, #26
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2106      	movs	r1, #6
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fa8e 	bl	8002434 <VL53L1_GetSequenceStepEnable>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8001f1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10b      	bne.n	8001f3e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	f107 0214 	add.w	r2, r7, #20
 8001f2e:	f107 010c 	add.w	r1, r7, #12
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f002 fc04 	bl	8004740 <VL53L1_get_timeouts_us>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8001f3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d179      	bne.n	800203a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev,
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001f4c:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8001f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8001f54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	2b08      	cmp	r3, #8
 8001f5c:	d869      	bhi.n	8002032 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x17a>
 8001f5e:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xac>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08002011 	.word	0x08002011
 8001f68:	08002011 	.word	0x08002011
 8001f6c:	08001fab 	.word	0x08001fab
 8001f70:	08001f89 	.word	0x08001f89
 8001f74:	08002033 	.word	0x08002033
 8001f78:	08002033 	.word	0x08002033
 8001f7c:	08002023 	.word	0x08002023
 8001f80:	08001fd3 	.word	0x08001fd3
 8001f84:	08002011 	.word	0x08002011
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001f88:	7efb      	ldrb	r3, [r7, #27]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d002      	beq.n	8001f94 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xdc>
 8001f8e:	7ebb      	ldrb	r3, [r7, #26]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8001f9a:	3308      	adds	r3, #8
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8001f9e:	e04d      	b.n	800203c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001fa6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001fa8:	e048      	b.n	800203c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8001faa:	7efb      	ldrb	r3, [r7, #27]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d002      	beq.n	8001fb6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xfe>
 8001fb0:	7ebb      	ldrb	r3, [r7, #26]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d106      	bne.n	8001fc4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x10c>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8001fbc:	3334      	adds	r3, #52	; 0x34
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8001fc2:	e03b      	b.n	800203c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8001fca:	3330      	adds	r3, #48	; 0x30
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8001fd0:	e034      	b.n	800203c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8001fd2:	23f5      	movs	r3, #245	; 0xf5
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f248 0188 	movw	r1, #32904	; 0x8088
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f004 ff91 	bl	8006f08 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	dd07      	ble.n	8001ffc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x144>
				vhv += vhv_loops *
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	22f5      	movs	r2, #245	; 0xf5
 8001ff0:	fb02 f303 	mul.w	r3, r2, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	4413      	add	r3, r2
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8002002:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	4413      	add	r3, r2
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800200e:	e015      	b.n	800203c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_RANGING:
		case VL53L1_PRESETMODE_MULTIZONES_SCANNING:
		case VL53L1_PRESETMODE_PROXY_RANGING_MODE:
			MeasTimingBdg = (6 * RangeTimeoutUs) + 1700;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002020:	e00c      	b.n	800203c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>

		case VL53L1_PRESETMODE_OLT:
			MeasTimingBdg = RangeTimeoutUs + MmTimeoutUs + 5000;
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	4413      	add	r3, r2
 8002028:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800202c:	3308      	adds	r3, #8
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8002030:	e004      	b.n	800203c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		default:

			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8002032:	23f8      	movs	r3, #248	; 0xf8
 8002034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002038:	e000      	b.n	800203c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x184>
		}
	}
 800203a:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800203c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x192>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002048:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800204a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800204e:	4618      	mov	r0, r3
 8002050:	3730      	adds	r7, #48	; 0x30
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop

08002058 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");


	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	019b      	lsls	r3, r3, #6
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	099b      	lsrs	r3, r3, #6
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	4413      	add	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f002 facc 	bl	800461c <VL53L1_set_inter_measurement_period_ms>
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8002088:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3710      	adds	r7, #16
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	10624dd3 	.word	0x10624dd3

08002098 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	4619      	mov	r1, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f002 fae3 	bl	8004678 <VL53L1_get_inter_measurement_period_ms>
 80020b2:	4603      	mov	r3, r0
 80020b4:	73fb      	strb	r3, [r7, #15]

	adjustedIMP -= (adjustedIMP * 64) / 1000;
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	019b      	lsls	r3, r3, #6
 80020bc:	4907      	ldr	r1, [pc, #28]	; (80020dc <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 80020be:	fba1 1303 	umull	r1, r3, r1, r3
 80020c2:	099b      	lsrs	r3, r3, #6
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(Status);
	return Status;
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	10624dd3 	.word	0x10624dd3

080020e0 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	460b      	mov	r3, r1
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80020f2:	897b      	ldrh	r3, [r7, #10]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <SetLimitValue+0x1e>
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d009      	beq.n	8002110 <SetLimitValue+0x30>
 80020fc:	e011      	b.n	8002122 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0b9b      	lsrs	r3, r3, #14
 8002102:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8002104:	8abb      	ldrh	r3, [r7, #20]
 8002106:	4619      	mov	r1, r3
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f003 f988 	bl	800541e <VL53L1_set_lite_sigma_threshold>
		break;
 800210e:	e00a      	b.n	8002126 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	0a5b      	lsrs	r3, r3, #9
 8002114:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8002116:	8abb      	ldrh	r3, [r7, #20]
 8002118:	4619      	mov	r1, r3
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f003 f9ad 	bl	800547a <VL53L1_set_lite_min_count_rate>
		break;
 8002120:	e001      	b.n	8002126 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002122:	23fc      	movs	r3, #252	; 0xfc
 8002124:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002126:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	807b      	strh	r3, [r7, #2]
 800213e:	4613      	mov	r3, r2
 8002140:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800214a:	887b      	ldrh	r3, [r7, #2]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d902      	bls.n	8002156 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002150:	23fc      	movs	r3, #252	; 0xfc
 8002152:	73fb      	strb	r3, [r7, #15]
 8002154:	e015      	b.n	8002182 <VL53L1_SetLimitCheckEnable+0x50>
	} else {

		if (LimitCheckEnable == 0)
 8002156:	787b      	ldrb	r3, [r7, #1]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	e007      	b.n	8002172 <VL53L1_SetLimitCheckEnable+0x40>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	4619      	mov	r1, r3
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ffb1 	bl	80020e0 <SetLimitValue>
 800217e:	4603      	mov	r3, r0
 8002180:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10e      	bne.n	80021a8 <VL53L1_SetLimitCheckEnable+0x76>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800218a:	787b      	ldrb	r3, [r7, #1]
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	b2da      	uxtb	r2, r3
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	4611      	mov	r1, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80021a2:	3334      	adds	r3, #52	; 0x34
 80021a4:	460a      	mov	r2, r1
 80021a6:	701a      	strb	r2, [r3, #0]
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	460b      	mov	r3, r1
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80021c6:	897b      	ldrh	r3, [r7, #10]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d905      	bls.n	80021d8 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80021cc:	23fc      	movs	r3, #252	; 0xfc
 80021ce:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e00a      	b.n	80021ee <VL53L1_GetLimitCheckEnable+0x3a>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80021d8:	897b      	ldrh	r3, [r7, #10]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80021e2:	3334      	adds	r3, #52	; 0x34
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7dba      	ldrb	r2, [r7, #22]
 80021ec:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80021ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b088      	sub	sp, #32
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	460b      	mov	r3, r1
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800220c:	2300      	movs	r3, #0
 800220e:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8002214:	897b      	ldrh	r3, [r7, #10]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <VL53L1_GetLimitCheckValue+0x22>
 800221a:	2b01      	cmp	r3, #1
 800221c:	d00c      	beq.n	8002238 <VL53L1_GetLimitCheckValue+0x3a>
 800221e:	e017      	b.n	8002250 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f003 f8e2 	bl	80053f0 <VL53L1_get_lite_sigma_threshold>
 800222c:	4603      	mov	r3, r0
 800222e:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8002230:	8abb      	ldrh	r3, [r7, #20]
 8002232:	039b      	lsls	r3, r3, #14
 8002234:	61bb      	str	r3, [r7, #24]
		break;
 8002236:	e00d      	b.n	8002254 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8002238:	f107 0316 	add.w	r3, r7, #22
 800223c:	4619      	mov	r1, r3
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f003 f904 	bl	800544c <VL53L1_get_lite_min_count_rate>
 8002244:	4603      	mov	r3, r0
 8002246:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8002248:	8afb      	ldrh	r3, [r7, #22]
 800224a:	025b      	lsls	r3, r3, #9
 800224c:	61bb      	str	r3, [r7, #24]
		break;
 800224e:	e001      	b.n	8002254 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002250:	23fc      	movs	r3, #252	; 0xfc
 8002252:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8002254:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d129      	bne.n	80022b0 <VL53L1_GetLimitCheckValue+0xb2>

		if (TempFix1616 == 0) {
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d113      	bne.n	800228a <VL53L1_GetLimitCheckValue+0x8c>

			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8002262:	897b      	ldrh	r3, [r7, #10]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002278:	897b      	ldrh	r3, [r7, #10]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4413      	add	r3, r2
 800227e:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002282:	3334      	adds	r3, #52	; 0x34
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e012      	b.n	80022b0 <VL53L1_GetLimitCheckValue+0xb2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002290:	897b      	ldrh	r3, [r7, #10]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	f603 239c 	addw	r3, r3, #2716	; 0xa9c
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80022a0:	897b      	ldrh	r3, [r7, #10]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80022aa:	3334      	adds	r3, #52	; 0x34
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80022b0:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <VL53L1_SetROI>:
	return Status;
}

VL53L1_Error VL53L1_SetROI(VL53L1_DEV Dev,
		VL53L1_RoiConfig_t *pRoiConfig)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b0a0      	sub	sp, #128	; 0x80
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	VL53L1_PresetModes PresetMode;
	uint8_t MaxNumberOfROI = 1;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t  width, height;

	LOG_FUNCTION_START("");


	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80022d8:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 80022dc:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c


	if (PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING)
 80022e0:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d102      	bne.n	80022ee <VL53L1_SetROI+0x32>
		MaxNumberOfROI = VL53L1_MAX_USER_ZONES;
 80022e8:	2310      	movs	r3, #16
 80022ea:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d303      	bcc.n	8002302 <VL53L1_SetROI+0x46>
			(pRoiConfig->NumberOfRoi < 1))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	781b      	ldrb	r3, [r3, #0]
	if ((pRoiConfig->NumberOfRoi > MaxNumberOfROI) ||
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <VL53L1_SetROI+0x4c>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8002302:	23fc      	movs	r3, #252	; 0xfc
 8002304:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	if (Status == VL53L1_ERROR_NONE) {
 8002308:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800230c:	2b00      	cmp	r3, #0
 800230e:	d17e      	bne.n	800240e <VL53L1_SetROI+0x152>


		zone_cfg.max_zones = MaxNumberOfROI;
 8002310:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002314:	733b      	strb	r3, [r7, #12]
		zone_cfg.active_zones = pRoiConfig->NumberOfRoi - 1;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	3b01      	subs	r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	737b      	strb	r3, [r7, #13]

		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 8002320:	2300      	movs	r3, #0
 8002322:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 8002326:	e06a      	b.n	80023fe <VL53L1_SetROI+0x142>
			CurrROI = pRoiConfig->UserRois[i];
 8002328:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	f107 0208 	add.w	r2, r7, #8
 8002336:	3301      	adds	r3, #1
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	6010      	str	r0, [r2, #0]

			Status = CheckValidRectRoi(CurrROI);
 800233c:	68b8      	ldr	r0, [r7, #8]
 800233e:	f7ff f9e3 	bl	8001708 <CheckValidRectRoi>
 8002342:	4603      	mov	r3, r0
 8002344:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (Status != VL53L1_ERROR_NONE)
 8002348:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 800234c:	2b00      	cmp	r3, #0
 800234e:	d15d      	bne.n	800240c <VL53L1_SetROI+0x150>
				break;

			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8002350:	7abb      	ldrb	r3, [r7, #10]
 8002352:	461a      	mov	r2, r3
 8002354:	7a3b      	ldrb	r3, [r7, #8]
 8002356:	4413      	add	r3, r2
 8002358:	3301      	adds	r3, #1
					/ 2;
 800235a:	0fda      	lsrs	r2, r3, #31
 800235c:	4413      	add	r3, r2
 800235e:	105b      	asrs	r3, r3, #1
			x_centre = (CurrROI.BotRightX + CurrROI.TopLeftX  + 1)
 8002360:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002364:	7a7b      	ldrb	r3, [r7, #9]
 8002366:	461a      	mov	r2, r3
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	4413      	add	r3, r2
 800236c:	3301      	adds	r3, #1
					/ 2;
 800236e:	0fda      	lsrs	r2, r3, #31
 8002370:	4413      	add	r3, r2
 8002372:	105b      	asrs	r3, r3, #1
			y_centre = (CurrROI.TopLeftY  + CurrROI.BotRightY + 1)
 8002374:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
			width =     (CurrROI.BotRightX - CurrROI.TopLeftX);
 8002378:	7aba      	ldrb	r2, [r7, #10]
 800237a:	7a3b      	ldrb	r3, [r7, #8]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
			height =    (CurrROI.TopLeftY  - CurrROI.BotRightY);
 8002382:	7a7a      	ldrb	r2, [r7, #9]
 8002384:	7afb      	ldrb	r3, [r7, #11]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
			if ((width < 3) || (height < 3)) {
 800238c:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002390:	2b02      	cmp	r3, #2
 8002392:	d903      	bls.n	800239c <VL53L1_SetROI+0xe0>
 8002394:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8002398:	2b02      	cmp	r3, #2
 800239a:	d803      	bhi.n	80023a4 <VL53L1_SetROI+0xe8>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800239c:	23fc      	movs	r3, #252	; 0xfc
 800239e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				break;
 80023a2:	e034      	b.n	800240e <VL53L1_SetROI+0x152>
			}
			zone_cfg.user_zones[i].x_centre = x_centre;
 80023a4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80023a8:	3306      	adds	r3, #6
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	3380      	adds	r3, #128	; 0x80
 80023ae:	443b      	add	r3, r7
 80023b0:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 80023b4:	f803 2c70 	strb.w	r2, [r3, #-112]
			zone_cfg.user_zones[i].y_centre = y_centre;
 80023b8:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80023bc:	3306      	adds	r3, #6
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	3380      	adds	r3, #128	; 0x80
 80023c2:	443b      	add	r3, r7
 80023c4:	f897 207a 	ldrb.w	r2, [r7, #122]	; 0x7a
 80023c8:	f803 2c6f 	strb.w	r2, [r3, #-111]
			zone_cfg.user_zones[i].width = width;
 80023cc:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80023d0:	3306      	adds	r3, #6
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	3380      	adds	r3, #128	; 0x80
 80023d6:	443b      	add	r3, r7
 80023d8:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
 80023dc:	f803 2c6e 	strb.w	r2, [r3, #-110]
			zone_cfg.user_zones[i].height = height;
 80023e0:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80023e4:	3306      	adds	r3, #6
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	3380      	adds	r3, #128	; 0x80
 80023ea:	443b      	add	r3, r7
 80023ec:	f897 2078 	ldrb.w	r2, [r7, #120]	; 0x78
 80023f0:	f803 2c6d 	strb.w	r2, [r3, #-109]
		for (i = 0; i < pRoiConfig->NumberOfRoi; i++) {
 80023f4:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80023f8:	3301      	adds	r3, #1
 80023fa:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8002406:	429a      	cmp	r2, r3
 8002408:	d38e      	bcc.n	8002328 <VL53L1_SetROI+0x6c>
 800240a:	e000      	b.n	800240e <VL53L1_SetROI+0x152>
				break;
 800240c:	bf00      	nop
		}
	}

	if (Status == VL53L1_ERROR_NONE)
 800240e:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8002412:	2b00      	cmp	r3, #0
 8002414:	d108      	bne.n	8002428 <VL53L1_SetROI+0x16c>
		Status = VL53L1_set_zone_config(Dev, &zone_cfg);
 8002416:	f107 030c 	add.w	r3, r7, #12
 800241a:	4619      	mov	r1, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f002 fa8c 	bl	800493a <VL53L1_set_zone_config>
 8002422:	4603      	mov	r3, r0
 8002424:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

	LOG_FUNCTION_END(Status);
	return Status;
 8002428:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
}
 800242c:	4618      	mov	r0, r3
 800242e:	3780      	adds	r7, #128	; 0x80
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	460b      	mov	r3, r1
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002442:	2300      	movs	r3, #0
 8002444:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8002446:	7afb      	ldrb	r3, [r7, #11]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4619      	mov	r1, r3
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f002 f9e3 	bl	8004818 <VL53L1_get_sequence_config_bit>
 8002452:	4603      	mov	r3, r0
 8002454:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8002456:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <VL53L1_StartMeasurement>:




VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800246c:	2300      	movs	r3, #0
 800246e:	77fb      	strb	r3, [r7, #31]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;
	uint8_t i;
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3318      	adds	r3, #24
 8002474:	61bb      	str	r3, [r7, #24]


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7edb      	ldrb	r3, [r3, #27]
 800247a:	75fb      	strb	r3, [r7, #23]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800247c:	7dfb      	ldrb	r3, [r7, #23]
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d002      	beq.n	8002488 <VL53L1_StartMeasurement+0x24>
		VL53L1_load_patch(Dev);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f001 fc8e 	bl	8003da4 <VL53L1_load_patch>
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8002488:	2300      	movs	r3, #0
 800248a:	77bb      	strb	r3, [r7, #30]
 800248c:	e01a      	b.n	80024c4 <VL53L1_StartMeasurement+0x60>
		pdev->PreviousRangeMilliMeter[i] = 0;
 800248e:	7fbb      	ldrb	r3, [r7, #30]
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8002496:	330c      	adds	r3, #12
 8002498:	2100      	movs	r1, #0
 800249a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 800249e:	7fbb      	ldrb	r3, [r7, #30]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80024a8:	3320      	adds	r3, #32
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 80024ae:	7fbb      	ldrb	r3, [r7, #30]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80024b8:	3324      	adds	r3, #36	; 0x24
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 80024be:	7fbb      	ldrb	r3, [r7, #30]
 80024c0:	3301      	adds	r3, #1
 80024c2:	77bb      	strb	r3, [r7, #30]
 80024c4:	7fbb      	ldrb	r3, [r7, #30]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d9e1      	bls.n	800248e <VL53L1_StartMeasurement+0x2a>
	}
	pdev->PreviousStreamCount = 0;
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	pdev->PreviousRangeActiveResults = 0;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80024e8:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 80024ec:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 80024ee:	7dbb      	ldrb	r3, [r7, #22]
 80024f0:	2b63      	cmp	r3, #99	; 0x63
 80024f2:	dc12      	bgt.n	800251a <VL53L1_StartMeasurement+0xb6>
 80024f4:	2b62      	cmp	r3, #98	; 0x62
 80024f6:	da0d      	bge.n	8002514 <VL53L1_StartMeasurement+0xb0>
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	dc0e      	bgt.n	800251a <VL53L1_StartMeasurement+0xb6>
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	da09      	bge.n	8002514 <VL53L1_StartMeasurement+0xb0>
 8002500:	2b02      	cmp	r3, #2
 8002502:	dc02      	bgt.n	800250a <VL53L1_StartMeasurement+0xa6>
 8002504:	2b00      	cmp	r3, #0
 8002506:	da05      	bge.n	8002514 <VL53L1_StartMeasurement+0xb0>
 8002508:	e007      	b.n	800251a <VL53L1_StartMeasurement+0xb6>
 800250a:	2b03      	cmp	r3, #3
 800250c:	d105      	bne.n	800251a <VL53L1_StartMeasurement+0xb6>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800250e:	2300      	movs	r3, #0
 8002510:	77fb      	strb	r3, [r7, #31]
		break;
 8002512:	e004      	b.n	800251e <VL53L1_StartMeasurement+0xba>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8002514:	23f2      	movs	r3, #242	; 0xf2
 8002516:	77fb      	strb	r3, [r7, #31]
		break;
 8002518:	e001      	b.n	800251e <VL53L1_StartMeasurement+0xba>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800251a:	23fd      	movs	r3, #253	; 0xfd
 800251c:	77fb      	strb	r3, [r7, #31]
	}


	if ((Status == VL53L1_ERROR_NONE) &&
 800251e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d11f      	bne.n	8002566 <VL53L1_StartMeasurement+0x102>
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d11c      	bne.n	8002566 <VL53L1_StartMeasurement+0x102>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	4619      	mov	r1, r3
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff fcc0 	bl	8001eb8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8002538:	4603      	mov	r3, r0
 800253a:	757b      	strb	r3, [r7, #21]
				&MTBus);

		MTBus /= 1000;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <VL53L1_StartMeasurement+0x13c>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	099b      	lsrs	r3, r3, #6
 8002546:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	4619      	mov	r1, r3
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff fda2 	bl	8002098 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8002554:	4603      	mov	r3, r0
 8002556:	757b      	strb	r3, [r7, #21]
				&IMPms);

		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1d1a      	adds	r2, r3, #4
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	429a      	cmp	r2, r3
 8002560:	d901      	bls.n	8002566 <VL53L1_StartMeasurement+0x102>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8002562:	23fc      	movs	r3, #252	; 0xfc
 8002564:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE)
 8002566:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d107      	bne.n	800257e <VL53L1_StartMeasurement+0x11a>
		Status = VL53L1_init_and_start_range(
 800256e:	7dfb      	ldrb	r3, [r7, #23]
 8002570:	2206      	movs	r2, #6
 8002572:	4619      	mov	r1, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f002 ff97 	bl	80054a8 <VL53L1_init_and_start_range>
 800257a:	4603      	mov	r3, r0
 800257c:	77fb      	strb	r3, [r7, #31]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);


	if (Status == VL53L1_ERROR_NONE)
 800257e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <VL53L1_StartMeasurement+0x12e>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800258c:	2204      	movs	r2, #4
 800258e:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68


	LOG_FUNCTION_END(Status);
	return Status;
 8002592:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	10624dd3 	.word	0x10624dd3

080025a4 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f003 fa47 	bl	8005a44 <VL53L1_stop_range>
 80025b6:	4603      	mov	r3, r0
 80025b8:	73fb      	strb	r3, [r7, #15]
	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7edb      	ldrb	r3, [r3, #27]
 80025be:	73bb      	strb	r3, [r7, #14]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 80025c0:	7bbb      	ldrb	r3, [r7, #14]
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d002      	beq.n	80025cc <VL53L1_StopMeasurement+0x28>
		VL53L1_unload_patch(Dev);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f001 fd1a 	bl	8004000 <VL53L1_unload_patch>

	if (Status == VL53L1_ERROR_NONE)
 80025cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d105      	bne.n	80025e0 <VL53L1_StopMeasurement+0x3c>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80025da:	2203      	movs	r2, #3
 80025dc:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68

	LOG_FUNCTION_END(Status);
	return Status;
 80025e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7edb      	ldrb	r3, [r3, #27]
 80025fc:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 80025fe:	7bbb      	ldrb	r3, [r7, #14]
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f003 ff4b 	bl	800649e <VL53L1_clear_interrupt_and_enable_next_range>
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800260c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002622:	2300      	movs	r3, #0
 8002624:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8002626:	6839      	ldr	r1, [r7, #0]
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f011 f8ac 	bl	8013786 <VL53L1_is_new_data_ready>
 800262e:	4603      	mov	r3, r0
 8002630:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <GenNewPresetMode>:
}

static void GenNewPresetMode(int16_t RefRange,
		VL53L1_DistanceModes InternalDistanceMode,
		VL53L1_DistanceModes *pNewDistanceMode)
{
 800263e:	b480      	push	{r7}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	603a      	str	r2, [r7, #0]
 8002648:	80fb      	strh	r3, [r7, #6]
 800264a:	460b      	mov	r3, r1
 800264c:	717b      	strb	r3, [r7, #5]
	uint16_t HRLI = 600;
 800264e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002652:	81fb      	strh	r3, [r7, #14]
	uint16_t HRLH = 700;
 8002654:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 8002658:	81bb      	strh	r3, [r7, #12]
	uint16_t MRLI = 1400;
 800265a:	f44f 63af 	mov.w	r3, #1400	; 0x578
 800265e:	817b      	strh	r3, [r7, #10]
	uint16_t MRLH = 1500;
 8002660:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002664:	813b      	strh	r3, [r7, #8]

	switch (InternalDistanceMode) {
 8002666:	797b      	ldrb	r3, [r7, #5]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d002      	beq.n	8002672 <GenNewPresetMode+0x34>
 800266c:	2b02      	cmp	r3, #2
 800266e:	d012      	beq.n	8002696 <GenNewPresetMode+0x58>
 8002670:	e023      	b.n	80026ba <GenNewPresetMode+0x7c>
	case VL53L1_DISTANCEMODE_SHORT:

		if (RefRange > MRLH)
 8002672:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002676:	893b      	ldrh	r3, [r7, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	dd03      	ble.n	8002684 <GenNewPresetMode+0x46>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2203      	movs	r2, #3
 8002680:	701a      	strb	r2, [r3, #0]
		else if (RefRange > HRLH)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 8002682:	e02c      	b.n	80026de <GenNewPresetMode+0xa0>
		else if (RefRange > HRLH)
 8002684:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002688:	89bb      	ldrh	r3, [r7, #12]
 800268a:	429a      	cmp	r2, r3
 800268c:	dd27      	ble.n	80026de <GenNewPresetMode+0xa0>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2202      	movs	r2, #2
 8002692:	701a      	strb	r2, [r3, #0]
		break;
 8002694:	e023      	b.n	80026de <GenNewPresetMode+0xa0>
	case VL53L1_DISTANCEMODE_MEDIUM:

		if (RefRange > MRLH)
 8002696:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800269a:	893b      	ldrh	r3, [r7, #8]
 800269c:	429a      	cmp	r2, r3
 800269e:	dd03      	ble.n	80026a8 <GenNewPresetMode+0x6a>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	2203      	movs	r2, #3
 80026a4:	701a      	strb	r2, [r3, #0]
		else if (RefRange < HRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
		break;
 80026a6:	e01c      	b.n	80026e2 <GenNewPresetMode+0xa4>
		else if (RefRange < HRLI)
 80026a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026ac:	89fb      	ldrh	r3, [r7, #14]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	da17      	bge.n	80026e2 <GenNewPresetMode+0xa4>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2201      	movs	r2, #1
 80026b6:	701a      	strb	r2, [r3, #0]
		break;
 80026b8:	e013      	b.n	80026e2 <GenNewPresetMode+0xa4>
	default:

		if (RefRange < HRLI)
 80026ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026be:	89fb      	ldrh	r3, [r7, #14]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	da03      	bge.n	80026cc <GenNewPresetMode+0x8e>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_SHORT;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
		else if (RefRange < MRLI)
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
		break;
 80026ca:	e00c      	b.n	80026e6 <GenNewPresetMode+0xa8>
		else if (RefRange < MRLI)
 80026cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026d0:	897b      	ldrh	r3, [r7, #10]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	da07      	bge.n	80026e6 <GenNewPresetMode+0xa8>
			*pNewDistanceMode = VL53L1_DISTANCEMODE_MEDIUM;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2202      	movs	r2, #2
 80026da:	701a      	strb	r2, [r3, #0]
		break;
 80026dc:	e003      	b.n	80026e6 <GenNewPresetMode+0xa8>
		break;
 80026de:	bf00      	nop
 80026e0:	e002      	b.n	80026e8 <GenNewPresetMode+0xaa>
		break;
 80026e2:	bf00      	nop
 80026e4:	e000      	b.n	80026e8 <GenNewPresetMode+0xaa>
		break;
 80026e6:	bf00      	nop
	}
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <CheckAndChangeDistanceMode>:
static void CheckAndChangeDistanceMode(VL53L1_DEV Dev,
		VL53L1_TargetRangeData_t *pRangeData,
		int16_t Ambient100DmaxMm,
		VL53L1_DistanceModes *pNewDistanceMode
)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	80fb      	strh	r3, [r7, #6]
	VL53L1_DistanceModes DistanceMode;
	uint8_t RangeStatus = pRangeData->RangeStatus;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	7ddb      	ldrb	r3, [r3, #23]
 8002708:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t DmaxValid;
	int32_t MinAmbient = BDTable[VL53L1_TUNING_MIN_AMBIENT_DMAX_VALID];
 800270c:	4b28      	ldr	r3, [pc, #160]	; (80027b0 <CheckAndChangeDistanceMode+0xbc>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	623b      	str	r3, [r7, #32]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3318      	adds	r3, #24
 8002716:	61fb      	str	r3, [r7, #28]
	int32_t  tmpint32;


	switch (RangeStatus) {
 8002718:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800271c:	2bff      	cmp	r3, #255	; 0xff
 800271e:	d042      	beq.n	80027a6 <CheckAndChangeDistanceMode+0xb2>
 8002720:	2bff      	cmp	r3, #255	; 0xff
 8002722:	dc07      	bgt.n	8002734 <CheckAndChangeDistanceMode+0x40>
 8002724:	2b07      	cmp	r3, #7
 8002726:	dc02      	bgt.n	800272e <CheckAndChangeDistanceMode+0x3a>
 8002728:	2b06      	cmp	r3, #6
 800272a:	da3c      	bge.n	80027a6 <CheckAndChangeDistanceMode+0xb2>
	case VL53L1_RANGESTATUS_SYNCRONISATION_INT:
	case VL53L1_RANGESTATUS_NONE:
		return;
	default:

		break;
 800272c:	e002      	b.n	8002734 <CheckAndChangeDistanceMode+0x40>
 800272e:	3b0a      	subs	r3, #10
	switch (RangeStatus) {
 8002730:	2b02      	cmp	r3, #2
 8002732:	d938      	bls.n	80027a6 <CheckAndChangeDistanceMode+0xb2>
		break;
 8002734:	bf00      	nop
	}

	DmaxValid = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	tmpint32 = pdev->hist_data.VL53L1_p_004;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 8002742:	61bb      	str	r3, [r7, #24]
	if ((tmpint32 < MinAmbient) || (Ambient100DmaxMm == 0))
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	429a      	cmp	r2, r3
 800274a:	db03      	blt.n	8002754 <CheckAndChangeDistanceMode+0x60>
 800274c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <CheckAndChangeDistanceMode+0x66>
		DmaxValid = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	DistanceMode = VL53L1DevDataGet(Dev,
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002760:	f893 3a6e 	ldrb.w	r3, [r3, #2670]	; 0xa6e
 8002764:	75fb      	strb	r3, [r7, #23]
			CurrentParameters.DistanceMode);

	*pNewDistanceMode = DistanceMode;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	7dfa      	ldrb	r2, [r7, #23]
 800276a:	701a      	strb	r2, [r3, #0]

	if (RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 800276c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002770:	2b00      	cmp	r3, #0
 8002772:	d108      	bne.n	8002786 <CheckAndChangeDistanceMode+0x92>
		GenNewPresetMode(pRangeData->RangeMilliMeter,
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800277a:	7df9      	ldrb	r1, [r7, #23]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff5d 	bl	800263e <GenNewPresetMode>
 8002784:	e010      	b.n	80027a8 <CheckAndChangeDistanceMode+0xb4>
				DistanceMode, pNewDistanceMode);
	else {
		if (DmaxValid)
 8002786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <CheckAndChangeDistanceMode+0xaa>
			GenNewPresetMode(Ambient100DmaxMm,
 800278e:	7df9      	ldrb	r1, [r7, #23]
 8002790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff51 	bl	800263e <GenNewPresetMode>
 800279c:	e004      	b.n	80027a8 <CheckAndChangeDistanceMode+0xb4>
					DistanceMode, pNewDistanceMode);
		else
			*pNewDistanceMode = VL53L1_DISTANCEMODE_LONG;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2203      	movs	r2, #3
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e000      	b.n	80027a8 <CheckAndChangeDistanceMode+0xb4>
		return;
 80027a6:	bf00      	nop
	}
}
 80027a8:	3728      	adds	r7, #40	; 0x28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	2000000c 	.word	0x2000000c

080027b4 <ComputeRQL>:

static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b08d      	sub	sp, #52	; 0x34
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	603a      	str	r2, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
 80027c0:	460b      	mov	r3, r1
 80027c2:	71bb      	strb	r3, [r7, #6]
	int16_t T_Wide = 150;
 80027c4:	2396      	movs	r3, #150	; 0x96
 80027c6:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t SRL = 300;
 80027c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027cc:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t SRAS = 30;
 80027ce:	231e      	movs	r3, #30
 80027d0:	843b      	strh	r3, [r7, #32]
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587;
 80027d2:	4b39      	ldr	r3, [pc, #228]	; (80028b8 <ComputeRQL+0x104>)
 80027d4:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157;
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <ComputeRQL+0x108>)
 80027d8:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;
 80027da:	f641 139a 	movw	r3, #6554	; 0x199a
 80027de:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <ComputeRQL+0x3a>
		returnvalue = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027ec:	e05b      	b.n	80028a6 <ComputeRQL+0xf2>
	else if (((presults_data->max_range_mm -
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80027f4:	461a      	mov	r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
	else if (((presults_data->max_range_mm -
 80027fc:	1ad2      	subs	r2, r2, r3
			presults_data->min_range_mm) >= T_Wide) ||
 80027fe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
	else if (((presults_data->max_range_mm -
 8002802:	429a      	cmp	r2, r3
 8002804:	da02      	bge.n	800280c <ComputeRQL+0x58>
			presults_data->min_range_mm) >= T_Wide) ||
 8002806:	79bb      	ldrb	r3, [r7, #6]
 8002808:	2b07      	cmp	r3, #7
 800280a:	d103      	bne.n	8002814 <ComputeRQL+0x60>
		(FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY))
		returnvalue = 50;
 800280c:	2332      	movs	r3, #50	; 0x32
 800280e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002812:	e048      	b.n	80028a6 <ComputeRQL+0xf2>
	else {
		if (presults_data->median_range_mm < SRL)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800281a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800281e:	429a      	cmp	r2, r3
 8002820:	dd03      	ble.n	800282a <ComputeRQL+0x76>
			RAS = SRAS * 65536;
 8002822:	8c3b      	ldrh	r3, [r7, #32]
 8002824:	041b      	lsls	r3, r3, #16
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002828:	e007      	b.n	800283a <ComputeRQL+0x86>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002830:	461a      	mov	r2, r3
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c


		if (RAS != 0) {
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d020      	beq.n	8002882 <ComputeRQL+0xce>
			partial = (GGm * presults_data->VL53L1_p_005);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002844:	461a      	mov	r2, r3
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	fb02 f303 	mul.w	r3, r2, r3
 800284c:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	429a      	cmp	r2, r3
 800286e:	d804      	bhi.n	800287a <ComputeRQL+0xc6>
				SRQL = GI - partial;
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
 8002878:	e006      	b.n	8002888 <ComputeRQL+0xd4>
			else
				SRQL = 50 * 65536;
 800287a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800287e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002880:	e002      	b.n	8002888 <ComputeRQL+0xd4>
		} else
			SRQL = 100 * 65536;
 8002882:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8002886:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	0c1b      	lsrs	r3, r3, #16
 800288c:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b32      	cmp	r3, #50	; 0x32
 8002892:	d905      	bls.n	80028a0 <ComputeRQL+0xec>
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	2b64      	cmp	r3, #100	; 0x64
 8002898:	bf28      	it	cs
 800289a:	2364      	movcs	r3, #100	; 0x64
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e000      	b.n	80028a2 <ComputeRQL+0xee>
 80028a0:	2332      	movs	r3, #50	; 0x32
 80028a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 80028a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3734      	adds	r7, #52	; 0x34
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	0075b333 	.word	0x0075b333
 80028bc:	0030cccd 	.word	0x0030cccd

080028c0 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	3b04      	subs	r3, #4
 80028ce:	2b0f      	cmp	r3, #15
 80028d0:	d83d      	bhi.n	800294e <ConvertStatusLite+0x8e>
 80028d2:	a201      	add	r2, pc, #4	; (adr r2, 80028d8 <ConvertStatusLite+0x18>)
 80028d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d8:	0800292b 	.word	0x0800292b
 80028dc:	08002925 	.word	0x08002925
 80028e0:	08002931 	.word	0x08002931
 80028e4:	08002937 	.word	0x08002937
 80028e8:	08002943 	.word	0x08002943
 80028ec:	08002949 	.word	0x08002949
 80028f0:	0800294f 	.word	0x0800294f
 80028f4:	0800294f 	.word	0x0800294f
 80028f8:	0800293d 	.word	0x0800293d
 80028fc:	0800294f 	.word	0x0800294f
 8002900:	0800294f 	.word	0x0800294f
 8002904:	0800294f 	.word	0x0800294f
 8002908:	0800294f 	.word	0x0800294f
 800290c:	0800294f 	.word	0x0800294f
 8002910:	08002919 	.word	0x08002919
 8002914:	0800291f 	.word	0x0800291f
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8002918:	230a      	movs	r3, #10
 800291a:	73fb      	strb	r3, [r7, #15]
		break;
 800291c:	e019      	b.n	8002952 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 800291e:	2306      	movs	r3, #6
 8002920:	73fb      	strb	r3, [r7, #15]
		break;
 8002922:	e016      	b.n	8002952 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8002924:	2304      	movs	r3, #4
 8002926:	73fb      	strb	r3, [r7, #15]
		break;
 8002928:	e013      	b.n	8002952 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800292a:	2302      	movs	r3, #2
 800292c:	73fb      	strb	r3, [r7, #15]
		break;
 800292e:	e010      	b.n	8002952 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
		break;
 8002934:	e00d      	b.n	8002952 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8002936:	2307      	movs	r3, #7
 8002938:	73fb      	strb	r3, [r7, #15]
		break;
 800293a:	e00a      	b.n	8002952 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800293c:	2309      	movs	r3, #9
 800293e:	73fb      	strb	r3, [r7, #15]
		break;
 8002940:	e007      	b.n	8002952 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8002942:	2303      	movs	r3, #3
 8002944:	73fb      	strb	r3, [r7, #15]
		break;
 8002946:	e004      	b.n	8002952 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]
		break;
 800294c:	e001      	b.n	8002952 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800294e:	23ff      	movs	r3, #255	; 0xff
 8002950:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <ConvertStatusHisto>:


static uint8_t ConvertStatusHisto(uint8_t FilteredRangeStatus)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	3b05      	subs	r3, #5
 800296e:	2b12      	cmp	r3, #18
 8002970:	d840      	bhi.n	80029f4 <ConvertStatusHisto+0x94>
 8002972:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <ConvertStatusHisto+0x18>)
 8002974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002978:	080029c5 	.word	0x080029c5
 800297c:	080029cb 	.word	0x080029cb
 8002980:	080029d7 	.word	0x080029d7
 8002984:	080029f5 	.word	0x080029f5
 8002988:	080029ef 	.word	0x080029ef
 800298c:	080029f5 	.word	0x080029f5
 8002990:	080029f5 	.word	0x080029f5
 8002994:	080029f5 	.word	0x080029f5
 8002998:	080029f5 	.word	0x080029f5
 800299c:	080029f5 	.word	0x080029f5
 80029a0:	080029f5 	.word	0x080029f5
 80029a4:	080029f5 	.word	0x080029f5
 80029a8:	080029f5 	.word	0x080029f5
 80029ac:	080029f5 	.word	0x080029f5
 80029b0:	080029d1 	.word	0x080029d1
 80029b4:	080029e3 	.word	0x080029e3
 80029b8:	080029f5 	.word	0x080029f5
 80029bc:	080029e9 	.word	0x080029e9
 80029c0:	080029dd 	.word	0x080029dd
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80029c4:	2304      	movs	r3, #4
 80029c6:	73fb      	strb	r3, [r7, #15]
		break;
 80029c8:	e016      	b.n	80029f8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
		break;
 80029ce:	e013      	b.n	80029f8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80029d0:	2306      	movs	r3, #6
 80029d2:	73fb      	strb	r3, [r7, #15]
		break;
 80029d4:	e010      	b.n	80029f8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80029d6:	2307      	movs	r3, #7
 80029d8:	73fb      	strb	r3, [r7, #15]
		break;
 80029da:	e00d      	b.n	80029f8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS:
		RangeStatus = VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;
 80029dc:	230c      	movs	r3, #12
 80029de:	73fb      	strb	r3, [r7, #15]
		break;
 80029e0:	e00a      	b.n	80029f8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_EVENTCONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80029e2:	2307      	movs	r3, #7
 80029e4:	73fb      	strb	r3, [r7, #15]
		break;
 80029e6:	e007      	b.n	80029f8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MERGED_PULSE;
 80029e8:	230b      	movs	r3, #11
 80029ea:	73fb      	strb	r3, [r7, #15]
		break;
 80029ec:	e004      	b.n	80029f8 <ConvertStatusHisto+0x98>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80029ee:	2300      	movs	r3, #0
 80029f0:	73fb      	strb	r3, [r7, #15]
		break;
 80029f2:	e001      	b.n	80029f8 <ConvertStatusHisto+0x98>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80029f4:	23ff      	movs	r3, #255	; 0xff
 80029f6:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop

08002a08 <SetTargetData>:

static VL53L1_Error SetTargetData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t streamcount, uint8_t iteration,
	uint8_t device_status, VL53L1_range_data_t *presults_data,
	VL53L1_TargetRangeData_t *pRangeData)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b092      	sub	sp, #72	; 0x48
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	461a      	mov	r2, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	70fb      	strb	r3, [r7, #3]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	70bb      	strb	r3, [r7, #2]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	VL53L1_LLDriverData_t *pdev =
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3318      	adds	r3, #24
 8002a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_tuning_parm_storage_t *tp =
 8002a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a30:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8002a34:	63bb      	str	r3, [r7, #56]	; 0x38
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	VL53L1_PresetModes PresetMode;
	int16_t Range, RangeDiff, RangeMillimeterInit;
	int32_t ExtendedRangeEnabled = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
	uint8_t uwr_status;
	int16_t AddOffset;
	int32_t TuningMinValidSignal;
	FixPoint1616_t MinValidSignal;

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8002a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a3c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8002a48:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff feaf 	bl	80027b4 <ComputeRQL>
 8002a56:	4603      	mov	r3, r0
 8002a58:	461a      	mov	r2, r3
 8002a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a5c:	701a      	strb	r2, [r3, #0]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a60:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002a62:	025b      	lsls	r3, r3, #9
 8002a64:	633b      	str	r3, [r7, #48]	; 0x30
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8002a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a6a:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a6e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002a70:	025b      	lsls	r3, r3, #9
 8002a72:	62fb      	str	r3, [r7, #44]	; 0x2c
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8002a74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a78:	60da      	str	r2, [r3, #12]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a7c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002a7e:	025b      	lsls	r3, r3, #9
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8002a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a86:	611a      	str	r2, [r3, #16]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8002a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a90:	829a      	strh	r2, [r3, #20]
	pRangeData->RangeMaxMilliMeter = presults_data->max_range_mm;
 8002a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a94:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8002a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a9a:	805a      	strh	r2, [r3, #2]
	pRangeData->RangeMinMilliMeter = presults_data->min_range_mm;
 8002a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8002aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa4:	809a      	strh	r2, [r3, #4]

	pRangeData->RangeFractionalPart = 0;
 8002aa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	759a      	strb	r2, [r3, #22]


	switch (device_status) {
 8002aac:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002ab0:	2b11      	cmp	r3, #17
 8002ab2:	d009      	beq.n	8002ac8 <SetTargetData+0xc0>
 8002ab4:	2b11      	cmp	r3, #17
 8002ab6:	dc0f      	bgt.n	8002ad8 <SetTargetData+0xd0>
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	dc02      	bgt.n	8002ac2 <SetTargetData+0xba>
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	dc03      	bgt.n	8002ac8 <SetTargetData+0xc0>
 8002ac0:	e00a      	b.n	8002ad8 <SetTargetData+0xd0>
 8002ac2:	2b0d      	cmp	r3, #13
 8002ac4:	d004      	beq.n	8002ad0 <SetTargetData+0xc8>
 8002ac6:	e007      	b.n	8002ad8 <SetTargetData+0xd0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8002ac8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aca:	2205      	movs	r2, #5
 8002acc:	75da      	strb	r2, [r3, #23]
		break;
 8002ace:	e006      	b.n	8002ade <SetTargetData+0xd6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8002ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ad2:	220d      	movs	r2, #13
 8002ad4:	75da      	strb	r2, [r3, #23]
		break;
 8002ad6:	e002      	b.n	8002ade <SetTargetData+0xd6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8002ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ada:	2200      	movs	r2, #0
 8002adc:	75da      	strb	r2, [r3, #23]
	}


	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ae0:	7ddb      	ldrb	r3, [r3, #23]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d117      	bne.n	8002b16 <SetTargetData+0x10e>
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d114      	bne.n	8002b16 <SetTargetData+0x10e>
		(active_results == 0)) {
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_NONE;
 8002aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aee:	22ff      	movs	r2, #255	; 0xff
 8002af0:	75da      	strb	r2, [r3, #23]
		pRangeData->SignalRateRtnMegaCps = 0;
 8002af2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
		pRangeData->SigmaMilliMeter = 0;
 8002af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002afa:	2200      	movs	r2, #0
 8002afc:	611a      	str	r2, [r3, #16]
		pRangeData->RangeMilliMeter = 8191;
 8002afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b00:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002b04:	829a      	strh	r2, [r3, #20]
		pRangeData->RangeMaxMilliMeter = 8191;
 8002b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b08:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002b0c:	805a      	strh	r2, [r3, #2]
		pRangeData->RangeMinMilliMeter = 8191;
 8002b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b10:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002b14:	809a      	strh	r2, [r3, #4]
	}


	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8002b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b18:	7ddb      	ldrb	r3, [r3, #23]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d125      	bne.n	8002b6a <SetTargetData+0x162>
		PresetMode = VL53L1DevDataGet(Dev,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b24:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8002b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				CurrentParameters.PresetMode);
		if ((PresetMode == VL53L1_PRESETMODE_MULTIZONES_SCANNING) ||
 8002b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d007      	beq.n	8002b44 <SetTargetData+0x13c>
 8002b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d003      	beq.n	8002b44 <SetTargetData+0x13c>
			(PresetMode == VL53L1_PRESETMODE_RANGING) ||
 8002b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b40:	2b09      	cmp	r3, #9
 8002b42:	d109      	bne.n	8002b58 <SetTargetData+0x150>
			(PresetMode == VL53L1_PRESETMODE_PROXY_RANGING_MODE))
			pRangeData->RangeStatus =
				ConvertStatusHisto(FilteredRangeStatus);
 8002b44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff09 	bl	8002960 <ConvertStatusHisto>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8002b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b54:	75da      	strb	r2, [r3, #23]
 8002b56:	e008      	b.n	8002b6a <SetTargetData+0x162>
		else
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8002b58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff feaf 	bl	80028c0 <ConvertStatusLite>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8002b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b68:	75da      	strb	r2, [r3, #23]
	}


	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b6c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002b6e:	025b      	lsls	r3, r3, #9
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->VL53L1_p_005);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b78:	461a      	mov	r2, r3
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	f8c2 3a80 	str.w	r3, [r2, #2688]	; 0xa80
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8002b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b82:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b84:	025b      	lsls	r3, r3, #9
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b92:	f8c2 3a84 	str.w	r3, [r2, #2692]	; 0xa84
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);



	VL53L1_GetLimitCheckValue(Dev,
 8002b96:	f107 0310 	add.w	r3, r7, #16
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fb2d 	bl	80021fe <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8002ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ba8:	2b06      	cmp	r3, #6
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8002bb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_GetLimitCheckEnable(Dev,
 8002bb6:	f107 0315 	add.w	r3, r7, #21
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff faf8 	bl	80021b4 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8002bc4:	7d7b      	ldrb	r3, [r7, #21]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d105      	bne.n	8002bd6 <SetTargetData+0x1ce>
 8002bca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <SetTargetData+0x1ce>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <SetTargetData+0x1d0>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002be2:	461a      	mov	r2, r3
 8002be4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002be8:	f882 3a76 	strb.w	r3, [r2, #2678]	; 0xa76
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);


	VL53L1_GetLimitCheckValue(Dev,
 8002bec:	f107 0310 	add.w	r3, r7, #16
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff fb02 	bl	80021fe <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8002bfa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	bf0c      	ite	eq
 8002c02:	2301      	moveq	r3, #1
 8002c04:	2300      	movne	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8002c08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	VL53L1_GetLimitCheckEnable(Dev,
 8002c0c:	f107 0315 	add.w	r3, r7, #21
 8002c10:	461a      	mov	r2, r3
 8002c12:	2101      	movs	r1, #1
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff facd 	bl	80021b4 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8002c1a:	7d7b      	ldrb	r3, [r7, #21]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <SetTargetData+0x224>
 8002c20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <SetTargetData+0x224>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <SetTargetData+0x226>
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002c3e:	f882 3a77 	strb.w	r3, [r2, #2679]	; 0xa77
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8002c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c44:	8a9b      	ldrh	r3, [r3, #20]
 8002c46:	847b      	strh	r3, [r7, #34]	; 0x22
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c4a:	7ddb      	ldrb	r3, [r3, #23]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d110      	bne.n	8002c72 <SetTargetData+0x26a>
 8002c50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	da0c      	bge.n	8002c72 <SetTargetData+0x26a>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8002c58:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8002c5c:	4ba3      	ldr	r3, [pc, #652]	; (8002eec <SetTargetData+0x4e4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	da03      	bge.n	8002c6c <SetTargetData+0x264>
			pRangeData->RangeStatus =
 8002c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c66:	220e      	movs	r2, #14
 8002c68:	75da      	strb	r2, [r3, #23]
 8002c6a:	e002      	b.n	8002c72 <SetTargetData+0x26a>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8002c6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c6e:	2200      	movs	r2, #0
 8002c70:	829a      	strh	r2, [r3, #20]
	}


	VL53L1_get_tuning_parm(Dev,
 8002c72:	f107 0308 	add.w	r3, r7, #8
 8002c76:	461a      	mov	r2, r3
 8002c78:	f248 01be 	movw	r1, #32958	; 0x80be
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f004 f943 	bl	8006f08 <VL53L1_get_tuning_parm>
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS,
		&TuningMinValidSignal);
	MinValidSignal = (FixPoint1616_t)TuningMinValidSignal;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	61fb      	str	r3, [r7, #28]
	if ((iteration > 0) &&
 8002c86:	787b      	ldrb	r3, [r7, #1]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00b      	beq.n	8002ca4 <SetTargetData+0x29c>
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c8e:	7ddb      	ldrb	r3, [r3, #23]
	if ((iteration > 0) &&
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <SetTargetData+0x29c>
		(pRangeData->SignalRateRtnMegaCps < MinValidSignal))
 8002c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c96:	689b      	ldr	r3, [r3, #8]
		(pRangeData->RangeStatus ==  VL53L1_RANGESTATUS_RANGE_VALID) &&
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d902      	bls.n	8002ca4 <SetTargetData+0x29c>
		pRangeData->RangeStatus =
 8002c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ca0:	220c      	movs	r2, #12
 8002ca2:	75da      	strb	r2, [r3, #23]
			VL53L1_RANGESTATUS_TARGET_PRESENT_LACK_OF_SIGNAL;




	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_UWR_ENABLE,
 8002ca4:	f107 030c 	add.w	r3, r7, #12
 8002ca8:	461a      	mov	r2, r3
 8002caa:	f248 0191 	movw	r1, #32913	; 0x8091
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f004 f92a 	bl	8006f08 <VL53L1_get_tuning_parm>
			&ExtendedRangeEnabled);

	sequency = streamcount % 2;
 8002cb4:	78bb      	ldrb	r3, [r7, #2]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	76fb      	strb	r3, [r7, #27]
	uwr_status = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	RangeMillimeterInit = pRangeData->RangeMilliMeter;
 8002cc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cc4:	8a9b      	ldrh	r3, [r3, #20]
 8002cc6:	833b      	strh	r3, [r7, #24]
	AddOffset = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	pRangeData->ExtendedRange = 0;
 8002cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	761a      	strb	r2, [r3, #24]

	if ((active_results != 1) ||
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d106      	bne.n	8002ce8 <SetTargetData+0x2e0>
		(pdev->PreviousRangeActiveResults != 1))
 8002cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cdc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002ce0:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
	if ((active_results != 1) ||
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d001      	beq.n	8002cec <SetTargetData+0x2e4>
		ExtendedRangeEnabled = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]

	if (ExtendedRangeEnabled &&
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 8250 	beq.w	8003194 <SetTargetData+0x78c>
		(pRangeData->RangeStatus ==
 8002cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf6:	7ddb      	ldrb	r3, [r3, #23]
	if (ExtendedRangeEnabled &&
 8002cf8:	2b07      	cmp	r3, #7
 8002cfa:	d004      	beq.n	8002d06 <SetTargetData+0x2fe>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pRangeData->RangeStatus ==
 8002cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cfe:	7ddb      	ldrb	r3, [r3, #23]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	f040 8247 	bne.w	8003194 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL)
		&& (pdev->PreviousRangeStatus[iteration] ==
 8002d06:	787b      	ldrb	r3, [r7, #1]
 8002d08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002d10:	3320      	adds	r3, #32
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b07      	cmp	r3, #7
 8002d16:	d01c      	beq.n	8002d52 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
			pdev->PreviousRangeStatus[iteration] ==
 8002d18:	787b      	ldrb	r3, [r7, #1]
 8002d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002d22:	3320      	adds	r3, #32
 8002d24:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_WRAP_TARGET_FAIL ||
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d013      	beq.n	8002d52 <SetTargetData+0x34a>
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
			(pdev->PreviousRangeStatus[iteration] ==
 8002d2a:	787b      	ldrb	r3, [r7, #1]
 8002d2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002d34:	3320      	adds	r3, #32
 8002d36:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL ||
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f040 822b 	bne.w	8003194 <SetTargetData+0x78c>
			VL53L1_RANGESTATUS_RANGE_VALID &&
			pdev->PreviousExtendedRange[iteration] == 1)))
 8002d3e:	787b      	ldrb	r3, [r7, #1]
 8002d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8002d48:	3324      	adds	r3, #36	; 0x24
 8002d4a:	781b      	ldrb	r3, [r3, #0]
			VL53L1_RANGESTATUS_RANGE_VALID &&
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	f040 8221 	bne.w	8003194 <SetTargetData+0x78c>
	{
		if (((pdev->PreviousStreamCount) ==
 8002d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002d58:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8002d5c:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count - 1 ))
 8002d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d60:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8002d64:	3b01      	subs	r3, #1
		if (((pdev->PreviousStreamCount) ==
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d00c      	beq.n	8002d84 <SetTargetData+0x37c>
		|| ((pdev->PreviousStreamCount) ==
 8002d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002d70:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8002d74:	461a      	mov	r2, r3
			(pdev->hist_data.result__stream_count + 127)))
 8002d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d78:	f893 3483 	ldrb.w	r3, [r3, #1155]	; 0x483
 8002d7c:	337f      	adds	r3, #127	; 0x7f
		|| ((pdev->PreviousStreamCount) ==
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	f040 81dc 	bne.w	800313c <SetTargetData+0x734>
		{
		RangeDiff = pRangeData->RangeMilliMeter -
 8002d84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d86:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002d8a:	b29a      	uxth	r2, r3
			pdev->PreviousRangeMilliMeter[iteration];
 8002d8c:	787b      	ldrb	r3, [r7, #1]
 8002d8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d90:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 8002d94:	330c      	adds	r3, #12
 8002d96:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002d9a:	b29b      	uxth	r3, r3
		RangeDiff = pRangeData->RangeMilliMeter -
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	82fb      	strh	r3, [r7, #22]

		uwr_status = 1;
 8002da2:	2301      	movs	r3, #1
 8002da4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		switch (pdev->preset_mode) {
 8002da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002daa:	785b      	ldrb	r3, [r3, #1]
 8002dac:	2b21      	cmp	r3, #33	; 0x21
 8002dae:	d008      	beq.n	8002dc2 <SetTargetData+0x3ba>
 8002db0:	2b21      	cmp	r3, #33	; 0x21
 8002db2:	f300 81bf 	bgt.w	8003134 <SetTargetData+0x72c>
 8002db6:	2b1b      	cmp	r3, #27
 8002db8:	f000 8113 	beq.w	8002fe2 <SetTargetData+0x5da>
 8002dbc:	2b1e      	cmp	r3, #30
 8002dbe:	d004      	beq.n	8002dca <SetTargetData+0x3c2>
 8002dc0:	e1b8      	b.n	8003134 <SetTargetData+0x72c>
			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:

				uwr_status = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8002dc8:	e1b9      	b.n	800313e <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002dd0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	dd0f      	ble.n	8002df8 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
				if (RangeDiff > tp->tp_uwr_med_z_1_min &&
 8002dde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	da08      	bge.n	8002df8 <SetTargetData+0x3f0>
					RangeDiff < tp->tp_uwr_med_z_1_max &&
 8002de6:	7efb      	ldrb	r3, [r7, #27]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d105      	bne.n	8002df8 <SetTargetData+0x3f0>
					sequency == 1) {
					AddOffset =
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002df2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002df6:	e0f3      	b.n	8002fe0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002df8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8002e02:	425b      	negs	r3, r3
 8002e04:	429a      	cmp	r2, r3
 8002e06:	da10      	bge.n	8002e2a <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002e08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0e:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 8002e12:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_1_min &&
 8002e14:	429a      	cmp	r2, r3
 8002e16:	dd08      	ble.n	8002e2a <SetTargetData+0x422>
					RangeDiff > -tp->tp_uwr_med_z_1_max &&
 8002e18:	7efb      	ldrb	r3, [r7, #27]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d105      	bne.n	8002e2a <SetTargetData+0x422>
					sequency == 0) {
					AddOffset =
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e20:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8002e24:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e28:	e0da      	b.n	8002fe0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_1_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2c:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002e30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	dd0f      	ble.n	8002e58 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e3a:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
				if (RangeDiff > tp->tp_uwr_med_z_2_min &&
 8002e3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	da08      	bge.n	8002e58 <SetTargetData+0x450>
					RangeDiff < tp->tp_uwr_med_z_2_max &&
 8002e46:	7efb      	ldrb	r3, [r7, #27]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d105      	bne.n	8002e58 <SetTargetData+0x450>
					sequency == 0) {
					AddOffset =
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 8002e52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e56:	e0c3      	b.n	8002fe0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002e58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5e:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8002e62:	425b      	negs	r3, r3
 8002e64:	429a      	cmp	r2, r3
 8002e66:	da10      	bge.n	8002e8a <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8002e68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6e:	f9b3 3094 	ldrsh.w	r3, [r3, #148]	; 0x94
 8002e72:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_2_min &&
 8002e74:	429a      	cmp	r2, r3
 8002e76:	dd08      	ble.n	8002e8a <SetTargetData+0x482>
					RangeDiff > -tp->tp_uwr_med_z_2_max &&
 8002e78:	7efb      	ldrb	r3, [r7, #27]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d105      	bne.n	8002e8a <SetTargetData+0x482>
					sequency == 1) {
					AddOffset =
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e80:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002e84:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002e88:	e0aa      	b.n	8002fe0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_2_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002e90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	dd0f      	ble.n	8002eb8 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9a:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
				if (RangeDiff > tp->tp_uwr_med_z_3_min &&
 8002e9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	da08      	bge.n	8002eb8 <SetTargetData+0x4b0>
					RangeDiff < tp->tp_uwr_med_z_3_max &&
 8002ea6:	7efb      	ldrb	r3, [r7, #27]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d105      	bne.n	8002eb8 <SetTargetData+0x4b0>
					sequency == 1) {
					AddOffset =
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8002eb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002eb6:	e093      	b.n	8002fe0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_3_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002eb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	f9b3 3096 	ldrsh.w	r3, [r3, #150]	; 0x96
 8002ec2:	425b      	negs	r3, r3
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	da13      	bge.n	8002ef0 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002ec8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ece:	f9b3 3098 	ldrsh.w	r3, [r3, #152]	; 0x98
 8002ed2:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_3_min &&
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dd0b      	ble.n	8002ef0 <SetTargetData+0x4e8>
					RangeDiff > -tp->tp_uwr_med_z_3_max &&
 8002ed8:	7efb      	ldrb	r3, [r7, #27]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d108      	bne.n	8002ef0 <SetTargetData+0x4e8>
					sequency == 0) {
					AddOffset =
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8002ee4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ee8:	e07a      	b.n	8002fe0 <SetTargetData+0x5d8>
 8002eea:	bf00      	nop
 8002eec:	2000000c 	.word	0x2000000c
					tp->tp_uwr_med_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef2:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002ef6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	dd0f      	ble.n	8002f1e <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f00:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
				if (RangeDiff > tp->tp_uwr_med_z_4_min &&
 8002f04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	da08      	bge.n	8002f1e <SetTargetData+0x516>
					RangeDiff < tp->tp_uwr_med_z_4_max &&
 8002f0c:	7efb      	ldrb	r3, [r7, #27]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <SetTargetData+0x516>
					sequency == 0) {
					AddOffset =
 8002f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f14:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002f18:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f1c:	e060      	b.n	8002fe0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002f1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f24:	f9b3 309a 	ldrsh.w	r3, [r3, #154]	; 0x9a
 8002f28:	425b      	negs	r3, r3
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	da10      	bge.n	8002f50 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002f2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	f9b3 309c 	ldrsh.w	r3, [r3, #156]	; 0x9c
 8002f38:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_4_min &&
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	dd08      	ble.n	8002f50 <SetTargetData+0x548>
					RangeDiff > -tp->tp_uwr_med_z_4_max &&
 8002f3e:	7efb      	ldrb	r3, [r7, #27]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <SetTargetData+0x548>
					sequency == 1) {
					AddOffset =
 8002f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f46:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8002f4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f4e:	e047      	b.n	8002fe0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f52:	f9b3 30a0 	ldrsh.w	r3, [r3, #160]	; 0xa0
 8002f56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	da0c      	bge.n	8002f78 <SetTargetData+0x570>
					RangeDiff > tp->tp_uwr_med_z_5_min) {
 8002f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f60:	f9b3 309e 	ldrsh.w	r3, [r3, #158]	; 0x9e
				if (RangeDiff < tp->tp_uwr_med_z_5_max &&
 8002f64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	dd05      	ble.n	8002f78 <SetTargetData+0x570>
					AddOffset =
 8002f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8002f72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002f76:	e033      	b.n	8002fe0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_5_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8002f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7a:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8002f7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	dd0f      	ble.n	8002fa6 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8002f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f88:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
				if (RangeDiff > tp->tp_uwr_med_z_6_min &&
 8002f8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	da08      	bge.n	8002fa6 <SetTargetData+0x59e>
					RangeDiff < tp->tp_uwr_med_z_6_max &&
 8002f94:	7efb      	ldrb	r3, [r7, #27]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d105      	bne.n	8002fa6 <SetTargetData+0x59e>
					sequency == 1) {
					AddOffset =
 8002f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8002fa0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fa4:	e01c      	b.n	8002fe0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8002fa6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fac:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8002fb0:	425b      	negs	r3, r3
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	da10      	bge.n	8002fd8 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8002fb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8002fc0:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_med_z_6_min &&
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	dd08      	ble.n	8002fd8 <SetTargetData+0x5d0>
					RangeDiff > -tp->tp_uwr_med_z_6_max &&
 8002fc6:	7efb      	ldrb	r3, [r7, #27]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <SetTargetData+0x5d0>
					sequency == 0) {
					AddOffset =
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fce:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8002fd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002fd6:	e003      	b.n	8002fe0 <SetTargetData+0x5d8>
					tp->tp_uwr_med_corr_z_6_rangea;
				}
				else
					uwr_status = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8002fde:	e0ae      	b.n	800313e <SetTargetData+0x736>
 8002fe0:	e0ad      	b.n	800313e <SetTargetData+0x736>

			case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 8002fe8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	dd0f      	ble.n	8003010 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff2:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
				if (RangeDiff > tp->tp_uwr_lng_z_1_min &&
 8002ff6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	da08      	bge.n	8003010 <SetTargetData+0x608>
					RangeDiff < tp->tp_uwr_lng_z_1_max &&
 8002ffe:	7efb      	ldrb	r3, [r7, #27]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <SetTargetData+0x608>
					sequency == 0) {
					AddOffset =
 8003004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003006:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800300a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800300e:	e090      	b.n	8003132 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangea;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 8003010:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003016:	f9b3 30be 	ldrsh.w	r3, [r3, #190]	; 0xbe
 800301a:	425b      	negs	r3, r3
 800301c:	429a      	cmp	r2, r3
 800301e:	da10      	bge.n	8003042 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003020:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003026:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	; 0xc0
 800302a:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_1_min &&
 800302c:	429a      	cmp	r2, r3
 800302e:	dd08      	ble.n	8003042 <SetTargetData+0x63a>
					RangeDiff > -tp->tp_uwr_lng_z_1_max &&
 8003030:	7efb      	ldrb	r3, [r7, #27]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d105      	bne.n	8003042 <SetTargetData+0x63a>
					sequency == 1) {
					AddOffset =
 8003036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003038:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 800303c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003040:	e077      	b.n	8003132 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_1_rangeb;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003044:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 8003048:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800304c:	429a      	cmp	r2, r3
 800304e:	dd0f      	ble.n	8003070 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
				if (RangeDiff > tp->tp_uwr_lng_z_2_min &&
 8003056:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800305a:	429a      	cmp	r2, r3
 800305c:	da08      	bge.n	8003070 <SetTargetData+0x668>
					RangeDiff < tp->tp_uwr_lng_z_2_max &&
 800305e:	7efb      	ldrb	r3, [r7, #27]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d105      	bne.n	8003070 <SetTargetData+0x668>
					sequency == 1) {
					AddOffset =
 8003064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003066:	f8b3 30d8 	ldrh.w	r3, [r3, #216]	; 0xd8
 800306a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800306e:	e060      	b.n	8003132 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 8003070:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003076:	f9b3 30c2 	ldrsh.w	r3, [r3, #194]	; 0xc2
 800307a:	425b      	negs	r3, r3
 800307c:	429a      	cmp	r2, r3
 800307e:	da10      	bge.n	80030a2 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003080:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003086:	f9b3 30c4 	ldrsh.w	r3, [r3, #196]	; 0xc4
 800308a:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_2_min &&
 800308c:	429a      	cmp	r2, r3
 800308e:	dd08      	ble.n	80030a2 <SetTargetData+0x69a>
					RangeDiff > -tp->tp_uwr_lng_z_2_max &&
 8003090:	7efb      	ldrb	r3, [r7, #27]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d105      	bne.n	80030a2 <SetTargetData+0x69a>
					sequency == 0) {
					AddOffset =
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 800309c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80030a0:	e047      	b.n	8003132 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_2_rangea;
				}
				else
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 80030a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	da0c      	bge.n	80030ca <SetTargetData+0x6c2>
					RangeDiff > tp->tp_uwr_lng_z_3_min) {
 80030b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b2:	f9b3 30c6 	ldrsh.w	r3, [r3, #198]	; 0xc6
				if (RangeDiff < tp->tp_uwr_lng_z_3_max &&
 80030b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	dd05      	ble.n	80030ca <SetTargetData+0x6c2>
					AddOffset =
 80030be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c0:	f8b3 30da 	ldrh.w	r3, [r3, #218]	; 0xda
 80030c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80030c8:	e033      	b.n	8003132 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_3_rangea;
				}
				else
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 80030ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030cc:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 80030d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	dd0f      	ble.n	80030f8 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
				if (RangeDiff > tp->tp_uwr_lng_z_4_min &&
 80030de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	da08      	bge.n	80030f8 <SetTargetData+0x6f0>
					RangeDiff < tp->tp_uwr_lng_z_4_max &&
 80030e6:	7efb      	ldrb	r3, [r7, #27]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <SetTargetData+0x6f0>
					sequency == 1) {
					AddOffset =
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	f8b3 30e0 	ldrh.w	r3, [r3, #224]	; 0xe0
 80030f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80030f6:	e01c      	b.n	8003132 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangeb;
				}
				else
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 80030f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fe:	f9b3 30ca 	ldrsh.w	r3, [r3, #202]	; 0xca
 8003102:	425b      	negs	r3, r3
 8003104:	429a      	cmp	r2, r3
 8003106:	da10      	bge.n	800312a <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8003108:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310e:	f9b3 30cc 	ldrsh.w	r3, [r3, #204]	; 0xcc
 8003112:	425b      	negs	r3, r3
				if (RangeDiff < -tp->tp_uwr_lng_z_4_min &&
 8003114:	429a      	cmp	r2, r3
 8003116:	dd08      	ble.n	800312a <SetTargetData+0x722>
					RangeDiff > -tp->tp_uwr_lng_z_4_max &&
 8003118:	7efb      	ldrb	r3, [r7, #27]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <SetTargetData+0x722>
					sequency == 0) {
					AddOffset =
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	f8b3 30de 	ldrh.w	r3, [r3, #222]	; 0xde
 8003124:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003128:	e003      	b.n	8003132 <SetTargetData+0x72a>
					tp->tp_uwr_lng_corr_z_4_rangea;
				}
				else
					uwr_status = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 8003130:	e005      	b.n	800313e <SetTargetData+0x736>
 8003132:	e004      	b.n	800313e <SetTargetData+0x736>

			default:
				uwr_status = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
 800313a:	e000      	b.n	800313e <SetTargetData+0x736>
			}
		}
 800313c:	bf00      	nop

		if (uwr_status) {
 800313e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003142:	2b00      	cmp	r3, #0
 8003144:	d026      	beq.n	8003194 <SetTargetData+0x78c>
			pRangeData->RangeMilliMeter += AddOffset;
 8003146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003148:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800314c:	b29a      	uxth	r2, r3
 800314e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003152:	4413      	add	r3, r2
 8003154:	b29b      	uxth	r3, r3
 8003156:	b21a      	sxth	r2, r3
 8003158:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800315a:	829a      	strh	r2, [r3, #20]
			pRangeData->RangeMinMilliMeter += AddOffset;
 800315c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800315e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003162:	b29a      	uxth	r2, r3
 8003164:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003168:	4413      	add	r3, r2
 800316a:	b29b      	uxth	r3, r3
 800316c:	b21a      	sxth	r2, r3
 800316e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003170:	809a      	strh	r2, [r3, #4]
			pRangeData->RangeMaxMilliMeter += AddOffset;
 8003172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003174:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003178:	b29a      	uxth	r2, r3
 800317a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800317e:	4413      	add	r3, r2
 8003180:	b29b      	uxth	r3, r3
 8003182:	b21a      	sxth	r2, r3
 8003184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003186:	805a      	strh	r2, [r3, #2]
			pRangeData->ExtendedRange = 1;
 8003188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800318a:	2201      	movs	r2, #1
 800318c:	761a      	strb	r2, [r3, #24]
			pRangeData->RangeStatus = 0;
 800318e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003190:	2200      	movs	r2, #0
 8003192:	75da      	strb	r2, [r3, #23]
		}

	}

	pdev->PreviousRangeMilliMeter[iteration] = RangeMillimeterInit;
 8003194:	787b      	ldrb	r3, [r7, #1]
 8003196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003198:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800319c:	330c      	adds	r3, #12
 800319e:	8b39      	ldrh	r1, [r7, #24]
 80031a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	pdev->PreviousRangeStatus[iteration] = pRangeData->RangeStatus;
 80031a4:	787b      	ldrb	r3, [r7, #1]
 80031a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031a8:	7dd1      	ldrb	r1, [r2, #23]
 80031aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80031b2:	3320      	adds	r3, #32
 80031b4:	460a      	mov	r2, r1
 80031b6:	701a      	strb	r2, [r3, #0]
	pdev->PreviousExtendedRange[iteration] = pRangeData->ExtendedRange;
 80031b8:	787b      	ldrb	r3, [r7, #1]
 80031ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031bc:	7e11      	ldrb	r1, [r2, #24]
 80031be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80031c6:	3324      	adds	r3, #36	; 0x24
 80031c8:	460a      	mov	r2, r1
 80031ca:	701a      	strb	r2, [r3, #0]
	pdev->PreviousRangeActiveResults = active_results;
 80031cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80031d2:	461a      	mov	r2, r3
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f882 30e8 	strb.w	r3, [r2, #232]	; 0xe8

	return Status;
 80031da:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3748      	adds	r7, #72	; 0x48
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop

080031e8 <SetMeasurementData>:
}

static VL53L1_Error SetMeasurementData(VL53L1_DEV Dev,
	VL53L1_range_results_t *presults,
	VL53L1_MultiRangingData_t *pMultiRangingData)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b091      	sub	sp, #68	; 0x44
 80031ec:	af04      	add	r7, sp, #16
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3318      	adds	r3, #24
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t i;
	uint8_t iteration;
	VL53L1_TargetRangeData_t *pRangeData;
	VL53L1_range_data_t *presults_data;
	int16_t dmax_min;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t Furthest_idx = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	int16_t Furthest_range = 0;
 8003206:	2300      	movs	r3, #0
 8003208:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint8_t ActiveResults, amb_idx;

	pMultiRangingData->NumberOfObjectsFound = presults->active_results;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	7c9a      	ldrb	r2, [r3, #18]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	719a      	strb	r2, [r3, #6]
	pMultiRangingData->RoiNumber = presults->zone_id;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	789a      	ldrb	r2, [r3, #2]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	715a      	strb	r2, [r3, #5]
	pMultiRangingData->HasXtalkValueChanged =
			presults->smudge_corrector_data.new_xtalk_applied_flag;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
	pMultiRangingData->HasXtalkValueChanged =
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	dmax_min = MIN(presults->wrap_dmax_mm,
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003232:	4293      	cmp	r3, r2
 8003234:	bfa8      	it	ge
 8003236:	4613      	movge	r3, r2
 8003238:	847b      	strh	r3, [r7, #34]	; 0x22
			presults->VL53L1_p_007[DMAX_REFLECTANCE_IDX]);
	pMultiRangingData->DmaxMilliMeter = dmax_min;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800323e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c


	pMultiRangingData->TimeStamp = 0;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

	pMultiRangingData->StreamCount = presults->stream_count;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	78da      	ldrb	r2, [r3, #3]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	711a      	strb	r2, [r3, #4]

	pMultiRangingData->RecommendedDistanceMode =
		VL53L1DevDataGet(Dev, CurrentParameters.DistanceMode);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003256:	f893 2a6e 	ldrb.w	r2, [r3, #2670]	; 0xa6e
	pMultiRangingData->RecommendedDistanceMode =
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
	ActiveResults = presults->active_results;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	7c9b      	ldrb	r3, [r3, #18]
 8003264:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (ActiveResults < 1)
 8003268:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800326c:	2b00      	cmp	r3, #0
 800326e:	d103      	bne.n	8003278 <SetMeasurementData+0x90>

		iteration = 1;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003276:	e003      	b.n	8003280 <SetMeasurementData+0x98>
	else
		iteration = ActiveResults;
 8003278:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800327c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (i = 0; i < iteration; i++) {
 8003280:	2300      	movs	r3, #0
 8003282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003286:	e048      	b.n	800331a <SetMeasurementData+0x132>
		pRangeData = &(pMultiRangingData->RangeData[i]);
 8003288:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	3308      	adds	r3, #8
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	61fb      	str	r3, [r7, #28]

		presults_data = &(presults->VL53L1_p_002[i]);
 800329c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032a0:	224c      	movs	r2, #76	; 0x4c
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	3310      	adds	r3, #16
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	4413      	add	r3, r2
 80032ac:	3304      	adds	r3, #4
 80032ae:	617b      	str	r3, [r7, #20]
		if (Status == VL53L1_ERROR_NONE)
 80032b0:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d114      	bne.n	80032e2 <SetMeasurementData+0xfa>
			Status = SetTargetData(Dev, ActiveResults,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	7918      	ldrb	r0, [r3, #4]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	7c1b      	ldrb	r3, [r3, #16]
 80032c0:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80032c4:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	9202      	str	r2, [sp, #8]
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	9201      	str	r2, [sp, #4]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	4623      	mov	r3, r4
 80032d4:	4602      	mov	r2, r0
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff fb96 	bl	8002a08 <SetTargetData>
 80032dc:	4603      	mov	r3, r0
 80032de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					presults->device_status,
					presults_data,
					pRangeData);

		pMultiRangingData->EffectiveSpadRtnCount =
				presults_data->VL53L1_p_006;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	8ada      	ldrh	r2, [r3, #22]
		pMultiRangingData->EffectiveSpadRtnCount =
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

		if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	7ddb      	ldrb	r3, [r3, #23]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10d      	bne.n	8003310 <SetMeasurementData+0x128>
			&& (pRangeData->RangeMilliMeter > Furthest_range)) {
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80032fa:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80032fe:	429a      	cmp	r2, r3
 8003300:	da06      	bge.n	8003310 <SetMeasurementData+0x128>
			Furthest_range = pRangeData->RangeMilliMeter;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	8a9b      	ldrh	r3, [r3, #20]
 8003306:	857b      	strh	r3, [r7, #42]	; 0x2a
			Furthest_idx = i;
 8003308:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800330c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	for (i = 0; i < iteration; i++) {
 8003310:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003314:	3301      	adds	r3, #1
 8003316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800331a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800331e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003322:	429a      	cmp	r2, r3
 8003324:	d3b0      	bcc.n	8003288 <SetMeasurementData+0xa0>
		}
	}
	pdev->PreviousStreamCount = pdev->hist_data.result__stream_count;
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	f893 2483 	ldrb.w	r2, [r3, #1155]	; 0x483
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003332:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003336:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800333a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800333e:	e01f      	b.n	8003380 <SetMeasurementData+0x198>
		pdev->PreviousRangeMilliMeter[i] = 0;
 8003340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003346:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800334a:	330c      	adds	r3, #12
 800334c:	2100      	movs	r1, #0
 800334e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		pdev->PreviousRangeStatus[i] = 255;
 8003352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003358:	4413      	add	r3, r2
 800335a:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 800335e:	3320      	adds	r3, #32
 8003360:	22ff      	movs	r2, #255	; 0xff
 8003362:	701a      	strb	r2, [r3, #0]
		pdev->PreviousExtendedRange[i] = 0;
 8003364:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336a:	4413      	add	r3, r2
 800336c:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8003370:	3324      	adds	r3, #36	; 0x24
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
	for (i = iteration; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8003376:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800337a:	3301      	adds	r3, #1
 800337c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003380:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003384:	2b03      	cmp	r3, #3
 8003386:	d9db      	bls.n	8003340 <SetMeasurementData+0x158>
	}

	if ((Status == VL53L1_ERROR_NONE) && (ActiveResults > 0)) {
 8003388:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11b      	bne.n	80033c8 <SetMeasurementData+0x1e0>
 8003390:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003394:	2b00      	cmp	r3, #0
 8003396:	d017      	beq.n	80033c8 <SetMeasurementData+0x1e0>
		pRangeData = &(pMultiRangingData->RangeData[Furthest_idx]);
 8003398:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	3308      	adds	r3, #8
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	4413      	add	r3, r2
 80033aa:	61fb      	str	r3, [r7, #28]
		amb_idx = VL53L1_MAX_AMBIENT_DMAX_VALUES-1;
 80033ac:	2304      	movs	r3, #4
 80033ae:	76fb      	strb	r3, [r7, #27]
		CheckAndChangeDistanceMode(Dev, pRangeData,
 80033b0:	7efb      	ldrb	r3, [r7, #27]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	337e      	adds	r3, #126	; 0x7e
 80033c0:	69f9      	ldr	r1, [r7, #28]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f7ff f996 	bl	80026f4 <CheckAndChangeDistanceMode>
			presults->VL53L1_p_007[amb_idx],
			&pMultiRangingData->RecommendedDistanceMode);
	}

	return Status;
 80033c8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3734      	adds	r7, #52	; 0x34
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd90      	pop	{r4, r7, pc}

080033d4 <VL53L1_GetMultiRangingData>:

VL53L1_Error VL53L1_GetMultiRangingData(VL53L1_DEV Dev,
		VL53L1_MultiRangingData_t *pMultiRangingData)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80033de:	2300      	movs	r3, #0
 80033e0:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3318      	adds	r3, #24
 80033e6:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_range_results_t *presults =
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80033ee:	3308      	adds	r3, #8
 80033f0:	60fb      	str	r3, [r7, #12]
			(VL53L1_range_results_t *) pdev->wArea1;

	LOG_FUNCTION_START("");


	memset(pMultiRangingData, 0xFF,
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	21ff      	movs	r1, #255	; 0xff
 80033f6:	6838      	ldr	r0, [r7, #0]
 80033f8:	f015 fe9c 	bl	8019134 <memset>
		sizeof(VL53L1_MultiRangingData_t));


	Status = VL53L1_get_device_results(
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	2102      	movs	r1, #2
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f002 fc2e 	bl	8005c62 <VL53L1_get_device_results>
 8003406:	4603      	mov	r3, r0
 8003408:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_DEVICERESULTSLEVEL_FULL,
				presults);


	if (Status == VL53L1_ERROR_NONE) {
 800340a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d118      	bne.n	8003444 <VL53L1_GetMultiRangingData+0x70>
		switch (presults->rd_device_state) {
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	785b      	ldrb	r3, [r3, #1]
 8003416:	2b07      	cmp	r3, #7
 8003418:	d002      	beq.n	8003420 <VL53L1_GetMultiRangingData+0x4c>
 800341a:	2b08      	cmp	r3, #8
 800341c:	d004      	beq.n	8003428 <VL53L1_GetMultiRangingData+0x54>
 800341e:	e007      	b.n	8003430 <VL53L1_GetMultiRangingData+0x5c>
		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pMultiRangingData->RoiStatus =
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2201      	movs	r2, #1
 8003424:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_NOT_LAST;
			break;
 8003426:	e006      	b.n	8003436 <VL53L1_GetMultiRangingData+0x62>
		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pMultiRangingData->RoiStatus =
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	2202      	movs	r2, #2
 800342c:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_VALID_LAST;
			break;
 800342e:	e002      	b.n	8003436 <VL53L1_GetMultiRangingData+0x62>
		default:
			pMultiRangingData->RoiStatus =
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	71da      	strb	r2, [r3, #7]
					VL53L1_ROISTATUS_NOT_VALID;
		}

		Status = SetMeasurementData(Dev,
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	68f9      	ldr	r1, [r7, #12]
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fed4 	bl	80031e8 <SetMeasurementData>
 8003440:	4603      	mov	r3, r0
 8003442:	75fb      	strb	r3, [r7, #23]
					pMultiRangingData);

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003444:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <VL53L1_PerformRefSpadManagement>:
	return Status;
}


VL53L1_Error VL53L1_PerformRefSpadManagement(VL53L1_DEV Dev)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b090      	sub	sp, #64	; 0x40
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]

	SUPPRESS_UNUSED_WARNING(Dev);

	LOG_FUNCTION_START("");
#else
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003458:	2300      	movs	r3, #0
 800345a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L1_Error RawStatus;
	uint8_t dcrbuffer[24];
	uint8_t *commbuf;
	uint8_t numloc[2] = {5, 3};
 800345e:	f240 3305 	movw	r3, #773	; 0x305
 8003462:	81bb      	strh	r3, [r7, #12]
	VL53L1_customer_nvm_managed_t *pc;
	VL53L1_PresetModes PresetMode;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3318      	adds	r3, #24
 8003468:	63bb      	str	r3, [r7, #56]	; 0x38
	pc = &pdev->customer;
 800346a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346c:	3348      	adds	r3, #72	; 0x48
 800346e:	637b      	str	r3, [r7, #52]	; 0x34

	if (Status == VL53L1_ERROR_NONE) {
 8003470:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11c      	bne.n	80034b2 <VL53L1_PerformRefSpadManagement+0x62>
		PresetMode = VL53L1DevDataGet(Dev,
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800347e:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
 8003482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				CurrentParameters.PresetMode);
		Status = VL53L1_run_ref_spad_char(Dev, &RawStatus);
 8003486:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800348a:	4619      	mov	r1, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f8e3 	bl	8003658 <VL53L1_run_ref_spad_char>
 8003492:	4603      	mov	r3, r0
 8003494:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L1_ERROR_NONE)
 8003498:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800349c:	2b00      	cmp	r3, #0
 800349e:	d108      	bne.n	80034b2 <VL53L1_PerformRefSpadManagement+0x62>
			Status = VL53L1_SetPresetMode(Dev, PresetMode);
 80034a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034a4:	4619      	mov	r1, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fe fb2c 	bl	8001b04 <VL53L1_SetPresetMode>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	if (Status == VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH) {
 80034b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80034b6:	f113 0f1d 	cmn.w	r3, #29
 80034ba:	d14e      	bne.n	800355a <VL53L1_PerformRefSpadManagement+0x10a>

		Status = VL53L1_read_nvm_raw_data(Dev,
 80034bc:	f107 0310 	add.w	r3, r7, #16
 80034c0:	2206      	movs	r2, #6
 80034c2:	2128      	movs	r1, #40	; 0x28
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f00e fbf6 	bl	8011cb6 <VL53L1_read_nvm_raw_data>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				(uint8_t)(0xA0 >> 2),
				(uint8_t)(24 >> 2),
				dcrbuffer);

		if (Status == VL53L1_ERROR_NONE)
 80034d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <VL53L1_PerformRefSpadManagement+0x9c>
			Status = VL53L1_WriteMulti(Dev,
 80034d8:	f107 020c 	add.w	r2, r7, #12
 80034dc:	2302      	movs	r3, #2
 80034de:	2114      	movs	r1, #20
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f010 fe5f 	bl	80141a4 <VL53L1_WriteMulti>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				numloc, 2);

		if (Status == VL53L1_ERROR_NONE) {
 80034ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <VL53L1_PerformRefSpadManagement+0xb0>
			pc->ref_spad_man__num_requested_ref_spads = numloc[0];
 80034f4:	7b3a      	ldrb	r2, [r7, #12]
 80034f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f8:	71da      	strb	r2, [r3, #7]
			pc->ref_spad_man__ref_location = numloc[1];
 80034fa:	7b7a      	ldrb	r2, [r7, #13]
 80034fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fe:	721a      	strb	r2, [r3, #8]
		}

		commbuf = &dcrbuffer[16];
 8003500:	f107 0310 	add.w	r3, r7, #16
 8003504:	3310      	adds	r3, #16
 8003506:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (Status == VL53L1_ERROR_NONE)
 8003508:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800350c:	2b00      	cmp	r3, #0
 800350e:	d108      	bne.n	8003522 <VL53L1_PerformRefSpadManagement+0xd2>
			Status = VL53L1_WriteMulti(Dev,
 8003510:	2306      	movs	r3, #6
 8003512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003514:	210d      	movs	r1, #13
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f010 fe44 	bl	80141a4 <VL53L1_WriteMulti>
 800351c:	4603      	mov	r3, r0
 800351e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				commbuf, 6);

		if (Status == VL53L1_ERROR_NONE) {
 8003522:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003526:	2b00      	cmp	r3, #0
 8003528:	d117      	bne.n	800355a <VL53L1_PerformRefSpadManagement+0x10a>
			pc->global_config__spad_enables_ref_0 = commbuf[0];
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003530:	701a      	strb	r2, [r3, #0]
			pc->global_config__spad_enables_ref_1 = commbuf[1];
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	785a      	ldrb	r2, [r3, #1]
 8003536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003538:	705a      	strb	r2, [r3, #1]
			pc->global_config__spad_enables_ref_2 = commbuf[2];
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800353c:	789a      	ldrb	r2, [r3, #2]
 800353e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003540:	709a      	strb	r2, [r3, #2]
			pc->global_config__spad_enables_ref_3 = commbuf[3];
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	78da      	ldrb	r2, [r3, #3]
 8003546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003548:	70da      	strb	r2, [r3, #3]
			pc->global_config__spad_enables_ref_4 = commbuf[4];
 800354a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354c:	791a      	ldrb	r2, [r3, #4]
 800354e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003550:	711a      	strb	r2, [r3, #4]
			pc->global_config__spad_enables_ref_5 = commbuf[5];
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	795a      	ldrb	r2, [r3, #5]
 8003556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003558:	715a      	strb	r2, [r3, #5]
	}

#endif

	LOG_FUNCTION_END(Status);
	return Status;
 800355a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800355e:	4618      	mov	r0, r3
 8003560:	3740      	adds	r7, #64	; 0x40
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <VL53L1_SmudgeCorrectionEnable>:

VL53L1_Error VL53L1_SmudgeCorrectionEnable(VL53L1_DEV Dev,
		VL53L1_SmudgeCorrectionModes Mode)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	460b      	mov	r3, r1
 8003572:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003574:	2300      	movs	r3, #0
 8003576:	73fb      	strb	r3, [r7, #15]
	VL53L1_Error s1 = VL53L1_ERROR_NONE;
 8003578:	2300      	movs	r3, #0
 800357a:	73bb      	strb	r3, [r7, #14]
	VL53L1_Error s2 = VL53L1_ERROR_NONE;
 800357c:	2300      	movs	r3, #0
 800357e:	737b      	strb	r3, [r7, #13]
	VL53L1_Error s3 = VL53L1_ERROR_NONE;
 8003580:	2300      	movs	r3, #0
 8003582:	733b      	strb	r3, [r7, #12]

	LOG_FUNCTION_START("");

	switch (Mode) {
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d84a      	bhi.n	8003620 <VL53L1_SmudgeCorrectionEnable+0xb8>
 800358a:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <VL53L1_SmudgeCorrectionEnable+0x28>)
 800358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003590:	080035a1 	.word	0x080035a1
 8003594:	080035c1 	.word	0x080035c1
 8003598:	080035e1 	.word	0x080035e1
 800359c:	08003601 	.word	0x08003601
	case VL53L1_SMUDGE_CORRECTION_NONE:
		s1 = VL53L1_dynamic_xtalk_correction_disable(Dev);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f004 fbee 	bl	8007d82 <VL53L1_dynamic_xtalk_correction_disable>
 80035a6:	4603      	mov	r3, r0
 80035a8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f004 fc17 	bl	8007dde <VL53L1_dynamic_xtalk_correction_apply_disable>
 80035b0:	4603      	mov	r3, r0
 80035b2:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f004 fc40 	bl	8007e3a <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 80035ba:	4603      	mov	r3, r0
 80035bc:	733b      	strb	r3, [r7, #12]
		break;
 80035be:	e032      	b.n	8003626 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_CONTINUOUS:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f004 fbc7 	bl	8007d54 <VL53L1_dynamic_xtalk_correction_enable>
 80035c6:	4603      	mov	r3, r0
 80035c8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f004 fbf0 	bl	8007db0 <VL53L1_dynamic_xtalk_correction_apply_enable>
 80035d0:	4603      	mov	r3, r0
 80035d2:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f004 fc30 	bl	8007e3a <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 80035da:	4603      	mov	r3, r0
 80035dc:	733b      	strb	r3, [r7, #12]
		break;
 80035de:	e022      	b.n	8003626 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_SINGLE:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f004 fbb7 	bl	8007d54 <VL53L1_dynamic_xtalk_correction_enable>
 80035e6:	4603      	mov	r3, r0
 80035e8:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_enable(Dev);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f004 fbe0 	bl	8007db0 <VL53L1_dynamic_xtalk_correction_apply_enable>
 80035f0:	4603      	mov	r3, r0
 80035f2:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_enable(Dev);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f004 fc09 	bl	8007e0c <VL53L1_dynamic_xtalk_correction_single_apply_enable>
 80035fa:	4603      	mov	r3, r0
 80035fc:	733b      	strb	r3, [r7, #12]
		break;
 80035fe:	e012      	b.n	8003626 <VL53L1_SmudgeCorrectionEnable+0xbe>
	case VL53L1_SMUDGE_CORRECTION_DEBUG:
		s1 = VL53L1_dynamic_xtalk_correction_enable(Dev);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f004 fba7 	bl	8007d54 <VL53L1_dynamic_xtalk_correction_enable>
 8003606:	4603      	mov	r3, r0
 8003608:	73bb      	strb	r3, [r7, #14]
		s2 = VL53L1_dynamic_xtalk_correction_apply_disable(Dev);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f004 fbe7 	bl	8007dde <VL53L1_dynamic_xtalk_correction_apply_disable>
 8003610:	4603      	mov	r3, r0
 8003612:	737b      	strb	r3, [r7, #13]
		s3 = VL53L1_dynamic_xtalk_correction_single_apply_disable(Dev);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f004 fc10 	bl	8007e3a <VL53L1_dynamic_xtalk_correction_single_apply_disable>
 800361a:	4603      	mov	r3, r0
 800361c:	733b      	strb	r3, [r7, #12]
		break;
 800361e:	e002      	b.n	8003626 <VL53L1_SmudgeCorrectionEnable+0xbe>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003620:	23fc      	movs	r3, #252	; 0xfc
 8003622:	73fb      	strb	r3, [r7, #15]
		break;
 8003624:	bf00      	nop
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10d      	bne.n	800364a <VL53L1_SmudgeCorrectionEnable+0xe2>
		Status = s1;
 800362e:	7bbb      	ldrb	r3, [r7, #14]
 8003630:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 8003632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <VL53L1_SmudgeCorrectionEnable+0xd6>
			Status = s2;
 800363a:	7b7b      	ldrb	r3, [r7, #13]
 800363c:	73fb      	strb	r3, [r7, #15]
		if (Status == VL53L1_ERROR_NONE)
 800363e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <VL53L1_SmudgeCorrectionEnable+0xe2>
			Status = s3;
 8003646:	7b3b      	ldrb	r3, [r7, #12]
 8003648:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800364a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop

08003658 <VL53L1_run_ref_spad_char>:


VL53L1_Error VL53L1_run_ref_spad_char(
	VL53L1_DEV        Dev,
	VL53L1_Error     *pcal_status)
{
 8003658:	b5b0      	push	{r4, r5, r7, lr}
 800365a:	b08c      	sub	sp, #48	; 0x30
 800365c:	af04      	add	r7, sp, #16
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003662:	2300      	movs	r3, #0
 8003664:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3318      	adds	r3, #24
 800366a:	61bb      	str	r3, [r7, #24]

	uint8_t comms_buffer[6];

	VL53L1_refspadchar_config_t *prefspadchar  = &(pdev->refspadchar);
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8003672:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8003674:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <VL53L1_run_ref_spad_char+0x2e>
		status = VL53L1_enable_powerforce(Dev);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f007 fc99 	bl	800afb4 <VL53L1_enable_powerforce>
 8003682:	4603      	mov	r3, r0
 8003684:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 8003686:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d117      	bne.n	80036be <VL53L1_run_ref_spad_char+0x66>
		status =
		VL53L1_set_ref_spad_char_config(
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	7858      	ldrb	r0, [r3, #1]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	685c      	ldr	r4, [r3, #4]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	891d      	ldrh	r5, [r3, #8]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	899b      	ldrh	r3, [r3, #12]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	8952      	ldrh	r2, [r2, #10]
 80036a2:	69b9      	ldr	r1, [r7, #24]
 80036a4:	f8b1 1322 	ldrh.w	r1, [r1, #802]	; 0x322
 80036a8:	9102      	str	r1, [sp, #8]
 80036aa:	9201      	str	r2, [sp, #4]
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	462b      	mov	r3, r5
 80036b0:	4622      	mov	r2, r4
 80036b2:	4601      	mov	r1, r0
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f009 fbda 	bl	800ce6e <VL53L1_set_ref_spad_char_config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	77fb      	strb	r3, [r7, #31]
			prefspadchar->min_count_rate_limit_mcps,
			pdev->stat_nvm.osc_measured__fast_osc__frequency);



	if (status == VL53L1_ERROR_NONE)
 80036be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d107      	bne.n	80036d6 <VL53L1_run_ref_spad_char+0x7e>
		status = VL53L1_run_device_test(
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	4619      	mov	r1, r3
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f891 	bl	80037f4 <VL53L1_run_device_test>
 80036d2:	4603      	mov	r3, r0
 80036d4:	77fb      	strb	r3, [r7, #31]
					Dev,
					prefspadchar->device_test_mode);



	if (status == VL53L1_ERROR_NONE)
 80036d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <VL53L1_run_ref_spad_char+0x98>
		status =
		VL53L1_ReadMulti(
 80036de:	f107 020c 	add.w	r2, r7, #12
 80036e2:	2302      	movs	r3, #2
 80036e4:	21d9      	movs	r1, #217	; 0xd9
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f010 fd92 	bl	8014210 <VL53L1_ReadMulti>
 80036ec:	4603      	mov	r3, r0
 80036ee:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS,
			comms_buffer,
			2);

	if (status == VL53L1_ERROR_NONE) {
 80036f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <VL53L1_run_ref_spad_char+0xb8>
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
				comms_buffer[0];
 80036f8:	7b3a      	ldrb	r2, [r7, #12]
		pdev->dbg_results.ref_spad_char_result__num_actual_ref_spads =
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003700:	f883 23a3 	strb.w	r2, [r3, #931]	; 0x3a3
		pdev->dbg_results.ref_spad_char_result__ref_location =
				comms_buffer[1];
 8003704:	7b7a      	ldrb	r2, [r7, #13]
		pdev->dbg_results.ref_spad_char_result__ref_location =
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800370c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4
	}



	if (status == VL53L1_ERROR_NONE)
 8003710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d108      	bne.n	800372a <VL53L1_run_ref_spad_char+0xd2>
		status =
			VL53L1_WriteMulti(
 8003718:	f107 020c 	add.w	r2, r7, #12
 800371c:	2302      	movs	r3, #2
 800371e:	2114      	movs	r1, #20
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f010 fd3f 	bl	80141a4 <VL53L1_WriteMulti>
 8003726:	4603      	mov	r3, r0
 8003728:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 800372a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d107      	bne.n	8003742 <VL53L1_run_ref_spad_char+0xea>
		pdev->customer.ref_spad_man__num_requested_ref_spads =
				comms_buffer[0];
 8003732:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.ref_spad_man__num_requested_ref_spads =
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
		pdev->customer.ref_spad_man__ref_location =
				comms_buffer[1];
 800373a:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.ref_spad_man__ref_location =
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}



	if (status == VL53L1_ERROR_NONE)
 8003742:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d108      	bne.n	800375c <VL53L1_run_ref_spad_char+0x104>
		status =
			VL53L1_ReadMulti(
 800374a:	f107 020c 	add.w	r2, r7, #12
 800374e:	2306      	movs	r3, #6
 8003750:	21ac      	movs	r1, #172	; 0xac
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f010 fd5c 	bl	8014210 <VL53L1_ReadMulti>
 8003758:	4603      	mov	r3, r0
 800375a:	77fb      	strb	r3, [r7, #31]
				comms_buffer,
				6);



	if (status == VL53L1_ERROR_NONE)
 800375c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d108      	bne.n	8003776 <VL53L1_run_ref_spad_char+0x11e>
		status =
			VL53L1_WriteMulti(
 8003764:	f107 020c 	add.w	r2, r7, #12
 8003768:	2306      	movs	r3, #6
 800376a:	210d      	movs	r1, #13
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f010 fd19 	bl	80141a4 <VL53L1_WriteMulti>
 8003772:	4603      	mov	r3, r0
 8003774:	77fb      	strb	r3, [r7, #31]
				Dev,
				VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
				comms_buffer,
				6);

	if (status == VL53L1_ERROR_NONE) {
 8003776:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d117      	bne.n	80037ae <VL53L1_run_ref_spad_char+0x156>
		pdev->customer.global_config__spad_enables_ref_0 =
				comms_buffer[0];
 800377e:	7b3a      	ldrb	r2, [r7, #12]
		pdev->customer.global_config__spad_enables_ref_0 =
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		pdev->customer.global_config__spad_enables_ref_1 =
				comms_buffer[1];
 8003786:	7b7a      	ldrb	r2, [r7, #13]
		pdev->customer.global_config__spad_enables_ref_1 =
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		pdev->customer.global_config__spad_enables_ref_2 =
				comms_buffer[2];
 800378e:	7bba      	ldrb	r2, [r7, #14]
		pdev->customer.global_config__spad_enables_ref_2 =
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		pdev->customer.global_config__spad_enables_ref_3 =
				comms_buffer[3];
 8003796:	7bfa      	ldrb	r2, [r7, #15]
		pdev->customer.global_config__spad_enables_ref_3 =
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		pdev->customer.global_config__spad_enables_ref_4 =
				comms_buffer[4];
 800379e:	7c3a      	ldrb	r2, [r7, #16]
		pdev->customer.global_config__spad_enables_ref_4 =
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pdev->customer.global_config__spad_enables_ref_5 =
				comms_buffer[5];
 80037a6:	7c7a      	ldrb	r2, [r7, #17]
		pdev->customer.global_config__spad_enables_ref_5 =
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			&(pdev->customer),
			"run_ref_spad_char():pdev->lldata.customer.",
			VL53L1_TRACE_MODULE_REF_SPAD_CHAR);
#endif

	if (status == VL53L1_ERROR_NONE) {
 80037ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d114      	bne.n	80037e0 <VL53L1_run_ref_spad_char+0x188>

		switch (pdev->sys_results.result__range_status) {
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d00c      	beq.n	80037da <VL53L1_run_ref_spad_char+0x182>
 80037c0:	2b10      	cmp	r3, #16
 80037c2:	dc0e      	bgt.n	80037e2 <VL53L1_run_ref_spad_char+0x18a>
 80037c4:	2b0e      	cmp	r3, #14
 80037c6:	d002      	beq.n	80037ce <VL53L1_run_ref_spad_char+0x176>
 80037c8:	2b0f      	cmp	r3, #15
 80037ca:	d003      	beq.n	80037d4 <VL53L1_run_ref_spad_char+0x17c>
 80037cc:	e009      	b.n	80037e2 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARNOTENOUGHDPADS:
			status = VL53L1_WARNING_REF_SPAD_CHAR_NOT_ENOUGH_SPADS;
 80037ce:	23e4      	movs	r3, #228	; 0xe4
 80037d0:	77fb      	strb	r3, [r7, #31]
			break;
 80037d2:	e006      	b.n	80037e2 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARMORETHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_HIGH;
 80037d4:	23e3      	movs	r3, #227	; 0xe3
 80037d6:	77fb      	strb	r3, [r7, #31]
			break;
 80037d8:	e003      	b.n	80037e2 <VL53L1_run_ref_spad_char+0x18a>

		case VL53L1_DEVICEERROR_REFSPADCHARLESSTHANTARGET:
			status = VL53L1_WARNING_REF_SPAD_CHAR_RATE_TOO_LOW;
 80037da:	23e2      	movs	r3, #226	; 0xe2
 80037dc:	77fb      	strb	r3, [r7, #31]
			break;
 80037de:	e000      	b.n	80037e2 <VL53L1_run_ref_spad_char+0x18a>
		}
	}
 80037e0:	bf00      	nop



	*pcal_status = status;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	7ffa      	ldrb	r2, [r7, #31]
 80037e6:	701a      	strb	r2, [r3, #0]
		status);


	LOG_FUNCTION_END(status);

	return status;
 80037e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3720      	adds	r7, #32
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bdb0      	pop	{r4, r5, r7, pc}

080037f4 <VL53L1_run_device_test>:


VL53L1_Error VL53L1_run_device_test(
	VL53L1_DEV             Dev,
	VL53L1_DeviceTestMode  device_test_mode)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003800:	2300      	movs	r3, #0
 8003802:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3318      	adds	r3, #24
 8003808:	613b      	str	r3, [r7, #16]

	uint8_t      comms_buffer[2];
	uint8_t      gpio_hv_mux__ctrl = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 800380e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d108      	bne.n	8003828 <VL53L1_run_device_test+0x34>
		status =
			VL53L1_RdByte(
 8003816:	f107 030b 	add.w	r3, r7, #11
 800381a:	461a      	mov	r2, r3
 800381c:	2130      	movs	r1, #48	; 0x30
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f010 fd88 	bl	8014334 <VL53L1_RdByte>
 8003824:	4603      	mov	r3, r0
 8003826:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_GPIO_HV_MUX__CTRL,
				&gpio_hv_mux__ctrl);

	if (status == VL53L1_ERROR_NONE)
 8003828:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d103      	bne.n	8003838 <VL53L1_run_device_test+0x44>
		pdev->stat_cfg.gpio_hv_mux__ctrl = gpio_hv_mux__ctrl;
 8003830:	7afa      	ldrb	r2, [r7, #11]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f883 234e 	strb.w	r2, [r3, #846]	; 0x34e


	if (status == VL53L1_ERROR_NONE)
 8003838:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <VL53L1_run_device_test+0x5a>
		status = VL53L1_start_test(
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	4619      	mov	r1, r3
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f007 fb39 	bl	800aebc <VL53L1_start_test>
 800384a:	4603      	mov	r3, r0
 800384c:	75fb      	strb	r3, [r7, #23]
					Dev,
					device_test_mode);


	if (status == VL53L1_ERROR_NONE)
 800384e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <VL53L1_run_device_test+0x6c>
		status = VL53L1_wait_for_test_completion(Dev);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f00f ff5c 	bl	8013714 <VL53L1_wait_for_test_completion>
 800385c:	4603      	mov	r3, r0
 800385e:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8003860:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d108      	bne.n	800387a <VL53L1_run_device_test+0x86>
		status =
			VL53L1_ReadMulti(
 8003868:	f107 020c 	add.w	r2, r7, #12
 800386c:	2302      	movs	r3, #2
 800386e:	2189      	movs	r1, #137	; 0x89
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f010 fccd 	bl	8014210 <VL53L1_ReadMulti>
 8003876:	4603      	mov	r3, r0
 8003878:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RESULT__RANGE_STATUS,
				comms_buffer,
				2);

	if (status == VL53L1_ERROR_NONE) {
 800387a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <VL53L1_run_device_test+0x9e>
		pdev->sys_results.result__range_status  = comms_buffer[0];
 8003882:	7b3a      	ldrb	r2, [r7, #12]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		pdev->sys_results.result__report_status = comms_buffer[1];
 800388a:	7b7a      	ldrb	r2, [r7, #13]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f883 23ac 	strb.w	r2, [r3, #940]	; 0x3ac
	}



	pdev->sys_results.result__range_status &=
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	f893 33ab 	ldrb.w	r3, [r3, #939]	; 0x3ab
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	b2da      	uxtb	r2, r3
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f883 23ab 	strb.w	r2, [r3, #939]	; 0x3ab
		VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	if (status == VL53L1_ERROR_NONE) {
 80038a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d108      	bne.n	80038be <VL53L1_run_device_test+0xca>
		pdev->sys_results.result__range_status,
		"result__report_status",
		pdev->sys_results.result__report_status);


		if (status == VL53L1_ERROR_NONE)
 80038ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <VL53L1_run_device_test+0xca>
			status = VL53L1_clear_interrupt(Dev);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f007 fba1 	bl	800affc <VL53L1_clear_interrupt>
 80038ba:	4603      	mov	r3, r0
 80038bc:	75fb      	strb	r3, [r7, #23]
	}



	if (status == VL53L1_ERROR_NONE)
 80038be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d105      	bne.n	80038d2 <VL53L1_run_device_test+0xde>
		status =
			VL53L1_start_test(
 80038c6:	2100      	movs	r1, #0
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f007 faf7 	bl	800aebc <VL53L1_start_test>
 80038ce:	4603      	mov	r3, r0
 80038d0:	75fb      	strb	r3, [r7, #23]
				Dev,
				0x00);

	LOG_FUNCTION_END(status);

	return status;
 80038d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <select_offset_per_vcsel>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)

#define VL53L1_MAX_I2C_XFER_SIZE 256

static VL53L1_Error select_offset_per_vcsel(VL53L1_LLDriverData_t *pdev,
		int16_t *poffset) {
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	73fb      	strb	r3, [r7, #15]
	int16_t tA, tB;
	uint8_t isc;

	switch (pdev->preset_mode) {
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	785b      	ldrb	r3, [r3, #1]
 80038f0:	2b21      	cmp	r3, #33	; 0x21
 80038f2:	d006      	beq.n	8003902 <select_offset_per_vcsel+0x24>
 80038f4:	2b21      	cmp	r3, #33	; 0x21
 80038f6:	dc2b      	bgt.n	8003950 <select_offset_per_vcsel+0x72>
 80038f8:	2b1b      	cmp	r3, #27
 80038fa:	d01c      	beq.n	8003936 <select_offset_per_vcsel+0x58>
 80038fc:	2b1e      	cmp	r3, #30
 80038fe:	d00d      	beq.n	800391c <select_offset_per_vcsel+0x3e>
 8003900:	e026      	b.n	8003950 <select_offset_per_vcsel+0x72>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		tA = pdev->per_vcsel_cal_data.short_a_offset_mm;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003908:	f8b3 3c48 	ldrh.w	r3, [r3, #3144]	; 0xc48
 800390c:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.short_b_offset_mm;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003914:	f8b3 3c4a 	ldrh.w	r3, [r3, #3146]	; 0xc4a
 8003918:	817b      	strh	r3, [r7, #10]
		break;
 800391a:	e02b      	b.n	8003974 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		tA = pdev->per_vcsel_cal_data.medium_a_offset_mm;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003922:	f8b3 3c4c 	ldrh.w	r3, [r3, #3148]	; 0xc4c
 8003926:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.medium_b_offset_mm;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800392e:	f8b3 3c4e 	ldrh.w	r3, [r3, #3150]	; 0xc4e
 8003932:	817b      	strh	r3, [r7, #10]
		break;
 8003934:	e01e      	b.n	8003974 <select_offset_per_vcsel+0x96>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393c:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 8003940:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003948:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 800394c:	817b      	strh	r3, [r7, #10]
		break;
 800394e:	e011      	b.n	8003974 <select_offset_per_vcsel+0x96>
	default:
		tA = pdev->per_vcsel_cal_data.long_a_offset_mm;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003956:	f8b3 3c50 	ldrh.w	r3, [r3, #3152]	; 0xc50
 800395a:	81bb      	strh	r3, [r7, #12]
		tB = pdev->per_vcsel_cal_data.long_b_offset_mm;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003962:	f8b3 3c52 	ldrh.w	r3, [r3, #3154]	; 0xc52
 8003966:	817b      	strh	r3, [r7, #10]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8003968:	23fc      	movs	r3, #252	; 0xfc
 800396a:	73fb      	strb	r3, [r7, #15]
		*poffset = 0;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2200      	movs	r2, #0
 8003970:	801a      	strh	r2, [r3, #0]
		break;
 8003972:	bf00      	nop
	}

	isc = pdev->ll_state.cfg_internal_stream_count;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800397a:	727b      	strb	r3, [r7, #9]
	if (status == VL53L1_ERROR_NONE)
 800397c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <select_offset_per_vcsel+0xbe>
		*poffset = (isc & 0x01) ? tA : tB;
 8003984:	7a7b      	ldrb	r3, [r7, #9]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <select_offset_per_vcsel+0xb6>
 800398e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003992:	e001      	b.n	8003998 <select_offset_per_vcsel+0xba>
 8003994:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	8013      	strh	r3, [r2, #0]

	return status;
 800399c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <vl53l1_diff_histo_stddev>:

static void vl53l1_diff_histo_stddev(VL53L1_LLDriverData_t *pdev,
	VL53L1_histogram_bin_data_t *pdata, uint8_t timing, uint8_t HighIndex,
	uint8_t prev_pos, int32_t *pdiff_histo_stddev) {
 80039ac:	b490      	push	{r4, r7}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	4611      	mov	r1, r2
 80039b8:	461a      	mov	r2, r3
 80039ba:	460b      	mov	r3, r1
 80039bc:	71fb      	strb	r3, [r7, #7]
 80039be:	4613      	mov	r3, r2
 80039c0:	71bb      	strb	r3, [r7, #6]
	uint16_t   bin                      = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	84fb      	strh	r3, [r7, #38]	; 0x26
	int32_t    total_rate_pre = 0;
 80039c6:	2300      	movs	r3, #0
 80039c8:	623b      	str	r3, [r7, #32]
	int32_t    total_rate_cur = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
	int32_t    PrevBin, CurrBin;

	total_rate_pre = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	623b      	str	r3, [r7, #32]
	total_rate_cur = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]


	for (bin = timing * 4; bin < HighIndex; bin++) {
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80039de:	e021      	b.n	8003a24 <vl53l1_diff_histo_stddev+0x78>
		total_rate_pre +=
		pdev->multi_bins_rec[prev_pos][timing][bin];
 80039e0:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	461a      	mov	r2, r3
 80039ec:	0052      	lsls	r2, r2, #1
 80039ee:	441a      	add	r2, r3
 80039f0:	00d3      	lsls	r3, r2, #3
 80039f2:	461a      	mov	r2, r3
 80039f4:	460b      	mov	r3, r1
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	440b      	add	r3, r1
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	4413      	add	r3, r2
 80039fe:	4423      	add	r3, r4
 8003a00:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003a04:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
		total_rate_pre +=
 8003a08:	6a3a      	ldr	r2, [r7, #32]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	623b      	str	r3, [r7, #32]
		total_rate_cur += pdata->bin_data[bin];
 8003a0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	3206      	adds	r2, #6
 8003a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	61fb      	str	r3, [r7, #28]
	for (bin = timing * 4; bin < HighIndex; bin++) {
 8003a1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a20:	3301      	adds	r3, #1
 8003a22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a24:	79bb      	ldrb	r3, [r7, #6]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d3d8      	bcc.n	80039e0 <vl53l1_diff_histo_stddev+0x34>
	}

	if ((total_rate_pre != 0) && (total_rate_cur != 0))
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d047      	beq.n	8003ac4 <vl53l1_diff_histo_stddev+0x118>
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d044      	beq.n	8003ac4 <vl53l1_diff_histo_stddev+0x118>
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a42:	e03a      	b.n	8003aba <vl53l1_diff_histo_stddev+0x10e>
			PrevBin = pdev->multi_bins_rec[prev_pos][timing][bin];
 8003a44:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	461a      	mov	r2, r3
 8003a50:	0052      	lsls	r2, r2, #1
 8003a52:	441a      	add	r2, r3
 8003a54:	00d3      	lsls	r3, r2, #3
 8003a56:	461a      	mov	r2, r3
 8003a58:	460b      	mov	r3, r1
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	440b      	add	r3, r1
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	4413      	add	r3, r2
 8003a62:	4423      	add	r3, r4
 8003a64:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003a68:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003a6c:	61bb      	str	r3, [r7, #24]
			PrevBin = (PrevBin * 1000) / total_rate_pre;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a74:	fb03 f202 	mul.w	r2, r3, r2
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a7e:	61bb      	str	r3, [r7, #24]
			CurrBin = pdata->bin_data[bin] * 1000 / total_rate_cur;
 8003a80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	3206      	adds	r2, #6
 8003a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a8e:	fb03 f202 	mul.w	r2, r3, r2
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	69b9      	ldr	r1, [r7, #24]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	1acb      	subs	r3, r1, r3
					(PrevBin - CurrBin);
 8003aa4:	69b8      	ldr	r0, [r7, #24]
 8003aa6:	6979      	ldr	r1, [r7, #20]
 8003aa8:	1a41      	subs	r1, r0, r1
			*pdiff_histo_stddev += (PrevBin - CurrBin) *
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	441a      	add	r2, r3
 8003ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ab2:	601a      	str	r2, [r3, #0]
		for (bin = timing * 4; bin < HighIndex; bin++) {
 8003ab4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003aba:	79bb      	ldrb	r3, [r7, #6]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d3bf      	bcc.n	8003a44 <vl53l1_diff_histo_stddev+0x98>
	}
}
 8003ac4:	bf00      	nop
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc90      	pop	{r4, r7}
 8003acc:	4770      	bx	lr

08003ace <vl53l1_histo_merge>:

static void vl53l1_histo_merge(VL53L1_DEV Dev,
		VL53L1_histogram_bin_data_t *pdata) {
 8003ace:	b5b0      	push	{r4, r5, r7, lr}
 8003ad0:	b08c      	sub	sp, #48	; 0x30
 8003ad2:	af02      	add	r7, sp, #8
 8003ad4:	6078      	str	r0, [r7, #4]
 8003ad6:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev =
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3318      	adds	r3, #24
 8003adc:	61fb      	str	r3, [r7, #28]
			VL53L1DevStructGetLLDriverHandle(Dev);
	uint16_t   bin                      = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t    i                        = 0;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	int32_t    TuningBinRecSize		    = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
	uint8_t    recom_been_reset			= 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t    timing					= 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	76fb      	strb	r3, [r7, #27]
	int32_t    rmt  = 0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
	int32_t    diff_histo_stddev		= 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
	uint8_t    HighIndex, prev_pos;
	uint8_t    BuffSize = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8003afe:	2318      	movs	r3, #24
 8003b00:	76bb      	strb	r3, [r7, #26]
	uint8_t    pos;

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE,
 8003b02:	f107 0314 	add.w	r3, r7, #20
 8003b06:	461a      	mov	r2, r3
 8003b08:	f248 018f 	movw	r1, #32911	; 0x808f
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f003 f9fb 	bl	8006f08 <VL53L1_get_tuning_parm>
			&TuningBinRecSize);

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD,
 8003b12:	f107 0310 	add.w	r3, r7, #16
 8003b16:	461a      	mov	r2, r3
 8003b18:	f248 018e 	movw	r1, #32910	; 0x808e
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f003 f9f3 	bl	8006f08 <VL53L1_get_tuning_parm>
		&rmt);


	if (pdev->pos_before_next_recom == 0) {
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b28:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f040 811b 	bne.w	8003d68 <vl53l1_histo_merge+0x29a>

		timing = 1 - pdata->result__stream_count % 2;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	76fb      	strb	r3, [r7, #27]

		diff_histo_stddev = 0;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
		HighIndex = BuffSize - timing * 4;
 8003b4c:	7efb      	ldrb	r3, [r7, #27]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	7eba      	ldrb	r2, [r7, #26]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	767b      	strb	r3, [r7, #25]
		if (pdev->bin_rec_pos > 0)
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5e:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d008      	beq.n	8003b78 <vl53l1_histo_merge+0xaa>
			prev_pos = pdev->bin_rec_pos - 1;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6c:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003b70:	3b01      	subs	r3, #1
 8003b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b76:	e004      	b.n	8003b82 <vl53l1_histo_merge+0xb4>
		else
			prev_pos = (TuningBinRecSize - 1);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		if (pdev->multi_bins_rec[prev_pos][timing][4] > 0)
 8003b82:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8003b86:	7efb      	ldrb	r3, [r7, #27]
 8003b88:	69f8      	ldr	r0, [r7, #28]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	0052      	lsls	r2, r2, #1
 8003b8e:	441a      	add	r2, r3
 8003b90:	0153      	lsls	r3, r2, #5
 8003b92:	461a      	mov	r2, r3
 8003b94:	460b      	mov	r3, r1
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	440b      	add	r3, r1
 8003b9a:	019b      	lsls	r3, r3, #6
 8003b9c:	4413      	add	r3, r2
 8003b9e:	4403      	add	r3, r0
 8003ba0:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	dd0c      	ble.n	8003bc6 <vl53l1_histo_merge+0xf8>
			vl53l1_diff_histo_stddev(pdev, pdata,
 8003bac:	7e79      	ldrb	r1, [r7, #25]
 8003bae:	7efa      	ldrb	r2, [r7, #27]
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	9301      	str	r3, [sp, #4]
 8003bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	6839      	ldr	r1, [r7, #0]
 8003bc0:	69f8      	ldr	r0, [r7, #28]
 8003bc2:	f7ff fef3 	bl	80039ac <vl53l1_diff_histo_stddev>
				timing, HighIndex, prev_pos,
				&diff_histo_stddev);

		if (diff_histo_stddev >= rmt) {
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	db23      	blt.n	8003c16 <vl53l1_histo_merge+0x148>
			memset(pdev->multi_bins_rec, 0,
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8003bd4:	3318      	adds	r3, #24
 8003bd6:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8003bda:	2100      	movs	r1, #0
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f015 faa9 	bl	8019134 <memset>
				sizeof(pdev->multi_bins_rec));
			pdev->bin_rec_pos = 0;
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

			recom_been_reset = 1;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			if (timing == 0)
 8003bf4:	7efb      	ldrb	r3, [r7, #27]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <vl53l1_histo_merge+0x13a>
				pdev->pos_before_next_recom =
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c00:	2206      	movs	r2, #6
 8003c02:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8003c06:	e034      	b.n	8003c72 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT;
			else
				pdev->pos_before_next_recom =
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c0e:	2207      	movs	r2, #7
 8003c10:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
 8003c14:	e02d      	b.n	8003c72 <vl53l1_histo_merge+0x1a4>
					VL53L1_FRAME_WAIT_EVENT + 1;
		} else {

			pos = pdev->bin_rec_pos;
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c1c:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003c20:	763b      	strb	r3, [r7, #24]
			for (i = 0; i < BuffSize; i++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003c28:	e01e      	b.n	8003c68 <vl53l1_histo_merge+0x19a>
				pdev->multi_bins_rec[pos][timing][i] =
					pdata->bin_data[i];
 8003c2a:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
				pdev->multi_bins_rec[pos][timing][i] =
 8003c2e:	7e39      	ldrb	r1, [r7, #24]
 8003c30:	7efb      	ldrb	r3, [r7, #27]
 8003c32:	f897 5025 	ldrb.w	r5, [r7, #37]	; 0x25
					pdata->bin_data[i];
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	3006      	adds	r0, #6
 8003c3a:	f852 4020 	ldr.w	r4, [r2, r0, lsl #2]
				pdev->multi_bins_rec[pos][timing][i] =
 8003c3e:	69f8      	ldr	r0, [r7, #28]
 8003c40:	461a      	mov	r2, r3
 8003c42:	0052      	lsls	r2, r2, #1
 8003c44:	441a      	add	r2, r3
 8003c46:	00d3      	lsls	r3, r2, #3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	440b      	add	r3, r1
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	4413      	add	r3, r2
 8003c54:	442b      	add	r3, r5
 8003c56:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003c5a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
			for (i = 0; i < BuffSize; i++)
 8003c5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c62:	3301      	adds	r3, #1
 8003c64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003c68:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003c6c:	7ebb      	ldrb	r3, [r7, #26]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d3db      	bcc.n	8003c2a <vl53l1_histo_merge+0x15c>
		}

		if (pdev->bin_rec_pos == (TuningBinRecSize - 1) && timing == 1)
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c78:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	3b01      	subs	r3, #1
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d109      	bne.n	8003c9a <vl53l1_histo_merge+0x1cc>
 8003c86:	7efb      	ldrb	r3, [r7, #27]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d106      	bne.n	8003c9a <vl53l1_histo_merge+0x1cc>
			pdev->bin_rec_pos = 0;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
 8003c98:	e00e      	b.n	8003cb8 <vl53l1_histo_merge+0x1ea>
		else if (timing == 1)
 8003c9a:	7efb      	ldrb	r3, [r7, #27]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d10b      	bne.n	8003cb8 <vl53l1_histo_merge+0x1ea>
			pdev->bin_rec_pos++;
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ca6:	f893 3c54 	ldrb.w	r3, [r3, #3156]	; 0xc54
 8003caa:	3301      	adds	r3, #1
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb4:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54

		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003cb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <vl53l1_histo_merge+0x1f8>
 8003cc0:	7efb      	ldrb	r3, [r7, #27]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d069      	beq.n	8003d9a <vl53l1_histo_merge+0x2cc>
			 (pdev->pos_before_next_recom == 0)) {
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ccc:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
		if (!((recom_been_reset == 1) && (timing == 0)) &&
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d162      	bne.n	8003d9a <vl53l1_histo_merge+0x2cc>

			for (bin = 0; bin < BuffSize; bin++)
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003cd8:	e008      	b.n	8003cec <vl53l1_histo_merge+0x21e>
				pdata->bin_data[bin] = 0;
 8003cda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	3206      	adds	r2, #6
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (bin = 0; bin < BuffSize; bin++)
 8003ce6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ce8:	3301      	adds	r3, #1
 8003cea:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003cec:	7ebb      	ldrb	r3, [r7, #26]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d3f1      	bcc.n	8003cda <vl53l1_histo_merge+0x20c>

			for (bin = 0; bin < BuffSize; bin++)
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003cfa:	e02f      	b.n	8003d5c <vl53l1_histo_merge+0x28e>
				for (i = 0; i < TuningBinRecSize; i++)
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003d02:	e023      	b.n	8003d4c <vl53l1_histo_merge+0x27e>
					pdata->bin_data[bin] +=
 8003d04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	3206      	adds	r2, #6
 8003d0a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					(pdev->multi_bins_rec[i][timing][bin]);
 8003d0e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003d12:	7efb      	ldrb	r3, [r7, #27]
 8003d14:	8cfd      	ldrh	r5, [r7, #38]	; 0x26
 8003d16:	69fc      	ldr	r4, [r7, #28]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	0052      	lsls	r2, r2, #1
 8003d1c:	441a      	add	r2, r3
 8003d1e:	00d3      	lsls	r3, r2, #3
 8003d20:	461a      	mov	r2, r3
 8003d22:	460b      	mov	r3, r1
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	440b      	add	r3, r1
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	4413      	add	r3, r2
 8003d2c:	442b      	add	r3, r5
 8003d2e:	f203 7316 	addw	r3, r3, #1814	; 0x716
 8003d32:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
					pdata->bin_data[bin] +=
 8003d36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d38:	18c1      	adds	r1, r0, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	3206      	adds	r2, #6
 8003d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (i = 0; i < TuningBinRecSize; i++)
 8003d42:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d46:	3301      	adds	r3, #1
 8003d48:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8003d4c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	dbd6      	blt.n	8003d04 <vl53l1_histo_merge+0x236>
			for (bin = 0; bin < BuffSize; bin++)
 8003d56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d58:	3301      	adds	r3, #1
 8003d5a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d5c:	7ebb      	ldrb	r3, [r7, #26]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d3ca      	bcc.n	8003cfc <vl53l1_histo_merge+0x22e>

		pdev->pos_before_next_recom--;
		if (pdev->pos_before_next_recom == 255)
			pdev->pos_before_next_recom = 0;
	}
}
 8003d66:	e018      	b.n	8003d9a <vl53l1_histo_merge+0x2cc>
		pdev->pos_before_next_recom--;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6e:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8003d72:	3b01      	subs	r3, #1
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7c:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
		if (pdev->pos_before_next_recom == 255)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d86:	f893 3c55 	ldrb.w	r3, [r3, #3157]	; 0xc55
 8003d8a:	2bff      	cmp	r3, #255	; 0xff
 8003d8c:	d105      	bne.n	8003d9a <vl53l1_histo_merge+0x2cc>
			pdev->pos_before_next_recom = 0;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
}
 8003d9a:	bf00      	nop
 8003d9c:	3728      	adds	r7, #40	; 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003da4 <VL53L1_load_patch>:

VL53L1_Error VL53L1_load_patch(
	VL53L1_DEV Dev) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b0c6      	sub	sp, #280	; 0x118
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003db2:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	int32_t patch_tuning = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8003dc0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <VL53L1_load_patch+0x3c>
		status = VL53L1_WrByte(Dev,
 8003dc8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dcc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2185      	movs	r1, #133	; 0x85
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	f010 fa51 	bl	801427c <VL53L1_WrByte>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8003de0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <VL53L1_load_patch+0x52>
		VL53L1_enable_powerforce(Dev);
 8003de8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	f007 f8df 	bl	800afb4 <VL53L1_enable_powerforce>

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER,
 8003df6:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8003dfa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003dfe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003e02:	f248 018c 	movw	r1, #32908	; 0x808c
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	f003 f87e 	bl	8006f08 <VL53L1_get_tuning_parm>
			&patch_tuning);

	switch (patch_tuning) {
 8003e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d81b      	bhi.n	8003e4c <VL53L1_load_patch+0xa8>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <VL53L1_load_patch+0x78>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e2d 	.word	0x08003e2d
 8003e20:	08003e35 	.word	0x08003e35
 8003e24:	08003e3d 	.word	0x08003e3d
 8003e28:	08003e45 	.word	0x08003e45
	case 0:
		patch_power = 0x00;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003e32:	e00e      	b.n	8003e52 <VL53L1_load_patch+0xae>
	case 1:
		patch_power = 0x10;
 8003e34:	2310      	movs	r3, #16
 8003e36:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003e3a:	e00a      	b.n	8003e52 <VL53L1_load_patch+0xae>
	case 2:
		patch_power = 0x20;
 8003e3c:	2320      	movs	r3, #32
 8003e3e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003e42:	e006      	b.n	8003e52 <VL53L1_load_patch+0xae>
	case 3:
		patch_power = 0x40;
 8003e44:	2340      	movs	r3, #64	; 0x40
 8003e46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8003e4a:	e002      	b.n	8003e52 <VL53L1_load_patch+0xae>
	default:
		patch_power = 0x00;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}

	if (status == VL53L1_ERROR_NONE) {
 8003e52:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d134      	bne.n	8003ec4 <VL53L1_load_patch+0x120>

		comms_buffer[0] = 0x29;
 8003e5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e62:	2229      	movs	r2, #41	; 0x29
 8003e64:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8003e66:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e6a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e6e:	22c9      	movs	r2, #201	; 0xc9
 8003e70:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8003e72:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e7a:	220e      	movs	r2, #14
 8003e7c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8003e7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e86:	2240      	movs	r2, #64	; 0x40
 8003e88:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8003e8a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003e8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003e92:	2228      	movs	r2, #40	; 0x28
 8003e94:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8003e96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ea0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ea4:	715a      	strb	r2, [r3, #5]

		status = VL53L1_WriteMulti(Dev,
 8003ea6:	f107 020c 	add.w	r2, r7, #12
 8003eaa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003eae:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8003eb2:	2306      	movs	r3, #6
 8003eb4:	f240 4176 	movw	r1, #1142	; 0x476
 8003eb8:	6800      	ldr	r0, [r0, #0]
 8003eba:	f010 f973 	bl	80141a4 <VL53L1_WriteMulti>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__OFFSET_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8003ec4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d132      	bne.n	8003f32 <VL53L1_load_patch+0x18e>
		comms_buffer[0] = 0x03;
 8003ecc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ed0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8003ed8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003edc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ee0:	226d      	movs	r2, #109	; 0x6d
 8003ee2:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8003ee4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ee8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003eec:	2203      	movs	r2, #3
 8003eee:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8003ef0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003ef4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003ef8:	226f      	movs	r2, #111	; 0x6f
 8003efa:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8003efc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f04:	2207      	movs	r2, #7
 8003f06:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8003f08:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f0c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f10:	2229      	movs	r2, #41	; 0x29
 8003f12:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(Dev,
 8003f14:	f107 020c 	add.w	r2, r7, #12
 8003f18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f1c:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8003f20:	2306      	movs	r3, #6
 8003f22:	f240 4196 	movw	r1, #1174	; 0x496
 8003f26:	6800      	ldr	r0, [r0, #0]
 8003f28:	f010 f93c 	bl	80141a4 <VL53L1_WriteMulti>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__ADDRESS_0, comms_buffer, 6);
	}

	if (status == VL53L1_ERROR_NONE) {
 8003f32:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11a      	bne.n	8003f70 <VL53L1_load_patch+0x1cc>
		comms_buffer[0] = 0x00;
 8003f3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003f46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f4e:	2207      	movs	r2, #7
 8003f50:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8003f52:	f107 020c 	add.w	r2, r7, #12
 8003f56:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f5a:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8003f5e:	2302      	movs	r3, #2
 8003f60:	f240 4172 	movw	r1, #1138	; 0x472
 8003f64:	6800      	ldr	r0, [r0, #0]
 8003f66:	f010 f91d 	bl	80141a4 <VL53L1_WriteMulti>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__JMP_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE) {
 8003f70:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11a      	bne.n	8003fae <VL53L1_load_patch+0x20a>
		comms_buffer[0] = 0x00;
 8003f78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8003f84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003f8c:	2207      	movs	r2, #7
 8003f8e:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(Dev,
 8003f90:	f107 020c 	add.w	r2, r7, #12
 8003f94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003f98:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	f240 4174 	movw	r1, #1140	; 0x474
 8003fa2:	6800      	ldr	r0, [r0, #0]
 8003fa4:	f010 f8fe 	bl	80141a4 <VL53L1_WriteMulti>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__DATA_ENABLES, comms_buffer, 2);
	}

	if (status == VL53L1_ERROR_NONE)
 8003fae:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10c      	bne.n	8003fd0 <VL53L1_load_patch+0x22c>
		status = VL53L1_WrByte(Dev,
 8003fb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003fba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8003fc4:	6818      	ldr	r0, [r3, #0]
 8003fc6:	f010 f959 	bl	801427c <VL53L1_WrByte>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_PATCH__CTRL, 0x01);

	if (status == VL53L1_ERROR_NONE)
 8003fd0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <VL53L1_load_patch+0x24c>
		status = VL53L1_WrByte(Dev,
 8003fd8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003fdc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	2185      	movs	r1, #133	; 0x85
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	f010 f949 	bl	801427c <VL53L1_WrByte>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 8003ff0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop

08004000 <VL53L1_unload_patch>:

VL53L1_Error VL53L1_unload_patch(
	VL53L1_DEV Dev) {
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004008:	2300      	movs	r3, #0
 800400a:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800400c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <VL53L1_unload_patch+0x22>
		status = VL53L1_WrByte(Dev,
 8004014:	2200      	movs	r2, #0
 8004016:	2185      	movs	r1, #133	; 0x85
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f010 f92f 	bl	801427c <VL53L1_WrByte>
 800401e:	4603      	mov	r3, r0
 8004020:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8004022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d102      	bne.n	8004030 <VL53L1_unload_patch+0x30>
		VL53L1_disable_powerforce(Dev);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f006 ffd4 	bl	800afd8 <VL53L1_disable_powerforce>

	if (status == VL53L1_ERROR_NONE)
 8004030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d107      	bne.n	8004048 <VL53L1_unload_patch+0x48>
		status = VL53L1_WrByte(Dev,
 8004038:	2200      	movs	r2, #0
 800403a:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f010 f91c 	bl	801427c <VL53L1_WrByte>
 8004044:	4603      	mov	r3, r0
 8004046:	73fb      	strb	r3, [r7, #15]
		VL53L1_PATCH__CTRL, 0x00);

	if (status == VL53L1_ERROR_NONE)
 8004048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <VL53L1_unload_patch+0x5e>
		status = VL53L1_WrByte(Dev,
 8004050:	2201      	movs	r2, #1
 8004052:	2185      	movs	r1, #133	; 0x85
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f010 f911 	bl	801427c <VL53L1_WrByte>
 800405a:	4603      	mov	r3, r0
 800405c:	73fb      	strb	r3, [r7, #15]
		VL53L1_FIRMWARE__ENABLE, 0x01);

	LOG_FUNCTION_END(status);

	return status;
 800405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800406a:	b5b0      	push	{r4, r5, r7, lr}
 800406c:	b08a      	sub	sp, #40	; 0x28
 800406e:	af04      	add	r7, sp, #16
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004076:	2300      	movs	r3, #0
 8004078:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t    *pdev =
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3318      	adds	r3, #24
 800407e:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004086:	3308      	adds	r3, #8
 8004088:	60fb      	str	r3, [r7, #12]



	VL53L1_zone_objects_t    *pobjects;

	uint8_t  i = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	75bb      	strb	r3, [r7, #22]

	LOG_FUNCTION_START("");

	VL53L1_init_ll_driver_state(
 800408e:	2162      	movs	r1, #98	; 0x62
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f006 f810 	bl	800a0b6 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pres->range_results.max_results    = VL53L1_MAX_RANGE_RESULTS;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2204      	movs	r2, #4
 800409a:	745a      	strb	r2, [r3, #17]
	pres->range_results.active_results = 0;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	749a      	strb	r2, [r3, #18]
	pres->zone_results.max_zones       = VL53L1_MAX_USER_ZONES;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2210      	movs	r2, #16
 80040a6:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
	pres->zone_results.active_zones    = 0;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80040b2:	2300      	movs	r3, #0
 80040b4:	75bb      	strb	r3, [r7, #22]
 80040b6:	e01b      	b.n	80040f0 <VL53L1_data_init+0x86>
		pobjects = &(pres->zone_results.VL53L1_p_002[i]);
 80040b8:	7dba      	ldrb	r2, [r7, #22]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	3308      	adds	r3, #8
 80040cc:	60bb      	str	r3, [r7, #8]
		pobjects->xmonitor.VL53L1_p_020 = 0;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38
		pobjects->xmonitor.VL53L1_p_021  = 0;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2200      	movs	r2, #0
 80040d8:	63da      	str	r2, [r3, #60]	; 0x3c
		pobjects->xmonitor.VL53L1_p_014          = 0;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2200      	movs	r2, #0
 80040de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		pobjects->xmonitor.range_status =
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80040ea:	7dbb      	ldrb	r3, [r7, #22]
 80040ec:	3301      	adds	r3, #1
 80040ee:	75bb      	strb	r3, [r7, #22]
 80040f0:	7dbb      	ldrb	r3, [r7, #22]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	d9e0      	bls.n	80040b8 <VL53L1_data_init+0x4e>
				VL53L1_DEVICEERROR_NOUPDATE;
	}



	pres->zone_hists.max_zones         = VL53L1_MAX_USER_ZONES;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2210      	movs	r2, #16
 80040fa:	f883 2688 	strb.w	r2, [r3, #1672]	; 0x688
	pres->zone_hists.active_zones      = 0;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2689 	strb.w	r2, [r3, #1673]	; 0x689



	pres->zone_cal.max_zones           = VL53L1_MAX_USER_ZONES;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2210      	movs	r2, #16
 800410a:	f883 279b 	strb.w	r2, [r3, #1947]	; 0x79b
	pres->zone_cal.active_zones        = 0;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 279c 	strb.w	r2, [r3, #1948]	; 0x79c
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 8004116:	2300      	movs	r3, #0
 8004118:	75bb      	strb	r3, [r7, #22]
 800411a:	e039      	b.n	8004190 <VL53L1_data_init+0x126>
		pres->zone_cal.VL53L1_p_002[i].no_of_samples   = 0;
 800411c:	7dba      	ldrb	r2, [r7, #22]
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	4613      	mov	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].effective_spads = 0;
 8004132:	7dba      	ldrb	r2, [r7, #22]
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	4613      	mov	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].peak_rate_mcps  = 0;
 8004148:	7dba      	ldrb	r2, [r7, #22]
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].median_range_mm = 0;
 800415e:	7dba      	ldrb	r2, [r7, #22]
 8004160:	68f9      	ldr	r1, [r7, #12]
 8004162:	4613      	mov	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	f203 73b4 	addw	r3, r3, #1972	; 0x7b4
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
		pres->zone_cal.VL53L1_p_002[i].range_mm_offset = 0;
 8004174:	7dba      	ldrb	r2, [r7, #22]
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	4613      	mov	r3, r2
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	1a9b      	subs	r3, r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
	for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800418a:	7dbb      	ldrb	r3, [r7, #22]
 800418c:	3301      	adds	r3, #1
 800418e:	75bb      	strb	r3, [r7, #22]
 8004190:	7dbb      	ldrb	r3, [r7, #22]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	d9c2      	bls.n	800411c <VL53L1_data_init+0xb2>
	}

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode   = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2201      	movs	r2, #1
 80041a0:	705a      	strb	r2, [r3, #1]
	pdev->zone_preset             = VL53L1_DEVICEZONEPRESET_NONE;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2200      	movs	r2, #0
 80041a6:	709a      	strb	r2, [r3, #2]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2200      	movs	r2, #0
 80041ac:	70da      	strb	r2, [r3, #3]

	pdev->offset_calibration_mode =
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2201      	movs	r2, #1
 80041b2:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	2201      	movs	r2, #1
 80041b8:	715a      	strb	r2, [r3, #5]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;
	pdev->dmax_mode  =
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2201      	movs	r2, #1
 80041be:	719a      	strb	r2, [r3, #6]
		VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA;

	pdev->phasecal_config_timeout_us  =  1000;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041c6:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80041ce:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80041d6:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2264      	movs	r2, #100	; 0x64
 80041dc:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80041e4:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pdev->offset_results.max_results    = VL53L1_MAX_OFFSET_RANGE_RESULTS;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f4:	2203      	movs	r2, #3
 80041f6:	f883 2326 	strb.w	r2, [r3, #806]	; 0x326
	pdev->offset_results.active_results = 0;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327



	pdev->gain_cal.standard_ranging_gain_factor =
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f240 72db 	movw	r2, #2011	; 0x7db
 800420c:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;
	pdev->gain_cal.histogram_ranging_gain_factor =
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f240 72c3 	movw	r2, #1987	; 0x7c3
 8004216:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;


	VL53L1_init_version(Dev);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f005 ff2e 	bl	800a07c <VL53L1_init_version>


	memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8004226:	3318      	adds	r3, #24
 8004228:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f014 ff80 	bl	8019134 <memset>
	pdev->bin_rec_pos = 0;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
	pdev->pos_before_next_recom = 0;
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55



	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE)
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d008      	beq.n	8004264 <VL53L1_data_init+0x1fa>
 8004252:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d104      	bne.n	8004264 <VL53L1_data_init+0x1fa>
		status = VL53L1_read_p2p_data(Dev);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f8b8 	bl	80043d0 <VL53L1_read_p2p_data>
 8004260:	4603      	mov	r3, r0
 8004262:	75fb      	strb	r3, [r7, #23]


	if (status == VL53L1_ERROR_NONE)
 8004264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d107      	bne.n	800427c <VL53L1_data_init+0x212>
		status = VL53L1_init_refspadchar_config_struct(
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8004272:	4618      	mov	r0, r3
 8004274:	f003 fdf8 	bl	8007e68 <VL53L1_init_refspadchar_config_struct>
 8004278:	4603      	mov	r3, r0
 800427a:	75fb      	strb	r3, [r7, #23]
			&(pdev->refspadchar));


	if (status == VL53L1_ERROR_NONE)
 800427c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d107      	bne.n	8004294 <VL53L1_data_init+0x22a>
		status = VL53L1_init_ssc_config_struct(
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800428a:	4618      	mov	r0, r3
 800428c:	f003 fe10 	bl	8007eb0 <VL53L1_init_ssc_config_struct>
 8004290:	4603      	mov	r3, r0
 8004292:	75fb      	strb	r3, [r7, #23]
			&(pdev->ssc_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <VL53L1_data_init+0x24a>
		status = VL53L1_init_xtalk_config_struct(
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 80042a8:	4619      	mov	r1, r3
 80042aa:	4610      	mov	r0, r2
 80042ac:	f003 fe21 	bl	8007ef2 <VL53L1_init_xtalk_config_struct>
 80042b0:	4603      	mov	r3, r0
 80042b2:	75fb      	strb	r3, [r7, #23]
			&(pdev->customer),
			&(pdev->xtalk_cfg));


	if (status == VL53L1_ERROR_NONE)
 80042b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d107      	bne.n	80042cc <VL53L1_data_init+0x262>
		status = VL53L1_init_xtalk_extract_config_struct(
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 80042c2:	4618      	mov	r0, r3
 80042c4:	f003 fe89 	bl	8007fda <VL53L1_init_xtalk_extract_config_struct>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]
			&(pdev->xtalk_extract_cfg));


	if (status == VL53L1_ERROR_NONE)
 80042cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d107      	bne.n	80042e4 <VL53L1_data_init+0x27a>
		status = VL53L1_init_offset_cal_config_struct(
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 80042da:	4618      	mov	r0, r3
 80042dc:	f003 feac 	bl	8008038 <VL53L1_init_offset_cal_config_struct>
 80042e0:	4603      	mov	r3, r0
 80042e2:	75fb      	strb	r3, [r7, #23]
		    &(pdev->offsetcal_cfg));


	if (status == VL53L1_ERROR_NONE)
 80042e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <VL53L1_data_init+0x292>
		status = VL53L1_init_zone_cal_config_struct(
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80042f2:	4618      	mov	r0, r3
 80042f4:	f003 fec7 	bl	8008086 <VL53L1_init_zone_cal_config_struct>
 80042f8:	4603      	mov	r3, r0
 80042fa:	75fb      	strb	r3, [r7, #23]
			&(pdev->zonecal_cfg));


	if (status == VL53L1_ERROR_NONE)
 80042fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <VL53L1_data_init+0x2b2>
		status = VL53L1_init_hist_post_process_config_struct(
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f893 22e0 	ldrb.w	r2, [r3, #736]	; 0x2e0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f003 fedb 	bl	80080ce <VL53L1_init_hist_post_process_config_struct>
 8004318:	4603      	mov	r3, r0
 800431a:	75fb      	strb	r3, [r7, #23]
			pdev->xtalk_cfg.global_crosstalk_compensation_enable,
			&(pdev->histpostprocess));


	if (status == VL53L1_ERROR_NONE)
 800431c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <VL53L1_data_init+0x2ca>
		status = VL53L1_init_hist_gen3_dmax_config_struct(
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800432a:	4618      	mov	r0, r3
 800432c:	f004 f8f6 	bl	800851c <VL53L1_init_hist_gen3_dmax_config_struct>
 8004330:	4603      	mov	r3, r0
 8004332:	75fb      	strb	r3, [r7, #23]
			&(pdev->dmax_cfg));


	if (status == VL53L1_ERROR_NONE)
 8004334:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <VL53L1_data_init+0x2e2>
		status = VL53L1_init_tuning_parm_storage_struct(
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004342:	4618      	mov	r0, r3
 8004344:	f003 ff32 	bl	80081ac <VL53L1_init_tuning_parm_storage_struct>
 8004348:	4603      	mov	r3, r0
 800434a:	75fb      	strb	r3, [r7, #23]
			&(pdev->tuning_parms));



	if (status == VL53L1_ERROR_NONE)
 800434c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d116      	bne.n	8004382 <VL53L1_data_init+0x318>
		status = VL53L1_set_preset_mode(
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	7858      	ldrb	r0, [r3, #1]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	8b1c      	ldrh	r4, [r3, #24]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	689d      	ldr	r5, [r3, #8]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	6912      	ldr	r2, [r2, #16]
 8004368:	6939      	ldr	r1, [r7, #16]
 800436a:	6949      	ldr	r1, [r1, #20]
 800436c:	9102      	str	r1, [sp, #8]
 800436e:	9201      	str	r2, [sp, #4]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	462b      	mov	r3, r5
 8004374:	4622      	mov	r2, r4
 8004376:	4601      	mov	r1, r0
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fc8f 	bl	8004c9c <VL53L1_set_preset_mode>
 800437e:	4603      	mov	r3, r0
 8004380:	75fb      	strb	r3, [r7, #23]
			pdev->mm_config_timeout_us,
			pdev->range_config_timeout_us,
			pdev->inter_measurement_period_ms);


	VL53L1_init_histogram_bin_data_struct(
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004388:	461a      	mov	r2, r3
 800438a:	2118      	movs	r1, #24
 800438c:	2000      	movs	r0, #0
 800438e:	f00a fa90 	bl	800e8b2 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_data));

	VL53L1_init_histogram_bin_data_struct(
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8004398:	461a      	mov	r2, r3
 800439a:	2118      	movs	r1, #24
 800439c:	2000      	movs	r0, #0
 800439e:	f00a fa88 	bl	800e8b2 <VL53L1_init_histogram_bin_data_struct>
			0,
			VL53L1_HISTOGRAM_BUFFER_SIZE,
			&(pdev->hist_xtalk));


	VL53L1_init_xtalk_bin_data_struct(
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f503 63ac 	add.w	r3, r3, #1376	; 0x560
 80043a8:	461a      	mov	r2, r3
 80043aa:	210c      	movs	r1, #12
 80043ac:	2000      	movs	r0, #0
 80043ae:	f006 fc26 	bl	800abfe <VL53L1_init_xtalk_bin_data_struct>
			VL53L1_XTALK_HISTO_BINS,
			&(pdev->xtalk_shapes.xtalk_shape));



	VL53L1_xtalk_cal_data_init(
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f009 fcd2 	bl	800dd5c <VL53L1_xtalk_cal_data_init>
			Dev
			);



	VL53L1_dynamic_xtalk_correction_data_init(
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f009 fbd1 	bl	800db60 <VL53L1_dynamic_xtalk_correction_data_init>
			Dev
			);



	VL53L1_low_power_auto_data_init(
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f009 fcf7 	bl	800ddb2 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80043c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bdb0      	pop	{r4, r5, r7, pc}

080043d0 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b091      	sub	sp, #68	; 0x44
 80043d4:	af04      	add	r7, sp, #16
 80043d6:	6078      	str	r0, [r7, #4]



	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80043d8:	2300      	movs	r3, #0
 80043da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3318      	adds	r3, #24
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	3348      	adds	r3, #72	; 0x48
 80043f0:	623b      	str	r3, [r7, #32]
	VL53L1_additional_offset_cal_data_t *pCD = &(pdev->add_off_cal_data);
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	339c      	adds	r3, #156	; 0x9c
 80043f6:	61fb      	str	r3, [r7, #28]

	VL53L1_decoded_nvm_fmt_range_data_t fmt_rrd;

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80043f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d109      	bne.n	8004414 <VL53L1_read_p2p_data+0x44>
		status = VL53L1_get_static_nvm_managed(
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f00d fdd1 	bl	8011fb0 <VL53L1_get_static_nvm_managed>
 800440e:	4603      	mov	r3, r0
 8004410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8004414:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004418:	2b00      	cmp	r3, #0
 800441a:	d108      	bne.n	800442e <VL53L1_read_p2p_data+0x5e>
		status = VL53L1_get_customer_nvm_managed(
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	3348      	adds	r3, #72	; 0x48
 8004420:	4619      	mov	r1, r3
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f00d ff02 	bl	801222c <VL53L1_get_customer_nvm_managed>
 8004428:	4603      	mov	r3, r0
 800442a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800442e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004432:	2b00      	cmp	r3, #0
 8004434:	d117      	bne.n	8004466 <VL53L1_read_p2p_data+0x96>

		status = VL53L1_get_nvm_copy_data(
 8004436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004438:	f203 33d6 	addw	r3, r3, #982	; 0x3d6
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f00e fdda 	bl	8012ff8 <VL53L1_get_nvm_copy_data>
 8004444:	4603      	mov	r3, r0
 8004446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						Dev,
						&(pdev->nvm_copy_data));


		if (status == VL53L1_ERROR_NONE)
 800444a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <VL53L1_read_p2p_data+0x96>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f006 f921 	bl	800a6a8 <VL53L1_copy_rtn_good_spads_to_buffer>
					&(pdev->rtn_good_spads[0]));
	}



	if (status == VL53L1_ERROR_NONE) {
 8004466:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10e      	bne.n	800448c <VL53L1_read_p2p_data+0xbc>
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		pN->algo__crosstalk_compensation_plane_offset_kcps;
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	895b      	ldrh	r3, [r3, #10]
 8004472:	461a      	mov	r2, r3
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	62da      	str	r2, [r3, #44]	; 0x2c
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pN->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448a:	865a      	strh	r2, [r3, #50]	; 0x32
	}


	if (status == VL53L1_ERROR_NONE)
 800448c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <VL53L1_read_p2p_data+0xd6>
		status =
			VL53L1_read_nvm_optical_centre(
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	33c0      	adds	r3, #192	; 0xc0
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f00d fc3c 	bl	8011d18 <VL53L1_read_nvm_optical_centre>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->optical_centre));



	if (status == VL53L1_ERROR_NONE)
 80044a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d108      	bne.n	80044c0 <VL53L1_read_p2p_data+0xf0>
		status =
			VL53L1_read_nvm_cal_peak_rate_map(
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	3360      	adds	r3, #96	; 0x60
 80044b2:	4619      	mov	r1, r3
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f00d fc52 	bl	8011d5e <VL53L1_read_nvm_cal_peak_rate_map>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->cal_peak_rate_map));



	if (status == VL53L1_ERROR_NONE) {
 80044c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d12d      	bne.n	8004524 <VL53L1_read_p2p_data+0x154>

		status =
			VL53L1_read_nvm_additional_offset_cal_data(
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	339c      	adds	r3, #156	; 0x9c
 80044cc:	4619      	mov	r1, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f00d fc6b 	bl	8011daa <VL53L1_read_nvm_additional_offset_cal_data>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->add_off_cal_data));



		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	889b      	ldrh	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d120      	bne.n	8004524 <VL53L1_read_p2p_data+0x154>
			pCD->result__mm_outer_peak_signal_count_rtn_mcps == 0) {
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	88db      	ldrh	r3, [r3, #6]
		if (pCD->result__mm_inner_peak_signal_count_rtn_mcps == 0 &&
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d11c      	bne.n	8004524 <VL53L1_read_p2p_data+0x154>

			pCD->result__mm_inner_peak_signal_count_rtn_mcps
					= 0x0080;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2280      	movs	r2, #128	; 0x80
 80044ee:	809a      	strh	r2, [r3, #4]
			pCD->result__mm_outer_peak_signal_count_rtn_mcps
					= 0x0180;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80044f6:	80da      	strh	r2, [r3, #6]



			VL53L1_calc_mm_effective_spads(
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	f893 0406 	ldrb.w	r0, [r3, #1030]	; 0x406
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	f893 4407 	ldrb.w	r4, [r3, #1031]	; 0x407
 8004504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004506:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 800450a:	69fa      	ldr	r2, [r7, #28]
 800450c:	69f9      	ldr	r1, [r7, #28]
 800450e:	3102      	adds	r1, #2
 8004510:	9103      	str	r1, [sp, #12]
 8004512:	9202      	str	r2, [sp, #8]
 8004514:	2238      	movs	r2, #56	; 0x38
 8004516:	9201      	str	r2, [sp, #4]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	23ff      	movs	r3, #255	; 0xff
 800451c:	22c7      	movs	r2, #199	; 0xc7
 800451e:	4621      	mov	r1, r4
 8004520:	f008 f934 	bl	800c78c <VL53L1_calc_mm_effective_spads>
			&(pCD->result__mm_outer_actual_effective_spads));
		}
	}


	if (status == VL53L1_ERROR_NONE) {
 8004524:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004528:	2b00      	cmp	r3, #0
 800452a:	d12f      	bne.n	800458c <VL53L1_read_p2p_data+0x1bc>

		status =
			VL53L1_read_nvm_fmt_range_results_data(
 800452c:	f107 030c 	add.w	r3, r7, #12
 8004530:	461a      	mov	r2, r3
 8004532:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f00d fc5a 	bl	8011df0 <VL53L1_read_nvm_fmt_range_results_data>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				VL53L1_NVM__FMT__RANGE_RESULTS__140MM_DARK,
				&fmt_rrd);

		if (status == VL53L1_ERROR_NONE) {
 8004542:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004546:	2b00      	cmp	r3, #0
 8004548:	d120      	bne.n	800458c <VL53L1_read_p2p_data+0x1bc>
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
			fmt_rrd.result__actual_effective_rtn_spads;
 800454a:	89ba      	ldrh	r2, [r7, #12]
			pdev->fmt_dmax_cal.ref__actual_effective_spads =
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
			fmt_rrd.result__peak_signal_count_rate_rtn_mcps;
 8004552:	8a3a      	ldrh	r2, [r7, #16]
			pdev->fmt_dmax_cal.ref__peak_signal_count_rate_mcps =
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
			pdev->fmt_dmax_cal.ref__distance_mm =
			fmt_rrd.measured_distance_mm;
 800455a:	8b3a      	ldrh	r2, [r7, #24]
			pdev->fmt_dmax_cal.ref__distance_mm =
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8


			if (pdev->cal_peak_rate_map.cal_reflectance_pc != 0) {
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004568:	2b00      	cmp	r3, #0
 800456a:	d006      	beq.n	800457a <VL53L1_read_p2p_data+0x1aa>
				pdev->fmt_dmax_cal.ref_reflectance_pc =
				pdev->cal_peak_rate_map.cal_reflectance_pc;
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
				pdev->fmt_dmax_cal.ref_reflectance_pc =
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8004578:	e003      	b.n	8004582 <VL53L1_read_p2p_data+0x1b2>
			} else {
				pdev->fmt_dmax_cal.ref_reflectance_pc = 0x0014;
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	2214      	movs	r2, #20
 800457e:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
			}


			pdev->fmt_dmax_cal.coverglass_transmission = 0x0100;
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004588:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		}
	}


	if (status == VL53L1_ERROR_NONE)
 800458c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <VL53L1_read_p2p_data+0x1dc>
		status =
			VL53L1_RdWord(
 8004594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004596:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 800459a:	3308      	adds	r3, #8
 800459c:	461a      	mov	r2, r3
 800459e:	21de      	movs	r1, #222	; 0xde
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f00f fefb 	bl	801439c <VL53L1_RdWord>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L1_RESULT__OSC_CALIBRATE_VAL,
				&(pdev->dbg_results.result__osc_calibrate_val));



	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 80045b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b6:	d204      	bcs.n	80045c2 <VL53L1_read_p2p_data+0x1f2>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 80045be:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	}



	if (status == VL53L1_ERROR_NONE)
 80045c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d108      	bne.n	80045dc <VL53L1_read_p2p_data+0x20c>
		status =
			VL53L1_get_mode_mitigation_roi(
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	33bc      	adds	r3, #188	; 0xbc
 80045ce:	4619      	mov	r1, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 f97d 	bl	80048d0 <VL53L1_get_mode_mitigation_roi>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				Dev,
				&(pdev->mm_roi));



	if (pdev->optical_centre.x_centre == 0 &&
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d114      	bne.n	8004610 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.y_centre == 0) {
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
	if (pdev->optical_centre.x_centre == 0 &&
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10f      	bne.n	8004610 <VL53L1_read_p2p_data+0x240>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800460a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	}

	LOG_FUNCTION_END(status);

	return status;
 8004610:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004614:	4618      	mov	r0, r3
 8004616:	3734      	adds	r7, #52	; 0x34
 8004618:	46bd      	mov	sp, r7
 800461a:	bd90      	pop	{r4, r7, pc}

0800461c <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3318      	adds	r3, #24
 800462e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004636:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <VL53L1_set_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800463e:	23f1      	movs	r3, #241	; 0xf1
 8004640:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8004642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10e      	bne.n	8004668 <VL53L1_set_inter_measurement_period_ms+0x4c>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period =
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004656:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 800465a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period =
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
	}

	LOG_FUNCTION_END(status);

	return status;
 8004668:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004682:	2300      	movs	r3, #0
 8004684:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3318      	adds	r3, #24
 800468a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004692:	f8b3 33a8 	ldrh.w	r3, [r3, #936]	; 0x3a8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <VL53L1_get_inter_measurement_period_ms+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800469a:	23f1      	movs	r3, #241	; 0xf1
 800469c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800469e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <VL53L1_get_inter_measurement_period_ms+0x46>
		*pinter_measurement_period_ms =
			pdev->tim_cfg.system__intermeasurement_period /
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046b2:	f8b2 23a8 	ldrh.w	r2, [r2, #936]	; 0x3a8
			pdev->tim_cfg.system__intermeasurement_period /
 80046b6:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms =
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 80046be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b088      	sub	sp, #32
 80046d2:	af02      	add	r7, sp, #8
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
 80046da:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80046dc:	2300      	movs	r3, #0
 80046de:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3318      	adds	r3, #24
 80046e4:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <VL53L1_set_timeouts_us+0x26>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80046f0:	23f1      	movs	r3, #241	; 0xf1
 80046f2:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 80046f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11b      	bne.n	8004734 <VL53L1_set_timeouts_us+0x66>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	611a      	str	r2, [r3, #16]

		status =
		VL53L1_calc_timeout_register_values(
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f8b3 1322 	ldrh.w	r1, [r3, #802]	; 0x322
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	f203 3362 	addw	r3, r3, #866	; 0x362
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	f502 725e 	add.w	r2, r2, #888	; 0x378
 8004720:	9201      	str	r2, [sp, #4]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	460b      	mov	r3, r1
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	68b8      	ldr	r0, [r7, #8]
 800472c:	f006 fe0b 	bl	800b346 <VL53L1_calc_timeout_register_values>
 8004730:	4603      	mov	r3, r0
 8004732:	75fb      	strb	r3, [r7, #23]
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004734:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800474e:	2300      	movs	r3, #0
 8004750:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3318      	adds	r3, #24
 8004756:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <VL53L1_get_timeouts_us+0x2e>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800476a:	23f1      	movs	r3, #241	; 0xf1
 800476c:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800476e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d14a      	bne.n	800480c <VL53L1_get_timeouts_us+0xcc>


		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8004782:	4619      	mov	r1, r3
 8004784:	4610      	mov	r0, r2
 8004786:	f006 fc56 	bl	800b036 <VL53L1_calc_macro_period_us>
 800478a:	6178      	str	r0, [r7, #20]



		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
			(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
			VL53L1_calc_timeout_us(
 8004792:	6979      	ldr	r1, [r7, #20]
 8004794:	4618      	mov	r0, r3
 8004796:	f006 fd14 	bl	800b1c2 <VL53L1_calc_timeout_us>
 800479a:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	601a      	str	r2, [r3, #0]
			macro_period_us);



		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
		timeout_encoded =
 80047a6:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80047a8:	8a7b      	ldrh	r3, [r7, #18]
 80047aa:	021b      	lsls	r3, r3, #8
 80047ac:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	f893 3379 	ldrb.w	r3, [r3, #889]	; 0x379
 80047b4:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80047b6:	4413      	add	r3, r2
 80047b8:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80047ba:	8a7b      	ldrh	r3, [r7, #18]
 80047bc:	6979      	ldr	r1, [r7, #20]
 80047be:	4618      	mov	r0, r3
 80047c0:	f006 fd66 	bl	800b290 <VL53L1_calc_decoded_timeout_us>
 80047c4:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
				macro_period_us);



		timeout_encoded =
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
		timeout_encoded =
 80047d0:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80047d2:	8a7b      	ldrh	r3, [r7, #18]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	b29a      	uxth	r2, r3
		(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f893 337d 	ldrb.w	r3, [r3, #893]	; 0x37d
 80047de:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 80047e0:	4413      	add	r3, r2
 80047e2:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80047e4:	8a7b      	ldrh	r3, [r7, #18]
 80047e6:	6979      	ldr	r1, [r7, #20]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f006 fd51 	bl	800b290 <VL53L1_calc_decoded_timeout_us>
 80047ee:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800480c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3720      	adds	r7, #32
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	460b      	mov	r3, r1
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004826:	2300      	movs	r3, #0
 8004828:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	3318      	adds	r3, #24
 800482e:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004830:	2301      	movs	r3, #1
 8004832:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004834:	7afb      	ldrb	r3, [r7, #11]
 8004836:	2b07      	cmp	r3, #7
 8004838:	d81c      	bhi.n	8004874 <VL53L1_get_sequence_config_bit+0x5c>

		if (bit_id > 0)
 800483a:	7afb      	ldrb	r3, [r7, #11]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d004      	beq.n	800484a <VL53L1_get_sequence_config_bit+0x32>
			bit_mask  = 0x01 << bit_id;
 8004840:	7afb      	ldrb	r3, [r7, #11]
 8004842:	2201      	movs	r2, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	75bb      	strb	r3, [r7, #22]

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f893 23a1 	ldrb.w	r2, [r3, #929]	; 0x3a1
		*pvalue =
 8004850:	7dbb      	ldrb	r3, [r7, #22]
 8004852:	4013      	ands	r3, r2
 8004854:	b2da      	uxtb	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0)
 800485a:	7afb      	ldrb	r3, [r7, #11]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00b      	beq.n	8004878 <VL53L1_get_sequence_config_bit+0x60>
			*pvalue  = *pvalue >> bit_id;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	7afb      	ldrb	r3, [r7, #11]
 8004868:	fa42 f303 	asr.w	r3, r2, r3
 800486c:	b2da      	uxtb	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e001      	b.n	8004878 <VL53L1_get_sequence_config_bit+0x60>

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004874:	23fc      	movs	r3, #252	; 0xfc
 8004876:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004878:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800487c:	4618      	mov	r0, r3
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004892:	2300      	movs	r3, #0
 8004894:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3318      	adds	r3, #24
 800489a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	VL53L1_encode_row_col(
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	7858      	ldrb	r0, [r3, #1]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	7819      	ldrb	r1, [r3, #0]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f203 339f 	addw	r3, r3, #927	; 0x39f
 80048aa:	461a      	mov	r2, r3
 80048ac:	f007 fdeb 	bl	800c486 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));


	VL53L1_encode_zone_size(
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	7898      	ldrb	r0, [r3, #2]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	78d9      	ldrb	r1, [r3, #3]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80048be:	461a      	mov	r2, r3
 80048c0:	f007 fe20 	bl	800c504 <VL53L1_encode_zone_size>



	LOG_FUNCTION_END(status);

	return status;
 80048c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80048da:	2300      	movs	r3, #0
 80048dc:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3318      	adds	r3, #24
 80048e2:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 80048e4:	2300      	movs	r3, #0
 80048e6:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	VL53L1_decode_row_col(
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80048f6:	f107 020e 	add.w	r2, r7, #14
 80048fa:	f107 010d 	add.w	r1, r7, #13
 80048fe:	4618      	mov	r0, r3
 8004900:	f00a f880 	bl	800ea04 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004904:	7bba      	ldrb	r2, [r7, #14]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800490a:	7b7a      	ldrb	r2, [r7, #13]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	705a      	strb	r2, [r3, #1]


	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004916:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	b2da      	uxtb	r2, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	b2da      	uxtb	r2, r3
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800492e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <VL53L1_set_zone_config>:


VL53L1_Error VL53L1_set_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004944:	2300      	movs	r3, #0
 8004946:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3318      	adds	r3, #24
 800494c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(&(pdev->zone_cfg.user_zones), &(pzone_cfg->user_zones),
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f103 00de 	add.w	r0, r3, #222	; 0xde
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	331c      	adds	r3, #28
 8004958:	2240      	movs	r2, #64	; 0x40
 800495a:	4619      	mov	r1, r3
 800495c:	f014 fbdc 	bl	8019118 <memcpy>
			sizeof(pdev->zone_cfg.user_zones));


	pdev->zone_cfg.max_zones    = pzone_cfg->max_zones;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	pdev->zone_cfg.active_zones = pzone_cfg->active_zones;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	785a      	ldrb	r2, [r3, #1]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3

	status = VL53L1_init_zone_config_histogram_bins(&pdev->zone_cfg);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	33c2      	adds	r3, #194	; 0xc2
 8004978:	4618      	mov	r0, r3
 800497a:	f00f fbce 	bl	801411a <VL53L1_init_zone_config_histogram_bins>
 800497e:	4603      	mov	r3, r0
 8004980:	73fb      	strb	r3, [r7, #15]



	if (pzone_cfg->active_zones == 0)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <VL53L1_set_zone_config+0x5a>
		pdev->gen_cfg.global_config__stream_divider = 0;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 8004992:	e00f      	b.n	80049b4 <VL53L1_set_zone_config+0x7a>
	else if (pzone_cfg->active_zones < VL53L1_MAX_USER_ZONES)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	2b0f      	cmp	r3, #15
 800499a:	d807      	bhi.n	80049ac <VL53L1_set_zone_config+0x72>
		pdev->gen_cfg.global_config__stream_divider =
				pzone_cfg->active_zones + 1;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	785b      	ldrb	r3, [r3, #1]
 80049a0:	3301      	adds	r3, #1
 80049a2:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.global_config__stream_divider =
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
 80049aa:	e003      	b.n	80049b4 <VL53L1_set_zone_config+0x7a>
	else
		pdev->gen_cfg.global_config__stream_divider =
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2211      	movs	r2, #17
 80049b0:	f883 2363 	strb.w	r2, [r3, #867]	; 0x363
				VL53L1_MAX_USER_ZONES + 1;

	LOG_FUNCTION_END(status);

	return status;
 80049b4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <VL53L1_get_zone_config>:


VL53L1_Error VL53L1_get_zone_config(
	VL53L1_DEV                 Dev,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3318      	adds	r3, #24
 80049d2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	memcpy(pzone_cfg, &(pdev->zone_cfg), sizeof(VL53L1_zone_config_t));
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	33c2      	adds	r3, #194	; 0xc2
 80049d8:	226c      	movs	r2, #108	; 0x6c
 80049da:	4619      	mov	r1, r3
 80049dc:	6838      	ldr	r0, [r7, #0]
 80049de:	f014 fb9b 	bl	8019118 <memcpy>

	LOG_FUNCTION_END(status);

	return status;
 80049e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
	...

080049f0 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	607a      	str	r2, [r7, #4]
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	460b      	mov	r3, r1
 80049fe:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004a00:	2300      	movs	r3, #0
 8004a02:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3318      	adds	r3, #24
 8004a08:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004a0a:	7afb      	ldrb	r3, [r7, #11]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	2b26      	cmp	r3, #38	; 0x26
 8004a10:	f200 8139 	bhi.w	8004c86 <VL53L1_get_preset_mode_timing_cfg+0x296>
 8004a14:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <VL53L1_get_preset_mode_timing_cfg+0x2c>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004ab9 	.word	0x08004ab9
 8004a20:	08004ab9 	.word	0x08004ab9
 8004a24:	08004ab9 	.word	0x08004ab9
 8004a28:	08004ab9 	.word	0x08004ab9
 8004a2c:	08004ab9 	.word	0x08004ab9
 8004a30:	08004ae3 	.word	0x08004ae3
 8004a34:	08004ae3 	.word	0x08004ae3
 8004a38:	08004ae3 	.word	0x08004ae3
 8004a3c:	08004c87 	.word	0x08004c87
 8004a40:	08004c87 	.word	0x08004c87
 8004a44:	08004b37 	.word	0x08004b37
 8004a48:	08004bdf 	.word	0x08004bdf
 8004a4c:	08004b37 	.word	0x08004b37
 8004a50:	08004c87 	.word	0x08004c87
 8004a54:	08004c87 	.word	0x08004c87
 8004a58:	08004c87 	.word	0x08004c87
 8004a5c:	08004ab9 	.word	0x08004ab9
 8004a60:	08004ae3 	.word	0x08004ae3
 8004a64:	08004b37 	.word	0x08004b37
 8004a68:	08004b37 	.word	0x08004b37
 8004a6c:	08004b37 	.word	0x08004b37
 8004a70:	08004b37 	.word	0x08004b37
 8004a74:	08004b37 	.word	0x08004b37
 8004a78:	08004b61 	.word	0x08004b61
 8004a7c:	08004b8b 	.word	0x08004b8b
 8004a80:	08004bb5 	.word	0x08004bb5
 8004a84:	08004b37 	.word	0x08004b37
 8004a88:	08004b37 	.word	0x08004b37
 8004a8c:	08004b37 	.word	0x08004b37
 8004a90:	08004c09 	.word	0x08004c09
 8004a94:	08004c09 	.word	0x08004c09
 8004a98:	08004c09 	.word	0x08004c09
 8004a9c:	08004c33 	.word	0x08004c33
 8004aa0:	08004c33 	.word	0x08004c33
 8004aa4:	08004c33 	.word	0x08004c33
 8004aa8:	08004b0d 	.word	0x08004b0d
 8004aac:	08004b0d 	.word	0x08004b0d
 8004ab0:	08004b0d 	.word	0x08004b0d
 8004ab4:	08004c5d 	.word	0x08004c5d
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f8b3 215c 	ldrh.w	r2, [r3, #348]	; 0x15c
		*pdss_config__target_total_rate_mcps =
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
		*pphasecal_config_timeout_us =
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
		*pmm_config_timeout_us =
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lite_us;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
		*prange_config_timeout_us =
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	601a      	str	r2, [r3, #0]
	break;
 8004ae0:	e0d4      	b.n	8004c8c <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_timed_us;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
		*pmm_config_timeout_us =
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_timed_us;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
		*prange_config_timeout_us =
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	601a      	str	r2, [r3, #0]
	break;
 8004b0a:	e0bf      	b.n	8004c8c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f8b3 2162 	ldrh.w	r2, [r3, #354]	; 0x162
		*pdss_config__target_total_rate_mcps =
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
		*pphasecal_config_timeout_us =
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
		*pmm_config_timeout_us =
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_lpa_us;
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
		*prange_config_timeout_us =
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	601a      	str	r2, [r3, #0]
	break;
 8004b34:	e0aa      	b.n	8004c8c <VL53L1_get_preset_mode_timing_cfg+0x29c>
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
		*pphasecal_config_timeout_us =
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	601a      	str	r2, [r3, #0]

	break;
 8004b5e:	e095      	b.n	8004c8c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
		*pphasecal_config_timeout_us =
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	601a      	str	r2, [r3, #0]
	break;
 8004b88:	e080      	b.n	8004c8c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
		*pphasecal_config_timeout_us =
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	601a      	str	r2, [r3, #0]
	break;
 8004bb2:	e06b      	b.n	8004c8c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f8b3 2160 	ldrh.w	r2, [r3, #352]	; 0x160
		*pdss_config__target_total_rate_mcps =
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
		*pphasecal_config_timeout_us =
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_mz_us;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
		*pmm_config_timeout_us =
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_mz_us;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
		*prange_config_timeout_us =
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	601a      	str	r2, [r3, #0]
	break;
 8004bdc:	e056      	b.n	8004c8c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	601a      	str	r2, [r3, #0]
	break;
 8004c06:	e041      	b.n	8004c8c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
		*pphasecal_config_timeout_us =
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	601a      	str	r2, [r3, #0]
	break;
 8004c30:	e02c      	b.n	8004c8c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_histo_mcps;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
		*pdss_config__target_total_rate_mcps =
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_histo_us;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	601a      	str	r2, [r3, #0]
	break;
 8004c5a:	e017      	b.n	8004c8c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		*pdss_config__target_total_rate_mcps =
			pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f8b3 2164 	ldrh.w	r2, [r3, #356]	; 0x164
		*pdss_config__target_total_rate_mcps =
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
			pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
		*pphasecal_config_timeout_us =
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
			pdev->tuning_parms.tp_mm_timeout_histo_us;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
		*pmm_config_timeout_us =
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
			pdev->tuning_parms.tp_range_timeout_histo_us;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
		*prange_config_timeout_us =
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	601a      	str	r2, [r3, #0]
	break;
 8004c84:	e002      	b.n	8004c8c <VL53L1_get_preset_mode_timing_cfg+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004c86:	23fc      	movs	r3, #252	; 0xfc
 8004c88:	75fb      	strb	r3, [r7, #23]
		break;
 8004c8a:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8004c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b098      	sub	sp, #96	; 0x60
 8004ca0:	af06      	add	r7, sp, #24
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	607b      	str	r3, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	72fb      	strb	r3, [r7, #11]
 8004caa:	4613      	mov	r3, r2
 8004cac:	813b      	strh	r3, [r7, #8]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	VL53L1_LLDriverData_t *pdev =
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3318      	adds	r3, #24
 8004cb8:	643b      	str	r3, [r7, #64]	; 0x40
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_hist_post_process_config_t *phistpostprocess =
 8004cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8004cca:	63bb      	str	r3, [r7, #56]	; 0x38
			&(pdev->histpostprocess);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cce:	f203 3342 	addw	r3, r3, #834	; 0x342
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_histogram_config_t     *phistogram    = &(pdev->hist_cfg);
 8004cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd6:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cde:	f203 3362 	addw	r3, r3, #866	; 0x362
 8004ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce6:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8004cea:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cee:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf6:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004cfa:	623b      	str	r3, [r7, #32]
	VL53L1_zone_config_t          *pzone_cfg     = &(pdev->zone_cfg);
 8004cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cfe:	33c2      	adds	r3, #194	; 0xc2
 8004d00:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8004d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d04:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8004d08:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8004d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8004d10:	3318      	adds	r3, #24
 8004d12:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");


	pdev->preset_mode                 = device_preset_mode;
 8004d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d16:	7afa      	ldrb	r2, [r7, #11]
 8004d18:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8004d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004d1e:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8004d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d24:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d2a:	615a      	str	r2, [r3, #20]



	VL53L1_init_ll_driver_state(
 8004d2c:	2103      	movs	r1, #3
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f005 f9c1 	bl	800a0b6 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);



	switch (device_preset_mode) {
 8004d34:	7afb      	ldrb	r3, [r7, #11]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	2b26      	cmp	r3, #38	; 0x26
 8004d3a:	f200 8321 	bhi.w	8005380 <VL53L1_set_preset_mode+0x6e4>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <VL53L1_set_preset_mode+0xa8>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004de1 	.word	0x08004de1
 8004d48:	08004e05 	.word	0x08004e05
 8004d4c:	08004e29 	.word	0x08004e29
 8004d50:	08004e4d 	.word	0x08004e4d
 8004d54:	08004e71 	.word	0x08004e71
 8004d58:	08004e95 	.word	0x08004e95
 8004d5c:	08004eb9 	.word	0x08004eb9
 8004d60:	08004edd 	.word	0x08004edd
 8004d64:	08005381 	.word	0x08005381
 8004d68:	08005381 	.word	0x08005381
 8004d6c:	08004f01 	.word	0x08004f01
 8004d70:	08005069 	.word	0x08005069
 8004d74:	080051f9 	.word	0x080051f9
 8004d78:	08005221 	.word	0x08005221
 8004d7c:	08005249 	.word	0x08005249
 8004d80:	08005271 	.word	0x08005271
 8004d84:	08005299 	.word	0x08005299
 8004d88:	080052bd 	.word	0x080052bd
 8004d8c:	08005041 	.word	0x08005041
 8004d90:	08004f29 	.word	0x08004f29
 8004d94:	08004f51 	.word	0x08004f51
 8004d98:	08004f79 	.word	0x08004f79
 8004d9c:	08004fa1 	.word	0x08004fa1
 8004da0:	08004fc9 	.word	0x08004fc9
 8004da4:	08004ff1 	.word	0x08004ff1
 8004da8:	08005019 	.word	0x08005019
 8004dac:	08005091 	.word	0x08005091
 8004db0:	080050b9 	.word	0x080050b9
 8004db4:	080050e1 	.word	0x080050e1
 8004db8:	08005109 	.word	0x08005109
 8004dbc:	08005131 	.word	0x08005131
 8004dc0:	08005159 	.word	0x08005159
 8004dc4:	08005181 	.word	0x08005181
 8004dc8:	080051a9 	.word	0x080051a9
 8004dcc:	080051d1 	.word	0x080051d1
 8004dd0:	080052e1 	.word	0x080052e1
 8004dd4:	08005309 	.word	0x08005309
 8004dd8:	08005331 	.word	0x08005331
 8004ddc:	08005359 	.word	0x08005359

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	9303      	str	r3, [sp, #12]
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	9302      	str	r3, [sp, #8]
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004df6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004df8:	f003 fbc6 	bl	8008588 <VL53L1_preset_mode_standard_ranging>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e02:	e2c1      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	9303      	str	r3, [sp, #12]
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	9302      	str	r3, [sp, #8]
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e1c:	f003 fd2d 	bl	800887a <VL53L1_preset_mode_standard_ranging_short_range>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e26:	e2af      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	9303      	str	r3, [sp, #12]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	9302      	str	r3, [sp, #8]
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	9301      	str	r3, [sp, #4]
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e40:	f003 fd60 	bl	8008904 <VL53L1_preset_mode_standard_ranging_long_range>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e4a:	e29d      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	9303      	str	r3, [sp, #12]
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	9302      	str	r3, [sp, #8]
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e64:	f003 fd93 	bl	800898e <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e6e:	e28b      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	9303      	str	r3, [sp, #12]
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	9302      	str	r3, [sp, #8]
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004e88:	f003 fdaa 	bl	80089e0 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004e92:	e279      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	9303      	str	r3, [sp, #12]
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	9302      	str	r3, [sp, #8]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eaa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004eac:	f003 fdc1 	bl	8008a32 <VL53L1_preset_mode_timed_ranging>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004eb6:	e267      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	9303      	str	r3, [sp, #12]
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	9302      	str	r3, [sp, #8]
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	9301      	str	r3, [sp, #4]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ecc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ece:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ed0:	f003 fded 	bl	8008aae <VL53L1_preset_mode_timed_ranging_short_range>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004eda:	e255      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	9303      	str	r3, [sp, #12]
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	9302      	str	r3, [sp, #8]
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ef2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ef4:	f003 fe19 	bl	8008b2a <VL53L1_preset_mode_timed_ranging_long_range>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004efe:	e243      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING:
		status = VL53L1_preset_mode_histogram_ranging(
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	9304      	str	r3, [sp, #16]
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	9303      	str	r3, [sp, #12]
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	9302      	str	r3, [sp, #8]
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f1c:	f003 fefb 	bl	8008d16 <VL53L1_preset_mode_histogram_ranging>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004f26:	e22f      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM1:
		status = VL53L1_preset_mode_histogram_ranging_with_mm1(
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	9304      	str	r3, [sp, #16]
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	9303      	str	r3, [sp, #12]
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	9302      	str	r3, [sp, #8]
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	9301      	str	r3, [sp, #4]
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f44:	f003 ff7c 	bl	8008e40 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004f4e:	e21b      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_WITH_MM2:
		status = VL53L1_preset_mode_histogram_ranging_with_mm2(
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	9304      	str	r3, [sp, #16]
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	9303      	str	r3, [sp, #12]
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	9302      	str	r3, [sp, #8]
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f6c:	f003 ffcc 	bl	8008f08 <VL53L1_preset_mode_histogram_ranging_with_mm2>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004f76:	e207      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	9304      	str	r3, [sp, #16]
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	9303      	str	r3, [sp, #12]
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	9302      	str	r3, [sp, #8]
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f94:	f003 ffe0 	bl	8008f58 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004f9e:	e1f3      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_histogram_ranging_mm2_cal(
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	9304      	str	r3, [sp, #16]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	9303      	str	r3, [sp, #12]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fbc:	f004 f830 	bl	8009020 <VL53L1_preset_mode_histogram_ranging_mm2_cal>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004fc6:	e1df      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE:
		status = VL53L1_preset_mode_histogram_multizone(
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	9304      	str	r3, [sp, #16]
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	6a3b      	ldr	r3, [r7, #32]
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fe2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fe4:	f004 fe25 	bl	8009c32 <VL53L1_preset_mode_histogram_multizone>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8004fee:	e1cb      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_short_range(
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	9304      	str	r3, [sp, #16]
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	9303      	str	r3, [sp, #12]
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	9302      	str	r3, [sp, #8]
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005008:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800500a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800500c:	f004 fe63 	bl	8009cd6 <VL53L1_preset_mode_histogram_multizone_short_range>
 8005010:	4603      	mov	r3, r0
 8005012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005016:	e1b7      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MULTIZONE_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_multizone_long_range(
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	9304      	str	r3, [sp, #16]
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	9303      	str	r3, [sp, #12]
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	9302      	str	r3, [sp, #8]
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005030:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005032:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005034:	f004 fea1 	bl	8009d7a <VL53L1_preset_mode_histogram_multizone_long_range>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800503e:	e1a3      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_REF_ARRAY:
		status = VL53L1_preset_mode_histogram_ranging_ref(
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	9304      	str	r3, [sp, #16]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	9303      	str	r3, [sp, #12]
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	9302      	str	r3, [sp, #8]
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	9301      	str	r3, [sp, #4]
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005058:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800505a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800505c:	f004 ffde 	bl	800a01c <VL53L1_preset_mode_histogram_ranging_ref>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005066:	e18f      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_RANGING_SHORT_TIMING:
		status = VL53L1_preset_mode_histogram_ranging_short_timing(
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	9304      	str	r3, [sp, #16]
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	9303      	str	r3, [sp, #12]
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	9302      	str	r3, [sp, #8]
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005080:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005082:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005084:	f003 fff4 	bl	8009070 <VL53L1_preset_mode_histogram_ranging_short_timing>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800508e:	e17b      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE:
		status = VL53L1_preset_mode_histogram_long_range(
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	9304      	str	r3, [sp, #16]
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	9303      	str	r3, [sp, #12]
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	9302      	str	r3, [sp, #8]
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050ac:	f004 f86c 	bl	8009188 <VL53L1_preset_mode_histogram_long_range>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80050b6:	e167      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_long_range_mm1(
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	9304      	str	r3, [sp, #16]
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	9303      	str	r3, [sp, #12]
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	9302      	str	r3, [sp, #8]
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050d2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050d4:	f004 f8f6 	bl	80092c4 <VL53L1_preset_mode_histogram_long_range_mm1>
 80050d8:	4603      	mov	r3, r0
 80050da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80050de:	e153      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_LONG_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_long_range_mm2(
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	9304      	str	r3, [sp, #16]
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	9303      	str	r3, [sp, #12]
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	9302      	str	r3, [sp, #8]
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	9301      	str	r3, [sp, #4]
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80050fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050fc:	f004 f943 	bl	8009386 <VL53L1_preset_mode_histogram_long_range_mm2>
 8005100:	4603      	mov	r3, r0
 8005102:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005106:	e13f      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE:
		status = VL53L1_preset_mode_histogram_medium_range(
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	9304      	str	r3, [sp, #16]
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	9303      	str	r3, [sp, #12]
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	9302      	str	r3, [sp, #8]
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005120:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005122:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005124:	f004 f957 	bl	80093d6 <VL53L1_preset_mode_histogram_medium_range>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800512e:	e12b      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_medium_range_mm1(
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	9304      	str	r3, [sp, #16]
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	9303      	str	r3, [sp, #12]
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	9302      	str	r3, [sp, #8]
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005148:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800514a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800514c:	f004 f9e1 	bl	8009512 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005156:	e117      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_MEDIUM_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_medium_range_mm2(
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	9304      	str	r3, [sp, #16]
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	9303      	str	r3, [sp, #12]
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	9302      	str	r3, [sp, #8]
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005170:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005172:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005174:	f004 fa2e 	bl	80095d4 <VL53L1_preset_mode_histogram_medium_range_mm2>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800517e:	e103      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_histogram_short_range(
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	9304      	str	r3, [sp, #16]
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	9303      	str	r3, [sp, #12]
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	9302      	str	r3, [sp, #8]
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005198:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800519a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800519c:	f004 fa42 	bl	8009624 <VL53L1_preset_mode_histogram_short_range>
 80051a0:	4603      	mov	r3, r0
 80051a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051a6:	e0ef      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM1:
		status = VL53L1_preset_mode_histogram_short_range_mm1(
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	9303      	str	r3, [sp, #12]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	9302      	str	r3, [sp, #8]
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051c4:	f004 fb4c 	bl	8009860 <VL53L1_preset_mode_histogram_short_range_mm1>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051ce:	e0db      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_SHORT_RANGE_MM2:
		status = VL53L1_preset_mode_histogram_short_range_mm2(
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	9304      	str	r3, [sp, #16]
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	9303      	str	r3, [sp, #12]
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051ec:	f004 fb99 	bl	8009922 <VL53L1_preset_mode_histogram_short_range_mm2>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80051f6:	e0c7      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_CHARACTERISATION:
		status = VL53L1_preset_mode_histogram_characterisation(
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	9304      	str	r3, [sp, #16]
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	9303      	str	r3, [sp, #12]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	9302      	str	r3, [sp, #8]
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005210:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005212:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005214:	f004 fbad 	bl	8009972 <VL53L1_preset_mode_histogram_characterisation>
 8005218:	4603      	mov	r3, r0
 800521a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800521e:	e0b3      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_PLANAR:
		status = VL53L1_preset_mode_histogram_xtalk_planar(
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	9303      	str	r3, [sp, #12]
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	9302      	str	r3, [sp, #8]
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005238:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800523a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800523c:	f004 fbca 	bl	80099d4 <VL53L1_preset_mode_histogram_xtalk_planar>
 8005240:	4603      	mov	r3, r0
 8005242:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005246:	e09f      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM1:
		status = VL53L1_preset_mode_histogram_xtalk_mm1(
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	9304      	str	r3, [sp, #16]
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	9303      	str	r3, [sp, #12]
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	9302      	str	r3, [sp, #8]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005260:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005262:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005264:	f004 fc2d 	bl	8009ac2 <VL53L1_preset_mode_histogram_xtalk_mm1>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 800526e:	e08b      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_HISTOGRAM_XTALK_MM2:
		status = VL53L1_preset_mode_histogram_xtalk_mm2(
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	9304      	str	r3, [sp, #16]
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	9303      	str	r3, [sp, #12]
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	9302      	str	r3, [sp, #8]
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005288:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800528a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800528c:	f004 fcad 	bl	8009bea <VL53L1_preset_mode_histogram_xtalk_mm2>
 8005290:	4603      	mov	r3, r0
 8005292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 8005296:	e077      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	9303      	str	r3, [sp, #12]
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	9302      	str	r3, [sp, #8]
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	9301      	str	r3, [sp, #4]
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052b0:	f004 fdb5 	bl	8009e1e <VL53L1_preset_mode_olt>
 80052b4:	4603      	mov	r3, r0
 80052b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80052ba:	e065      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	9303      	str	r3, [sp, #12]
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	9302      	str	r3, [sp, #8]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052d4:	f003 fce5 	bl	8008ca2 <VL53L1_preset_mode_singleshot_ranging>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
		break;
 80052de:	e053      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	9303      	str	r3, [sp, #12]
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	9302      	str	r3, [sp, #8]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052fc:	f003 fc7d 	bl	8008bfa <VL53L1_preset_mode_low_power_auto_short_ranging>
 8005300:	4603      	mov	r3, r0
 8005302:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8005306:	e03f      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	9304      	str	r3, [sp, #16]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	9303      	str	r3, [sp, #12]
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	9302      	str	r3, [sp, #8]
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005320:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005322:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005324:	f003 fc3f 	bl	8008ba6 <VL53L1_preset_mode_low_power_auto_ranging>
 8005328:	4603      	mov	r3, r0
 800532a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 800532e:	e02b      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	9304      	str	r3, [sp, #16]
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	9303      	str	r3, [sp, #12]
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	9302      	str	r3, [sp, #8]
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	9301      	str	r3, [sp, #4]
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005348:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800534a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800534c:	f003 fc7f 	bl	8008c4e <VL53L1_preset_mode_low_power_auto_long_ranging>
 8005350:	4603      	mov	r3, r0
 8005352:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg,
					plpadata);
		break;
 8005356:	e017      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>


	case VL53L1_DEVICEPRESETMODE_SPECIAL_HISTOGRAM_SHORT_RANGE:
		status = VL53L1_preset_mode_special_histogram_short_range(
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	9304      	str	r3, [sp, #16]
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	9303      	str	r3, [sp, #12]
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	9302      	str	r3, [sp, #8]
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005370:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005372:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005374:	f004 f9f4 	bl	8009760 <VL53L1_preset_mode_special_histogram_short_range>
 8005378:	4603      	mov	r3, r0
 800537a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					pzone_cfg);
	break;
 800537e:	e003      	b.n	8005388 <VL53L1_set_preset_mode+0x6ec>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005380:	23fc      	movs	r3, #252	; 0xfc
 8005382:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		break;
 8005386:	bf00      	nop

	}



	if (status == VL53L1_ERROR_NONE) {
 8005388:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800538c:	2b00      	cmp	r3, #0
 800538e:	d105      	bne.n	800539c <VL53L1_set_preset_mode+0x700>

		pstatic->dss_config__target_total_rate_mcps =
 8005390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005392:	893a      	ldrh	r2, [r7, #8]
 8005394:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8005396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005398:	893a      	ldrh	r2, [r7, #8]
 800539a:	831a      	strh	r2, [r3, #24]

	}



	if (status == VL53L1_ERROR_NONE)
 800539c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d108      	bne.n	80053b6 <VL53L1_set_preset_mode+0x71a>
		status =
			VL53L1_set_timeouts_us(
 80053a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f7ff f98f 	bl	80046ce <VL53L1_set_timeouts_us>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 80053b6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <VL53L1_set_preset_mode+0x730>
		status =
			VL53L1_set_inter_measurement_period_ms(
 80053be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff f92b 	bl	800461c <VL53L1_set_inter_measurement_period_ms>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				inter_measurement_period_ms);



	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 80053cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ce:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 80053d2:	3301      	adds	r3, #1
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d8:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f005 fa82 	bl	800a8e8 <V53L1_init_zone_results_structure>
			&(pres->zone_results));

	LOG_FUNCTION_END(status);

	return status;
 80053e4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3748      	adds	r7, #72	; 0x48
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3318      	adds	r3, #24
 8005402:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f8b3 2382 	ldrh.w	r2, [r3, #898]	; 0x382
	*plite_sigma =
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800540e:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	460b      	mov	r3, r1
 8005428:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800542a:	2300      	movs	r3, #0
 800542c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3318      	adds	r3, #24
 8005432:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	887a      	ldrh	r2, [r7, #2]
 8005438:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382

	LOG_FUNCTION_END(status);

	return status;
 800543c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005456:	2300      	movs	r3, #0
 8005458:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	3318      	adds	r3, #24
 800545e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
		pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f8b3 2384 	ldrh.w	r2, [r3, #900]	; 0x384
	*plite_mincountrate =
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800546a:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	460b      	mov	r3, r1
 8005484:	807b      	strh	r3, [r7, #2]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3318      	adds	r3, #24
 800548e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	887a      	ldrh	r2, [r7, #2]
 8005494:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8005498:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b0d2      	sub	sp, #328	; 0x148
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80054b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80054b6:	6018      	str	r0, [r3, #0]
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80054c0:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 80054c4:	4602      	mov	r2, r0
 80054c6:	701a      	strb	r2, [r3, #0]
 80054c8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80054cc:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80054d0:	460a      	mov	r2, r1
 80054d2:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80054da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80054de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3318      	adds	r3, #24
 80054e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	VL53L1_LLDriverResults_t  *pres =
 80054ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80054ee:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80054f8:	3308      	adds	r3, #8
 80054fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLResultsHandle(Dev);

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80054fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005502:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8005506:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800550a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800550e:	3348      	adds	r3, #72	; 0x48
 8005510:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8005514:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005518:	f203 3342 	addw	r3, r3, #834	; 0x342
 800551c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005520:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005524:	f203 3362 	addw	r3, r3, #866	; 0x362
 8005528:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800552c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005530:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8005534:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005538:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800553c:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8005540:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005544:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005548:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 800554c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8005550:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005554:	332c      	adds	r3, #44	; 0x2c
 8005556:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 800555a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800555e:	3348      	adds	r3, #72	; 0x48
 8005560:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8005564:	f107 030c 	add.w	r3, r7, #12
 8005568:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint16_t i                          = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t i2c_index                  = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");


	pdev->measurement_mode = measurement_mode;
 8005584:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005588:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800558c:	f2a2 1245 	subw	r2, r2, #325	; 0x145
 8005590:	7812      	ldrb	r2, [r2, #0]
 8005592:	70da      	strb	r2, [r3, #3]



	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005594:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005598:	791b      	ldrb	r3, [r3, #4]
 800559a:	b25b      	sxtb	r3, r3
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80055a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80055a6:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 80055aa:	f993 3000 	ldrsb.w	r3, [r3]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	b25b      	sxtb	r3, r3
 80055b2:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 80055b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80055b8:	711a      	strb	r2, [r3, #4]


	status =
		VL53L1_set_user_zone(
		Dev,
		&(pdev->zone_cfg.user_zones[pdev->ll_state.cfg_zone_id]));
 80055ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
		VL53L1_set_user_zone(
 80055c2:	3336      	adds	r3, #54	; 0x36
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80055ca:	4413      	add	r3, r2
 80055cc:	1d9a      	adds	r2, r3, #6
 80055ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80055d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80055d6:	4611      	mov	r1, r2
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	f7ff f955 	bl	8004888 <VL53L1_set_user_zone>
 80055de:	4603      	mov	r3, r0
 80055e0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147


	if (pdev->zone_cfg.active_zones > 0) {
 80055e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055e8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d019      	beq.n	8005624 <VL53L1_init_and_start_range+0x17c>
		status =
		VL53L1_set_zone_dss_config(
		Dev,
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id])
 80055f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80055f8:	461a      	mov	r2, r3
		VL53L1_set_zone_dss_config(
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005606:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800560a:	4413      	add	r3, r2
 800560c:	1c9a      	adds	r2, r3, #2
 800560e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005612:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005616:	4611      	mov	r1, r2
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	f001 fbd7 	bl	8006dcc <VL53L1_set_zone_dss_config>
 800561e:	4603      	mov	r3, r0
 8005620:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}




	if (((pdev->sys_ctrl.system__mode_start &
 8005624:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005628:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10d      	bne.n	8005650 <VL53L1_init_and_start_range+0x1a8>
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
		(pdev->xtalk_cfg.global_crosstalk_compensation_enable
 8005634:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005638:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) == 0x00) &&
 800563c:	2b01      	cmp	r3, #1
 800563e:	d107      	bne.n	8005650 <VL53L1_init_and_start_range+0x1a8>
				== 0x01)) {
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005640:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005644:	f8b3 22e8 	ldrh.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8005648:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800564c:	f8a3 235a 	strh.w	r2, [r3, #858]	; 0x35a





	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF)
 8005650:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005658:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 800565c:	2bff      	cmp	r3, #255	; 0xff
 800565e:	d106      	bne.n	800566e <VL53L1_init_and_start_range+0x1c6>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005660:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005668:	2200      	movs	r2, #0
 800566a:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a


	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800566e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005676:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 800567a:	2b01      	cmp	r3, #1
 800567c:	d139      	bne.n	80056f2 <VL53L1_init_and_start_range+0x24a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800567e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005686:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800568a:	2b00      	cmp	r3, #0
 800568c:	d131      	bne.n	80056f2 <VL53L1_init_and_start_range+0x24a>

		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800568e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005692:	f893 2364 	ldrb.w	r2, [r3, #868]	; 0x364
		pdev->low_power_auto_data.saved_interrupt_config =
 8005696:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800569a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800569e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b

		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80056a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056a6:	2220      	movs	r2, #32
 80056a8:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364

		if ((pdev->dyn_cfg.system__sequence_config & (
 80056ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056b0:	f893 33a1 	ldrb.w	r3, [r3, #929]	; 0x3a1
 80056b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d109      	bne.n	80056d0 <VL53L1_init_and_start_range+0x228>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pN->algo__part_to_part_range_offset_mm =
			(pN->mm_config__outer_offset_mm << 2);
 80056bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056c0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80056c4:	009b      	lsls	r3, r3, #2
			pN->algo__part_to_part_range_offset_mm =
 80056c6:	b21a      	sxth	r2, r3
 80056c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056cc:	825a      	strh	r2, [r3, #18]
 80056ce:	e003      	b.n	80056d8 <VL53L1_init_and_start_range+0x230>
		} else {
			pN->algo__part_to_part_range_offset_mm = 0x0;
 80056d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80056d4:	2200      	movs	r2, #0
 80056d6:	825a      	strh	r2, [r3, #18]
		}


		if (device_config_level <
 80056d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80056dc:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d805      	bhi.n	80056f2 <VL53L1_init_and_start_range+0x24a>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80056e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80056ea:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80056ee:	2205      	movs	r2, #5
 80056f0:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80056f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80056f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056fa:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d117      	bne.n	8005732 <VL53L1_init_and_start_range+0x28a>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005702:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800570a:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800570e:	2b01      	cmp	r3, #1
 8005710:	d10f      	bne.n	8005732 <VL53L1_init_and_start_range+0x28a>

		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005712:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800571a:	f893 243b 	ldrb.w	r2, [r3, #1083]	; 0x43b
		pdev->gen_cfg.system__interrupt_config_gpio =
 800571e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005722:	f883 2364 	strb.w	r2, [r3, #868]	; 0x364


		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005726:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800572a:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800572e:	2206      	movs	r2, #6
 8005730:	701a      	strb	r2, [r3, #0]





	if (status == VL53L1_ERROR_NONE)
 8005732:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005736:	2b00      	cmp	r3, #0
 8005738:	d109      	bne.n	800574e <VL53L1_init_and_start_range+0x2a6>
		status = VL53L1_save_cfg_data(Dev);
 800573a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800573e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005742:	6818      	ldr	r0, [r3, #0]
 8005744:	f007 f98c 	bl	800ca60 <VL53L1_save_cfg_data>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147



	switch (device_config_level) {
 800574e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005752:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	3b01      	subs	r3, #1
 800575a:	2b05      	cmp	r3, #5
 800575c:	d826      	bhi.n	80057ac <VL53L1_init_and_start_range+0x304>
 800575e:	a201      	add	r2, pc, #4	; (adr r2, 8005764 <VL53L1_init_and_start_range+0x2bc>)
 8005760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005764:	080057a5 	.word	0x080057a5
 8005768:	0800579d 	.word	0x0800579d
 800576c:	08005795 	.word	0x08005795
 8005770:	0800578d 	.word	0x0800578d
 8005774:	08005785 	.word	0x08005785
 8005778:	0800577d 	.word	0x0800577d
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800577c:	2301      	movs	r3, #1
 800577e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005782:	e017      	b.n	80057b4 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005784:	230d      	movs	r3, #13
 8005786:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800578a:	e013      	b.n	80057b4 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800578c:	2324      	movs	r3, #36	; 0x24
 800578e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 8005792:	e00f      	b.n	80057b4 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005794:	2344      	movs	r3, #68	; 0x44
 8005796:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 800579a:	e00b      	b.n	80057b4 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800579c:	235a      	movs	r3, #90	; 0x5a
 800579e:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80057a2:	e007      	b.n	80057b4 <VL53L1_init_and_start_range+0x30c>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 80057a4:	2371      	movs	r3, #113	; 0x71
 80057a6:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80057aa:	e003      	b.n	80057b4 <VL53L1_init_and_start_range+0x30c>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 80057ac:	2383      	movs	r3, #131	; 0x83
 80057ae:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		break;
 80057b2:	bf00      	nop
	}



	i2c_buffer_size_bytes =
 80057b4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80057b8:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 80057bc:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			i2c_index;



	pbuffer = &buffer[0];
 80057c0:	f107 030c 	add.w	r3, r7, #12
 80057c4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80057c8:	2300      	movs	r3, #0
 80057ca:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80057ce:	e00b      	b.n	80057e8 <VL53L1_init_and_start_range+0x340>
		*pbuffer++ = 0;
 80057d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80057da:	2200      	movs	r2, #0
 80057dc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < i2c_buffer_size_bytes; i++)
 80057de:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 80057e2:	3301      	adds	r3, #1
 80057e4:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 80057e8:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 80057ec:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d3ed      	bcc.n	80057d0 <VL53L1_init_and_start_range+0x328>



	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80057f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80057f8:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b05      	cmp	r3, #5
 8005800:	d917      	bls.n	8005832 <VL53L1_init_and_start_range+0x38a>
 8005802:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005806:	2b00      	cmp	r3, #0
 8005808:	d113      	bne.n	8005832 <VL53L1_init_and_start_range+0x38a>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800580a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800580e:	f1c3 0301 	rsb	r3, r3, #1
 8005812:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005816:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800581a:	f107 020c 	add.w	r2, r7, #12
 800581e:	4413      	add	r3, r2
 8005820:	461a      	mov	r2, r3
 8005822:	210b      	movs	r1, #11
 8005824:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8005828:	f00c fb0d 	bl	8011e46 <VL53L1_i2c_encode_static_nvm_managed>
 800582c:	4603      	mov	r3, r0
 800582e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005832:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005836:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b04      	cmp	r3, #4
 800583e:	d917      	bls.n	8005870 <VL53L1_init_and_start_range+0x3c8>
 8005840:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005844:	2b00      	cmp	r3, #0
 8005846:	d113      	bne.n	8005870 <VL53L1_init_and_start_range+0x3c8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005848:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800584c:	f1c3 030d 	rsb	r3, r3, #13
 8005850:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005854:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8005858:	f107 020c 	add.w	r2, r7, #12
 800585c:	4413      	add	r3, r2
 800585e:	461a      	mov	r2, r3
 8005860:	2117      	movs	r1, #23
 8005862:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8005866:	f00c fbca 	bl	8011ffe <VL53L1_i2c_encode_customer_nvm_managed>
 800586a:	4603      	mov	r3, r0
 800586c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005870:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005874:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b03      	cmp	r3, #3
 800587c:	d917      	bls.n	80058ae <VL53L1_init_and_start_range+0x406>
 800587e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005882:	2b00      	cmp	r3, #0
 8005884:	d113      	bne.n	80058ae <VL53L1_init_and_start_range+0x406>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005886:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800588a:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800588e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005892:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8005896:	f107 020c 	add.w	r2, r7, #12
 800589a:	4413      	add	r3, r2
 800589c:	461a      	mov	r2, r3
 800589e:	2120      	movs	r1, #32
 80058a0:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80058a4:	f00c fce9 	bl	801227a <VL53L1_i2c_encode_static_config>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80058ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80058b2:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d917      	bls.n	80058ec <VL53L1_init_and_start_range+0x444>
 80058bc:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d113      	bne.n	80058ec <VL53L1_init_and_start_range+0x444>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80058c4:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80058c8:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 80058cc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80058d0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 80058d4:	f107 020c 	add.w	r2, r7, #12
 80058d8:	4413      	add	r3, r2
 80058da:	461a      	mov	r2, r3
 80058dc:	2116      	movs	r1, #22
 80058de:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80058e2:	f00c fdad 	bl	8012440 <VL53L1_i2c_encode_general_config>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80058ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80058f0:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d917      	bls.n	800592a <VL53L1_init_and_start_range+0x482>
 80058fa:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d113      	bne.n	800592a <VL53L1_init_and_start_range+0x482>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005902:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005906:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800590a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800590e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8005912:	f107 020c 	add.w	r2, r7, #12
 8005916:	4413      	add	r3, r2
 8005918:	461a      	mov	r2, r3
 800591a:	2117      	movs	r1, #23
 800591c:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005920:	f00c fe12 	bl	8012548 <VL53L1_i2c_encode_timing_config>
 8005924:	4603      	mov	r3, r0
 8005926:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800592a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800592e:	f5a3 73a3 	sub.w	r3, r3, #326	; 0x146
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d036      	beq.n	80059a6 <VL53L1_init_and_start_range+0x4fe>
 8005938:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800593c:	2b00      	cmp	r3, #0
 800593e:	d132      	bne.n	80059a6 <VL53L1_init_and_start_range+0x4fe>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005940:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 8005944:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005948:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;


		if ((psystem->system__mode_start &
 800594c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005950:	791b      	ldrb	r3, [r3, #4]
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d017      	beq.n	800598a <VL53L1_init_and_start_range+0x4e2>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 =
					pstate->cfg_gph_id | 0x01;
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800595e:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_0 =
 8005960:	f043 0301 	orr.w	r3, r3, #1
 8005964:	b2da      	uxtb	r2, r3
 8005966:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800596a:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 =
					pstate->cfg_gph_id | 0x01;
 800596c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005970:	791b      	ldrb	r3, [r3, #4]
			pdynamic->system__grouped_parameter_hold_1 =
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	b2da      	uxtb	r2, r3
 8005978:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800597c:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   =
					pstate->cfg_gph_id;
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005982:	791a      	ldrb	r2, [r3, #4]
			pdynamic->system__grouped_parameter_hold   =
 8005984:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005988:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800598a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800598e:	f107 020c 	add.w	r2, r7, #12
 8005992:	4413      	add	r3, r2
 8005994:	461a      	mov	r2, r3
 8005996:	2112      	movs	r1, #18
 8005998:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800599c:	f00c fe56 	bl	801264c <VL53L1_i2c_encode_dynamic_config>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}

	if (status == VL53L1_ERROR_NONE) {
 80059a6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d113      	bne.n	80059d6 <VL53L1_init_and_start_range+0x52e>

		i2c_buffer_offset_bytes =
 80059ae:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 80059b2:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 80059b6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80059ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 80059be:	f107 020c 	add.w	r2, r7, #12
 80059c2:	4413      	add	r3, r2
 80059c4:	461a      	mov	r2, r3
 80059c6:	2105      	movs	r1, #5
 80059c8:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80059cc:	f00c fec3 	bl	8012756 <VL53L1_i2c_encode_system_control>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	}



	if (status == VL53L1_ERROR_NONE) {
 80059d6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10f      	bne.n	80059fe <VL53L1_init_and_start_range+0x556>
		status =
			VL53L1_WriteMulti(
 80059de:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80059e2:	f107 020c 	add.w	r2, r7, #12
 80059e6:	f8b7 113c 	ldrh.w	r1, [r7, #316]	; 0x13c
 80059ea:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 80059ee:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
 80059f2:	6800      	ldr	r0, [r0, #0]
 80059f4:	f00e fbd6 	bl	80141a4 <VL53L1_WriteMulti>
 80059f8:	4603      	mov	r3, r0
 80059fa:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				buffer,
				(uint32_t)i2c_buffer_size_bytes);
	}


	if (status == VL53L1_ERROR_NONE)
 80059fe:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <VL53L1_init_and_start_range+0x572>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8005a06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	f004 fb82 	bl	800a118 <VL53L1_update_ll_driver_rd_state>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	if (status == VL53L1_ERROR_NONE)
 8005a1a:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d109      	bne.n	8005a36 <VL53L1_init_and_start_range+0x58e>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8005a22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005a26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a2a:	6818      	ldr	r0, [r3, #0]
 8005a2c:	f004 fd15 	bl	800a45a <VL53L1_update_ll_driver_cfg_state>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	LOG_FUNCTION_END(status);

	return status;
 8005a36:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev =
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3318      	adds	r3, #24
 8005a54:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	60fb      	str	r3, [r7, #12]
			VL53L1DevStructGetLLResultsHandle(Dev);



	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005a66:	b25b      	sxtb	r3, r3
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	b25b      	sxtb	r3, r3
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005a6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a72:	b25b      	sxtb	r3, r3
 8005a74:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f00c fea1 	bl	80127cc <VL53L1_set_system_control>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	75fb      	strb	r3, [r7, #23]
				Dev,
				&pdev->sys_ctrl);


	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start &
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f883 23a8 	strb.w	r2, [r3, #936]	; 0x3a8
				VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);


	VL53L1_init_ll_driver_state(
 8005aa0:	2103      	movs	r1, #3
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f004 fb07 	bl	800a0b6 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);


	V53L1_init_zone_results_structure(
			pdev->zone_cfg.active_zones+1,
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
	V53L1_init_zone_results_structure(
 8005aae:	3301      	adds	r3, #1
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f004 ff14 	bl	800a8e8 <V53L1_init_zone_results_structure>
			&(pres->zone_results));


	V53L1_init_zone_dss_configs(Dev);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f004 ff46 	bl	800a952 <V53L1_init_zone_dss_configs>


	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005acc:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d102      	bne.n	8005ada <VL53L1_stop_range+0x96>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f008 f9b4 	bl	800de42 <VL53L1_low_power_auto_data_stop_range>

	return status;
 8005ada:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b0c8      	sub	sp, #288	; 0x120
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005af0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005af4:	6018      	str	r0, [r3, #0]
 8005af6:	460a      	mov	r2, r1
 8005af8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005afc:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005b00:	701a      	strb	r2, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005b08:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005b0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3318      	adds	r3, #24
 8005b14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8005b18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b1c:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8005b20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8005b24:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b28:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 8005b2c:	331c      	adds	r3, #28
 8005b2e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8005b32:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b36:	f503 539d 	add.w	r3, r3, #5024	; 0x13a0
 8005b3a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8005b3e:	2388      	movs	r3, #136	; 0x88
 8005b40:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");



	switch (device_results_level) {
 8005b50:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005b54:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d008      	beq.n	8005b70 <VL53L1_get_measurement_results+0x8a>
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d10d      	bne.n	8005b7e <VL53L1_get_measurement_results+0x98>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8005b62:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005b66:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8005b6a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005b6e:	e00a      	b.n	8005b86 <VL53L1_get_measurement_results+0xa0>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8005b70:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005b74:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8005b78:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005b7c:	e003      	b.n	8005b86 <VL53L1_get_measurement_results+0xa0>
	default:
		i2c_buffer_size_bytes =
 8005b7e:	232c      	movs	r3, #44	; 0x2c
 8005b80:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8005b84:	bf00      	nop
	}



	if (status == VL53L1_ERROR_NONE)
 8005b86:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <VL53L1_get_measurement_results+0xc8>
		status =
			VL53L1_ReadMulti(
 8005b8e:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8005b92:	f107 0208 	add.w	r2, r7, #8
 8005b96:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8005b9a:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8005b9e:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8005ba2:	6800      	ldr	r0, [r0, #0]
 8005ba4:	f00e fb34 	bl	8014210 <VL53L1_ReadMulti>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);



	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8005bae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005bb2:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d917      	bls.n	8005bec <VL53L1_get_measurement_results+0x106>
 8005bbc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d113      	bne.n	8005bec <VL53L1_get_measurement_results+0x106>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005bc4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005bc8:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8005bcc:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005bd0:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 8005bd4:	f107 0208 	add.w	r2, r7, #8
 8005bd8:	4413      	add	r3, r2
 8005bda:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8005bde:	4619      	mov	r1, r3
 8005be0:	2038      	movs	r0, #56	; 0x38
 8005be2:	f00c ff71 	bl	8012ac8 <VL53L1_i2c_decode_debug_results>
 8005be6:	4603      	mov	r3, r0
 8005be8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8005bec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005bf0:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d017      	beq.n	8005c2a <VL53L1_get_measurement_results+0x144>
 8005bfa:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d113      	bne.n	8005c2a <VL53L1_get_measurement_results+0x144>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005c02:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005c06:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8005c0a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005c0e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8005c12:	f107 0208 	add.w	r2, r7, #8
 8005c16:	4413      	add	r3, r2
 8005c18:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	2021      	movs	r0, #33	; 0x21
 8005c20:	f00c fef1 	bl	8012a06 <VL53L1_i2c_decode_core_results>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005c2a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d110      	bne.n	8005c54 <VL53L1_get_measurement_results+0x16e>

		i2c_buffer_offset_bytes = 0;
 8005c32:	2300      	movs	r3, #0
 8005c34:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005c38:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8005c3c:	f107 0208 	add.w	r2, r7, #8
 8005c40:	4413      	add	r3, r2
 8005c42:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005c46:	4619      	mov	r1, r3
 8005c48:	202c      	movs	r0, #44	; 0x2c
 8005c4a:	f00c fde6 	bl	801281a <VL53L1_i2c_decode_system_results>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005c54:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8005c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c66:	b0a0      	sub	sp, #128	; 0x80
 8005c68:	af06      	add	r7, sp, #24
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	72fb      	strb	r3, [r7, #11]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	VL53L1_LLDriverData_t *pdev =
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3318      	adds	r3, #24
 8005c7c:	663b      	str	r3, [r7, #96]	; 0x60
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8005c84:	3308      	adds	r3, #8
 8005c86:	65fb      	str	r3, [r7, #92]	; 0x5c
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults =
 8005c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8a:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results);
	VL53L1_zone_objects_t    *pobjects =
 8005c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005c92:	657b      	str	r3, [r7, #84]	; 0x54
			&(pres->zone_results.VL53L1_p_002[0]);
	VL53L1_ll_driver_state_t *pstate   =
 8005c94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c96:	332c      	adds	r3, #44	; 0x2c
 8005c98:	653b      	str	r3, [r7, #80]	; 0x50
			&(pdev->ll_state);
	VL53L1_zone_config_t     *pzone_cfg =
 8005c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c9c:	33c2      	adds	r3, #194	; 0xc2
 8005c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
			&(pdev->zone_cfg);
	VL53L1_zone_hist_info_t  *phist_info =
 8005ca0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca2:	f203 638c 	addw	r3, r3, #1676	; 0x68c
 8005ca6:	64bb      	str	r3, [r7, #72]	; 0x48
			&(pres->zone_hists.VL53L1_p_002[0]);

	VL53L1_dmax_calibration_data_t   dmax_cal;
	VL53L1_dmax_calibration_data_t *pdmax_cal = &dmax_cal;
 8005ca8:	f107 0314 	add.w	r3, r7, #20
 8005cac:	647b      	str	r3, [r7, #68]	; 0x44
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8005cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8005cb4:	643b      	str	r3, [r7, #64]	; 0x40
	VL53L1_xtalk_config_t *pC = &(pdev->xtalk_cfg);
 8005cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb8:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	VL53L1_low_power_auto_data_t *pL = &(pdev->low_power_auto_data);
 8005cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_histogram_bin_data_t *pHD = &(pdev->hist_data);
 8005cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cca:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L1_customer_nvm_managed_t *pN = &(pdev->customer);
 8005cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cd2:	3348      	adds	r3, #72	; 0x48
 8005cd4:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_zone_histograms_t *pZH = &(pres->zone_hists);
 8005cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd8:	f503 63d1 	add.w	r3, r3, #1672	; 0x688
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_xtalk_calibration_results_t *pXCR = &(pdev->xtalk_cal);
 8005cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce0:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 8005ce4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t merge_enabled;
	VL53L1_range_data_t *pdata;

	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8005ce6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ce8:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d108      	bne.n	8005d02 <VL53L1_get_device_results+0xa0>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cf6:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <VL53L1_get_device_results+0xa0>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e000      	b.n	8005d04 <VL53L1_get_device_results+0xa2>
 8005d02:	2300      	movs	r3, #0
 8005d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		 VL53L1_PRESETMODE_RANGING);

	if ((pdev->sys_ctrl.system__mode_start &
 8005d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d0a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 82a9 	beq.w	800626a <VL53L1_get_device_results+0x608>
		 VL53L1_DEVICESCHEDULERMODE_HISTOGRAM)
		 == VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) {



		status = VL53L1_get_histogram_bin_data(
 8005d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d1a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d1e:	4619      	mov	r1, r3
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fbd7 	bl	80064d4 <VL53L1_get_histogram_bin_data>
 8005d26:	4603      	mov	r3, r0
 8005d28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						&(pdev->hist_data));




		if (status == VL53L1_ERROR_NONE &&
 8005d2c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d118      	bne.n	8005d66 <VL53L1_get_device_results+0x104>
			pHD->number_of_ambient_bins == 0) {
 8005d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d36:	7adb      	ldrb	r3, [r3, #11]
		if (status == VL53L1_ERROR_NONE &&
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d114      	bne.n	8005d66 <VL53L1_get_device_results+0x104>
			zid = pdev->ll_state.rd_zone_id;
 8005d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
			&(pZH->VL53L1_p_002[zid]),
 8005d46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			status = VL53L1_hist_copy_and_scale_ambient_info(
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4e:	4413      	add	r3, r2
 8005d50:	1d1a      	adds	r2, r3, #4
 8005d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d54:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f005 fb6c 	bl	800b438 <VL53L1_hist_copy_and_scale_ambient_info>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(pdev->hist_data));
		}


		if (status != VL53L1_ERROR_NONE)
 8005d66:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f040 8220 	bne.w	80061b0 <VL53L1_get_device_results+0x54e>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 8005d70:	f107 0313 	add.w	r3, r7, #19
 8005d74:	4619      	mov	r1, r3
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f008 f91a 	bl	800dfb0 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 8005d7c:	7cfb      	ldrb	r3, [r7, #19]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <VL53L1_get_device_results+0x124>
			histo_merge_nb = 1;
 8005d82:	2301      	movs	r3, #1
 8005d84:	74fb      	strb	r3, [r7, #19]
		idx = histo_merge_nb - 1;
 8005d86:	7cfb      	ldrb	r3, [r7, #19]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		if (merge_enabled)
 8005d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <VL53L1_get_device_results+0x144>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[idx];
 8005d96:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	3202      	adds	r2, #2
 8005d9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8005da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da4:	601a      	str	r2, [r3, #0]

		pHP->gain_factor =
			pdev->gain_cal.histogram_ranging_gain_factor;
 8005da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da8:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
		pHP->gain_factor =
 8005dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dae:	83da      	strh	r2, [r3, #30]

		pHP->algo__crosstalk_compensation_plane_offset_kcps =
		VL53L1_calc_crosstalk_plane_offset_with_margin(
 8005db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f005 fa41 	bl	800b244 <VL53L1_calc_crosstalk_plane_offset_with_margin>
 8005dc2:	4602      	mov	r2, r0
		pHP->algo__crosstalk_compensation_plane_offset_kcps =
 8005dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc6:	62da      	str	r2, [r3, #44]	; 0x2c
		pC->algo__crosstalk_compensation_plane_offset_kcps,
		pC->histogram_mode_crosstalk_margin_kcps);

		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8005dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dca:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
		pHP->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8005dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dd0:	861a      	strh	r2, [r3, #48]	; 0x30
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
		pHP->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8005dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dda:	865a      	strh	r2, [r3, #50]	; 0x32

		pdev->dmax_cfg.ambient_thresh_sigma =
			pHP->ambient_thresh_sigma1;
 8005ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dde:	799a      	ldrb	r2, [r3, #6]
		pdev->dmax_cfg.ambient_thresh_sigma =
 8005de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005de2:	f883 2299 	strb.w	r2, [r3, #665]	; 0x299
		pdev->dmax_cfg.min_ambient_thresh_events =
			pHP->min_ambient_thresh_events;
 8005de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005de8:	68da      	ldr	r2, [r3, #12]
		pdev->dmax_cfg.min_ambient_thresh_events =
 8005dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dec:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		pdev->dmax_cfg.signal_total_events_limit =
			pHP->signal_total_events_limit;
 8005df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df2:	695a      	ldr	r2, [r3, #20]
		pdev->dmax_cfg.signal_total_events_limit =
 8005df4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005df6:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
			pdev->stat_cfg.dss_config__target_total_rate_mcps;
 8005dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dfc:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
		pdev->dmax_cfg.dss_config__target_total_rate_mcps =
 8005e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e02:	f8a3 22b0 	strh.w	r2, [r3, #688]	; 0x2b0
		pdev->dmax_cfg.dss_config__aperture_attenuation =
			pdev->gen_cfg.dss_config__aperture_attenuation;
 8005e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e08:	f893 2375 	ldrb.w	r2, [r3, #885]	; 0x375
		pdev->dmax_cfg.dss_config__aperture_attenuation =
 8005e0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e0e:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2

		pHP->algo__crosstalk_detect_max_valid_range_mm =
			pC->algo__crosstalk_detect_max_valid_range_mm;
 8005e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e14:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
		pHP->algo__crosstalk_detect_max_valid_range_mm =
 8005e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e1a:	86da      	strh	r2, [r3, #54]	; 0x36
		pHP->algo__crosstalk_detect_min_valid_range_mm =
			pC->algo__crosstalk_detect_min_valid_range_mm;
 8005e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e1e:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
		pHP->algo__crosstalk_detect_min_valid_range_mm =
 8005e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e24:	869a      	strh	r2, [r3, #52]	; 0x34
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
			pC->algo__crosstalk_detect_max_valid_rate_kcps;
 8005e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e28:	8bda      	ldrh	r2, [r3, #30]
		pHP->algo__crosstalk_detect_max_valid_rate_kcps =
 8005e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e2c:	871a      	strh	r2, [r3, #56]	; 0x38
		pHP->algo__crosstalk_detect_max_sigma_mm =
			pC->algo__crosstalk_detect_max_sigma_mm;
 8005e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e30:	8c1a      	ldrh	r2, [r3, #32]
		pHP->algo__crosstalk_detect_max_sigma_mm =
 8005e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e34:	875a      	strh	r2, [r3, #58]	; 0x3a



		VL53L1_copy_rtn_good_spads_to_buffer(
 8005e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e38:	f203 32d6 	addw	r2, r3, #982	; 0x3d6
 8005e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e3e:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8005e42:	4619      	mov	r1, r3
 8005e44:	4610      	mov	r0, r2
 8005e46:	f004 fc2f 	bl	800a6a8 <VL53L1_copy_rtn_good_spads_to_buffer>
				&(pdev->nvm_copy_data),
				&(pdev->rtn_good_spads[0]));



		switch (pdev->offset_correction_mode) {
 8005e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e4c:	795b      	ldrb	r3, [r3, #5]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d048      	beq.n	8005ee4 <VL53L1_get_device_results+0x282>
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	dc56      	bgt.n	8005f04 <VL53L1_get_device_results+0x2a2>
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d002      	beq.n	8005e60 <VL53L1_get_device_results+0x1fe>
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d02e      	beq.n	8005ebc <VL53L1_get_device_results+0x25a>
 8005e5e:	e051      	b.n	8005f04 <VL53L1_get_device_results+0x2a2>

		case VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS:
			tmp8 = pdev->gen_cfg.dss_config__aperture_attenuation;
 8005e60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e62:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
 8005e66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

			VL53L1_hist_combine_mm1_mm2_offsets(
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	f9b3 6014 	ldrsh.w	r6, [r3, #20]
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
 8005e76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e78:	f893 e406 	ldrb.w	lr, [r3, #1030]	; 0x406
 8005e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e7e:	f893 8407 	ldrb.w	r8, [r3, #1031]	; 0x407
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8005e88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e8a:	f892 20a9 	ldrb.w	r2, [r2, #169]	; 0xa9
 8005e8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005e90:	319c      	adds	r1, #156	; 0x9c
 8005e92:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005e94:	f500 7007 	add.w	r0, r0, #540	; 0x21c
 8005e98:	f897 4024 	ldrb.w	r4, [r7, #36]	; 0x24
 8005e9c:	b2a4      	uxth	r4, r4
 8005e9e:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8005ea0:	351c      	adds	r5, #28
 8005ea2:	9505      	str	r5, [sp, #20]
 8005ea4:	9404      	str	r4, [sp, #16]
 8005ea6:	9003      	str	r0, [sp, #12]
 8005ea8:	9102      	str	r1, [sp, #8]
 8005eaa:	9201      	str	r2, [sp, #4]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	4643      	mov	r3, r8
 8005eb0:	4672      	mov	r2, lr
 8005eb2:	4661      	mov	r1, ip
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f006 fa36 	bl	800c326 <VL53L1_hist_combine_mm1_mm2_offsets>
			pHD->roi_config__user_roi_requested_global_xy_size,
			&(pdev->add_off_cal_data),
			&(pdev->rtn_good_spads[0]),
			(uint16_t)tmp8,
			&(pHP->range_offset_mm));
		break;
 8005eba:	e027      	b.n	8005f0c <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_ZONE_OFFSETS:
			zid = pdev->ll_state.rd_zone_id;
 8005ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ebe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ec2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			pHP->range_offset_mm = (int16_t)(
			pres->zone_cal.VL53L1_p_002[zid].range_mm_offset);
 8005ec6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005eca:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005ecc:	4613      	mov	r3, r2
 8005ece:	00db      	lsls	r3, r3, #3
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	f503 63f7 	add.w	r3, r3, #1976	; 0x7b8
 8005eda:	681b      	ldr	r3, [r3, #0]
			pHP->range_offset_mm = (int16_t)(
 8005edc:	b21a      	sxth	r2, r3
 8005ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee0:	839a      	strh	r2, [r3, #28]
		break;
 8005ee2:	e013      	b.n	8005f0c <VL53L1_get_device_results+0x2aa>
		case VL53L1_OFFSETCORRECTIONMODE__PER_VCSEL_OFFSETS:
			select_offset_per_vcsel(
 8005ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee6:	331c      	adds	r3, #28
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005eec:	f7fd fcf7 	bl	80038de <select_offset_per_vcsel>
			pdev,
			&(pHP->range_offset_mm));
			pHP->range_offset_mm *= 4;
 8005ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef2:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	b21a      	sxth	r2, r3
 8005efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f00:	839a      	strh	r2, [r3, #28]
		break;
 8005f02:	e003      	b.n	8005f0c <VL53L1_get_device_results+0x2aa>
		default:
			pHP->range_offset_mm = 0;
 8005f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f06:	2200      	movs	r2, #0
 8005f08:	839a      	strh	r2, [r3, #28]
		break;
 8005f0a:	bf00      	nop

		}



		if (status != VL53L1_ERROR_NONE)
 8005f0c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f040 814f 	bne.w	80061b4 <VL53L1_get_device_results+0x552>
			goto UPDATE_DYNAMIC_CONFIG;


		VL53L1_calc_max_effective_spads(
 8005f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f18:	f893 00a8 	ldrb.w	r0, [r3, #168]	; 0xa8
 8005f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1e:	f893 10a9 	ldrb.w	r1, [r3, #169]	; 0xa9
 8005f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f24:	f503 7207 	add.w	r2, r3, #540	; 0x21c
		pHD->roi_config__user_roi_centre_spad,
		pHD->roi_config__user_roi_requested_global_xy_size,
		&(pdev->rtn_good_spads[0]),
		(uint16_t)pdev->gen_cfg.dss_config__aperture_attenuation,
 8005f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f2a:	f893 3375 	ldrb.w	r3, [r3, #885]	; 0x375
		VL53L1_calc_max_effective_spads(
 8005f2e:	b29c      	uxth	r4, r3
 8005f30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f32:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	4623      	mov	r3, r4
 8005f3a:	f006 fb99 	bl	800c670 <VL53L1_calc_max_effective_spads>
		&(pdev->dmax_cfg.max_effective_spads));

		status =
			VL53L1_get_dmax_calibration_data(
 8005f3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f40:	7999      	ldrb	r1, [r3, #6]
 8005f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f44:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8005f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 ff7b 	bl	8006e46 <VL53L1_get_dmax_calibration_data>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				pdev->ll_state.rd_zone_id,
				pdmax_cal);



		if (status != VL53L1_ERROR_NONE)
 8005f56:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f040 812c 	bne.w	80061b8 <VL53L1_get_device_results+0x556>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_ipp_hist_process_data(
 8005f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f62:	f503 7526 	add.w	r5, r3, #664	; 0x298
 8005f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f68:	f503 7616 	add.w	r6, r3, #600	; 0x258
 8005f6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f6e:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8005f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f74:	f503 60ac 	add.w	r0, r3, #1376	; 0x560
				pdmax_cal,
				&(pdev->dmax_cfg),
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(pdev->xtalk_shapes),
				pdev->wArea1,
 8005f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f7a:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8005f7e:	3308      	adds	r3, #8
				pdev->wArea2,
 8005f80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f82:	f502 52d2 	add.w	r2, r2, #6720	; 0x1a40
 8005f86:	3208      	adds	r2, #8
		status = VL53L1_ipp_hist_process_data(
 8005f88:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8005f8a:	9405      	str	r4, [sp, #20]
 8005f8c:	f107 0413 	add.w	r4, r7, #19
 8005f90:	9404      	str	r4, [sp, #16]
 8005f92:	9203      	str	r2, [sp, #12]
 8005f94:	9302      	str	r3, [sp, #8]
 8005f96:	9001      	str	r0, [sp, #4]
 8005f98:	9100      	str	r1, [sp, #0]
 8005f9a:	4633      	mov	r3, r6
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f00e fb45 	bl	8014630 <VL53L1_ipp_hist_process_data>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&histo_merge_nb,
				presults);

		if ((merge_enabled) && (histo_merge_nb > 1))
 8005fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d050      	beq.n	8006056 <VL53L1_get_device_results+0x3f4>
 8005fb4:	7cfb      	ldrb	r3, [r7, #19]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d94d      	bls.n	8006056 <VL53L1_get_device_results+0x3f4>
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8005fc0:	e045      	b.n	800604e <VL53L1_get_device_results+0x3ec>
			pdata = &(presults->VL53L1_p_002[i]);
 8005fc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8005fc6:	224c      	movs	r2, #76	; 0x4c
 8005fc8:	fb02 f303 	mul.w	r3, r2, r3
 8005fcc:	3310      	adds	r3, #16
 8005fce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fd0:	4413      	add	r3, r2
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	623b      	str	r3, [r7, #32]
			pdata->VL53L1_p_020 /= histo_merge_nb;
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	7cfa      	ldrb	r2, [r7, #19]
 8005fdc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->VL53L1_p_021 /= histo_merge_nb;
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe8:	7cfa      	ldrb	r2, [r7, #19]
 8005fea:	fbb3 f2f2 	udiv	r2, r3, r2
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 /= histo_merge_nb;
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	7cfa      	ldrb	r2, [r7, #19]
 8005ff8:	fb93 f2f2 	sdiv	r2, r3, r2
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->peak_signal_count_rate_mcps /= histo_merge_nb;
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8006004:	461a      	mov	r2, r3
 8006006:	7cfb      	ldrb	r3, [r7, #19]
 8006008:	fb92 f3f3 	sdiv	r3, r2, r3
 800600c:	b29a      	uxth	r2, r3
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps /= histo_merge_nb;
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006016:	461a      	mov	r2, r3
 8006018:	7cfb      	ldrb	r3, [r7, #19]
 800601a:	fb92 f3f3 	sdiv	r3, r2, r3
 800601e:	b29a      	uxth	r2, r3
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps /= histo_merge_nb;
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006028:	461a      	mov	r2, r3
 800602a:	7cfb      	ldrb	r3, [r7, #19]
 800602c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006030:	b29a      	uxth	r2, r3
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_012 /= histo_merge_nb;
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	7cfa      	ldrb	r2, [r7, #19]
 800603c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < VL53L1_MAX_RANGE_RESULTS; i++) {
 8006044:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006048:	3301      	adds	r3, #1
 800604a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800604e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006052:	2b03      	cmp	r3, #3
 8006054:	d9b5      	bls.n	8005fc2 <VL53L1_get_device_results+0x360>
		}


		if (status != VL53L1_ERROR_NONE)
 8006056:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800605a:	2b00      	cmp	r3, #0
 800605c:	f040 80ae 	bne.w	80061bc <VL53L1_get_device_results+0x55a>
			goto UPDATE_DYNAMIC_CONFIG;

		status = VL53L1_hist_wrap_dmax(
 8006060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006062:	f503 7016 	add.w	r0, r3, #600	; 0x258
 8006066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006068:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 800606c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800606e:	330e      	adds	r3, #14
 8006070:	461a      	mov	r2, r3
 8006072:	f006 f922 	bl	800c2ba <VL53L1_hist_wrap_dmax>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->histpostprocess),
				&(pdev->hist_data),
				&(presults->wrap_dmax_mm));


		if (status != VL53L1_ERROR_NONE)
 800607c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006080:	2b00      	cmp	r3, #0
 8006082:	f040 809d 	bne.w	80061c0 <VL53L1_get_device_results+0x55e>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 8006086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006088:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800608c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 8006090:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006098:	4413      	add	r3, r2
 800609a:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 800609c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_phase_consistency_check(
 80060a0:	4613      	mov	r3, r2
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80060ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060ae:	4413      	add	r3, r2
 80060b0:	f103 0208 	add.w	r2, r3, #8
 80060b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f005 fc1d 	bl	800b8f6 <VL53L1_hist_phase_consistency_check>
 80060bc:	4603      	mov	r3, r0
 80060be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			presults);


		if (status != VL53L1_ERROR_NONE)
 80060c2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d17c      	bne.n	80061c4 <VL53L1_get_device_results+0x562>
			goto UPDATE_DYNAMIC_CONFIG;

		zid = pdev->ll_state.rd_zone_id;
 80060ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
			Dev,
			&(pZH->VL53L1_p_002[zid]),
 80060d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060dc:	4413      	add	r3, r2
 80060de:	1d19      	adds	r1, r3, #4
			&(pres->zone_results.VL53L1_p_002[zid]),
 80060e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
		status = VL53L1_hist_xmonitor_consistency_check(
 80060e4:	4613      	mov	r3, r2
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80060f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060f2:	4413      	add	r3, r2
 80060f4:	f103 0208 	add.w	r2, r3, #8
 80060f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f006 f883 	bl	800c20a <VL53L1_hist_xmonitor_consistency_check>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			&(presults->xmonitor));


		if (status != VL53L1_ERROR_NONE)
 800610a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800610e:	2b00      	cmp	r3, #0
 8006110:	d15a      	bne.n	80061c8 <VL53L1_get_device_results+0x566>
			goto UPDATE_DYNAMIC_CONFIG;


		zid = pdev->ll_state.rd_zone_id;
 8006112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006114:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006118:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		pZH->max_zones    = VL53L1_MAX_USER_ZONES;
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	2210      	movs	r2, #16
 8006120:	701a      	strb	r2, [r3, #0]
		pZH->active_zones =
				pdev->zone_cfg.active_zones+1;
 8006122:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006124:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8006128:	3301      	adds	r3, #1
 800612a:	b2da      	uxtb	r2, r3
		pZH->active_zones =
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	705a      	strb	r2, [r3, #1]
		pHD->zone_id       = zid;
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006136:	709a      	strb	r2, [r3, #2]

		if (zid <
				pres->zone_results.max_zones) {
 8006138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800613a:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
		if (zid <
 800613e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006142:	429a      	cmp	r2, r3
 8006144:	d222      	bcs.n	800618c <VL53L1_get_device_results+0x52a>

			phist_info =
			&(pZH->VL53L1_p_002[zid]);
 8006146:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
			phist_info =
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800614e:	4413      	add	r3, r2
 8006150:	3304      	adds	r3, #4
 8006152:	64bb      	str	r3, [r7, #72]	; 0x48

			phist_info->rd_device_state =
				pHD->rd_device_state;
 8006154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006156:	785a      	ldrb	r2, [r3, #1]
			phist_info->rd_device_state =
 8006158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800615a:	701a      	strb	r2, [r3, #0]

			phist_info->number_of_ambient_bins =
				pHD->number_of_ambient_bins;
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	7ada      	ldrb	r2, [r3, #11]
			phist_info->number_of_ambient_bins =
 8006160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006162:	705a      	strb	r2, [r3, #1]

			phist_info->result__dss_actual_effective_spads =
			pHD->result__dss_actual_effective_spads;
 8006164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006166:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
			phist_info->result__dss_actual_effective_spads =
 800616a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800616c:	805a      	strh	r2, [r3, #2]

			phist_info->VL53L1_p_009 =
				pHD->VL53L1_p_009;
 800616e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006170:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
			phist_info->VL53L1_p_009 =
 8006174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006176:	711a      	strb	r2, [r3, #4]

			phist_info->total_periods_elapsed =
				pHD->total_periods_elapsed;
 8006178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
			phist_info->total_periods_elapsed =
 800617e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006180:	609a      	str	r2, [r3, #8]

			phist_info->ambient_events_sum =
				pHD->ambient_events_sum;
 8006182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006184:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			phist_info->ambient_events_sum =
 8006188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618a:	60da      	str	r2, [r3, #12]
		}



		if (status != VL53L1_ERROR_NONE)
 800618c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006190:	2b00      	cmp	r3, #0
 8006192:	d11b      	bne.n	80061cc <VL53L1_get_device_results+0x56a>
			goto UPDATE_DYNAMIC_CONFIG;

		VL53L1_hist_copy_results_to_sys_and_core(
 8006194:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006196:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 800619a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800619c:	f203 32aa 	addw	r2, r3, #938	; 0x3aa
 80061a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061a2:	f503 539b 	add.w	r3, r3, #4960	; 0x1360
 80061a6:	331c      	adds	r3, #28
 80061a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061aa:	f006 fbbe 	bl	800c92a <VL53L1_hist_copy_results_to_sys_and_core>
 80061ae:	e00e      	b.n	80061ce <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80061b0:	bf00      	nop
 80061b2:	e00c      	b.n	80061ce <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80061b4:	bf00      	nop
 80061b6:	e00a      	b.n	80061ce <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80061b8:	bf00      	nop
 80061ba:	e008      	b.n	80061ce <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80061bc:	bf00      	nop
 80061be:	e006      	b.n	80061ce <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80061c0:	bf00      	nop
 80061c2:	e004      	b.n	80061ce <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80061c4:	bf00      	nop
 80061c6:	e002      	b.n	80061ce <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80061c8:	bf00      	nop
 80061ca:	e000      	b.n	80061ce <VL53L1_get_device_results+0x56c>
			goto UPDATE_DYNAMIC_CONFIG;
 80061cc:	bf00      	nop
				&(pdev->sys_results),
				&(pdev->core_results));


UPDATE_DYNAMIC_CONFIG:
		if (pzone_cfg->active_zones > 0) {
 80061ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d036      	beq.n	8006244 <VL53L1_get_device_results+0x5e2>
			if (pstate->rd_device_state !=
 80061d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d8:	79db      	ldrb	r3, [r3, #7]
 80061da:	2b06      	cmp	r3, #6
 80061dc:	d00a      	beq.n	80061f4 <VL53L1_get_device_results+0x592>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {
				if (status == VL53L1_ERROR_NONE) {
 80061de:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <VL53L1_get_device_results+0x592>
					status = VL53L1_dynamic_zone_update(
 80061e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f006 fc73 	bl	800cad4 <VL53L1_dynamic_zone_update>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev, presults);
				}
			}


			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 80061f4:	2300      	movs	r3, #0
 80061f6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80061fa:	e015      	b.n	8006228 <VL53L1_get_device_results+0x5c6>
				pzone_cfg->bin_config[i] =
				((pdev->ll_state.cfg_internal_stream_count)
 80061fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061fe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
						& 0x01) ?
 8006202:	f003 0301 	and.w	r3, r3, #1
				pzone_cfg->bin_config[i] =
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <VL53L1_get_device_results+0x5ac>
 800620a:	2103      	movs	r1, #3
 800620c:	e000      	b.n	8006210 <VL53L1_get_device_results+0x5ae>
 800620e:	2101      	movs	r1, #1
 8006210:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006214:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006216:	4413      	add	r3, r2
 8006218:	460a      	mov	r2, r1
 800621a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			for (i = 0; i < VL53L1_MAX_USER_ZONES; i++) {
 800621e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006222:	3301      	adds	r3, #1
 8006224:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006228:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800622c:	2b0f      	cmp	r3, #15
 800622e:	d9e5      	bls.n	80061fc <VL53L1_get_device_results+0x59a>
					VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB :
					VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
			}

			if (status == VL53L1_ERROR_NONE)
 8006230:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006234:	2b00      	cmp	r3, #0
 8006236:	d105      	bne.n	8006244 <VL53L1_get_device_results+0x5e2>
				status = VL53L1_multizone_hist_bins_update(Dev);
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f006 fcc6 	bl	800cbca <VL53L1_multizone_hist_bins_update>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

		}



		if (status == VL53L1_ERROR_NONE)
 8006244:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006248:	2b00      	cmp	r3, #0
 800624a:	d105      	bne.n	8006258 <VL53L1_get_device_results+0x5f6>
			status = VL53L1_dynamic_xtalk_correction_corrector(Dev);
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f007 f9d3 	bl	800d5f8 <VL53L1_dynamic_xtalk_correction_corrector>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				&(pdev->hist_data),
				"get_device_results():pdev->lldata.hist_data.",
				VL53L1_TRACE_MODULE_HISTOGRAM_DATA);
#endif

		if (merge_enabled)
 8006258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800625c:	2b00      	cmp	r3, #0
 800625e:	d043      	beq.n	80062e8 <VL53L1_get_device_results+0x686>
			pC->algo__crosstalk_compensation_plane_offset_kcps =
				pXCR->algo__xtalk_cpo_HistoMerge_kcps[0];
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	689a      	ldr	r2, [r3, #8]
			pC->algo__crosstalk_compensation_plane_offset_kcps =
 8006264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e03e      	b.n	80062e8 <VL53L1_get_device_results+0x686>
	} else {

		if (status == VL53L1_ERROR_NONE)
 800626a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800626e:	2b00      	cmp	r3, #0
 8006270:	d107      	bne.n	8006282 <VL53L1_get_device_results+0x620>
			status = VL53L1_get_measurement_results(
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	4619      	mov	r1, r3
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f7ff fc35 	bl	8005ae6 <VL53L1_get_measurement_results>
 800627c:	4603      	mov	r3, r0
 800627e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							Dev,
							device_results_level);

		if (status == VL53L1_ERROR_NONE)
 8006282:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10d      	bne.n	80062a6 <VL53L1_get_device_results+0x644>
			VL53L1_copy_sys_and_core_results_to_range_results(
			(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800628a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800628c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
			VL53L1_copy_sys_and_core_results_to_range_results(
 8006290:	4618      	mov	r0, r3
 8006292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006294:	f203 31aa 	addw	r1, r3, #938	; 0x3aa
 8006298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800629a:	f503 529b 	add.w	r2, r3, #4960	; 0x1360
 800629e:	321c      	adds	r2, #28
 80062a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062a2:	f000 fc1f 	bl	8006ae4 <VL53L1_copy_sys_and_core_results_to_range_results>
			&(pdev->core_results),
			presults);



		if (pL->is_low_power_auto_mode == 1) {
 80062a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a8:	785b      	ldrb	r3, [r3, #1]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d11c      	bne.n	80062e8 <VL53L1_get_device_results+0x686>

			if ((status == VL53L1_ERROR_NONE) &&
 80062ae:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10d      	bne.n	80062d2 <VL53L1_get_device_results+0x670>
				(pL->low_power_auto_range_count == 0)) {
 80062b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b8:	789b      	ldrb	r3, [r3, #2]
			if ((status == VL53L1_ERROR_NONE) &&
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <VL53L1_get_device_results+0x670>

				status =
				VL53L1_low_power_auto_setup_manual_calibration(
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f007 fe24 	bl	800df0c <VL53L1_low_power_auto_setup_manual_calibration>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						Dev);
				pL->low_power_auto_range_count = 1;
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	2201      	movs	r2, #1
 80062ce:	709a      	strb	r2, [r3, #2]
 80062d0:	e00a      	b.n	80062e8 <VL53L1_get_device_results+0x686>
			} else if ((status == VL53L1_ERROR_NONE) &&
 80062d2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <VL53L1_get_device_results+0x686>
				(pL->low_power_auto_range_count == 1)) {
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	789b      	ldrb	r3, [r3, #2]
			} else if ((status == VL53L1_ERROR_NONE) &&
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d102      	bne.n	80062e8 <VL53L1_get_device_results+0x686>
				pL->low_power_auto_range_count = 2;
 80062e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e4:	2202      	movs	r2, #2
 80062e6:	709a      	strb	r2, [r3, #2]
		}

	}


	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80062e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80062ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062f0:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80062f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062f4:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 80062f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062fa:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pdev->ll_state.rd_zone_id;
 80062fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062fe:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8006302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006304:	709a      	strb	r2, [r3, #2]

	if (status == VL53L1_ERROR_NONE) {
 8006306:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800630a:	2b00      	cmp	r3, #0
 800630c:	f040 80b0 	bne.w	8006470 <VL53L1_get_device_results+0x80e>


		pres->zone_results.max_zones    = VL53L1_MAX_USER_ZONES;
 8006310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006312:	2210      	movs	r2, #16
 8006314:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
		pres->zone_results.active_zones = pdev->zone_cfg.active_zones+1;
 8006318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800631a:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800631e:	3301      	adds	r3, #1
 8006320:	b2da      	uxtb	r2, r3
 8006322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006324:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
		zid = pdev->ll_state.rd_zone_id;
 8006328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800632a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800632e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		if (zid < pres->zone_results.max_zones) {
 8006332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006334:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8006338:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800633c:	429a      	cmp	r2, r3
 800633e:	f080 8097 	bcs.w	8006470 <VL53L1_get_device_results+0x80e>

			pobjects =
			&(pres->zone_results.VL53L1_p_002[zid]);
 8006342:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
			pobjects =
 8006346:	4613      	mov	r3, r2
 8006348:	011b      	lsls	r3, r3, #4
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8006352:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006354:	4413      	add	r3, r2
 8006356:	3308      	adds	r3, #8
 8006358:	657b      	str	r3, [r7, #84]	; 0x54

			pobjects->cfg_device_state  =
					presults->cfg_device_state;
 800635a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800635c:	781a      	ldrb	r2, [r3, #0]
			pobjects->cfg_device_state  =
 800635e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006360:	701a      	strb	r2, [r3, #0]
			pobjects->rd_device_state   = presults->rd_device_state;
 8006362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006364:	785a      	ldrb	r2, [r3, #1]
 8006366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006368:	705a      	strb	r2, [r3, #1]
			pobjects->zone_id           = presults->zone_id;
 800636a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800636c:	789a      	ldrb	r2, [r3, #2]
 800636e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006370:	709a      	strb	r2, [r3, #2]
			pobjects->stream_count      = presults->stream_count;
 8006372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006374:	78da      	ldrb	r2, [r3, #3]
 8006376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006378:	70da      	strb	r2, [r3, #3]



			pobjects->xmonitor.VL53L1_p_020 =
				presults->xmonitor.VL53L1_p_020;
 800637a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800637c:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
			pobjects->xmonitor.VL53L1_p_020 =
 8006380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006382:	639a      	str	r2, [r3, #56]	; 0x38
			pobjects->xmonitor.VL53L1_p_021 =
				presults->xmonitor.VL53L1_p_021;
 8006384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006386:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
			pobjects->xmonitor.VL53L1_p_021 =
 800638a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800638c:	63da      	str	r2, [r3, #60]	; 0x3c
			pobjects->xmonitor.VL53L1_p_014 =
				presults->xmonitor.VL53L1_p_014;
 800638e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006390:	f8b3 2184 	ldrh.w	r2, [r3, #388]	; 0x184
			pobjects->xmonitor.VL53L1_p_014 =
 8006394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006396:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			pobjects->xmonitor.range_status =
				presults->xmonitor.range_status;
 800639a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800639c:	f893 218e 	ldrb.w	r2, [r3, #398]	; 0x18e
			pobjects->xmonitor.range_status =
 80063a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

			pobjects->max_objects      = presults->max_results;
 80063a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063a8:	7c5a      	ldrb	r2, [r3, #17]
 80063aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ac:	711a      	strb	r2, [r3, #4]
			pobjects->active_objects   = presults->active_results;
 80063ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063b0:	7c9a      	ldrb	r2, [r3, #18]
 80063b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063b4:	715a      	strb	r2, [r3, #5]

			for (i = 0; i < presults->active_results; i++) {
 80063b6:	2300      	movs	r3, #0
 80063b8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80063bc:	e052      	b.n	8006464 <VL53L1_get_device_results+0x802>
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
					presults->VL53L1_p_002[i].VL53L1_p_020;
 80063be:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 80063c2:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_020;
 80063c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063c8:	204c      	movs	r0, #76	; 0x4c
 80063ca:	fb00 f303 	mul.w	r3, r0, r3
 80063ce:	440b      	add	r3, r1
 80063d0:	3338      	adds	r3, #56	; 0x38
 80063d2:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_020 =
 80063d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80063d6:	4613      	mov	r3, r2
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4403      	add	r3, r0
 80063e0:	3308      	adds	r3, #8
 80063e2:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
					presults->VL53L1_p_002[i].VL53L1_p_021;
 80063e4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 80063e8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_021;
 80063ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063ee:	204c      	movs	r0, #76	; 0x4c
 80063f0:	fb00 f303 	mul.w	r3, r0, r3
 80063f4:	440b      	add	r3, r1
 80063f6:	333c      	adds	r3, #60	; 0x3c
 80063f8:	6819      	ldr	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_021 =
 80063fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80063fc:	4613      	mov	r3, r2
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4403      	add	r3, r0
 8006406:	330c      	adds	r3, #12
 8006408:	6019      	str	r1, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
					presults->VL53L1_p_002[i].VL53L1_p_014;
 800640a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 800640e:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].VL53L1_p_014;
 8006412:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006414:	204c      	movs	r0, #76	; 0x4c
 8006416:	fb00 f303 	mul.w	r3, r0, r3
 800641a:	440b      	add	r3, r1
 800641c:	3354      	adds	r3, #84	; 0x54
 800641e:	8818      	ldrh	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].VL53L1_p_014 =
 8006420:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006422:	4613      	mov	r3, r2
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	4413      	add	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	440b      	add	r3, r1
 800642c:	3310      	adds	r3, #16
 800642e:	4602      	mov	r2, r0
 8006430:	801a      	strh	r2, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
					presults->VL53L1_p_002[i].range_status;
 8006432:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
				pobjects->VL53L1_p_002[i].range_status =
 8006436:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
					presults->VL53L1_p_002[i].range_status;
 800643a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800643c:	204c      	movs	r0, #76	; 0x4c
 800643e:	fb00 f303 	mul.w	r3, r0, r3
 8006442:	440b      	add	r3, r1
 8006444:	335e      	adds	r3, #94	; 0x5e
 8006446:	7818      	ldrb	r0, [r3, #0]
				pobjects->VL53L1_p_002[i].range_status =
 8006448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800644a:	4613      	mov	r3, r2
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	4413      	add	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	440b      	add	r3, r1
 8006454:	3312      	adds	r3, #18
 8006456:	4602      	mov	r2, r0
 8006458:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < presults->active_results; i++) {
 800645a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800645e:	3301      	adds	r3, #1
 8006460:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006466:	7c9b      	ldrb	r3, [r3, #18]
 8006468:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800646c:	429a      	cmp	r2, r3
 800646e:	d3a6      	bcc.n	80063be <VL53L1_get_device_results+0x75c>
		}
	}



	memcpy(
 8006470:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006474:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f012 fe4e 	bl	8019118 <memcpy>
		presults,
		sizeof(VL53L1_range_results_t));



	if (status == VL53L1_ERROR_NONE)
 800647c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <VL53L1_get_device_results+0x82e>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f003 ff35 	bl	800a2f4 <VL53L1_check_ll_driver_rd_state>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006490:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8006494:	4618      	mov	r0, r3
 8006496:	3768      	adds	r7, #104	; 0x68
 8006498:	46bd      	mov	sp, r7
 800649a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800649e <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	460b      	mov	r3, r1
 80064a8:	70fb      	strb	r3, [r7, #3]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]





	if (status == VL53L1_ERROR_NONE)
 80064ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d107      	bne.n	80064c6 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	2203      	movs	r2, #3
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fe fff3 	bl	80054a8 <VL53L1_init_and_start_range>
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]
				measurement_mode,
				VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 80064c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <VL53L1_get_histogram_bin_data>:


VL53L1_Error VL53L1_get_histogram_bin_data(
		VL53L1_DEV                   Dev,
		VL53L1_histogram_bin_data_t *pdata)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b0d2      	sub	sp, #328	; 0x148
 80064d8:	af00      	add	r7, sp, #0
 80064da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80064de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80064e2:	6018      	str	r0, [r3, #0]
 80064e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80064e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80064ec:	6019      	str	r1, [r3, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	VL53L1_LLDriverData_t *pdev =
 80064f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80064f8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3318      	adds	r3, #24
 8006500:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006504:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006508:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006512:	3308      	adds	r3, #8
 8006514:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;

	VL53L1_static_nvm_managed_t   *pstat_nvm = &(pdev->stat_nvm);
 8006518:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800651c:	f503 7347 	add.w	r3, r3, #796	; 0x31c
 8006520:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_static_config_t        *pstat_cfg = &(pdev->stat_cfg);
 8006524:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006528:	f203 3342 	addw	r3, r3, #834	; 0x342
 800652c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_general_config_t       *pgen_cfg  = &(pdev->gen_cfg);
 8006530:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006534:	f203 3362 	addw	r3, r3, #866	; 0x362
 8006538:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_timing_config_t        *ptim_cfg  = &(pdev->tim_cfg);
 800653c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006540:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8006544:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_range_results_t        *presults  = &(pres->range_results);
 8006548:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800654c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

	uint8_t    buffer[VL53L1_MAX_I2C_XFER_SIZE];
	uint8_t   *pbuffer = &buffer[0];
 8006550:	f107 030c 	add.w	r3, r7, #12
 8006554:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint8_t    bin_23_0 = 0x00;
 8006558:	2300      	movs	r3, #0
 800655a:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
	uint16_t   bin                      = 0;
 800655e:	2300      	movs	r3, #0
 8006560:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	uint16_t   i2c_buffer_offset_bytes  = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
	uint16_t   encoded_timeout          = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	uint32_t   pll_period_us            = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	uint32_t   periods_elapsed_tmp      = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint8_t    i                        = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
	int32_t    hist_merge				= 0;
 8006582:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006586:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 800658e:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10d      	bne.n	80065b2 <VL53L1_get_histogram_bin_data+0xde>
		status = VL53L1_ReadMulti(
 8006596:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800659a:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 800659e:	2353      	movs	r3, #83	; 0x53
 80065a0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80065a4:	2188      	movs	r1, #136	; 0x88
 80065a6:	6800      	ldr	r0, [r0, #0]
 80065a8:	f00d fe32 	bl	8014210 <VL53L1_ReadMulti>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			pbuffer,
			VL53L1_HISTOGRAM_BIN_DATA_I2C_SIZE_BYTES);



	pdata->result__interrupt_status               = *(pbuffer +   0);
 80065b2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80065b6:	781a      	ldrb	r2, [r3, #0]
 80065b8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80065bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status                   = *(pbuffer +   1);
 80065c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80065ca:	785a      	ldrb	r2, [r3, #1]
 80065cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80065d0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status                  = *(pbuffer +   2);
 80065da:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80065de:	789a      	ldrb	r2, [r3, #2]
 80065e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80065e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count                   = *(pbuffer +   3);
 80065ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80065f2:	78da      	ldrb	r2, [r3, #3]
 80065f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80065f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	pdata->result__dss_actual_effective_spads =
		VL53L1_i2c_decode_uint16_t(2, pbuffer +   4);
 8006602:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006606:	3304      	adds	r3, #4
 8006608:	4619      	mov	r1, r3
 800660a:	2002      	movs	r0, #2
 800660c:	f004 fb75 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8006610:	4603      	mov	r3, r0
 8006612:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads =
 8006614:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006618:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c



	i2c_buffer_offset_bytes =
 8006622:	234e      	movs	r3, #78	; 0x4e
 8006624:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__REFERENCE_PHASE -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 8006628:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800662c:	f107 020c 	add.w	r2, r7, #12
 8006630:	4413      	add	r3, r2
 8006632:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

	pdata->phasecal_result__reference_phase =
			VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8006636:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800663a:	2002      	movs	r0, #2
 800663c:	f004 fb5d 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8006640:	4603      	mov	r3, r0
 8006642:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8006644:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006648:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	i2c_buffer_offset_bytes =
 8006652:	2350      	movs	r3, #80	; 0x50
 8006654:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_PHASECAL_RESULT__VCSEL_START -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pdata->phasecal_result__vcsel_start = buffer[i2c_buffer_offset_bytes];
 8006658:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800665c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8006660:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8006664:	5cd2      	ldrb	r2, [r2, r3]
 8006666:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800666a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80



	pdev->dbg_results.phasecal_result__reference_phase =
			pdata->phasecal_result__reference_phase;
 8006674:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006678:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f8b3 207e 	ldrh.w	r2, [r3, #126]	; 0x7e
	pdev->dbg_results.phasecal_result__reference_phase =
 8006682:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800668a:	f8a3 23a0 	strh.w	r2, [r3, #928]	; 0x3a0
	pdev->dbg_results.phasecal_result__vcsel_start =
			pdata->phasecal_result__vcsel_start;
 800668e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006692:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
	pdev->dbg_results.phasecal_result__vcsel_start =
 800669c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a4:	f883 23a2 	strb.w	r2, [r3, #930]	; 0x3a2



	i2c_buffer_offset_bytes =
 80066a8:	2351      	movs	r3, #81	; 0x51
 80066aa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_MSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 = buffer[i2c_buffer_offset_bytes] << 2;
 80066ae:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80066b2:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80066b6:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80066ba:	5cd3      	ldrb	r3, [r2, r3]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 80066c2:	2352      	movs	r3, #82	; 0x52
 80066c4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0_LSB -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	bin_23_0 += buffer[i2c_buffer_offset_bytes];
 80066c8:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80066cc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80066d0:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80066d4:	5cd2      	ldrb	r2, [r2, r3]
 80066d6:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80066da:	4413      	add	r3, r2
 80066dc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	i2c_buffer_offset_bytes =
 80066e0:	234d      	movs	r3, #77	; 0x4d
 80066e2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_23_0 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	buffer[i2c_buffer_offset_bytes] = bin_23_0;
 80066e6:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 80066ea:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80066ee:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80066f2:	f897 111b 	ldrb.w	r1, [r7, #283]	; 0x11b
 80066f6:	54d1      	strb	r1, [r2, r3]



	i2c_buffer_offset_bytes =
 80066f8:	2306      	movs	r3, #6
 80066fa:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
			VL53L1_RESULT__HISTOGRAM_BIN_0_2 -
			VL53L1_HISTOGRAM_BIN_DATA_I2C_INDEX;

	pbuffer = &buffer[i2c_buffer_offset_bytes];
 80066fe:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8006702:	f107 020c 	add.w	r2, r7, #12
 8006706:	4413      	add	r3, r2
 8006708:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 800670c:	2300      	movs	r3, #0
 800670e:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 8006712:	e01a      	b.n	800674a <VL53L1_get_histogram_bin_data+0x276>
		pdata->bin_data[bin] =
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006714:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006718:	2003      	movs	r0, #3
 800671a:	f004 fb8d 	bl	800ae38 <VL53L1_i2c_decode_uint32_t>
 800671e:	4603      	mov	r3, r0
		pdata->bin_data[bin] =
 8006720:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
			(int32_t)VL53L1_i2c_decode_uint32_t(3, pbuffer);
 8006724:	4619      	mov	r1, r3
		pdata->bin_data[bin] =
 8006726:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800672a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3206      	adds	r2, #6
 8006732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pbuffer += 3;
 8006736:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800673a:	3303      	adds	r3, #3
 800673c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	for (bin = 0; bin < VL53L1_HISTOGRAM_BUFFER_SIZE; bin++) {
 8006740:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 8006744:	3301      	adds	r3, #1
 8006746:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800674a:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800674e:	2b17      	cmp	r3, #23
 8006750:	d9e0      	bls.n	8006714 <VL53L1_get_histogram_bin_data+0x240>
	}

	VL53L1_get_tuning_parm(Dev, VL53L1_TUNINGPARM_HIST_MERGE,
 8006752:	f107 0208 	add.w	r2, r7, #8
 8006756:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800675a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800675e:	f248 018d 	movw	r1, #32909	; 0x808d
 8006762:	6818      	ldr	r0, [r3, #0]
 8006764:	f000 fbd0 	bl	8006f08 <VL53L1_get_tuning_parm>
			&hist_merge);

	if (pdata->result__stream_count == 0) {
 8006768:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800676c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8006776:	2b00      	cmp	r3, #0
 8006778:	d118      	bne.n	80067ac <VL53L1_get_histogram_bin_data+0x2d8>

		memset(pdev->multi_bins_rec, 0, sizeof(pdev->multi_bins_rec));
 800677a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800677e:	f503 53e2 	add.w	r3, r3, #7232	; 0x1c40
 8006782:	3318      	adds	r3, #24
 8006784:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8006788:	2100      	movs	r1, #0
 800678a:	4618      	mov	r0, r3
 800678c:	f012 fcd2 	bl	8019134 <memset>
		pdev->bin_rec_pos = 0;
 8006790:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2c54 	strb.w	r2, [r3, #3156]	; 0xc54
		pdev->pos_before_next_recom = 0;
 800679e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2c55 	strb.w	r2, [r3, #3157]	; 0xc55
	}

	if (hist_merge == 1)
 80067ac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80067b0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d10b      	bne.n	80067d2 <VL53L1_get_histogram_bin_data+0x2fe>
		vl53l1_histo_merge(Dev, pdata);
 80067ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80067be:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 80067c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80067c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80067ca:	6811      	ldr	r1, [r2, #0]
 80067cc:	6818      	ldr	r0, [r3, #0]
 80067ce:	f7fd f97e 	bl	8003ace <vl53l1_histo_merge>


	pdata->zone_id                 = pdev->ll_state.rd_zone_id;
 80067d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067d6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80067da:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80067de:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	709a      	strb	r2, [r3, #2]
	pdata->VL53L1_p_022               = 0;
 80067e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80067ea:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2200      	movs	r2, #0
 80067f2:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023             = VL53L1_HISTOGRAM_BUFFER_SIZE;
 80067f4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80067f8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2218      	movs	r2, #24
 8006800:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024          = VL53L1_HISTOGRAM_BUFFER_SIZE;
 8006802:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006806:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2218      	movs	r2, #24
 800680e:	729a      	strb	r2, [r3, #10]

	pdata->cal_config__vcsel_start = pgen_cfg->cal_config__vcsel_start;
 8006810:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006814:	78da      	ldrb	r2, [r3, #3]
 8006816:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800681a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81



	pdata->vcsel_width =
		((uint16_t)pgen_cfg->global_config__vcsel_width) << 4;
 8006824:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006828:	799b      	ldrb	r3, [r3, #6]
 800682a:	b29b      	uxth	r3, r3
 800682c:	011b      	lsls	r3, r3, #4
 800682e:	b29a      	uxth	r2, r3
	pdata->vcsel_width =
 8006830:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006834:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->vcsel_width +=
 800683e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006842:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
		(uint16_t)pstat_cfg->ana_config__vcsel_pulse_width_offset;
 800684c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006850:	7c1b      	ldrb	r3, [r3, #16]
 8006852:	b29b      	uxth	r3, r3
	pdata->vcsel_width +=
 8006854:	4413      	add	r3, r2
 8006856:	b29a      	uxth	r2, r3
 8006858:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800685c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82


	pdata->VL53L1_p_019 =
		pstat_nvm->osc_measured__fast_osc__frequency;
 8006866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800686a:	88da      	ldrh	r2, [r3, #6]
	pdata->VL53L1_p_019 =
 800686c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006870:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86



	VL53L1_hist_get_bin_sequence_config(Dev, pdata);
 800687a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800687e:	f5a3 72a4 	sub.w	r2, r3, #328	; 0x148
 8006882:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006886:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800688a:	6811      	ldr	r1, [r2, #0]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	f004 fed4 	bl	800b63a <VL53L1_hist_get_bin_sequence_config>



	if (pdev->ll_state.rd_timing_status == 0) {
 8006892:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006896:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800689a:	2b00      	cmp	r3, #0
 800689c:	d117      	bne.n	80068ce <VL53L1_get_histogram_bin_data+0x3fa>

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_a_hi << 8)
 800689e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80068a2:	791b      	ldrb	r3, [r3, #4]
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	021b      	lsls	r3, r3, #8
 80068a8:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_a_lo;
 80068aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80068ae:	795b      	ldrb	r3, [r3, #5]
 80068b0:	b29b      	uxth	r3, r3
		encoded_timeout =
 80068b2:	4413      	add	r3, r2
 80068b4:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 =  ptim_cfg->range_config__vcsel_period_a;
 80068b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80068bc:	799a      	ldrb	r2, [r3, #6]
 80068be:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80068c2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80068cc:	e016      	b.n	80068fc <VL53L1_get_histogram_bin_data+0x428>
	} else {

		encoded_timeout =
			(ptim_cfg->range_config__timeout_macrop_b_hi << 8)
 80068ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80068d2:	79db      	ldrb	r3, [r3, #7]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	b29a      	uxth	r2, r3
			+ ptim_cfg->range_config__timeout_macrop_b_lo;
 80068da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80068de:	7a1b      	ldrb	r3, [r3, #8]
 80068e0:	b29b      	uxth	r3, r3
		encoded_timeout =
 80068e2:	4413      	add	r3, r2
 80068e4:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
		pdata->VL53L1_p_009 = ptim_cfg->range_config__vcsel_period_b;
 80068e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80068ec:	7a5a      	ldrb	r2, [r3, #9]
 80068ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80068f2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	}



	pdata->number_of_ambient_bins  = 0;
 80068fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006900:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2200      	movs	r2, #0
 8006908:	72da      	strb	r2, [r3, #11]

	for (i = 0; i < 6; i++) {
 800690a:	2300      	movs	r3, #0
 800690c:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006910:	e01f      	b.n	8006952 <VL53L1_get_histogram_bin_data+0x47e>
		if ((pdata->bin_seq[i] & 0x07) == 0x07)
 8006912:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006916:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800691a:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800691e:	6812      	ldr	r2, [r2, #0]
 8006920:	4413      	add	r3, r2
 8006922:	7b1b      	ldrb	r3, [r3, #12]
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	2b07      	cmp	r3, #7
 800692a:	d10d      	bne.n	8006948 <VL53L1_get_histogram_bin_data+0x474>
			pdata->number_of_ambient_bins  =
					pdata->number_of_ambient_bins + 0x04;
 800692c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006930:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	7adb      	ldrb	r3, [r3, #11]
 8006938:	3304      	adds	r3, #4
 800693a:	b2da      	uxtb	r2, r3
			pdata->number_of_ambient_bins  =
 800693c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006940:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	72da      	strb	r2, [r3, #11]
	for (i = 0; i < 6; i++) {
 8006948:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 800694c:	3301      	adds	r3, #1
 800694e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 8006952:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 8006956:	2b05      	cmp	r3, #5
 8006958:	d9db      	bls.n	8006912 <VL53L1_get_histogram_bin_data+0x43e>
	}

	pdata->total_periods_elapsed =
		VL53L1_decode_timeout(encoded_timeout);
 800695a:	f8b7 313c 	ldrh.w	r3, [r7, #316]	; 0x13c
 800695e:	4618      	mov	r0, r3
 8006960:	f004 fcdb 	bl	800b31a <VL53L1_decode_timeout>
 8006964:	4602      	mov	r2, r0
	pdata->total_periods_elapsed =
 8006966:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800696a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88




	pll_period_us =
		VL53L1_calc_pll_period_us(pdata->VL53L1_p_019);
 8006974:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006978:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8006982:	4618      	mov	r0, r3
 8006984:	f007 fb54 	bl	800e030 <VL53L1_calc_pll_period_us>
 8006988:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114



	periods_elapsed_tmp = pdata->total_periods_elapsed + 1;
 800698c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006990:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699a:	3301      	adds	r3, #1
 800699c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110


	pdata->peak_duration_us =
		VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->vcsel_width,
 80069a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
		VL53L1_duration_maths(
 80069ae:	4619      	mov	r1, r3
 80069b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80069b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069b8:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80069bc:	f007 fb4f 	bl	800e05e <VL53L1_duration_maths>
 80069c0:	4602      	mov	r2, r0
	pdata->peak_duration_us =
 80069c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069c6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed_tmp);

	pdata->woi_duration_us     = 0;
 80069d0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90



	VL53L1_hist_calc_zero_distance_phase(pdata);
 80069e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069e8:	6818      	ldr	r0, [r3, #0]
 80069ea:	f007 fc5e 	bl	800e2aa <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_ambient_bins(pdata);
 80069ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80069f2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80069f6:	6818      	ldr	r0, [r3, #0]
 80069f8:	f008 f875 	bl	800eae6 <VL53L1_hist_estimate_ambient_from_ambient_bins>



	pdata->cfg_device_state = pdev->ll_state.cfg_device_state;
 80069fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a00:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006a04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state  = pdev->ll_state.rd_device_state;
 8006a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006a14:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8006a18:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a1c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	705a      	strb	r2, [r3, #1]



	pzone_dyn_cfg = &(pres->zone_dyn_cfgs.VL53L1_p_002[pdata->zone_id]);
 8006a24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a28:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	789b      	ldrb	r3, [r3, #2]
 8006a30:	461a      	mov	r2, r3
 8006a32:	4613      	mov	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8006a3e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006a42:	4413      	add	r3, r2
 8006a44:	3302      	adds	r3, #2
 8006a46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	pdata->roi_config__user_roi_centre_spad =
		pzone_dyn_cfg->roi_config__user_roi_centre_spad;
 8006a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a4e:	7a1a      	ldrb	r2, [r3, #8]
	pdata->roi_config__user_roi_centre_spad =
 8006a50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	pdata->roi_config__user_roi_requested_global_xy_size =
		pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size;
 8006a5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a62:	7a5a      	ldrb	r2, [r3, #9]
	pdata->roi_config__user_roi_requested_global_xy_size =
 8006a64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a68:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006a76:	2200      	movs	r2, #0
 8006a78:	741a      	strb	r2, [r3, #16]



	switch (pdata->result__range_status &
 8006a7a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006a7e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2b11      	cmp	r3, #17
 8006a8e:	bf8c      	ite	hi
 8006a90:	2201      	movhi	r2, #1
 8006a92:	2200      	movls	r2, #0
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	2a00      	cmp	r2, #0
 8006a98:	d11b      	bne.n	8006ad2 <VL53L1_get_histogram_bin_data+0x5fe>
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	409a      	lsls	r2, r3
 8006a9e:	4b10      	ldr	r3, [pc, #64]	; (8006ae0 <VL53L1_get_histogram_bin_data+0x60c>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	bf14      	ite	ne
 8006aa6:	2301      	movne	r3, #1
 8006aa8:	2300      	moveq	r3, #0
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d010      	beq.n	8006ad2 <VL53L1_get_histogram_bin_data+0x5fe>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (pdata->result__range_status &
 8006ab0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8006ab4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8006abe:	f003 031f 	and.w	r3, r3, #31
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006ac8:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		status = VL53L1_ERROR_RANGE_ERROR;
 8006aca:	23fa      	movs	r3, #250	; 0xfa
 8006acc:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	break;
 8006ad0:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006ad2:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	0002200e 	.word	0x0002200e

08006ae4 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b08b      	sub	sp, #44	; 0x2c
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	61bb      	str	r3, [r7, #24]
	uint32_t tmpu32 = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");



	presults->zone_id         = 0;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	709a      	strb	r2, [r3, #2]
	presults->stream_count    = psys->result__stream_count;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	78da      	ldrb	r2, [r3, #3]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm    = 0;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2200      	movs	r2, #0
 8006b12:	81da      	strh	r2, [r3, #14]
	presults->max_results     = VL53L1_MAX_RANGE_RESULTS;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2204      	movs	r2, #4
 8006b18:	745a      	strb	r2, [r3, #17]
	presults->active_results  = 1;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	749a      	strb	r2, [r3, #18]
	rpscr_crosstalk_corrected_mcps_sd0 =
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	8a1b      	ldrh	r3, [r3, #16]
 8006b24:	82fb      	strh	r3, [r7, #22]
	psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
	rmmo_effective_spads_sd0 =
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	8a9b      	ldrh	r3, [r3, #20]
 8006b2a:	82bb      	strh	r3, [r7, #20]
			psys->result__mm_outer_actual_effective_spads_sd0;
	rmmi_effective_spads_sd0 =
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	8a5b      	ldrh	r3, [r3, #18]
 8006b30:	827b      	strh	r3, [r7, #18]
			psys->result__mm_inner_actual_effective_spads_sd0;


	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8006b32:	2300      	movs	r3, #0
 8006b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b38:	e00b      	b.n	8006b52 <VL53L1_copy_sys_and_core_results_to_range_results+0x6e>
		presults->VL53L1_p_007[i] = 0;
 8006b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	4413      	add	r3, r2
 8006b44:	2200      	movs	r2, #0
 8006b46:	809a      	strh	r2, [r3, #4]
	for (i = 0; i < VL53L1_MAX_AMBIENT_DMAX_VALUES; i++)
 8006b48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	d9ef      	bls.n	8006b3a <VL53L1_copy_sys_and_core_results_to_range_results+0x56>

	pdata = &(presults->VL53L1_p_002[0]);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	3314      	adds	r3, #20
 8006b5e:	623b      	str	r3, [r7, #32]

	for (i = 0; i < 2; i++) {
 8006b60:	2300      	movs	r3, #0
 8006b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b66:	e0fe      	b.n	8006d66 <VL53L1_copy_sys_and_core_results_to_range_results+0x282>

		pdata->range_id     = i;
 8006b68:	6a3b      	ldr	r3, [r7, #32]
 8006b6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006b6e:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	2200      	movs	r2, #0
 8006b74:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	78db      	ldrb	r3, [r3, #3]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
			((psys->result__range_status &
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	785b      	ldrb	r3, [r3, #1]
 8006b82:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8006b86:	2b09      	cmp	r3, #9
 8006b88:	d104      	bne.n	8006b94 <VL53L1_copy_sys_and_core_results_to_range_results+0xb0>
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status =
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	2213      	movs	r2, #19
 8006b8e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8006b92:	e007      	b.n	8006ba4 <VL53L1_copy_sys_and_core_results_to_range_results+0xc0>
				VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
		} else {
			pdata->range_status =
				psys->result__range_status &
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	785b      	ldrb	r3, [r3, #1]
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
		}

		pdata->VL53L1_p_015 = 0;
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	721a      	strb	r2, [r3, #8]
		pdata->VL53L1_p_022    = 0;
 8006baa:	6a3b      	ldr	r3, [r7, #32]
 8006bac:	2200      	movs	r2, #0
 8006bae:	725a      	strb	r2, [r3, #9]
		pdata->VL53L1_p_025   = 0;
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	729a      	strb	r2, [r3, #10]
		pdata->VL53L1_p_026     = 0;
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	72da      	strb	r2, [r3, #11]
		pdata->VL53L1_p_016   = 0;
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	731a      	strb	r2, [r3, #12]
		pdata->VL53L1_p_027    = 0;
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	735a      	strb	r2, [r3, #13]

		switch (i) {
 8006bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <VL53L1_copy_sys_and_core_results_to_range_results+0xf2>
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d05c      	beq.n	8006c8e <VL53L1_copy_sys_and_core_results_to_range_results+0x1aa>
 8006bd4:	e0a8      	b.n	8006d28 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>

		case 0:
			if (psys->result__report_status ==
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	789b      	ldrb	r3, [r3, #2]
 8006bda:	2b07      	cmp	r3, #7
 8006bdc:	d103      	bne.n	8006be6 <VL53L1_copy_sys_and_core_results_to_range_results+0x102>
				VL53L1_DEVICEREPORTSTATUS_MM1)
				pdata->VL53L1_p_006 =
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	8a7a      	ldrh	r2, [r7, #18]
 8006be2:	82da      	strh	r2, [r3, #22]
 8006be4:	e00b      	b.n	8006bfe <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmi_effective_spads_sd0;
			else if (psys->result__report_status ==
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	789b      	ldrb	r3, [r3, #2]
 8006bea:	2b08      	cmp	r3, #8
 8006bec:	d103      	bne.n	8006bf6 <VL53L1_copy_sys_and_core_results_to_range_results+0x112>
					VL53L1_DEVICEREPORTSTATUS_MM2)
				pdata->VL53L1_p_006 =
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	8aba      	ldrh	r2, [r7, #20]
 8006bf2:	82da      	strh	r2, [r3, #22]
 8006bf4:	e003      	b.n	8006bfe <VL53L1_copy_sys_and_core_results_to_range_results+0x11a>
						rmmo_effective_spads_sd0;
			else
				pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd0;
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	889a      	ldrh	r2, [r3, #4]
				pdata->VL53L1_p_006 =
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	82da      	strh	r2, [r3, #22]

			pdata->peak_signal_count_rate_mcps =
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	8afa      	ldrh	r2, [r7, #22]
 8006c02:	861a      	strh	r2, [r3, #48]	; 0x30
					rpscr_crosstalk_corrected_mcps_sd0;
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8006c10:	6a3b      	ldr	r3, [r7, #32]
 8006c12:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	895b      	ldrh	r3, [r3, #10]
 8006c18:	015b      	lsls	r3, r3, #5
 8006c1a:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c22:	d302      	bcc.n	8006c2a <VL53L1_copy_sys_and_core_results_to_range_results+0x146>
				tmpu32 = 0xFFFF;
 8006c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c28:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd0;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	899a      	ldrh	r2, [r3, #12]
			pdata->VL53L1_p_014 =
 8006c36:	6a3b      	ldr	r3, [r7, #32]
 8006c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd0);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	89db      	ldrh	r3, [r3, #14]
			range_mm = (int32_t)(
 8006c40:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	fb02 f303 	mul.w	r3, r2, r3
 8006c4a:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c52:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	da01      	bge.n	8006c5e <VL53L1_copy_sys_and_core_results_to_range_results+0x17a>
 8006c5a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8006c5e:	12db      	asrs	r3, r3, #11
 8006c60:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	b21a      	sxth	r2, r3
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd0;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685a      	ldr	r2, [r3, #4]
			pdata->VL53L1_p_021 =
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd0;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689a      	ldr	r2, [r3, #8]
			pdata->VL53L1_p_013 =
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd0;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681a      	ldr	r2, [r3, #0]
			pdata->VL53L1_p_020 =
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8006c8c:	e04c      	b.n	8006d28 <VL53L1_copy_sys_and_core_results_to_range_results+0x244>
		case 1:

			pdata->VL53L1_p_006 =
				psys->result__dss_actual_effective_spads_sd1;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	8b1a      	ldrh	r2, [r3, #24]
			pdata->VL53L1_p_006 =
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	82da      	strh	r2, [r3, #22]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->avg_signal_count_rate_mcps =
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ca4:	865a      	strh	r2, [r3, #50]	; 0x32
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	869a      	strh	r2, [r3, #52]	; 0x34




			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	8bdb      	ldrh	r3, [r3, #30]
 8006cb2:	015b      	lsls	r3, r3, #5
 8006cb4:	61fb      	str	r3, [r7, #28]
			if (tmpu32 > 0xFFFF)
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cbc:	d302      	bcc.n	8006cc4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1e0>
				tmpu32 = 0xFFFF;
 8006cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cc2:	61fb      	str	r3, [r7, #28]

			pdata->VL53L1_p_005 = (uint16_t)tmpu32;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	879a      	strh	r2, [r3, #60]	; 0x3c



			pdata->VL53L1_p_014 =
				psys->result__phase_sd1;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	8c1a      	ldrh	r2, [r3, #32]
			pdata->VL53L1_p_014 =
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			range_mm = (int32_t)(
			psys->result__final_crosstalk_corrected_range_mm_sd1);
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm = (int32_t)(
 8006cda:	61bb      	str	r3, [r7, #24]


			range_mm *= gain_factor;
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	fb02 f303 	mul.w	r3, r2, r3
 8006ce4:	61bb      	str	r3, [r7, #24]
			range_mm += 0x0400;
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cec:	61bb      	str	r3, [r7, #24]
			range_mm /= 0x0800;
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	da01      	bge.n	8006cf8 <VL53L1_copy_sys_and_core_results_to_range_results+0x214>
 8006cf4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8006cf8:	12db      	asrs	r3, r3, #11
 8006cfa:	61bb      	str	r3, [r7, #24]

			pdata->median_range_mm = (int16_t)range_mm;
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	b21a      	sxth	r2, r3
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

			pdata->VL53L1_p_021 =
				pcore->result_core__ranging_total_events_sd1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695a      	ldr	r2, [r3, #20]
			pdata->VL53L1_p_021 =
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->VL53L1_p_013 =
				pcore->result_core__signal_total_events_sd1;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699a      	ldr	r2, [r3, #24]
			pdata->VL53L1_p_013 =
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	62da      	str	r2, [r3, #44]	; 0x2c
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	619a      	str	r2, [r3, #24]
			pdata->VL53L1_p_020 =
				pcore->result_core__ambient_window_events_sd1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691a      	ldr	r2, [r3, #16]
			pdata->VL53L1_p_020 =
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24

			break;
 8006d26:	bf00      	nop
		}


		pdata->VL53L1_p_028    = pdata->VL53L1_p_014;
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	87da      	strh	r2, [r3, #62]	; 0x3e
		pdata->VL53L1_p_029    = pdata->VL53L1_p_014;
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
		pdata->min_range_mm = pdata->median_range_mm;
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		pdata->max_range_mm = pdata->median_range_mm;
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

		pdata++;
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	334c      	adds	r3, #76	; 0x4c
 8006d5a:	623b      	str	r3, [r7, #32]
	for (i = 0; i < 2; i++) {
 8006d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d60:	3301      	adds	r3, #1
 8006d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	f67f aefc 	bls.w	8006b68 <VL53L1_copy_sys_and_core_results_to_range_results+0x84>
	}



	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2200      	movs	r2, #0
 8006d74:	741a      	strb	r2, [r3, #16]



	switch (psys->result__range_status &
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	785b      	ldrb	r3, [r3, #1]
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	2b11      	cmp	r3, #17
 8006d80:	bf8c      	ite	hi
 8006d82:	2201      	movhi	r2, #1
 8006d84:	2200      	movls	r2, #0
 8006d86:	b2d2      	uxtb	r2, r2
 8006d88:	2a00      	cmp	r2, #0
 8006d8a:	d116      	bne.n	8006dba <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	409a      	lsls	r2, r3
 8006d90:	4b0d      	ldr	r3, [pc, #52]	; (8006dc8 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e4>)
 8006d92:	4013      	ands	r3, r2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	bf14      	ite	ne
 8006d98:	2301      	movne	r3, #1
 8006d9a:	2300      	moveq	r3, #0
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <VL53L1_copy_sys_and_core_results_to_range_results+0x2d6>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	b2da      	uxtb	r2, r3
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	741a      	strb	r2, [r3, #16]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->VL53L1_p_002[0].range_status =
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			VL53L1_DEVICEERROR_NOUPDATE;
	break;
 8006db8:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8006dba:	bf00      	nop
 8006dbc:	372c      	adds	r7, #44	; 0x2c
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	0002200e 	.word	0x0002200e

08006dcc <VL53L1_set_zone_dss_config>:


VL53L1_Error VL53L1_set_zone_dss_config(
	VL53L1_DEV                      Dev,
	VL53L1_zone_private_dyn_cfg_t  *pzone_dyn_cfg)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3318      	adds	r3, #24
 8006dde:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	332c      	adds	r3, #44	; 0x2c
 8006de4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (pstate->cfg_device_state ==
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b05      	cmp	r3, #5
 8006dec:	d109      	bne.n	8006e02 <VL53L1_set_zone_dss_config+0x36>
		VL53L1_DEVICESTATE_RANGING_DSS_MANUAL) {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
		VL53L1_DSS_CONTROL__MODE_EFFSPADS;
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
			pzone_dyn_cfg->dss_requested_effective_spad_count;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	889a      	ldrh	r2, [r3, #4]
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
 8006e00:	e003      	b.n	8006e0a <VL53L1_set_zone_dss_config+0x3e>
	} else {
		pdev->gen_cfg.dss_config__roi_mode_control =
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 236c 	strb.w	r2, [r3, #876]	; 0x36c
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
	}

	LOG_FUNCTION_END(status);
	return status;
 8006e0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <VL53L1_set_dmax_mode>:


VL53L1_Error VL53L1_set_dmax_mode(
	VL53L1_DEV               Dev,
	VL53L1_DeviceDmaxMode    dmax_mode)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	460b      	mov	r3, r1
 8006e24:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e26:	2300      	movs	r3, #0
 8006e28:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3318      	adds	r3, #24
 8006e2e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dmax_mode = dmax_mode;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	78fa      	ldrb	r2, [r7, #3]
 8006e34:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(status);

	return status;
 8006e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <VL53L1_get_dmax_calibration_data>:
VL53L1_Error VL53L1_get_dmax_calibration_data(
	VL53L1_DEV                      Dev,
	VL53L1_DeviceDmaxMode           dmax_mode,
	uint8_t                         zone_id,
	VL53L1_dmax_calibration_data_t *pdmax_cal)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b088      	sub	sp, #32
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	607b      	str	r3, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	72fb      	strb	r3, [r7, #11]
 8006e54:	4613      	mov	r3, r2
 8006e56:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t    *pdev =
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3318      	adds	r3, #24
 8006e60:	61bb      	str	r3, [r7, #24]
		VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8006e68:	3308      	adds	r3, #8
 8006e6a:	617b      	str	r3, [r7, #20]
		VL53L1DevStructGetLLResultsHandle(Dev);

	LOG_FUNCTION_START("");

	switch (dmax_mode) {
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d006      	beq.n	8006e80 <VL53L1_get_dmax_calibration_data+0x3a>
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	dc3e      	bgt.n	8006ef4 <VL53L1_get_dmax_calibration_data+0xae>
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d034      	beq.n	8006ee4 <VL53L1_get_dmax_calibration_data+0x9e>
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d02a      	beq.n	8006ed4 <VL53L1_get_dmax_calibration_data+0x8e>
 8006e7e:	e039      	b.n	8006ef4 <VL53L1_get_dmax_calibration_data+0xae>

	case VL53L1_DEVICEDMAXMODE__PER_ZONE_CAL_DATA:
		pdmax_cal->ref__actual_effective_spads =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].effective_spads;
 8006e80:	7aba      	ldrb	r2, [r7, #10]
 8006e82:	6979      	ldr	r1, [r7, #20]
 8006e84:	4613      	mov	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	f203 73a4 	addw	r3, r3, #1956	; 0x7a4
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	b29a      	uxth	r2, r3
		pdmax_cal->ref__actual_effective_spads =
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	801a      	strh	r2, [r3, #0]
		pdmax_cal->ref__peak_signal_count_rate_mcps =
		(uint16_t)pres->zone_cal.VL53L1_p_002[zone_id].peak_rate_mcps;
 8006e9a:	7aba      	ldrb	r2, [r7, #10]
 8006e9c:	6979      	ldr	r1, [r7, #20]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	1a9b      	subs	r3, r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	b29a      	uxth	r2, r3
		pdmax_cal->ref__peak_signal_count_rate_mcps =
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	805a      	strh	r2, [r3, #2]
		pdmax_cal->ref__distance_mm =
		pres->zone_cal.cal_distance_mm;
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	f9b3 3792 	ldrsh.w	r3, [r3, #1938]	; 0x792
 8006eba:	b29a      	uxth	r2, r3
		pdmax_cal->ref__distance_mm =
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	809a      	strh	r2, [r3, #4]
		pdmax_cal->ref_reflectance_pc =
		pres->zone_cal.cal_reflectance_pc;
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f8b3 2794 	ldrh.w	r2, [r3, #1940]	; 0x794
		pdmax_cal->ref_reflectance_pc =
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	80da      	strh	r2, [r3, #6]
		pdmax_cal->coverglass_transmission = 0x0100;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ed0:	811a      	strh	r2, [r3, #8]
	break;
 8006ed2:	e012      	b.n	8006efa <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__CUST_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->cust_dmax_cal),
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	33ae      	adds	r3, #174	; 0xae
		memcpy(
 8006ed8:	220a      	movs	r2, #10
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f012 f91b 	bl	8019118 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8006ee2:	e00a      	b.n	8006efa <VL53L1_get_dmax_calibration_data+0xb4>

	case VL53L1_DEVICEDMAXMODE__FMT_CAL_DATA:
		memcpy(
			pdmax_cal,
			&(pdev->fmt_dmax_cal),
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	33a4      	adds	r3, #164	; 0xa4
		memcpy(
 8006ee8:	220a      	movs	r2, #10
 8006eea:	4619      	mov	r1, r3
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f012 f913 	bl	8019118 <memcpy>
			sizeof(VL53L1_dmax_calibration_data_t));
	break;
 8006ef2:	e002      	b.n	8006efa <VL53L1_get_dmax_calibration_data+0xb4>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8006ef4:	23fc      	movs	r3, #252	; 0xfc
 8006ef6:	77fb      	strb	r3, [r7, #31]
	break;
 8006ef8:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8006efa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3720      	adds	r7, #32
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b089      	sub	sp, #36	; 0x24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	460b      	mov	r3, r1
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	817b      	strh	r3, [r7, #10]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006f16:	2300      	movs	r3, #0
 8006f18:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3318      	adds	r3, #24
 8006f1e:	61bb      	str	r3, [r7, #24]
	VL53L1_hist_post_process_config_t *pHP = &(pdev->histpostprocess);
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006f26:	617b      	str	r3, [r7, #20]
	VL53L1_xtalkextract_config_t *pXC = &(pdev->xtalk_extract_cfg);
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8006f2e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8006f30:	897b      	ldrh	r3, [r7, #10]
 8006f32:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8006f36:	2bbe      	cmp	r3, #190	; 0xbe
 8006f38:	f200 86fc 	bhi.w	8007d34 <VL53L1_get_tuning_parm+0xe2c>
 8006f3c:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <VL53L1_get_tuning_parm+0x3c>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08007241 	.word	0x08007241
 8006f48:	08007251 	.word	0x08007251
 8006f4c:	08007261 	.word	0x08007261
 8006f50:	08007271 	.word	0x08007271
 8006f54:	0800727f 	.word	0x0800727f
 8006f58:	0800728d 	.word	0x0800728d
 8006f5c:	0800729b 	.word	0x0800729b
 8006f60:	080072a9 	.word	0x080072a9
 8006f64:	080072b7 	.word	0x080072b7
 8006f68:	080072c5 	.word	0x080072c5
 8006f6c:	080072d3 	.word	0x080072d3
 8006f70:	080072df 	.word	0x080072df
 8006f74:	080072ed 	.word	0x080072ed
 8006f78:	080072fb 	.word	0x080072fb
 8006f7c:	08007307 	.word	0x08007307
 8006f80:	08007315 	.word	0x08007315
 8006f84:	08007323 	.word	0x08007323
 8006f88:	08007333 	.word	0x08007333
 8006f8c:	08007343 	.word	0x08007343
 8006f90:	08007351 	.word	0x08007351
 8006f94:	08007361 	.word	0x08007361
 8006f98:	0800736f 	.word	0x0800736f
 8006f9c:	0800737f 	.word	0x0800737f
 8006fa0:	0800738f 	.word	0x0800738f
 8006fa4:	0800739f 	.word	0x0800739f
 8006fa8:	080073af 	.word	0x080073af
 8006fac:	080073bf 	.word	0x080073bf
 8006fb0:	080073cf 	.word	0x080073cf
 8006fb4:	080073df 	.word	0x080073df
 8006fb8:	080073ef 	.word	0x080073ef
 8006fbc:	080073ff 	.word	0x080073ff
 8006fc0:	0800740d 	.word	0x0800740d
 8006fc4:	0800741d 	.word	0x0800741d
 8006fc8:	0800742d 	.word	0x0800742d
 8006fcc:	0800743d 	.word	0x0800743d
 8006fd0:	0800744d 	.word	0x0800744d
 8006fd4:	0800745d 	.word	0x0800745d
 8006fd8:	0800746d 	.word	0x0800746d
 8006fdc:	0800747d 	.word	0x0800747d
 8006fe0:	0800748d 	.word	0x0800748d
 8006fe4:	0800749d 	.word	0x0800749d
 8006fe8:	080074ad 	.word	0x080074ad
 8006fec:	080074bd 	.word	0x080074bd
 8006ff0:	080074cd 	.word	0x080074cd
 8006ff4:	080074dd 	.word	0x080074dd
 8006ff8:	080074ed 	.word	0x080074ed
 8006ffc:	080074fd 	.word	0x080074fd
 8007000:	0800750d 	.word	0x0800750d
 8007004:	0800751d 	.word	0x0800751d
 8007008:	0800752d 	.word	0x0800752d
 800700c:	0800753d 	.word	0x0800753d
 8007010:	0800754b 	.word	0x0800754b
 8007014:	08007559 	.word	0x08007559
 8007018:	08007567 	.word	0x08007567
 800701c:	08007575 	.word	0x08007575
 8007020:	08007583 	.word	0x08007583
 8007024:	08007591 	.word	0x08007591
 8007028:	0800759f 	.word	0x0800759f
 800702c:	080075ad 	.word	0x080075ad
 8007030:	080075bb 	.word	0x080075bb
 8007034:	080075c9 	.word	0x080075c9
 8007038:	080075d7 	.word	0x080075d7
 800703c:	080075e5 	.word	0x080075e5
 8007040:	080075f3 	.word	0x080075f3
 8007044:	08007601 	.word	0x08007601
 8007048:	0800760f 	.word	0x0800760f
 800704c:	0800761d 	.word	0x0800761d
 8007050:	0800762b 	.word	0x0800762b
 8007054:	08007639 	.word	0x08007639
 8007058:	08007647 	.word	0x08007647
 800705c:	08007655 	.word	0x08007655
 8007060:	08007663 	.word	0x08007663
 8007064:	08007671 	.word	0x08007671
 8007068:	0800767f 	.word	0x0800767f
 800706c:	0800768b 	.word	0x0800768b
 8007070:	08007699 	.word	0x08007699
 8007074:	080076a7 	.word	0x080076a7
 8007078:	080076b3 	.word	0x080076b3
 800707c:	080076bf 	.word	0x080076bf
 8007080:	080076cb 	.word	0x080076cb
 8007084:	080076d7 	.word	0x080076d7
 8007088:	080076e3 	.word	0x080076e3
 800708c:	080076ef 	.word	0x080076ef
 8007090:	080076fd 	.word	0x080076fd
 8007094:	0800770b 	.word	0x0800770b
 8007098:	08007719 	.word	0x08007719
 800709c:	08007727 	.word	0x08007727
 80070a0:	08007735 	.word	0x08007735
 80070a4:	08007743 	.word	0x08007743
 80070a8:	08007751 	.word	0x08007751
 80070ac:	0800775f 	.word	0x0800775f
 80070b0:	0800776d 	.word	0x0800776d
 80070b4:	0800777b 	.word	0x0800777b
 80070b8:	08007789 	.word	0x08007789
 80070bc:	08007797 	.word	0x08007797
 80070c0:	080077a5 	.word	0x080077a5
 80070c4:	080077b3 	.word	0x080077b3
 80070c8:	080077c1 	.word	0x080077c1
 80070cc:	080077cf 	.word	0x080077cf
 80070d0:	080077dd 	.word	0x080077dd
 80070d4:	080077eb 	.word	0x080077eb
 80070d8:	080077f9 	.word	0x080077f9
 80070dc:	08007807 	.word	0x08007807
 80070e0:	08007815 	.word	0x08007815
 80070e4:	08007823 	.word	0x08007823
 80070e8:	08007831 	.word	0x08007831
 80070ec:	0800783f 	.word	0x0800783f
 80070f0:	0800784d 	.word	0x0800784d
 80070f4:	0800785b 	.word	0x0800785b
 80070f8:	08007869 	.word	0x08007869
 80070fc:	08007877 	.word	0x08007877
 8007100:	08007885 	.word	0x08007885
 8007104:	08007893 	.word	0x08007893
 8007108:	080078a1 	.word	0x080078a1
 800710c:	080078af 	.word	0x080078af
 8007110:	080078bd 	.word	0x080078bd
 8007114:	080078cb 	.word	0x080078cb
 8007118:	080078d9 	.word	0x080078d9
 800711c:	080078e7 	.word	0x080078e7
 8007120:	080078f9 	.word	0x080078f9
 8007124:	0800790b 	.word	0x0800790b
 8007128:	0800791d 	.word	0x0800791d
 800712c:	0800792f 	.word	0x0800792f
 8007130:	08007941 	.word	0x08007941
 8007134:	08007953 	.word	0x08007953
 8007138:	08007965 	.word	0x08007965
 800713c:	08007977 	.word	0x08007977
 8007140:	08007989 	.word	0x08007989
 8007144:	0800799b 	.word	0x0800799b
 8007148:	080079ad 	.word	0x080079ad
 800714c:	080079bf 	.word	0x080079bf
 8007150:	080079d1 	.word	0x080079d1
 8007154:	080079e3 	.word	0x080079e3
 8007158:	080079f5 	.word	0x080079f5
 800715c:	08007a07 	.word	0x08007a07
 8007160:	08007a19 	.word	0x08007a19
 8007164:	08007a2b 	.word	0x08007a2b
 8007168:	08007a3d 	.word	0x08007a3d
 800716c:	08007a4b 	.word	0x08007a4b
 8007170:	08007a59 	.word	0x08007a59
 8007174:	08007a67 	.word	0x08007a67
 8007178:	08007a75 	.word	0x08007a75
 800717c:	08007a83 	.word	0x08007a83
 8007180:	08007a91 	.word	0x08007a91
 8007184:	08007a9f 	.word	0x08007a9f
 8007188:	08007ab1 	.word	0x08007ab1
 800718c:	08007abf 	.word	0x08007abf
 8007190:	08007acd 	.word	0x08007acd
 8007194:	08007adb 	.word	0x08007adb
 8007198:	08007ae9 	.word	0x08007ae9
 800719c:	08007af7 	.word	0x08007af7
 80071a0:	08007b05 	.word	0x08007b05
 80071a4:	08007b13 	.word	0x08007b13
 80071a8:	08007b21 	.word	0x08007b21
 80071ac:	08007b2f 	.word	0x08007b2f
 80071b0:	08007b3d 	.word	0x08007b3d
 80071b4:	08007b4b 	.word	0x08007b4b
 80071b8:	08007b59 	.word	0x08007b59
 80071bc:	08007b67 	.word	0x08007b67
 80071c0:	08007b75 	.word	0x08007b75
 80071c4:	08007b83 	.word	0x08007b83
 80071c8:	08007b91 	.word	0x08007b91
 80071cc:	08007b9f 	.word	0x08007b9f
 80071d0:	08007bad 	.word	0x08007bad
 80071d4:	08007bbb 	.word	0x08007bbb
 80071d8:	08007bc9 	.word	0x08007bc9
 80071dc:	08007bd7 	.word	0x08007bd7
 80071e0:	08007be5 	.word	0x08007be5
 80071e4:	08007bf3 	.word	0x08007bf3
 80071e8:	08007c01 	.word	0x08007c01
 80071ec:	08007c0f 	.word	0x08007c0f
 80071f0:	08007c1d 	.word	0x08007c1d
 80071f4:	08007c2b 	.word	0x08007c2b
 80071f8:	08007c39 	.word	0x08007c39
 80071fc:	08007c47 	.word	0x08007c47
 8007200:	08007c55 	.word	0x08007c55
 8007204:	08007c63 	.word	0x08007c63
 8007208:	08007c71 	.word	0x08007c71
 800720c:	08007c7f 	.word	0x08007c7f
 8007210:	08007c8d 	.word	0x08007c8d
 8007214:	08007c9b 	.word	0x08007c9b
 8007218:	08007ca9 	.word	0x08007ca9
 800721c:	08007cb7 	.word	0x08007cb7
 8007220:	08007cc5 	.word	0x08007cc5
 8007224:	08007cd3 	.word	0x08007cd3
 8007228:	08007ce1 	.word	0x08007ce1
 800722c:	08007cef 	.word	0x08007cef
 8007230:	08007cfd 	.word	0x08007cfd
 8007234:	08007d0b 	.word	0x08007d0b
 8007238:	08007d19 	.word	0x08007d19
 800723c:	08007d27 	.word	0x08007d27

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
			(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	f8b3 3130 	ldrh.w	r3, [r3, #304]	; 0x130
 8007246:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	601a      	str	r2, [r3, #0]
	break;
 800724c:	f000 bd79 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	f8b3 3132 	ldrh.w	r3, [r3, #306]	; 0x132
 8007256:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	601a      	str	r2, [r3, #0]
	break;
 800725c:	f000 bd71 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
 8007266:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	601a      	str	r2, [r3, #0]
	break;
 800726c:	f000 bd69 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_ALGO_SELECT:
		*ptuning_parm_value =
				(int32_t)pHP->hist_algo_select;
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	601a      	str	r2, [r3, #0]
	break;
 800727a:	f000 bd62 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_TARGET_ORDER:
		*ptuning_parm_value =
				(int32_t)pHP->hist_target_order;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	601a      	str	r2, [r3, #0]
	break;
 8007288:	f000 bd5b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_0:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi0;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	789b      	ldrb	r3, [r3, #2]
 8007290:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	601a      	str	r2, [r3, #0]
	break;
 8007296:	f000 bd54 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_FILTER_WOI_1:
		*ptuning_parm_value =
				(int32_t)pHP->filter_woi1;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	78db      	ldrb	r3, [r3, #3]
 800729e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	601a      	str	r2, [r3, #0]
	break;
 80072a4:	f000 bd4d 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD:
		*ptuning_parm_value =
				(int32_t)pHP->hist_amb_est_method;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	791b      	ldrb	r3, [r3, #4]
 80072ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]
	break;
 80072b2:	f000 bd46 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma0;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	795b      	ldrb	r3, [r3, #5]
 80072ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	601a      	str	r2, [r3, #0]
	break;
 80072c0:	f000 bd3f 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_sigma1;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	799b      	ldrb	r3, [r3, #6]
 80072c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	601a      	str	r2, [r3, #0]
	break;
 80072ce:	f000 bd38 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS:
		*ptuning_parm_value =
				(int32_t)pHP->min_ambient_thresh_events;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	68da      	ldr	r2, [r3, #12]
		*ptuning_parm_value =
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	601a      	str	r2, [r3, #0]
	break;
 80072da:	f000 bd32 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER:
		*ptuning_parm_value =
				(int32_t)pHP->ambient_thresh_events_scaler;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	891b      	ldrh	r3, [r3, #8]
 80072e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	601a      	str	r2, [r3, #0]
	break;
 80072e8:	f000 bd2b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD:
		*ptuning_parm_value =
				(int32_t)pHP->noise_threshold;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	8a1b      	ldrh	r3, [r3, #16]
 80072f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	601a      	str	r2, [r3, #0]
	break;
 80072f6:	f000 bd24 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT:
		*ptuning_parm_value =
				(int32_t)pHP->signal_total_events_limit;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	695a      	ldr	r2, [r3, #20]
		*ptuning_parm_value =
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	601a      	str	r2, [r3, #0]
	break;
 8007302:	f000 bd1e 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_estimator__sigma_ref_mm;
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	7e1b      	ldrb	r3, [r3, #24]
 800730a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	601a      	str	r2, [r3, #0]
	break;
 8007310:	f000 bd17 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pHP->sigma_thresh;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	8b5b      	ldrh	r3, [r3, #26]
 8007318:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	601a      	str	r2, [r3, #0]
	break;
 800731e:	f000 bd10 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.histogram_ranging_gain_factor;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8007328:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	601a      	str	r2, [r3, #0]
	break;
 800732e:	f000 bd08 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__phase_tolerance;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007338:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	601a      	str	r2, [r3, #0]
	break;
 800733e:	f000 bd00 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM:
		*ptuning_parm_value =
	(int32_t)pHP->algo__consistency_check__min_max_tolerance;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007346:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	601a      	str	r2, [r3, #0]
	break;
 800734c:	f000 bcf9 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_sigma;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007356:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	601a      	str	r2, [r3, #0]
	break;
 800735c:	f000 bcf1 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT:
		*ptuning_parm_value =
		(int32_t)pHP->algo__consistency_check__event_min_spad_count;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007364:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	601a      	str	r2, [r3, #0]
	break;
 800736a:	f000 bcea 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_long;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007374:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	601a      	str	r2, [r3, #0]
	break;
 800737a:	f000 bce2 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_med;
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
 8007384:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	601a      	str	r2, [r3, #0]
	break;
 800738a:	f000 bcda 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_hist_short;
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
 8007394:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	601a      	str	r2, [r3, #0]
	break;
 800739a:	f000 bcd2 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_long;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80073a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	601a      	str	r2, [r3, #0]
	break;
 80073aa:	f000 bcca 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_med;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80073b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	601a      	str	r2, [r3, #0]
	break;
 80073ba:	f000 bcc2 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_hist_short;
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 80073c4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	601a      	str	r2, [r3, #0]
	break;
 80073ca:	f000 bcba 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_min_valid_range_mm);
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	f9b3 32ea 	ldrsh.w	r3, [r3, #746]	; 0x2ea
		*ptuning_parm_value = (int32_t)(
 80073d4:	461a      	mov	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	601a      	str	r2, [r3, #0]
	break;
 80073da:	f000 bcb2 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_range_mm);
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	f9b3 32ec 	ldrsh.w	r3, [r3, #748]	; 0x2ec
		*ptuning_parm_value = (int32_t)(
 80073e4:	461a      	mov	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
	break;
 80073ea:	f000 bcaa 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.algo__crosstalk_detect_max_sigma_mm;
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 80073f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	601a      	str	r2, [r3, #0]
	break;
 80073fa:	f000 bca2 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MIN_MAX_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_min_max_tolerance;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007402:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	601a      	str	r2, [r3, #0]
	break;
 8007408:	f000 bc9b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->xtalk_cfg.algo__crosstalk_detect_max_valid_rate_kcps);
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f8b3 32ee 	ldrh.w	r3, [r3, #750]	; 0x2ee
		*ptuning_parm_value = (int32_t)(
 8007412:	461a      	mov	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	601a      	str	r2, [r3, #0]
	break;
 8007418:	f000 bc93 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA:
		*ptuning_parm_value =
		(int32_t)pHP->algo__crosstalk_detect_event_sigma;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007422:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	601a      	str	r2, [r3, #0]
	break;
 8007428:	f000 bc8b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.histogram_mode_crosstalk_margin_kcps;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	f9b3 32e2 	ldrsh.w	r3, [r3, #738]	; 0x2e2
 8007432:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	601a      	str	r2, [r3, #0]
	break;
 8007438:	f000 bc83 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007442:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	601a      	str	r2, [r3, #0]
	break;
 8007448:	f000 bc7b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007452:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	601a      	str	r2, [r3, #0]
	break;
 8007458:	f000 bc73 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8007462:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	601a      	str	r2, [r3, #0]
	break;
 8007468:	f000 bc6b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
		(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8007472:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	601a      	str	r2, [r3, #0]
	break;
 8007478:	f000 bc63 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f893 3146 	ldrb.w	r3, [r3, #326]	; 0x146
 8007482:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	601a      	str	r2, [r3, #0]
	break;
 8007488:	f000 bc5b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	f8b3 3148 	ldrh.w	r3, [r3, #328]	; 0x148
 8007492:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	601a      	str	r2, [r3, #0]
	break;
 8007498:	f000 bc53 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	f8b3 314a 	ldrh.w	r3, [r3, #330]	; 0x14a
 80074a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	601a      	str	r2, [r3, #0]
	break;
 80074a8:	f000 bc4b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 80074b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	601a      	str	r2, [r3, #0]
	break;
 80074b8:	f000 bc43 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps);
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
		*ptuning_parm_value = (int32_t)(
 80074c2:	461a      	mov	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	601a      	str	r2, [r3, #0]
	break;
 80074c8:	f000 bc3b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
 80074d2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]
	break;
 80074d8:	f000 bc33 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value = (int32_t)(
		pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps);
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
		*ptuning_parm_value = (int32_t)(
 80074e2:	461a      	mov	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	601a      	str	r2, [r3, #0]
	break;
 80074e8:	f000 bc2b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80074f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	601a      	str	r2, [r3, #0]
	break;
 80074f8:	f000 bc23 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8007502:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	601a      	str	r2, [r3, #0]
	break;
 8007508:	f000 bc1b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8007512:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	601a      	str	r2, [r3, #0]
	break;
 8007518:	f000 bc13 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8007522:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	601a      	str	r2, [r3, #0]
	break;
 8007528:	f000 bc0b 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	f893 3157 	ldrb.w	r3, [r3, #343]	; 0x157
 8007532:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	601a      	str	r2, [r3, #0]
	break;
 8007538:	f000 bc03 	b.w	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 8007542:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	601a      	str	r2, [r3, #0]
	break;
 8007548:	e3fb      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
 8007550:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	601a      	str	r2, [r3, #0]
	break;
 8007556:	e3f4      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	f9b3 32e4 	ldrsh.w	r3, [r3, #740]	; 0x2e4
 800755e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	601a      	str	r2, [r3, #0]
	break;
 8007564:	e3ed      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
 800756c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	601a      	str	r2, [r3, #0]
	break;
 8007572:	e3e6      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f893 3137 	ldrb.w	r3, [r3, #311]	; 0x137
 800757a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	601a      	str	r2, [r3, #0]
	break;
 8007580:	e3df      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8007588:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	601a      	str	r2, [r3, #0]
	break;
 800758e:	e3d8      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f893 3139 	ldrb.w	r3, [r3, #313]	; 0x139
 8007596:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	601a      	str	r2, [r3, #0]
	break;
 800759c:	e3d1      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80075a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	601a      	str	r2, [r3, #0]
	break;
 80075aa:	e3ca      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	f893 313b 	ldrb.w	r3, [r3, #315]	; 0x13b
 80075b2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
	break;
 80075b8:	e3c3      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80075c0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	601a      	str	r2, [r3, #0]
	break;
 80075c6:	e3bc      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.signal_thresh_sigma;
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	f893 3298 	ldrb.w	r3, [r3, #664]	; 0x298
 80075ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	601a      	str	r2, [r3, #0]
	break;
 80075d4:	e3b5      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[0];
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	; 0x2a4
 80075dc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	601a      	str	r2, [r3, #0]
	break;
 80075e2:	e3ae      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[1];
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	f8b3 32a6 	ldrh.w	r3, [r3, #678]	; 0x2a6
 80075ea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	601a      	str	r2, [r3, #0]
	break;
 80075f0:	e3a7      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[2];
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	f8b3 32a8 	ldrh.w	r3, [r3, #680]	; 0x2a8
 80075f8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	601a      	str	r2, [r3, #0]
	break;
 80075fe:	e3a0      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[3];
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	f8b3 32aa 	ldrh.w	r3, [r3, #682]	; 0x2aa
 8007606:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	601a      	str	r2, [r3, #0]
	break;
 800760c:	e399      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4:
		*ptuning_parm_value =
		(int32_t)pdev->dmax_cfg.target_reflectance_for_dmax_calc[4];
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	f8b3 32ac 	ldrh.w	r3, [r3, #684]	; 0x2ac
 8007614:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	601a      	str	r2, [r3, #0]
	break;
 800761a:	e392      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
		(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8007622:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	601a      	str	r2, [r3, #0]
	break;
 8007628:	e38b      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.device_test_mode;
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8007630:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	601a      	str	r2, [r3, #0]
	break;
 8007636:	e384      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.VL53L1_p_009;
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 800763e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
	break;
 8007644:	e37d      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.timeout_us;
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800764c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
	break;
 8007652:	e376      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 800765a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	601a      	str	r2, [r3, #0]
	break;
 8007660:	e36f      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	f8b3 3246 	ldrh.w	r3, [r3, #582]	; 0x246
 8007668:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
	break;
 800766e:	e368      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8007676:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	601a      	str	r2, [r3, #0]
	break;
 800767c:	e361      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pXC->num_of_samples;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	7c1b      	ldrb	r3, [r3, #16]
 8007682:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	601a      	str	r2, [r3, #0]
	break;
 8007688:	e35b      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_min_valid_range_mm;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007690:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	601a      	str	r2, [r3, #0]
	break;
 8007696:	e354      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_range_mm;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800769e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	601a      	str	r2, [r3, #0]
	break;
 80076a4:	e34d      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pXC->dss_config__target_total_rate_mcps;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	601a      	str	r2, [r3, #0]
	break;
 80076b0:	e347      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->phasecal_config_timeout_us;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	601a      	str	r2, [r3, #0]
	break;
 80076bc:	e341      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_valid_rate_kcps;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	8adb      	ldrh	r3, [r3, #22]
 80076c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	601a      	str	r2, [r3, #0]
	break;
 80076c8:	e33b      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM:
		*ptuning_parm_value =
		(int32_t)pXC->algo__crosstalk_extract_max_sigma_mm;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	8b1b      	ldrh	r3, [r3, #24]
 80076ce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	601a      	str	r2, [r3, #0]
	break;
 80076d4:	e335      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->mm_config_timeout_us;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	601a      	str	r2, [r3, #0]
	break;
 80076e0:	e32f      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pXC->range_config_timeout_us;
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	601a      	str	r2, [r3, #0]
	break;
 80076ec:	e329      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	f8b3 32f4 	ldrh.w	r3, [r3, #756]	; 0x2f4
 80076f4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	601a      	str	r2, [r3, #0]
	break;
 80076fa:	e322      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
 8007702:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	601a      	str	r2, [r3, #0]
	break;
 8007708:	e31b      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007710:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
	break;
 8007716:	e314      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800771e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	601a      	str	r2, [r3, #0]
	break;
 8007724:	e30d      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 800772c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	601a      	str	r2, [r3, #0]
	break;
 8007732:	e306      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
	(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	f893 3305 	ldrb.w	r3, [r3, #773]	; 0x305
 800773a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	601a      	str	r2, [r3, #0]
	break;
 8007740:	e2ff      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	f893 3306 	ldrb.w	r3, [r3, #774]	; 0x306
 8007748:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	601a      	str	r2, [r3, #0]
	break;
 800774e:	e2f8      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.dss_config__target_total_rate_mcps;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	f8b3 3308 	ldrh.w	r3, [r3, #776]	; 0x308
 8007756:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	601a      	str	r2, [r3, #0]
	break;
 800775c:	e2f1      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
	(int32_t)pdev->zonecal_cfg.phasecal_config_timeout_us;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 8007764:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	601a      	str	r2, [r3, #0]
	break;
 800776a:	e2ea      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.mm_config_timeout_us;
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8007772:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	601a      	str	r2, [r3, #0]
	break;
 8007778:	e2e3      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.phasecal_num_of_samples;
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	f8b3 3318 	ldrh.w	r3, [r3, #792]	; 0x318
 8007780:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	601a      	str	r2, [r3, #0]
	break;
 8007786:	e2dc      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.range_config_timeout_us;
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800778e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]
	break;
 8007794:	e2d5      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES:
		*ptuning_parm_value =
		(int32_t)pdev->zonecal_cfg.zone_num_of_samples;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	f8b3 331a 	ldrh.w	r3, [r3, #794]	; 0x31a
 800779c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
	break;
 80077a2:	e2ce      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.VL53L1_p_009;
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 80077aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	601a      	str	r2, [r3, #0]
	break;
 80077b0:	e2c7      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.vcsel_start;
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
 80077b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	601a      	str	r2, [r3, #0]
	break;
 80077be:	e2c0      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	f8b3 3254 	ldrh.w	r3, [r3, #596]	; 0x254
 80077c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	601a      	str	r2, [r3, #0]
	break;
 80077cc:	e2b9      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	f8b3 315c 	ldrh.w	r3, [r3, #348]	; 0x15c
 80077d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	601a      	str	r2, [r3, #0]
	break;
 80077da:	e2b2      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mcps;
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 80077e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	601a      	str	r2, [r3, #0]
	break;
 80077e8:	e2ab      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_histo_mz_mcps;
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
 80077f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	601a      	str	r2, [r3, #0]
	break;
 80077f6:	e2a4      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	f8b3 3162 	ldrh.w	r3, [r3, #354]	; 0x162
 80077fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	601a      	str	r2, [r3, #0]
	break;
 8007804:	e29d      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800780c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]
	break;
 8007812:	e296      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_long_us;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800781a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	601a      	str	r2, [r3, #0]
	break;
 8007820:	e28f      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_med_us;
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8007828:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	601a      	str	r2, [r3, #0]
	break;
 800782e:	e288      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_hist_short_us;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8007836:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	601a      	str	r2, [r3, #0]
	break;
 800783c:	e281      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_long_us;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8007844:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
	break;
 800784a:	e27a      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_med_us;
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8007852:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	601a      	str	r2, [r3, #0]
	break;
 8007858:	e273      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_mz_short_us;
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8007860:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	601a      	str	r2, [r3, #0]
	break;
 8007866:	e26c      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800786e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	601a      	str	r2, [r3, #0]
	break;
 8007874:	e265      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800787c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	601a      	str	r2, [r3, #0]
	break;
 8007882:	e25e      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_histo_us;
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800788a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	601a      	str	r2, [r3, #0]
	break;
 8007890:	e257      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_mz_us;
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8007898:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
	break;
 800789e:	e250      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80078a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	601a      	str	r2, [r3, #0]
	break;
 80078ac:	e249      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80078b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	601a      	str	r2, [r3, #0]
	break;
 80078ba:	e242      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_histo_us;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80078c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	601a      	str	r2, [r3, #0]
	break;
 80078c8:	e23b      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_mz_us;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80078d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	601a      	str	r2, [r3, #0]
	break;
 80078d6:	e234      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80078de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]
	break;
 80078e4:	e22d      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_margin;
 80078e6:	69bb      	ldr	r3, [r7, #24]
 80078e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ec:	f8b3 33dc 	ldrh.w	r3, [r3, #988]	; 0x3dc
 80078f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	601a      	str	r2, [r3, #0]
	break;
 80078f6:	e224      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.noise_margin;
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8007902:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
	break;
 8007908:	e21b      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit;
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007910:	f8d3 33e4 	ldr.w	r3, [r3, #996]	; 0x3e4
 8007914:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	601a      	str	r2, [r3, #0]
	break;
 800791a:	e212      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_xtalk_offset_limit_hi;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007922:	f893 33e8 	ldrb.w	r3, [r3, #1000]	; 0x3e8
 8007926:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	601a      	str	r2, [r3, #0]
	break;
 800792c:	e209      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.sample_limit;
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007934:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007938:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	601a      	str	r2, [r3, #0]
	break;
 800793e:	e200      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.single_xtalk_delta;
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007946:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	; 0x3f0
 800794a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	601a      	str	r2, [r3, #0]
	break;
 8007950:	e1f7      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.averaged_xtalk_delta;
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007958:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	; 0x3f4
 800795c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	601a      	str	r2, [r3, #0]
	break;
 8007962:	e1ee      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_clip_limit;
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800796a:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	; 0x3f8
 800796e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	601a      	str	r2, [r3, #0]
	break;
 8007974:	e1e5      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SCALER_CALC_METHOD:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.scaler_calc_method;
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800797c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8007980:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	601a      	str	r2, [r3, #0]
	break;
 8007986:	e1dc      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.x_gradient_scaler;
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800798e:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
 8007992:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	601a      	str	r2, [r3, #0]
	break;
 8007998:	e1d3      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.y_gradient_scaler;
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a0:	f9b3 3404 	ldrsh.w	r3, [r3, #1028]	; 0x404
 80079a4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	601a      	str	r2, [r3, #0]
	break;
 80079aa:	e1ca      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.user_scaler_set;
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079b2:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80079b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	601a      	str	r2, [r3, #0]
	break;
 80079bc:	e1c1      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.smudge_corr_single_apply;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c4:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 80079c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	601a      	str	r2, [r3, #0]
	break;
 80079ce:	e1b8      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD:
		*ptuning_parm_value = (int32_t)(
		pdev->smudge_correct_config.smudge_corr_ambient_threshold);
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079d6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
		*ptuning_parm_value = (int32_t)(
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	601a      	str	r2, [r3, #0]
	break;
 80079e0:	e1af      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_ambient_threshold;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079e8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80079ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	601a      	str	r2, [r3, #0]
	break;
 80079f2:	e1a6      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_sample_limit;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079fa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80079fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]
	break;
 8007a04:	e19d      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_xtalk_offset;
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a0c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8007a10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	601a      	str	r2, [r3, #0]
	break;
 8007a16:	e194      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM:
		*ptuning_parm_value =
		(int32_t)pdev->smudge_correct_config.nodetect_min_range_mm;
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a1e:	f8b3 3414 	ldrh.w	r3, [r3, #1044]	; 0x414
 8007a22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	601a      	str	r2, [r3, #0]
	break;
 8007a28:	e18b      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
		(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a30:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8007a34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	601a      	str	r2, [r3, #0]
	break;
 8007a3a:	e182      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8007a42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	601a      	str	r2, [r3, #0]
	break;
 8007a48:	e17b      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007a50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	601a      	str	r2, [r3, #0]
	break;
 8007a56:	e174      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS:
		*ptuning_parm_value =
		(int32_t)pdev->tuning_parms.tp_dss_target_very_short_mcps;
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8007a5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]
	break;
 8007a64:	e16d      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_phasecal_patch_power;
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8007a6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	601a      	str	r2, [r3, #0]
	break;
 8007a72:	e166      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge;
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 8007a7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	601a      	str	r2, [r3, #0]
	break;
 8007a80:	e15f      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_reset_merge_threshold;
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8007a88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	601a      	str	r2, [r3, #0]
	break;
 8007a8e:	e158      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE:
		*ptuning_parm_value =
		(int32_t) pdev->tuning_parms.tp_hist_merge_max_size;
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8007a96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	601a      	str	r2, [r3, #0]
	break;
 8007a9c:	e151      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR:
		*ptuning_parm_value =
		pdev->smudge_correct_config.max_smudge_factor;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aa4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8007aa8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	601a      	str	r2, [r3, #0]
	break;
 8007aae:	e148      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>

	case VL53L1_TUNINGPARM_UWR_ENABLE:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_enable;
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	f893 31bd 	ldrb.w	r3, [r3, #445]	; 0x1bd
 8007ab6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	601a      	str	r2, [r3, #0]
	break;
 8007abc:	e141      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_min;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	f9b3 31be 	ldrsh.w	r3, [r3, #446]	; 0x1be
 8007ac4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	601a      	str	r2, [r3, #0]
	break;
 8007aca:	e13a      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_1_max;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	f9b3 31c0 	ldrsh.w	r3, [r3, #448]	; 0x1c0
 8007ad2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	601a      	str	r2, [r3, #0]
	break;
 8007ad8:	e133      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_min;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	f9b3 31c2 	ldrsh.w	r3, [r3, #450]	; 0x1c2
 8007ae0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	601a      	str	r2, [r3, #0]
	break;
 8007ae6:	e12c      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_2_max;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	f9b3 31c4 	ldrsh.w	r3, [r3, #452]	; 0x1c4
 8007aee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	601a      	str	r2, [r3, #0]
	break;
 8007af4:	e125      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_min;
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f9b3 31c6 	ldrsh.w	r3, [r3, #454]	; 0x1c6
 8007afc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	601a      	str	r2, [r3, #0]
	break;
 8007b02:	e11e      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_3_max;
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	f9b3 31c8 	ldrsh.w	r3, [r3, #456]	; 0x1c8
 8007b0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	601a      	str	r2, [r3, #0]
	break;
 8007b10:	e117      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_min;
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	f9b3 31ca 	ldrsh.w	r3, [r3, #458]	; 0x1ca
 8007b18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	601a      	str	r2, [r3, #0]
	break;
 8007b1e:	e110      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_4_max;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	f9b3 31cc 	ldrsh.w	r3, [r3, #460]	; 0x1cc
 8007b26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	601a      	str	r2, [r3, #0]
	break;
 8007b2c:	e109      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_min;
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	f9b3 31ce 	ldrsh.w	r3, [r3, #462]	; 0x1ce
 8007b34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	601a      	str	r2, [r3, #0]
	break;
 8007b3a:	e102      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_5_max;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	f9b3 31d0 	ldrsh.w	r3, [r3, #464]	; 0x1d0
 8007b42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	601a      	str	r2, [r3, #0]
	break;
 8007b48:	e0fb      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_min;
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	f9b3 31d2 	ldrsh.w	r3, [r3, #466]	; 0x1d2
 8007b50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	601a      	str	r2, [r3, #0]
	break;
 8007b56:	e0f4      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_z_6_max;
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	f9b3 31d4 	ldrsh.w	r3, [r3, #468]	; 0x1d4
 8007b5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	601a      	str	r2, [r3, #0]
	break;
 8007b64:	e0ed      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangea;
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f9b3 31d6 	ldrsh.w	r3, [r3, #470]	; 0x1d6
 8007b6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	601a      	str	r2, [r3, #0]
	break;
 8007b72:	e0e6      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_1_rangeb;
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	f9b3 31d8 	ldrsh.w	r3, [r3, #472]	; 0x1d8
 8007b7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	601a      	str	r2, [r3, #0]
	break;
 8007b80:	e0df      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangea;
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f9b3 31da 	ldrsh.w	r3, [r3, #474]	; 0x1da
 8007b88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	601a      	str	r2, [r3, #0]
	break;
 8007b8e:	e0d8      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_2_rangeb;
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	f9b3 31dc 	ldrsh.w	r3, [r3, #476]	; 0x1dc
 8007b96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	601a      	str	r2, [r3, #0]
	break;
 8007b9c:	e0d1      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangea;
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	f9b3 31de 	ldrsh.w	r3, [r3, #478]	; 0x1de
 8007ba4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	601a      	str	r2, [r3, #0]
	break;
 8007baa:	e0ca      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_3_rangeb;
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	f9b3 31e0 	ldrsh.w	r3, [r3, #480]	; 0x1e0
 8007bb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]
	break;
 8007bb8:	e0c3      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangea;
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	f9b3 31e2 	ldrsh.w	r3, [r3, #482]	; 0x1e2
 8007bc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	601a      	str	r2, [r3, #0]
	break;
 8007bc6:	e0bc      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_4_rangeb;
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f9b3 31e4 	ldrsh.w	r3, [r3, #484]	; 0x1e4
 8007bce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	601a      	str	r2, [r3, #0]
	break;
 8007bd4:	e0b5      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangea;
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	f9b3 31e6 	ldrsh.w	r3, [r3, #486]	; 0x1e6
 8007bdc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	601a      	str	r2, [r3, #0]
	break;
 8007be2:	e0ae      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_5_rangeb;
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	f9b3 31e8 	ldrsh.w	r3, [r3, #488]	; 0x1e8
 8007bea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	601a      	str	r2, [r3, #0]
	break;
 8007bf0:	e0a7      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangea;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	f9b3 31ea 	ldrsh.w	r3, [r3, #490]	; 0x1ea
 8007bf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	601a      	str	r2, [r3, #0]
	break;
 8007bfe:	e0a0      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_med_corr_z_6_rangeb;
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	f9b3 31ec 	ldrsh.w	r3, [r3, #492]	; 0x1ec
 8007c06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	601a      	str	r2, [r3, #0]
	break;
 8007c0c:	e099      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_min;
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	f9b3 31ee 	ldrsh.w	r3, [r3, #494]	; 0x1ee
 8007c14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	601a      	str	r2, [r3, #0]
	break;
 8007c1a:	e092      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_1_max;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	f9b3 31f0 	ldrsh.w	r3, [r3, #496]	; 0x1f0
 8007c22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	601a      	str	r2, [r3, #0]
	break;
 8007c28:	e08b      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_min;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	f9b3 31f2 	ldrsh.w	r3, [r3, #498]	; 0x1f2
 8007c30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	601a      	str	r2, [r3, #0]
	break;
 8007c36:	e084      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_2_max;
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	f9b3 31f4 	ldrsh.w	r3, [r3, #500]	; 0x1f4
 8007c3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]
	break;
 8007c44:	e07d      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_min;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f9b3 31f6 	ldrsh.w	r3, [r3, #502]	; 0x1f6
 8007c4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	601a      	str	r2, [r3, #0]
	break;
 8007c52:	e076      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_3_max;
 8007c54:	69bb      	ldr	r3, [r7, #24]
 8007c56:	f9b3 31f8 	ldrsh.w	r3, [r3, #504]	; 0x1f8
 8007c5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	601a      	str	r2, [r3, #0]
	break;
 8007c60:	e06f      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_min;
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	f9b3 31fa 	ldrsh.w	r3, [r3, #506]	; 0x1fa
 8007c68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	601a      	str	r2, [r3, #0]
	break;
 8007c6e:	e068      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_4_max;
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	f9b3 31fc 	ldrsh.w	r3, [r3, #508]	; 0x1fc
 8007c76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	601a      	str	r2, [r3, #0]
	break;
 8007c7c:	e061      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_min;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	f9b3 31fe 	ldrsh.w	r3, [r3, #510]	; 0x1fe
 8007c84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	601a      	str	r2, [r3, #0]
	break;
 8007c8a:	e05a      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_z_5_max;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	f9b3 3200 	ldrsh.w	r3, [r3, #512]	; 0x200
 8007c92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	601a      	str	r2, [r3, #0]
	break;
 8007c98:	e053      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangea;
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	f9b3 3202 	ldrsh.w	r3, [r3, #514]	; 0x202
 8007ca0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	601a      	str	r2, [r3, #0]
	break;
 8007ca6:	e04c      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_1_rangeb;
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	f9b3 3204 	ldrsh.w	r3, [r3, #516]	; 0x204
 8007cae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	601a      	str	r2, [r3, #0]
	break;
 8007cb4:	e045      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangea;
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	f9b3 3206 	ldrsh.w	r3, [r3, #518]	; 0x206
 8007cbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	601a      	str	r2, [r3, #0]
	break;
 8007cc2:	e03e      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_2_rangeb;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f9b3 3208 	ldrsh.w	r3, [r3, #520]	; 0x208
 8007cca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	601a      	str	r2, [r3, #0]
	break;
 8007cd0:	e037      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangea;
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	f9b3 320a 	ldrsh.w	r3, [r3, #522]	; 0x20a
 8007cd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	601a      	str	r2, [r3, #0]
	break;
 8007cde:	e030      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_3_rangeb;
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	f9b3 320c 	ldrsh.w	r3, [r3, #524]	; 0x20c
 8007ce6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	601a      	str	r2, [r3, #0]
	break;
 8007cec:	e029      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangea;
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f9b3 320e 	ldrsh.w	r3, [r3, #526]	; 0x20e
 8007cf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	601a      	str	r2, [r3, #0]
	break;
 8007cfa:	e022      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_4_rangeb;
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f9b3 3210 	ldrsh.w	r3, [r3, #528]	; 0x210
 8007d02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	601a      	str	r2, [r3, #0]
	break;
 8007d08:	e01b      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangea;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	f9b3 3212 	ldrsh.w	r3, [r3, #530]	; 0x212
 8007d10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	601a      	str	r2, [r3, #0]
	break;
 8007d16:	e014      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_uwr_lng_corr_z_5_rangeb;
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	f9b3 3214 	ldrsh.w	r3, [r3, #532]	; 0x214
 8007d1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	601a      	str	r2, [r3, #0]
	break;
 8007d24:	e00d      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>
	case VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS:
		*ptuning_parm_value =
		pdev->tuning_parms.tp_min_signal_secondary_targets;
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	601a      	str	r2, [r3, #0]
	break;
 8007d32:	e006      	b.n	8007d42 <VL53L1_get_tuning_parm+0xe3a>

	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8007d3a:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 8007d3c:	23fc      	movs	r3, #252	; 0xfc
 8007d3e:	77fb      	strb	r3, [r7, #31]
	break;
 8007d40:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8007d42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3724      	adds	r7, #36	; 0x24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop

08007d54 <VL53L1_dynamic_xtalk_correction_enable>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_enable(
	VL53L1_DEV                          Dev
	)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	3318      	adds	r3, #24
 8007d64:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 1;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 8007d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <VL53L1_dynamic_xtalk_correction_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_disable(
	VL53L1_DEV                          Dev
	)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b085      	sub	sp, #20
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3318      	adds	r3, #24
 8007d92:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_enabled = 0;
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	LOG_FUNCTION_END(status);

	return status;
 8007da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <VL53L1_dynamic_xtalk_correction_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3318      	adds	r3, #24
 8007dc0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8007dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <VL53L1_dynamic_xtalk_correction_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b085      	sub	sp, #20
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	3318      	adds	r3, #24
 8007dee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_apply_enabled = 0;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9

	LOG_FUNCTION_END(status);

	return status;
 8007dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <VL53L1_dynamic_xtalk_correction_single_apply_enable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_enable(
	VL53L1_DEV                          Dev
	)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007e14:	2300      	movs	r3, #0
 8007e16:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3318      	adds	r3, #24
 8007e1c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 1;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8007e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <VL53L1_dynamic_xtalk_correction_single_apply_disable>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_single_apply_disable(
	VL53L1_DEV                          Dev
	)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b085      	sub	sp, #20
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3318      	adds	r3, #24
 8007e4a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->smudge_correct_config.smudge_corr_single_apply = 0;
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

	LOG_FUNCTION_END(status);

	return status;
 8007e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <VL53L1_init_refspadchar_config_struct>:
	status, fmt, ##__VA_ARGS__)


VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->device_test_mode =
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2208      	movs	r2, #8
 8007e78:	701a      	strb	r2, [r3, #0]
		VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->VL53L1_p_009              =
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	220b      	movs	r2, #11
 8007e7e:	705a      	strb	r2, [r3, #1]
		VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e86:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007e8e:	811a      	strh	r2, [r3, #8]
		VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8007e96:	815a      	strh	r2, [r3, #10]
		VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007e9e:	819a      	strh	r2, [r3, #12]
		VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <VL53L1_init_ssc_config_struct>:


VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");




	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	701a      	strb	r2, [r3, #0]


	pdata->VL53L1_p_009 =
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2212      	movs	r2, #18
 8007ec6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;


	pdata->vcsel_start  =
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	220f      	movs	r2, #15
 8007ecc:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;


	pdata->vcsel_width = 0x02;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	70da      	strb	r2, [r3, #3]


	pdata->timeout_us   = 36000;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8007eda:	605a      	str	r2, [r3, #4]


	pdata->rate_limit_mcps =
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	220c      	movs	r2, #12
 8007ee0:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007efc:	2300      	movs	r3, #0
 8007efe:	73fb      	strb	r3, [r7, #15]




	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	895b      	ldrh	r3, [r3, #10]
 8007f04:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	80da      	strh	r2, [r3, #6]



	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	895b      	ldrh	r3, [r3, #10]
 8007f22:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	81da      	strh	r2, [r3, #14]

	pdata->histogram_mode_crosstalk_margin_kcps                =
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f42:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_HIST_XTALK_MARGIN_KCPS_DEFAULT;
	pdata->lite_mode_crosstalk_margin_kcps                     =
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2200      	movs	r2, #0
 8007f48:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;



	pdata->crosstalk_range_ignore_threshold_mult =
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	2240      	movs	r2, #64	; 0x40
 8007f4e:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10d      	bne.n	8007f74 <VL53L1_init_xtalk_config_struct+0x82>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d108      	bne.n	8007f74 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00)
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <VL53L1_init_xtalk_config_struct+0x82>
				== 0x00))
		pdata->global_crosstalk_compensation_enable = 0x00;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	741a      	strb	r2, [r3, #16]
 8007f72:	e002      	b.n	8007f7a <VL53L1_init_xtalk_config_struct+0x88>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2201      	movs	r2, #1
 8007f78:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8007f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d114      	bne.n	8007fac <VL53L1_init_xtalk_config_struct+0xba>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d110      	bne.n	8007fac <VL53L1_init_xtalk_config_struct+0xba>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
		VL53L1_calc_range_ignore_threshold(
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	7d9b      	ldrb	r3, [r3, #22]
 8007f9e:	f003 f879 	bl	800b094 <VL53L1_calc_range_ignore_threshold>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	831a      	strh	r2, [r3, #24]
 8007faa:	e002      	b.n	8007fb2 <VL53L1_init_xtalk_config_struct+0xc0>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	831a      	strh	r2, [r3, #24]
	}




	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8007fb8:	835a      	strh	r2, [r3, #26]
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2232      	movs	r2, #50	; 0x32
 8007fbe:	839a      	strh	r2, [r3, #28]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8007fc6:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	228c      	movs	r2, #140	; 0x8c
 8007fcc:	841a      	strh	r2, [r3, #32]
			VL53L1_TUNINGPARM_XTALK_DETECT_MAX_SIGMA_MM_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8007fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3710      	adds	r7, #16
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <VL53L1_init_xtalk_extract_config_struct>:

VL53L1_Error VL53L1_init_xtalk_extract_config_struct(
	VL53L1_xtalkextract_config_t   *pdata)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b085      	sub	sp, #20
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8007fec:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_RATE_MCPS_DEFAULT;

	pdata->mm_config_timeout_us                        =
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8007ff4:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_DSS_TIMEOUT_US_DEFAULT;

	pdata->num_of_samples                              =
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2207      	movs	r2, #7
 8007ffa:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_NUM_OF_SAMPLES_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008002:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f242 7210 	movw	r2, #10000	; 0x2710
 800800a:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_XTALK_EXTRACT_BIN_TIMEOUT_US_DEFAULT;




	pdata->algo__crosstalk_extract_min_valid_range_mm  =
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f64f 72ba 	movw	r2, #65466	; 0xffba
 8008012:	825a      	strh	r2, [r3, #18]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MIN_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_range_mm  =
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2246      	movs	r2, #70	; 0x46
 8008018:	829a      	strh	r2, [r3, #20]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_FILTER_THRESH_MM_DEFAULT;
	pdata->algo__crosstalk_extract_max_valid_rate_kcps =
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8008020:	82da      	strh	r2, [r3, #22]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_extract_max_sigma_mm        =
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	228c      	movs	r2, #140	; 0x8c
 8008026:	831a      	strh	r2, [r3, #24]
		VL53L1_TUNINGPARM_XTALK_EXTRACT_SIGMA_THRESHOLD_MM_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8008028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <VL53L1_init_offset_cal_config_struct>:


VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800804a:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8008052:	605a      	str	r2, [r3, #4]
		VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800805a:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008062:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;




	pdata->pre_num_of_samples                          =
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2208      	movs	r2, #8
 8008068:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2228      	movs	r2, #40	; 0x28
 800806e:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2209      	movs	r2, #9
 8008074:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008076:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3714      	adds	r7, #20
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <VL53L1_init_zone_cal_config_struct>:

VL53L1_Error VL53L1_init_zone_cal_config_struct(
	VL53L1_zonecal_config_t   *pdata)
{
 8008086:	b480      	push	{r7}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->dss_config__target_total_rate_mcps          =
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008098:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_RATE_MCPS_DEFAULT;

	pdata->phasecal_config_timeout_us                  =
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f643 2298 	movw	r2, #15000	; 0x3a98
 80080a0:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_TIMEOUT_US_DEFAULT;

	pdata->range_config_timeout_us                     =
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080a8:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_ZONE_CAL_RANGE_TIMEOUT_US_DEFAULT;

	pdata->mm_config_timeout_us                        =
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80080b0:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_ZONE_CAL_DSS_TIMEOUT_US_DEFAULT;




	pdata->phasecal_num_of_samples                     =
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2210      	movs	r2, #16
 80080b6:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_ZONE_CAL_PHASECAL_NUM_SAMPLES_DEFAULT;
	pdata->zone_num_of_samples                         =
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2208      	movs	r2, #8
 80080bc:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_ZONE_CAL_ZONE_NUM_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80080be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <VL53L1_init_hist_post_process_config_struct>:


VL53L1_Error VL53L1_init_hist_post_process_config_struct(
	uint8_t                             xtalk_compensation_enable,
	VL53L1_hist_post_process_config_t   *pdata)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b085      	sub	sp, #20
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	4603      	mov	r3, r0
 80080d6:	6039      	str	r1, [r7, #0]
 80080d8:	71fb      	strb	r3, [r7, #7]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->hist_algo_select =
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2204      	movs	r2, #4
 80080e2:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_HIST_ALGO_SELECT_DEFAULT;



	pdata->hist_target_order =
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2201      	movs	r2, #1
 80080e8:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_HIST_TARGET_ORDER_DEFAULT;



	pdata->filter_woi0                   =
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2201      	movs	r2, #1
 80080ee:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_0_DEFAULT;
	pdata->filter_woi1                   =
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2202      	movs	r2, #2
 80080f4:	70da      	strb	r2, [r3, #3]
			VL53L1_TUNINGPARM_HIST_FILTER_WOI_1_DEFAULT;


	pdata->hist_amb_est_method =
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2201      	movs	r2, #1
 80080fa:	711a      	strb	r2, [r3, #4]
			VL53L1_TUNINGPARM_HIST_AMB_EST_METHOD_DEFAULT;

	pdata->ambient_thresh_sigma0         =
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2250      	movs	r2, #80	; 0x50
 8008100:	715a      	strb	r2, [r3, #5]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_0_DEFAULT;
	pdata->ambient_thresh_sigma1         =
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2270      	movs	r2, #112	; 0x70
 8008106:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_HIST_AMB_THRESH_SIGMA_1_DEFAULT;


	pdata->ambient_thresh_events_scaler     =
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f241 023d 	movw	r2, #4157	; 0x103d
 800810e:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_HIST_AMB_EVENTS_SCALER_DEFAULT;


	pdata->min_ambient_thresh_events     =
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2210      	movs	r2, #16
 8008114:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_HIST_MIN_AMB_THRESH_EVENTS_DEFAULT;

	pdata->noise_threshold               =
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2232      	movs	r2, #50	; 0x32
 800811a:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_HIST_NOISE_THRESHOLD_DEFAULT;

	pdata->signal_total_events_limit     =
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2264      	movs	r2, #100	; 0x64
 8008120:	615a      	str	r2, [r3, #20]
		VL53L1_TUNINGPARM_HIST_SIGNAL_TOTAL_EVENTS_LIMIT_DEFAULT;
	pdata->sigma_estimator__sigma_ref_mm =
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2201      	movs	r2, #1
 8008126:	761a      	strb	r2, [r3, #24]
		VL53L1_TUNINGPARM_HIST_SIGMA_EST_REF_MM_DEFAULT;


	pdata->sigma_thresh                  =
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	22a0      	movs	r2, #160	; 0xa0
 800812c:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_HIST_SIGMA_THRESH_MM_DEFAULT;

	pdata->range_offset_mm            =      0;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2200      	movs	r2, #0
 8008132:	839a      	strh	r2, [r3, #28]

	pdata->gain_factor                =
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	f240 72c3 	movw	r2, #1987	; 0x7c3
 800813a:	83da      	strh	r2, [r3, #30]
			VL53L1_TUNINGPARM_HIST_GAIN_FACTOR_DEFAULT;



	pdata->valid_phase_low = 0x08;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2208      	movs	r2, #8
 8008140:	f883 2020 	strb.w	r2, [r3, #32]
	pdata->valid_phase_high = 0x88;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2288      	movs	r2, #136	; 0x88
 8008148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	pdata->algo__consistency_check__phase_tolerance =
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2208      	movs	r2, #8
 8008150:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_PHASE_TOLERANCE_DEFAULT;



	pdata->algo__consistency_check__event_sigma =
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_DEFAULT;


	pdata->algo__consistency_check__event_min_spad_count =
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008162:	849a      	strh	r2, [r3, #36]	; 0x24
	VL53L1_TUNINGPARM_CONSISTENCY_HIST_EVENT_SIGMA_MIN_SPAD_LIMIT_DEFAULT;



	pdata->algo__consistency_check__min_max_tolerance =
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	22fa      	movs	r2, #250	; 0xfa
 8008168:	84da      	strh	r2, [r3, #38]	; 0x26
		VL53L1_TUNINGPARM_CONSISTENCY_HIST_MIN_MAX_TOLERANCE_MM_DEFAULT;


	pdata->algo__crosstalk_compensation_enable = xtalk_compensation_enable;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	79fa      	ldrb	r2, [r7, #7]
 800816e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


	pdata->algo__crosstalk_detect_min_valid_range_mm  =
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8008178:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_XTALK_DETECT_MIN_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_range_mm  =
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2232      	movs	r2, #50	; 0x32
 800817e:	86da      	strh	r2, [r3, #54]	; 0x36
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RANGE_MM_DEFAULT;
	pdata->algo__crosstalk_detect_max_valid_rate_kcps =
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8008186:	871a      	strh	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_XTALK_DETECT_MAX_VALID_RATE_KCPS_DEFAULT;
	pdata->algo__crosstalk_detect_max_sigma_mm        =
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	228c      	movs	r2, #140	; 0x8c
 800818c:	875a      	strh	r2, [r3, #58]	; 0x3a





	pdata->algo__crosstalk_detect_event_sigma       =
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2250      	movs	r2, #80	; 0x50
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		VL53L1_TUNINGPARM_XTALK_DETECT_EVENT_SIGMA_DEFAULT;



	pdata->algo__crosstalk_detect_min_max_tolerance   =
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	2232      	movs	r2, #50	; 0x32
 800819a:	87da      	strh	r2, [r3, #62]	; 0x3e



	LOG_FUNCTION_END(status);

	return status;
 800819c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <VL53L1_init_tuning_parm_storage_struct>:
}


VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	pdata->tp_tuning_parm_version              =
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2220      	movs	r2, #32
 80081bc:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	220e      	movs	r2, #14
 80081c2:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f642 7294 	movw	r2, #12180	; 0x2f94
 80081ca:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	220e      	movs	r2, #14
 80081d0:	719a      	strb	r2, [r3, #6]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	220a      	movs	r2, #10
 80081d6:	71da      	strb	r2, [r3, #7]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2206      	movs	r2, #6
 80081dc:	721a      	strb	r2, [r3, #8]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	220e      	movs	r2, #14
 80081e2:	725a      	strb	r2, [r3, #9]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	220a      	movs	r2, #10
 80081e8:	729a      	strb	r2, [r3, #10]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2206      	movs	r2, #6
 80081ee:	72da      	strb	r2, [r3, #11]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_long         =
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2209      	movs	r2, #9
 80081f4:	731a      	strb	r2, [r3, #12]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_med          =
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2205      	movs	r2, #5
 80081fa:	735a      	strb	r2, [r3, #13]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_hist_short        =
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2203      	movs	r2, #3
 8008200:	739a      	strb	r2, [r3, #14]
		VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_long         =
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2206      	movs	r2, #6
 8008206:	73da      	strb	r2, [r3, #15]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_med          =
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2206      	movs	r2, #6
 800820c:	741a      	strb	r2, [r3, #16]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_hist_short        =
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2206      	movs	r2, #6
 8008212:	745a      	strb	r2, [r3, #17]
		VL53L1_TUNINGPARM_INITIAL_PHASE_REF_HISTO_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	749a      	strb	r2, [r3, #18]
		VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2221      	movs	r2, #33	; 0x21
 800821e:	74da      	strb	r2, [r3, #19]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	759a      	strb	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	223c      	movs	r2, #60	; 0x3c
 8008230:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	223c      	movs	r2, #60	; 0x3c
 8008236:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	223c      	movs	r2, #60	; 0x3c
 800823c:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2280      	movs	r2, #128	; 0x80
 8008242:	83da      	strh	r2, [r3, #30]
		VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2280      	movs	r2, #128	; 0x80
 8008248:	841a      	strh	r2, [r3, #32]
		VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2280      	movs	r2, #128	; 0x80
 800824e:	845a      	strh	r2, [r3, #34]	; 0x22
		VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2208      	movs	r2, #8
 8008254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2210      	movs	r2, #16
 800825c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;




	pdata->tp_dss_target_lite_mcps               =
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800828e:	859a      	strh	r2, [r3, #44]	; 0x2c
	VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mcps              =
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008296:	85da      	strh	r2, [r3, #46]	; 0x2e
	VL53L1_TUNINGPARM_RANGING_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_histo_mz_mcps           =
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800829e:	861a      	strh	r2, [r3, #48]	; 0x30
	VL53L1_TUNINGPARM_MZ_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80082a6:	865a      	strh	r2, [r3, #50]	; 0x32
	VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38
		VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_long_us      =
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f643 2298 	movw	r2, #15000	; 0x3a98
 80082b6:	63da      	str	r2, [r3, #60]	; 0x3c
	VL53L1_TUNINGPARM_RANGING_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_med_us       =
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f242 3228 	movw	r2, #9000	; 0x2328
 80082be:	641a      	str	r2, [r3, #64]	; 0x40
	VL53L1_TUNINGPARM_RANGING_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_hist_short_us     =
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f241 7270 	movw	r2, #6000	; 0x1770
 80082c6:	645a      	str	r2, [r3, #68]	; 0x44
	VL53L1_TUNINGPARM_RANGING_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_long_us        =
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f643 2298 	movw	r2, #15000	; 0x3a98
 80082ce:	649a      	str	r2, [r3, #72]	; 0x48
	VL53L1_TUNINGPARM_MZ_LONG_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_med_us         =
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f242 3228 	movw	r2, #9000	; 0x2328
 80082d6:	64da      	str	r2, [r3, #76]	; 0x4c
		VL53L1_TUNINGPARM_MZ_MED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_mz_short_us       =
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f241 7270 	movw	r2, #6000	; 0x1770
 80082de:	651a      	str	r2, [r3, #80]	; 0x50
		VL53L1_TUNINGPARM_MZ_SHORT_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_phasecal_timeout_timed_us          =
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80082e6:	655a      	str	r2, [r3, #84]	; 0x54
		VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80082ee:	659a      	str	r2, [r3, #88]	; 0x58
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_histo_us                =
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80082f6:	65da      	str	r2, [r3, #92]	; 0x5c
			VL53L1_TUNINGPARM_RANGING_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_mz_us                   =
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80082fe:	661a      	str	r2, [r3, #96]	; 0x60
			VL53L1_TUNINGPARM_MZ_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008306:	665a      	str	r2, [r3, #100]	; 0x64
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f24f 6218 	movw	r2, #63000	; 0xf618
 800830e:	66da      	str	r2, [r3, #108]	; 0x6c
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_histo_us             =
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008316:	671a      	str	r2, [r3, #112]	; 0x70
		VL53L1_TUNINGPARM_RANGING_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_mz_us                =
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800831e:	675a      	str	r2, [r3, #116]	; 0x74
			VL53L1_TUNINGPARM_MZ_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8008326:	679a      	str	r2, [r3, #120]	; 0x78
		VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;



	pdata->tp_mm_timeout_lpa_us =
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	669a      	str	r2, [r3, #104]	; 0x68
		VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008334:	67da      	str	r2, [r3, #124]	; 0x7c
		VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	pdata->tp_dss_target_very_short_mcps =
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800833c:	869a      	strh	r2, [r3, #52]	; 0x34
		VL53L1_TUNINGPARM_VERY_SHORT_DSS_RATE_MCPS_DEFAULT;

	pdata->tp_phasecal_patch_power =
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		VL53L1_TUNINGPARM_PHASECAL_PATCH_POWER_DEFAULT;

	pdata->tp_hist_merge =
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		VL53L1_TUNINGPARM_HIST_MERGE_DEFAULT;

	pdata->tp_reset_merge_threshold =
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f242 7210 	movw	r2, #10000	; 0x2710
 8008354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		VL53L1_TUNINGPARM_RESET_MERGE_THRESHOLD_DEFAULT;

	pdata->tp_hist_merge_max_size =
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2206      	movs	r2, #6
 800835c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
		VL53L1_TUNINGPARM_HIST_MERGE_MAX_SIZE_DEFAULT;

	pdata->tp_uwr_enable =
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
		VL53L1_TUNINGPARM_UWR_ENABLE_DEFAULT;
	pdata->tp_uwr_med_z_1_min =
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800836e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_med_z_1_max =
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f640 22be 	movw	r2, #2750	; 0xabe
 8008378:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_med_z_2_min =
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	22fa      	movs	r2, #250	; 0xfa
 8008380:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_med_z_2_max =
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800838a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_med_z_3_min =
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8008394:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_med_z_3_max =
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800839e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_med_z_4_min =
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80083a8:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_med_z_4_max =
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f240 62d6 	movw	r2, #1750	; 0x6d6
 80083b2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_med_z_5_min =
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f64f 7238 	movw	r2, #65336	; 0xff38
 80083bc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_med_z_5_max =
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	22c8      	movs	r2, #200	; 0xc8
 80083c4:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_med_z_6_min =
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	22fa      	movs	r2, #250	; 0xfa
 80083cc:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MIN_DEFAULT;
	pdata->tp_uwr_med_z_6_max =
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f240 42e2 	movw	r2, #1250	; 0x4e2
 80083d6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
		VL53L1_TUNINGPARM_UWR_MEDIUM_ZONE_6_MAX_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangea =
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f640 1206 	movw	r2, #2310	; 0x906
 80083e0:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_1_rangeb =
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangea =
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f640 1206 	movw	r2, #2310	; 0x906
 80083f2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_2_rangeb =
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f640 421c 	movw	r2, #3100	; 0xc1c
 80083fc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangea =
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 8008406:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_3_rangeb =
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f640 421c 	movw	r2, #3100	; 0xc1c
 8008410:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangea =
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 800841a:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_4_rangeb =
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f641 022e 	movw	r2, #6190	; 0x182e
 8008424:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangea =
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_5_rangeb =
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangea =
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f641 3230 	movw	r2, #6960	; 0x1b30
 800843e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEA_DEFAULT;
	pdata->tp_uwr_med_corr_z_6_rangeb =
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f641 022e 	movw	r2, #6190	; 0x182e
 8008448:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
		VL53L1_TUNINGPARM_UWR_MEDIUM_CORRECTION_ZONE_6_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_z_1_min =
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	22fa      	movs	r2, #250	; 0xfa
 8008450:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_1_max =
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800845a:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_1_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_2_min =
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f640 42b2 	movw	r2, #3250	; 0xcb2
 8008464:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_2_max =
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f241 1294 	movw	r2, #4500	; 0x1194
 800846e:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_2_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_3_min =
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f64f 7238 	movw	r2, #65336	; 0xff38
 8008478:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_3_max =
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	22c8      	movs	r2, #200	; 0xc8
 8008480:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_3_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_4_min =
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f640 3222 	movw	r2, #2850	; 0xb22
 800848a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_4_max =
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f640 42e4 	movw	r2, #3300	; 0xce4
 8008494:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_4_MAX_DEFAULT;
	pdata->tp_uwr_lng_z_5_min =
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MIN_DEFAULT;
	pdata->tp_uwr_lng_z_5_max =
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
		VL53L1_TUNINGPARM_UWR_LONG_ZONE_5_MAX_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangea =
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f640 721e 	movw	r2, #3870	; 0xf1e
 80084ae:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_1_rangeb =
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f241 222a 	movw	r2, #4650	; 0x122a
 80084b8:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_1_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangea =
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f640 720a 	movw	r2, #3850	; 0xf0a
 80084c2:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_2_rangeb =
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_2_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangea =
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_3_rangeb =
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_3_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangea =
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f641 6214 	movw	r2, #7700	; 0x1e14
 80084e4:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_4_rangeb =
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f44f 5291 	mov.w	r2, #4640	; 0x1220
 80084ee:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_4_RANGEB_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangea =
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f8a3 20e2 	strh.w	r2, [r3, #226]	; 0xe2
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEA_DEFAULT;
	pdata->tp_uwr_lng_corr_z_5_rangeb =
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
		VL53L1_TUNINGPARM_UWR_LONG_CORRECTION_ZONE_5_RANGEB_DEFAULT;
	pdata->tp_min_signal_secondary_targets =
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f641 1288 	movw	r2, #6536	; 0x1988
 8008508:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		VL53L1_TUNINGPARM_MIN_SIGNAL_SECONDARY_TARGETS_DEFAULT;
	LOG_FUNCTION_END(status);

	return status;
 800850c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <VL53L1_init_hist_gen3_dmax_config_struct>:


VL53L1_Error VL53L1_init_hist_gen3_dmax_config_struct(
	VL53L1_hist_gen3_dmax_config_t   *pdata)
{
 800851c:	b480      	push	{r7}
 800851e:	b085      	sub	sp, #20
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008524:	2300      	movs	r3, #0
 8008526:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pdata->dss_config__target_total_rate_mcps = 0x1400;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800852e:	831a      	strh	r2, [r3, #24]
	pdata->dss_config__aperture_attenuation = 0x38;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2238      	movs	r2, #56	; 0x38
 8008534:	769a      	strb	r2, [r3, #26]

	pdata->signal_thresh_sigma                 =
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_DMAX_CFG_SIGNAL_THRESH_SIGMA_DEFAULT;
	pdata->ambient_thresh_sigma = 0x70;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2270      	movs	r2, #112	; 0x70
 8008540:	705a      	strb	r2, [r3, #1]
	pdata->min_ambient_thresh_events           = 16;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2210      	movs	r2, #16
 8008546:	605a      	str	r2, [r3, #4]
	pdata->signal_total_events_limit           = 100;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2264      	movs	r2, #100	; 0x64
 800854c:	609a      	str	r2, [r3, #8]
	pdata->max_effective_spads = 0xFFFF;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008554:	82da      	strh	r2, [r3, #22]



	pdata->target_reflectance_for_dmax_calc[0] =
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	220f      	movs	r2, #15
 800855a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_0_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[1] =
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2234      	movs	r2, #52	; 0x34
 8008560:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_1_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[2] =
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	22c8      	movs	r2, #200	; 0xc8
 8008566:	821a      	strh	r2, [r3, #16]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_2_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[3] =
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800856e:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_3_DEFAULT;
	pdata->target_reflectance_for_dmax_calc[4] =
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008576:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_DMAX_CFG_REFLECTANCE_ARRAY_4_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8008578:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	pstatic->dss_config__target_total_rate_mcps = 0x0A00;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80085a0:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl = 0x00;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl = 0x00;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl = 0x00;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl = 0x00;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words = 0x00;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address = 0x00;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status = 0x00;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config = 0x00;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config = 0x00;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	729a      	strb	r2, [r3, #10]


	pstatic->gpio_hv_pad__ctrl = 0x00;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	72da      	strb	r2, [r3, #11]


	pstatic->gpio_hv_mux__ctrl  =
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2211      	movs	r2, #17
 80085e2:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW |
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status = 0x02;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2202      	movs	r2, #2
 80085e8:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status = 0x00;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth = 0x02;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2202      	movs	r2, #2
 80085f4:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset = 0x08;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2208      	movs	r2, #8
 80085fa:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl = 0x00;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8008602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008604:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm = 0x01;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2201      	movs	r2, #1
 8008624:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0 = 0x00;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 = 0x00;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps = 0x0000;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2200      	movs	r2, #0
 8008636:	831a      	strh	r2, [r3, #24]


	pstatic->algo__range_ignore_valid_height_mm = 0xff;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	22ff      	movs	r2, #255	; 0xff
 800863c:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800863e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008640:	7d9a      	ldrb	r2, [r3, #22]
	pstatic->algo__range_min_clip                             =
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	76da      	strb	r2, [r3, #27]

	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__consistency_check__tolerance               =
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2 = 0x00;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb = 0x00;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb = 0x00;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value = 0x00;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider = 0x00;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2220      	movs	r2, #32
 8008670:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start = 0x0B;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	220b      	movs	r2, #11
 8008676:	70da      	strb	r2, [r3, #3]


	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8008678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867a:	8a9a      	ldrh	r2, [r3, #20]
	pgeneral->cal_config__repeat_rate                         =
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width = 0x02;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	719a      	strb	r2, [r3, #6]

	pgeneral->phasecal_config__timeout_macrop = 0x0D;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	220d      	movs	r2, #13
 800868a:	71da      	strb	r2, [r3, #7]

	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	7cda      	ldrb	r2, [r3, #19]
	pgeneral->phasecal_config__target                         =
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override = 0x00;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;

	pgeneral->system__thresh_rate_high = 0x0000;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low = 0x0000;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	81da      	strh	r2, [r3, #14]

	pgeneral->dss_config__manual_effective_spads_select = 0x8C00;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 80086b2:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select = 0x00;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	749a      	strb	r2, [r3, #18]


	pgeneral->dss_config__aperture_attenuation = 0x38;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2238      	movs	r2, #56	; 0x38
 80086be:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit = 0xFF;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	22ff      	movs	r2, #255	; 0xff
 80086c4:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit = 0x01;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	755a      	strb	r2, [r3, #21]




	ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo = 0x1a;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	221a      	movs	r2, #26
 80086d6:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	2200      	movs	r2, #0
 80086dc:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo = 0x20;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2220      	movs	r2, #32
 80086e2:	70da      	strb	r2, [r3, #3]

	ptiming->range_config__timeout_macrop_a_hi = 0x01;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2201      	movs	r2, #1
 80086e8:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo = 0xCC;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	22cc      	movs	r2, #204	; 0xcc
 80086ee:	715a      	strb	r2, [r3, #5]

	ptiming->range_config__vcsel_period_a = 0x0B;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	220b      	movs	r2, #11
 80086f4:	719a      	strb	r2, [r3, #6]

	ptiming->range_config__timeout_macrop_b_hi = 0x01;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2201      	movs	r2, #1
 80086fa:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo = 0xF5;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	22f5      	movs	r2, #245	; 0xf5
 8008700:	721a      	strb	r2, [r3, #8]

	ptiming->range_config__vcsel_period_b = 0x09;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2209      	movs	r2, #9
 8008706:	725a      	strb	r2, [r3, #9]

	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__sigma_thresh                       =
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	8c1a      	ldrh	r2, [r3, #32]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	819a      	strh	r2, [r3, #12]


	ptiming->range_config__valid_phase_low = 0x08;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2208      	movs	r2, #8
 800871c:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high = 0x78;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2278      	movs	r2, #120	; 0x78
 8008722:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period = 0x00000000;
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	2200      	movs	r2, #0
 8008728:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable = 0x00;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2200      	movs	r2, #0
 800872e:	751a      	strb	r2, [r3, #20]



	phistogram->histogram_config__low_amb_even_bin_0_1 = 0x07;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	2207      	movs	r2, #7
 8008734:	705a      	strb	r2, [r3, #1]
	phistogram->histogram_config__low_amb_even_bin_2_3 = 0x21;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	2221      	movs	r2, #33	; 0x21
 800873a:	709a      	strb	r2, [r3, #2]
	phistogram->histogram_config__low_amb_even_bin_4_5 = 0x43;
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2243      	movs	r2, #67	; 0x43
 8008740:	70da      	strb	r2, [r3, #3]

	phistogram->histogram_config__low_amb_odd_bin_0_1 = 0x10;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2210      	movs	r2, #16
 8008746:	711a      	strb	r2, [r3, #4]
	phistogram->histogram_config__low_amb_odd_bin_2_3 = 0x32;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2232      	movs	r2, #50	; 0x32
 800874c:	715a      	strb	r2, [r3, #5]
	phistogram->histogram_config__low_amb_odd_bin_4_5 = 0x54;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2254      	movs	r2, #84	; 0x54
 8008752:	719a      	strb	r2, [r3, #6]

	phistogram->histogram_config__mid_amb_even_bin_0_1 = 0x07;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2207      	movs	r2, #7
 8008758:	71da      	strb	r2, [r3, #7]
	phistogram->histogram_config__mid_amb_even_bin_2_3 = 0x21;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2221      	movs	r2, #33	; 0x21
 800875e:	721a      	strb	r2, [r3, #8]
	phistogram->histogram_config__mid_amb_even_bin_4_5 = 0x43;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2243      	movs	r2, #67	; 0x43
 8008764:	725a      	strb	r2, [r3, #9]

	phistogram->histogram_config__mid_amb_odd_bin_0_1 = 0x10;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2210      	movs	r2, #16
 800876a:	729a      	strb	r2, [r3, #10]
	phistogram->histogram_config__mid_amb_odd_bin_2 = 0x02;
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2202      	movs	r2, #2
 8008770:	72da      	strb	r2, [r3, #11]
	phistogram->histogram_config__mid_amb_odd_bin_3_4 = 0x43;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2243      	movs	r2, #67	; 0x43
 8008776:	731a      	strb	r2, [r3, #12]
	phistogram->histogram_config__mid_amb_odd_bin_5 = 0x05;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2205      	movs	r2, #5
 800877c:	735a      	strb	r2, [r3, #13]

	phistogram->histogram_config__user_bin_offset = 0x00;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2200      	movs	r2, #0
 8008782:	739a      	strb	r2, [r3, #14]

	phistogram->histogram_config__high_amb_even_bin_0_1 = 0x07;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2207      	movs	r2, #7
 8008788:	73da      	strb	r2, [r3, #15]
	phistogram->histogram_config__high_amb_even_bin_2_3 = 0x21;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2221      	movs	r2, #33	; 0x21
 800878e:	741a      	strb	r2, [r3, #16]
	phistogram->histogram_config__high_amb_even_bin_4_5 = 0x43;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2243      	movs	r2, #67	; 0x43
 8008794:	745a      	strb	r2, [r3, #17]

	phistogram->histogram_config__high_amb_odd_bin_0_1 = 0x10;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2210      	movs	r2, #16
 800879a:	749a      	strb	r2, [r3, #18]
	phistogram->histogram_config__high_amb_odd_bin_2_3 = 0x32;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2232      	movs	r2, #50	; 0x32
 80087a0:	74da      	strb	r2, [r3, #19]
	phistogram->histogram_config__high_amb_odd_bin_4_5 = 0x54;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2254      	movs	r2, #84	; 0x54
 80087a6:	751a      	strb	r2, [r3, #20]

	phistogram->histogram_config__amb_thresh_low = 0xFFFF;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087ae:	82da      	strh	r2, [r3, #22]
	phistogram->histogram_config__amb_thresh_high = 0xFFFF;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087b6:	831a      	strh	r2, [r3, #24]

	phistogram->histogram_config__spad_array_selection = 0x00;
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2200      	movs	r2, #0
 80087bc:	701a      	strb	r2, [r3, #0]


	pzone_cfg->max_zones                     = VL53L1_MAX_USER_ZONES;
 80087be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c0:	2210      	movs	r2, #16
 80087c2:	701a      	strb	r2, [r3, #0]
	pzone_cfg->active_zones = 0x00;
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	2200      	movs	r2, #0
 80087c8:	705a      	strb	r2, [r3, #1]
	pzone_cfg->user_zones[0].height = 0x0f;
 80087ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087cc:	220f      	movs	r2, #15
 80087ce:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width = 0x0f;
 80087d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d2:	220f      	movs	r2, #15
 80087d4:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre = 0x08;
 80087d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d8:	2208      	movs	r2, #8
 80087da:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre = 0x08;
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	2208      	movs	r2, #8
 80087e0:	775a      	strb	r2, [r3, #29]



	pdynamic->system__grouped_parameter_hold_0 = 0x01;
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	2201      	movs	r2, #1
 80087e6:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high = 0x0000;
 80087e8:	6a3b      	ldr	r3, [r7, #32]
 80087ea:	2200      	movs	r2, #0
 80087ec:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low = 0x0000;
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	2200      	movs	r2, #0
 80087f2:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant = 0x00;
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	2200      	movs	r2, #0
 80087f8:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
	pdynamic->system__seed_config =
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	71da      	strb	r2, [r3, #7]


	pdynamic->sd_config__woi_sd0 = 0x0B;
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	220b      	movs	r2, #11
 8008808:	721a      	strb	r2, [r3, #8]

	pdynamic->sd_config__woi_sd1 = 0x09;
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	2209      	movs	r2, #9
 800880e:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8008810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008812:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1 = 0x01;
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	2201      	movs	r2, #1
 8008824:	731a      	strb	r2, [r3, #12]



	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8008826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008828:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
	pdynamic->sd_config__first_order_select =
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
	pdynamic->sd_config__quantifier         =
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	739a      	strb	r2, [r3, #14]


	pdynamic->roi_config__user_roi_centre_spad = 0xC7;
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	22c7      	movs	r2, #199	; 0xc7
 800883e:	73da      	strb	r2, [r3, #15]

	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	22ff      	movs	r2, #255	; 0xff
 8008844:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          =
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	22db      	movs	r2, #219	; 0xdb
 800884a:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN |
			VL53L1_SEQUENCE_DSS2_EN |
			VL53L1_SEQUENCE_MM2_EN |
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold = 0x02;
 800884c:	6a3b      	ldr	r3, [r7, #32]
 800884e:	2202      	movs	r2, #2
 8008850:	749a      	strb	r2, [r3, #18]




	psystem->system__stream_count_ctrl = 0x00;
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	2200      	movs	r2, #0
 8008856:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable = 0x01;
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	2201      	movs	r2, #1
 800885c:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           =
 800885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008860:	2201      	movs	r2, #1
 8008862:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                =
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	2221      	movs	r2, #33	; 0x21
 8008868:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD |
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800886a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800886e:	4618      	mov	r0, r3
 8008870:	371c      	adds	r7, #28
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b08a      	sub	sp, #40	; 0x28
 800887e:	af04      	add	r7, sp, #16
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008888:	2300      	movs	r3, #0
 800888a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 800888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888e:	9303      	str	r3, [sp, #12]
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	9302      	str	r3, [sp, #8]
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f7ff fe70 	bl	8008588 <VL53L1_preset_mode_standard_ranging>
 80088a8:	4603      	mov	r3, r0
 80088aa:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80088ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d121      	bne.n	80088f8 <VL53L1_preset_mode_standard_ranging_short_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x07;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	2207      	movs	r2, #7
 80088b8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2205      	movs	r2, #5
 80088be:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__sigma_thresh                  =
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 80088c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ca:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2208      	movs	r2, #8
 80088d4:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0x38;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	2238      	movs	r2, #56	; 0x38
 80088da:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x07;
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	2207      	movs	r2, #7
 80088e0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 80088e2:	6a3b      	ldr	r3, [r7, #32]
 80088e4:	2205      	movs	r2, #5
 80088e6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 80088e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ea:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 80088f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f2:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80088f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08a      	sub	sp, #40	; 0x28
 8008908:	af04      	add	r7, sp, #16
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
 8008910:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008912:	2300      	movs	r3, #0
 8008914:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	9303      	str	r3, [sp, #12]
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	9302      	str	r3, [sp, #8]
 800891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	68b9      	ldr	r1, [r7, #8]
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f7ff fe2b 	bl	8008588 <VL53L1_preset_mode_standard_ranging>
 8008932:	4603      	mov	r3, r0
 8008934:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008936:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d121      	bne.n	8008982 <VL53L1_preset_mode_standard_ranging_long_range+0x7e>



		ptiming->range_config__vcsel_period_a = 0x0F;
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	220f      	movs	r2, #15
 8008942:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0D;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	220d      	movs	r2, #13
 8008948:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894c:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__sigma_thresh                  =
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
			ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	8bda      	ldrh	r2, [r3, #30]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low = 0x08;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2208      	movs	r2, #8
 800895e:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high = 0xB8;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	22b8      	movs	r2, #184	; 0xb8
 8008964:	73da      	strb	r2, [r3, #15]



		pdynamic->sd_config__woi_sd0 = 0x0F;
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	220f      	movs	r2, #15
 800896a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0D;
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	220d      	movs	r2, #13
 8008970:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8008982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b08a      	sub	sp, #40	; 0x28
 8008992:	af04      	add	r7, sp, #16
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	607a      	str	r2, [r7, #4]
 800899a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800899c:	2300      	movs	r3, #0
 800899e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 80089a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a2:	9303      	str	r3, [sp, #12]
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	9302      	str	r3, [sp, #8]
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	9301      	str	r3, [sp, #4]
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	68b9      	ldr	r1, [r7, #8]
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f7ff fde6 	bl	8008588 <VL53L1_preset_mode_standard_ranging>
 80089bc:	4603      	mov	r3, r0
 80089be:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80089c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d105      	bne.n	80089d4 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2202      	movs	r2, #2
 80089cc:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	223b      	movs	r2, #59	; 0x3b
 80089d2:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80089d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	; 0x28
 80089e4:	af04      	add	r7, sp, #16
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80089ee:	2300      	movs	r3, #0
 80089f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	9303      	str	r3, [sp, #12]
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	9302      	str	r3, [sp, #8]
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	9301      	str	r3, [sp, #4]
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f7ff fdbd 	bl	8008588 <VL53L1_preset_mode_standard_ranging>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008a12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d105      	bne.n	8008a26 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x46>

		pgeneral->dss_config__roi_mode_control =
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  =
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	225b      	movs	r2, #91	; 0x5b
 8008a24:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008a26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b08a      	sub	sp, #40	; 0x28
 8008a36:	af04      	add	r7, sp, #16
 8008a38:	60f8      	str	r0, [r7, #12]
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
 8008a3e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a46:	9303      	str	r3, [sp, #12]
 8008a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4a:	9302      	str	r3, [sp, #8]
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	9301      	str	r3, [sp, #4]
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	68b9      	ldr	r1, [r7, #8]
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff fd94 	bl	8008588 <VL53L1_preset_mode_standard_ranging>
 8008a60:	4603      	mov	r3, r0
 8008a62:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008a64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d11a      	bne.n	8008aa2 <VL53L1_preset_mode_timed_ranging+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	749a      	strb	r2, [r3, #18]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	2200      	movs	r2, #0
 8008a76:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	22b1      	movs	r2, #177	; 0xb1
 8008a7c:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2200      	movs	r2, #0
 8008a82:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	22d4      	movs	r2, #212	; 0xd4
 8008a88:	721a      	strb	r2, [r3, #8]



		ptiming->system__intermeasurement_period = 0x00000600;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008a90:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	2240      	movs	r2, #64	; 0x40
 8008aa0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008aa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b08a      	sub	sp, #40	; 0x28
 8008ab2:	af04      	add	r7, sp, #16
 8008ab4:	60f8      	str	r0, [r7, #12]
 8008ab6:	60b9      	str	r1, [r7, #8]
 8008ab8:	607a      	str	r2, [r7, #4]
 8008aba:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008abc:	2300      	movs	r3, #0
 8008abe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_short_range(
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac2:	9303      	str	r3, [sp, #12]
 8008ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac6:	9302      	str	r3, [sp, #8]
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	9301      	str	r3, [sp, #4]
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	68b9      	ldr	r1, [r7, #8]
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f7ff fecf 	bl	800887a <VL53L1_preset_mode_standard_ranging_short_range>
 8008adc:	4603      	mov	r3, r0
 8008ade:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d11a      	bne.n	8008b1e <VL53L1_preset_mode_timed_ranging_short_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008ae8:	6a3b      	ldr	r3, [r7, #32]
 8008aea:	2200      	movs	r2, #0
 8008aec:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x01;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2201      	movs	r2, #1
 8008af2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x84;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2284      	movs	r2, #132	; 0x84
 8008af8:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x01;
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	2201      	movs	r2, #1
 8008afe:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	22b1      	movs	r2, #177	; 0xb1
 8008b04:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008b0c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1a:	2240      	movs	r2, #64	; 0x40
 8008b1c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b08a      	sub	sp, #40	; 0x28
 8008b2e:	af04      	add	r7, sp, #16
 8008b30:	60f8      	str	r0, [r7, #12]
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	607a      	str	r2, [r7, #4]
 8008b36:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging_long_range(
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	9303      	str	r3, [sp, #12]
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	9302      	str	r3, [sp, #8]
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	68b9      	ldr	r1, [r7, #8]
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff fed6 	bl	8008904 <VL53L1_preset_mode_standard_ranging_long_range>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d11a      	bne.n	8008b9a <VL53L1_preset_mode_timed_ranging_long_range+0x70>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	2200      	movs	r2, #0
 8008b68:	749a      	strb	r2, [r3, #18]





		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x97;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2297      	movs	r2, #151	; 0x97
 8008b74:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xB1;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	22b1      	movs	r2, #177	; 0xb1
 8008b80:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008b88:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	2240      	movs	r2, #64	; 0x40
 8008b98:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008b9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b08a      	sub	sp, #40	; 0x28
 8008baa:	af04      	add	r7, sp, #16
 8008bac:	60f8      	str	r0, [r7, #12]
 8008bae:	60b9      	str	r1, [r7, #8]
 8008bb0:	607a      	str	r2, [r7, #4]
 8008bb2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging(
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	9303      	str	r3, [sp, #12]
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	9302      	str	r3, [sp, #8]
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f7ff ff2f 	bl	8008a32 <VL53L1_preset_mode_timed_ranging>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008bd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d106      	bne.n	8008bee <VL53L1_preset_mode_low_power_auto_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8008be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be2:	6a39      	ldr	r1, [r7, #32]
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f005 f978 	bl	800deda <VL53L1_config_low_power_auto_mode>
 8008bea:	4603      	mov	r3, r0
 8008bec:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b08a      	sub	sp, #40	; 0x28
 8008bfe:	af04      	add	r7, sp, #16
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	607a      	str	r2, [r7, #4]
 8008c06:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008c08:	2300      	movs	r3, #0
 8008c0a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_short_range(
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	9303      	str	r3, [sp, #12]
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	9302      	str	r3, [sp, #8]
 8008c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c16:	9301      	str	r3, [sp, #4]
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	68b9      	ldr	r1, [r7, #8]
 8008c22:	68f8      	ldr	r0, [r7, #12]
 8008c24:	f7ff ff43 	bl	8008aae <VL53L1_preset_mode_timed_ranging_short_range>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d106      	bne.n	8008c42 <VL53L1_preset_mode_low_power_auto_short_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8008c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c36:	6a39      	ldr	r1, [r7, #32]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f005 f94e 	bl	800deda <VL53L1_config_low_power_auto_mode>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b08a      	sub	sp, #40	; 0x28
 8008c52:	af04      	add	r7, sp, #16
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	60b9      	str	r1, [r7, #8]
 8008c58:	607a      	str	r2, [r7, #4]
 8008c5a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_timed_ranging_long_range(
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	9303      	str	r3, [sp, #12]
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	9301      	str	r3, [sp, #4]
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	68b9      	ldr	r1, [r7, #8]
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f7ff ff57 	bl	8008b2a <VL53L1_preset_mode_timed_ranging_long_range>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d106      	bne.n	8008c96 <VL53L1_preset_mode_low_power_auto_long_ranging+0x48>
		status = VL53L1_config_low_power_auto_mode(
 8008c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c8a:	6a39      	ldr	r1, [r7, #32]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f005 f924 	bl	800deda <VL53L1_config_low_power_auto_mode>
 8008c92:	4603      	mov	r3, r0
 8008c94:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8008c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3718      	adds	r7, #24
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b08a      	sub	sp, #40	; 0x28
 8008ca6:	af04      	add	r7, sp, #16
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	607a      	str	r2, [r7, #4]
 8008cae:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8008cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb6:	9303      	str	r3, [sp, #12]
 8008cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cba:	9302      	str	r3, [sp, #8]
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	68b9      	ldr	r1, [r7, #8]
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f7ff fc5c 	bl	8008588 <VL53L1_preset_mode_standard_ranging>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	75fb      	strb	r3, [r7, #23]
		ptuning_parms,
		pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008cd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d116      	bne.n	8008d0a <VL53L1_preset_mode_singleshot_ranging+0x68>




		pdynamic->system__grouped_parameter_hold = 0x00;
 8008cdc:	6a3b      	ldr	r3, [r7, #32]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	749a      	strb	r2, [r3, #18]




		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0xB1;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	22b1      	movs	r2, #177	; 0xb1
 8008cec:	715a      	strb	r2, [r3, #5]

		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0xD4;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	22d4      	movs	r2, #212	; 0xd4
 8008cf8:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8008cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		pdynamic->system__seed_config =
 8008d00:	6a3b      	ldr	r3, [r7, #32]
 8008d02:	71da      	strb	r2, [r3, #7]




		psystem->system__mode_start =
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	2210      	movs	r2, #16
 8008d08:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <VL53L1_preset_mode_histogram_ranging>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b090      	sub	sp, #64	; 0x40
 8008d1a:	af0a      	add	r7, sp, #40	; 0x28
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	60b9      	str	r1, [r7, #8]
 8008d20:	607a      	str	r2, [r7, #4]
 8008d22:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008d24:	2300      	movs	r3, #0
 8008d26:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_standard_ranging(
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	9303      	str	r3, [sp, #12]
 8008d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2e:	9302      	str	r3, [sp, #8]
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	9301      	str	r3, [sp, #4]
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	68b8      	ldr	r0, [r7, #8]
 8008d40:	f7ff fc22 	bl	8008588 <VL53L1_preset_mode_standard_ranging>
 8008d44:	4603      	mov	r3, r0
 8008d46:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008d48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d171      	bne.n	8008e34 <VL53L1_preset_mode_histogram_ranging+0x11e>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008d56:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	9308      	str	r3, [sp, #32]
 8008d5c:	2305      	movs	r3, #5
 8008d5e:	9307      	str	r3, [sp, #28]
 8008d60:	2304      	movs	r3, #4
 8008d62:	9306      	str	r3, [sp, #24]
 8008d64:	2303      	movs	r3, #3
 8008d66:	9305      	str	r3, [sp, #20]
 8008d68:	2302      	movs	r3, #2
 8008d6a:	9304      	str	r3, [sp, #16]
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	9303      	str	r3, [sp, #12]
 8008d70:	2300      	movs	r3, #0
 8008d72:	9302      	str	r3, [sp, #8]
 8008d74:	2304      	movs	r3, #4
 8008d76:	9301      	str	r3, [sp, #4]
 8008d78:	2303      	movs	r3, #3
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	2201      	movs	r2, #1
 8008d80:	2100      	movs	r1, #0
 8008d82:	2007      	movs	r0, #7
 8008d84:	f001 fe1b 	bl	800a9be <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				0, 1, 2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	3302      	adds	r3, #2
 8008d8c:	9308      	str	r3, [sp, #32]
 8008d8e:	2305      	movs	r3, #5
 8008d90:	9307      	str	r3, [sp, #28]
 8008d92:	2304      	movs	r3, #4
 8008d94:	9306      	str	r3, [sp, #24]
 8008d96:	2303      	movs	r3, #3
 8008d98:	9305      	str	r3, [sp, #20]
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	9304      	str	r3, [sp, #16]
 8008d9e:	2301      	movs	r3, #1
 8008da0:	9303      	str	r3, [sp, #12]
 8008da2:	2300      	movs	r3, #0
 8008da4:	9302      	str	r3, [sp, #8]
 8008da6:	2304      	movs	r3, #4
 8008da8:	9301      	str	r3, [sp, #4]
 8008daa:	2303      	movs	r3, #3
 8008dac:	9300      	str	r3, [sp, #0]
 8008dae:	2302      	movs	r3, #2
 8008db0:	2201      	movs	r2, #1
 8008db2:	2100      	movs	r1, #0
 8008db4:	2007      	movs	r0, #7
 8008db6:	f001 fe92 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
				&(pzone_cfg->multizone_hist_cfg));




		ptiming->range_config__vcsel_period_a = 0x09;
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	2209      	movs	r2, #9
 8008dbe:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0B;
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	220b      	movs	r2, #11
 8008dc4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__woi_sd0 = 0x09;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	2209      	movs	r2, #9
 8008dca:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	220b      	movs	r2, #11
 8008dd0:	725a      	strb	r2, [r3, #9]




		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8008dd2:	6a3b      	ldr	r3, [r7, #32]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x20;
 8008dd8:	6a3b      	ldr	r3, [r7, #32]
 8008dda:	2220      	movs	r2, #32
 8008ddc:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8008dde:	6a3b      	ldr	r3, [r7, #32]
 8008de0:	2200      	movs	r2, #0
 8008de2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1A;
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	221a      	movs	r2, #26
 8008de8:	70da      	strb	r2, [r3, #3]


		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	2200      	movs	r2, #0
 8008dee:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x28;
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	2228      	movs	r2, #40	; 0x28
 8008df4:	715a      	strb	r2, [r3, #5]


		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x21;
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	2221      	movs	r2, #33	; 0x21
 8008e00:	721a      	strb	r2, [r3, #8]


		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	22f5      	movs	r2, #245	; 0xf5
 8008e06:	71da      	strb	r2, [r3, #7]



		phistpostprocess->valid_phase_low = 0x08;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2208      	movs	r2, #8
 8008e0c:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2288      	movs	r2, #136	; 0x88
 8008e14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



		VL53L1_copy_hist_cfg_to_static_cfg(
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	68b9      	ldr	r1, [r7, #8]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 f821 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);




		pdynamic->system__sequence_config =
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	229b      	movs	r2, #155	; 0x9b
 8008e2c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	2226      	movs	r2, #38	; 0x26
 8008e32:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3718      	adds	r7, #24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <VL53L1_preset_mode_histogram_ranging_with_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b090      	sub	sp, #64	; 0x40
 8008e44:	af0a      	add	r7, sp, #40	; 0x28
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8008e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e58:	9303      	str	r3, [sp, #12]
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	9302      	str	r3, [sp, #8]
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	6a3b      	ldr	r3, [r7, #32]
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f7ff ff52 	bl	8008d16 <VL53L1_preset_mode_histogram_ranging>
 8008e72:	4603      	mov	r3, r0
 8008e74:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d13e      	bne.n	8008efc <VL53L1_preset_mode_histogram_ranging_with_mm1+0xbc>



		VL53L1_init_histogram_config_structure(
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	9308      	str	r3, [sp, #32]
 8008e82:	2305      	movs	r3, #5
 8008e84:	9307      	str	r3, [sp, #28]
 8008e86:	2304      	movs	r3, #4
 8008e88:	9306      	str	r3, [sp, #24]
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	9305      	str	r3, [sp, #20]
 8008e8e:	230a      	movs	r3, #10
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	2309      	movs	r3, #9
 8008e94:	9303      	str	r3, [sp, #12]
 8008e96:	2308      	movs	r3, #8
 8008e98:	9302      	str	r3, [sp, #8]
 8008e9a:	2304      	movs	r3, #4
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	2302      	movs	r3, #2
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	2007      	movs	r0, #7
 8008eaa:	f001 fd88 	bl	800a9be <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	3302      	adds	r3, #2
 8008eb2:	9308      	str	r3, [sp, #32]
 8008eb4:	2305      	movs	r3, #5
 8008eb6:	9307      	str	r3, [sp, #28]
 8008eb8:	2304      	movs	r3, #4
 8008eba:	9306      	str	r3, [sp, #24]
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	9305      	str	r3, [sp, #20]
 8008ec0:	230a      	movs	r3, #10
 8008ec2:	9304      	str	r3, [sp, #16]
 8008ec4:	2309      	movs	r3, #9
 8008ec6:	9303      	str	r3, [sp, #12]
 8008ec8:	2308      	movs	r3, #8
 8008eca:	9302      	str	r3, [sp, #8]
 8008ecc:	2304      	movs	r3, #4
 8008ece:	9301      	str	r3, [sp, #4]
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	2100      	movs	r1, #0
 8008eda:	2007      	movs	r0, #7
 8008edc:	f001 fdff 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	68b9      	ldr	r1, [r7, #8]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 ffbd 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	22bb      	movs	r2, #187	; 0xbb
 8008ef4:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN |
				VL53L1_SEQUENCE_RANGE_EN;



		psystem->system__mode_start =
 8008ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef8:	2226      	movs	r2, #38	; 0x26
 8008efa:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <VL53L1_preset_mode_histogram_ranging_with_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08c      	sub	sp, #48	; 0x30
 8008f0c:	af06      	add	r7, sp, #24
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f16:	2300      	movs	r3, #0
 8008f18:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_with_mm1(
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f20:	9303      	str	r3, [sp, #12]
 8008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f24:	9302      	str	r3, [sp, #8]
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	9301      	str	r3, [sp, #4]
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f7ff ff83 	bl	8008e40 <VL53L1_preset_mode_histogram_ranging_with_mm1>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d102      	bne.n	8008f4c <VL53L1_preset_mode_histogram_ranging_with_mm2+0x44>



		pdynamic->system__sequence_config =
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	22db      	movs	r2, #219	; 0xdb
 8008f4a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8008f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <VL53L1_preset_mode_histogram_ranging_mm1_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b090      	sub	sp, #64	; 0x40
 8008f5c:	af0a      	add	r7, sp, #40	; 0x28
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8008f66:	2300      	movs	r3, #0
 8008f68:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6c:	9304      	str	r3, [sp, #16]
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	9303      	str	r3, [sp, #12]
 8008f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f74:	9302      	str	r3, [sp, #8]
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	9301      	str	r3, [sp, #4]
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f7ff fec6 	bl	8008d16 <VL53L1_preset_mode_histogram_ranging>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8008f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d13e      	bne.n	8009014 <VL53L1_preset_mode_histogram_ranging_mm1_cal+0xbc>



		VL53L1_init_histogram_config_structure(
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	9308      	str	r3, [sp, #32]
 8008f9a:	230d      	movs	r3, #13
 8008f9c:	9307      	str	r3, [sp, #28]
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	9306      	str	r3, [sp, #24]
 8008fa2:	230b      	movs	r3, #11
 8008fa4:	9305      	str	r3, [sp, #20]
 8008fa6:	230a      	movs	r3, #10
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	2309      	movs	r3, #9
 8008fac:	9303      	str	r3, [sp, #12]
 8008fae:	2308      	movs	r3, #8
 8008fb0:	9302      	str	r3, [sp, #8]
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	230b      	movs	r3, #11
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	230a      	movs	r3, #10
 8008fbc:	2209      	movs	r2, #9
 8008fbe:	2108      	movs	r1, #8
 8008fc0:	2007      	movs	r0, #7
 8008fc2:	f001 fcfc 	bl	800a9be <VL53L1_init_histogram_config_structure>
				  7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	3302      	adds	r3, #2
 8008fca:	9308      	str	r3, [sp, #32]
 8008fcc:	230d      	movs	r3, #13
 8008fce:	9307      	str	r3, [sp, #28]
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	9306      	str	r3, [sp, #24]
 8008fd4:	230b      	movs	r3, #11
 8008fd6:	9305      	str	r3, [sp, #20]
 8008fd8:	230a      	movs	r3, #10
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	2309      	movs	r3, #9
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	2308      	movs	r3, #8
 8008fe2:	9302      	str	r3, [sp, #8]
 8008fe4:	230c      	movs	r3, #12
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	230b      	movs	r3, #11
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	230a      	movs	r3, #10
 8008fee:	2209      	movs	r2, #9
 8008ff0:	2108      	movs	r1, #8
 8008ff2:	2007      	movs	r0, #7
 8008ff4:	f001 fd73 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 8+3, 8+4, 8+5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	68b9      	ldr	r1, [r7, #8]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 ff31 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pgeneral->dss_config__roi_mode_control =
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2202      	movs	r2, #2
 800900c:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;



		pdynamic->system__sequence_config =
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	22bb      	movs	r2, #187	; 0xbb
 8009012:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009014:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <VL53L1_preset_mode_histogram_ranging_mm2_cal>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b08c      	sub	sp, #48	; 0x30
 8009024:	af06      	add	r7, sp, #24
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800902e:	2300      	movs	r3, #0
 8009030:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging_mm1_cal(
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	9304      	str	r3, [sp, #16]
 8009036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009038:	9303      	str	r3, [sp, #12]
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	9302      	str	r3, [sp, #8]
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	68b9      	ldr	r1, [r7, #8]
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f7ff ff83 	bl	8008f58 <VL53L1_preset_mode_histogram_ranging_mm1_cal>
 8009052:	4603      	mov	r3, r0
 8009054:	75fb      	strb	r3, [r7, #23]
				pdynamic,
				psystem,
				ptuning_parms,
				pzone_cfg);

	if (status == VL53L1_ERROR_NONE) {
 8009056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d102      	bne.n	8009064 <VL53L1_preset_mode_histogram_ranging_mm2_cal+0x44>



		pdynamic->system__sequence_config =
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	22db      	movs	r2, #219	; 0xdb
 8009062:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009064:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <VL53L1_preset_mode_histogram_ranging_short_timing>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b090      	sub	sp, #64	; 0x40
 8009074:	af0a      	add	r7, sp, #40	; 0x28
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800907e:	2300      	movs	r3, #0
 8009080:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	9304      	str	r3, [sp, #16]
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	9302      	str	r3, [sp, #8]
 800908e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009090:	9301      	str	r3, [sp, #4]
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	68b9      	ldr	r1, [r7, #8]
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7ff fe3a 	bl	8008d16 <VL53L1_preset_mode_histogram_ranging>
 80090a2:	4603      	mov	r3, r0
 80090a4:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80090a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d166      	bne.n	800917c <VL53L1_preset_mode_histogram_ranging_short_timing+0x10c>



		pstatic->dss_config__target_total_rate_mcps = 0x1400;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80090b4:	801a      	strh	r2, [r3, #0]



		VL53L1_init_histogram_config_structure(
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	9308      	str	r3, [sp, #32]
 80090ba:	2304      	movs	r3, #4
 80090bc:	9307      	str	r3, [sp, #28]
 80090be:	2303      	movs	r3, #3
 80090c0:	9306      	str	r3, [sp, #24]
 80090c2:	2302      	movs	r3, #2
 80090c4:	9305      	str	r3, [sp, #20]
 80090c6:	2301      	movs	r3, #1
 80090c8:	9304      	str	r3, [sp, #16]
 80090ca:	2300      	movs	r3, #0
 80090cc:	9303      	str	r3, [sp, #12]
 80090ce:	2307      	movs	r3, #7
 80090d0:	9302      	str	r3, [sp, #8]
 80090d2:	2304      	movs	r3, #4
 80090d4:	9301      	str	r3, [sp, #4]
 80090d6:	2303      	movs	r3, #3
 80090d8:	9300      	str	r3, [sp, #0]
 80090da:	2302      	movs	r3, #2
 80090dc:	2201      	movs	r2, #1
 80090de:	2100      	movs	r1, #0
 80090e0:	2007      	movs	r0, #7
 80090e2:	f001 fc6c 	bl	800a9be <VL53L1_init_histogram_config_structure>
				7, 0, 1, 2, 3, 4,
				7, 0, 1, 2, 3, 4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	3302      	adds	r3, #2
 80090ea:	9308      	str	r3, [sp, #32]
 80090ec:	2304      	movs	r3, #4
 80090ee:	9307      	str	r3, [sp, #28]
 80090f0:	2303      	movs	r3, #3
 80090f2:	9306      	str	r3, [sp, #24]
 80090f4:	2302      	movs	r3, #2
 80090f6:	9305      	str	r3, [sp, #20]
 80090f8:	2301      	movs	r3, #1
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	2300      	movs	r3, #0
 80090fe:	9303      	str	r3, [sp, #12]
 8009100:	2307      	movs	r3, #7
 8009102:	9302      	str	r3, [sp, #8]
 8009104:	2304      	movs	r3, #4
 8009106:	9301      	str	r3, [sp, #4]
 8009108:	2303      	movs	r3, #3
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	2302      	movs	r3, #2
 800910e:	2201      	movs	r2, #1
 8009110:	2100      	movs	r1, #0
 8009112:	2007      	movs	r0, #7
 8009114:	f001 fce3 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
				7, 0, 1, 2, 3, 4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	6a3b      	ldr	r3, [r7, #32]
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	68b9      	ldr	r1, [r7, #8]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 fea1 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x04;
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	2204      	movs	r2, #4
 800912c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	2203      	movs	r2, #3
 8009132:	725a      	strb	r2, [r3, #9]
		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	2200      	movs	r2, #0
 8009138:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x42;
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	2242      	movs	r2, #66	; 0x42
 800913e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	2200      	movs	r2, #0
 8009144:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x42;
 8009146:	6a3b      	ldr	r3, [r7, #32]
 8009148:	2242      	movs	r2, #66	; 0x42
 800914a:	70da      	strb	r2, [r3, #3]
		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	2200      	movs	r2, #0
 8009150:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x52;
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	2252      	movs	r2, #82	; 0x52
 8009156:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	2200      	movs	r2, #0
 800915c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x66;
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	2266      	movs	r2, #102	; 0x66
 8009162:	721a      	strb	r2, [r3, #8]

		pgeneral->cal_config__vcsel_start = 0x04;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	2204      	movs	r2, #4
 8009168:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xa4;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	22a4      	movs	r2, #164	; 0xa4
 800916e:	71da      	strb	r2, [r3, #7]



		pdynamic->system__sequence_config =
 8009170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009172:	229b      	movs	r2, #155	; 0x9b
 8009174:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009178:	2226      	movs	r2, #38	; 0x26
 800917a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 800917c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <VL53L1_preset_mode_histogram_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b090      	sub	sp, #64	; 0x40
 800918c:	af0a      	add	r7, sp, #40	; 0x28
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009196:	2300      	movs	r3, #0
 8009198:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	9304      	str	r3, [sp, #16]
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	9303      	str	r3, [sp, #12]
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	9302      	str	r3, [sp, #8]
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	9301      	str	r3, [sp, #4]
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	68b9      	ldr	r1, [r7, #8]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f7ff fdae 	bl	8008d16 <VL53L1_preset_mode_histogram_ranging>
 80091ba:	4603      	mov	r3, r0
 80091bc:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80091be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d178      	bne.n	80092b8 <VL53L1_preset_mode_histogram_long_range+0x130>





		VL53L1_init_histogram_config_structure(
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	9308      	str	r3, [sp, #32]
 80091ca:	2305      	movs	r3, #5
 80091cc:	9307      	str	r3, [sp, #28]
 80091ce:	2304      	movs	r3, #4
 80091d0:	9306      	str	r3, [sp, #24]
 80091d2:	2303      	movs	r3, #3
 80091d4:	9305      	str	r3, [sp, #20]
 80091d6:	2302      	movs	r3, #2
 80091d8:	9304      	str	r3, [sp, #16]
 80091da:	2301      	movs	r3, #1
 80091dc:	9303      	str	r3, [sp, #12]
 80091de:	2300      	movs	r3, #0
 80091e0:	9302      	str	r3, [sp, #8]
 80091e2:	2304      	movs	r3, #4
 80091e4:	9301      	str	r3, [sp, #4]
 80091e6:	2303      	movs	r3, #3
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	2302      	movs	r3, #2
 80091ec:	2201      	movs	r2, #1
 80091ee:	2100      	movs	r1, #0
 80091f0:	2007      	movs	r0, #7
 80091f2:	f001 fbe4 	bl	800a9be <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			0, 1, 2, 3, 4, 5,
			phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	3302      	adds	r3, #2
 80091fa:	9308      	str	r3, [sp, #32]
 80091fc:	2305      	movs	r3, #5
 80091fe:	9307      	str	r3, [sp, #28]
 8009200:	2304      	movs	r3, #4
 8009202:	9306      	str	r3, [sp, #24]
 8009204:	2303      	movs	r3, #3
 8009206:	9305      	str	r3, [sp, #20]
 8009208:	2302      	movs	r3, #2
 800920a:	9304      	str	r3, [sp, #16]
 800920c:	2301      	movs	r3, #1
 800920e:	9303      	str	r3, [sp, #12]
 8009210:	2300      	movs	r3, #0
 8009212:	9302      	str	r3, [sp, #8]
 8009214:	2304      	movs	r3, #4
 8009216:	9301      	str	r3, [sp, #4]
 8009218:	2303      	movs	r3, #3
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	2302      	movs	r3, #2
 800921e:	2201      	movs	r2, #1
 8009220:	2100      	movs	r1, #0
 8009222:	2007      	movs	r0, #7
 8009224:	f001 fc5b 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
			0, 1, 2, 3, 4, 5,
			&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	6a3b      	ldr	r3, [r7, #32]
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	68b9      	ldr	r1, [r7, #8]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fe19 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
			ptiming,
			pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	2209      	movs	r2, #9
 800923c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x0b;
 800923e:	6a3b      	ldr	r3, [r7, #32]
 8009240:	220b      	movs	r2, #11
 8009242:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 800924a:	6a3b      	ldr	r3, [r7, #32]
 800924c:	2221      	movs	r2, #33	; 0x21
 800924e:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	2200      	movs	r2, #0
 8009254:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x1b;
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	221b      	movs	r2, #27
 800925a:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	2200      	movs	r2, #0
 8009260:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8009262:	6a3b      	ldr	r3, [r7, #32]
 8009264:	2229      	movs	r2, #41	; 0x29
 8009266:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	2200      	movs	r2, #0
 800926c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x22;
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	2222      	movs	r2, #34	; 0x22
 8009272:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2209      	movs	r2, #9
 8009278:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	22f5      	movs	r2, #245	; 0xf5
 800927e:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8009280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009282:	2209      	movs	r2, #9
 8009284:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x0B;
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	220b      	movs	r2, #11
 800928a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
				ptuning_parms->tp_init_phase_rtn_hist_long;
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	7b1a      	ldrb	r2, [r3, #12]
		pdynamic->sd_config__initial_phase_sd0            =
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
				ptuning_parms->tp_init_phase_ref_hist_long;
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	7bda      	ldrb	r2, [r3, #15]
		pdynamic->sd_config__initial_phase_sd1            =
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2208      	movs	r2, #8
 80092a0:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x88;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2288      	movs	r2, #136	; 0x88
 80092a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	229b      	movs	r2, #155	; 0x9b
 80092b0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	2226      	movs	r2, #38	; 0x26
 80092b6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80092b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <VL53L1_preset_mode_histogram_long_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b090      	sub	sp, #64	; 0x40
 80092c8:	af0a      	add	r7, sp, #40	; 0x28
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80092d2:	2300      	movs	r3, #0
 80092d4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 80092d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d8:	9304      	str	r3, [sp, #16]
 80092da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092dc:	9303      	str	r3, [sp, #12]
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	9302      	str	r3, [sp, #8]
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	68b9      	ldr	r1, [r7, #8]
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f7ff ff49 	bl	8009188 <VL53L1_preset_mode_histogram_long_range>
 80092f6:	4603      	mov	r3, r0
 80092f8:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80092fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d13b      	bne.n	800937a <VL53L1_preset_mode_histogram_long_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	9308      	str	r3, [sp, #32]
 8009306:	2305      	movs	r3, #5
 8009308:	9307      	str	r3, [sp, #28]
 800930a:	2304      	movs	r3, #4
 800930c:	9306      	str	r3, [sp, #24]
 800930e:	2303      	movs	r3, #3
 8009310:	9305      	str	r3, [sp, #20]
 8009312:	230a      	movs	r3, #10
 8009314:	9304      	str	r3, [sp, #16]
 8009316:	2309      	movs	r3, #9
 8009318:	9303      	str	r3, [sp, #12]
 800931a:	2308      	movs	r3, #8
 800931c:	9302      	str	r3, [sp, #8]
 800931e:	2304      	movs	r3, #4
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	2303      	movs	r3, #3
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	2302      	movs	r3, #2
 8009328:	2201      	movs	r2, #1
 800932a:	2100      	movs	r1, #0
 800932c:	2007      	movs	r0, #7
 800932e:	f001 fb46 	bl	800a9be <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 2, 3, 4,
				8+0, 8+1, 8+2, 3, 4, 5,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	3302      	adds	r3, #2
 8009336:	9308      	str	r3, [sp, #32]
 8009338:	2305      	movs	r3, #5
 800933a:	9307      	str	r3, [sp, #28]
 800933c:	2304      	movs	r3, #4
 800933e:	9306      	str	r3, [sp, #24]
 8009340:	2303      	movs	r3, #3
 8009342:	9305      	str	r3, [sp, #20]
 8009344:	230a      	movs	r3, #10
 8009346:	9304      	str	r3, [sp, #16]
 8009348:	2309      	movs	r3, #9
 800934a:	9303      	str	r3, [sp, #12]
 800934c:	2308      	movs	r3, #8
 800934e:	9302      	str	r3, [sp, #8]
 8009350:	2304      	movs	r3, #4
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	2303      	movs	r3, #3
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	2302      	movs	r3, #2
 800935a:	2201      	movs	r2, #1
 800935c:	2100      	movs	r1, #0
 800935e:	2007      	movs	r0, #7
 8009360:	f001 fbbd 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 3, 4, 5,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	9300      	str	r3, [sp, #0]
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	68b9      	ldr	r1, [r7, #8]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 fd7b 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	22bb      	movs	r2, #187	; 0xbb
 8009378:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800937a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3718      	adds	r7, #24
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <VL53L1_preset_mode_histogram_long_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t      *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b08c      	sub	sp, #48	; 0x30
 800938a:	af06      	add	r7, sp, #24
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	607a      	str	r2, [r7, #4]
 8009392:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009394:	2300      	movs	r3, #0
 8009396:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range_mm1(
 8009398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939a:	9304      	str	r3, [sp, #16]
 800939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939e:	9303      	str	r3, [sp, #12]
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	68b9      	ldr	r1, [r7, #8]
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f7ff ff86 	bl	80092c4 <VL53L1_preset_mode_histogram_long_range_mm1>
 80093b8:	4603      	mov	r3, r0
 80093ba:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80093bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d102      	bne.n	80093ca <VL53L1_preset_mode_histogram_long_range_mm2+0x44>



		pdynamic->system__sequence_config =
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	22db      	movs	r2, #219	; 0xdb
 80093c8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80093ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <VL53L1_preset_mode_histogram_medium_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b090      	sub	sp, #64	; 0x40
 80093da:	af0a      	add	r7, sp, #40	; 0x28
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	607a      	str	r2, [r7, #4]
 80093e2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 80093e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ee:	9303      	str	r3, [sp, #12]
 80093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f2:	9302      	str	r3, [sp, #8]
 80093f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f6:	9301      	str	r3, [sp, #4]
 80093f8:	6a3b      	ldr	r3, [r7, #32]
 80093fa:	9300      	str	r3, [sp, #0]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	68b9      	ldr	r1, [r7, #8]
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f7ff fc87 	bl	8008d16 <VL53L1_preset_mode_histogram_ranging>
 8009408:	4603      	mov	r3, r0
 800940a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800940c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d178      	bne.n	8009506 <VL53L1_preset_mode_histogram_medium_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	9308      	str	r3, [sp, #32]
 8009418:	2303      	movs	r3, #3
 800941a:	9307      	str	r3, [sp, #28]
 800941c:	2302      	movs	r3, #2
 800941e:	9306      	str	r3, [sp, #24]
 8009420:	2301      	movs	r3, #1
 8009422:	9305      	str	r3, [sp, #20]
 8009424:	2302      	movs	r3, #2
 8009426:	9304      	str	r3, [sp, #16]
 8009428:	2301      	movs	r3, #1
 800942a:	9303      	str	r3, [sp, #12]
 800942c:	2300      	movs	r3, #0
 800942e:	9302      	str	r3, [sp, #8]
 8009430:	2302      	movs	r3, #2
 8009432:	9301      	str	r3, [sp, #4]
 8009434:	2302      	movs	r3, #2
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	2301      	movs	r3, #1
 800943a:	2201      	movs	r2, #1
 800943c:	2100      	movs	r1, #0
 800943e:	2007      	movs	r0, #7
 8009440:	f001 fabd 	bl	800a9be <VL53L1_init_histogram_config_structure>
				7, 0, 1, 1, 2, 2,
				0, 1, 2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	3302      	adds	r3, #2
 8009448:	9308      	str	r3, [sp, #32]
 800944a:	2303      	movs	r3, #3
 800944c:	9307      	str	r3, [sp, #28]
 800944e:	2302      	movs	r3, #2
 8009450:	9306      	str	r3, [sp, #24]
 8009452:	2301      	movs	r3, #1
 8009454:	9305      	str	r3, [sp, #20]
 8009456:	2302      	movs	r3, #2
 8009458:	9304      	str	r3, [sp, #16]
 800945a:	2301      	movs	r3, #1
 800945c:	9303      	str	r3, [sp, #12]
 800945e:	2300      	movs	r3, #0
 8009460:	9302      	str	r3, [sp, #8]
 8009462:	2302      	movs	r3, #2
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	2302      	movs	r3, #2
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	2301      	movs	r3, #1
 800946c:	2201      	movs	r2, #1
 800946e:	2100      	movs	r1, #0
 8009470:	2007      	movs	r0, #7
 8009472:	f001 fb34 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	6a3b      	ldr	r3, [r7, #32]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	68b9      	ldr	r1, [r7, #8]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fcf2 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x05;
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	2205      	movs	r2, #5
 800948a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x07;
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	2207      	movs	r2, #7
 8009490:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009492:	6a3b      	ldr	r3, [r7, #32]
 8009494:	2200      	movs	r2, #0
 8009496:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x36;
 8009498:	6a3b      	ldr	r3, [r7, #32]
 800949a:	2236      	movs	r2, #54	; 0x36
 800949c:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	2200      	movs	r2, #0
 80094a2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x28;
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	2228      	movs	r2, #40	; 0x28
 80094a8:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	2200      	movs	r2, #0
 80094ae:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x44;
 80094b0:	6a3b      	ldr	r3, [r7, #32]
 80094b2:	2244      	movs	r2, #68	; 0x44
 80094b4:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	2200      	movs	r2, #0
 80094ba:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x33;
 80094bc:	6a3b      	ldr	r3, [r7, #32]
 80094be:	2233      	movs	r2, #51	; 0x33
 80094c0:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x05;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	2205      	movs	r2, #5
 80094c6:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	22f5      	movs	r2, #245	; 0xf5
 80094cc:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x05;
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	2205      	movs	r2, #5
 80094d2:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x07;
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	2207      	movs	r2, #7
 80094d8:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_med;
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	7b5a      	ldrb	r2, [r3, #13]
		pdynamic->sd_config__initial_phase_sd0            =
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_med;
 80094e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e4:	7c1a      	ldrb	r2, [r3, #16]
		pdynamic->sd_config__initial_phase_sd1            =
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x08;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2208      	movs	r2, #8
 80094ee:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x48;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2248      	movs	r2, #72	; 0x48
 80094f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 80094fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fc:	229b      	movs	r2, #155	; 0x9b
 80094fe:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009502:	2226      	movs	r2, #38	; 0x26
 8009504:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009506:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800950a:	4618      	mov	r0, r3
 800950c:	3718      	adds	r7, #24
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <VL53L1_preset_mode_histogram_medium_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b090      	sub	sp, #64	; 0x40
 8009516:	af0a      	add	r7, sp, #40	; 0x28
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	607a      	str	r2, [r7, #4]
 800951e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009520:	2300      	movs	r3, #0
 8009522:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 8009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009526:	9304      	str	r3, [sp, #16]
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952a:	9303      	str	r3, [sp, #12]
 800952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952e:	9302      	str	r3, [sp, #8]
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	9301      	str	r3, [sp, #4]
 8009534:	6a3b      	ldr	r3, [r7, #32]
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	68b9      	ldr	r1, [r7, #8]
 800953e:	68f8      	ldr	r0, [r7, #12]
 8009540:	f7ff ff49 	bl	80093d6 <VL53L1_preset_mode_histogram_medium_range>
 8009544:	4603      	mov	r3, r0
 8009546:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009548:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d13b      	bne.n	80095c8 <VL53L1_preset_mode_histogram_medium_range_mm1+0xb6>



		VL53L1_init_histogram_config_structure(
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	9308      	str	r3, [sp, #32]
 8009554:	2303      	movs	r3, #3
 8009556:	9307      	str	r3, [sp, #28]
 8009558:	2302      	movs	r3, #2
 800955a:	9306      	str	r3, [sp, #24]
 800955c:	2301      	movs	r3, #1
 800955e:	9305      	str	r3, [sp, #20]
 8009560:	230a      	movs	r3, #10
 8009562:	9304      	str	r3, [sp, #16]
 8009564:	2309      	movs	r3, #9
 8009566:	9303      	str	r3, [sp, #12]
 8009568:	2308      	movs	r3, #8
 800956a:	9302      	str	r3, [sp, #8]
 800956c:	2302      	movs	r3, #2
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	2302      	movs	r3, #2
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	2301      	movs	r3, #1
 8009576:	2201      	movs	r2, #1
 8009578:	2100      	movs	r1, #0
 800957a:	2007      	movs	r0, #7
 800957c:	f001 fa1f 	bl	800a9be <VL53L1_init_histogram_config_structure>
				  7,   0,   1, 1, 2, 2,
				8+0, 8+1, 8+2, 1, 2, 3,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009582:	3302      	adds	r3, #2
 8009584:	9308      	str	r3, [sp, #32]
 8009586:	2303      	movs	r3, #3
 8009588:	9307      	str	r3, [sp, #28]
 800958a:	2302      	movs	r3, #2
 800958c:	9306      	str	r3, [sp, #24]
 800958e:	2301      	movs	r3, #1
 8009590:	9305      	str	r3, [sp, #20]
 8009592:	230a      	movs	r3, #10
 8009594:	9304      	str	r3, [sp, #16]
 8009596:	2309      	movs	r3, #9
 8009598:	9303      	str	r3, [sp, #12]
 800959a:	2308      	movs	r3, #8
 800959c:	9302      	str	r3, [sp, #8]
 800959e:	2302      	movs	r3, #2
 80095a0:	9301      	str	r3, [sp, #4]
 80095a2:	2302      	movs	r3, #2
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	2301      	movs	r3, #1
 80095a8:	2201      	movs	r2, #1
 80095aa:	2100      	movs	r1, #0
 80095ac:	2007      	movs	r0, #7
 80095ae:	f001 fa96 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 8+2, 1, 2, 3,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	68b9      	ldr	r1, [r7, #8]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 fc54 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 80095c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c4:	22bb      	movs	r2, #187	; 0xbb
 80095c6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80095c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3718      	adds	r7, #24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <VL53L1_preset_mode_histogram_medium_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b08c      	sub	sp, #48	; 0x30
 80095d8:	af06      	add	r7, sp, #24
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80095e2:	2300      	movs	r3, #0
 80095e4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range_mm1(
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	9304      	str	r3, [sp, #16]
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	9303      	str	r3, [sp, #12]
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	9302      	str	r3, [sp, #8]
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	68b9      	ldr	r1, [r7, #8]
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff ff86 	bl	8009512 <VL53L1_preset_mode_histogram_medium_range_mm1>
 8009606:	4603      	mov	r3, r0
 8009608:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800960a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d102      	bne.n	8009618 <VL53L1_preset_mode_histogram_medium_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	22db      	movs	r2, #219	; 0xdb
 8009616:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009618:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3718      	adds	r7, #24
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <VL53L1_preset_mode_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b090      	sub	sp, #64	; 0x40
 8009628:	af0a      	add	r7, sp, #40	; 0x28
 800962a:	60f8      	str	r0, [r7, #12]
 800962c:	60b9      	str	r1, [r7, #8]
 800962e:	607a      	str	r2, [r7, #4]
 8009630:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009632:	2300      	movs	r3, #0
 8009634:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009638:	9304      	str	r3, [sp, #16]
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	9303      	str	r3, [sp, #12]
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	9302      	str	r3, [sp, #8]
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	68b9      	ldr	r1, [r7, #8]
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f7ff fb60 	bl	8008d16 <VL53L1_preset_mode_histogram_ranging>
 8009656:	4603      	mov	r3, r0
 8009658:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800965a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d178      	bne.n	8009754 <VL53L1_preset_mode_histogram_short_range+0x130>





		VL53L1_init_histogram_config_structure(
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	9308      	str	r3, [sp, #32]
 8009666:	2302      	movs	r3, #2
 8009668:	9307      	str	r3, [sp, #28]
 800966a:	2302      	movs	r3, #2
 800966c:	9306      	str	r3, [sp, #24]
 800966e:	2301      	movs	r3, #1
 8009670:	9305      	str	r3, [sp, #20]
 8009672:	2301      	movs	r3, #1
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	2301      	movs	r3, #1
 8009678:	9303      	str	r3, [sp, #12]
 800967a:	2300      	movs	r3, #0
 800967c:	9302      	str	r3, [sp, #8]
 800967e:	2301      	movs	r3, #1
 8009680:	9301      	str	r3, [sp, #4]
 8009682:	2301      	movs	r3, #1
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	2301      	movs	r3, #1
 8009688:	2200      	movs	r2, #0
 800968a:	2107      	movs	r1, #7
 800968c:	2007      	movs	r0, #7
 800968e:	f001 f996 	bl	800a9be <VL53L1_init_histogram_config_structure>
				7, 7, 0, 1, 1, 1,
				0, 1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009694:	3302      	adds	r3, #2
 8009696:	9308      	str	r3, [sp, #32]
 8009698:	2302      	movs	r3, #2
 800969a:	9307      	str	r3, [sp, #28]
 800969c:	2302      	movs	r3, #2
 800969e:	9306      	str	r3, [sp, #24]
 80096a0:	2301      	movs	r3, #1
 80096a2:	9305      	str	r3, [sp, #20]
 80096a4:	2301      	movs	r3, #1
 80096a6:	9304      	str	r3, [sp, #16]
 80096a8:	2301      	movs	r3, #1
 80096aa:	9303      	str	r3, [sp, #12]
 80096ac:	2300      	movs	r3, #0
 80096ae:	9302      	str	r3, [sp, #8]
 80096b0:	2301      	movs	r3, #1
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	2301      	movs	r3, #1
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	2301      	movs	r3, #1
 80096ba:	2200      	movs	r2, #0
 80096bc:	2107      	movs	r1, #7
 80096be:	2007      	movs	r0, #7
 80096c0:	f001 fa0d 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
				0, 1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	6a3b      	ldr	r3, [r7, #32]
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	68b9      	ldr	r1, [r7, #8]
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f000 fbcb 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x03;
 80096d4:	6a3b      	ldr	r3, [r7, #32]
 80096d6:	2203      	movs	r2, #3
 80096d8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x05;
 80096da:	6a3b      	ldr	r3, [r7, #32]
 80096dc:	2205      	movs	r2, #5
 80096de:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	2200      	movs	r2, #0
 80096e4:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x52;
 80096e6:	6a3b      	ldr	r3, [r7, #32]
 80096e8:	2252      	movs	r2, #82	; 0x52
 80096ea:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	2200      	movs	r2, #0
 80096f0:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x37;
 80096f2:	6a3b      	ldr	r3, [r7, #32]
 80096f4:	2237      	movs	r2, #55	; 0x37
 80096f6:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	2200      	movs	r2, #0
 80096fc:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x66;
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	2266      	movs	r2, #102	; 0x66
 8009702:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009704:	6a3b      	ldr	r3, [r7, #32]
 8009706:	2200      	movs	r2, #0
 8009708:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x44;
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	2244      	movs	r2, #68	; 0x44
 800970e:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x03;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2203      	movs	r2, #3
 8009714:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	22f5      	movs	r2, #245	; 0xf5
 800971a:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x03;
 800971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971e:	2203      	movs	r2, #3
 8009720:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x05;
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	2205      	movs	r2, #5
 8009726:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972a:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 8009730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009732:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	72da      	strb	r2, [r3, #11]


		phistpostprocess->valid_phase_low = 0x08;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2208      	movs	r2, #8
 800973c:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x28;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2228      	movs	r2, #40	; 0x28
 8009744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		pdynamic->system__sequence_config =
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	22bb      	movs	r2, #187	; 0xbb
 800974c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 800974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009750:	2226      	movs	r2, #38	; 0x26
 8009752:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009754:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <VL53L1_preset_mode_special_histogram_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b090      	sub	sp, #64	; 0x40
 8009764:	af0a      	add	r7, sp, #40	; 0x28
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800976e:	2300      	movs	r3, #0
 8009770:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	9304      	str	r3, [sp, #16]
 8009776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009778:	9303      	str	r3, [sp, #12]
 800977a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977c:	9302      	str	r3, [sp, #8]
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	68b9      	ldr	r1, [r7, #8]
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f7ff ff49 	bl	8009624 <VL53L1_preset_mode_histogram_short_range>
 8009792:	4603      	mov	r3, r0
 8009794:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009796:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d15a      	bne.n	8009854 <VL53L1_preset_mode_special_histogram_short_range+0xf4>





		VL53L1_init_histogram_config_structure(
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	9308      	str	r3, [sp, #32]
 80097a2:	2301      	movs	r3, #1
 80097a4:	9307      	str	r3, [sp, #28]
 80097a6:	2301      	movs	r3, #1
 80097a8:	9306      	str	r3, [sp, #24]
 80097aa:	2301      	movs	r3, #1
 80097ac:	9305      	str	r3, [sp, #20]
 80097ae:	2300      	movs	r3, #0
 80097b0:	9304      	str	r3, [sp, #16]
 80097b2:	2300      	movs	r3, #0
 80097b4:	9303      	str	r3, [sp, #12]
 80097b6:	2300      	movs	r3, #0
 80097b8:	9302      	str	r3, [sp, #8]
 80097ba:	2301      	movs	r3, #1
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	2301      	movs	r3, #1
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	2300      	movs	r3, #0
 80097c4:	2200      	movs	r2, #0
 80097c6:	2107      	movs	r1, #7
 80097c8:	2007      	movs	r0, #7
 80097ca:	f001 f8f8 	bl	800a9be <VL53L1_init_histogram_config_structure>
				7, 7, 0, 0, 1, 1,
				0, 0, 0, 1, 1, 1,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	3302      	adds	r3, #2
 80097d2:	9308      	str	r3, [sp, #32]
 80097d4:	2301      	movs	r3, #1
 80097d6:	9307      	str	r3, [sp, #28]
 80097d8:	2301      	movs	r3, #1
 80097da:	9306      	str	r3, [sp, #24]
 80097dc:	2301      	movs	r3, #1
 80097de:	9305      	str	r3, [sp, #20]
 80097e0:	2300      	movs	r3, #0
 80097e2:	9304      	str	r3, [sp, #16]
 80097e4:	2300      	movs	r3, #0
 80097e6:	9303      	str	r3, [sp, #12]
 80097e8:	2300      	movs	r3, #0
 80097ea:	9302      	str	r3, [sp, #8]
 80097ec:	2301      	movs	r3, #1
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	2301      	movs	r3, #1
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	2300      	movs	r3, #0
 80097f6:	2200      	movs	r2, #0
 80097f8:	2107      	movs	r1, #7
 80097fa:	2007      	movs	r0, #7
 80097fc:	f001 f96f 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
				0, 0, 0, 1, 1, 1,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	68b9      	ldr	r1, [r7, #8]
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fb2d 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x02;
 8009810:	6a3b      	ldr	r3, [r7, #32]
 8009812:	2202      	movs	r2, #2
 8009814:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x03;
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	2203      	movs	r2, #3
 800981a:	725a      	strb	r2, [r3, #9]



		pgeneral->cal_config__vcsel_start = 0x00;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	2200      	movs	r2, #0
 8009820:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__target = 0x31;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2231      	movs	r2, #49	; 0x31
 8009826:	721a      	strb	r2, [r3, #8]



		pdynamic->sd_config__woi_sd0 = 0x02;
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	2202      	movs	r2, #2
 800982c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x03;
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	2203      	movs	r2, #3
 8009832:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0            =
			ptuning_parms->tp_init_phase_rtn_hist_short;
 8009834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009836:	7b9a      	ldrb	r2, [r3, #14]
		pdynamic->sd_config__initial_phase_sd0            =
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1            =
			ptuning_parms->tp_init_phase_ref_hist_short;
 800983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983e:	7c5a      	ldrb	r2, [r3, #17]
		pdynamic->sd_config__initial_phase_sd1            =
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	72da      	strb	r2, [r3, #11]



		phistpostprocess->valid_phase_low = 0x10;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2210      	movs	r2, #16
 8009848:	f883 2020 	strb.w	r2, [r3, #32]
		phistpostprocess->valid_phase_high = 0x18;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2218      	movs	r2, #24
 8009850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	}

	LOG_FUNCTION_END(status);

	return status;
 8009854:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <VL53L1_preset_mode_histogram_short_range_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b090      	sub	sp, #64	; 0x40
 8009864:	af0a      	add	r7, sp, #40	; 0x28
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800986e:	2300      	movs	r3, #0
 8009870:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009874:	9304      	str	r3, [sp, #16]
 8009876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009878:	9303      	str	r3, [sp, #12]
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	9302      	str	r3, [sp, #8]
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	9301      	str	r3, [sp, #4]
 8009882:	6a3b      	ldr	r3, [r7, #32]
 8009884:	9300      	str	r3, [sp, #0]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	68b9      	ldr	r1, [r7, #8]
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f7ff fec9 	bl	8009624 <VL53L1_preset_mode_histogram_short_range>
 8009892:	4603      	mov	r3, r0
 8009894:	75fb      	strb	r3, [r7, #23]
				ptuning_parms,
				pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009896:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d13b      	bne.n	8009916 <VL53L1_preset_mode_histogram_short_range_mm1+0xb6>





		VL53L1_init_histogram_config_structure(
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	9308      	str	r3, [sp, #32]
 80098a2:	2302      	movs	r3, #2
 80098a4:	9307      	str	r3, [sp, #28]
 80098a6:	2302      	movs	r3, #2
 80098a8:	9306      	str	r3, [sp, #24]
 80098aa:	2301      	movs	r3, #1
 80098ac:	9305      	str	r3, [sp, #20]
 80098ae:	2301      	movs	r3, #1
 80098b0:	9304      	str	r3, [sp, #16]
 80098b2:	2309      	movs	r3, #9
 80098b4:	9303      	str	r3, [sp, #12]
 80098b6:	2308      	movs	r3, #8
 80098b8:	9302      	str	r3, [sp, #8]
 80098ba:	2301      	movs	r3, #1
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	2301      	movs	r3, #1
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	2301      	movs	r3, #1
 80098c4:	2200      	movs	r2, #0
 80098c6:	2107      	movs	r1, #7
 80098c8:	2007      	movs	r0, #7
 80098ca:	f001 f878 	bl	800a9be <VL53L1_init_histogram_config_structure>
				  7,   7, 0, 1, 1, 1,
				8+0, 8+1, 1, 1, 2, 2,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	3302      	adds	r3, #2
 80098d2:	9308      	str	r3, [sp, #32]
 80098d4:	2302      	movs	r3, #2
 80098d6:	9307      	str	r3, [sp, #28]
 80098d8:	2302      	movs	r3, #2
 80098da:	9306      	str	r3, [sp, #24]
 80098dc:	2301      	movs	r3, #1
 80098de:	9305      	str	r3, [sp, #20]
 80098e0:	2301      	movs	r3, #1
 80098e2:	9304      	str	r3, [sp, #16]
 80098e4:	2309      	movs	r3, #9
 80098e6:	9303      	str	r3, [sp, #12]
 80098e8:	2308      	movs	r3, #8
 80098ea:	9302      	str	r3, [sp, #8]
 80098ec:	2301      	movs	r3, #1
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	2301      	movs	r3, #1
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	2301      	movs	r3, #1
 80098f6:	2200      	movs	r2, #0
 80098f8:	2107      	movs	r1, #7
 80098fa:	2007      	movs	r0, #7
 80098fc:	f001 f8ef 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
				8+0, 8+1, 1, 1, 2, 2,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 faad 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		pdynamic->system__sequence_config =
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	22bb      	movs	r2, #187	; 0xbb
 8009914:	745a      	strb	r2, [r3, #17]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009916:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <VL53L1_preset_mode_histogram_short_range_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b08c      	sub	sp, #48	; 0x30
 8009926:	af06      	add	r7, sp, #24
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
 800992e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009930:	2300      	movs	r3, #0
 8009932:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range_mm1(
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	9304      	str	r3, [sp, #16]
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	9303      	str	r3, [sp, #12]
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	9302      	str	r3, [sp, #8]
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	68b9      	ldr	r1, [r7, #8]
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f7ff ff86 	bl	8009860 <VL53L1_preset_mode_histogram_short_range_mm1>
 8009954:	4603      	mov	r3, r0
 8009956:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009958:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d102      	bne.n	8009966 <VL53L1_preset_mode_histogram_short_range_mm2+0x44>



		pdynamic->system__sequence_config =
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	22db      	movs	r2, #219	; 0xdb
 8009964:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800996a:	4618      	mov	r0, r3
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}

08009972 <VL53L1_preset_mode_histogram_characterisation>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b08c      	sub	sp, #48	; 0x30
 8009976:	af06      	add	r7, sp, #24
 8009978:	60f8      	str	r0, [r7, #12]
 800997a:	60b9      	str	r1, [r7, #8]
 800997c:	607a      	str	r2, [r7, #4]
 800997e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009980:	2300      	movs	r3, #0
 8009982:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009986:	9304      	str	r3, [sp, #16]
 8009988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998a:	9303      	str	r3, [sp, #12]
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	9302      	str	r3, [sp, #8]
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	68b9      	ldr	r1, [r7, #8]
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f7ff f9b9 	bl	8008d16 <VL53L1_preset_mode_histogram_ranging>
 80099a4:	4603      	mov	r3, r0
 80099a6:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 80099a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d10b      	bne.n	80099c8 <VL53L1_preset_mode_histogram_characterisation+0x56>



		pstatic->debug__ctrl = 0x01;
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	2201      	movs	r2, #1
 80099b4:	709a      	strb	r2, [r3, #2]
		psystem->power_management__go1_power_force = 0x01;
 80099b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b8:	2201      	movs	r2, #1
 80099ba:	701a      	strb	r2, [r3, #0]

		pdynamic->system__sequence_config               =
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	2283      	movs	r2, #131	; 0x83
 80099c0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_VHV_EN |
				VL53L1_SEQUENCE_PHASECAL_EN |
				VL53L1_SEQUENCE_RANGE_EN;

		psystem->system__mode_start                     =
 80099c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c4:	222e      	movs	r2, #46	; 0x2e
 80099c6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 80099c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <VL53L1_preset_mode_histogram_xtalk_planar>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b090      	sub	sp, #64	; 0x40
 80099d8:	af0a      	add	r7, sp, #40	; 0x28
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80099e2:	2300      	movs	r3, #0
 80099e4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_multizone_long_range(
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	9304      	str	r3, [sp, #16]
 80099ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ec:	9303      	str	r3, [sp, #12]
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	9302      	str	r3, [sp, #8]
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	9301      	str	r3, [sp, #4]
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	9300      	str	r3, [sp, #0]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f9ba 	bl	8009d7a <VL53L1_preset_mode_histogram_multizone_long_range>
 8009a06:	4603      	mov	r3, r0
 8009a08:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d151      	bne.n	8009ab6 <VL53L1_preset_mode_histogram_xtalk_planar+0xe2>



		status =
			VL53L1_zone_preset_xtalk_planar(
 8009a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a14:	6838      	ldr	r0, [r7, #0]
 8009a16:	f00a fb1c 	bl	8014052 <VL53L1_zone_preset_xtalk_planar>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	75fb      	strb	r3, [r7, #23]
				pgeneral,
				pzone_cfg);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	2209      	movs	r2, #9
 8009a22:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 8009a24:	6a3b      	ldr	r3, [r7, #32]
 8009a26:	2209      	movs	r2, #9
 8009a28:	725a      	strb	r2, [r3, #9]



		VL53L1_init_histogram_config_structure(
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	9308      	str	r3, [sp, #32]
 8009a2e:	2304      	movs	r3, #4
 8009a30:	9307      	str	r3, [sp, #28]
 8009a32:	2303      	movs	r3, #3
 8009a34:	9306      	str	r3, [sp, #24]
 8009a36:	2302      	movs	r3, #2
 8009a38:	9305      	str	r3, [sp, #20]
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	9304      	str	r3, [sp, #16]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	2307      	movs	r3, #7
 8009a44:	9302      	str	r3, [sp, #8]
 8009a46:	2304      	movs	r3, #4
 8009a48:	9301      	str	r3, [sp, #4]
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	2302      	movs	r3, #2
 8009a50:	2201      	movs	r2, #1
 8009a52:	2100      	movs	r1, #0
 8009a54:	2007      	movs	r0, #7
 8009a56:	f000 ffb2 	bl	800a9be <VL53L1_init_histogram_config_structure>
			7, 0, 1, 2, 3, 4,
			phistogram);



		VL53L1_init_histogram_multizone_config_structure(
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	9308      	str	r3, [sp, #32]
 8009a60:	2304      	movs	r3, #4
 8009a62:	9307      	str	r3, [sp, #28]
 8009a64:	2303      	movs	r3, #3
 8009a66:	9306      	str	r3, [sp, #24]
 8009a68:	2302      	movs	r3, #2
 8009a6a:	9305      	str	r3, [sp, #20]
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	9304      	str	r3, [sp, #16]
 8009a70:	2300      	movs	r3, #0
 8009a72:	9303      	str	r3, [sp, #12]
 8009a74:	2307      	movs	r3, #7
 8009a76:	9302      	str	r3, [sp, #8]
 8009a78:	2304      	movs	r3, #4
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	2302      	movs	r3, #2
 8009a82:	2201      	movs	r2, #1
 8009a84:	2100      	movs	r1, #0
 8009a86:	2007      	movs	r0, #7
 8009a88:	f001 f829 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
			&(pzone_cfg->multizone_hist_cfg));




		if (status == VL53L1_ERROR_NONE) {
 8009a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d108      	bne.n	8009aa6 <VL53L1_preset_mode_histogram_xtalk_planar+0xd2>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a96:	3302      	adds	r3, #2
 8009a98:	461a      	mov	r2, r3
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a9e:	f003 f97d 	bl	800cd9c <VL53L1_set_histogram_multizone_initial_bin_config>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	75fb      	strb	r3, [r7, #23]
			&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	6a3b      	ldr	r3, [r7, #32]
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	68b9      	ldr	r1, [r7, #8]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f9da 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>

	}

	LOG_FUNCTION_END(status);

	return status;
 8009ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3718      	adds	r7, #24
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <VL53L1_preset_mode_histogram_xtalk_mm1>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b090      	sub	sp, #64	; 0x40
 8009ac6:	af0a      	add	r7, sp, #40	; 0x28
 8009ac8:	60f8      	str	r0, [r7, #12]
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	607a      	str	r2, [r7, #4]
 8009ace:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	9304      	str	r3, [sp, #16]
 8009ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ada:	9303      	str	r3, [sp, #12]
 8009adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ade:	9302      	str	r3, [sp, #8]
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	9301      	str	r3, [sp, #4]
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	68b9      	ldr	r1, [r7, #8]
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f7ff f911 	bl	8008d16 <VL53L1_preset_mode_histogram_ranging>
 8009af4:	4603      	mov	r3, r0
 8009af6:	75fb      	strb	r3, [r7, #23]
			pzone_cfg);




	if (status == VL53L1_ERROR_NONE) {
 8009af8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d16e      	bne.n	8009bde <VL53L1_preset_mode_histogram_xtalk_mm1+0x11c>





		VL53L1_init_histogram_config_structure(
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	9308      	str	r3, [sp, #32]
 8009b04:	230c      	movs	r3, #12
 8009b06:	9307      	str	r3, [sp, #28]
 8009b08:	230b      	movs	r3, #11
 8009b0a:	9306      	str	r3, [sp, #24]
 8009b0c:	230a      	movs	r3, #10
 8009b0e:	9305      	str	r3, [sp, #20]
 8009b10:	2309      	movs	r3, #9
 8009b12:	9304      	str	r3, [sp, #16]
 8009b14:	2308      	movs	r3, #8
 8009b16:	9303      	str	r3, [sp, #12]
 8009b18:	230f      	movs	r3, #15
 8009b1a:	9302      	str	r3, [sp, #8]
 8009b1c:	230c      	movs	r3, #12
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	230b      	movs	r3, #11
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	230a      	movs	r3, #10
 8009b26:	2209      	movs	r2, #9
 8009b28:	2108      	movs	r1, #8
 8009b2a:	200f      	movs	r0, #15
 8009b2c:	f000 ff47 	bl	800a9be <VL53L1_init_histogram_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				phistogram);


		VL53L1_init_histogram_multizone_config_structure(
 8009b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b32:	3302      	adds	r3, #2
 8009b34:	9308      	str	r3, [sp, #32]
 8009b36:	230c      	movs	r3, #12
 8009b38:	9307      	str	r3, [sp, #28]
 8009b3a:	230b      	movs	r3, #11
 8009b3c:	9306      	str	r3, [sp, #24]
 8009b3e:	230a      	movs	r3, #10
 8009b40:	9305      	str	r3, [sp, #20]
 8009b42:	2309      	movs	r3, #9
 8009b44:	9304      	str	r3, [sp, #16]
 8009b46:	2308      	movs	r3, #8
 8009b48:	9303      	str	r3, [sp, #12]
 8009b4a:	230f      	movs	r3, #15
 8009b4c:	9302      	str	r3, [sp, #8]
 8009b4e:	230c      	movs	r3, #12
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	230b      	movs	r3, #11
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	230a      	movs	r3, #10
 8009b58:	2209      	movs	r2, #9
 8009b5a:	2108      	movs	r1, #8
 8009b5c:	200f      	movs	r0, #15
 8009b5e:	f000 ffbe 	bl	800aade <VL53L1_init_histogram_multizone_config_structure>
				8+7, 8+0, 8+1, 8+2, 8+3, 8+4,
				&(pzone_cfg->multizone_hist_cfg));



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	68b9      	ldr	r1, [r7, #8]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f97c 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				ptiming,
				pdynamic);



		ptiming->range_config__vcsel_period_a = 0x09;
 8009b72:	6a3b      	ldr	r3, [r7, #32]
 8009b74:	2209      	movs	r2, #9
 8009b76:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b = 0x09;
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	2209      	movs	r2, #9
 8009b7c:	725a      	strb	r2, [r3, #9]



		ptiming->mm_config__timeout_macrop_a_hi = 0x00;
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	2200      	movs	r2, #0
 8009b82:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo = 0x21;
 8009b84:	6a3b      	ldr	r3, [r7, #32]
 8009b86:	2221      	movs	r2, #33	; 0x21
 8009b88:	705a      	strb	r2, [r3, #1]
		ptiming->mm_config__timeout_macrop_b_hi = 0x00;
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo = 0x21;
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	2221      	movs	r2, #33	; 0x21
 8009b94:	70da      	strb	r2, [r3, #3]



		ptiming->range_config__timeout_macrop_a_hi = 0x00;
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo = 0x29;
 8009b9c:	6a3b      	ldr	r3, [r7, #32]
 8009b9e:	2229      	movs	r2, #41	; 0x29
 8009ba0:	715a      	strb	r2, [r3, #5]
		ptiming->range_config__timeout_macrop_b_hi = 0x00;
 8009ba2:	6a3b      	ldr	r3, [r7, #32]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo = 0x29;
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	2229      	movs	r2, #41	; 0x29
 8009bac:	721a      	strb	r2, [r3, #8]



		pgeneral->cal_config__vcsel_start = 0x09;
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2209      	movs	r2, #9
 8009bb2:	70da      	strb	r2, [r3, #3]



		pgeneral->phasecal_config__timeout_macrop = 0xF5;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	22f5      	movs	r2, #245	; 0xf5
 8009bb8:	71da      	strb	r2, [r3, #7]



		pdynamic->sd_config__woi_sd0 = 0x09;
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	2209      	movs	r2, #9
 8009bbe:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1 = 0x09;
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	2209      	movs	r2, #9
 8009bc4:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0 = 0x09;
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	2209      	movs	r2, #9
 8009bca:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1 = 0x06;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	2206      	movs	r2, #6
 8009bd0:	72da      	strb	r2, [r3, #11]

		pdynamic->system__sequence_config =
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd4:	22bb      	movs	r2, #187	; 0xbb
 8009bd6:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_RANGE_EN;




		psystem->system__mode_start =
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	2226      	movs	r2, #38	; 0x26
 8009bdc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
	}

	LOG_FUNCTION_END(status);

	return status;
 8009bde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3718      	adds	r7, #24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <VL53L1_preset_mode_histogram_xtalk_mm2>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b08c      	sub	sp, #48	; 0x30
 8009bee:	af06      	add	r7, sp, #24
 8009bf0:	60f8      	str	r0, [r7, #12]
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	607a      	str	r2, [r7, #4]
 8009bf6:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_xtalk_mm1(
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	9304      	str	r3, [sp, #16]
 8009c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c02:	9303      	str	r3, [sp, #12]
 8009c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c06:	9302      	str	r3, [sp, #8]
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	68b9      	ldr	r1, [r7, #8]
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f7ff ff53 	bl	8009ac2 <VL53L1_preset_mode_histogram_xtalk_mm1>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	75fb      	strb	r3, [r7, #23]
			psystem,
			ptuning_parms,
			pzone_cfg);


		pdynamic->system__sequence_config =
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	22db      	movs	r2, #219	; 0xdb
 8009c24:	745a      	strb	r2, [r3, #17]



	LOG_FUNCTION_END(status);

	return status;
 8009c26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3718      	adds	r7, #24
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <VL53L1_preset_mode_histogram_multizone>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b08c      	sub	sp, #48	; 0x30
 8009c36:	af06      	add	r7, sp, #24
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
 8009c3e:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c40:	2300      	movs	r3, #0
 8009c42:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_medium_range(
 8009c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c46:	9304      	str	r3, [sp, #16]
 8009c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4a:	9303      	str	r3, [sp, #12]
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	9302      	str	r3, [sp, #8]
 8009c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	6a3b      	ldr	r3, [r7, #32]
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	68b9      	ldr	r1, [r7, #8]
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f7ff fbb9 	bl	80093d6 <VL53L1_preset_mode_histogram_medium_range>
 8009c64:	4603      	mov	r3, r0
 8009c66:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009c68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d12c      	bne.n	8009cca <VL53L1_preset_mode_histogram_multizone+0x98>



		status =
			VL53L1_init_zone_config_structure(
 8009c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c72:	9304      	str	r3, [sp, #16]
 8009c74:	2307      	movs	r3, #7
 8009c76:	9303      	str	r3, [sp, #12]
 8009c78:	2307      	movs	r3, #7
 8009c7a:	9302      	str	r3, [sp, #8]
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	9301      	str	r3, [sp, #4]
 8009c80:	2308      	movs	r3, #8
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	2304      	movs	r3, #4
 8009c86:	2202      	movs	r2, #2
 8009c88:	2108      	movs	r1, #8
 8009c8a:	2004      	movs	r0, #4
 8009c8c:	f00a f96c 	bl	8013f68 <VL53L1_init_zone_config_structure>
 8009c90:	4603      	mov	r3, r0
 8009c92:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 8009c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c96:	785b      	ldrb	r3, [r3, #1]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 8009ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d108      	bne.n	8009cba <VL53L1_preset_mode_histogram_multizone+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	3302      	adds	r3, #2
 8009cac:	461a      	mov	r2, r3
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009cb2:	f003 f873 	bl	800cd9c <VL53L1_set_histogram_multizone_initial_bin_config>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	75fb      	strb	r3, [r7, #23]
				pzone_cfg,
				phistogram,
				&(pzone_cfg->multizone_hist_cfg));
		}

		VL53L1_copy_hist_cfg_to_static_cfg(
 8009cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	6a3b      	ldr	r3, [r7, #32]
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	68b9      	ldr	r1, [r7, #8]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f8d0 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3718      	adds	r7, #24
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <VL53L1_preset_mode_histogram_multizone_short_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b08c      	sub	sp, #48	; 0x30
 8009cda:	af06      	add	r7, sp, #24
 8009cdc:	60f8      	str	r0, [r7, #12]
 8009cde:	60b9      	str	r1, [r7, #8]
 8009ce0:	607a      	str	r2, [r7, #4]
 8009ce2:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_short_range(
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	9304      	str	r3, [sp, #16]
 8009cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cee:	9303      	str	r3, [sp, #12]
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	9302      	str	r3, [sp, #8]
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	6a3b      	ldr	r3, [r7, #32]
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	68b9      	ldr	r1, [r7, #8]
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f7ff fc8e 	bl	8009624 <VL53L1_preset_mode_histogram_short_range>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d12c      	bne.n	8009d6e <VL53L1_preset_mode_histogram_multizone_short_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 8009d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d16:	9304      	str	r3, [sp, #16]
 8009d18:	2307      	movs	r3, #7
 8009d1a:	9303      	str	r3, [sp, #12]
 8009d1c:	2307      	movs	r3, #7
 8009d1e:	9302      	str	r3, [sp, #8]
 8009d20:	2302      	movs	r3, #2
 8009d22:	9301      	str	r3, [sp, #4]
 8009d24:	2308      	movs	r3, #8
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	2304      	movs	r3, #4
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	2108      	movs	r1, #8
 8009d2e:	2004      	movs	r0, #4
 8009d30:	f00a f91a 	bl	8013f68 <VL53L1_init_zone_config_structure>
 8009d34:	4603      	mov	r3, r0
 8009d36:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	785b      	ldrb	r3, [r3, #1]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 8009d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d108      	bne.n	8009d5e <VL53L1_preset_mode_histogram_multizone_short_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	3302      	adds	r3, #2
 8009d50:	461a      	mov	r2, r3
 8009d52:	6879      	ldr	r1, [r7, #4]
 8009d54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d56:	f003 f821 	bl	800cd9c <VL53L1_set_histogram_multizone_initial_bin_config>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	75fb      	strb	r3, [r7, #23]
			);
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	68b9      	ldr	r1, [r7, #8]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f87e 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009d6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3718      	adds	r7, #24
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <VL53L1_preset_mode_histogram_multizone_long_range>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b08c      	sub	sp, #48	; 0x30
 8009d7e:	af06      	add	r7, sp, #24
 8009d80:	60f8      	str	r0, [r7, #12]
 8009d82:	60b9      	str	r1, [r7, #8]
 8009d84:	607a      	str	r2, [r7, #4]
 8009d86:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_long_range(
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8e:	9304      	str	r3, [sp, #16]
 8009d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d92:	9303      	str	r3, [sp, #12]
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	9302      	str	r3, [sp, #8]
 8009d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9a:	9301      	str	r3, [sp, #4]
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	68f8      	ldr	r0, [r7, #12]
 8009da8:	f7ff f9ee 	bl	8009188 <VL53L1_preset_mode_histogram_long_range>
 8009dac:	4603      	mov	r3, r0
 8009dae:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 8009db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d12c      	bne.n	8009e12 <VL53L1_preset_mode_histogram_multizone_long_range+0x98>



		status =
			VL53L1_init_zone_config_structure(
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	9304      	str	r3, [sp, #16]
 8009dbc:	2307      	movs	r3, #7
 8009dbe:	9303      	str	r3, [sp, #12]
 8009dc0:	2307      	movs	r3, #7
 8009dc2:	9302      	str	r3, [sp, #8]
 8009dc4:	2302      	movs	r3, #2
 8009dc6:	9301      	str	r3, [sp, #4]
 8009dc8:	2308      	movs	r3, #8
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	2304      	movs	r3, #4
 8009dce:	2202      	movs	r2, #2
 8009dd0:	2108      	movs	r1, #8
 8009dd2:	2004      	movs	r0, #4
 8009dd4:	f00a f8c8 	bl	8013f68 <VL53L1_init_zone_config_structure>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	75fb      	strb	r3, [r7, #23]
				4, 8, 2,
				7, 7,
				pzone_cfg);

		pgeneral->global_config__stream_divider =
			pzone_cfg->active_zones + 1;
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	785b      	ldrb	r3, [r3, #1]
 8009de0:	3301      	adds	r3, #1
 8009de2:	b2da      	uxtb	r2, r3
		pgeneral->global_config__stream_divider =
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	705a      	strb	r2, [r3, #1]



		if (status == VL53L1_ERROR_NONE) {
 8009de8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d108      	bne.n	8009e02 <VL53L1_preset_mode_histogram_multizone_long_range+0x88>
			status =
			VL53L1_set_histogram_multizone_initial_bin_config(
 8009df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df2:	3302      	adds	r3, #2
 8009df4:	461a      	mov	r2, r3
 8009df6:	6879      	ldr	r1, [r7, #4]
 8009df8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dfa:	f002 ffcf 	bl	800cd9c <VL53L1_set_histogram_multizone_initial_bin_config>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	75fb      	strb	r3, [r7, #23]
				&(pzone_cfg->multizone_hist_cfg));
		}



		VL53L1_copy_hist_cfg_to_static_cfg(
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f82c 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
			pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 8009e12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <VL53L1_preset_mode_olt>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_zone_config_t      *pzone_cfg)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b08a      	sub	sp, #40	; 0x28
 8009e22:	af04      	add	r7, sp, #16
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	607a      	str	r2, [r7, #4]
 8009e2a:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	status = VL53L1_preset_mode_standard_ranging(
 8009e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e32:	9303      	str	r3, [sp, #12]
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	9302      	str	r3, [sp, #8]
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	9301      	str	r3, [sp, #4]
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f7fe fb9e 	bl	8008588 <VL53L1_preset_mode_standard_ranging>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	75fb      	strb	r3, [r7, #23]
					ptuning_parms,
					pzone_cfg);



	if (status == VL53L1_ERROR_NONE)
 8009e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <VL53L1_preset_mode_olt+0x40>

		psystem->system__stream_count_ctrl = 0x01;
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	705a      	strb	r2, [r3, #1]

	LOG_FUNCTION_END(status);

	return status;
 8009e5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3718      	adds	r7, #24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <VL53L1_copy_hist_cfg_to_static_cfg>:
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	60f8      	str	r0, [r7, #12]
 8009e72:	60b9      	str	r1, [r7, #8]
 8009e74:	607a      	str	r2, [r7, #4]
 8009e76:	603b      	str	r3, [r7, #0]
	LOG_FUNCTION_START("");

	SUPPRESS_UNUSED_WARNING(pgeneral);

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	79db      	ldrb	r3, [r3, #7]
 8009eac:	b29b      	uxth	r3, r3
				<< 8)
 8009eae:	021b      	lsls	r3, r3, #8
 8009eb0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	7a1b      	ldrb	r3, [r3, #8]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	4413      	add	r3, r2
 8009eba:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	779a      	strb	r2, [r3, #30]

	pstatic->sd_config__reset_stages_lsb =
			phistogram->histogram_config__user_bin_offset;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	7b9a      	ldrb	r2, [r3, #14]
	pstatic->sd_config__reset_stages_lsb =
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	77da      	strb	r2, [r3, #31]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	785b      	ldrb	r3, [r3, #1]
 8009ef4:	b29b      	uxth	r3, r3
				<< 8)
 8009ef6:	021b      	lsls	r3, r3, #8
 8009ef8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	789b      	ldrb	r3, [r3, #2]
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	4413      	add	r3, r2
 8009f02:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	78db      	ldrb	r3, [r3, #3]
 8009f0c:	b29b      	uxth	r3, r3
				<< 8)
 8009f0e:	021b      	lsls	r3, r3, #8
 8009f10:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	791b      	ldrb	r3, [r3, #4]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4413      	add	r3, r2
 8009f1a:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	73da      	strb	r2, [r3, #15]

	pdynamic->system__thresh_high =
			phistogram->histogram_config__amb_thresh_low;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	8ada      	ldrh	r2, [r3, #22]
	pdynamic->system__thresh_high =
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	805a      	strh	r2, [r3, #2]

	pdynamic->system__thresh_low =
			phistogram->histogram_config__amb_thresh_high;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8b1a      	ldrh	r2, [r3, #24]
	pdynamic->system__thresh_low =
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	809a      	strh	r2, [r3, #4]

	pdynamic->system__enable_xtalk_per_quadrant =
			phistogram->histogram_config__spad_array_selection;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	781a      	ldrb	r2, [r3, #0]
	pdynamic->system__enable_xtalk_per_quadrant =
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	719a      	strb	r2, [r3, #6]

	LOG_FUNCTION_END(0);

}
 8009f48:	bf00      	nop
 8009f4a:	3714      	adds	r7, #20
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <VL53L1_copy_hist_bins_to_static_cfg>:

void VL53L1_copy_hist_bins_to_static_cfg(
	VL53L1_histogram_config_t *phistogram,
	VL53L1_static_config_t    *pstatic,
	VL53L1_timing_config_t    *ptiming)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]


	LOG_FUNCTION_START("");

	pstatic->sigma_estimator__effective_pulse_width_ns =
			phistogram->histogram_config__high_amb_even_bin_0_1;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	7bda      	ldrb	r2, [r3, #15]
	pstatic->sigma_estimator__effective_pulse_width_ns =
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns =
			phistogram->histogram_config__high_amb_even_bin_2_3;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->sigma_estimator__effective_ambient_width_ns =
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm =
			phistogram->histogram_config__high_amb_even_bin_4_5;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	7c5a      	ldrb	r2, [r3, #17]
	pstatic->sigma_estimator__sigma_ref_mm =
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	751a      	strb	r2, [r3, #20]

	pstatic->algo__crosstalk_compensation_valid_height_mm =
			phistogram->histogram_config__high_amb_odd_bin_0_1;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	7c9a      	ldrb	r2, [r3, #18]
	pstatic->algo__crosstalk_compensation_valid_height_mm =
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	755a      	strb	r2, [r3, #21]

	pstatic->spare_host_config__static_config_spare_0 =
			phistogram->histogram_config__high_amb_odd_bin_2_3;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	7cda      	ldrb	r2, [r3, #19]
	pstatic->spare_host_config__static_config_spare_0 =
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1 =
			phistogram->histogram_config__high_amb_odd_bin_4_5;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	7d1a      	ldrb	r2, [r3, #20]
	pstatic->spare_host_config__static_config_spare_1 =
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps =
		(((uint16_t)phistogram->histogram_config__mid_amb_even_bin_0_1)
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	79db      	ldrb	r3, [r3, #7]
 8009f94:	b29b      	uxth	r3, r3
				<< 8)
 8009f96:	021b      	lsls	r3, r3, #8
 8009f98:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__mid_amb_even_bin_2_3;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	7a1b      	ldrb	r3, [r3, #8]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	4413      	add	r3, r2
 8009fa2:	b29a      	uxth	r2, r3
	pstatic->algo__range_ignore_threshold_mcps =
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	831a      	strh	r2, [r3, #24]

	pstatic->algo__range_ignore_valid_height_mm =
			phistogram->histogram_config__mid_amb_even_bin_4_5;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	7a5a      	ldrb	r2, [r3, #9]
	pstatic->algo__range_ignore_valid_height_mm =
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip =
			phistogram->histogram_config__mid_amb_odd_bin_0_1;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	7a9a      	ldrb	r2, [r3, #10]
	pstatic->algo__range_min_clip =
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	76da      	strb	r2, [r3, #27]
	pstatic->algo__consistency_check__tolerance =
			phistogram->histogram_config__mid_amb_odd_bin_2;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	7ada      	ldrb	r2, [r3, #11]
	pstatic->algo__consistency_check__tolerance =
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	771a      	strb	r2, [r3, #28]

	pstatic->spare_host_config__static_config_spare_2 =
			phistogram->histogram_config__mid_amb_odd_bin_3_4;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->spare_host_config__static_config_spare_2 =
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb =
			phistogram->histogram_config__mid_amb_odd_bin_5;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	7b5a      	ldrb	r2, [r3, #13]
	pstatic->sd_config__reset_stages_msb =
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	779a      	strb	r2, [r3, #30]

	ptiming->range_config__sigma_thresh =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_0_1)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	785b      	ldrb	r3, [r3, #1]
 8009fd4:	b29b      	uxth	r3, r3
				<< 8)
 8009fd6:	021b      	lsls	r3, r3, #8
 8009fd8:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_even_bin_2_3;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	789b      	ldrb	r3, [r3, #2]
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	4413      	add	r3, r2
 8009fe2:	b29a      	uxth	r2, r3
	ptiming->range_config__sigma_thresh =
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	815a      	strh	r2, [r3, #10]

	ptiming->range_config__min_count_rate_rtn_limit_mcps =
		(((uint16_t)phistogram->histogram_config__low_amb_even_bin_4_5)
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	78db      	ldrb	r3, [r3, #3]
 8009fec:	b29b      	uxth	r3, r3
				<< 8)
 8009fee:	021b      	lsls	r3, r3, #8
 8009ff0:	b29a      	uxth	r2, r3
		+ (uint16_t)phistogram->histogram_config__low_amb_odd_bin_0_1;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	791b      	ldrb	r3, [r3, #4]
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	b29a      	uxth	r2, r3
	ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	819a      	strh	r2, [r3, #12]

	ptiming->range_config__valid_phase_low =
			phistogram->histogram_config__low_amb_odd_bin_2_3;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	795a      	ldrb	r2, [r3, #5]
	ptiming->range_config__valid_phase_low =
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high =
			phistogram->histogram_config__low_amb_odd_bin_4_5;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	799a      	ldrb	r2, [r3, #6]
	ptiming->range_config__valid_phase_high =
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	73da      	strb	r2, [r3, #15]

	LOG_FUNCTION_END(0);

}
 800a010:	bf00      	nop
 800a012:	3714      	adds	r7, #20
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <VL53L1_preset_mode_histogram_ranging_ref>:
	VL53L1_timing_config_t             *ptiming,
	VL53L1_dynamic_config_t            *pdynamic,
	VL53L1_system_control_t            *psystem,
	VL53L1_tuning_parm_storage_t       *ptuning_parms,
	VL53L1_zone_config_t               *pzone_cfg)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b08c      	sub	sp, #48	; 0x30
 800a020:	af06      	add	r7, sp, #24
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
 800a028:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a02a:	2300      	movs	r3, #0
 800a02c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_preset_mode_histogram_ranging(
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	9304      	str	r3, [sp, #16]
 800a032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a034:	9303      	str	r3, [sp, #12]
 800a036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a038:	9302      	str	r3, [sp, #8]
 800a03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	68b9      	ldr	r1, [r7, #8]
 800a048:	68f8      	ldr	r0, [r7, #12]
 800a04a:	f7fe fe64 	bl	8008d16 <VL53L1_preset_mode_histogram_ranging>
 800a04e:	4603      	mov	r3, r0
 800a050:	75fb      	strb	r3, [r7, #23]
			ptuning_parms,
			pzone_cfg);



	if (status == VL53L1_ERROR_NONE) {
 800a052:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10a      	bne.n	800a070 <VL53L1_preset_mode_histogram_ranging_ref+0x54>



		phistogram->histogram_config__spad_array_selection = 0x01;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	701a      	strb	r2, [r3, #0]



		VL53L1_copy_hist_cfg_to_static_cfg(
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	683a      	ldr	r2, [r7, #0]
 800a068:	68b9      	ldr	r1, [r7, #8]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff fefd 	bl	8009e6a <VL53L1_copy_hist_cfg_to_static_cfg>
				pdynamic);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3318      	adds	r3, #24
 800a088:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2230      	movs	r2, #48	; 0x30
 800a09e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f44f 523f 	mov.w	r2, #12224	; 0x2fc0
 800a0a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a0aa:	bf00      	nop
 800a0ac:	3714      	adds	r7, #20
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800a0b6:	b480      	push	{r7}
 800a0b8:	b085      	sub	sp, #20
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	70fb      	strb	r3, [r7, #3]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3318      	adds	r3, #24
 800a0c6:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	332c      	adds	r3, #44	; 0x2c
 800a0cc:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	78fa      	ldrb	r2, [r7, #3]
 800a0d2:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2202      	movs	r2, #2
 800a0de:	711a      	strb	r2, [r3, #4]
	pstate->cfg_timing_status = 0;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	715a      	strb	r2, [r3, #5]
	pstate->cfg_zone_id       = 0;
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	719a      	strb	r2, [r3, #6]

	pstate->rd_device_state   = device_state;
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	78fa      	ldrb	r2, [r7, #3]
 800a0f0:	71da      	strb	r2, [r3, #7]
	pstate->rd_stream_count   = 0;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	721a      	strb	r2, [r3, #8]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	2202      	movs	r2, #2
 800a0fc:	72da      	strb	r2, [r3, #11]
	pstate->rd_timing_status  = 0;
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2200      	movs	r2, #0
 800a102:	731a      	strb	r2, [r3, #12]
	pstate->rd_zone_id        = 0;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2200      	movs	r2, #0
 800a108:	735a      	strb	r2, [r3, #13]

}
 800a10a:	bf00      	nop
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
	...

0800a118 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]


	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800a120:	2300      	movs	r3, #0
 800a122:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3318      	adds	r3, #24
 800a128:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	332c      	adds	r3, #44	; 0x2c
 800a12e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	if ((pdev->sys_ctrl.system__mode_start &
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d115      	bne.n	800a16a <VL53L1_update_ll_driver_rd_state+0x52>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2203      	movs	r2, #3
 800a142:	71da      	strb	r2, [r3, #7]
		pstate->rd_stream_count  = 0;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	721a      	strb	r2, [r3, #8]
		pstate->rd_internal_stream_count = 0;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	725a      	strb	r2, [r3, #9]
		pstate->rd_internal_stream_count_val = 0;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	729a      	strb	r2, [r3, #10]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2202      	movs	r2, #2
 800a15a:	72da      	strb	r2, [r3, #11]
		pstate->rd_timing_status = 0;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	731a      	strb	r2, [r3, #12]
		pstate->rd_zone_id       = 0;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	735a      	strb	r2, [r3, #13]
 800a168:	e0be      	b.n	800a2e8 <VL53L1_update_ll_driver_rd_state+0x1d0>

	} else {



		if (pstate->rd_stream_count == 0xFF)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	7a1b      	ldrb	r3, [r3, #8]
 800a16e:	2bff      	cmp	r3, #255	; 0xff
 800a170:	d103      	bne.n	800a17a <VL53L1_update_ll_driver_rd_state+0x62>
			pstate->rd_stream_count = 0x80;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2280      	movs	r2, #128	; 0x80
 800a176:	721a      	strb	r2, [r3, #8]
 800a178:	e005      	b.n	800a186 <VL53L1_update_ll_driver_rd_state+0x6e>
		else
			pstate->rd_stream_count++;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	7a1b      	ldrb	r3, [r3, #8]
 800a17e:	3301      	adds	r3, #1
 800a180:	b2da      	uxtb	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	721a      	strb	r2, [r3, #8]


		status = VL53L1_update_internal_stream_counters(Dev,
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	7a19      	ldrb	r1, [r3, #8]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f103 0209 	add.w	r2, r3, #9
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	330a      	adds	r3, #10
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f002 fdc2 	bl	800cd1e <VL53L1_update_internal_stream_counters>
 800a19a:	4603      	mov	r3, r0
 800a19c:	75fb      	strb	r3, [r7, #23]
			&(pstate->rd_internal_stream_count),
			&(pstate->rd_internal_stream_count_val));



		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	7adb      	ldrb	r3, [r3, #11]
 800a1a2:	f083 0302 	eor.w	r3, r3, #2
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	72da      	strb	r2, [r3, #11]



		switch (pstate->rd_device_state) {
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	79db      	ldrb	r3, [r3, #7]
 800a1b0:	3b03      	subs	r3, #3
 800a1b2:	2b05      	cmp	r3, #5
 800a1b4:	f200 8082 	bhi.w	800a2bc <VL53L1_update_ll_driver_rd_state+0x1a4>
 800a1b8:	a201      	add	r2, pc, #4	; (adr r2, 800a1c0 <VL53L1_update_ll_driver_rd_state+0xa8>)
 800a1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1be:	bf00      	nop
 800a1c0:	0800a1d9 	.word	0x0800a1d9
 800a1c4:	0800a2bd 	.word	0x0800a2bd
 800a1c8:	0800a2bd 	.word	0x0800a2bd
 800a1cc:	0800a22b 	.word	0x0800a22b
 800a1d0:	0800a261 	.word	0x0800a261
 800a1d4:	0800a28b 	.word	0x0800a28b

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f893 33a2 	ldrb.w	r3, [r3, #930]	; 0x3a2
 800a1de:	f003 0302 	and.w	r3, r3, #2
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	dd03      	ble.n	800a1ee <VL53L1_update_ll_driver_rd_state+0xd6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2206      	movs	r2, #6
 800a1ea:	71da      	strb	r2, [r3, #7]
 800a1ec:	e00d      	b.n	800a20a <VL53L1_update_ll_driver_rd_state+0xf2>
				VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				if (pstate->rd_zone_id >=
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	7b5a      	ldrb	r2, [r3, #13]
					pdev->zone_cfg.active_zones)
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
				if (pstate->rd_zone_id >=
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d303      	bcc.n	800a204 <VL53L1_update_ll_driver_rd_state+0xec>
					pstate->rd_device_state =
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2208      	movs	r2, #8
 800a200:	71da      	strb	r2, [r3, #7]
 800a202:	e002      	b.n	800a20a <VL53L1_update_ll_driver_rd_state+0xf2>
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
				else
					pstate->rd_device_state =
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2207      	movs	r2, #7
 800a208:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			}

			pstate->rd_stream_count  = 0;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	729a      	strb	r2, [r3, #10]
			pstate->rd_timing_status = 0;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	735a      	strb	r2, [r3, #13]

			break;
 800a228:	e05e      	b.n	800a2e8 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:
			pstate->rd_stream_count = 0;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	729a      	strb	r2, [r3, #10]
			pstate->rd_zone_id      = 0;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d303      	bcc.n	800a258 <VL53L1_update_ll_driver_rd_state+0x140>
				pstate->rd_device_state =
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2208      	movs	r2, #8
 800a254:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a256:	e047      	b.n	800a2e8 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2207      	movs	r2, #7
 800a25c:	71da      	strb	r2, [r3, #7]
			break;
 800a25e:	e043      	b.n	800a2e8 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:
			pstate->rd_zone_id++;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	7b5b      	ldrb	r3, [r3, #13]
 800a264:	3301      	adds	r3, #1
 800a266:	b2da      	uxtb	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	735a      	strb	r2, [r3, #13]
			if (pstate->rd_zone_id >=
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a276:	429a      	cmp	r2, r3
 800a278:	d303      	bcc.n	800a282 <VL53L1_update_ll_driver_rd_state+0x16a>
				pstate->rd_device_state =
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2208      	movs	r2, #8
 800a27e:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;

			break;
 800a280:	e032      	b.n	800a2e8 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2207      	movs	r2, #7
 800a286:	71da      	strb	r2, [r3, #7]
			break;
 800a288:	e02e      	b.n	800a2e8 <VL53L1_update_ll_driver_rd_state+0x1d0>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:
			pstate->rd_zone_id        = 0;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	735a      	strb	r2, [r3, #13]
			pstate->rd_timing_status ^= 0x01;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	7b1b      	ldrb	r3, [r3, #12]
 800a294:	f083 0301 	eor.w	r3, r3, #1
 800a298:	b2da      	uxtb	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	731a      	strb	r2, [r3, #12]

			if (pstate->rd_zone_id >=
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	7b5a      	ldrb	r2, [r3, #13]
				pdev->zone_cfg.active_zones)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->rd_zone_id >=
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d303      	bcc.n	800a2b4 <VL53L1_update_ll_driver_rd_state+0x19c>
				pstate->rd_device_state =
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2208      	movs	r2, #8
 800a2b0:	71da      	strb	r2, [r3, #7]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			else
				pstate->rd_device_state =
					VL53L1_DEVICESTATE_RANGING_GATHER_DATA;
			break;
 800a2b2:	e019      	b.n	800a2e8 <VL53L1_update_ll_driver_rd_state+0x1d0>
				pstate->rd_device_state =
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2207      	movs	r2, #7
 800a2b8:	71da      	strb	r2, [r3, #7]
			break;
 800a2ba:	e015      	b.n	800a2e8 <VL53L1_update_ll_driver_rd_state+0x1d0>

		default:
			pstate->rd_device_state  =
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2203      	movs	r2, #3
 800a2c0:	71da      	strb	r2, [r3, #7]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	721a      	strb	r2, [r3, #8]
			pstate->rd_internal_stream_count = 0;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	725a      	strb	r2, [r3, #9]
			pstate->rd_internal_stream_count_val = 0;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	729a      	strb	r2, [r3, #10]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2202      	movs	r2, #2
 800a2d8:	72da      	strb	r2, [r3, #11]
			pstate->rd_timing_status = 0;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	731a      	strb	r2, [r3, #12]
			pstate->rd_zone_id       = 0;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	735a      	strb	r2, [r3, #13]
			break;
 800a2e6:	bf00      	nop



	LOG_FUNCTION_END(status);

	return status;
 800a2e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b08d      	sub	sp, #52	; 0x34
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L1_LLDriverData_t  *pdev =
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	3318      	adds	r3, #24
 800a306:	62bb      	str	r3, [r7, #40]	; 0x28
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a30e:	3308      	adds	r3, #8
 800a310:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	332c      	adds	r3, #44	; 0x2c
 800a316:	623b      	str	r3, [r7, #32]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800a318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31a:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 800a31e:	61fb      	str	r3, [r7, #28]
	VL53L1_histogram_bin_data_t *phist_data = &(pdev->hist_data);
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800a326:	61bb      	str	r3, [r7, #24]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a32e:	617b      	str	r3, [r7, #20]

	uint8_t   device_range_status   = 0;
 800a330:	2300      	movs	r3, #0
 800a332:	74fb      	strb	r3, [r7, #19]
	uint8_t   device_stream_count   = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	74bb      	strb	r3, [r7, #18]
	uint8_t   device_gph_id         = 0;
 800a338:	2300      	movs	r3, #0
 800a33a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t   histogram_mode        = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	747b      	strb	r3, [r7, #17]
	uint8_t   expected_stream_count = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	743b      	strb	r3, [r7, #16]
	uint8_t   expected_gph_id       = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	device_range_status =
			psys_results->result__range_status &
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800a34e:	f003 031f 	and.w	r3, r3, #31
 800a352:	74fb      	strb	r3, [r7, #19]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	78db      	ldrb	r3, [r3, #3]
 800a358:	74bb      	strb	r3, [r7, #18]



	histogram_mode =
		(pdev->sys_ctrl.system__mode_start &
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a360:	f003 0302 	and.w	r3, r3, #2
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM) ==
 800a364:	2b00      	cmp	r3, #0
 800a366:	bf14      	ite	ne
 800a368:	2301      	movne	r3, #1
 800a36a:	2300      	moveq	r3, #0
 800a36c:	b2db      	uxtb	r3, r3
	histogram_mode =
 800a36e:	747b      	strb	r3, [r7, #17]
		VL53L1_DEVICESCHEDULERMODE_HISTOGRAM;


	device_gph_id = (psys_results->result__interrupt_status &
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a374:	111b      	asrs	r3, r3, #4
 800a376:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800a378:	f003 0302 	and.w	r3, r3, #2
 800a37c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if (histogram_mode)
 800a380:	7c7b      	ldrb	r3, [r7, #17]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d008      	beq.n	800a398 <VL53L1_check_ll_driver_rd_state+0xa4>
		device_gph_id = (phist_data->result__interrupt_status &
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
			VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800a38c:	111b      	asrs	r3, r3, #4
 800a38e:	b2db      	uxtb	r3, r3
		device_gph_id = (phist_data->result__interrupt_status &
 800a390:	f003 0302 	and.w	r3, r3, #2
 800a394:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e



	if (!((pdev->sys_ctrl.system__mode_start &
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a39e:	f003 0320 	and.w	r3, r3, #32
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d04e      	beq.n	800a444 <VL53L1_check_ll_driver_rd_state+0x150>
		VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK))
		goto ENDFUNC;



	if (pstate->rd_device_state ==
 800a3a6:	6a3b      	ldr	r3, [r7, #32]
 800a3a8:	79db      	ldrb	r3, [r3, #7]
 800a3aa:	2b06      	cmp	r3, #6
 800a3ac:	d109      	bne.n	800a3c2 <VL53L1_check_ll_driver_rd_state+0xce>
		VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

		if (histogram_mode == 0) {
 800a3ae:	7c7b      	ldrb	r3, [r7, #17]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d14a      	bne.n	800a44a <VL53L1_check_ll_driver_rd_state+0x156>
			if (device_range_status !=
 800a3b4:	7cfb      	ldrb	r3, [r7, #19]
 800a3b6:	2b12      	cmp	r3, #18
 800a3b8:	d047      	beq.n	800a44a <VL53L1_check_ll_driver_rd_state+0x156>
			VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY)
				status =
 800a3ba:	23ef      	movs	r3, #239	; 0xef
 800a3bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a3c0:	e043      	b.n	800a44a <VL53L1_check_ll_driver_rd_state+0x156>
				VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;

		}
	} else {
		if (pstate->rd_stream_count != device_stream_count)
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	7a1b      	ldrb	r3, [r3, #8]
 800a3c6:	7cba      	ldrb	r2, [r7, #18]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d002      	beq.n	800a3d2 <VL53L1_check_ll_driver_rd_state+0xde>
			status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800a3cc:	23ee      	movs	r3, #238	; 0xee
 800a3ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


		if (pstate->rd_gph_id != device_gph_id)
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	7adb      	ldrb	r3, [r3, #11]
 800a3d6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d002      	beq.n	800a3e4 <VL53L1_check_ll_driver_rd_state+0xf0>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800a3de:	23ed      	movs	r3, #237	; 0xed
 800a3e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f




		expected_stream_count =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_stream_count;
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	7b5b      	ldrb	r3, [r3, #13]
 800a3e8:	4619      	mov	r1, r3
		expected_stream_count =
 800a3ea:	697a      	ldr	r2, [r7, #20]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	440b      	add	r3, r1
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	4413      	add	r3, r2
 800a3f6:	3302      	adds	r3, #2
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	743b      	strb	r3, [r7, #16]
		expected_gph_id =
		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id;
 800a3fc:	6a3b      	ldr	r3, [r7, #32]
 800a3fe:	7b5b      	ldrb	r3, [r3, #13]
 800a400:	4619      	mov	r1, r3
		expected_gph_id =
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	460b      	mov	r3, r1
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	440b      	add	r3, r1
 800a40a:	005b      	lsls	r3, r3, #1
 800a40c:	4413      	add	r3, r2
 800a40e:	3303      	adds	r3, #3
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	73fb      	strb	r3, [r7, #15]



		if (expected_stream_count != device_stream_count) {
 800a414:	7c3a      	ldrb	r2, [r7, #16]
 800a416:	7cbb      	ldrb	r3, [r7, #18]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d00a      	beq.n	800a432 <VL53L1_check_ll_driver_rd_state+0x13e>


			if (!((pdev->zone_cfg.active_zones == 0) &&
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d102      	bne.n	800a42c <VL53L1_check_ll_driver_rd_state+0x138>
 800a426:	7cbb      	ldrb	r3, [r7, #18]
 800a428:	2bff      	cmp	r3, #255	; 0xff
 800a42a:	d002      	beq.n	800a432 <VL53L1_check_ll_driver_rd_state+0x13e>
				(device_stream_count == 255)))
				status =
 800a42c:	23ec      	movs	r3, #236	; 0xec
 800a42e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		}



		if (expected_gph_id != device_gph_id)
 800a432:	7bfa      	ldrb	r2, [r7, #15]
 800a434:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a438:	429a      	cmp	r2, r3
 800a43a:	d005      	beq.n	800a448 <VL53L1_check_ll_driver_rd_state+0x154>
			status = VL53L1_ERROR_ZONE_GPH_ID_CHECK_FAIL;
 800a43c:	23eb      	movs	r3, #235	; 0xeb
 800a43e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a442:	e002      	b.n	800a44a <VL53L1_check_ll_driver_rd_state+0x156>
		goto ENDFUNC;
 800a444:	bf00      	nop
 800a446:	e000      	b.n	800a44a <VL53L1_check_ll_driver_rd_state+0x156>

	}



ENDFUNC:
 800a448:	bf00      	nop
	LOG_FUNCTION_END(status);
	return status;
 800a44a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3734      	adds	r7, #52	; 0x34
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b088      	sub	sp, #32
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]


	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800a462:	2300      	movs	r3, #0
 800a464:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3318      	adds	r3, #24
 800a46a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a472:	3308      	adds	r3, #8
 800a474:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	332c      	adds	r3, #44	; 0x2c
 800a47a:	613b      	str	r3, [r7, #16]
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a482:	60fb      	str	r3, [r7, #12]





	if ((pdev->sys_ctrl.system__mode_start &
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	f893 33a8 	ldrb.w	r3, [r3, #936]	; 0x3a8
 800a48a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d11b      	bne.n	800a4ca <VL53L1_update_ll_driver_cfg_state+0x70>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	2203      	movs	r2, #3
 800a496:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	2200      	movs	r2, #0
 800a49c:	705a      	strb	r2, [r3, #1]
		pstate->cfg_internal_stream_count = 0;
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	709a      	strb	r2, [r3, #2]
		pstate->cfg_internal_stream_count_val = 0;
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	70da      	strb	r2, [r3, #3]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	711a      	strb	r2, [r3, #4]
		pstate->cfg_timing_status = 0;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	715a      	strb	r2, [r3, #5]
		pstate->cfg_zone_id       = 0;
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	719a      	strb	r2, [r3, #6]
		prev_cfg_zone_id          = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	77bb      	strb	r3, [r7, #30]
		prev_cfg_gph_id           = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	777b      	strb	r3, [r7, #29]
		prev_cfg_stream_count     = 0;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	773b      	strb	r3, [r7, #28]
 800a4c8:	e0b1      	b.n	800a62e <VL53L1_update_ll_driver_cfg_state+0x1d4>

	} else {

		prev_cfg_gph_id           = pstate->cfg_gph_id;
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	791b      	ldrb	r3, [r3, #4]
 800a4ce:	777b      	strb	r3, [r7, #29]
		prev_cfg_zone_id          = pstate->cfg_zone_id;
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	799b      	ldrb	r3, [r3, #6]
 800a4d4:	77bb      	strb	r3, [r7, #30]
		prev_cfg_stream_count     = pstate->cfg_stream_count;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	785b      	ldrb	r3, [r3, #1]
 800a4da:	773b      	strb	r3, [r7, #28]



		if (pstate->cfg_stream_count == 0xFF)
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	785b      	ldrb	r3, [r3, #1]
 800a4e0:	2bff      	cmp	r3, #255	; 0xff
 800a4e2:	d103      	bne.n	800a4ec <VL53L1_update_ll_driver_cfg_state+0x92>
			pstate->cfg_stream_count = 0x80;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	2280      	movs	r2, #128	; 0x80
 800a4e8:	705a      	strb	r2, [r3, #1]
 800a4ea:	e005      	b.n	800a4f8 <VL53L1_update_ll_driver_cfg_state+0x9e>
		else
			pstate->cfg_stream_count++;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	785b      	ldrb	r3, [r3, #1]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	b2da      	uxtb	r2, r3
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	705a      	strb	r2, [r3, #1]


		status = VL53L1_update_internal_stream_counters(
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	7859      	ldrb	r1, [r3, #1]
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	1c9a      	adds	r2, r3, #2
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	3303      	adds	r3, #3
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f002 fc0a 	bl	800cd1e <VL53L1_update_internal_stream_counters>
 800a50a:	4603      	mov	r3, r0
 800a50c:	77fb      	strb	r3, [r7, #31]
			&(pstate->cfg_internal_stream_count),
			&(pstate->cfg_internal_stream_count_val));



		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	791b      	ldrb	r3, [r3, #4]
 800a512:	f083 0302 	eor.w	r3, r3, #2
 800a516:	b2da      	uxtb	r2, r3
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	711a      	strb	r2, [r3, #4]



		switch (pstate->cfg_device_state) {
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	2b05      	cmp	r3, #5
 800a522:	d053      	beq.n	800a5cc <VL53L1_update_ll_driver_cfg_state+0x172>
 800a524:	2b05      	cmp	r3, #5
 800a526:	dc69      	bgt.n	800a5fc <VL53L1_update_ll_driver_cfg_state+0x1a2>
 800a528:	2b03      	cmp	r3, #3
 800a52a:	d002      	beq.n	800a532 <VL53L1_update_ll_driver_cfg_state+0xd8>
 800a52c:	2b04      	cmp	r3, #4
 800a52e:	d02d      	beq.n	800a58c <VL53L1_update_ll_driver_cfg_state+0x132>
 800a530:	e064      	b.n	800a5fc <VL53L1_update_ll_driver_cfg_state+0x1a2>

		case VL53L1_DEVICESTATE_SW_STANDBY:
			pstate->cfg_zone_id = 1;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	2201      	movs	r2, #1
 800a536:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a542:	429a      	cmp	r2, r3
 800a544:	d909      	bls.n	800a55a <VL53L1_update_ll_driver_cfg_state+0x100>
				pstate->cfg_zone_id = 0;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2200      	movs	r2, #0
 800a54a:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	795b      	ldrb	r3, [r3, #5]
 800a550:	f083 0301 	eor.w	r3, r3, #1
 800a554:	b2da      	uxtb	r2, r3
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	715a      	strb	r2, [r3, #5]
			}
			pstate->cfg_stream_count = 1;
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2201      	movs	r2, #1
 800a55e:	705a      	strb	r2, [r3, #1]

			if (pdev->gen_cfg.global_config__stream_divider == 0) {
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800a566:	2b00      	cmp	r3, #0
 800a568:	d106      	bne.n	800a578 <VL53L1_update_ll_driver_cfg_state+0x11e>
				pstate->cfg_internal_stream_count = 1;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	2201      	movs	r2, #1
 800a56e:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 0;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	2200      	movs	r2, #0
 800a574:	70da      	strb	r2, [r3, #3]
 800a576:	e005      	b.n	800a584 <VL53L1_update_ll_driver_cfg_state+0x12a>
			} else {
				pstate->cfg_internal_stream_count = 0;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2200      	movs	r2, #0
 800a57c:	709a      	strb	r2, [r3, #2]
				pstate->cfg_internal_stream_count_val = 1;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	2201      	movs	r2, #1
 800a582:	70da      	strb	r2, [r3, #3]
			}
			pstate->cfg_device_state =
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	2204      	movs	r2, #4
 800a588:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
			break;
 800a58a:	e050      	b.n	800a62e <VL53L1_update_ll_driver_cfg_state+0x1d4>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:
			pstate->cfg_zone_id++;
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	799b      	ldrb	r3, [r3, #6]
 800a590:	3301      	adds	r3, #1
 800a592:	b2da      	uxtb	r2, r3
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d940      	bls.n	800a628 <VL53L1_update_ll_driver_cfg_state+0x1ce>

				pstate->cfg_zone_id = 0;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	795b      	ldrb	r3, [r3, #5]
 800a5b0:	f083 0301 	eor.w	r3, r3, #1
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	715a      	strb	r2, [r3, #5]




				if (pdev->zone_cfg.active_zones > 0) {
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d031      	beq.n	800a628 <VL53L1_update_ll_driver_cfg_state+0x1ce>
					pstate->cfg_device_state =
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	2205      	movs	r2, #5
 800a5c8:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_RANGING_DSS_MANUAL;
				}
			}
			break;
 800a5ca:	e02d      	b.n	800a628 <VL53L1_update_ll_driver_cfg_state+0x1ce>

		case VL53L1_DEVICESTATE_RANGING_DSS_MANUAL:
			pstate->cfg_zone_id++;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	799b      	ldrb	r3, [r3, #6]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	b2da      	uxtb	r2, r3
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	719a      	strb	r2, [r3, #6]
			if (pstate->cfg_zone_id >
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	799a      	ldrb	r2, [r3, #6]
				pdev->zone_cfg.active_zones) {
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
			if (pstate->cfg_zone_id >
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d922      	bls.n	800a62c <VL53L1_update_ll_driver_cfg_state+0x1d2>
				pstate->cfg_zone_id = 0;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	719a      	strb	r2, [r3, #6]
				pstate->cfg_timing_status ^= 0x01;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	795b      	ldrb	r3, [r3, #5]
 800a5f0:	f083 0301 	eor.w	r3, r3, #1
 800a5f4:	b2da      	uxtb	r2, r3
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	715a      	strb	r2, [r3, #5]
			}
			break;
 800a5fa:	e017      	b.n	800a62c <VL53L1_update_ll_driver_cfg_state+0x1d2>

		default:
			pstate->cfg_device_state =
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	2203      	movs	r2, #3
 800a600:	701a      	strb	r2, [r3, #0]
					VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->cfg_stream_count = 0;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	2200      	movs	r2, #0
 800a606:	705a      	strb	r2, [r3, #1]
			pstate->cfg_internal_stream_count = 0;
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	2200      	movs	r2, #0
 800a60c:	709a      	strb	r2, [r3, #2]
			pstate->cfg_internal_stream_count_val = 0;
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	2200      	movs	r2, #0
 800a612:	70da      	strb	r2, [r3, #3]
			pstate->cfg_gph_id =
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	2202      	movs	r2, #2
 800a618:	711a      	strb	r2, [r3, #4]
					VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
			pstate->cfg_timing_status = 0;
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	2200      	movs	r2, #0
 800a61e:	715a      	strb	r2, [r3, #5]
			pstate->cfg_zone_id       = 0;
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	2200      	movs	r2, #0
 800a624:	719a      	strb	r2, [r3, #6]
			break;
 800a626:	e002      	b.n	800a62e <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800a628:	bf00      	nop
 800a62a:	e000      	b.n	800a62e <VL53L1_update_ll_driver_cfg_state+0x1d4>
			break;
 800a62c:	bf00      	nop
		}
	}


	if (pdev->zone_cfg.active_zones == 0) {
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800a634:	2b00      	cmp	r3, #0
 800a636:	d11d      	bne.n	800a674 <VL53L1_update_ll_driver_cfg_state+0x21a>

		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800a638:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count - 1;
 800a63a:	7f3b      	ldrb	r3, [r7, #28]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b2d8      	uxtb	r0, r3
 800a640:	68f9      	ldr	r1, [r7, #12]
 800a642:	4613      	mov	r3, r2
 800a644:	009b      	lsls	r3, r3, #2
 800a646:	4413      	add	r3, r2
 800a648:	005b      	lsls	r3, r3, #1
 800a64a:	440b      	add	r3, r1
 800a64c:	3302      	adds	r3, #2
 800a64e:	4602      	mov	r2, r0
 800a650:	701a      	strb	r2, [r3, #0]

		pZ->VL53L1_p_002[pstate->rd_zone_id].expected_gph_id =
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	7b5b      	ldrb	r3, [r3, #13]
 800a656:	4619      	mov	r1, r3
 800a658:	7f7b      	ldrb	r3, [r7, #29]
 800a65a:	f083 0302 	eor.w	r3, r3, #2
 800a65e:	b2d8      	uxtb	r0, r3
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	460b      	mov	r3, r1
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	440b      	add	r3, r1
 800a668:	005b      	lsls	r3, r3, #1
 800a66a:	4413      	add	r3, r2
 800a66c:	3303      	adds	r3, #3
 800a66e:	4602      	mov	r2, r0
 800a670:	701a      	strb	r2, [r3, #0]
 800a672:	e013      	b.n	800a69c <VL53L1_update_ll_driver_cfg_state+0x242>
			prev_cfg_gph_id ^ VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
	} else {
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_stream_count
 800a674:	7fba      	ldrb	r2, [r7, #30]
			= prev_cfg_stream_count;
 800a676:	68f9      	ldr	r1, [r7, #12]
 800a678:	4613      	mov	r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	4413      	add	r3, r2
 800a67e:	005b      	lsls	r3, r3, #1
 800a680:	440b      	add	r3, r1
 800a682:	3302      	adds	r3, #2
 800a684:	7f3a      	ldrb	r2, [r7, #28]
 800a686:	701a      	strb	r2, [r3, #0]
		pZ->VL53L1_p_002[prev_cfg_zone_id].expected_gph_id =
 800a688:	7fba      	ldrb	r2, [r7, #30]
 800a68a:	68f9      	ldr	r1, [r7, #12]
 800a68c:	4613      	mov	r3, r2
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	005b      	lsls	r3, r3, #1
 800a694:	440b      	add	r3, r1
 800a696:	3303      	adds	r3, #3
 800a698:	7f7a      	ldrb	r2, [r7, #29]
 800a69a:	701a      	strb	r2, [r3, #0]



	LOG_FUNCTION_END(status);

	return status;
 800a69c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3720      	adds	r7, #32
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]


	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	7c1a      	ldrb	r2, [r3, #16]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	7c52      	ldrb	r2, [r2, #17]
 800a6c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	3302      	adds	r3, #2
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	7c92      	ldrb	r2, [r2, #18]
 800a6cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	3303      	adds	r3, #3
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	7cd2      	ldrb	r2, [r2, #19]
 800a6d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	7d12      	ldrb	r2, [r2, #20]
 800a6e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	3305      	adds	r3, #5
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	7d52      	ldrb	r2, [r2, #21]
 800a6ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	3306      	adds	r3, #6
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	7d92      	ldrb	r2, [r2, #22]
 800a6f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	3307      	adds	r3, #7
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	7dd2      	ldrb	r2, [r2, #23]
 800a6fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	3308      	adds	r3, #8
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	7e12      	ldrb	r2, [r2, #24]
 800a708:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	3309      	adds	r3, #9
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	7e52      	ldrb	r2, [r2, #25]
 800a712:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	330a      	adds	r3, #10
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	7e92      	ldrb	r2, [r2, #26]
 800a71c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	330b      	adds	r3, #11
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	7ed2      	ldrb	r2, [r2, #27]
 800a726:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	330c      	adds	r3, #12
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	7f12      	ldrb	r2, [r2, #28]
 800a730:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	330d      	adds	r3, #13
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	7f52      	ldrb	r2, [r2, #29]
 800a73a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	330e      	adds	r3, #14
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	7f92      	ldrb	r2, [r2, #30]
 800a744:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	330f      	adds	r3, #15
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	7fd2      	ldrb	r2, [r2, #31]
 800a74e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	3310      	adds	r3, #16
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a75a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	3311      	adds	r3, #17
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800a766:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	3312      	adds	r3, #18
 800a76c:	687a      	ldr	r2, [r7, #4]
 800a76e:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800a772:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	3313      	adds	r3, #19
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800a77e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	3314      	adds	r3, #20
 800a784:	687a      	ldr	r2, [r7, #4]
 800a786:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a78a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	3315      	adds	r3, #21
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800a796:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	3316      	adds	r3, #22
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800a7a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	3317      	adds	r3, #23
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800a7ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	3318      	adds	r3, #24
 800a7b4:	687a      	ldr	r2, [r7, #4]
 800a7b6:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800a7ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	3319      	adds	r3, #25
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800a7c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	331a      	adds	r3, #26
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800a7d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	331b      	adds	r3, #27
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800a7de:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	331c      	adds	r3, #28
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800a7ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	331d      	adds	r3, #29
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800a7f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	331e      	adds	r3, #30
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800a802:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	331f      	adds	r3, #31
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800a80e:	701a      	strb	r2, [r3, #0]
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <VL53L1_init_system_results>:


void VL53L1_init_system_results(
		VL53L1_system_results_t  *pdata)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]


	pdata->result__interrupt_status                       = 0xFF;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	22ff      	movs	r2, #255	; 0xff
 800a828:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status                           = 0xFF;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	22ff      	movs	r2, #255	; 0xff
 800a82e:	705a      	strb	r2, [r3, #1]
	pdata->result__report_status                          = 0xFF;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	22ff      	movs	r2, #255	; 0xff
 800a834:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count                           = 0xFF;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	22ff      	movs	r2, #255	; 0xff
 800a83a:	70da      	strb	r2, [r3, #3]

	pdata->result__dss_actual_effective_spads_sd0         = 0xFFFF;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a842:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0        = 0xFFFF;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a84a:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0            = 0xFFFF;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a852:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0                              = 0xFFFF;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a85a:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0                              = 0xFFFF;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a862:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 = 0xFFFF;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a86a:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a872:	821a      	strh	r2, [r3, #16]
			0xFFFF;
	pdata->result__mm_inner_actual_effective_spads_sd0    = 0xFFFF;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a87a:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0    = 0xFFFF;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a882:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0         = 0xFFFF;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a88a:	82da      	strh	r2, [r3, #22]

	pdata->result__dss_actual_effective_spads_sd1         = 0xFFFF;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a892:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1        = 0xFFFF;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a89a:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1            = 0xFFFF;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8a2:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1                              = 0xFFFF;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8aa:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1                              = 0xFFFF;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8b2:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 = 0xFFFF;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8ba:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1                            = 0xFFFF;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8c2:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1                            = 0xFFFF;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8ca:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1                            = 0xFFFF;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8d2:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1                            = 0xFF;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	22ff      	movs	r2, #255	; 0xff
 800a8d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <V53L1_init_zone_results_structure>:


void V53L1_init_zone_results_structure(
	uint8_t                 active_zones,
	VL53L1_zone_results_t  *pdata)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	6039      	str	r1, [r7, #0]
 800a8f2:	71fb      	strb	r3, [r7, #7]



	uint8_t  z = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_objects_t *pobjects;

	pdata->max_zones    = VL53L1_MAX_USER_ZONES;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	2210      	movs	r2, #16
 800a8fc:	701a      	strb	r2, [r3, #0]
	pdata->active_zones = active_zones;
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	79fa      	ldrb	r2, [r7, #7]
 800a902:	705a      	strb	r2, [r3, #1]

	for (z = 0; z < pdata->max_zones; z++) {
 800a904:	2300      	movs	r3, #0
 800a906:	73fb      	strb	r3, [r7, #15]
 800a908:	e017      	b.n	800a93a <V53L1_init_zone_results_structure+0x52>
		pobjects = &(pdata->VL53L1_p_002[z]);
 800a90a:	7bfa      	ldrb	r2, [r7, #15]
 800a90c:	4613      	mov	r3, r2
 800a90e:	011b      	lsls	r3, r3, #4
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	4413      	add	r3, r2
 800a918:	3304      	adds	r3, #4
 800a91a:	60bb      	str	r3, [r7, #8]
		pobjects->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	2203      	movs	r2, #3
 800a920:	701a      	strb	r2, [r3, #0]
		pobjects->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2203      	movs	r2, #3
 800a926:	705a      	strb	r2, [r3, #1]
		pobjects->max_objects      = VL53L1_MAX_RANGE_RESULTS;
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	2204      	movs	r2, #4
 800a92c:	711a      	strb	r2, [r3, #4]
		pobjects->active_objects   = 0;
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2200      	movs	r2, #0
 800a932:	715a      	strb	r2, [r3, #5]
	for (z = 0; z < pdata->max_zones; z++) {
 800a934:	7bfb      	ldrb	r3, [r7, #15]
 800a936:	3301      	adds	r3, #1
 800a938:	73fb      	strb	r3, [r7, #15]
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	7bfa      	ldrb	r2, [r7, #15]
 800a940:	429a      	cmp	r2, r3
 800a942:	d3e2      	bcc.n	800a90a <V53L1_init_zone_results_structure+0x22>
	}
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <V53L1_init_zone_dss_configs>:

void V53L1_init_zone_dss_configs(
	VL53L1_DEV              Dev)
{
 800a952:	b480      	push	{r7}
 800a954:	b087      	sub	sp, #28
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverResults_t  *pres =
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800a960:	3308      	adds	r3, #8
 800a962:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLResultsHandle(Dev);
	uint8_t  z = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	75fb      	strb	r3, [r7, #23]
	uint8_t max_zones    = VL53L1_MAX_USER_ZONES;
 800a968:	2310      	movs	r3, #16
 800a96a:	73fb      	strb	r3, [r7, #15]
	VL53L1_zone_private_dyn_cfgs_t *pdata = &(pres->zone_dyn_cfgs);
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800a972:	60bb      	str	r3, [r7, #8]

	for (z = 0; z < max_zones; z++) {
 800a974:	2300      	movs	r3, #0
 800a976:	75fb      	strb	r3, [r7, #23]
 800a978:	e016      	b.n	800a9a8 <V53L1_init_zone_dss_configs+0x56>
		pdata->VL53L1_p_002[z].dss_mode =
 800a97a:	7dfa      	ldrb	r2, [r7, #23]
 800a97c:	68b9      	ldr	r1, [r7, #8]
 800a97e:	4613      	mov	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4413      	add	r3, r2
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	440b      	add	r3, r1
 800a988:	3304      	adds	r3, #4
 800a98a:	2201      	movs	r2, #1
 800a98c:	701a      	strb	r2, [r3, #0]
			VL53L1_DSS_CONTROL__MODE_TARGET_RATE;
		pdata->VL53L1_p_002[z].dss_requested_effective_spad_count = 0;
 800a98e:	7dfa      	ldrb	r2, [r7, #23]
 800a990:	68b9      	ldr	r1, [r7, #8]
 800a992:	4613      	mov	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	440b      	add	r3, r1
 800a99c:	3306      	adds	r3, #6
 800a99e:	2200      	movs	r2, #0
 800a9a0:	801a      	strh	r2, [r3, #0]
	for (z = 0; z < max_zones; z++) {
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	3301      	adds	r3, #1
 800a9a6:	75fb      	strb	r3, [r7, #23]
 800a9a8:	7dfa      	ldrb	r2, [r7, #23]
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d3e4      	bcc.n	800a97a <V53L1_init_zone_dss_configs+0x28>
	}
}
 800a9b0:	bf00      	nop
 800a9b2:	bf00      	nop
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <VL53L1_init_histogram_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800a9be:	b490      	push	{r4, r7}
 800a9c0:	b082      	sub	sp, #8
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	4608      	mov	r0, r1
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4623      	mov	r3, r4
 800a9ce:	71fb      	strb	r3, [r7, #7]
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	71bb      	strb	r3, [r7, #6]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	717b      	strb	r3, [r7, #5]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800a9dc:	79bb      	ldrb	r3, [r7, #6]
 800a9de:	011b      	lsls	r3, r3, #4
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	79fb      	ldrb	r3, [r7, #7]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800a9ec:	793b      	ldrb	r3, [r7, #4]
 800a9ee:	011b      	lsls	r3, r3, #4
 800a9f0:	b2da      	uxtb	r2, r3
 800a9f2:	797b      	ldrb	r3, [r7, #5]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fa:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800a9fc:	7d3b      	ldrb	r3, [r7, #20]
 800a9fe:	011b      	lsls	r3, r3, #4
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	7c3b      	ldrb	r3, [r7, #16]
 800aa04:	4413      	add	r3, r2
 800aa06:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800aa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0a:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			(odd_bin1 << 4) + odd_bin0;
 800aa0c:	7f3b      	ldrb	r3, [r7, #28]
 800aa0e:	011b      	lsls	r3, r3, #4
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	7e3b      	ldrb	r3, [r7, #24]
 800aa14:	4413      	add	r3, r2
 800aa16:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800aa18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1a:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3   =
			(odd_bin3 << 4) + odd_bin2;
 800aa1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa20:	011b      	lsls	r3, r3, #4
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aa28:	4413      	add	r3, r2
 800aa2a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_2_3   =
 800aa2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2e:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5   =
			(odd_bin5 << 4) + odd_bin4;
 800aa30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800aa34:	011b      	lsls	r3, r3, #4
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa3c:	4413      	add	r3, r2
 800aa3e:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_odd_bin_4_5   =
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800aa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa46:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800aa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4a:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4e:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__mid_amb_even_bin_2_3  =
 800aa50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa52:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800aa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa56:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__mid_amb_even_bin_4_5  =
 800aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5e:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__mid_amb_odd_bin_0_1   =
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800aa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa66:	f897 2020 	ldrb.w	r2, [r7, #32]
 800aa6a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800aa6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa78:	4413      	add	r3, r2
 800aa7a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800aa86:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			pdata->histogram_config__low_amb_even_bin_2_3;
 800aa96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa98:	789a      	ldrb	r2, [r3, #2]
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			pdata->histogram_config__low_amb_even_bin_4_5;
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	78da      	ldrb	r2, [r3, #3]
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1  =
			pdata->histogram_config__low_amb_odd_bin_0_1;
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	791a      	ldrb	r2, [r3, #4]
	pdata->histogram_config__high_amb_odd_bin_0_1  =
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
			pdata->histogram_config__low_amb_odd_bin_2_3;
 800aaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab0:	795a      	ldrb	r2, [r3, #5]
	pdata->histogram_config__high_amb_odd_bin_2_3  =
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
			pdata->histogram_config__low_amb_odd_bin_4_5;
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	799a      	ldrb	r2, [r3, #6]
	pdata->histogram_config__high_amb_odd_bin_4_5  =
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aac4:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aacc:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	2200      	movs	r2, #0
 800aad2:	701a      	strb	r2, [r3, #0]

}
 800aad4:	bf00      	nop
 800aad6:	3708      	adds	r7, #8
 800aad8:	46bd      	mov	sp, r7
 800aada:	bc90      	pop	{r4, r7}
 800aadc:	4770      	bx	lr

0800aade <VL53L1_init_histogram_multizone_config_structure>:
	uint8_t   odd_bin2,
	uint8_t   odd_bin3,
	uint8_t   odd_bin4,
	uint8_t   odd_bin5,
	VL53L1_histogram_config_t  *pdata)
{
 800aade:	b490      	push	{r4, r7}
 800aae0:	b082      	sub	sp, #8
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	4604      	mov	r4, r0
 800aae6:	4608      	mov	r0, r1
 800aae8:	4611      	mov	r1, r2
 800aaea:	461a      	mov	r2, r3
 800aaec:	4623      	mov	r3, r4
 800aaee:	71fb      	strb	r3, [r7, #7]
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	71bb      	strb	r3, [r7, #6]
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	717b      	strb	r3, [r7, #5]
 800aaf8:	4613      	mov	r3, r2
 800aafa:	713b      	strb	r3, [r7, #4]


	pdata->histogram_config__low_amb_even_bin_0_1  =
			(even_bin1 << 4) + even_bin0;
 800aafc:	79bb      	ldrb	r3, [r7, #6]
 800aafe:	011b      	lsls	r3, r3, #4
 800ab00:	b2da      	uxtb	r2, r3
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	4413      	add	r3, r2
 800ab06:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_0_1  =
 800ab08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0a:	705a      	strb	r2, [r3, #1]
	pdata->histogram_config__low_amb_even_bin_2_3  =
			(even_bin3 << 4) + even_bin2;
 800ab0c:	793b      	ldrb	r3, [r7, #4]
 800ab0e:	011b      	lsls	r3, r3, #4
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	797b      	ldrb	r3, [r7, #5]
 800ab14:	4413      	add	r3, r2
 800ab16:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_2_3  =
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	709a      	strb	r2, [r3, #2]
	pdata->histogram_config__low_amb_even_bin_4_5  =
			(even_bin5 << 4) + even_bin4;
 800ab1c:	7d3b      	ldrb	r3, [r7, #20]
 800ab1e:	011b      	lsls	r3, r3, #4
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	7c3b      	ldrb	r3, [r7, #16]
 800ab24:	4413      	add	r3, r2
 800ab26:	b2da      	uxtb	r2, r3
	pdata->histogram_config__low_amb_even_bin_4_5  =
 800ab28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2a:	70da      	strb	r2, [r3, #3]

	pdata->histogram_config__low_amb_odd_bin_0_1   =
			pdata->histogram_config__low_amb_even_bin_0_1;
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2e:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__low_amb_odd_bin_0_1   =
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	711a      	strb	r2, [r3, #4]
	pdata->histogram_config__low_amb_odd_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	789a      	ldrb	r2, [r3, #2]
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	715a      	strb	r2, [r3, #5]
	pdata->histogram_config__low_amb_odd_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	78da      	ldrb	r2, [r3, #3]
 800ab40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab42:	719a      	strb	r2, [r3, #6]

	pdata->histogram_config__mid_amb_even_bin_0_1  =
		pdata->histogram_config__low_amb_even_bin_0_1;
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	785a      	ldrb	r2, [r3, #1]
	pdata->histogram_config__mid_amb_even_bin_0_1  =
 800ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4a:	71da      	strb	r2, [r3, #7]
	pdata->histogram_config__mid_amb_even_bin_2_3
		= pdata->histogram_config__low_amb_even_bin_2_3;
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4e:	789a      	ldrb	r2, [r3, #2]
 800ab50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab52:	721a      	strb	r2, [r3, #8]
	pdata->histogram_config__mid_amb_even_bin_4_5
		= pdata->histogram_config__low_amb_even_bin_4_5;
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	78da      	ldrb	r2, [r3, #3]
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	725a      	strb	r2, [r3, #9]

	pdata->histogram_config__mid_amb_odd_bin_0_1
		= pdata->histogram_config__low_amb_odd_bin_0_1;
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	791a      	ldrb	r2, [r3, #4]
 800ab60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab62:	729a      	strb	r2, [r3, #10]
	pdata->histogram_config__mid_amb_odd_bin_2     = odd_bin2;
 800ab64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab66:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ab6a:	72da      	strb	r2, [r3, #11]
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
			(odd_bin4 << 4) + odd_bin3;
 800ab6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab70:	011b      	lsls	r3, r3, #4
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab78:	4413      	add	r3, r2
 800ab7a:	b2da      	uxtb	r2, r3
	pdata->histogram_config__mid_amb_odd_bin_3_4   =
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7e:	731a      	strb	r2, [r3, #12]
	pdata->histogram_config__mid_amb_odd_bin_5     = odd_bin5;
 800ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab82:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ab86:	735a      	strb	r2, [r3, #13]

	pdata->histogram_config__user_bin_offset       = 0x00;
 800ab88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	739a      	strb	r2, [r3, #14]

	pdata->histogram_config__high_amb_even_bin_0_1 =
			(odd_bin1 << 4) + odd_bin0;
 800ab8e:	7f3b      	ldrb	r3, [r7, #28]
 800ab90:	011b      	lsls	r3, r3, #4
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	7e3b      	ldrb	r3, [r7, #24]
 800ab96:	4413      	add	r3, r2
 800ab98:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_0_1 =
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	73da      	strb	r2, [r3, #15]
	pdata->histogram_config__high_amb_even_bin_2_3 =
			(odd_bin3 << 4) + odd_bin2;
 800ab9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aba2:	011b      	lsls	r3, r3, #4
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800abaa:	4413      	add	r3, r2
 800abac:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_2_3 =
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	741a      	strb	r2, [r3, #16]
	pdata->histogram_config__high_amb_even_bin_4_5 =
			(odd_bin5 << 4) + odd_bin4;
 800abb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800abb6:	011b      	lsls	r3, r3, #4
 800abb8:	b2da      	uxtb	r2, r3
 800abba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800abbe:	4413      	add	r3, r2
 800abc0:	b2da      	uxtb	r2, r3
	pdata->histogram_config__high_amb_even_bin_4_5 =
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	745a      	strb	r2, [r3, #17]

	pdata->histogram_config__high_amb_odd_bin_0_1
		= pdata->histogram_config__high_amb_even_bin_0_1;
 800abc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc8:	7bda      	ldrb	r2, [r3, #15]
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	749a      	strb	r2, [r3, #18]
	pdata->histogram_config__high_amb_odd_bin_2_3
		= pdata->histogram_config__high_amb_even_bin_2_3;
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	7c1a      	ldrb	r2, [r3, #16]
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	74da      	strb	r2, [r3, #19]
	pdata->histogram_config__high_amb_odd_bin_4_5
		= pdata->histogram_config__high_amb_even_bin_4_5;
 800abd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd8:	7c5a      	ldrb	r2, [r3, #17]
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	751a      	strb	r2, [r3, #20]



	pdata->histogram_config__amb_thresh_low        = 0xFFFF;
 800abde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abe4:	82da      	strh	r2, [r3, #22]
	pdata->histogram_config__amb_thresh_high       = 0xFFFF;
 800abe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abec:	831a      	strh	r2, [r3, #24]



	pdata->histogram_config__spad_array_selection  = 0x00;
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	2200      	movs	r2, #0
 800abf2:	701a      	strb	r2, [r3, #0]
}
 800abf4:	bf00      	nop
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bc90      	pop	{r4, r7}
 800abfc:	4770      	bx	lr

0800abfe <VL53L1_init_xtalk_bin_data_struct>:

void VL53L1_init_xtalk_bin_data_struct(
	uint32_t                        bin_value,
	uint16_t                        VL53L1_p_024,
	VL53L1_xtalk_histogram_shape_t *pdata)
{
 800abfe:	b480      	push	{r7}
 800ac00:	b087      	sub	sp, #28
 800ac02:	af00      	add	r7, sp, #0
 800ac04:	60f8      	str	r0, [r7, #12]
 800ac06:	460b      	mov	r3, r1
 800ac08:	607a      	str	r2, [r7, #4]
 800ac0a:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	82fb      	strh	r3, [r7, #22]

	pdata->zone_id                   = 0;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp                = 0;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_XTALK_HISTO_BINS;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	220c      	movs	r2, #12
 800ac26:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800ac28:	897b      	ldrh	r3, [r7, #10]
 800ac2a:	b2da      	uxtb	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	729a      	strb	r2, [r3, #10]

	pdata->phasecal_result__reference_phase   = 0;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->phasecal_result__vcsel_start       = 0;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	pdata->cal_config__vcsel_start            = 0;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f

	pdata->vcsel_width                        = 0;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_019                = 0;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	pdata->zero_distance_phase                = 0;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800ac5e:	2300      	movs	r3, #0
 800ac60:	82fb      	strh	r3, [r7, #22]
 800ac62:	e015      	b.n	800ac90 <VL53L1_init_xtalk_bin_data_struct+0x92>
		if (i < VL53L1_p_024)
 800ac64:	8afa      	ldrh	r2, [r7, #22]
 800ac66:	897b      	ldrh	r3, [r7, #10]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d207      	bcs.n	800ac7c <VL53L1_init_xtalk_bin_data_struct+0x7e>
			pdata->bin_data[i] = bin_value;
 800ac6c:	8afb      	ldrh	r3, [r7, #22]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	3302      	adds	r3, #2
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	605a      	str	r2, [r3, #4]
 800ac7a:	e006      	b.n	800ac8a <VL53L1_init_xtalk_bin_data_struct+0x8c>
		else
			pdata->bin_data[i] = 0;
 800ac7c:	8afb      	ldrh	r3, [r7, #22]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	3302      	adds	r3, #2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	2200      	movs	r2, #0
 800ac88:	605a      	str	r2, [r3, #4]
	for (i = 0; i < VL53L1_XTALK_HISTO_BINS; i++) {
 800ac8a:	8afb      	ldrh	r3, [r7, #22]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	82fb      	strh	r3, [r7, #22]
 800ac90:	8afb      	ldrh	r3, [r7, #22]
 800ac92:	2b0b      	cmp	r3, #11
 800ac94:	d9e6      	bls.n	800ac64 <VL53L1_init_xtalk_bin_data_struct+0x66>
	}
}
 800ac96:	bf00      	nop
 800ac98:	bf00      	nop
 800ac9a:	371c      	adds	r7, #28
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b085      	sub	sp, #20
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	4603      	mov	r3, r0
 800acac:	603a      	str	r2, [r7, #0]
 800acae:	80fb      	strh	r3, [r7, #6]
 800acb0:	460b      	mov	r3, r1
 800acb2:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	81fb      	strh	r3, [r7, #14]
	uint16_t   VL53L1_p_002 = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800acbc:	88fb      	ldrh	r3, [r7, #6]
 800acbe:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800acc0:	2300      	movs	r3, #0
 800acc2:	81fb      	strh	r3, [r7, #14]
 800acc4:	e00e      	b.n	800ace4 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800acc6:	88ba      	ldrh	r2, [r7, #4]
 800acc8:	89fb      	ldrh	r3, [r7, #14]
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	3b01      	subs	r3, #1
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	4413      	add	r3, r2
 800acd2:	89ba      	ldrh	r2, [r7, #12]
 800acd4:	b2d2      	uxtb	r2, r2
 800acd6:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800acd8:	89bb      	ldrh	r3, [r7, #12]
 800acda:	0a1b      	lsrs	r3, r3, #8
 800acdc:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800acde:	89fb      	ldrh	r3, [r7, #14]
 800ace0:	3301      	adds	r3, #1
 800ace2:	81fb      	strh	r3, [r7, #14]
 800ace4:	89fa      	ldrh	r2, [r7, #14]
 800ace6:	88bb      	ldrh	r3, [r7, #4]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d3ec      	bcc.n	800acc6 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800acec:	bf00      	nop
 800acee:	bf00      	nop
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf8:	4770      	bx	lr

0800acfa <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800acfa:	b480      	push	{r7}
 800acfc:	b085      	sub	sp, #20
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	4603      	mov	r3, r0
 800ad02:	6039      	str	r1, [r7, #0]
 800ad04:	80fb      	strh	r3, [r7, #6]


	uint16_t   value = 0x00;
 800ad06:	2300      	movs	r3, #0
 800ad08:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800ad0a:	e00a      	b.n	800ad22 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800ad0c:	89fb      	ldrh	r3, [r7, #14]
 800ad0e:	021b      	lsls	r3, r3, #8
 800ad10:	b21a      	sxth	r2, r3
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	1c59      	adds	r1, r3, #1
 800ad16:	6039      	str	r1, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	b21b      	sxth	r3, r3
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	b21b      	sxth	r3, r3
 800ad20:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800ad22:	88fb      	ldrh	r3, [r7, #6]
 800ad24:	1e5a      	subs	r2, r3, #1
 800ad26:	80fa      	strh	r2, [r7, #6]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1ef      	bne.n	800ad0c <VL53L1_i2c_decode_uint16_t+0x12>

	return value;
 800ad2c:	89fb      	ldrh	r3, [r7, #14]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b085      	sub	sp, #20
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	4603      	mov	r3, r0
 800ad42:	603a      	str	r2, [r7, #0]
 800ad44:	80fb      	strh	r3, [r7, #6]
 800ad46:	460b      	mov	r3, r1
 800ad48:	80bb      	strh	r3, [r7, #4]


	uint16_t   i    = 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	81fb      	strh	r3, [r7, #14]
	int16_t    VL53L1_p_002 = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	81bb      	strh	r3, [r7, #12]

	VL53L1_p_002 =  ip_value;
 800ad52:	88fb      	ldrh	r3, [r7, #6]
 800ad54:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count; i++) {
 800ad56:	2300      	movs	r3, #0
 800ad58:	81fb      	strh	r3, [r7, #14]
 800ad5a:	e00f      	b.n	800ad7c <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800ad5c:	88ba      	ldrh	r2, [r7, #4]
 800ad5e:	89fb      	ldrh	r3, [r7, #14]
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	3b01      	subs	r3, #1
 800ad64:	683a      	ldr	r2, [r7, #0]
 800ad66:	4413      	add	r3, r2
 800ad68:	89ba      	ldrh	r2, [r7, #12]
 800ad6a:	b2d2      	uxtb	r2, r2
 800ad6c:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800ad6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ad72:	121b      	asrs	r3, r3, #8
 800ad74:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count; i++) {
 800ad76:	89fb      	ldrh	r3, [r7, #14]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	81fb      	strh	r3, [r7, #14]
 800ad7c:	89fa      	ldrh	r2, [r7, #14]
 800ad7e:	88bb      	ldrh	r3, [r7, #4]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d3eb      	bcc.n	800ad5c <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b085      	sub	sp, #20
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	4603      	mov	r3, r0
 800ad9a:	6039      	str	r1, [r7, #0]
 800ad9c:	80fb      	strh	r3, [r7, #6]


	int16_t    value = 0x00;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	81fb      	strh	r3, [r7, #14]


	if (*pbuffer >= 0x80)
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	b25b      	sxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	da0e      	bge.n	800adca <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800adac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800adb0:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0)
 800adb2:	e00a      	b.n	800adca <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800adb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800adb8:	021b      	lsls	r3, r3, #8
 800adba:	b21a      	sxth	r2, r3
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	1c59      	adds	r1, r3, #1
 800adc0:	6039      	str	r1, [r7, #0]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	b21b      	sxth	r3, r3
 800adc6:	4313      	orrs	r3, r2
 800adc8:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0)
 800adca:	88fb      	ldrh	r3, [r7, #6]
 800adcc:	1e5a      	subs	r2, r3, #1
 800adce:	80fa      	strh	r2, [r7, #6]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1ef      	bne.n	800adb4 <VL53L1_i2c_decode_int16_t+0x22>

	return value;
 800add4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b087      	sub	sp, #28
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	460b      	mov	r3, r1
 800adee:	607a      	str	r2, [r7, #4]
 800adf0:	817b      	strh	r3, [r7, #10]


	uint16_t   i    = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	82fb      	strh	r3, [r7, #22]
	uint32_t   VL53L1_p_002 = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	613b      	str	r3, [r7, #16]

	VL53L1_p_002 =  ip_value;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count; i++) {
 800adfe:	2300      	movs	r3, #0
 800ae00:	82fb      	strh	r3, [r7, #22]
 800ae02:	e00e      	b.n	800ae22 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(VL53L1_p_002 & 0x00FF);
 800ae04:	897a      	ldrh	r2, [r7, #10]
 800ae06:	8afb      	ldrh	r3, [r7, #22]
 800ae08:	1ad3      	subs	r3, r2, r3
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	4413      	add	r3, r2
 800ae10:	693a      	ldr	r2, [r7, #16]
 800ae12:	b2d2      	uxtb	r2, r2
 800ae14:	701a      	strb	r2, [r3, #0]
		VL53L1_p_002 = VL53L1_p_002 >> 8;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	0a1b      	lsrs	r3, r3, #8
 800ae1a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count; i++) {
 800ae1c:	8afb      	ldrh	r3, [r7, #22]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	82fb      	strh	r3, [r7, #22]
 800ae22:	8afa      	ldrh	r2, [r7, #22]
 800ae24:	897b      	ldrh	r3, [r7, #10]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d3ec      	bcc.n	800ae04 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800ae2a:	bf00      	nop
 800ae2c:	bf00      	nop
 800ae2e:	371c      	adds	r7, #28
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	6039      	str	r1, [r7, #0]
 800ae42:	80fb      	strh	r3, [r7, #6]


	uint32_t   value = 0x00;
 800ae44:	2300      	movs	r3, #0
 800ae46:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800ae48:	e007      	b.n	800ae5a <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	021a      	lsls	r2, r3, #8
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	1c59      	adds	r1, r3, #1
 800ae52:	6039      	str	r1, [r7, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800ae5a:	88fb      	ldrh	r3, [r7, #6]
 800ae5c:	1e5a      	subs	r2, r3, #1
 800ae5e:	80fa      	strh	r2, [r7, #6]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d1f2      	bne.n	800ae4a <VL53L1_i2c_decode_uint32_t+0x12>

	return value;
 800ae64:	68fb      	ldr	r3, [r7, #12]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b085      	sub	sp, #20
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	4603      	mov	r3, r0
 800ae7a:	6039      	str	r1, [r7, #0]
 800ae7c:	80fb      	strh	r3, [r7, #6]


	int32_t    value = 0x00;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]


	if (*pbuffer >= 0x80)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	b25b      	sxtb	r3, r3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	da0b      	bge.n	800aea4 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800ae8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae90:	60fb      	str	r3, [r7, #12]

	while (count-- > 0)
 800ae92:	e007      	b.n	800aea4 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	021a      	lsls	r2, r3, #8
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	1c59      	adds	r1, r3, #1
 800ae9c:	6039      	str	r1, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]
	while (count-- > 0)
 800aea4:	88fb      	ldrh	r3, [r7, #6]
 800aea6:	1e5a      	subs	r2, r3, #1
 800aea8:	80fa      	strh	r2, [r7, #6]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1f2      	bne.n	800ae94 <VL53L1_i2c_decode_int32_t+0x22>

	return value;
 800aeae:	68fb      	ldr	r3, [r7, #12]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <VL53L1_start_test>:


VL53L1_Error VL53L1_start_test(
	VL53L1_DEV    Dev,
	uint8_t       test_mode__ctrl)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b084      	sub	sp, #16
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800aec8:	2300      	movs	r3, #0
 800aeca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) {
 800aecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d107      	bne.n	800aee4 <VL53L1_start_test+0x28>
		status = VL53L1_WrByte(
 800aed4:	78fb      	ldrb	r3, [r7, #3]
 800aed6:	461a      	mov	r2, r3
 800aed8:	2127      	movs	r1, #39	; 0x27
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f009 f9ce 	bl	801427c <VL53L1_WrByte>
 800aee0:	4603      	mov	r3, r0
 800aee2:	73fb      	strb	r3, [r7, #15]
					test_mode__ctrl);
	}

	LOG_FUNCTION_END(status);

	return status;
 800aee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <VL53L1_set_firmware_enable_register>:


VL53L1_Error VL53L1_set_firmware_enable_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b084      	sub	sp, #16
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	460b      	mov	r3, r1
 800aefa:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800aefc:	2300      	movs	r3, #0
 800aefe:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	3318      	adds	r3, #24
 800af04:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.firmware__enable = value;
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	78fa      	ldrb	r2, [r7, #3]
 800af0a:	f883 23a6 	strb.w	r2, [r3, #934]	; 0x3a6

	status = VL53L1_WrByte(
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	f893 33a6 	ldrb.w	r3, [r3, #934]	; 0x3a6
 800af14:	461a      	mov	r2, r3
 800af16:	2185      	movs	r1, #133	; 0x85
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f009 f9af 	bl	801427c <VL53L1_WrByte>
 800af1e:	4603      	mov	r3, r0
 800af20:	73fb      	strb	r3, [r7, #15]
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				pdev->sys_ctrl.firmware__enable);

	return status;
 800af22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af26:	4618      	mov	r0, r3
 800af28:	3710      	adds	r7, #16
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}

0800af2e <VL53L1_enable_firmware>:

VL53L1_Error VL53L1_enable_firmware(
	VL53L1_DEV    Dev)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b084      	sub	sp, #16
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800af36:	2300      	movs	r3, #0
 800af38:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x01);
 800af3a:	2101      	movs	r1, #1
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff ffd7 	bl	800aef0 <VL53L1_set_firmware_enable_register>
 800af42:	4603      	mov	r3, r0
 800af44:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800af46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <VL53L1_disable_firmware>:


VL53L1_Error VL53L1_disable_firmware(
	VL53L1_DEV    Dev)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b084      	sub	sp, #16
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800af5a:	2300      	movs	r3, #0
 800af5c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_firmware_enable_register(Dev, 0x00);
 800af5e:	2100      	movs	r1, #0
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7ff ffc5 	bl	800aef0 <VL53L1_set_firmware_enable_register>
 800af66:	4603      	mov	r3, r0
 800af68:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800af6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	460b      	mov	r3, r1
 800af80:	70fb      	strb	r3, [r7, #3]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800af82:	2300      	movs	r3, #0
 800af84:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	3318      	adds	r3, #24
 800af8a:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	78fa      	ldrb	r2, [r7, #3]
 800af90:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

	status = VL53L1_WrByte(
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800af9a:	461a      	mov	r2, r3
 800af9c:	2183      	movs	r1, #131	; 0x83
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f009 f96c 	bl	801427c <VL53L1_WrByte>
 800afa4:	4603      	mov	r3, r0
 800afa6:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800afa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800afc0:	2101      	movs	r1, #1
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f7ff ffd7 	bl	800af76 <VL53L1_set_powerforce_register>
 800afc8:	4603      	mov	r3, r0
 800afca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800afcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <VL53L1_disable_powerforce>:


VL53L1_Error VL53L1_disable_powerforce(
	VL53L1_DEV    Dev)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800afe0:	2300      	movs	r3, #0
 800afe2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x00);
 800afe4:	2100      	movs	r1, #0
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7ff ffc5 	bl	800af76 <VL53L1_set_powerforce_register>
 800afec:	4603      	mov	r3, r0
 800afee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800aff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <VL53L1_clear_interrupt>:


VL53L1_Error VL53L1_clear_interrupt(
	VL53L1_DEV    Dev)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800b004:	2300      	movs	r3, #0
 800b006:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	3318      	adds	r3, #24
 800b00c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->sys_ctrl.system__interrupt_clear = VL53L1_CLEAR_RANGE_INT;
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 23a7 	strb.w	r2, [r3, #935]	; 0x3a7

	status = VL53L1_WrByte(
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f893 33a7 	ldrb.w	r3, [r3, #935]	; 0x3a7
 800b01c:	461a      	mov	r2, r3
 800b01e:	2186      	movs	r1, #134	; 0x86
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f009 f92b 	bl	801427c <VL53L1_WrByte>
 800b026:	4603      	mov	r3, r0
 800b028:	73fb      	strb	r3, [r7, #15]
				VL53L1_SYSTEM__INTERRUPT_CLEAR,
				pdev->sys_ctrl.system__interrupt_clear);

	LOG_FUNCTION_END(status);

	return status;
 800b02a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <VL53L1_calc_macro_period_us>:


uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   VL53L1_p_009)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b086      	sub	sp, #24
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	4603      	mov	r3, r0
 800b03e:	460a      	mov	r2, r1
 800b040:	80fb      	strh	r3, [r7, #6]
 800b042:	4613      	mov	r3, r2
 800b044:	717b      	strb	r3, [r7, #5]


	uint32_t  pll_period_us        = 0;
 800b046:	2300      	movs	r3, #0
 800b048:	617b      	str	r3, [r7, #20]
	uint8_t   VL53L1_p_031   = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800b052:	88fb      	ldrh	r3, [r7, #6]
 800b054:	4618      	mov	r0, r3
 800b056:	f002 ffeb 	bl	800e030 <VL53L1_calc_pll_period_us>
 800b05a:	6178      	str	r0, [r7, #20]



	VL53L1_p_031 = VL53L1_decode_vcsel_period(VL53L1_p_009);
 800b05c:	797b      	ldrb	r3, [r7, #5]
 800b05e:	4618      	mov	r0, r3
 800b060:	f003 fbd6 	bl	800e810 <VL53L1_decode_vcsel_period>
 800b064:	4603      	mov	r3, r0
 800b066:	74fb      	strb	r3, [r7, #19]



	macro_period_us =
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	4613      	mov	r3, r2
 800b06c:	00db      	lsls	r3, r3, #3
 800b06e:	4413      	add	r3, r2
 800b070:	021b      	lsls	r3, r3, #8
 800b072:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	099b      	lsrs	r3, r3, #6
 800b078:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)VL53L1_p_031;
 800b07a:	7cfa      	ldrb	r2, [r7, #19]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	fb02 f303 	mul.w	r3, r2, r3
 800b082:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	099b      	lsrs	r3, r3, #6
 800b088:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return macro_period_us;
 800b08a:	68fb      	ldr	r3, [r7, #12]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3718      	adds	r7, #24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800b094:	b480      	push	{r7}
 800b096:	b089      	sub	sp, #36	; 0x24
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	4608      	mov	r0, r1
 800b09e:	4611      	mov	r1, r2
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	817b      	strh	r3, [r7, #10]
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	813b      	strh	r3, [r7, #8]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	71fb      	strb	r3, [r7, #7]


	int32_t    range_ignore_thresh_int  = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");



	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	011b      	lsls	r3, r3, #4
 800b0c6:	4a23      	ldr	r2, [pc, #140]	; (800b154 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b0c8:	fb82 1203 	smull	r1, r2, r2, r3
 800b0cc:	1192      	asrs	r2, r2, #6
 800b0ce:	17db      	asrs	r3, r3, #31
 800b0d0:	1ad3      	subs	r3, r2, r3
 800b0d2:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0)
 800b0d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	da03      	bge.n	800b0e4 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800b0dc:	897b      	ldrh	r3, [r7, #10]
 800b0de:	425b      	negs	r3, r3
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	83bb      	strh	r3, [r7, #28]

	if (y_gradient < 0)
 800b0e4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	da03      	bge.n	800b0f4 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800b0ec:	893b      	ldrh	r3, [r7, #8]
 800b0ee:	425b      	negs	r3, r3
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	837b      	strh	r3, [r7, #26]





	range_ignore_thresh_int = (8 * x_gradient_int * 4) +
 800b0f4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800b0f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	015b      	lsls	r3, r3, #5
 800b100:	617b      	str	r3, [r7, #20]
			(8 * y_gradient_int * 4);



	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	4a13      	ldr	r2, [pc, #76]	; (800b154 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800b106:	fb82 1203 	smull	r1, r2, r2, r3
 800b10a:	1192      	asrs	r2, r2, #6
 800b10c:	17db      	asrs	r3, r3, #31
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	4413      	add	r3, r2
 800b118:	617b      	str	r3, [r7, #20]



	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800b11a:	79fa      	ldrb	r2, [r7, #7]
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	fb02 f303 	mul.w	r3, r2, r3
 800b122:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	3310      	adds	r3, #16
 800b128:	2b00      	cmp	r3, #0
 800b12a:	da00      	bge.n	800b12e <VL53L1_calc_range_ignore_threshold+0x9a>
 800b12c:	331f      	adds	r3, #31
 800b12e:	115b      	asrs	r3, r3, #5
 800b130:	617b      	str	r3, [r7, #20]



	if (range_ignore_thresh_int > 0xFFFF)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b138:	db03      	blt.n	800b142 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800b13a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b13e:	83fb      	strh	r3, [r7, #30]
 800b140:	e001      	b.n	800b146 <VL53L1_calc_range_ignore_threshold+0xb2>
	else
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	83fb      	strh	r3, [r7, #30]



	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800b146:	8bfb      	ldrh	r3, [r7, #30]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3724      	adds	r7, #36	; 0x24
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	10624dd3 	.word	0x10624dd3

0800b158 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b162:	2300      	movs	r3, #0
 800b164:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (macro_period_us == 0)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d102      	bne.n	800b172 <VL53L1_calc_timeout_mclks+0x1a>
		timeout_mclks = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	e008      	b.n	800b184 <VL53L1_calc_timeout_mclks+0x2c>
	else
		timeout_mclks =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	031a      	lsls	r2, r3, #12
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	085b      	lsrs	r3, r3, #1
 800b17a:	441a      	add	r2, r3
		timeout_mclks =
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b182:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800b184:	68fb      	ldr	r3, [r7, #12]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	6039      	str	r1, [r7, #0]


	uint32_t timeout_mclks   = 0;
 800b19c:	2300      	movs	r3, #0
 800b19e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800b1a4:	6839      	ldr	r1, [r7, #0]
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7ff ffd6 	bl	800b158 <VL53L1_calc_timeout_mclks>
 800b1ac:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f000 f887 	bl	800b2c2 <VL53L1_encode_timeout>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	817b      	strh	r3, [r7, #10]



	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800b1b8:	897b      	ldrh	r3, [r7, #10]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800b1c2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b1c6:	b087      	sub	sp, #28
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]


	uint32_t timeout_us     = 0;
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800b1d2:	f04f 0000 	mov.w	r0, #0
 800b1d6:	f04f 0100 	mov.w	r1, #0
 800b1da:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800b1de:	6879      	ldr	r1, [r7, #4]
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	4688      	mov	r8, r1
 800b1e4:	4681      	mov	r9, r0
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	fb04 f009 	mul.w	r0, r4, r9
 800b1f2:	fb08 f105 	mul.w	r1, r8, r5
 800b1f6:	4401      	add	r1, r0
 800b1f8:	fba8 2304 	umull	r2, r3, r8, r4
 800b1fc:	4419      	add	r1, r3
 800b1fe:	460b      	mov	r3, r1
 800b200:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800b204:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800b208:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b20c:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800b210:	f143 0b00 	adc.w	fp, r3, #0
 800b214:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800b218:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b21c:	f04f 0200 	mov.w	r2, #0
 800b220:	f04f 0300 	mov.w	r3, #0
 800b224:	0b02      	lsrs	r2, r0, #12
 800b226:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800b22a:	0b0b      	lsrs	r3, r1, #12
 800b22c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	617b      	str	r3, [r7, #20]



	LOG_FUNCTION_END(0);

	return timeout_us;
 800b234:	697b      	ldr	r3, [r7, #20]
}
 800b236:	4618      	mov	r0, r3
 800b238:	371c      	adds	r7, #28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b240:	4770      	bx	lr
	...

0800b244 <VL53L1_calc_crosstalk_plane_offset_with_margin>:

uint32_t VL53L1_calc_crosstalk_plane_offset_with_margin(
		uint32_t     plane_offset_kcps,
		int16_t      margin_offset_kcps)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	460b      	mov	r3, r1
 800b24e:	807b      	strh	r3, [r7, #2]
	uint32_t plane_offset_with_margin = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	60bb      	str	r3, [r7, #8]
	int32_t  plane_offset_kcps_temp   = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	plane_offset_kcps_temp =
		(int32_t)plane_offset_kcps +
		(int32_t)margin_offset_kcps;
 800b258:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
		(int32_t)plane_offset_kcps +
 800b25c:	687b      	ldr	r3, [r7, #4]
	plane_offset_kcps_temp =
 800b25e:	4413      	add	r3, r2
 800b260:	60fb      	str	r3, [r7, #12]

	if (plane_offset_kcps_temp < 0)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	da02      	bge.n	800b26e <VL53L1_calc_crosstalk_plane_offset_with_margin+0x2a>
		plane_offset_kcps_temp = 0;
 800b268:	2300      	movs	r3, #0
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	e005      	b.n	800b27a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
	else
		if (plane_offset_kcps_temp > 0x3FFFF)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b274:	db01      	blt.n	800b27a <VL53L1_calc_crosstalk_plane_offset_with_margin+0x36>
			plane_offset_kcps_temp = 0x3FFFF;
 800b276:	4b05      	ldr	r3, [pc, #20]	; (800b28c <VL53L1_calc_crosstalk_plane_offset_with_margin+0x48>)
 800b278:	60fb      	str	r3, [r7, #12]

	plane_offset_with_margin = (uint32_t) plane_offset_kcps_temp;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return plane_offset_with_margin;
 800b27e:	68bb      	ldr	r3, [r7, #8]

}
 800b280:	4618      	mov	r0, r3
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	0003ffff 	.word	0x0003ffff

0800b290 <VL53L1_calc_decoded_timeout_us>:

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	6039      	str	r1, [r7, #0]
 800b29a:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_mclks  = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800b2a4:	88fb      	ldrh	r3, [r7, #6]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 f837 	bl	800b31a <VL53L1_decode_timeout>
 800b2ac:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f7ff ff86 	bl	800b1c2 <VL53L1_calc_timeout_us>
 800b2b6:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800b2c2:	b480      	push	{r7}
 800b2c4:	b087      	sub	sp, #28
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]


	uint16_t encoded_timeout = 0;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d017      	beq.n	800b30c <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b2e2:	e005      	b.n	800b2f0 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	085b      	lsrs	r3, r3, #1
 800b2e8:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b2ea:	89fb      	ldrh	r3, [r7, #14]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1f4      	bne.n	800b2e4 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b2fa:	89fb      	ldrh	r3, [r7, #14]
 800b2fc:	021b      	lsls	r3, r3, #8
 800b2fe:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	b29b      	uxth	r3, r3
 800b304:	b2db      	uxtb	r3, r3
 800b306:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b308:	4413      	add	r3, r2
 800b30a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b30c:	8afb      	ldrh	r3, [r7, #22]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	371c      	adds	r7, #28
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b085      	sub	sp, #20
 800b31e:	af00      	add	r7, sp, #0
 800b320:	4603      	mov	r3, r0
 800b322:	80fb      	strh	r3, [r7, #6]


	uint32_t timeout_macro_clks = 0;
 800b324:	2300      	movs	r3, #0
 800b326:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b328:	88fb      	ldrh	r3, [r7, #6]
 800b32a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b32c:	88fa      	ldrh	r2, [r7, #6]
 800b32e:	0a12      	lsrs	r2, r2, #8
 800b330:	b292      	uxth	r2, r2
 800b332:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b334:	3301      	adds	r3, #1
 800b336:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b338:	68fb      	ldr	r3, [r7, #12]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b088      	sub	sp, #32
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	60f8      	str	r0, [r7, #12]
 800b34e:	60b9      	str	r1, [r7, #8]
 800b350:	607a      	str	r2, [r7, #4]
 800b352:	807b      	strh	r3, [r7, #2]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b354:	2300      	movs	r3, #0
 800b356:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800b358:	2300      	movs	r3, #0
 800b35a:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800b35c:	2300      	movs	r3, #0
 800b35e:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800b364:	887b      	ldrh	r3, [r7, #2]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d102      	bne.n	800b370 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b36a:	23f1      	movs	r3, #241	; 0xf1
 800b36c:	77fb      	strb	r3, [r7, #31]
 800b36e:	e05d      	b.n	800b42c <VL53L1_calc_timeout_register_values+0xe6>
	} else {

		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b372:	799a      	ldrb	r2, [r3, #6]
 800b374:	887b      	ldrh	r3, [r7, #2]
 800b376:	4611      	mov	r1, r2
 800b378:	4618      	mov	r0, r3
 800b37a:	f7ff fe5c 	bl	800b036 <VL53L1_calc_macro_period_us>
 800b37e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);


		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800b380:	6979      	ldr	r1, [r7, #20]
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f7ff fee8 	bl	800b158 <VL53L1_calc_timeout_mclks>
 800b388:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);


		if (timeout_mclks > 0xFF)
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	2bff      	cmp	r3, #255	; 0xff
 800b38e:	d901      	bls.n	800b394 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800b390:	23ff      	movs	r3, #255	; 0xff
 800b392:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	71da      	strb	r2, [r3, #7]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b39c:	6979      	ldr	r1, [r7, #20]
 800b39e:	68b8      	ldr	r0, [r7, #8]
 800b3a0:	f7ff fef7 	bl	800b192 <VL53L1_calc_encoded_timeout>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b3a8:	8a7b      	ldrh	r3, [r7, #18]
 800b3aa:	0a1b      	lsrs	r3, r3, #8
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b3b4:	8a7b      	ldrh	r3, [r7, #18]
 800b3b6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800b3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3ba:	705a      	strb	r2, [r3, #1]


		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800b3bc:	6979      	ldr	r1, [r7, #20]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7ff fee7 	bl	800b192 <VL53L1_calc_encoded_timeout>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b3c8:	8a7b      	ldrh	r3, [r7, #18]
 800b3ca:	0a1b      	lsrs	r3, r3, #8
 800b3cc:	b29b      	uxth	r3, r3
 800b3ce:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800b3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b3d4:	8a7b      	ldrh	r3, [r7, #18]
 800b3d6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	715a      	strb	r2, [r3, #5]


		macro_period_us =
				VL53L1_calc_macro_period_us(
 800b3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3de:	7a5a      	ldrb	r2, [r3, #9]
 800b3e0:	887b      	ldrh	r3, [r7, #2]
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7ff fe26 	bl	800b036 <VL53L1_calc_macro_period_us>
 800b3ea:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);


		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800b3ec:	6979      	ldr	r1, [r7, #20]
 800b3ee:	68b8      	ldr	r0, [r7, #8]
 800b3f0:	f7ff fecf 	bl	800b192 <VL53L1_calc_encoded_timeout>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b3f8:	8a7b      	ldrh	r3, [r7, #18]
 800b3fa:	0a1b      	lsrs	r3, r3, #8
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800b400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b402:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b404:	8a7b      	ldrh	r3, [r7, #18]
 800b406:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800b408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40a:	70da      	strb	r2, [r3, #3]


		timeout_encoded = VL53L1_calc_encoded_timeout(
 800b40c:	6979      	ldr	r1, [r7, #20]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7ff febf 	bl	800b192 <VL53L1_calc_encoded_timeout>
 800b414:	4603      	mov	r3, r0
 800b416:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800b418:	8a7b      	ldrh	r3, [r7, #18]
 800b41a:	0a1b      	lsrs	r3, r3, #8
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800b420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b422:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800b424:	8a7b      	ldrh	r3, [r7, #18]
 800b426:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800b428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42a:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800b42c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800b430:	4618      	mov	r0, r3
 800b432:	3720      	adds	r7, #32
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <VL53L1_hist_copy_and_scale_ambient_info>:


VL53L1_Error  VL53L1_hist_copy_and_scale_ambient_info(
	VL53L1_zone_hist_info_t       *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 800b438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b43c:	b09e      	sub	sp, #120	; 0x78
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6578      	str	r0, [r7, #84]	; 0x54
 800b442:	6539      	str	r1, [r7, #80]	; 0x50


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b444:	2300      	movs	r3, #0
 800b446:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	int64_t  evts              = 0;
 800b44a:	f04f 0200 	mov.w	r2, #0
 800b44e:	f04f 0300 	mov.w	r3, #0
 800b452:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	int64_t  tmpi              = 0;
 800b456:	f04f 0200 	mov.w	r2, #0
 800b45a:	f04f 0300 	mov.w	r3, #0
 800b45e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t  tmpo              = 0;
 800b462:	f04f 0200 	mov.w	r2, #0
 800b466:	f04f 0300 	mov.w	r3, #0
 800b46a:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	LOG_FUNCTION_START("");


	if (pidata->result__dss_actual_effective_spads == 0) {
 800b46e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b470:	885b      	ldrh	r3, [r3, #2]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d103      	bne.n	800b47e <VL53L1_hist_copy_and_scale_ambient_info+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800b476:	23f1      	movs	r3, #241	; 0xf1
 800b478:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b47c:	e0d6      	b.n	800b62c <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
	} else {
		if (pidata->number_of_ambient_bins >  0 &&
 800b47e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b480:	785b      	ldrb	r3, [r3, #1]
 800b482:	2b00      	cmp	r3, #0
 800b484:	f000 80d2 	beq.w	800b62c <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>
			podata->number_of_ambient_bins == 0) {
 800b488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b48a:	7adb      	ldrb	r3, [r3, #11]
		if (pidata->number_of_ambient_bins >  0 &&
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f040 80cd 	bne.w	800b62c <VL53L1_hist_copy_and_scale_ambient_info+0x1f4>



			tmpo    = 1 + (int64_t)podata->total_periods_elapsed;
 800b492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b498:	2200      	movs	r2, #0
 800b49a:	643b      	str	r3, [r7, #64]	; 0x40
 800b49c:	647a      	str	r2, [r7, #68]	; 0x44
 800b49e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	623b      	str	r3, [r7, #32]
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	f143 0300 	adc.w	r3, r3, #0
 800b4ae:	627b      	str	r3, [r7, #36]	; 0x24
 800b4b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b4b4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			tmpo   *=
			(int64_t)podata->result__dss_actual_effective_spads;
 800b4b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4ba:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b4c4:	64fa      	str	r2, [r7, #76]	; 0x4c
			tmpo   *=
 800b4c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b4c8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	fb02 f203 	mul.w	r2, r2, r3
 800b4d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4d4:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 800b4d8:	fb01 f303 	mul.w	r3, r1, r3
 800b4dc:	441a      	add	r2, r3
 800b4de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b4e2:	fba3 4501 	umull	r4, r5, r3, r1
 800b4e6:	1953      	adds	r3, r2, r5
 800b4e8:	461d      	mov	r5, r3
 800b4ea:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
 800b4ee:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58

			tmpi    = 1 + (int64_t)pidata->total_periods_elapsed;
 800b4f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b4fc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b500:	460b      	mov	r3, r1
 800b502:	3301      	adds	r3, #1
 800b504:	61bb      	str	r3, [r7, #24]
 800b506:	4613      	mov	r3, r2
 800b508:	f143 0300 	adc.w	r3, r3, #0
 800b50c:	61fb      	str	r3, [r7, #28]
 800b50e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b512:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			tmpi   *=
			(int64_t)pidata->result__dss_actual_effective_spads;
 800b516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b518:	885b      	ldrh	r3, [r3, #2]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	2200      	movs	r2, #0
 800b51e:	633b      	str	r3, [r7, #48]	; 0x30
 800b520:	637a      	str	r2, [r7, #52]	; 0x34
			tmpi   *=
 800b522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b524:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b528:	4622      	mov	r2, r4
 800b52a:	fb02 f203 	mul.w	r2, r2, r3
 800b52e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b530:	4629      	mov	r1, r5
 800b532:	fb01 f303 	mul.w	r3, r1, r3
 800b536:	441a      	add	r2, r3
 800b538:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b53a:	4621      	mov	r1, r4
 800b53c:	fba3 ab01 	umull	sl, fp, r3, r1
 800b540:	eb02 030b 	add.w	r3, r2, fp
 800b544:	469b      	mov	fp, r3
 800b546:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 800b54a:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

			evts  = tmpo *
				(int64_t)pidata->ambient_events_sum;
 800b54e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	17da      	asrs	r2, r3, #31
 800b554:	62bb      	str	r3, [r7, #40]	; 0x28
 800b556:	62fa      	str	r2, [r7, #44]	; 0x2c
			evts  = tmpo *
 800b558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b55a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800b55e:	4622      	mov	r2, r4
 800b560:	fb02 f203 	mul.w	r2, r2, r3
 800b564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b566:	4629      	mov	r1, r5
 800b568:	fb01 f303 	mul.w	r3, r1, r3
 800b56c:	4413      	add	r3, r2
 800b56e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b570:	4621      	mov	r1, r4
 800b572:	fba2 8901 	umull	r8, r9, r2, r1
 800b576:	444b      	add	r3, r9
 800b578:	4699      	mov	r9, r3
 800b57a:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
 800b57e:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
			evts += (tmpi/2);
 800b582:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b586:	0fd9      	lsrs	r1, r3, #31
 800b588:	2000      	movs	r0, #0
 800b58a:	6139      	str	r1, [r7, #16]
 800b58c:	6178      	str	r0, [r7, #20]
 800b58e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b592:	4621      	mov	r1, r4
 800b594:	1889      	adds	r1, r1, r2
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	4629      	mov	r1, r5
 800b59a:	eb43 0101 	adc.w	r1, r3, r1
 800b59e:	60f9      	str	r1, [r7, #12]
 800b5a0:	f04f 0200 	mov.w	r2, #0
 800b5a4:	f04f 0300 	mov.w	r3, #0
 800b5a8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	084a      	lsrs	r2, r1, #1
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	104b      	asrs	r3, r1, #1
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	4619      	mov	r1, r3
 800b5be:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b5c2:	1814      	adds	r4, r2, r0
 800b5c4:	603c      	str	r4, [r7, #0]
 800b5c6:	414b      	adcs	r3, r1
 800b5c8:	607b      	str	r3, [r7, #4]
 800b5ca:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b5ce:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68


			if (tmpi != 0)
 800b5d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	d009      	beq.n	800b5ee <VL53L1_hist_copy_and_scale_ambient_info+0x1b6>
				evts = do_division_s(evts, tmpi);
 800b5da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b5de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b5e2:	f7f4 fe1d 	bl	8000220 <__aeabi_ldivmod>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

			podata->ambient_events_sum = (int32_t)evts;
 800b5ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0



			podata->VL53L1_p_004 =
					podata->ambient_events_sum;
 800b5f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
			podata->VL53L1_p_004 =
 800b5fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 +=
 800b602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b604:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pidata->number_of_ambient_bins / 2);
 800b608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b60a:	7852      	ldrb	r2, [r2, #1]
 800b60c:	0852      	lsrs	r2, r2, #1
 800b60e:	b2d2      	uxtb	r2, r2
			podata->VL53L1_p_004 +=
 800b610:	441a      	add	r2, r3
 800b612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b614:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			podata->VL53L1_p_004 /=
 800b618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b61a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				(int32_t)pidata->number_of_ambient_bins;
 800b61e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b620:	7852      	ldrb	r2, [r2, #1]
			podata->VL53L1_p_004 /=
 800b622:	fb93 f2f2 	sdiv	r2, r3, r2
 800b626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b628:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		}
	}

	LOG_FUNCTION_END(0);

	return status;
 800b62c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800b630:	4618      	mov	r0, r3
 800b632:	3778      	adds	r7, #120	; 0x78
 800b634:	46bd      	mov	sp, r7
 800b636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b63a <VL53L1_hist_get_bin_sequence_config>:


void  VL53L1_hist_get_bin_sequence_config(
	VL53L1_DEV                     Dev,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800b63a:	b480      	push	{r7}
 800b63c:	b087      	sub	sp, #28
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
 800b642:	6039      	str	r1, [r7, #0]


	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	3318      	adds	r3, #24
 800b648:	613b      	str	r3, [r7, #16]

	int32_t amb_thresh_low   = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	60fb      	str	r3, [r7, #12]
	int32_t amb_thresh_high  = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	60bb      	str	r3, [r7, #8]

	uint8_t i = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	amb_thresh_low  = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_low;
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	f8b3 333e 	ldrh.w	r3, [r3, #830]	; 0x33e
	amb_thresh_low  = 1024 *
 800b65c:	029b      	lsls	r3, r3, #10
 800b65e:	60fb      	str	r3, [r7, #12]
	amb_thresh_high = 1024 *
		(int32_t)pdev->hist_cfg.histogram_config__amb_thresh_high;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	f8b3 3340 	ldrh.w	r3, [r3, #832]	; 0x340
	amb_thresh_high = 1024 *
 800b666:	029b      	lsls	r3, r3, #10
 800b668:	60bb      	str	r3, [r7, #8]



	if ((pdev->ll_state.rd_stream_count & 0x01) == 0) {
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b670:	f003 0301 	and.w	r3, r3, #1
 800b674:	2b00      	cmp	r3, #0
 800b676:	f040 8095 	bne.w	800b7a4 <VL53L1_hist_get_bin_sequence_config+0x16a>

		pdata->bin_seq[5] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 >> 4;
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
		pdata->bin_seq[5] =
 800b680:	091b      	lsrs	r3, r3, #4
 800b682:	b2da      	uxtb	r2, r3
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_4_5 & 0x0F;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800b68e:	f003 030f 	and.w	r3, r3, #15
 800b692:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 >> 4;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
		pdata->bin_seq[3] =
 800b69e:	091b      	lsrs	r3, r3, #4
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	73da      	strb	r2, [r3, #15]
		pdata->bin_seq[2] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_2_3 & 0x0F;
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800b6ac:	f003 030f 	and.w	r3, r3, #15
 800b6b0:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	739a      	strb	r2, [r3, #14]
		pdata->bin_seq[1] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 >> 4;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
		pdata->bin_seq[1] =
 800b6bc:	091b      	lsrs	r3, r3, #4
 800b6be:	b2da      	uxtb	r2, r3
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	735a      	strb	r2, [r3, #13]
		pdata->bin_seq[0] =
		pdev->hist_cfg.histogram_config__mid_amb_even_bin_0_1 & 0x0F;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 800b6ca:	f003 030f 	and.w	r3, r3, #15
 800b6ce:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6da:	68ba      	ldr	r2, [r7, #8]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	da2c      	bge.n	800b73a <VL53L1_hist_get_bin_sequence_config+0x100>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			pdata->bin_seq[5] =
 800b6e6:	091b      	lsrs	r3, r3, #4
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_4_5
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
			& 0x0F;
 800b6f4:	f003 030f 	and.w	r3, r3, #15
 800b6f8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			pdata->bin_seq[3] =
 800b704:	091b      	lsrs	r3, r3, #4
 800b706:	b2da      	uxtb	r2, r3
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_2_3
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
			& 0x0F;
 800b712:	f003 030f 	and.w	r3, r3, #15
 800b716:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			pdata->bin_seq[1] =
 800b722:	091b      	lsrs	r3, r3, #4
 800b724:	b2da      	uxtb	r2, r3
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_even_bin_0_1
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
			& 0x0F;
 800b730:	f003 030f 	and.w	r3, r3, #15
 800b734:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	429a      	cmp	r2, r3
 800b744:	f340 80c2 	ble.w	800b8cc <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			pdata->bin_seq[5] =
 800b74e:	091b      	lsrs	r3, r3, #4
 800b750:	b2da      	uxtb	r2, r3
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_4_5
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	f893 332b 	ldrb.w	r3, [r3, #811]	; 0x32b
			& 0x0F;
 800b75c:	f003 030f 	and.w	r3, r3, #15
 800b760:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			pdata->bin_seq[3] =
 800b76c:	091b      	lsrs	r3, r3, #4
 800b76e:	b2da      	uxtb	r2, r3
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_2_3
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	f893 332a 	ldrb.w	r3, [r3, #810]	; 0x32a
			& 0x0F;
 800b77a:	f003 030f 	and.w	r3, r3, #15
 800b77e:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			pdata->bin_seq[1] =
 800b78a:	091b      	lsrs	r3, r3, #4
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_even_bin_0_1
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f893 3329 	ldrb.w	r3, [r3, #809]	; 0x329
			& 0x0F;
 800b798:	f003 030f 	and.w	r3, r3, #15
 800b79c:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	731a      	strb	r2, [r3, #12]
 800b7a2:	e093      	b.n	800b8cc <VL53L1_hist_get_bin_sequence_config+0x292>
		}

	} else {
		pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_5
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
			& 0x0F;
 800b7aa:	f003 030f 	and.w	r3, r3, #15
 800b7ae:	b2da      	uxtb	r2, r3
		pdata->bin_seq[5] =
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	745a      	strb	r2, [r3, #17]
		pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
			& 0x0F;
 800b7ba:	f003 030f 	and.w	r3, r3, #15
 800b7be:	b2da      	uxtb	r2, r3
		pdata->bin_seq[4] =
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	741a      	strb	r2, [r3, #16]
		pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_3_4
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
		pdata->bin_seq[3] =
 800b7ca:	091b      	lsrs	r3, r3, #4
 800b7cc:	b2da      	uxtb	r2, r3
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	73da      	strb	r2, [r3, #15]
			>> 4;
		pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_2 &
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800b7d8:	f003 030f 	and.w	r3, r3, #15
 800b7dc:	b2da      	uxtb	r2, r3
		pdata->bin_seq[2] =
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	739a      	strb	r2, [r3, #14]
			0x0F;
		pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
		pdata->bin_seq[1] =
 800b7e8:	091b      	lsrs	r3, r3, #4
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	735a      	strb	r2, [r3, #13]
			>> 4;
		pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__mid_amb_odd_bin_0_1
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
			& 0x0F;
 800b7f6:	f003 030f 	and.w	r3, r3, #15
 800b7fa:	b2da      	uxtb	r2, r3
		pdata->bin_seq[0] =
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	731a      	strb	r2, [r3, #12]

		if (pdata->ambient_events_sum > amb_thresh_high) {
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	429a      	cmp	r2, r3
 800b80a:	da2c      	bge.n	800b866 <VL53L1_hist_get_bin_sequence_config+0x22c>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			pdata->bin_seq[5] =
 800b812:	091b      	lsrs	r3, r3, #4
 800b814:	b2da      	uxtb	r2, r3
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_4_5
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
			& 0x0F;
 800b820:	f003 030f 	and.w	r3, r3, #15
 800b824:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			pdata->bin_seq[3] =
 800b830:	091b      	lsrs	r3, r3, #4
 800b832:	b2da      	uxtb	r2, r3
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_2_3
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
			& 0x0F;
 800b83e:	f003 030f 	and.w	r3, r3, #15
 800b842:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			pdata->bin_seq[1] =
 800b84e:	091b      	lsrs	r3, r3, #4
 800b850:	b2da      	uxtb	r2, r3
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__high_amb_odd_bin_0_1
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
			& 0x0F;
 800b85c:	f003 030f 	and.w	r3, r3, #15
 800b860:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	731a      	strb	r2, [r3, #12]
		}

		if (pdata->ambient_events_sum < amb_thresh_low) {
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	429a      	cmp	r2, r3
 800b870:	dd2c      	ble.n	800b8cc <VL53L1_hist_get_bin_sequence_config+0x292>
			pdata->bin_seq[5] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			pdata->bin_seq[5] =
 800b878:	091b      	lsrs	r3, r3, #4
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	745a      	strb	r2, [r3, #17]
			>> 4;
			pdata->bin_seq[4] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_4_5
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
			& 0x0F;
 800b886:	f003 030f 	and.w	r3, r3, #15
 800b88a:	b2da      	uxtb	r2, r3
			pdata->bin_seq[4] =
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	741a      	strb	r2, [r3, #16]
			pdata->bin_seq[3] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			pdata->bin_seq[3] =
 800b896:	091b      	lsrs	r3, r3, #4
 800b898:	b2da      	uxtb	r2, r3
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	73da      	strb	r2, [r3, #15]
			>> 4;
			pdata->bin_seq[2] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_2_3
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
			& 0x0F;
 800b8a4:	f003 030f 	and.w	r3, r3, #15
 800b8a8:	b2da      	uxtb	r2, r3
			pdata->bin_seq[2] =
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	739a      	strb	r2, [r3, #14]
			pdata->bin_seq[1] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			pdata->bin_seq[1] =
 800b8b4:	091b      	lsrs	r3, r3, #4
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	735a      	strb	r2, [r3, #13]
			>> 4;
			pdata->bin_seq[0] =
			pdev->hist_cfg.histogram_config__low_amb_odd_bin_0_1
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
			& 0x0F;
 800b8c2:	f003 030f 	and.w	r3, r3, #15
 800b8c6:	b2da      	uxtb	r2, r3
			pdata->bin_seq[0] =
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	731a      	strb	r2, [r3, #12]
		}
	}



	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	75fb      	strb	r3, [r7, #23]
 800b8d0:	e007      	b.n	800b8e2 <VL53L1_hist_get_bin_sequence_config+0x2a8>
		pdata->bin_rep[i] = 1;
 800b8d2:	7dfb      	ldrb	r3, [r7, #23]
 800b8d4:	683a      	ldr	r2, [r7, #0]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	2201      	movs	r2, #1
 800b8da:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800b8dc:	7dfb      	ldrb	r3, [r7, #23]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	75fb      	strb	r3, [r7, #23]
 800b8e2:	7dfb      	ldrb	r3, [r7, #23]
 800b8e4:	2b05      	cmp	r3, #5
 800b8e6:	d9f4      	bls.n	800b8d2 <VL53L1_hist_get_bin_sequence_config+0x298>

	LOG_FUNCTION_END(0);

}
 800b8e8:	bf00      	nop
 800b8ea:	bf00      	nop
 800b8ec:	371c      	adds	r7, #28
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <VL53L1_hist_phase_consistency_check>:
VL53L1_Error  VL53L1_hist_phase_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_results_t      *prange_curr)
{
 800b8f6:	b590      	push	{r4, r7, lr}
 800b8f8:	b093      	sub	sp, #76	; 0x4c
 800b8fa:	af04      	add	r7, sp, #16
 800b8fc:	60f8      	str	r0, [r7, #12]
 800b8fe:	60b9      	str	r1, [r7, #8]
 800b900:	607a      	str	r2, [r7, #4]
 800b902:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b904:	2300      	movs	r3, #0
 800b906:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	3318      	adds	r3, #24
 800b90e:	62fb      	str	r3, [r7, #44]	; 0x2c
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t   lc = 0;
 800b910:	2300      	movs	r3, #0
 800b912:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t   p = 0;
 800b916:	2300      	movs	r3, #0
 800b918:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	uint16_t  phase_delta      = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t  phase_tolerance  = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	857b      	strh	r3, [r7, #42]	; 0x2a

	int32_t   events_delta     = 0;
 800b924:	2300      	movs	r3, #0
 800b926:	61fb      	str	r3, [r7, #28]
	int32_t   events_tolerance = 0;
 800b928:	2300      	movs	r3, #0
 800b92a:	61bb      	str	r3, [r7, #24]
	uint8_t event_sigma;
	uint16_t event_min_spad_count;
	uint16_t min_max_tolerance;
	uint8_t pht;

	VL53L1_DeviceError  range_status = 0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	event_sigma =
 800b930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b932:	f893 327b 	ldrb.w	r3, [r3, #635]	; 0x27b
 800b936:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		pdev->histpostprocess.algo__consistency_check__event_sigma;
	event_min_spad_count =
 800b93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b93c:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800b940:	84fb      	strh	r3, [r7, #38]	; 0x26
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;
	min_max_tolerance =
 800b942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b944:	f8b3 327e 	ldrh.w	r3, [r3, #638]	; 0x27e
 800b948:	84bb      	strh	r3, [r7, #36]	; 0x24
	pdev->histpostprocess.algo__consistency_check__min_max_tolerance;


	pht = pdev->histpostprocess.algo__consistency_check__phase_tolerance;
 800b94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94c:	f893 327a 	ldrb.w	r3, [r3, #634]	; 0x27a
 800b950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	phase_tolerance = (uint16_t)pht;
 800b954:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b958:	857b      	strh	r3, [r7, #42]	; 0x2a
	phase_tolerance = phase_tolerance << 8;
 800b95a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b95c:	021b      	lsls	r3, r3, #8
 800b95e:	857b      	strh	r3, [r7, #42]	; 0x2a



	if (prange_prev->rd_device_state !=
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	785b      	ldrb	r3, [r3, #1]
 800b964:	2b07      	cmp	r3, #7
 800b966:	d006      	beq.n	800b976 <VL53L1_hist_phase_consistency_check+0x80>
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
		prange_prev->rd_device_state !=
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	785b      	ldrb	r3, [r3, #1]
			VL53L1_DEVICESTATE_RANGING_GATHER_DATA &&
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d002      	beq.n	800b976 <VL53L1_hist_phase_consistency_check+0x80>
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA)
		return status;
 800b970:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b974:	e0ec      	b.n	800bb50 <VL53L1_hist_phase_consistency_check+0x25a>



	if (phase_tolerance == 0)
 800b976:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d102      	bne.n	800b982 <VL53L1_hist_phase_consistency_check+0x8c>
		return status;
 800b97c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800b980:	e0e6      	b.n	800bb50 <VL53L1_hist_phase_consistency_check+0x25a>

	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800b982:	2300      	movs	r3, #0
 800b984:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800b988:	e0d9      	b.n	800bb3e <VL53L1_hist_phase_consistency_check+0x248>

		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800b98a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b98e:	683a      	ldr	r2, [r7, #0]
 800b990:	214c      	movs	r1, #76	; 0x4c
 800b992:	fb01 f303 	mul.w	r3, r1, r3
 800b996:	4413      	add	r3, r2
 800b998:	335e      	adds	r3, #94	; 0x5e
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2b09      	cmp	r3, #9
 800b99e:	d00b      	beq.n	800b9b8 <VL53L1_hist_phase_consistency_check+0xc2>
			VL53L1_DEVICEERROR_RANGECOMPLETE) ||
			(prange_curr->VL53L1_p_002[lc].range_status ==
 800b9a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b9a4:	683a      	ldr	r2, [r7, #0]
 800b9a6:	214c      	movs	r1, #76	; 0x4c
 800b9a8:	fb01 f303 	mul.w	r3, r1, r3
 800b9ac:	4413      	add	r3, r2
 800b9ae:	335e      	adds	r3, #94	; 0x5e
 800b9b0:	781b      	ldrb	r3, [r3, #0]
		if (!((prange_curr->VL53L1_p_002[lc].range_status ==
 800b9b2:	2b13      	cmp	r3, #19
 800b9b4:	f040 80bd 	bne.w	800bb32 <VL53L1_hist_phase_consistency_check+0x23c>





		if (prange_prev->active_objects == 0)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	795b      	ldrb	r3, [r3, #5]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <VL53L1_hist_phase_consistency_check+0xe0>
			prange_curr->VL53L1_p_002[lc].range_status =
 800b9c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b9c4:	683a      	ldr	r2, [r7, #0]
 800b9c6:	214c      	movs	r1, #76	; 0x4c
 800b9c8:	fb01 f303 	mul.w	r3, r1, r3
 800b9cc:	4413      	add	r3, r2
 800b9ce:	335e      	adds	r3, #94	; 0x5e
 800b9d0:	2217      	movs	r2, #23
 800b9d2:	701a      	strb	r2, [r3, #0]
 800b9d4:	e009      	b.n	800b9ea <VL53L1_hist_phase_consistency_check+0xf4>
			VL53L1_DEVICEERROR_PREV_RANGE_NO_TARGETS;
		else
			prange_curr->VL53L1_p_002[lc].range_status =
 800b9d6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	214c      	movs	r1, #76	; 0x4c
 800b9de:	fb01 f303 	mul.w	r3, r1, r3
 800b9e2:	4413      	add	r3, r2
 800b9e4:	335e      	adds	r3, #94	; 0x5e
 800b9e6:	2207      	movs	r2, #7
 800b9e8:	701a      	strb	r2, [r3, #0]





		for (p = 0; p < prange_prev->active_objects; p++) {
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800b9f0:	e097      	b.n	800bb22 <VL53L1_hist_phase_consistency_check+0x22c>

			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800b9f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800b9f6:	683a      	ldr	r2, [r7, #0]
 800b9f8:	214c      	movs	r1, #76	; 0x4c
 800b9fa:	fb01 f303 	mul.w	r3, r1, r3
 800b9fe:	4413      	add	r3, r2
 800ba00:	3354      	adds	r3, #84	; 0x54
 800ba02:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014) {
 800ba04:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	005b      	lsls	r3, r3, #1
 800ba0e:	4413      	add	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4403      	add	r3, r0
 800ba14:	3310      	adds	r3, #16
 800ba16:	881b      	ldrh	r3, [r3, #0]
			if (prange_curr->VL53L1_p_002[lc].VL53L1_p_014 >
 800ba18:	4299      	cmp	r1, r3
 800ba1a:	d915      	bls.n	800ba48 <VL53L1_hist_phase_consistency_check+0x152>
				phase_delta =
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014 -
 800ba1c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	214c      	movs	r1, #76	; 0x4c
 800ba24:	fb01 f303 	mul.w	r3, r1, r3
 800ba28:	4413      	add	r3, r2
 800ba2a:	3354      	adds	r3, #84	; 0x54
 800ba2c:	8819      	ldrh	r1, [r3, #0]
				prange_prev->VL53L1_p_002[p].VL53L1_p_014;
 800ba2e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	4613      	mov	r3, r2
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	4413      	add	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4403      	add	r3, r0
 800ba3e:	3310      	adds	r3, #16
 800ba40:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800ba42:	1acb      	subs	r3, r1, r3
 800ba44:	867b      	strh	r3, [r7, #50]	; 0x32
 800ba46:	e014      	b.n	800ba72 <VL53L1_hist_phase_consistency_check+0x17c>
			} else {
				phase_delta =
				prange_prev->VL53L1_p_002[p].VL53L1_p_014 -
 800ba48:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800ba4c:	6879      	ldr	r1, [r7, #4]
 800ba4e:	4613      	mov	r3, r2
 800ba50:	005b      	lsls	r3, r3, #1
 800ba52:	4413      	add	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	440b      	add	r3, r1
 800ba58:	3310      	adds	r3, #16
 800ba5a:	881a      	ldrh	r2, [r3, #0]
				prange_curr->VL53L1_p_002[lc].VL53L1_p_014;
 800ba5c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ba60:	6839      	ldr	r1, [r7, #0]
 800ba62:	204c      	movs	r0, #76	; 0x4c
 800ba64:	fb00 f303 	mul.w	r3, r0, r3
 800ba68:	440b      	add	r3, r1
 800ba6a:	3354      	adds	r3, #84	; 0x54
 800ba6c:	881b      	ldrh	r3, [r3, #0]
				phase_delta =
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	867b      	strh	r3, [r7, #50]	; 0x32
			}

			if (phase_delta < phase_tolerance) {
 800ba72:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ba74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d24e      	bcs.n	800bb18 <VL53L1_hist_phase_consistency_check+0x222>





				if (status == VL53L1_ERROR_NONE)
 800ba7a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d125      	bne.n	800bace <VL53L1_hist_phase_consistency_check+0x1d8>
					status =
					VL53L1_hist_events_consistency_check(
					event_sigma,
					event_min_spad_count,
					phist_prev,
					&(prange_prev->VL53L1_p_002[p]),
 800ba82:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
					VL53L1_hist_events_consistency_check(
 800ba86:	4613      	mov	r3, r2
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	4413      	add	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	3308      	adds	r3, #8
 800ba90:	687a      	ldr	r2, [r7, #4]
 800ba92:	18d4      	adds	r4, r2, r3
					&(prange_curr->VL53L1_p_002[lc]),
 800ba94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_events_consistency_check(
 800ba98:	224c      	movs	r2, #76	; 0x4c
 800ba9a:	fb02 f303 	mul.w	r3, r2, r3
 800ba9e:	3310      	adds	r3, #16
 800baa0:	683a      	ldr	r2, [r7, #0]
 800baa2:	4413      	add	r3, r2
 800baa4:	3304      	adds	r3, #4
 800baa6:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800baa8:	f897 0029 	ldrb.w	r0, [r7, #41]	; 0x29
 800baac:	f107 0217 	add.w	r2, r7, #23
 800bab0:	9203      	str	r2, [sp, #12]
 800bab2:	f107 021c 	add.w	r2, r7, #28
 800bab6:	9202      	str	r2, [sp, #8]
 800bab8:	f107 0218 	add.w	r2, r7, #24
 800babc:	9201      	str	r2, [sp, #4]
 800babe:	9300      	str	r3, [sp, #0]
 800bac0:	4623      	mov	r3, r4
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	f000 f848 	bl	800bb58 <VL53L1_hist_events_consistency_check>
 800bac8:	4603      	mov	r3, r0
 800baca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);




				if (status == VL53L1_ERROR_NONE &&
 800bace:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d115      	bne.n	800bb02 <VL53L1_hist_phase_consistency_check+0x20c>
					range_status ==
 800bad6:	7dfb      	ldrb	r3, [r7, #23]
				if (status == VL53L1_ERROR_NONE &&
 800bad8:	2b09      	cmp	r3, #9
 800bada:	d112      	bne.n	800bb02 <VL53L1_hist_phase_consistency_check+0x20c>
					VL53L1_DEVICEERROR_RANGECOMPLETE)
					status =
					VL53L1_hist_merged_pulse_check(
 800badc:	f9b7 0024 	ldrsh.w	r0, [r7, #36]	; 0x24
					min_max_tolerance,
					&(prange_curr->VL53L1_p_002[lc]),
 800bae0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
					VL53L1_hist_merged_pulse_check(
 800bae4:	224c      	movs	r2, #76	; 0x4c
 800bae6:	fb02 f303 	mul.w	r3, r2, r3
 800baea:	3310      	adds	r3, #16
 800baec:	683a      	ldr	r2, [r7, #0]
 800baee:	4413      	add	r3, r2
 800baf0:	3304      	adds	r3, #4
 800baf2:	f107 0217 	add.w	r2, r7, #23
 800baf6:	4619      	mov	r1, r3
 800baf8:	f000 fb44 	bl	800c184 <VL53L1_hist_merged_pulse_check>
 800bafc:	4603      	mov	r3, r0
 800bafe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					&range_status);

				prange_curr->VL53L1_p_002[lc].range_status =
 800bb02:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bb06:	7df8      	ldrb	r0, [r7, #23]
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	214c      	movs	r1, #76	; 0x4c
 800bb0c:	fb01 f303 	mul.w	r3, r1, r3
 800bb10:	4413      	add	r3, r2
 800bb12:	335e      	adds	r3, #94	; 0x5e
 800bb14:	4602      	mov	r2, r0
 800bb16:	701a      	strb	r2, [r3, #0]
		for (p = 0; p < prange_prev->active_objects; p++) {
 800bb18:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	795b      	ldrb	r3, [r3, #5]
 800bb26:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	f4ff af61 	bcc.w	800b9f2 <VL53L1_hist_phase_consistency_check+0xfc>
 800bb30:	e000      	b.n	800bb34 <VL53L1_hist_phase_consistency_check+0x23e>
			continue;
 800bb32:	bf00      	nop
	for (lc = 0; lc < prange_curr->active_results; lc++) {
 800bb34:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800bb38:	3301      	adds	r3, #1
 800bb3a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	7c9b      	ldrb	r3, [r3, #18]
 800bb42:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800bb46:	429a      	cmp	r2, r3
 800bb48:	f4ff af1f 	bcc.w	800b98a <VL53L1_hist_phase_consistency_check+0x94>

	}

	LOG_FUNCTION_END(status);

	return status;
 800bb4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	373c      	adds	r7, #60	; 0x3c
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd90      	pop	{r4, r7, pc}

0800bb58 <VL53L1_hist_events_consistency_check>:
	VL53L1_object_data_t        *prange_prev,
	VL53L1_range_data_t         *prange_curr,
	int32_t                     *pevents_tolerance,
	int32_t                     *pevents_delta,
	VL53L1_DeviceError          *prange_status)
{
 800bb58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bb5c:	b0d4      	sub	sp, #336	; 0x150
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800bb64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb68:	4603      	mov	r3, r0
 800bb6a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
 800bb6e:	460b      	mov	r3, r1
 800bb70:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bb74:	2300      	movs	r3, #0
 800bb76:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

	int64_t   tmpp                   = 0;
 800bb7a:	f04f 0200 	mov.w	r2, #0
 800bb7e:	f04f 0300 	mov.w	r3, #0
 800bb82:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	int64_t   tmpc                   = 0;
 800bb86:	f04f 0200 	mov.w	r2, #0
 800bb8a:	f04f 0300 	mov.w	r3, #0
 800bb8e:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
	int64_t   events_scaler          = 0;
 800bb92:	f04f 0200 	mov.w	r2, #0
 800bb96:	f04f 0300 	mov.w	r3, #0
 800bb9a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	int64_t   events_scaler_sq       = 0;
 800bb9e:	f04f 0200 	mov.w	r2, #0
 800bba2:	f04f 0300 	mov.w	r3, #0
 800bba6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	int64_t   c_signal_events        = 0;
 800bbaa:	f04f 0200 	mov.w	r2, #0
 800bbae:	f04f 0300 	mov.w	r3, #0
 800bbb2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	int64_t   c_sig_noise_sq         = 0;
 800bbb6:	f04f 0200 	mov.w	r2, #0
 800bbba:	f04f 0300 	mov.w	r3, #0
 800bbbe:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	int64_t   c_amb_noise_sq         = 0;
 800bbc2:	f04f 0200 	mov.w	r2, #0
 800bbc6:	f04f 0300 	mov.w	r3, #0
 800bbca:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int64_t   p_amb_noise_sq         = 0;
 800bbce:	f04f 0200 	mov.w	r2, #0
 800bbd2:	f04f 0300 	mov.w	r3, #0
 800bbd6:	e9c7 2342 	strd	r2, r3, [r7, #264]	; 0x108

	int32_t   p_signal_events        = 0;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	uint32_t  noise_sq_sum           = 0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100



	if (event_sigma == 0) {
 800bbe6:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d106      	bne.n	800bbfc <VL53L1_hist_events_consistency_check+0xa4>
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800bbee:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800bbf2:	2209      	movs	r2, #9
 800bbf4:	701a      	strb	r2, [r3, #0]
		return status;
 800bbf6:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
 800bbfa:	e2bd      	b.n	800c178 <VL53L1_hist_events_consistency_check+0x620>
	}



	tmpp  = 1 + (int64_t)phist_prev->total_periods_elapsed;
 800bbfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bc08:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800bc0c:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bc10:	460b      	mov	r3, r1
 800bc12:	3301      	adds	r3, #1
 800bc14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc18:	4613      	mov	r3, r2
 800bc1a:	f143 0300 	adc.w	r3, r3, #0
 800bc1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc22:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800bc26:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	tmpp *= (int64_t)phist_prev->result__dss_actual_effective_spads;
 800bc2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc2e:	885b      	ldrh	r3, [r3, #2]
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	2200      	movs	r2, #0
 800bc34:	469a      	mov	sl, r3
 800bc36:	4693      	mov	fp, r2
 800bc38:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bc3c:	fb0a f203 	mul.w	r2, sl, r3
 800bc40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bc44:	fb0b f303 	mul.w	r3, fp, r3
 800bc48:	441a      	add	r2, r3
 800bc4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bc4e:	fba3 450a 	umull	r4, r5, r3, sl
 800bc52:	1953      	adds	r3, r2, r5
 800bc54:	461d      	mov	r5, r3
 800bc56:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138
 800bc5a:	e9c7 454e 	strd	r4, r5, [r7, #312]	; 0x138



	tmpc  = 1 + (int64_t)prange_curr->total_periods_elapsed;
 800bc5e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bc62:	699b      	ldr	r3, [r3, #24]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc6a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800bc6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bc72:	460b      	mov	r3, r1
 800bc74:	3301      	adds	r3, #1
 800bc76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	f143 0300 	adc.w	r3, r3, #0
 800bc80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc84:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800bc88:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	tmpc *= (int64_t)prange_curr->VL53L1_p_006;
 800bc8c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bc90:	8adb      	ldrh	r3, [r3, #22]
 800bc92:	b29b      	uxth	r3, r3
 800bc94:	2200      	movs	r2, #0
 800bc96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc9a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800bc9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bca2:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800bca6:	4622      	mov	r2, r4
 800bca8:	fb02 f203 	mul.w	r2, r2, r3
 800bcac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	fb01 f303 	mul.w	r3, r1, r3
 800bcb6:	441a      	add	r2, r3
 800bcb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	fba3 8901 	umull	r8, r9, r3, r1
 800bcc2:	eb02 0309 	add.w	r3, r2, r9
 800bcc6:	4699      	mov	r9, r3
 800bcc8:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800bccc:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130



	events_scaler  = tmpp * 4096;
 800bcd0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800bcd4:	f04f 0000 	mov.w	r0, #0
 800bcd8:	f04f 0100 	mov.w	r1, #0
 800bcdc:	0319      	lsls	r1, r3, #12
 800bcde:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800bce2:	0310      	lsls	r0, r2, #12
 800bce4:	e9c7 0152 	strd	r0, r1, [r7, #328]	; 0x148
	events_scaler += (tmpc/2);
 800bce8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800bcec:	0fd9      	lsrs	r1, r3, #31
 800bcee:	2000      	movs	r0, #0
 800bcf0:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800bcf4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800bcf8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	1889      	adds	r1, r1, r2
 800bd00:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800bd04:	4629      	mov	r1, r5
 800bd06:	eb43 0101 	adc.w	r1, r3, r1
 800bd0a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800bd0e:	f04f 0200 	mov.w	r2, #0
 800bd12:	f04f 0300 	mov.w	r3, #0
 800bd16:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800bd1a:	4621      	mov	r1, r4
 800bd1c:	084a      	lsrs	r2, r1, #1
 800bd1e:	4629      	mov	r1, r5
 800bd20:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800bd24:	4629      	mov	r1, r5
 800bd26:	104b      	asrs	r3, r1, #1
 800bd28:	4610      	mov	r0, r2
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 800bd30:	1814      	adds	r4, r2, r0
 800bd32:	67bc      	str	r4, [r7, #120]	; 0x78
 800bd34:	414b      	adcs	r3, r1
 800bd36:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bd38:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 800bd3c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	if (tmpc != 0)
 800bd40:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800bd44:	4313      	orrs	r3, r2
 800bd46:	d009      	beq.n	800bd5c <VL53L1_hist_events_consistency_check+0x204>
		events_scaler = do_division_s(events_scaler, tmpc);
 800bd48:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800bd4c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800bd50:	f7f4 fa66 	bl	8000220 <__aeabi_ldivmod>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148

	events_scaler_sq  = events_scaler * events_scaler;
 800bd5c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800bd60:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bd64:	fb03 f102 	mul.w	r1, r3, r2
 800bd68:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800bd6c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bd70:	fb02 f303 	mul.w	r3, r2, r3
 800bd74:	18ca      	adds	r2, r1, r3
 800bd76:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800bd7a:	fba3 1303 	umull	r1, r3, r3, r3
 800bd7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bd82:	460b      	mov	r3, r1
 800bd84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bd8c:	18d3      	adds	r3, r2, r3
 800bd8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bd92:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800bd96:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
 800bd9a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq += 2048;
 800bd9e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bda2:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800bda6:	6739      	str	r1, [r7, #112]	; 0x70
 800bda8:	f143 0300 	adc.w	r3, r3, #0
 800bdac:	677b      	str	r3, [r7, #116]	; 0x74
 800bdae:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 800bdb2:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	events_scaler_sq /= 4096;
 800bdb6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	da08      	bge.n	800bdd0 <VL53L1_hist_events_consistency_check+0x278>
 800bdbe:	f640 71ff 	movw	r1, #4095	; 0xfff
 800bdc2:	1851      	adds	r1, r2, r1
 800bdc4:	66b9      	str	r1, [r7, #104]	; 0x68
 800bdc6:	f143 0300 	adc.w	r3, r3, #0
 800bdca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bdcc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800bdd0:	f04f 0000 	mov.w	r0, #0
 800bdd4:	f04f 0100 	mov.w	r1, #0
 800bdd8:	0b10      	lsrs	r0, r2, #12
 800bdda:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800bdde:	1319      	asrs	r1, r3, #12
 800bde0:	e9c7 014a 	strd	r0, r1, [r7, #296]	; 0x128



	c_signal_events  = (int64_t)prange_curr->VL53L1_p_021;
 800bde4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bde8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdea:	2200      	movs	r2, #0
 800bdec:	663b      	str	r3, [r7, #96]	; 0x60
 800bdee:	667a      	str	r2, [r7, #100]	; 0x64
 800bdf0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800bdf4:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events -= (int64_t)prange_curr->VL53L1_p_020;
 800bdf8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfe:	2200      	movs	r2, #0
 800be00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be04:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800be08:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800be0c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800be10:	4621      	mov	r1, r4
 800be12:	1a51      	subs	r1, r2, r1
 800be14:	65b9      	str	r1, [r7, #88]	; 0x58
 800be16:	4629      	mov	r1, r5
 800be18:	eb63 0301 	sbc.w	r3, r3, r1
 800be1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be1e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800be22:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events *= (int64_t)events_scaler;
 800be26:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800be2a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800be2e:	fb03 f102 	mul.w	r1, r3, r2
 800be32:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800be36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800be3a:	fb02 f303 	mul.w	r3, r2, r3
 800be3e:	4419      	add	r1, r3
 800be40:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800be44:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800be48:	fba2 2303 	umull	r2, r3, r2, r3
 800be4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be50:	4613      	mov	r3, r2
 800be52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800be56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be5a:	18cb      	adds	r3, r1, r3
 800be5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800be60:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800be64:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 800be68:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events += 2048;
 800be6c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800be70:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800be74:	6539      	str	r1, [r7, #80]	; 0x50
 800be76:	f143 0300 	adc.w	r3, r3, #0
 800be7a:	657b      	str	r3, [r7, #84]	; 0x54
 800be7c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800be80:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	c_signal_events /= 4096;
 800be84:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800be88:	2b00      	cmp	r3, #0
 800be8a:	da08      	bge.n	800be9e <VL53L1_hist_events_consistency_check+0x346>
 800be8c:	f640 71ff 	movw	r1, #4095	; 0xfff
 800be90:	1851      	adds	r1, r2, r1
 800be92:	64b9      	str	r1, [r7, #72]	; 0x48
 800be94:	f143 0300 	adc.w	r3, r3, #0
 800be98:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800be9e:	f04f 0000 	mov.w	r0, #0
 800bea2:	f04f 0100 	mov.w	r1, #0
 800bea6:	0b10      	lsrs	r0, r2, #12
 800bea8:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800beac:	1319      	asrs	r1, r3, #12
 800beae:	e9c7 0148 	strd	r0, r1, [r7, #288]	; 0x120

	c_sig_noise_sq  = (int64_t)events_scaler_sq;
 800beb2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800beb6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	c_sig_noise_sq *= (int64_t)prange_curr->VL53L1_p_021;
 800beba:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bec0:	2200      	movs	r2, #0
 800bec2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bec6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800beca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800bece:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800bed2:	4622      	mov	r2, r4
 800bed4:	fb02 f203 	mul.w	r2, r2, r3
 800bed8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bedc:	4629      	mov	r1, r5
 800bede:	fb01 f303 	mul.w	r3, r1, r3
 800bee2:	441a      	add	r2, r3
 800bee4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bee8:	4621      	mov	r1, r4
 800beea:	fba3 1301 	umull	r1, r3, r3, r1
 800beee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bef2:	460b      	mov	r3, r1
 800bef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800befc:	18d3      	adds	r3, r2, r3
 800befe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bf02:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800bf06:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800bf0a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq += 2048;
 800bf0e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800bf12:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800bf16:	6439      	str	r1, [r7, #64]	; 0x40
 800bf18:	f143 0300 	adc.w	r3, r3, #0
 800bf1c:	647b      	str	r3, [r7, #68]	; 0x44
 800bf1e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800bf22:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	c_sig_noise_sq /= 4096;
 800bf26:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	da08      	bge.n	800bf40 <VL53L1_hist_events_consistency_check+0x3e8>
 800bf2e:	f640 71ff 	movw	r1, #4095	; 0xfff
 800bf32:	1851      	adds	r1, r2, r1
 800bf34:	63b9      	str	r1, [r7, #56]	; 0x38
 800bf36:	f143 0300 	adc.w	r3, r3, #0
 800bf3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bf40:	f04f 0000 	mov.w	r0, #0
 800bf44:	f04f 0100 	mov.w	r1, #0
 800bf48:	0b10      	lsrs	r0, r2, #12
 800bf4a:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800bf4e:	1319      	asrs	r1, r3, #12
 800bf50:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118

	c_amb_noise_sq  = (int64_t)events_scaler_sq;
 800bf54:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800bf58:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	c_amb_noise_sq *= (int64_t)prange_curr->VL53L1_p_020;
 800bf5c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800bf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf62:	2200      	movs	r2, #0
 800bf64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf68:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bf6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf70:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800bf74:	4622      	mov	r2, r4
 800bf76:	fb02 f203 	mul.w	r2, r2, r3
 800bf7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bf7e:	4629      	mov	r1, r5
 800bf80:	fb01 f303 	mul.w	r3, r1, r3
 800bf84:	441a      	add	r2, r3
 800bf86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	fba3 1301 	umull	r1, r3, r3, r1
 800bf90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bf94:	460b      	mov	r3, r1
 800bf96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf9e:	18d3      	adds	r3, r2, r3
 800bfa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bfa4:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800bfa8:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
 800bfac:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq += 2048;
 800bfb0:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bfb4:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 800bfb8:	6339      	str	r1, [r7, #48]	; 0x30
 800bfba:	f143 0300 	adc.w	r3, r3, #0
 800bfbe:	637b      	str	r3, [r7, #52]	; 0x34
 800bfc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800bfc4:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4096;
 800bfc8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bfcc:	4610      	mov	r0, r2
 800bfce:	4619      	mov	r1, r3
 800bfd0:	2900      	cmp	r1, #0
 800bfd2:	da08      	bge.n	800bfe6 <VL53L1_hist_events_consistency_check+0x48e>
 800bfd4:	f640 73ff 	movw	r3, #4095	; 0xfff
 800bfd8:	18c3      	adds	r3, r0, r3
 800bfda:	62bb      	str	r3, [r7, #40]	; 0x28
 800bfdc:	f141 0300 	adc.w	r3, r1, #0
 800bfe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfe2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800bfe6:	f04f 0200 	mov.w	r2, #0
 800bfea:	f04f 0300 	mov.w	r3, #0
 800bfee:	0b02      	lsrs	r2, r0, #12
 800bff0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800bff4:	130b      	asrs	r3, r1, #12
 800bff6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110


	c_amb_noise_sq += 2;
 800bffa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800bffe:	1c91      	adds	r1, r2, #2
 800c000:	6239      	str	r1, [r7, #32]
 800c002:	f143 0300 	adc.w	r3, r3, #0
 800c006:	627b      	str	r3, [r7, #36]	; 0x24
 800c008:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c00c:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	c_amb_noise_sq /= 4;
 800c010:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800c014:	2b00      	cmp	r3, #0
 800c016:	da06      	bge.n	800c026 <VL53L1_hist_events_consistency_check+0x4ce>
 800c018:	1cd1      	adds	r1, r2, #3
 800c01a:	61b9      	str	r1, [r7, #24]
 800c01c:	f143 0300 	adc.w	r3, r3, #0
 800c020:	61fb      	str	r3, [r7, #28]
 800c022:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c026:	f04f 0000 	mov.w	r0, #0
 800c02a:	f04f 0100 	mov.w	r1, #0
 800c02e:	0890      	lsrs	r0, r2, #2
 800c030:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c034:	1099      	asrs	r1, r3, #2
 800c036:	e9c7 0144 	strd	r0, r1, [r7, #272]	; 0x110



	p_amb_noise_sq  =
		(int64_t)prange_prev->VL53L1_p_020;
 800c03a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c03e:	681b      	ldr	r3, [r3, #0]
	p_amb_noise_sq  =
 800c040:	2200      	movs	r2, #0
 800c042:	613b      	str	r3, [r7, #16]
 800c044:	617a      	str	r2, [r7, #20]
 800c046:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c04a:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108


	p_amb_noise_sq += 2;
 800c04e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c052:	1c91      	adds	r1, r2, #2
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	f143 0300 	adc.w	r3, r3, #0
 800c05a:	60fb      	str	r3, [r7, #12]
 800c05c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c060:	e9c7 3442 	strd	r3, r4, [r7, #264]	; 0x108
	p_amb_noise_sq /= 4;
 800c064:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800c068:	2b00      	cmp	r3, #0
 800c06a:	da06      	bge.n	800c07a <VL53L1_hist_events_consistency_check+0x522>
 800c06c:	1cd1      	adds	r1, r2, #3
 800c06e:	6039      	str	r1, [r7, #0]
 800c070:	f143 0300 	adc.w	r3, r3, #0
 800c074:	607b      	str	r3, [r7, #4]
 800c076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c07a:	f04f 0000 	mov.w	r0, #0
 800c07e:	f04f 0100 	mov.w	r1, #0
 800c082:	0890      	lsrs	r0, r2, #2
 800c084:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 800c088:	1099      	asrs	r1, r3, #2
 800c08a:	e9c7 0142 	strd	r0, r1, [r7, #264]	; 0x108

	noise_sq_sum =
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c08e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c092:	685a      	ldr	r2, [r3, #4]
		(uint32_t)c_sig_noise_sq +
 800c094:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
		(uint32_t)prange_prev->VL53L1_p_021 +
 800c098:	441a      	add	r2, r3
		(uint32_t)p_amb_noise_sq +
 800c09a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
		(uint32_t)c_sig_noise_sq +
 800c09e:	441a      	add	r2, r3
		(uint32_t)c_amb_noise_sq;
 800c0a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	noise_sq_sum =
 800c0a4:	4413      	add	r3, r2
 800c0a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	*pevents_tolerance =
		(int32_t)VL53L1_isqrt(noise_sq_sum * 16);
 800c0aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c0ae:	011b      	lsls	r3, r3, #4
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f002 f8c6 	bl	800e242 <VL53L1_isqrt>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	461a      	mov	r2, r3
	*pevents_tolerance =
 800c0ba:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c0be:	601a      	str	r2, [r3, #0]

	*pevents_tolerance *= (int32_t)event_sigma;
 800c0c0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 800c0ca:	fb03 f202 	mul.w	r2, r3, r2
 800c0ce:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c0d2:	601a      	str	r2, [r3, #0]
	*pevents_tolerance += 32;
 800c0d4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f103 0220 	add.w	r2, r3, #32
 800c0de:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c0e2:	601a      	str	r2, [r3, #0]
	*pevents_tolerance /= 64;
 800c0e4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	da00      	bge.n	800c0f0 <VL53L1_hist_events_consistency_check+0x598>
 800c0ee:	333f      	adds	r3, #63	; 0x3f
 800c0f0:	119b      	asrs	r3, r3, #6
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c0f8:	601a      	str	r2, [r3, #0]

	p_signal_events  = (int32_t)prange_prev->VL53L1_p_021;
 800c0fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	p_signal_events -= (int32_t)prange_prev->VL53L1_p_020;
 800c104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	461a      	mov	r2, r3
 800c10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c110:	1a9b      	subs	r3, r3, r2
 800c112:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

	if ((int32_t)c_signal_events > p_signal_events)
 800c116:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c11a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c11e:	429a      	cmp	r2, r3
 800c120:	da08      	bge.n	800c134 <VL53L1_hist_events_consistency_check+0x5dc>
		*pevents_delta =
			(int32_t)c_signal_events - p_signal_events;
 800c122:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c12a:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c12c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	e007      	b.n	800c144 <VL53L1_hist_events_consistency_check+0x5ec>
	else
		*pevents_delta =
			p_signal_events - (int32_t)c_signal_events;
 800c134:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c138:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800c13c:	1ad2      	subs	r2, r2, r3
		*pevents_delta =
 800c13e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c142:	601a      	str	r2, [r3, #0]

	if (*pevents_delta > *pevents_tolerance &&
 800c144:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	429a      	cmp	r2, r3
 800c152:	dd0b      	ble.n	800c16c <VL53L1_hist_events_consistency_check+0x614>
		prange_curr->VL53L1_p_006 > min_effective_spad_count)
 800c154:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800c158:	8adb      	ldrh	r3, [r3, #22]
	if (*pevents_delta > *pevents_tolerance &&
 800c15a:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 800c15e:	429a      	cmp	r2, r3
 800c160:	d204      	bcs.n	800c16c <VL53L1_hist_events_consistency_check+0x614>
		*prange_status = VL53L1_DEVICEERROR_EVENTCONSISTENCY;
 800c162:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c166:	2214      	movs	r2, #20
 800c168:	701a      	strb	r2, [r3, #0]
 800c16a:	e003      	b.n	800c174 <VL53L1_hist_events_consistency_check+0x61c>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c16c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800c170:	2209      	movs	r2, #9
 800c172:	701a      	strb	r2, [r3, #0]





	return status;
 800c174:	f997 3147 	ldrsb.w	r3, [r7, #327]	; 0x147
}
 800c178:	4618      	mov	r0, r3
 800c17a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800c17e:	46bd      	mov	sp, r7
 800c180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c184 <VL53L1_hist_merged_pulse_check>:

VL53L1_Error  VL53L1_hist_merged_pulse_check(
	int16_t                      min_max_tolerance_mm,
	VL53L1_range_data_t         *pdata,
	VL53L1_DeviceError          *prange_status)
{
 800c184:	b480      	push	{r7}
 800c186:	b087      	sub	sp, #28
 800c188:	af00      	add	r7, sp, #0
 800c18a:	4603      	mov	r3, r0
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	607a      	str	r2, [r7, #4]
 800c190:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error  status   = VL53L1_ERROR_NONE;
 800c192:	2300      	movs	r3, #0
 800c194:	757b      	strb	r3, [r7, #21]
	int16_t       delta_mm = 0;
 800c196:	2300      	movs	r3, #0
 800c198:	82fb      	strh	r3, [r7, #22]

	if (pdata->max_range_mm > pdata->min_range_mm)
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	dd0b      	ble.n	800c1c2 <VL53L1_hist_merged_pulse_check+0x3e>
		delta_mm =
			pdata->max_range_mm - pdata->min_range_mm;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	b29b      	uxth	r3, r3
		delta_mm =
 800c1be:	82fb      	strh	r3, [r7, #22]
 800c1c0:	e00a      	b.n	800c1d8 <VL53L1_hist_merged_pulse_check+0x54>
	else
		delta_mm =
			pdata->min_range_mm - pdata->max_range_mm;
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	b29b      	uxth	r3, r3
		delta_mm =
 800c1d6:	82fb      	strh	r3, [r7, #22]

	if (min_max_tolerance_mm > 0 &&
 800c1d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	dd09      	ble.n	800c1f4 <VL53L1_hist_merged_pulse_check+0x70>
 800c1e0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c1e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	dd03      	ble.n	800c1f4 <VL53L1_hist_merged_pulse_check+0x70>
		delta_mm > min_max_tolerance_mm)
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE_MERGED_PULSE;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2216      	movs	r2, #22
 800c1f0:	701a      	strb	r2, [r3, #0]
 800c1f2:	e002      	b.n	800c1fa <VL53L1_hist_merged_pulse_check+0x76>
	else
		*prange_status = VL53L1_DEVICEERROR_RANGECOMPLETE;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2209      	movs	r2, #9
 800c1f8:	701a      	strb	r2, [r3, #0]

	return status;
 800c1fa:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	371c      	adds	r7, #28
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <VL53L1_hist_xmonitor_consistency_check>:
VL53L1_Error  VL53L1_hist_xmonitor_consistency_check(
	VL53L1_DEV                   Dev,
	VL53L1_zone_hist_info_t     *phist_prev,
	VL53L1_zone_objects_t       *prange_prev,
	VL53L1_range_data_t         *prange_curr)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b08e      	sub	sp, #56	; 0x38
 800c20e:	af04      	add	r7, sp, #16
 800c210:	60f8      	str	r0, [r7, #12]
 800c212:	60b9      	str	r1, [r7, #8]
 800c214:	607a      	str	r2, [r7, #4]
 800c216:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c218:	2300      	movs	r3, #0
 800c21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev =
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	3318      	adds	r3, #24
 800c222:	623b      	str	r3, [r7, #32]
		VL53L1DevStructGetLLDriverHandle(Dev);

	int32_t   events_delta     = 0;
 800c224:	2300      	movs	r3, #0
 800c226:	61bb      	str	r3, [r7, #24]
	int32_t   events_tolerance = 0;
 800c228:	2300      	movs	r3, #0
 800c22a:	617b      	str	r3, [r7, #20]
	uint8_t event_sigma;
	uint16_t min_spad_count;

	event_sigma = pdev->histpostprocess.algo__crosstalk_detect_event_sigma;
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	f893 3294 	ldrb.w	r3, [r3, #660]	; 0x294
 800c232:	77fb      	strb	r3, [r7, #31]
	min_spad_count =
 800c234:	6a3b      	ldr	r3, [r7, #32]
 800c236:	f8b3 327c 	ldrh.w	r3, [r3, #636]	; 0x27c
 800c23a:	83bb      	strh	r3, [r7, #28]
	pdev->histpostprocess.algo__consistency_check__event_min_spad_count;

	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800c242:	2b09      	cmp	r3, #9
 800c244:	d009      	beq.n	800c25a <VL53L1_hist_xmonitor_consistency_check+0x50>
		prange_curr->range_status ==
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
	if (prange_curr->range_status == VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c24c:	2b13      	cmp	r3, #19
 800c24e:	d004      	beq.n	800c25a <VL53L1_hist_xmonitor_consistency_check+0x50>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
		prange_curr->range_status ==
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c256:	2b14      	cmp	r3, #20
 800c258:	d129      	bne.n	800c2ae <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

		if (prange_prev->xmonitor.range_status ==
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c260:	2b09      	cmp	r3, #9
 800c262:	d009      	beq.n	800c278 <VL53L1_hist_xmonitor_consistency_check+0x6e>
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
			prange_prev->xmonitor.range_status ==
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
				VL53L1_DEVICEERROR_RANGECOMPLETE ||
 800c26a:	2b13      	cmp	r3, #19
 800c26c:	d004      	beq.n	800c278 <VL53L1_hist_xmonitor_consistency_check+0x6e>
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
			prange_prev->xmonitor.range_status ==
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
			VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK ||
 800c274:	2b14      	cmp	r3, #20
 800c276:	d11a      	bne.n	800c2ae <VL53L1_hist_xmonitor_consistency_check+0xa4>
				VL53L1_DEVICEERROR_EVENTCONSISTENCY) {

			prange_curr->range_status =
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	2209      	movs	r2, #9
 800c27c:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
					VL53L1_DEVICEERROR_RANGECOMPLETE;

			status =
				VL53L1_hist_events_consistency_check(
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f103 0238 	add.w	r2, r3, #56	; 0x38
					phist_prev,
					&(prange_prev->xmonitor),
					prange_curr,
					&events_tolerance,
					&events_delta,
					&(prange_curr->range_status));
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	334a      	adds	r3, #74	; 0x4a
				VL53L1_hist_events_consistency_check(
 800c28a:	8bb9      	ldrh	r1, [r7, #28]
 800c28c:	7ff8      	ldrb	r0, [r7, #31]
 800c28e:	9303      	str	r3, [sp, #12]
 800c290:	f107 0318 	add.w	r3, r7, #24
 800c294:	9302      	str	r3, [sp, #8]
 800c296:	f107 0314 	add.w	r3, r7, #20
 800c29a:	9301      	str	r3, [sp, #4]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	f7ff fc58 	bl	800bb58 <VL53L1_hist_events_consistency_check>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		}
	}

	return status;
 800c2ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3728      	adds	r7, #40	; 0x28
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}

0800c2ba <VL53L1_hist_wrap_dmax>:

VL53L1_Error  VL53L1_hist_wrap_dmax(
	VL53L1_hist_post_process_config_t  *phistpostprocess,
	VL53L1_histogram_bin_data_t        *pcurrent,
	int16_t                            *pwrap_dmax_mm)
{
 800c2ba:	b580      	push	{r7, lr}
 800c2bc:	b088      	sub	sp, #32
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	60f8      	str	r0, [r7, #12]
 800c2c2:	60b9      	str	r1, [r7, #8]
 800c2c4:	607a      	str	r2, [r7, #4]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	77fb      	strb	r3, [r7, #31]

	uint32_t  pll_period_mm        = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	61bb      	str	r3, [r7, #24]
	uint32_t  wrap_dmax_phase      = 0;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	617b      	str	r3, [r7, #20]
	uint32_t  range_mm             = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	*pwrap_dmax_mm = 0;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	801a      	strh	r2, [r3, #0]


	if (pcurrent->VL53L1_p_019 != 0) {
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d019      	beq.n	800c31a <VL53L1_hist_wrap_dmax+0x60>



		pll_period_mm =
			VL53L1_calc_pll_period_mm(
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f002 f90f 	bl	800e510 <VL53L1_calc_pll_period_mm>
 800c2f2:	61b8      	str	r0, [r7, #24]
				pcurrent->VL53L1_p_019);



		wrap_dmax_phase =
			(uint32_t)phistpostprocess->valid_phase_high << 8;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		wrap_dmax_phase =
 800c2fa:	021b      	lsls	r3, r3, #8
 800c2fc:	617b      	str	r3, [r7, #20]



		range_mm = wrap_dmax_phase * pll_period_mm;
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	69ba      	ldr	r2, [r7, #24]
 800c302:	fb02 f303 	mul.w	r3, r2, r3
 800c306:	613b      	str	r3, [r7, #16]
		range_mm = (range_mm + (1<<14)) >> 15;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800c30e:	0bdb      	lsrs	r3, r3, #15
 800c310:	613b      	str	r3, [r7, #16]

		*pwrap_dmax_mm = (int16_t)range_mm;
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	b21a      	sxth	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	801a      	strh	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c31a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3720      	adds	r7, #32
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <VL53L1_hist_combine_mm1_mm2_offsets>:
	uint8_t                               encoded_zone_size,
	VL53L1_additional_offset_cal_data_t  *pcal_data,
	uint8_t                              *pgood_spads,
	uint16_t                              aperture_attenuation,
	int16_t                               *prange_offset_mm)
{
 800c326:	b590      	push	{r4, r7, lr}
 800c328:	b08d      	sub	sp, #52	; 0x34
 800c32a:	af04      	add	r7, sp, #16
 800c32c:	4604      	mov	r4, r0
 800c32e:	4608      	mov	r0, r1
 800c330:	4611      	mov	r1, r2
 800c332:	461a      	mov	r2, r3
 800c334:	4623      	mov	r3, r4
 800c336:	80fb      	strh	r3, [r7, #6]
 800c338:	4603      	mov	r3, r0
 800c33a:	80bb      	strh	r3, [r7, #4]
 800c33c:	460b      	mov	r3, r1
 800c33e:	70fb      	strb	r3, [r7, #3]
 800c340:	4613      	mov	r3, r2
 800c342:	70bb      	strb	r3, [r7, #2]



	uint16_t max_mm_inner_effective_spads = 0;
 800c344:	2300      	movs	r3, #0
 800c346:	81fb      	strh	r3, [r7, #14]
	uint16_t max_mm_outer_effective_spads = 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	81bb      	strh	r3, [r7, #12]
	uint16_t mm_inner_effective_spads     = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	817b      	strh	r3, [r7, #10]
	uint16_t mm_outer_effective_spads     = 0;
 800c350:	2300      	movs	r3, #0
 800c352:	813b      	strh	r3, [r7, #8]

	uint32_t scaled_mm1_peak_rate_mcps    = 0;
 800c354:	2300      	movs	r3, #0
 800c356:	61bb      	str	r3, [r7, #24]
	uint32_t scaled_mm2_peak_rate_mcps    = 0;
 800c358:	2300      	movs	r3, #0
 800c35a:	617b      	str	r3, [r7, #20]

	int32_t tmp0 = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	61fb      	str	r3, [r7, #28]
	int32_t tmp1 = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	613b      	str	r3, [r7, #16]



	VL53L1_calc_mm_effective_spads(
 800c364:	78b9      	ldrb	r1, [r7, #2]
 800c366:	78f8      	ldrb	r0, [r7, #3]
 800c368:	f107 030c 	add.w	r3, r7, #12
 800c36c:	9303      	str	r3, [sp, #12]
 800c36e:	f107 030e 	add.w	r3, r7, #14
 800c372:	9302      	str	r3, [sp, #8]
 800c374:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c378:	9301      	str	r3, [sp, #4]
 800c37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c37c:	9300      	str	r3, [sp, #0]
 800c37e:	23ff      	movs	r3, #255	; 0xff
 800c380:	22c7      	movs	r2, #199	; 0xc7
 800c382:	f000 fa03 	bl	800c78c <VL53L1_calc_mm_effective_spads>
		pgood_spads,
		aperture_attenuation,
		&max_mm_inner_effective_spads,
		&max_mm_outer_effective_spads);

	if ((max_mm_inner_effective_spads == 0) ||
 800c386:	89fb      	ldrh	r3, [r7, #14]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d050      	beq.n	800c42e <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		(max_mm_outer_effective_spads == 0))
 800c38c:	89bb      	ldrh	r3, [r7, #12]
	if ((max_mm_inner_effective_spads == 0) ||
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d04d      	beq.n	800c42e <VL53L1_hist_combine_mm1_mm2_offsets+0x108>
		goto FAIL;



	VL53L1_calc_mm_effective_spads(
 800c392:	f897 4034 	ldrb.w	r4, [r7, #52]	; 0x34
 800c396:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800c39a:	78b9      	ldrb	r1, [r7, #2]
 800c39c:	78f8      	ldrb	r0, [r7, #3]
 800c39e:	f107 0308 	add.w	r3, r7, #8
 800c3a2:	9303      	str	r3, [sp, #12]
 800c3a4:	f107 030a 	add.w	r3, r7, #10
 800c3a8:	9302      	str	r3, [sp, #8]
 800c3aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c3ae:	9301      	str	r3, [sp, #4]
 800c3b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b2:	9300      	str	r3, [sp, #0]
 800c3b4:	4623      	mov	r3, r4
 800c3b6:	f000 f9e9 	bl	800c78c <VL53L1_calc_mm_effective_spads>
		&mm_outer_effective_spads);



	scaled_mm1_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_inner_peak_signal_count_rtn_mcps;
 800c3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3bc:	889b      	ldrh	r3, [r3, #4]
	scaled_mm1_peak_rate_mcps  =
 800c3be:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps *= (uint32_t)mm_inner_effective_spads;
 800c3c0:	897b      	ldrh	r3, [r7, #10]
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	fb02 f303 	mul.w	r3, r2, r3
 800c3ca:	61bb      	str	r3, [r7, #24]
	scaled_mm1_peak_rate_mcps /= (uint32_t)max_mm_inner_effective_spads;
 800c3cc:	89fb      	ldrh	r3, [r7, #14]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3d6:	61bb      	str	r3, [r7, #24]

	scaled_mm2_peak_rate_mcps  =
	(uint32_t)pcal_data->result__mm_outer_peak_signal_count_rtn_mcps;
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	88db      	ldrh	r3, [r3, #6]
	scaled_mm2_peak_rate_mcps  =
 800c3dc:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps *= (uint32_t)mm_outer_effective_spads;
 800c3de:	893b      	ldrh	r3, [r7, #8]
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	fb02 f303 	mul.w	r3, r2, r3
 800c3e8:	617b      	str	r3, [r7, #20]
	scaled_mm2_peak_rate_mcps /= (uint32_t)max_mm_outer_effective_spads;
 800c3ea:	89bb      	ldrh	r3, [r7, #12]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3f4:	617b      	str	r3, [r7, #20]



	tmp0  = ((int32_t)mm1_offset_mm * (int32_t)scaled_mm1_peak_rate_mcps);
 800c3f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3fa:	69ba      	ldr	r2, [r7, #24]
 800c3fc:	fb02 f303 	mul.w	r3, r2, r3
 800c400:	61fb      	str	r3, [r7, #28]
	tmp0 += ((int32_t)mm2_offset_mm * (int32_t)scaled_mm2_peak_rate_mcps);
 800c402:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c406:	697a      	ldr	r2, [r7, #20]
 800c408:	fb02 f303 	mul.w	r3, r2, r3
 800c40c:	69fa      	ldr	r2, [r7, #28]
 800c40e:	4413      	add	r3, r2
 800c410:	61fb      	str	r3, [r7, #28]

	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c412:	69ba      	ldr	r2, [r7, #24]
			(int32_t)scaled_mm2_peak_rate_mcps;
 800c414:	697b      	ldr	r3, [r7, #20]
	tmp1 =  (int32_t)scaled_mm1_peak_rate_mcps +
 800c416:	4413      	add	r3, r2
 800c418:	613b      	str	r3, [r7, #16]



	if (tmp1 != 0)
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d008      	beq.n	800c432 <VL53L1_hist_combine_mm1_mm2_offsets+0x10c>
		tmp0 = (tmp0 * 4) / tmp1;
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	009a      	lsls	r2, r3, #2
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	fb92 f3f3 	sdiv	r3, r2, r3
 800c42a:	61fb      	str	r3, [r7, #28]
 800c42c:	e002      	b.n	800c434 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
		goto FAIL;
 800c42e:	bf00      	nop
 800c430:	e000      	b.n	800c434 <VL53L1_hist_combine_mm1_mm2_offsets+0x10e>
FAIL:
 800c432:	bf00      	nop
	*prange_offset_mm = (int16_t)tmp0;
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	b21a      	sxth	r2, r3
 800c438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c43a:	801a      	strh	r2, [r3, #0]

}
 800c43c:	bf00      	nop
 800c43e:	3724      	adds	r7, #36	; 0x24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd90      	pop	{r4, r7, pc}

0800c444 <VL53L1_spad_number_to_byte_bit_index>:
void VL53L1_spad_number_to_byte_bit_index(
	uint8_t  spad_number,
	uint8_t *pbyte_index,
	uint8_t *pbit_index,
	uint8_t *pbit_mask)
{
 800c444:	b480      	push	{r7}
 800c446:	b085      	sub	sp, #20
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
 800c44e:	603b      	str	r3, [r7, #0]
 800c450:	4603      	mov	r3, r0
 800c452:	73fb      	strb	r3, [r7, #15]



	*pbyte_index  = spad_number >> 3;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
 800c456:	08db      	lsrs	r3, r3, #3
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	701a      	strb	r2, [r3, #0]
	*pbit_index   = spad_number & 0x07;
 800c45e:	7bfb      	ldrb	r3, [r7, #15]
 800c460:	f003 0307 	and.w	r3, r3, #7
 800c464:	b2da      	uxtb	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	701a      	strb	r2, [r3, #0]
	*pbit_mask    = 0x01 << *pbit_index;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	781b      	ldrb	r3, [r3, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	2301      	movs	r3, #1
 800c472:	4093      	lsls	r3, r2
 800c474:	b2da      	uxtb	r2, r3
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	701a      	strb	r2, [r3, #0]

}
 800c47a:	bf00      	nop
 800c47c:	3714      	adds	r7, #20
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr

0800c486 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800c486:	b480      	push	{r7}
 800c488:	b083      	sub	sp, #12
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	4603      	mov	r3, r0
 800c48e:	603a      	str	r2, [r7, #0]
 800c490:	71fb      	strb	r3, [r7, #7]
 800c492:	460b      	mov	r3, r1
 800c494:	71bb      	strb	r3, [r7, #6]


	if (row > 7)
 800c496:	79fb      	ldrb	r3, [r7, #7]
 800c498:	2b07      	cmp	r3, #7
 800c49a:	d90a      	bls.n	800c4b2 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800c49c:	79bb      	ldrb	r3, [r7, #6]
 800c49e:	00db      	lsls	r3, r3, #3
 800c4a0:	b2da      	uxtb	r2, r3
 800c4a2:	79fb      	ldrb	r3, [r7, #7]
 800c4a4:	1ad3      	subs	r3, r2, r3
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	3b71      	subs	r3, #113	; 0x71
 800c4aa:	b2da      	uxtb	r2, r3
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	701a      	strb	r2, [r3, #0]
	else
		*pspad_number = ((15-col) << 3) + row;

}
 800c4b0:	e00a      	b.n	800c4c8 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800c4b2:	79bb      	ldrb	r3, [r7, #6]
 800c4b4:	f1c3 030f 	rsb	r3, r3, #15
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	79fb      	ldrb	r3, [r7, #7]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	701a      	strb	r2, [r3, #0]
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
 800c4e0:	73fb      	strb	r3, [r7, #15]



	*pheight = encoded_xy_size >> 4;
 800c4e2:	7bfb      	ldrb	r3, [r7, #15]
 800c4e4:	091b      	lsrs	r3, r3, #4
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800c4ec:	7bfb      	ldrb	r3, [r7, #15]
 800c4ee:	f003 030f 	and.w	r3, r3, #15
 800c4f2:	b2da      	uxtb	r2, r3
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	701a      	strb	r2, [r3, #0]

}
 800c4f8:	bf00      	nop
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800c504:	b480      	push	{r7}
 800c506:	b083      	sub	sp, #12
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	603a      	str	r2, [r7, #0]
 800c50e:	71fb      	strb	r3, [r7, #7]
 800c510:	460b      	mov	r3, r1
 800c512:	71bb      	strb	r3, [r7, #6]


	*pencoded_xy_size = (height << 4) + width;
 800c514:	79bb      	ldrb	r3, [r7, #6]
 800c516:	011b      	lsls	r3, r3, #4
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	4413      	add	r3, r2
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	701a      	strb	r2, [r3, #0]

}
 800c524:	bf00      	nop
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <VL53L1_decode_zone_limits>:
	uint8_t   encoded_xy_size,
	int16_t  *px_ll,
	int16_t  *py_ll,
	int16_t  *px_ur,
	int16_t  *py_ur)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	60ba      	str	r2, [r7, #8]
 800c538:	607b      	str	r3, [r7, #4]
 800c53a:	4603      	mov	r3, r0
 800c53c:	73fb      	strb	r3, [r7, #15]
 800c53e:	460b      	mov	r3, r1
 800c540:	73bb      	strb	r3, [r7, #14]



	uint8_t x_centre = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	75fb      	strb	r3, [r7, #23]
	uint8_t y_centre = 0;
 800c546:	2300      	movs	r3, #0
 800c548:	75bb      	strb	r3, [r7, #22]
	uint8_t width    = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	757b      	strb	r3, [r7, #21]
	uint8_t height   = 0;
 800c54e:	2300      	movs	r3, #0
 800c550:	753b      	strb	r3, [r7, #20]



	VL53L1_decode_row_col(
 800c552:	f107 0217 	add.w	r2, r7, #23
 800c556:	f107 0116 	add.w	r1, r7, #22
 800c55a:	7bfb      	ldrb	r3, [r7, #15]
 800c55c:	4618      	mov	r0, r3
 800c55e:	f002 fa51 	bl	800ea04 <VL53L1_decode_row_col>
		encoded_xy_centre,
		&y_centre,
		&x_centre);

	VL53L1_decode_zone_size(
 800c562:	f107 0214 	add.w	r2, r7, #20
 800c566:	f107 0115 	add.w	r1, r7, #21
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7ff ffb1 	bl	800c4d4 <VL53L1_decode_zone_size>
		&width,
		&height);



	*px_ll = (int16_t)x_centre - ((int16_t)width + 1) / 2;
 800c572:	7dfb      	ldrb	r3, [r7, #23]
 800c574:	b29a      	uxth	r2, r3
 800c576:	7d7b      	ldrb	r3, [r7, #21]
 800c578:	3301      	adds	r3, #1
 800c57a:	0fd9      	lsrs	r1, r3, #31
 800c57c:	440b      	add	r3, r1
 800c57e:	105b      	asrs	r3, r3, #1
 800c580:	425b      	negs	r3, r3
 800c582:	b29b      	uxth	r3, r3
 800c584:	4413      	add	r3, r2
 800c586:	b29b      	uxth	r3, r3
 800c588:	b21a      	sxth	r2, r3
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	801a      	strh	r2, [r3, #0]
	if (*px_ll < 0)
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c594:	2b00      	cmp	r3, #0
 800c596:	da02      	bge.n	800c59e <VL53L1_decode_zone_limits+0x6e>
		*px_ll = 0;
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2200      	movs	r2, #0
 800c59c:	801a      	strh	r2, [r3, #0]

	*px_ur = *px_ll + (int16_t)width;
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	7d7b      	ldrb	r3, [r7, #21]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	4413      	add	r3, r2
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	b21a      	sxth	r2, r3
 800c5b0:	6a3b      	ldr	r3, [r7, #32]
 800c5b2:	801a      	strh	r2, [r3, #0]
	if (*px_ur > (VL53L1_SPAD_ARRAY_WIDTH-1))
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5ba:	2b0f      	cmp	r3, #15
 800c5bc:	dd02      	ble.n	800c5c4 <VL53L1_decode_zone_limits+0x94>
		*px_ur = VL53L1_SPAD_ARRAY_WIDTH-1;
 800c5be:	6a3b      	ldr	r3, [r7, #32]
 800c5c0:	220f      	movs	r2, #15
 800c5c2:	801a      	strh	r2, [r3, #0]

	*py_ll = (int16_t)y_centre - ((int16_t)height + 1) / 2;
 800c5c4:	7dbb      	ldrb	r3, [r7, #22]
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	7d3b      	ldrb	r3, [r7, #20]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	0fd9      	lsrs	r1, r3, #31
 800c5ce:	440b      	add	r3, r1
 800c5d0:	105b      	asrs	r3, r3, #1
 800c5d2:	425b      	negs	r3, r3
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	4413      	add	r3, r2
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	b21a      	sxth	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	801a      	strh	r2, [r3, #0]
	if (*py_ll < 0)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	da02      	bge.n	800c5f0 <VL53L1_decode_zone_limits+0xc0>
		*py_ll = 0;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	801a      	strh	r2, [r3, #0]

	*py_ur = *py_ll + (int16_t)height;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c5f6:	b29a      	uxth	r2, r3
 800c5f8:	7d3b      	ldrb	r3, [r7, #20]
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	4413      	add	r3, r2
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	b21a      	sxth	r2, r3
 800c602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c604:	801a      	strh	r2, [r3, #0]
	if (*py_ur > (VL53L1_SPAD_ARRAY_HEIGHT-1))
 800c606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c60c:	2b0f      	cmp	r3, #15
 800c60e:	dd02      	ble.n	800c616 <VL53L1_decode_zone_limits+0xe6>
		*py_ur = VL53L1_SPAD_ARRAY_HEIGHT-1;
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	220f      	movs	r2, #15
 800c614:	801a      	strh	r2, [r3, #0]
}
 800c616:	bf00      	nop
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <VL53L1_is_aperture_location>:


uint8_t VL53L1_is_aperture_location(
	uint8_t row,
	uint8_t col)
{
 800c61e:	b480      	push	{r7}
 800c620:	b085      	sub	sp, #20
 800c622:	af00      	add	r7, sp, #0
 800c624:	4603      	mov	r3, r0
 800c626:	460a      	mov	r2, r1
 800c628:	71fb      	strb	r3, [r7, #7]
 800c62a:	4613      	mov	r3, r2
 800c62c:	71bb      	strb	r3, [r7, #6]


	uint8_t is_aperture = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	73fb      	strb	r3, [r7, #15]
	uint8_t mod_row     = row % 4;
 800c632:	79fb      	ldrb	r3, [r7, #7]
 800c634:	f003 0303 	and.w	r3, r3, #3
 800c638:	73bb      	strb	r3, [r7, #14]
	uint8_t mod_col     = col % 4;
 800c63a:	79bb      	ldrb	r3, [r7, #6]
 800c63c:	f003 0303 	and.w	r3, r3, #3
 800c640:	737b      	strb	r3, [r7, #13]

	if (mod_row == 0 && mod_col == 2)
 800c642:	7bbb      	ldrb	r3, [r7, #14]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d104      	bne.n	800c652 <VL53L1_is_aperture_location+0x34>
 800c648:	7b7b      	ldrb	r3, [r7, #13]
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d101      	bne.n	800c652 <VL53L1_is_aperture_location+0x34>
		is_aperture = 1;
 800c64e:	2301      	movs	r3, #1
 800c650:	73fb      	strb	r3, [r7, #15]

	if (mod_row == 2 && mod_col == 0)
 800c652:	7bbb      	ldrb	r3, [r7, #14]
 800c654:	2b02      	cmp	r3, #2
 800c656:	d104      	bne.n	800c662 <VL53L1_is_aperture_location+0x44>
 800c658:	7b7b      	ldrb	r3, [r7, #13]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <VL53L1_is_aperture_location+0x44>
		is_aperture = 1;
 800c65e:	2301      	movs	r3, #1
 800c660:	73fb      	strb	r3, [r7, #15]

	return is_aperture;
 800c662:	7bfb      	ldrb	r3, [r7, #15]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3714      	adds	r7, #20
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <VL53L1_calc_max_effective_spads>:
	uint8_t     encoded_zone_centre,
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmax_effective_spads)
{
 800c670:	b590      	push	{r4, r7, lr}
 800c672:	b08b      	sub	sp, #44	; 0x2c
 800c674:	af02      	add	r7, sp, #8
 800c676:	603a      	str	r2, [r7, #0]
 800c678:	461a      	mov	r2, r3
 800c67a:	4603      	mov	r3, r0
 800c67c:	71fb      	strb	r3, [r7, #7]
 800c67e:	460b      	mov	r3, r1
 800c680:	71bb      	strb	r3, [r7, #6]
 800c682:	4613      	mov	r3, r2
 800c684:	80bb      	strh	r3, [r7, #4]



	int16_t   x         = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	83fb      	strh	r3, [r7, #30]
	int16_t   y         = 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	83bb      	strh	r3, [r7, #28]

	int16_t   zone_x_ll = 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	833b      	strh	r3, [r7, #24]
	int16_t   zone_y_ll = 0;
 800c692:	2300      	movs	r3, #0
 800c694:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_x_ur = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_y_ur = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	827b      	strh	r3, [r7, #18]

	uint8_t   spad_number = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	747b      	strb	r3, [r7, #17]
	uint8_t   byte_index  = 0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	743b      	strb	r3, [r7, #16]
	uint8_t   bit_index   = 0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	73fb      	strb	r3, [r7, #15]
	uint8_t   bit_mask    = 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	73bb      	strb	r3, [r7, #14]

	uint8_t   is_aperture = 0;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	76fb      	strb	r3, [r7, #27]



	VL53L1_decode_zone_limits(
 800c6b2:	f107 0416 	add.w	r4, r7, #22
 800c6b6:	f107 0218 	add.w	r2, r7, #24
 800c6ba:	79b9      	ldrb	r1, [r7, #6]
 800c6bc:	79f8      	ldrb	r0, [r7, #7]
 800c6be:	f107 0312 	add.w	r3, r7, #18
 800c6c2:	9301      	str	r3, [sp, #4]
 800c6c4:	f107 0314 	add.w	r3, r7, #20
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	4623      	mov	r3, r4
 800c6cc:	f7ff ff30 	bl	800c530 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmax_effective_spads = 0;
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800c6d6:	8afb      	ldrh	r3, [r7, #22]
 800c6d8:	83bb      	strh	r3, [r7, #28]
 800c6da:	e04c      	b.n	800c776 <VL53L1_calc_max_effective_spads+0x106>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800c6dc:	8b3b      	ldrh	r3, [r7, #24]
 800c6de:	83fb      	strh	r3, [r7, #30]
 800c6e0:	e03d      	b.n	800c75e <VL53L1_calc_max_effective_spads+0xee>



			VL53L1_encode_row_col(
 800c6e2:	8bbb      	ldrh	r3, [r7, #28]
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	8bfa      	ldrh	r2, [r7, #30]
 800c6e8:	b2d1      	uxtb	r1, r2
 800c6ea:	f107 0211 	add.w	r2, r7, #17
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7ff fec9 	bl	800c486 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800c6f4:	7c78      	ldrb	r0, [r7, #17]
 800c6f6:	f107 030e 	add.w	r3, r7, #14
 800c6fa:	f107 020f 	add.w	r2, r7, #15
 800c6fe:	f107 0110 	add.w	r1, r7, #16
 800c702:	f7ff fe9f 	bl	800c444 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800c706:	7c3b      	ldrb	r3, [r7, #16]
 800c708:	461a      	mov	r2, r3
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	4413      	add	r3, r2
 800c70e:	781a      	ldrb	r2, [r3, #0]
 800c710:	7bbb      	ldrb	r3, [r7, #14]
 800c712:	4013      	ands	r3, r2
 800c714:	b2db      	uxtb	r3, r3
 800c716:	2b00      	cmp	r3, #0
 800c718:	d01b      	beq.n	800c752 <VL53L1_calc_max_effective_spads+0xe2>


				is_aperture = VL53L1_is_aperture_location(
 800c71a:	8bbb      	ldrh	r3, [r7, #28]
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	8bfa      	ldrh	r2, [r7, #30]
 800c720:	b2d2      	uxtb	r2, r2
 800c722:	4611      	mov	r1, r2
 800c724:	4618      	mov	r0, r3
 800c726:	f7ff ff7a 	bl	800c61e <VL53L1_is_aperture_location>
 800c72a:	4603      	mov	r3, r0
 800c72c:	76fb      	strb	r3, [r7, #27]
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800c72e:	7efb      	ldrb	r3, [r7, #27]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d007      	beq.n	800c744 <VL53L1_calc_max_effective_spads+0xd4>
					*pmax_effective_spads +=
 800c734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c736:	881a      	ldrh	r2, [r3, #0]
 800c738:	88bb      	ldrh	r3, [r7, #4]
 800c73a:	4413      	add	r3, r2
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c740:	801a      	strh	r2, [r3, #0]
 800c742:	e006      	b.n	800c752 <VL53L1_calc_max_effective_spads+0xe2>
							aperture_attenuation;
				else
					*pmax_effective_spads += 0x0100;
 800c744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c746:	881b      	ldrh	r3, [r3, #0]
 800c748:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c750:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800c752:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c756:	b29b      	uxth	r3, r3
 800c758:	3301      	adds	r3, #1
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	83fb      	strh	r3, [r7, #30]
 800c75e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c762:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800c766:	429a      	cmp	r2, r3
 800c768:	ddbb      	ble.n	800c6e2 <VL53L1_calc_max_effective_spads+0x72>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800c76a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c76e:	b29b      	uxth	r3, r3
 800c770:	3301      	adds	r3, #1
 800c772:	b29b      	uxth	r3, r3
 800c774:	83bb      	strh	r3, [r7, #28]
 800c776:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c77a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c77e:	429a      	cmp	r2, r3
 800c780:	ddac      	ble.n	800c6dc <VL53L1_calc_max_effective_spads+0x6c>

			}
		}
	}
}
 800c782:	bf00      	nop
 800c784:	bf00      	nop
 800c786:	3724      	adds	r7, #36	; 0x24
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd90      	pop	{r4, r7, pc}

0800c78c <VL53L1_calc_mm_effective_spads>:
	uint8_t     encoded_zone_size,
	uint8_t    *pgood_spads,
	uint16_t    aperture_attenuation,
	uint16_t   *pmm_inner_effective_spads,
	uint16_t   *pmm_outer_effective_spads)
{
 800c78c:	b590      	push	{r4, r7, lr}
 800c78e:	b08d      	sub	sp, #52	; 0x34
 800c790:	af02      	add	r7, sp, #8
 800c792:	4604      	mov	r4, r0
 800c794:	4608      	mov	r0, r1
 800c796:	4611      	mov	r1, r2
 800c798:	461a      	mov	r2, r3
 800c79a:	4623      	mov	r3, r4
 800c79c:	71fb      	strb	r3, [r7, #7]
 800c79e:	4603      	mov	r3, r0
 800c7a0:	71bb      	strb	r3, [r7, #6]
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	717b      	strb	r3, [r7, #5]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	713b      	strb	r3, [r7, #4]



	int16_t   x         = 0;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t   y         = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	84bb      	strh	r3, [r7, #36]	; 0x24

	int16_t   mm_x_ll   = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	83fb      	strh	r3, [r7, #30]
	int16_t   mm_y_ll   = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	83bb      	strh	r3, [r7, #28]
	int16_t   mm_x_ur   = 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	837b      	strh	r3, [r7, #26]
	int16_t   mm_y_ur   = 0;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	833b      	strh	r3, [r7, #24]

	int16_t   zone_x_ll = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	82fb      	strh	r3, [r7, #22]
	int16_t   zone_y_ll = 0;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	82bb      	strh	r3, [r7, #20]
	int16_t   zone_x_ur = 0;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	827b      	strh	r3, [r7, #18]
	int16_t   zone_y_ur = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	823b      	strh	r3, [r7, #16]

	uint8_t   spad_number = 0;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	73fb      	strb	r3, [r7, #15]
	uint8_t   byte_index  = 0;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	73bb      	strb	r3, [r7, #14]
	uint8_t   bit_index   = 0;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	737b      	strb	r3, [r7, #13]
	uint8_t   bit_mask    = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	733b      	strb	r3, [r7, #12]

	uint8_t   is_aperture = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint16_t  spad_attenuation = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	847b      	strh	r3, [r7, #34]	; 0x22



	VL53L1_decode_zone_limits(
 800c7ec:	f107 041c 	add.w	r4, r7, #28
 800c7f0:	f107 021e 	add.w	r2, r7, #30
 800c7f4:	79b9      	ldrb	r1, [r7, #6]
 800c7f6:	79f8      	ldrb	r0, [r7, #7]
 800c7f8:	f107 0318 	add.w	r3, r7, #24
 800c7fc:	9301      	str	r3, [sp, #4]
 800c7fe:	f107 031a 	add.w	r3, r7, #26
 800c802:	9300      	str	r3, [sp, #0]
 800c804:	4623      	mov	r3, r4
 800c806:	f7ff fe93 	bl	800c530 <VL53L1_decode_zone_limits>
		&mm_x_ll,
		&mm_y_ll,
		&mm_x_ur,
		&mm_y_ur);

	VL53L1_decode_zone_limits(
 800c80a:	f107 0414 	add.w	r4, r7, #20
 800c80e:	f107 0216 	add.w	r2, r7, #22
 800c812:	7939      	ldrb	r1, [r7, #4]
 800c814:	7978      	ldrb	r0, [r7, #5]
 800c816:	f107 0310 	add.w	r3, r7, #16
 800c81a:	9301      	str	r3, [sp, #4]
 800c81c:	f107 0312 	add.w	r3, r7, #18
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	4623      	mov	r3, r4
 800c824:	f7ff fe84 	bl	800c530 <VL53L1_decode_zone_limits>
		&zone_x_ur,
		&zone_y_ur);



	*pmm_inner_effective_spads = 0;
 800c828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c82a:	2200      	movs	r2, #0
 800c82c:	801a      	strh	r2, [r3, #0]
	*pmm_outer_effective_spads = 0;
 800c82e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c830:	2200      	movs	r2, #0
 800c832:	801a      	strh	r2, [r3, #0]

	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800c834:	8abb      	ldrh	r3, [r7, #20]
 800c836:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c838:	e06c      	b.n	800c914 <VL53L1_calc_mm_effective_spads+0x188>
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800c83a:	8afb      	ldrh	r3, [r7, #22]
 800c83c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c83e:	e05d      	b.n	800c8fc <VL53L1_calc_mm_effective_spads+0x170>



			VL53L1_encode_row_col(
 800c840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c842:	b2db      	uxtb	r3, r3
 800c844:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c846:	b2d1      	uxtb	r1, r2
 800c848:	f107 020f 	add.w	r2, r7, #15
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7ff fe1a 	bl	800c486 <VL53L1_encode_row_col>
				(uint8_t)x,
				&spad_number);



			VL53L1_spad_number_to_byte_bit_index(
 800c852:	7bf8      	ldrb	r0, [r7, #15]
 800c854:	f107 030c 	add.w	r3, r7, #12
 800c858:	f107 020d 	add.w	r2, r7, #13
 800c85c:	f107 010e 	add.w	r1, r7, #14
 800c860:	f7ff fdf0 	bl	800c444 <VL53L1_spad_number_to_byte_bit_index>
				&bit_index,
				&bit_mask);



			if ((pgood_spads[byte_index] & bit_mask) > 0) {
 800c864:	7bbb      	ldrb	r3, [r7, #14]
 800c866:	461a      	mov	r2, r3
 800c868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86a:	4413      	add	r3, r2
 800c86c:	781a      	ldrb	r2, [r3, #0]
 800c86e:	7b3b      	ldrb	r3, [r7, #12]
 800c870:	4013      	ands	r3, r2
 800c872:	b2db      	uxtb	r3, r3
 800c874:	2b00      	cmp	r3, #0
 800c876:	d03b      	beq.n	800c8f0 <VL53L1_calc_mm_effective_spads+0x164>


				is_aperture = VL53L1_is_aperture_location(
 800c878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c87e:	b2d2      	uxtb	r2, r2
 800c880:	4611      	mov	r1, r2
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff fecb 	bl	800c61e <VL53L1_is_aperture_location>
 800c888:	4603      	mov	r3, r0
 800c88a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					(uint8_t)y,
					(uint8_t)x);

				if (is_aperture > 0)
 800c88e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c892:	2b00      	cmp	r3, #0
 800c894:	d002      	beq.n	800c89c <VL53L1_calc_mm_effective_spads+0x110>
					spad_attenuation = aperture_attenuation;
 800c896:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c898:	847b      	strh	r3, [r7, #34]	; 0x22
 800c89a:	e002      	b.n	800c8a2 <VL53L1_calc_mm_effective_spads+0x116>
				else
					spad_attenuation = 0x0100;
 800c89c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c8a0:	847b      	strh	r3, [r7, #34]	; 0x22



				if (x >= mm_x_ll && x <= mm_x_ur &&
 800c8a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c8a6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	db19      	blt.n	800c8e2 <VL53L1_calc_mm_effective_spads+0x156>
 800c8ae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c8b2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	dc13      	bgt.n	800c8e2 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800c8ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
				if (x >= mm_x_ll && x <= mm_x_ur &&
 800c8be:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	db0d      	blt.n	800c8e2 <VL53L1_calc_mm_effective_spads+0x156>
					y >= mm_y_ll && y <= mm_y_ur)
 800c8c6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800c8ca:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	dc07      	bgt.n	800c8e2 <VL53L1_calc_mm_effective_spads+0x156>
					*pmm_inner_effective_spads +=
 800c8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8d4:	881a      	ldrh	r2, [r3, #0]
 800c8d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8d8:	4413      	add	r3, r2
 800c8da:	b29a      	uxth	r2, r3
 800c8dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8de:	801a      	strh	r2, [r3, #0]
 800c8e0:	e006      	b.n	800c8f0 <VL53L1_calc_mm_effective_spads+0x164>
						spad_attenuation;
				else
					*pmm_outer_effective_spads +=
 800c8e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8e4:	881a      	ldrh	r2, [r3, #0]
 800c8e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c8e8:	4413      	add	r3, r2
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8ee:	801a      	strh	r2, [r3, #0]
		for (x = zone_x_ll; x <= zone_x_ur; x++) {
 800c8f0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c8fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c900:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800c904:	429a      	cmp	r2, r3
 800c906:	dd9b      	ble.n	800c840 <VL53L1_calc_mm_effective_spads+0xb4>
	for (y = zone_y_ll; y <= zone_y_ur; y++) {
 800c908:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	3301      	adds	r3, #1
 800c910:	b29b      	uxth	r3, r3
 800c912:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c914:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c918:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800c91c:	429a      	cmp	r2, r3
 800c91e:	dd8c      	ble.n	800c83a <VL53L1_calc_mm_effective_spads+0xae>
						spad_attenuation;
			}
		}
	}
}
 800c920:	bf00      	nop
 800c922:	bf00      	nop
 800c924:	372c      	adds	r7, #44	; 0x2c
 800c926:	46bd      	mov	sp, r7
 800c928:	bd90      	pop	{r4, r7, pc}

0800c92a <VL53L1_hist_copy_results_to_sys_and_core>:
void VL53L1_hist_copy_results_to_sys_and_core(
	VL53L1_histogram_bin_data_t      *pbins,
	VL53L1_range_results_t           *phist,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore)
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b086      	sub	sp, #24
 800c92e:	af00      	add	r7, sp, #0
 800c930:	60f8      	str	r0, [r7, #12]
 800c932:	60b9      	str	r1, [r7, #8]
 800c934:	607a      	str	r2, [r7, #4]
 800c936:	603b      	str	r3, [r7, #0]


	uint8_t  i = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	VL53L1_init_system_results(psys);
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7fd ff6d 	bl	800a81c <VL53L1_init_system_results>



	psys->result__interrupt_status = pbins->result__interrupt_status;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	701a      	strb	r2, [r3, #0]
	psys->result__range_status     = phist->active_results;
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	7c9a      	ldrb	r2, [r3, #18]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	705a      	strb	r2, [r3, #1]
	psys->result__report_status    = pbins->result__report_status;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f893 207a 	ldrb.w	r2, [r3, #122]	; 0x7a
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	709a      	strb	r2, [r3, #2]
	psys->result__stream_count     = pbins->result__stream_count;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	70da      	strb	r2, [r3, #3]

	pdata = &(phist->VL53L1_p_002[0]);
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	3314      	adds	r3, #20
 800c96c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < phist->active_results; i++) {
 800c96e:	2300      	movs	r3, #0
 800c970:	75fb      	strb	r3, [r7, #23]
 800c972:	e06b      	b.n	800ca4c <VL53L1_hist_copy_results_to_sys_and_core+0x122>

		switch (i) {
 800c974:	7dfb      	ldrb	r3, [r7, #23]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <VL53L1_hist_copy_results_to_sys_and_core+0x56>
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d034      	beq.n	800c9e8 <VL53L1_hist_copy_results_to_sys_and_core+0xbe>
 800c97e:	e05f      	b.n	800ca40 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 0:
			psys->result__dss_actual_effective_spads_sd0 =
					pdata->VL53L1_p_006;
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd0 =
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	809a      	strh	r2, [r3, #4]
			psys->result__peak_signal_count_rate_mcps_sd0 =
					pdata->peak_signal_count_rate_mcps;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd0 =
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	80da      	strh	r2, [r3, #6]
			psys->result__avg_signal_count_rate_mcps_sd0 =
					pdata->avg_signal_count_rate_mcps;
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
			psys->result__avg_signal_count_rate_mcps_sd0 =
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	82da      	strh	r2, [r3, #22]
			psys->result__ambient_count_rate_mcps_sd0 =
					pdata->ambient_count_rate_mcps;
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd0 =
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	811a      	strh	r2, [r3, #8]

			psys->result__sigma_sd0 = pdata->VL53L1_p_005;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	815a      	strh	r2, [r3, #10]
			psys->result__phase_sd0 = pdata->VL53L1_p_014;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	819a      	strh	r2, [r3, #12]

			psys->result__final_crosstalk_corrected_range_mm_sd0 =
					(uint16_t)pdata->median_range_mm;
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800c9b8:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd0 =
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	81da      	strh	r2, [r3, #14]

			psys->result__phase_sd1  = pdata->zero_distance_phase;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	8a9a      	ldrh	r2, [r3, #20]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	841a      	strh	r2, [r3, #32]

			pcore->result_core__ranging_total_events_sd0 =
					pdata->VL53L1_p_021;
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd0 =
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	605a      	str	r2, [r3, #4]
			pcore->result_core__signal_total_events_sd0 =
					pdata->VL53L1_p_013;
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd0 =
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	609a      	str	r2, [r3, #8]
			pcore->result_core__total_periods_elapsed_sd0 =
					pdata->total_periods_elapsed;
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd0 =
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	60da      	str	r2, [r3, #12]
			pcore->result_core__ambient_window_events_sd0 =
					pdata->VL53L1_p_020;
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd0 =
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	601a      	str	r2, [r3, #0]

			break;
 800c9e6:	e02b      	b.n	800ca40 <VL53L1_hist_copy_results_to_sys_and_core+0x116>
		case 1:
			psys->result__dss_actual_effective_spads_sd1 =
				pdata->VL53L1_p_006;
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	8ada      	ldrh	r2, [r3, #22]
			psys->result__dss_actual_effective_spads_sd1 =
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	831a      	strh	r2, [r3, #24]
			psys->result__peak_signal_count_rate_mcps_sd1 =
				pdata->peak_signal_count_rate_mcps;
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
			psys->result__peak_signal_count_rate_mcps_sd1 =
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	835a      	strh	r2, [r3, #26]
			psys->result__ambient_count_rate_mcps_sd1 =
				pdata->ambient_count_rate_mcps;
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
			psys->result__ambient_count_rate_mcps_sd1 =
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	839a      	strh	r2, [r3, #28]

			psys->result__sigma_sd1 = pdata->VL53L1_p_005;
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	83da      	strh	r2, [r3, #30]
			psys->result__phase_sd1 = pdata->VL53L1_p_014;
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	841a      	strh	r2, [r3, #32]

			psys->result__final_crosstalk_corrected_range_mm_sd1 =
				(uint16_t)pdata->median_range_mm;
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800ca18:	b29a      	uxth	r2, r3
			psys->result__final_crosstalk_corrected_range_mm_sd1 =
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	845a      	strh	r2, [r3, #34]	; 0x22

			pcore->result_core__ranging_total_events_sd1 =
				pdata->VL53L1_p_021;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
			pcore->result_core__ranging_total_events_sd1 =
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	615a      	str	r2, [r3, #20]
			pcore->result_core__signal_total_events_sd1 =
				pdata->VL53L1_p_013;
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			pcore->result_core__signal_total_events_sd1 =
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	619a      	str	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
				pdata->total_periods_elapsed;
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	699a      	ldr	r2, [r3, #24]
			pcore->result_core__total_periods_elapsed_sd1 =
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	61da      	str	r2, [r3, #28]
			pcore->result_core__ambient_window_events_sd1 =
				pdata->VL53L1_p_020;
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
			pcore->result_core__ambient_window_events_sd1 =
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	611a      	str	r2, [r3, #16]
			break;
 800ca3e:	bf00      	nop
		}

		pdata++;
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	334c      	adds	r3, #76	; 0x4c
 800ca44:	613b      	str	r3, [r7, #16]
	for (i = 0; i < phist->active_results; i++) {
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	75fb      	strb	r3, [r7, #23]
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	7c9b      	ldrb	r3, [r3, #18]
 800ca50:	7dfa      	ldrb	r2, [r7, #23]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d38e      	bcc.n	800c974 <VL53L1_hist_copy_results_to_sys_and_core+0x4a>
	}

	LOG_FUNCTION_END(0);

}
 800ca56:	bf00      	nop
 800ca58:	bf00      	nop
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <VL53L1_save_cfg_data>:
}


VL53L1_Error VL53L1_save_cfg_data(
	VL53L1_DEV  Dev)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b089      	sub	sp, #36	; 0x24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	3318      	adds	r3, #24
 800ca70:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800ca78:	3308      	adds	r3, #8
 800ca7a:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_zone_private_dyn_cfg_t *pzone_dyn_cfg;
	VL53L1_dynamic_config_t       *pdynamic = &(pdev->dyn_cfg);
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	f503 7364 	add.w	r3, r3, #912	; 0x390
 800ca82:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pzone_dyn_cfg =
		&(pres->zone_dyn_cfgs.VL53L1_p_002[pdev->ll_state.cfg_zone_id]);
 800ca84:	69bb      	ldr	r3, [r7, #24]
 800ca86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ca8a:	461a      	mov	r2, r3
	pzone_dyn_cfg =
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	4413      	add	r3, r2
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800ca98:	697a      	ldr	r2, [r7, #20]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	3302      	adds	r3, #2
 800ca9e:	60fb      	str	r3, [r7, #12]

	pzone_dyn_cfg->expected_stream_count =
			pdev->ll_state.cfg_stream_count;
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
	pzone_dyn_cfg->expected_stream_count =
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	701a      	strb	r2, [r3, #0]

	pzone_dyn_cfg->expected_gph_id =
			pdev->ll_state.cfg_gph_id;
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
	pzone_dyn_cfg->expected_gph_id =
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	705a      	strb	r2, [r3, #1]

	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
		pdynamic->roi_config__user_roi_centre_spad;
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	7bda      	ldrb	r2, [r3, #15]
	pzone_dyn_cfg->roi_config__user_roi_centre_spad =
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	721a      	strb	r2, [r3, #8]

	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
		pdynamic->roi_config__user_roi_requested_global_xy_size;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	7c1a      	ldrb	r2, [r3, #16]
	pzone_dyn_cfg->roi_config__user_roi_requested_global_xy_size =
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	725a      	strb	r2, [r3, #9]

	LOG_FUNCTION_END(status);

	return status;
 800cac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3724      	adds	r7, #36	; 0x24
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <VL53L1_dynamic_zone_update>:


VL53L1_Error VL53L1_dynamic_zone_update(
	VL53L1_DEV  Dev,
	VL53L1_range_results_t *presults)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b08b      	sub	sp, #44	; 0x2c
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cade:	2300      	movs	r3, #0
 800cae0:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t  *pdev =
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	3318      	adds	r3, #24
 800cae6:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t  *pres =
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800caee:	3308      	adds	r3, #8
 800caf0:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);
	VL53L1_zone_private_dyn_cfgs_t *pZ = &(pres->zone_dyn_cfgs);
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800caf8:	613b      	str	r3, [r7, #16]

	uint8_t   zone_id = pdev->ll_state.rd_zone_id;
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cb00:	73fb      	strb	r3, [r7, #15]
	uint8_t   i;
	uint16_t  max_total_rate_per_spads;
	uint16_t  target_rate =
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 800cb08:	81bb      	strh	r3, [r7, #12]
		pdev->stat_cfg.dss_config__target_total_rate_mcps;
	uint32_t  temp = 0xFFFF;
 800cb0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb0e:	623b      	str	r3, [r7, #32]
		pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count;
#endif

	LOG_FUNCTION_START("");

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count = 0;
 800cb10:	7bfa      	ldrb	r2, [r7, #15]
 800cb12:	6939      	ldr	r1, [r7, #16]
 800cb14:	4613      	mov	r3, r2
 800cb16:	009b      	lsls	r3, r3, #2
 800cb18:	4413      	add	r3, r2
 800cb1a:	005b      	lsls	r3, r3, #1
 800cb1c:	440b      	add	r3, r1
 800cb1e:	3306      	adds	r3, #6
 800cb20:	2200      	movs	r2, #0
 800cb22:	801a      	strh	r2, [r3, #0]

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: active results: %u\n",
		presults->active_results);

	max_total_rate_per_spads =
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800cb2a:	84bb      	strh	r3, [r7, #36]	; 0x24

	trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"    DYNZONEUPDATE: max total rate per spad at start: %u\n",
		max_total_rate_per_spads);

	for (i = 1; i < presults->active_results; i++) {
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb32:	e01a      	b.n	800cb6a <VL53L1_dynamic_zone_update+0x96>

		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
		"total rate per spad: %u\n",
		presults->VL53L1_p_002[i].total_rate_per_spad_mcps);

		if (presults->VL53L1_p_002[i].total_rate_per_spad_mcps >
 800cb34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb38:	683a      	ldr	r2, [r7, #0]
 800cb3a:	214c      	movs	r1, #76	; 0x4c
 800cb3c:	fb01 f303 	mul.w	r3, r1, r3
 800cb40:	4413      	add	r3, r2
 800cb42:	334a      	adds	r3, #74	; 0x4a
 800cb44:	881b      	ldrh	r3, [r3, #0]
 800cb46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d209      	bcs.n	800cb60 <VL53L1_dynamic_zone_update+0x8c>
			max_total_rate_per_spads)
			max_total_rate_per_spads =
			presults->VL53L1_p_002[i].total_rate_per_spad_mcps;
 800cb4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
			max_total_rate_per_spads =
 800cb50:	683a      	ldr	r2, [r7, #0]
 800cb52:	214c      	movs	r1, #76	; 0x4c
 800cb54:	fb01 f303 	mul.w	r3, r1, r3
 800cb58:	4413      	add	r3, r2
 800cb5a:	334a      	adds	r3, #74	; 0x4a
 800cb5c:	881b      	ldrh	r3, [r3, #0]
 800cb5e:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (i = 1; i < presults->active_results; i++) {
 800cb60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb64:	3301      	adds	r3, #1
 800cb66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	7c9b      	ldrb	r3, [r3, #18]
 800cb6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d3de      	bcc.n	800cb34 <VL53L1_dynamic_zone_update+0x60>

	}

	if (max_total_rate_per_spads == 0) {
 800cb76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d103      	bne.n	800cb84 <VL53L1_dynamic_zone_update+0xb0>

		temp = 0xFFFF;
 800cb7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb80:	623b      	str	r3, [r7, #32]
 800cb82:	e00e      	b.n	800cba2 <VL53L1_dynamic_zone_update+0xce>
	} else {

		temp = target_rate << 14;
 800cb84:	89bb      	ldrh	r3, [r7, #12]
 800cb86:	039b      	lsls	r3, r3, #14
 800cb88:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 1: temp: %u\n",
			temp);


		temp = temp / max_total_rate_per_spads;
 800cb8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb8c:	6a3a      	ldr	r2, [r7, #32]
 800cb8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb92:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 2: temp: %u\n",
			temp);


		if (temp > 0xFFFF)
 800cb94:	6a3b      	ldr	r3, [r7, #32]
 800cb96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb9a:	d302      	bcc.n	800cba2 <VL53L1_dynamic_zone_update+0xce>
			temp = 0xFFFF;
 800cb9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cba0:	623b      	str	r3, [r7, #32]
		trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"    DYNZONEUPDATE: 3: temp: %u\n",
			temp);
	}

	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800cba2:	7bfa      	ldrb	r2, [r7, #15]
			(uint16_t)temp;
 800cba4:	6a3b      	ldr	r3, [r7, #32]
 800cba6:	b298      	uxth	r0, r3
	pZ->VL53L1_p_002[zone_id].dss_requested_effective_spad_count =
 800cba8:	6939      	ldr	r1, [r7, #16]
 800cbaa:	4613      	mov	r3, r2
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	4413      	add	r3, r2
 800cbb0:	005b      	lsls	r3, r3, #1
 800cbb2:	440b      	add	r3, r1
 800cbb4:	3306      	adds	r3, #6
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	801a      	strh	r2, [r3, #0]
		max_total_rate_per_spads,
		eff_spad_cnt);

	LOG_FUNCTION_END(status);

	return status;
 800cbba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	372c      	adds	r7, #44	; 0x2c
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr

0800cbca <VL53L1_multizone_hist_bins_update>:

VL53L1_Error VL53L1_multizone_hist_bins_update(
	VL53L1_DEV  Dev)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b08a      	sub	sp, #40	; 0x28
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3318      	adds	r3, #24
 800cbdc:	623b      	str	r3, [r7, #32]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	332c      	adds	r3, #44	; 0x2c
 800cbe2:	61fb      	str	r3, [r7, #28]
	VL53L1_zone_config_t *pzone_cfg = &(pdev->zone_cfg);
 800cbe4:	6a3b      	ldr	r3, [r7, #32]
 800cbe6:	33c2      	adds	r3, #194	; 0xc2
 800cbe8:	61bb      	str	r3, [r7, #24]
	VL53L1_histogram_config_t *phist_cfg = &(pdev->hist_cfg);
 800cbea:	6a3b      	ldr	r3, [r7, #32]
 800cbec:	f503 734a 	add.w	r3, r3, #808	; 0x328
 800cbf0:	617b      	str	r3, [r7, #20]
	VL53L1_histogram_config_t *pmulti_hist =
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	3302      	adds	r3, #2
 800cbf6:	613b      	str	r3, [r7, #16]
			&(pzone_cfg->multizone_hist_cfg);

	uint8_t   next_range_is_odd_timing = (pstate->cfg_stream_count) % 2;
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	785b      	ldrb	r3, [r3, #1]
 800cbfc:	f003 0301 	and.w	r3, r3, #1
 800cc00:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800cc02:	6a3b      	ldr	r3, [r7, #32]
 800cc04:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cc08:	461a      	mov	r2, r3
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cc12:	2b01      	cmp	r3, #1
 800cc14:	d11e      	bne.n	800cc54 <VL53L1_multizone_hist_bins_update+0x8a>
		VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		if (!next_range_is_odd_timing) {
 800cc16:	7bfb      	ldrb	r3, [r7, #15]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d10b      	bne.n	800cc34 <VL53L1_multizone_hist_bins_update+0x6a>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting LOWAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cc24:	693b      	ldr	r3, [r7, #16]
 800cc26:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d05d      	beq.n	800ccf6 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting LOWAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	785a      	ldrb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	789a      	ldrb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	78da      	ldrb	r2, [r3, #3]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	719a      	strb	r2, [r3, #6]
 800cc52:	e050      	b.n	800ccf6 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800cc54:	6a3b      	ldr	r3, [r7, #32]
 800cc56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	69bb      	ldr	r3, [r7, #24]
 800cc5e:	4413      	add	r3, r2
 800cc60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cc64:	2b02      	cmp	r3, #2
 800cc66:	d11e      	bne.n	800cca6 <VL53L1_multizone_hist_bins_update+0xdc>
		VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB timing\n");
		if (!next_range_is_odd_timing) {
 800cc68:	7bfb      	ldrb	r3, [r7, #15]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d10b      	bne.n	800cc86 <VL53L1_multizone_hist_bins_update+0xbc>
			trace_print(VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting MIDAMB EVEN timing\n");
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800cc7e:	693b      	ldr	r3, [r7, #16]
 800cc80:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800cc86:	7bfb      	ldrb	r3, [r7, #15]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d034      	beq.n	800ccf6 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting MIDAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	79da      	ldrb	r2, [r3, #7]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	7a1a      	ldrb	r2, [r3, #8]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	7a5a      	ldrb	r2, [r3, #9]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800cca0:	697b      	ldr	r3, [r7, #20]
 800cca2:	719a      	strb	r2, [r3, #6]
 800cca4:	e027      	b.n	800ccf6 <VL53L1_multizone_hist_bins_update+0x12c>
		}
	} else if (pzone_cfg->bin_config[pdev->ll_state.cfg_zone_id] ==
 800cca6:	6a3b      	ldr	r3, [r7, #32]
 800cca8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ccac:	461a      	mov	r2, r3
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ccb6:	2b03      	cmp	r3, #3
 800ccb8:	d11d      	bne.n	800ccf6 <VL53L1_multizone_hist_bins_update+0x12c>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		if (!next_range_is_odd_timing) {
 800ccba:	7bfb      	ldrb	r3, [r7, #15]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d10b      	bne.n	800ccd8 <VL53L1_multizone_hist_bins_update+0x10e>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"    HISTBINCONFIGUPDATE: Setting HIGHAMB EVEN timing\n"
					);
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	705a      	strb	r2, [r3, #1]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	709a      	strb	r2, [r3, #2]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	70da      	strb	r2, [r3, #3]
		}

		if (next_range_is_odd_timing) {
 800ccd8:	7bfb      	ldrb	r3, [r7, #15]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00b      	beq.n	800ccf6 <VL53L1_multizone_hist_bins_update+0x12c>
			trace_print (VL53L1_TRACE_LEVEL_DEBUG,
			"   HISTBINCONFIGUPDATE: Setting HIGHAMB ODD timing\n");
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	7bda      	ldrb	r2, [r3, #15]
			phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	711a      	strb	r2, [r3, #4]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	7c1a      	ldrb	r2, [r3, #16]
			phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	715a      	strb	r2, [r3, #5]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	7c5a      	ldrb	r2, [r3, #17]
			phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	719a      	strb	r2, [r3, #6]
		}
	}



	if (status == VL53L1_ERROR_NONE) {
 800ccf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d109      	bne.n	800cd12 <VL53L1_multizone_hist_bins_update+0x148>
		VL53L1_copy_hist_bins_to_static_cfg(
 800ccfe:	6a3b      	ldr	r3, [r7, #32]
 800cd00:	f203 3142 	addw	r1, r3, #834	; 0x342
 800cd04:	6a3b      	ldr	r3, [r7, #32]
 800cd06:	f503 735e 	add.w	r3, r3, #888	; 0x378
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	6978      	ldr	r0, [r7, #20]
 800cd0e:	f7fd f921 	bl	8009f54 <VL53L1_copy_hist_bins_to_static_cfg>
			&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800cd12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3728      	adds	r7, #40	; 0x28
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <VL53L1_update_internal_stream_counters>:
VL53L1_Error VL53L1_update_internal_stream_counters(
	VL53L1_DEV  Dev,
	uint8_t     external_stream_count,
	uint8_t    *pinternal_stream_count,
	uint8_t    *pinternal_stream_count_val)
{
 800cd1e:	b480      	push	{r7}
 800cd20:	b089      	sub	sp, #36	; 0x24
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	60f8      	str	r0, [r7, #12]
 800cd26:	607a      	str	r2, [r7, #4]
 800cd28:	603b      	str	r3, [r7, #0]
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	72fb      	strb	r3, [r7, #11]

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	77fb      	strb	r3, [r7, #31]
	uint8_t stream_divider;

	VL53L1_LLDriverData_t  *pdev =
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	3318      	adds	r3, #24
 800cd36:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	stream_divider = pdev->gen_cfg.global_config__stream_divider;
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	f893 3363 	ldrb.w	r3, [r3, #867]	; 0x363
 800cd3e:	75fb      	strb	r3, [r7, #23]

	if (stream_divider == 0) {
 800cd40:	7dfb      	ldrb	r3, [r7, #23]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d103      	bne.n	800cd4e <VL53L1_update_internal_stream_counters+0x30>


		*pinternal_stream_count = external_stream_count;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	7afa      	ldrb	r2, [r7, #11]
 800cd4a:	701a      	strb	r2, [r3, #0]
 800cd4c:	e01e      	b.n	800cd8c <VL53L1_update_internal_stream_counters+0x6e>

	} else if (*pinternal_stream_count_val == (stream_divider-1)) {
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	461a      	mov	r2, r3
 800cd54:	7dfb      	ldrb	r3, [r7, #23]
 800cd56:	3b01      	subs	r3, #1
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d111      	bne.n	800cd80 <VL53L1_update_internal_stream_counters+0x62>


		if (*pinternal_stream_count == 0xFF)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2bff      	cmp	r3, #255	; 0xff
 800cd62:	d103      	bne.n	800cd6c <VL53L1_update_internal_stream_counters+0x4e>
			*pinternal_stream_count = 0x80;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2280      	movs	r2, #128	; 0x80
 800cd68:	701a      	strb	r2, [r3, #0]
 800cd6a:	e005      	b.n	800cd78 <VL53L1_update_internal_stream_counters+0x5a>
		else
			*pinternal_stream_count = *pinternal_stream_count + 1;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	3301      	adds	r3, #1
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	701a      	strb	r2, [r3, #0]


		*pinternal_stream_count_val = 0;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	701a      	strb	r2, [r3, #0]
 800cd7e:	e005      	b.n	800cd8c <VL53L1_update_internal_stream_counters+0x6e>

	} else {


		*pinternal_stream_count_val = *pinternal_stream_count_val + 1;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	3301      	adds	r3, #1
 800cd86:	b2da      	uxtb	r2, r3
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	701a      	strb	r2, [r3, #0]
		*pinternal_stream_count_val,
		stream_divider);

	LOG_FUNCTION_END(status);

	return status;
 800cd8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3724      	adds	r7, #36	; 0x24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9a:	4770      	bx	lr

0800cd9c <VL53L1_set_histogram_multizone_initial_bin_config>:

VL53L1_Error VL53L1_set_histogram_multizone_initial_bin_config(
	VL53L1_zone_config_t		*pzone_cfg,
	VL53L1_histogram_config_t	*phist_cfg,
	VL53L1_histogram_config_t	*pmulti_hist)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b087      	sub	sp, #28
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	60b9      	str	r1, [r7, #8]
 800cda6:	607a      	str	r2, [r7, #4]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");


	if (pzone_cfg->bin_config[0] ==
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d118      	bne.n	800cde8 <VL53L1_set_histogram_multizone_initial_bin_config+0x4c>
			VL53L1_ZONECONFIG_BINCONFIG__LOWAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__low_amb_even_bin_0_1;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	785a      	ldrb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__low_amb_even_bin_2_3;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	789a      	ldrb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__low_amb_even_bin_4_5;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	78da      	ldrb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	719a      	strb	r2, [r3, #6]
 800cde6:	e03a      	b.n	800ce5e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cdee:	2b02      	cmp	r3, #2
 800cdf0:	d118      	bne.n	800ce24 <VL53L1_set_histogram_multizone_initial_bin_config+0x88>
			VL53L1_ZONECONFIG_BINCONFIG__MIDAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	70da      	strb	r2, [r3, #3]

		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__mid_amb_even_bin_0_1;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	79da      	ldrb	r2, [r3, #7]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__mid_amb_even_bin_2_3;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	7a1a      	ldrb	r2, [r3, #8]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__mid_amb_even_bin_4_5;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	7a5a      	ldrb	r2, [r3, #9]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	719a      	strb	r2, [r3, #6]
 800ce22:	e01c      	b.n	800ce5e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
	} else if (pzone_cfg->bin_config[0] ==
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ce2a:	2b03      	cmp	r3, #3
 800ce2c:	d117      	bne.n	800ce5e <VL53L1_set_histogram_multizone_initial_bin_config+0xc2>
			VL53L1_ZONECONFIG_BINCONFIG__HIGHAMB) {
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_even_bin_0_1  =
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	705a      	strb	r2, [r3, #1]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_even_bin_2_3  =
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	709a      	strb	r2, [r3, #2]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_even_bin_4_5  =
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	70da      	strb	r2, [r3, #3]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
			pmulti_hist->histogram_config__high_amb_even_bin_0_1;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	7bda      	ldrb	r2, [r3, #15]
		phist_cfg->histogram_config__low_amb_odd_bin_0_1  =
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	711a      	strb	r2, [r3, #4]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
			pmulti_hist->histogram_config__high_amb_even_bin_2_3;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	7c1a      	ldrb	r2, [r3, #16]
		phist_cfg->histogram_config__low_amb_odd_bin_2_3  =
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	715a      	strb	r2, [r3, #5]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
			pmulti_hist->histogram_config__high_amb_even_bin_4_5;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	7c5a      	ldrb	r2, [r3, #17]
		phist_cfg->histogram_config__low_amb_odd_bin_4_5  =
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	719a      	strb	r2, [r3, #6]
	}

	LOG_FUNCTION_END(status);
	return status;
 800ce5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	371c      	adds	r7, #28
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr

0800ce6e <VL53L1_set_ref_spad_char_config>:
	uint32_t      phasecal_timeout_us,
	uint16_t      total_rate_target_mcps,
	uint16_t      max_count_rate_rtn_limit_mcps,
	uint16_t      min_count_rate_rtn_limit_mcps,
	uint16_t      fast_osc_frequency)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b08a      	sub	sp, #40	; 0x28
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	60f8      	str	r0, [r7, #12]
 800ce76:	607a      	str	r2, [r7, #4]
 800ce78:	461a      	mov	r2, r3
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	72fb      	strb	r3, [r7, #11]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	813b      	strh	r3, [r7, #8]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ce82:	2300      	movs	r3, #0
 800ce84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	3318      	adds	r3, #24
 800ce8c:	61fb      	str	r3, [r7, #28]

	uint8_t buffer[2];

	uint32_t macro_period_us = 0;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	623b      	str	r3, [r7, #32]
	uint32_t timeout_mclks   = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");


	macro_period_us =
		VL53L1_calc_macro_period_us(
 800ce96:	7afa      	ldrb	r2, [r7, #11]
 800ce98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe f8ca 	bl	800b036 <VL53L1_calc_macro_period_us>
 800cea2:	6238      	str	r0, [r7, #32]
			fast_osc_frequency,
			vcsel_period_a);
	if (macro_period_us == 0)
 800cea4:	6a3b      	ldr	r3, [r7, #32]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d101      	bne.n	800ceae <VL53L1_set_ref_spad_char_config+0x40>
		macro_period_us = 1;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	623b      	str	r3, [r7, #32]



	timeout_mclks = phasecal_timeout_us << 12;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	031b      	lsls	r3, r3, #12
 800ceb2:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks + (macro_period_us>>1);
 800ceb4:	6a3b      	ldr	r3, [r7, #32]
 800ceb6:	085b      	lsrs	r3, r3, #1
 800ceb8:	69ba      	ldr	r2, [r7, #24]
 800ceba:	4413      	add	r3, r2
 800cebc:	61bb      	str	r3, [r7, #24]
	timeout_mclks = timeout_mclks / macro_period_us;
 800cebe:	69ba      	ldr	r2, [r7, #24]
 800cec0:	6a3b      	ldr	r3, [r7, #32]
 800cec2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cec6:	61bb      	str	r3, [r7, #24]

	if (timeout_mclks > 0xFF)
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	2bff      	cmp	r3, #255	; 0xff
 800cecc:	d904      	bls.n	800ced8 <VL53L1_set_ref_spad_char_config+0x6a>
		pdev->gen_cfg.phasecal_config__timeout_macrop = 0xFF;
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	22ff      	movs	r2, #255	; 0xff
 800ced2:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369
 800ced6:	e004      	b.n	800cee2 <VL53L1_set_ref_spad_char_config+0x74>
	else
		pdev->gen_cfg.phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800ced8:	69bb      	ldr	r3, [r7, #24]
 800ceda:	b2da      	uxtb	r2, r3
		pdev->gen_cfg.phasecal_config__timeout_macrop =
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	f883 2369 	strb.w	r2, [r3, #873]	; 0x369

	pdev->tim_cfg.range_config__vcsel_period_a = vcsel_period_a;
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	7afa      	ldrb	r2, [r7, #11]
 800cee6:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e



	if (status == VL53L1_ERROR_NONE)
 800ceea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d10a      	bne.n	800cf08 <VL53L1_set_ref_spad_char_config+0x9a>
		status =
			VL53L1_WrByte(
 800cef2:	69fb      	ldr	r3, [r7, #28]
 800cef4:	f893 3369 	ldrb.w	r3, [r3, #873]	; 0x369
 800cef8:	461a      	mov	r2, r3
 800cefa:	214b      	movs	r1, #75	; 0x4b
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f007 f9bd 	bl	801427c <VL53L1_WrByte>
 800cf02:	4603      	mov	r3, r0
 800cf04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_PHASECAL_CONFIG__TIMEOUT_MACROP,
				pdev->gen_cfg.phasecal_config__timeout_macrop);

	if (status == VL53L1_ERROR_NONE)
 800cf08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d10a      	bne.n	800cf26 <VL53L1_set_ref_spad_char_config+0xb8>
		status =
			VL53L1_WrByte(
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800cf16:	461a      	mov	r2, r3
 800cf18:	2160      	movs	r1, #96	; 0x60
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f007 f9ae 	bl	801427c <VL53L1_WrByte>
 800cf20:	4603      	mov	r3, r0
 800cf22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L1_RANGE_CONFIG__VCSEL_PERIOD_A,
				pdev->tim_cfg.range_config__vcsel_period_a);



	buffer[0] = pdev->tim_cfg.range_config__vcsel_period_a;
 800cf26:	69fb      	ldr	r3, [r7, #28]
 800cf28:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800cf2c:	753b      	strb	r3, [r7, #20]
	buffer[1] = pdev->tim_cfg.range_config__vcsel_period_a;
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 800cf34:	757b      	strb	r3, [r7, #21]

	if (status == VL53L1_ERROR_NONE)
 800cf36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d109      	bne.n	800cf52 <VL53L1_set_ref_spad_char_config+0xe4>
		status =
			VL53L1_WriteMulti(
 800cf3e:	f107 0214 	add.w	r2, r7, #20
 800cf42:	2302      	movs	r3, #2
 800cf44:	2178      	movs	r1, #120	; 0x78
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f007 f92c 	bl	80141a4 <VL53L1_WriteMulti>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				buffer,
				2);



	pdev->customer.ref_spad_char__total_rate_target_mcps =
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	893a      	ldrh	r2, [r7, #8]
 800cf56:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			total_rate_target_mcps;

	if (status == VL53L1_ERROR_NONE)
 800cf5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d108      	bne.n	800cf74 <VL53L1_set_ref_spad_char_config+0x106>
		status =
			VL53L1_WrWord(
 800cf62:	893b      	ldrh	r3, [r7, #8]
 800cf64:	461a      	mov	r2, r3
 800cf66:	211c      	movs	r1, #28
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f007 f9b1 	bl	80142d0 <VL53L1_WrWord>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS,
				total_rate_target_mcps);

	if (status == VL53L1_ERROR_NONE)
 800cf74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d108      	bne.n	800cf8e <VL53L1_set_ref_spad_char_config+0x120>
		status =
			VL53L1_WrWord(
 800cf7c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cf7e:	461a      	mov	r2, r3
 800cf80:	2164      	movs	r1, #100	; 0x64
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f007 f9a4 	bl	80142d0 <VL53L1_WrWord>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				VL53L1_RANGE_CONFIG__SIGMA_THRESH,
				max_count_rate_rtn_limit_mcps);

	if (status == VL53L1_ERROR_NONE)
 800cf8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d108      	bne.n	800cfa8 <VL53L1_set_ref_spad_char_config+0x13a>
		status =
			VL53L1_WrWord(
 800cf96:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cf98:	461a      	mov	r2, r3
 800cf9a:	2166      	movs	r1, #102	; 0x66
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f007 f997 	bl	80142d0 <VL53L1_WrWord>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L1_RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS,
			min_count_rate_rtn_limit_mcps);

	LOG_FUNCTION_END(status);

	return status;
 800cfa8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3728      	adds	r7, #40	; 0x28
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <VL53L1_dynamic_xtalk_correction_calc_required_samples>:


VL53L1_Error VL53L1_dynamic_xtalk_correction_calc_required_samples(
	VL53L1_DEV                          Dev
	)
{
 800cfb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfb8:	b0a2      	sub	sp, #136	; 0x88
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	64f8      	str	r0, [r7, #76]	; 0x4c



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cfc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfc6:	3318      	adds	r3, #24
 800cfc8:	673b      	str	r3, [r7, #112]	; 0x70
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800cfca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfcc:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	66fb      	str	r3, [r7, #108]	; 0x6c
	VL53L1_smudge_corrector_config_t *pconfig =
 800cfd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfd6:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800cfda:	3318      	adds	r3, #24
 800cfdc:	66bb      	str	r3, [r7, #104]	; 0x68
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800cfde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfe0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800cfe4:	667b      	str	r3, [r7, #100]	; 0x64
				&(pdev->smudge_corrector_internals);

	VL53L1_range_results_t *presults = &(pres->range_results);
 800cfe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfe8:	663b      	str	r3, [r7, #96]	; 0x60
	VL53L1_range_data_t *pxmonitor = &(presults->xmonitor);
 800cfea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cfec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cff0:	65fb      	str	r3, [r7, #92]	; 0x5c

	uint32_t peak_duration_us = pxmonitor->peak_duration_us;
 800cff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cff4:	69db      	ldr	r3, [r3, #28]
 800cff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint64_t temp64a;
	uint64_t temp64z;

	LOG_FUNCTION_START("");

	if (peak_duration_us == 0)
 800cffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d103      	bne.n	800d00a <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x56>
		peak_duration_us = 1000;
 800d002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	temp64a = pxmonitor->VL53L1_p_021 +
 800d00a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d00c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		pxmonitor->VL53L1_p_020;
 800d00e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	temp64a = pxmonitor->VL53L1_p_021 +
 800d012:	4413      	add	r3, r2
 800d014:	2200      	movs	r2, #0
 800d016:	461c      	mov	r4, r3
 800d018:	4615      	mov	r5, r2
 800d01a:	e9c7 4514 	strd	r4, r5, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d01e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d022:	4622      	mov	r2, r4
 800d024:	462b      	mov	r3, r5
 800d026:	f04f 0000 	mov.w	r0, #0
 800d02a:	f04f 0100 	mov.w	r1, #0
 800d02e:	0159      	lsls	r1, r3, #5
 800d030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d034:	0150      	lsls	r0, r2, #5
 800d036:	4602      	mov	r2, r0
 800d038:	460b      	mov	r3, r1
 800d03a:	ebb2 0804 	subs.w	r8, r2, r4
 800d03e:	eb63 0905 	sbc.w	r9, r3, r5
 800d042:	f04f 0200 	mov.w	r2, #0
 800d046:	f04f 0300 	mov.w	r3, #0
 800d04a:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d04e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800d052:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d056:	4690      	mov	r8, r2
 800d058:	4699      	mov	r9, r3
 800d05a:	eb18 0304 	adds.w	r3, r8, r4
 800d05e:	633b      	str	r3, [r7, #48]	; 0x30
 800d060:	eb49 0305 	adc.w	r3, r9, r5
 800d064:	637b      	str	r3, [r7, #52]	; 0x34
 800d066:	f04f 0200 	mov.w	r2, #0
 800d06a:	f04f 0300 	mov.w	r3, #0
 800d06e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d072:	4629      	mov	r1, r5
 800d074:	00cb      	lsls	r3, r1, #3
 800d076:	4621      	mov	r1, r4
 800d078:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d07c:	4621      	mov	r1, r4
 800d07e:	00ca      	lsls	r2, r1, #3
 800d080:	4610      	mov	r0, r2
 800d082:	4619      	mov	r1, r3
 800d084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d088:	2200      	movs	r2, #0
 800d08a:	643b      	str	r3, [r7, #64]	; 0x40
 800d08c:	647a      	str	r2, [r7, #68]	; 0x44
 800d08e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d092:	f7f3 f915 	bl	80002c0 <__aeabi_uldivmod>
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = do_division_u((temp64a * 1000), peak_duration_us);
 800d09e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d0a2:	4622      	mov	r2, r4
 800d0a4:	462b      	mov	r3, r5
 800d0a6:	f04f 0000 	mov.w	r0, #0
 800d0aa:	f04f 0100 	mov.w	r1, #0
 800d0ae:	0159      	lsls	r1, r3, #5
 800d0b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d0b4:	0150      	lsls	r0, r2, #5
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	ebb2 0a04 	subs.w	sl, r2, r4
 800d0be:	eb63 0b05 	sbc.w	fp, r3, r5
 800d0c2:	f04f 0200 	mov.w	r2, #0
 800d0c6:	f04f 0300 	mov.w	r3, #0
 800d0ca:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d0ce:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 800d0d2:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d0d6:	4692      	mov	sl, r2
 800d0d8:	469b      	mov	fp, r3
 800d0da:	eb1a 0304 	adds.w	r3, sl, r4
 800d0de:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0e0:	eb4b 0305 	adc.w	r3, fp, r5
 800d0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0e6:	f04f 0200 	mov.w	r2, #0
 800d0ea:	f04f 0300 	mov.w	r3, #0
 800d0ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	00cb      	lsls	r3, r1, #3
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d0fc:	4621      	mov	r1, r4
 800d0fe:	00ca      	lsls	r2, r1, #3
 800d100:	4610      	mov	r0, r2
 800d102:	4619      	mov	r1, r3
 800d104:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d108:	2200      	movs	r2, #0
 800d10a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d10c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d10e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d112:	f7f3 f8d5 	bl	80002c0 <__aeabi_uldivmod>
 800d116:	4602      	mov	r2, r0
 800d118:	460b      	mov	r3, r1
 800d11a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	temp64z = pconfig->noise_margin * pxmonitor->VL53L1_p_006;
 800d11e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d120:	689b      	ldr	r3, [r3, #8]
 800d122:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d124:	8ad2      	ldrh	r2, [r2, #22]
 800d126:	fb02 f303 	mul.w	r3, r2, r3
 800d12a:	2200      	movs	r2, #0
 800d12c:	623b      	str	r3, [r7, #32]
 800d12e:	627a      	str	r2, [r7, #36]	; 0x24
 800d130:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d134:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	if (temp64z == 0)
 800d138:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d13c:	4313      	orrs	r3, r2
 800d13e:	d105      	bne.n	800d14c <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x198>
		temp64z = 1;
 800d140:	f04f 0201 	mov.w	r2, #1
 800d144:	f04f 0300 	mov.w	r3, #0
 800d148:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	temp64a = temp64a * 1000 * 256;
 800d14c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	f04f 0400 	mov.w	r4, #0
 800d158:	f04f 0500 	mov.w	r5, #0
 800d15c:	015d      	lsls	r5, r3, #5
 800d15e:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d162:	0154      	lsls	r4, r2, #5
 800d164:	4622      	mov	r2, r4
 800d166:	462b      	mov	r3, r5
 800d168:	1a14      	subs	r4, r2, r0
 800d16a:	61bc      	str	r4, [r7, #24]
 800d16c:	eb63 0301 	sbc.w	r3, r3, r1
 800d170:	61fb      	str	r3, [r7, #28]
 800d172:	f04f 0200 	mov.w	r2, #0
 800d176:	f04f 0300 	mov.w	r3, #0
 800d17a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800d17e:	464c      	mov	r4, r9
 800d180:	00a3      	lsls	r3, r4, #2
 800d182:	4644      	mov	r4, r8
 800d184:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d188:	4644      	mov	r4, r8
 800d18a:	00a2      	lsls	r2, r4, #2
 800d18c:	4614      	mov	r4, r2
 800d18e:	461d      	mov	r5, r3
 800d190:	4623      	mov	r3, r4
 800d192:	181b      	adds	r3, r3, r0
 800d194:	613b      	str	r3, [r7, #16]
 800d196:	462b      	mov	r3, r5
 800d198:	eb41 0303 	adc.w	r3, r1, r3
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	f04f 0200 	mov.w	r2, #0
 800d1a2:	f04f 0300 	mov.w	r3, #0
 800d1a6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	02cb      	lsls	r3, r1, #11
 800d1ae:	4621      	mov	r1, r4
 800d1b0:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d1b4:	4621      	mov	r1, r4
 800d1b6:	02ca      	lsls	r2, r1, #11
 800d1b8:	461c      	mov	r4, r3
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d1c0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d1c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d1c8:	f7f3 f87a 	bl	80002c0 <__aeabi_uldivmod>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	temp64a = temp64a * 1000 * 256;
 800d1d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d1d8:	4602      	mov	r2, r0
 800d1da:	460b      	mov	r3, r1
 800d1dc:	f04f 0400 	mov.w	r4, #0
 800d1e0:	f04f 0500 	mov.w	r5, #0
 800d1e4:	015d      	lsls	r5, r3, #5
 800d1e6:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800d1ea:	0154      	lsls	r4, r2, #5
 800d1ec:	4622      	mov	r2, r4
 800d1ee:	462b      	mov	r3, r5
 800d1f0:	1a14      	subs	r4, r2, r0
 800d1f2:	60bc      	str	r4, [r7, #8]
 800d1f4:	eb63 0301 	sbc.w	r3, r3, r1
 800d1f8:	60fb      	str	r3, [r7, #12]
 800d1fa:	f04f 0200 	mov.w	r2, #0
 800d1fe:	f04f 0300 	mov.w	r3, #0
 800d202:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800d206:	464c      	mov	r4, r9
 800d208:	00a3      	lsls	r3, r4, #2
 800d20a:	4644      	mov	r4, r8
 800d20c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d210:	4644      	mov	r4, r8
 800d212:	00a2      	lsls	r2, r4, #2
 800d214:	4614      	mov	r4, r2
 800d216:	461d      	mov	r5, r3
 800d218:	4623      	mov	r3, r4
 800d21a:	181b      	adds	r3, r3, r0
 800d21c:	603b      	str	r3, [r7, #0]
 800d21e:	462b      	mov	r3, r5
 800d220:	eb41 0303 	adc.w	r3, r1, r3
 800d224:	607b      	str	r3, [r7, #4]
 800d226:	f04f 0200 	mov.w	r2, #0
 800d22a:	f04f 0300 	mov.w	r3, #0
 800d22e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d232:	4629      	mov	r1, r5
 800d234:	02cb      	lsls	r3, r1, #11
 800d236:	4621      	mov	r1, r4
 800d238:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800d23c:	4621      	mov	r1, r4
 800d23e:	02ca      	lsls	r2, r1, #11
 800d240:	461c      	mov	r4, r3
 800d242:	4613      	mov	r3, r2
 800d244:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	temp64a = do_division_u(temp64a, temp64z);
 800d248:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800d24c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800d250:	f7f3 f836 	bl	80002c0 <__aeabi_uldivmod>
 800d254:	4602      	mov	r2, r0
 800d256:	460b      	mov	r3, r1
 800d258:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	pint->required_samples = (uint32_t)temp64a;
 800d25c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d25e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d260:	605a      	str	r2, [r3, #4]


	if (pint->required_samples < 2)
 800d262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	2b01      	cmp	r3, #1
 800d268:	d802      	bhi.n	800d270 <VL53L1_dynamic_xtalk_correction_calc_required_samples+0x2bc>
		pint->required_samples = 2;
 800d26a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d26c:	2202      	movs	r2, #2
 800d26e:	605a      	str	r2, [r3, #4]

	LOG_FUNCTION_END(status);

	return status;
 800d270:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800d274:	4618      	mov	r0, r3
 800d276:	3788      	adds	r7, #136	; 0x88
 800d278:	46bd      	mov	sp, r7
 800d27a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800d280 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>:
	VL53L1_smudge_corrector_config_t	*pconfig,
	VL53L1_smudge_corrector_data_t		*pout,
	uint8_t					add_smudge,
	uint8_t					soft_update
	)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b096      	sub	sp, #88	; 0x58
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	603b      	str	r3, [r7, #0]



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d28e:	2300      	movs	r3, #0
 800d290:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	3318      	adds	r3, #24
 800d298:	637b      	str	r3, [r7, #52]	; 0x34
	int16_t  orig_y_gradient;
	uint8_t histo_merge_nb;
	uint8_t i;
	int32_t  itemp32;
	uint32_t SmudgeFactor;
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29c:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d2a0:	633b      	str	r3, [r7, #48]	; 0x30
	VL53L1_xtalk_calibration_results_t  *pC = &(pdev->xtalk_cal);
 800d2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a4:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800d2a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t incXtalk, cval;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ac:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d108      	bne.n	800d2c6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d2ba:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d101      	bne.n	800d2c6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x46>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e000      	b.n	800d2c8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x48>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		 VL53L1_PRESETMODE_RANGING);


	if (add_smudge == 1) {
 800d2cc:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d107      	bne.n	800d2e4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x64>
		pout->algo__crosstalk_compensation_plane_offset_kcps =
			(uint32_t)xtalk_offset_out +
			(uint32_t)pconfig->smudge_margin;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	889b      	ldrh	r3, [r3, #4]
 800d2d8:	461a      	mov	r2, r3
			(uint32_t)xtalk_offset_out +
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	441a      	add	r2, r3
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	609a      	str	r2, [r3, #8]
 800d2e2:	e002      	b.n	800d2ea <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x6a>
	} else {
		pout->algo__crosstalk_compensation_plane_offset_kcps =
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	68ba      	ldr	r2, [r7, #8]
 800d2e8:	609a      	str	r2, [r3, #8]
			(uint32_t)xtalk_offset_out;
	}


	orig_xtalk_offset =
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	689b      	ldr	r3, [r3, #8]
 800d2ee:	653b      	str	r3, [r7, #80]	; 0x50
	pX->nvm_default__crosstalk_compensation_plane_offset_kcps;

	orig_x_gradient =
 800d2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f2:	899b      	ldrh	r3, [r3, #12]
 800d2f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		pX->nvm_default__crosstalk_compensation_x_plane_gradient_kcps;

	orig_y_gradient =
 800d2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fa:	89db      	ldrh	r3, [r3, #14]
 800d2fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		pX->nvm_default__crosstalk_compensation_y_plane_gradient_kcps;

	if (((pconfig->user_scaler_set == 0) ||
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d306:	2b00      	cmp	r3, #0
 800d308:	d004      	beq.n	800d314 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x94>
		(pconfig->scaler_calc_method == 1)) &&
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if (((pconfig->user_scaler_set == 0) ||
 800d310:	2b01      	cmp	r3, #1
 800d312:	d125      	bne.n	800d360 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>
		(pC->algo__crosstalk_compensation_plane_offset_kcps != 0)) {
 800d314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d316:	681b      	ldr	r3, [r3, #0]
		(pconfig->scaler_calc_method == 1)) &&
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d021      	beq.n	800d360 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xe0>

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d31c:	f107 0313 	add.w	r3, r7, #19
 800d320:	4619      	mov	r1, r3
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f000 fe44 	bl	800dfb0 <VL53L1_compute_histo_merge_nb>
		if (histo_merge_nb == 0)
 800d328:	7cfb      	ldrb	r3, [r7, #19]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xb2>
			histo_merge_nb = 1;
 800d32e:	2301      	movs	r3, #1
 800d330:	74fb      	strb	r3, [r7, #19]
		if (!merge_enabled)
 800d332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d336:	2b00      	cmp	r3, #0
 800d338:	d103      	bne.n	800d342 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xc2>
			orig_xtalk_offset =
 800d33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	653b      	str	r3, [r7, #80]	; 0x50
 800d340:	e006      	b.n	800d350 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0xd0>
			pC->algo__crosstalk_compensation_plane_offset_kcps;
		else
			orig_xtalk_offset =
			pC->algo__xtalk_cpo_HistoMerge_kcps[histo_merge_nb-1];
 800d342:	7cfb      	ldrb	r3, [r7, #19]
 800d344:	1e5a      	subs	r2, r3, #1
			orig_xtalk_offset =
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	3202      	adds	r2, #2
 800d34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d34e:	653b      	str	r3, [r7, #80]	; 0x50

		orig_x_gradient =
 800d350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d352:	889b      	ldrh	r3, [r3, #4]
 800d354:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
			pC->algo__crosstalk_compensation_x_plane_gradient_kcps;

		orig_y_gradient =
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	88db      	ldrh	r3, [r3, #6]
 800d35c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			pC->algo__crosstalk_compensation_y_plane_gradient_kcps;
	}


	if ((pconfig->user_scaler_set == 0) && (orig_x_gradient == 0))
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d366:	2b00      	cmp	r3, #0
 800d368:	d10a      	bne.n	800d380 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
 800d36a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d106      	bne.n	800d380 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x100>
		pout->gradient_zero_flag |= 0x01;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	795b      	ldrb	r3, [r3, #5]
 800d376:	f043 0301 	orr.w	r3, r3, #1
 800d37a:	b2da      	uxtb	r2, r3
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	715a      	strb	r2, [r3, #5]

	if ((pconfig->user_scaler_set == 0) && (orig_y_gradient == 0))
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10a      	bne.n	800d3a0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
 800d38a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d106      	bne.n	800d3a0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x120>
		pout->gradient_zero_flag |= 0x02;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	795b      	ldrb	r3, [r3, #5]
 800d396:	f043 0302 	orr.w	r3, r3, #2
 800d39a:	b2da      	uxtb	r2, r3
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	715a      	strb	r2, [r3, #5]



	if (orig_xtalk_offset == 0)
 800d3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d101      	bne.n	800d3aa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x12a>
		orig_xtalk_offset = 1;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	653b      	str	r3, [r7, #80]	; 0x50



	if (pconfig->user_scaler_set == 1) {
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d108      	bne.n	800d3c6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x146>
		x_gradient_scaler = pconfig->x_gradient_scaler;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		y_gradient_scaler = pconfig->y_gradient_scaler;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d3c0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800d3c4:	e019      	b.n	800d3fa <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x17a>
	} else {

		x_gradient_scaler = (int16_t)do_division_s(
 800d3c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d3ca:	019b      	lsls	r3, r3, #6
 800d3cc:	461a      	mov	r2, r3
 800d3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				(((int32_t)orig_x_gradient) << 6),
				orig_xtalk_offset);
		pconfig->x_gradient_scaler = x_gradient_scaler;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800d3de:	855a      	strh	r2, [r3, #42]	; 0x2a
		y_gradient_scaler = (int16_t)do_division_s(
 800d3e0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d3e4:	019b      	lsls	r3, r3, #6
 800d3e6:	461a      	mov	r2, r3
 800d3e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				(((int32_t)orig_y_gradient) << 6),
				orig_xtalk_offset);
		pconfig->y_gradient_scaler = y_gradient_scaler;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d3f8:	859a      	strh	r2, [r3, #44]	; 0x2c
	}



	if (pconfig->scaler_calc_method == 0) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d400:	2b00      	cmp	r3, #0
 800d402:	d12a      	bne.n	800d45a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1da>


		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	; 0x56
 800d40c:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d410:	647b      	str	r3, [r7, #68]	; 0x44
				x_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d414:	119b      	asrs	r3, r3, #6
 800d416:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d41a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d41e:	db02      	blt.n	800d426 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1a6>
			itemp32 = 0xFFFF;
 800d420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d424:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d428:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(
			pout->algo__crosstalk_compensation_plane_offset_kcps *
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	689b      	ldr	r3, [r3, #8]
 800d432:	f9b7 2054 	ldrsh.w	r2, [r7, #84]	; 0x54
 800d436:	fb02 f303 	mul.w	r3, r2, r3
		itemp32 = (int32_t)(
 800d43a:	647b      	str	r3, [r7, #68]	; 0x44
				y_gradient_scaler);
		itemp32 = itemp32 >> 6;
 800d43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d43e:	119b      	asrs	r3, r3, #6
 800d440:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d448:	db02      	blt.n	800d450 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1d0>
			itemp32 = 0xFFFF;
 800d44a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d44e:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d452:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	81da      	strh	r2, [r3, #14]
 800d458:	e042      	b.n	800d4e0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>
	} else if (pconfig->scaler_calc_method == 1) {
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d460:	2b01      	cmp	r3, #1
 800d462:	d13d      	bne.n	800d4e0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x260>


		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d468:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d46a:	1ad3      	subs	r3, r2, r3
 800d46c:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 16));
 800d46e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d470:	2b00      	cmp	r3, #0
 800d472:	da00      	bge.n	800d476 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x1f6>
 800d474:	330f      	adds	r3, #15
 800d476:	111b      	asrs	r3, r3, #4
 800d478:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_x_gradient);
 800d480:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d486:	4413      	add	r3, r2
 800d488:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d48a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d48c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d490:	db02      	blt.n	800d498 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x218>
			itemp32 = 0xFFFF;
 800d492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d496:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
			(int16_t)itemp32;
 800d498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d49a:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	819a      	strh	r2, [r3, #12]

		itemp32 = (int32_t)(orig_xtalk_offset -
			pout->algo__crosstalk_compensation_plane_offset_kcps);
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	689b      	ldr	r3, [r3, #8]
		itemp32 = (int32_t)(orig_xtalk_offset -
 800d4a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4a6:	1ad3      	subs	r3, r2, r3
 800d4a8:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = (int32_t)(do_division_s(itemp32, 80));
 800d4aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4ac:	4a51      	ldr	r2, [pc, #324]	; (800d5f4 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x374>)
 800d4ae:	fb82 1203 	smull	r1, r2, r2, r3
 800d4b2:	1152      	asrs	r2, r2, #5
 800d4b4:	17db      	asrs	r3, r3, #31
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 << 2;
 800d4ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4bc:	009b      	lsls	r3, r3, #2
 800d4be:	647b      	str	r3, [r7, #68]	; 0x44
		itemp32 = itemp32 + (int32_t)(orig_y_gradient);
 800d4c0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800d4c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4c6:	4413      	add	r3, r2
 800d4c8:	647b      	str	r3, [r7, #68]	; 0x44
		if (itemp32 > 0xFFFF)
 800d4ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4d0:	db02      	blt.n	800d4d8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x258>
			itemp32 = 0xFFFF;
 800d4d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4d6:	647b      	str	r3, [r7, #68]	; 0x44

		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
			(int16_t)itemp32;
 800d4d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4da:	b21a      	sxth	r2, r3
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	81da      	strh	r2, [r3, #14]
	}


	if (pconfig->smudge_corr_apply_enabled == 1 &&
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	785b      	ldrb	r3, [r3, #1]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d177      	bne.n	800d5d8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
 800d4e8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d073      	beq.n	800d5d8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>
			(soft_update != 1)) {
		pout->new_xtalk_applied_flag = 1;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	719a      	strb	r2, [r3, #6]
		nXtalk = pout->algo__crosstalk_compensation_plane_offset_kcps;
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	627b      	str	r3, [r7, #36]	; 0x24

		VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d4fc:	f107 0313 	add.w	r3, r7, #19
 800d500:	4619      	mov	r1, r3
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f000 fd54 	bl	800dfb0 <VL53L1_compute_histo_merge_nb>
		max = pdev->tuning_parms.tp_hist_merge_max_size;
 800d508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50a:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 800d50e:	623b      	str	r3, [r7, #32]
		pcpo = &(pC->algo__xtalk_cpo_HistoMerge_kcps[0]);
 800d510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d512:	3308      	adds	r3, #8
 800d514:	643b      	str	r3, [r7, #64]	; 0x40
		if ((histo_merge_nb > 0) && merge_enabled && (nXtalk != 0)) {
 800d516:	7cfb      	ldrb	r3, [r7, #19]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d041      	beq.n	800d5a0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800d51c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d520:	2b00      	cmp	r3, #0
 800d522:	d03d      	beq.n	800d5a0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	2b00      	cmp	r3, #0
 800d528:	d03a      	beq.n	800d5a0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			cXtalk =
 800d52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	61fb      	str	r3, [r7, #28]
			pX->algo__crosstalk_compensation_plane_offset_kcps;
			SmudgeFactor = cXtalk * 1000 / nXtalk;
 800d530:	69fb      	ldr	r3, [r7, #28]
 800d532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d536:	fb03 f202 	mul.w	r2, r3, r2
 800d53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d53c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d540:	61bb      	str	r3, [r7, #24]
			if ((max ==  0)||
 800d542:	6a3b      	ldr	r3, [r7, #32]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d004      	beq.n	800d552 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2d2>
				(SmudgeFactor >= pconfig->max_smudge_factor))
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
			if ((max ==  0)||
 800d54c:	69ba      	ldr	r2, [r7, #24]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d303      	bcc.n	800d55a <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2da>
				pout->new_xtalk_applied_flag = 0;
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	2200      	movs	r2, #0
 800d556:	719a      	strb	r2, [r3, #6]
 800d558:	e022      	b.n	800d5a0 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x320>
			else {
				incXtalk = nXtalk / max;
 800d55a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d562:	617b      	str	r3, [r7, #20]
				cval = 0;
 800d564:	2300      	movs	r3, #0
 800d566:	63fb      	str	r3, [r7, #60]	; 0x3c
				for (i = 0; i < max-1; i++) {
 800d568:	2300      	movs	r3, #0
 800d56a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800d56e:	e00e      	b.n	800d58e <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x30e>
					cval += incXtalk;
 800d570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	4413      	add	r3, r2
 800d576:	63fb      	str	r3, [r7, #60]	; 0x3c
					*pcpo = cval;
 800d578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d57a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d57c:	601a      	str	r2, [r3, #0]
					pcpo++;
 800d57e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d580:	3304      	adds	r3, #4
 800d582:	643b      	str	r3, [r7, #64]	; 0x40
				for (i = 0; i < max-1; i++) {
 800d584:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800d588:	3301      	adds	r3, #1
 800d58a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800d58e:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800d592:	6a3b      	ldr	r3, [r7, #32]
 800d594:	3b01      	subs	r3, #1
 800d596:	429a      	cmp	r2, r3
 800d598:	d3ea      	bcc.n	800d570 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x2f0>
				}
				*pcpo = nXtalk;
 800d59a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d59e:	601a      	str	r2, [r3, #0]
			}
		}
		if (pout->new_xtalk_applied_flag) {
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	799b      	ldrb	r3, [r3, #6]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d017      	beq.n	800d5d8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

		pX->algo__crosstalk_compensation_plane_offset_kcps =
		pout->algo__crosstalk_compensation_plane_offset_kcps;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	689a      	ldr	r2, [r3, #8]
		pX->algo__crosstalk_compensation_plane_offset_kcps =
 800d5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ae:	601a      	str	r2, [r3, #0]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
		pX->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	809a      	strh	r2, [r3, #4]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
		pout->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
		pX->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c2:	80da      	strh	r2, [r3, #6]

		if (pconfig->smudge_corr_single_apply == 1) {
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	789b      	ldrb	r3, [r3, #2]
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d105      	bne.n	800d5d8 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x358>

			pconfig->smudge_corr_apply_enabled = 0;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	705a      	strb	r2, [r3, #1]
			pconfig->smudge_corr_single_apply = 0;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	709a      	strb	r2, [r3, #2]
		}
		}
	}


	if (soft_update != 1)
 800d5d8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d002      	beq.n	800d5e6 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk+0x366>
		pout->smudge_corr_valid = 1;
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800d5e6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3758      	adds	r7, #88	; 0x58
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	66666667 	.word	0x66666667

0800d5f8 <VL53L1_dynamic_xtalk_correction_corrector>:
#define CONT_NEXT_LOOP	1
#define CONT_RESET	2
VL53L1_Error VL53L1_dynamic_xtalk_correction_corrector(
	VL53L1_DEV                          Dev
	)
{
 800d5f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5fc:	b0a2      	sub	sp, #136	; 0x88
 800d5fe:	af02      	add	r7, sp, #8
 800d600:	6278      	str	r0, [r7, #36]	; 0x24



	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800d602:	2300      	movs	r3, #0
 800d604:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60a:	3318      	adds	r3, #24
 800d60c:	66bb      	str	r3, [r7, #104]	; 0x68
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800d60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d610:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800d614:	3308      	adds	r3, #8
 800d616:	667b      	str	r3, [r7, #100]	; 0x64
	VL53L1_smudge_corrector_config_t *pconfig =
 800d618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d61a:	f503 539e 	add.w	r3, r3, #5056	; 0x13c0
 800d61e:	3318      	adds	r3, #24
 800d620:	663b      	str	r3, [r7, #96]	; 0x60
				&(pdev->smudge_correct_config);
	VL53L1_smudge_corrector_internals_t *pint =
 800d622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d624:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800d628:	65fb      	str	r3, [r7, #92]	; 0x5c
				&(pdev->smudge_corrector_internals);
	VL53L1_smudge_corrector_data_t *pout =
 800d62a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d62c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d630:	65bb      	str	r3, [r7, #88]	; 0x58
			&(pres->range_results.smudge_corrector_data);
	VL53L1_range_results_t  *pR = &(pres->range_results);
 800d632:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d634:	657b      	str	r3, [r7, #84]	; 0x54
	VL53L1_xtalk_config_t  *pX = &(pdev->xtalk_cfg);
 800d636:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d638:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 800d63c:	653b      	str	r3, [r7, #80]	; 0x50

	uint8_t	run_smudge_detection = 0;
 800d63e:	2300      	movs	r3, #0
 800d640:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t merging_complete = 0;
 800d644:	2300      	movs	r3, #0
 800d646:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	uint8_t	run_nodetect = 0;
 800d64a:	2300      	movs	r3, #0
 800d64c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t ambient_check = 0;
 800d650:	2300      	movs	r3, #0
 800d652:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	int32_t itemp32 = 0;
 800d656:	2300      	movs	r3, #0
 800d658:	67bb      	str	r3, [r7, #120]	; 0x78
	uint64_t utemp64 = 0;
 800d65a:	f04f 0200 	mov.w	r2, #0
 800d65e:	f04f 0300 	mov.w	r3, #0
 800d662:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	uint8_t continue_processing = CONT_CONTINUE;
 800d666:	2300      	movs	r3, #0
 800d668:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint32_t xtalk_offset_out = 0;
 800d66c:	2300      	movs	r3, #0
 800d66e:	673b      	str	r3, [r7, #112]	; 0x70
	uint32_t xtalk_offset_in = 0;
 800d670:	2300      	movs	r3, #0
 800d672:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t current_xtalk = 0;
 800d674:	2300      	movs	r3, #0
 800d676:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t smudge_margin_adjusted = 0;
 800d678:	2300      	movs	r3, #0
 800d67a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t i = 0;
 800d67c:	2300      	movs	r3, #0
 800d67e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t nodetect_index = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	uint8_t merge_enabled;


	LOG_FUNCTION_START("");

	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d68a:	f893 31b4 	ldrb.w	r3, [r3, #436]	; 0x1b4
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d108      	bne.n	800d6a4 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
		(VL53L1DevDataGet(Dev, CurrentParameters.PresetMode) ==
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d698:	f893 3a6c 	ldrb.w	r3, [r3, #2668]	; 0xa6c
	merge_enabled = (pdev->tuning_parms.tp_hist_merge == 1) &&
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d101      	bne.n	800d6a4 <VL53L1_dynamic_xtalk_correction_corrector+0xac>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e000      	b.n	800d6a6 <VL53L1_dynamic_xtalk_correction_corrector+0xae>
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		 VL53L1_PRESETMODE_RANGING);

	VL53L1_compute_histo_merge_nb(Dev, &histo_merge_nb);
 800d6aa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6b2:	f000 fc7d 	bl	800dfb0 <VL53L1_compute_histo_merge_nb>
	if ((histo_merge_nb == 0) || (!merge_enabled))
 800d6b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <VL53L1_dynamic_xtalk_correction_corrector+0xce>
 800d6be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d102      	bne.n	800d6cc <VL53L1_dynamic_xtalk_correction_corrector+0xd4>
		histo_merge_nb = 1;
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800d6cc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800d6ce:	f000 fb15 	bl	800dcfc <VL53L1_dynamic_xtalk_correction_output_init>


	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800d6d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d00a      	beq.n	800d6f0 <VL53L1_dynamic_xtalk_correction_corrector+0xf8>
		((pconfig->smudge_corr_ambient_threshold * histo_merge_nb) >
 800d6da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d6dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d6e2:	fb03 f202 	mul.w	r2, r3, r2
		((uint32_t)pR->xmonitor.ambient_count_rate_mcps));
 800d6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6e8:	f8b3 3178 	ldrh.w	r3, [r3, #376]	; 0x178
	ambient_check = (pconfig->smudge_corr_ambient_threshold == 0) ||
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d901      	bls.n	800d6f4 <VL53L1_dynamic_xtalk_correction_corrector+0xfc>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e000      	b.n	800d6f6 <VL53L1_dynamic_xtalk_correction_corrector+0xfe>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d


	merging_complete = ((!merge_enabled) ||
 800d6fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d006      	beq.n	800d710 <VL53L1_dynamic_xtalk_correction_corrector+0x118>
	(histo_merge_nb == pdev->tuning_parms.tp_hist_merge_max_size));
 800d702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d704:	f893 21bc 	ldrb.w	r2, [r3, #444]	; 0x1bc
 800d708:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
	merging_complete = ((!merge_enabled) ||
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d101      	bne.n	800d714 <VL53L1_dynamic_xtalk_correction_corrector+0x11c>
 800d710:	2301      	movs	r3, #1
 800d712:	e000      	b.n	800d716 <VL53L1_dynamic_xtalk_correction_corrector+0x11e>
 800d714:	2300      	movs	r3, #0
 800d716:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	run_smudge_detection =
		(pconfig->smudge_corr_enabled == 1) &&
 800d71a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d71c:	781b      	ldrb	r3, [r3, #0]
		ambient_check &&
		(pR->xmonitor.range_status
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d10e      	bne.n	800d740 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pconfig->smudge_corr_enabled == 1) &&
 800d722:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00a      	beq.n	800d740 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
		(pR->xmonitor.range_status
 800d72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d72c:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
		ambient_check &&
 800d730:	2b09      	cmp	r3, #9
 800d732:	d105      	bne.n	800d740 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
			== VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800d734:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d001      	beq.n	800d740 <VL53L1_dynamic_xtalk_correction_corrector+0x148>
 800d73c:	2301      	movs	r3, #1
 800d73e:	e000      	b.n	800d742 <VL53L1_dynamic_xtalk_correction_corrector+0x14a>
 800d740:	2300      	movs	r3, #0
	run_smudge_detection =
 800d742:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		merging_complete;


	if ((pR->xmonitor.range_status
 800d746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d748:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
 800d74c:	2b09      	cmp	r3, #9
 800d74e:	f000 80a6 	beq.w	800d89e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
			(pconfig->smudge_corr_enabled == 1)) {
 800d752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d754:	781b      	ldrb	r3, [r3, #0]
		!= VL53L1_DEVICEERROR_RANGECOMPLETE) &&
 800d756:	2b01      	cmp	r3, #1
 800d758:	f040 80a1 	bne.w	800d89e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>

		run_nodetect = 2;
 800d75c:	2302      	movs	r3, #2
 800d75e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		for (i = 0; i < pR->active_results; i++) {
 800d762:	2300      	movs	r3, #0
 800d764:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800d768:	e02d      	b.n	800d7c6 <VL53L1_dynamic_xtalk_correction_corrector+0x1ce>
			if (pR->VL53L1_p_002[i].range_status ==
 800d76a:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800d76e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d770:	234c      	movs	r3, #76	; 0x4c
 800d772:	fb01 f303 	mul.w	r3, r1, r3
 800d776:	4413      	add	r3, r2
 800d778:	335e      	adds	r3, #94	; 0x5e
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	2b09      	cmp	r3, #9
 800d77e:	d11d      	bne.n	800d7bc <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				VL53L1_DEVICEERROR_RANGECOMPLETE) {
				if (pR->VL53L1_p_002[i].median_range_mm
 800d780:	f897 106f 	ldrb.w	r1, [r7, #111]	; 0x6f
 800d784:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d786:	234c      	movs	r3, #76	; 0x4c
 800d788:	fb01 f303 	mul.w	r3, r1, r3
 800d78c:	4413      	add	r3, r2
 800d78e:	335a      	adds	r3, #90	; 0x5a
 800d790:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d794:	461a      	mov	r2, r3
						<=
					pconfig->nodetect_min_range_mm) {
 800d796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d798:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
				if (pR->VL53L1_p_002[i].median_range_mm
 800d79a:	429a      	cmp	r2, r3
 800d79c:	dc03      	bgt.n	800d7a6 <VL53L1_dynamic_xtalk_correction_corrector+0x1ae>
					run_nodetect = 0;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d7a4:	e00a      	b.n	800d7bc <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
				} else {
					if (run_nodetect == 2) {
 800d7a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d106      	bne.n	800d7bc <VL53L1_dynamic_xtalk_correction_corrector+0x1c4>
						run_nodetect = 1;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						nodetect_index = i;
 800d7b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d7b8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		for (i = 0; i < pR->active_results; i++) {
 800d7bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800d7c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d7c8:	7c9a      	ldrb	r2, [r3, #18]
 800d7ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d3cb      	bcc.n	800d76a <VL53L1_dynamic_xtalk_correction_corrector+0x172>
					}
				}
			}
		}

		if (run_nodetect == 2)
 800d7d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d7d6:	2b02      	cmp	r3, #2
 800d7d8:	d102      	bne.n	800d7e0 <VL53L1_dynamic_xtalk_correction_corrector+0x1e8>

			run_nodetect = 0;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		amr =
		pR->VL53L1_p_002[nodetect_index].ambient_count_rate_mcps;
 800d7e0:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
		amr =
 800d7e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7e6:	234c      	movs	r3, #76	; 0x4c
 800d7e8:	fb01 f303 	mul.w	r3, r1, r3
 800d7ec:	4413      	add	r3, r2
 800d7ee:	3348      	adds	r3, #72	; 0x48
 800d7f0:	881b      	ldrh	r3, [r3, #0]
 800d7f2:	863b      	strh	r3, [r7, #48]	; 0x30

		if (run_nodetect == 1) {
 800d7f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d150      	bne.n	800d89e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>




			utemp64 = 1000 * ((uint64_t)amr);
 800d7fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d7fe:	2200      	movs	r2, #0
 800d800:	469a      	mov	sl, r3
 800d802:	4693      	mov	fp, r2
 800d804:	4652      	mov	r2, sl
 800d806:	465b      	mov	r3, fp
 800d808:	f04f 0000 	mov.w	r0, #0
 800d80c:	f04f 0100 	mov.w	r1, #0
 800d810:	0159      	lsls	r1, r3, #5
 800d812:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d816:	0150      	lsls	r0, r2, #5
 800d818:	4602      	mov	r2, r0
 800d81a:	460b      	mov	r3, r1
 800d81c:	ebb2 040a 	subs.w	r4, r2, sl
 800d820:	eb63 050b 	sbc.w	r5, r3, fp
 800d824:	f04f 0200 	mov.w	r2, #0
 800d828:	f04f 0300 	mov.w	r3, #0
 800d82c:	00ab      	lsls	r3, r5, #2
 800d82e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800d832:	00a2      	lsls	r2, r4, #2
 800d834:	4614      	mov	r4, r2
 800d836:	461d      	mov	r5, r3
 800d838:	eb14 080a 	adds.w	r8, r4, sl
 800d83c:	eb45 090b 	adc.w	r9, r5, fp
 800d840:	f04f 0200 	mov.w	r2, #0
 800d844:	f04f 0300 	mov.w	r3, #0
 800d848:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d84c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d850:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d854:	4690      	mov	r8, r2
 800d856:	4699      	mov	r9, r3
 800d858:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40


			utemp64 = utemp64 << 9;
 800d85c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d860:	f04f 0200 	mov.w	r2, #0
 800d864:	f04f 0300 	mov.w	r3, #0
 800d868:	024b      	lsls	r3, r1, #9
 800d86a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800d86e:	0242      	lsls	r2, r0, #9
 800d870:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


			if (utemp64 < pconfig->nodetect_ambient_threshold)
 800d874:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d878:	2200      	movs	r2, #0
 800d87a:	61bb      	str	r3, [r7, #24]
 800d87c:	61fa      	str	r2, [r7, #28]
 800d87e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d882:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800d886:	4621      	mov	r1, r4
 800d888:	428a      	cmp	r2, r1
 800d88a:	4629      	mov	r1, r5
 800d88c:	418b      	sbcs	r3, r1
 800d88e:	d203      	bcs.n	800d898 <VL53L1_dynamic_xtalk_correction_corrector+0x2a0>
				run_nodetect = 1;
 800d890:	2301      	movs	r3, #1
 800d892:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d896:	e002      	b.n	800d89e <VL53L1_dynamic_xtalk_correction_corrector+0x2a6>
			else
				run_nodetect = 0;
 800d898:	2300      	movs	r3, #0
 800d89a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		}
	}


	if (run_smudge_detection) {
 800d89e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f000 810b 	beq.w	800dabe <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>

		pint->nodetect_counter = 0;
 800d8a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	611a      	str	r2, [r3, #16]


		VL53L1_dynamic_xtalk_correction_calc_required_samples(Dev);
 800d8ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8b0:	f7ff fb80 	bl	800cfb4 <VL53L1_dynamic_xtalk_correction_calc_required_samples>


		xtalk_offset_in =
 800d8b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8b6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 800d8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
			pR->xmonitor.VL53L1_p_012;


		cco = pX->algo__crosstalk_compensation_plane_offset_kcps;
 800d8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		current_xtalk = ((uint32_t)cco) << 2;
 800d8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	63bb      	str	r3, [r7, #56]	; 0x38


		smudge_margin_adjusted =
				((uint32_t)(pconfig->smudge_margin)) << 2;
 800d8c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8ca:	889b      	ldrh	r3, [r3, #4]
		smudge_margin_adjusted =
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	637b      	str	r3, [r7, #52]	; 0x34


		itemp32 = xtalk_offset_in - current_xtalk +
 800d8d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d4:	1ad2      	subs	r2, r2, r3
 800d8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8d8:	4413      	add	r3, r2
 800d8da:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800d8dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	da02      	bge.n	800d8e8 <VL53L1_dynamic_xtalk_correction_corrector+0x2f0>
			itemp32 = itemp32 * (-1);
 800d8e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8e4:	425b      	negs	r3, r3
 800d8e6:	67bb      	str	r3, [r7, #120]	; 0x78


		if (itemp32 > ((int32_t)pconfig->single_xtalk_delta)) {
 800d8e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8ea:	699b      	ldr	r3, [r3, #24]
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	dd0c      	ble.n	800d90e <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			if ((int32_t)xtalk_offset_in >
				((int32_t)current_xtalk -
 800d8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted)) {
 800d8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800d8f8:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_in >
 800d8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	da03      	bge.n	800d908 <VL53L1_dynamic_xtalk_correction_corrector+0x310>
				pout->single_xtalk_delta_flag = 1;
 800d900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d902:	2201      	movs	r2, #1
 800d904:	709a      	strb	r2, [r3, #2]
 800d906:	e002      	b.n	800d90e <VL53L1_dynamic_xtalk_correction_corrector+0x316>
			} else {
				pout->single_xtalk_delta_flag = 2;
 800d908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d90a:	2202      	movs	r2, #2
 800d90c:	709a      	strb	r2, [r3, #2]
			}
		}


		pint->current_samples = pint->current_samples + 1;
 800d90e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	1c5a      	adds	r2, r3, #1
 800d914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d916:	601a      	str	r2, [r3, #0]


		if (pint->current_samples > pconfig->sample_limit) {
 800d918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d91e:	695b      	ldr	r3, [r3, #20]
 800d920:	429a      	cmp	r2, r3
 800d922:	d906      	bls.n	800d932 <VL53L1_dynamic_xtalk_correction_corrector+0x33a>
			pout->sample_limit_exceeded_flag = 1;
 800d924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d926:	2201      	movs	r2, #1
 800d928:	711a      	strb	r2, [r3, #4]
			continue_processing = CONT_RESET;
 800d92a:	2302      	movs	r3, #2
 800d92c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800d930:	e014      	b.n	800d95c <VL53L1_dynamic_xtalk_correction_corrector+0x364>
		} else {
			pint->accumulator = pint->accumulator +
 800d932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d934:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d938:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d93a:	2000      	movs	r0, #0
 800d93c:	6139      	str	r1, [r7, #16]
 800d93e:	6178      	str	r0, [r7, #20]
 800d940:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d944:	4621      	mov	r1, r4
 800d946:	1851      	adds	r1, r2, r1
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	4629      	mov	r1, r5
 800d94c:	eb43 0101 	adc.w	r1, r3, r1
 800d950:	60f9      	str	r1, [r7, #12]
 800d952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d954:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d958:	e9c3 1202 	strd	r1, r2, [r3, #8]
				xtalk_offset_in;
		}

		if (pint->current_samples < pint->required_samples)
 800d95c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	429a      	cmp	r2, r3
 800d966:	d202      	bcs.n	800d96e <VL53L1_dynamic_xtalk_correction_corrector+0x376>
			continue_processing = CONT_NEXT_LOOP;
 800d968:	2301      	movs	r3, #1
 800d96a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out =
		(uint32_t)(do_division_u(pint->accumulator,
 800d96e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d970:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	2200      	movs	r2, #0
 800d97a:	603b      	str	r3, [r7, #0]
 800d97c:	607a      	str	r2, [r7, #4]
 800d97e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d982:	f7f2 fc9d 	bl	80002c0 <__aeabi_uldivmod>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
		xtalk_offset_out =
 800d98a:	4613      	mov	r3, r2
 800d98c:	673b      	str	r3, [r7, #112]	; 0x70
			pint->current_samples));


		itemp32 = xtalk_offset_out - current_xtalk +
 800d98e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d992:	1ad2      	subs	r2, r2, r3
 800d994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d996:	4413      	add	r3, r2
 800d998:	67bb      	str	r3, [r7, #120]	; 0x78
			smudge_margin_adjusted;

		if (itemp32 < 0)
 800d99a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	da02      	bge.n	800d9a6 <VL53L1_dynamic_xtalk_correction_corrector+0x3ae>
			itemp32 = itemp32 * (-1);
 800d9a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9a2:	425b      	negs	r3, r3
 800d9a4:	67bb      	str	r3, [r7, #120]	; 0x78

		if (continue_processing == CONT_CONTINUE &&
 800d9a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d112      	bne.n	800d9d4 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			(itemp32 >= ((int32_t)(pconfig->averaged_xtalk_delta)))
 800d9ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9b0:	69db      	ldr	r3, [r3, #28]
 800d9b2:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800d9b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	db0c      	blt.n	800d9d4 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			) {
			if ((int32_t)xtalk_offset_out >
				((int32_t)current_xtalk -
 800d9ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
					(int32_t)smudge_margin_adjusted))
 800d9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				((int32_t)current_xtalk -
 800d9be:	1ad2      	subs	r2, r2, r3
			if ((int32_t)xtalk_offset_out >
 800d9c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	da03      	bge.n	800d9ce <VL53L1_dynamic_xtalk_correction_corrector+0x3d6>
				pout->averaged_xtalk_delta_flag = 1;
 800d9c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	70da      	strb	r2, [r3, #3]
 800d9cc:	e002      	b.n	800d9d4 <VL53L1_dynamic_xtalk_correction_corrector+0x3dc>
			else
				pout->averaged_xtalk_delta_flag = 2;
 800d9ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9d0:	2202      	movs	r2, #2
 800d9d2:	70da      	strb	r2, [r3, #3]
		}

		if (continue_processing == CONT_CONTINUE &&
 800d9d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d108      	bne.n	800d9ee <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			(itemp32 < ((int32_t)(pconfig->averaged_xtalk_delta)))
 800d9dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9de:	69db      	ldr	r3, [r3, #28]
 800d9e0:	461a      	mov	r2, r3
		if (continue_processing == CONT_CONTINUE &&
 800d9e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	da02      	bge.n	800d9ee <VL53L1_dynamic_xtalk_correction_corrector+0x3f6>
			)

			continue_processing = CONT_RESET;
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



		pout->smudge_corr_clipped = 0;
 800d9ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	705a      	strb	r2, [r3, #1]
		if ((continue_processing == CONT_CONTINUE) &&
 800d9f4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d112      	bne.n	800da22 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			(pconfig->smudge_corr_clip_limit != 0)) {
 800d9fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9fe:	6a1b      	ldr	r3, [r3, #32]
		if ((continue_processing == CONT_CONTINUE) &&
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00e      	beq.n	800da22 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
			if (xtalk_offset_out >
			(pconfig->smudge_corr_clip_limit * histo_merge_nb)) {
 800da04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da06:	6a1b      	ldr	r3, [r3, #32]
 800da08:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800da0c:	fb02 f303 	mul.w	r3, r2, r3
			if (xtalk_offset_out >
 800da10:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800da12:	429a      	cmp	r2, r3
 800da14:	d905      	bls.n	800da22 <VL53L1_dynamic_xtalk_correction_corrector+0x42a>
				pout->smudge_corr_clipped = 1;
 800da16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da18:	2201      	movs	r2, #1
 800da1a:	705a      	strb	r2, [r3, #1]
				continue_processing = CONT_RESET;
 800da1c:	2302      	movs	r3, #2
 800da1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}



		if (pconfig->user_xtalk_offset_limit_hi &&
 800da22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da24:	7c1b      	ldrb	r3, [r3, #16]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d007      	beq.n	800da3a <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			(xtalk_offset_out >
				pconfig->user_xtalk_offset_limit))
 800da2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da2c:	68db      	ldr	r3, [r3, #12]
		if (pconfig->user_xtalk_offset_limit_hi &&
 800da2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800da30:	429a      	cmp	r2, r3
 800da32:	d902      	bls.n	800da3a <VL53L1_dynamic_xtalk_correction_corrector+0x442>
			xtalk_offset_out =
 800da34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800da3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da3c:	7c1b      	ldrb	r3, [r3, #16]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d107      	bne.n	800da52 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			(xtalk_offset_out <
				pconfig->user_xtalk_offset_limit))
 800da42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da44:	68db      	ldr	r3, [r3, #12]
		if ((pconfig->user_xtalk_offset_limit_hi == 0) &&
 800da46:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800da48:	429a      	cmp	r2, r3
 800da4a:	d202      	bcs.n	800da52 <VL53L1_dynamic_xtalk_correction_corrector+0x45a>
			xtalk_offset_out =
 800da4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	673b      	str	r3, [r7, #112]	; 0x70
				pconfig->user_xtalk_offset_limit;



		xtalk_offset_out = xtalk_offset_out >> 2;
 800da52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da54:	089b      	lsrs	r3, r3, #2
 800da56:	673b      	str	r3, [r7, #112]	; 0x70
		if (xtalk_offset_out > 0x3FFFF)
 800da58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800da5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800da5e:	d301      	bcc.n	800da64 <VL53L1_dynamic_xtalk_correction_corrector+0x46c>
			xtalk_offset_out = 0x3FFFF;
 800da60:	4b3e      	ldr	r3, [pc, #248]	; (800db5c <VL53L1_dynamic_xtalk_correction_corrector+0x564>)
 800da62:	673b      	str	r3, [r7, #112]	; 0x70


		if (continue_processing == CONT_CONTINUE) {
 800da64:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10d      	bne.n	800da88 <VL53L1_dynamic_xtalk_correction_corrector+0x490>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800da6c:	2300      	movs	r3, #0
 800da6e:	9301      	str	r3, [sp, #4]
 800da70:	2301      	movs	r3, #1
 800da72:	9300      	str	r3, [sp, #0]
 800da74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da78:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800da7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da7c:	f7ff fc00 	bl	800d280 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1,
				0
				);


			continue_processing = CONT_RESET;
 800da80:	2302      	movs	r3, #2
 800da82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800da86:	e009      	b.n	800da9c <VL53L1_dynamic_xtalk_correction_corrector+0x4a4>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800da88:	2301      	movs	r3, #1
 800da8a:	9301      	str	r3, [sp, #4]
 800da8c:	2301      	movs	r3, #1
 800da8e:	9300      	str	r3, [sp, #0]
 800da90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da94:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800da96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da98:	f7ff fbf2 	bl	800d280 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800da9c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800daa0:	2b02      	cmp	r3, #2
 800daa2:	d10c      	bne.n	800dabe <VL53L1_dynamic_xtalk_correction_corrector+0x4c6>
			pint->accumulator = 0;
 800daa4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800daa6:	f04f 0200 	mov.w	r2, #0
 800daaa:	f04f 0300 	mov.w	r3, #0
 800daae:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800dab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dab4:	2200      	movs	r2, #0
 800dab6:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800dab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daba:	2200      	movs	r2, #0
 800dabc:	611a      	str	r2, [r3, #16]
		}

	}

	continue_processing = CONT_CONTINUE;
 800dabe:	2300      	movs	r3, #0
 800dac0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (run_nodetect == 1) {
 800dac4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d140      	bne.n	800db4e <VL53L1_dynamic_xtalk_correction_corrector+0x556>

		pint->nodetect_counter += 1;
 800dacc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dace:	691b      	ldr	r3, [r3, #16]
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dad4:	611a      	str	r2, [r3, #16]


		if (pint->nodetect_counter < pconfig->nodetect_sample_limit)
 800dad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dad8:	691a      	ldr	r2, [r3, #16]
 800dada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dadc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dade:	429a      	cmp	r2, r3
 800dae0:	d202      	bcs.n	800dae8 <VL53L1_dynamic_xtalk_correction_corrector+0x4f0>
			continue_processing = CONT_NEXT_LOOP;
 800dae2:	2301      	movs	r3, #1
 800dae4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


		xtalk_offset_out = (uint32_t)(pconfig->nodetect_xtalk_offset);
 800dae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daec:	673b      	str	r3, [r7, #112]	; 0x70

		if (continue_processing == CONT_CONTINUE) {
 800daee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d110      	bne.n	800db18 <VL53L1_dynamic_xtalk_correction_corrector+0x520>

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800daf6:	2300      	movs	r3, #0
 800daf8:	9301      	str	r3, [sp, #4]
 800dafa:	2300      	movs	r3, #0
 800dafc:	9300      	str	r3, [sp, #0]
 800dafe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db02:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800db04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db06:	f7ff fbbb 	bl	800d280 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				0,
				0
				);


			pout->smudge_corr_valid = 2;
 800db0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db0c:	2202      	movs	r2, #2
 800db0e:	701a      	strb	r2, [r3, #0]


			continue_processing = CONT_RESET;
 800db10:	2302      	movs	r3, #2
 800db12:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800db16:	e009      	b.n	800db2c <VL53L1_dynamic_xtalk_correction_corrector+0x534>
		} else {

			VL53L1_dynamic_xtalk_correction_calc_new_xtalk(
 800db18:	2301      	movs	r3, #1
 800db1a:	9301      	str	r3, [sp, #4]
 800db1c:	2300      	movs	r3, #0
 800db1e:	9300      	str	r3, [sp, #0]
 800db20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db24:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800db26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db28:	f7ff fbaa 	bl	800d280 <VL53L1_dynamic_xtalk_correction_calc_new_xtalk>
				1
				);
		}


		if (continue_processing == CONT_RESET) {
 800db2c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800db30:	2b02      	cmp	r3, #2
 800db32:	d10c      	bne.n	800db4e <VL53L1_dynamic_xtalk_correction_corrector+0x556>
			pint->accumulator = 0;
 800db34:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800db36:	f04f 0200 	mov.w	r2, #0
 800db3a:	f04f 0300 	mov.w	r3, #0
 800db3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pint->current_samples = 0;
 800db42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db44:	2200      	movs	r2, #0
 800db46:	601a      	str	r2, [r3, #0]
			pint->nodetect_counter = 0;
 800db48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db4a:	2200      	movs	r2, #0
 800db4c:	611a      	str	r2, [r3, #16]
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800db4e:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
}
 800db52:	4618      	mov	r0, r3
 800db54:	3780      	adds	r7, #128	; 0x80
 800db56:	46bd      	mov	sp, r7
 800db58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800db5c:	0003ffff 	.word	0x0003ffff

0800db60 <VL53L1_dynamic_xtalk_correction_data_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_data_init(
	VL53L1_DEV                          Dev
	)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800db68:	2300      	movs	r3, #0
 800db6a:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	3318      	adds	r3, #24
 800db70:	613b      	str	r3, [r7, #16]
	VL53L1_LLDriverResults_t *pres = VL53L1DevStructGetLLResultsHandle(Dev);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800db78:	3308      	adds	r3, #8
 800db7a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");



	pdev->smudge_correct_config.smudge_corr_enabled       = 1;
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db82:	2201      	movs	r2, #1
 800db84:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
	pdev->smudge_correct_config.smudge_corr_apply_enabled = 1;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
	pdev->smudge_correct_config.smudge_corr_single_apply  =
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_COR_SINGLE_APPLY_DEFAULT;

	pdev->smudge_correct_config.smudge_margin =
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dbaa:	f8a3 23dc 	strh.w	r2, [r3, #988]	; 0x3dc
		VL53L1_TUNINGPARM_DYNXTALK_SMUDGE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.noise_margin =
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800dbba:	f8c2 33e0 	str.w	r3, [r2, #992]	; 0x3e0
		VL53L1_TUNINGPARM_DYNXTALK_NOISE_MARGIN_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit =
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_DEFAULT;
	pdev->smudge_correct_config.user_xtalk_offset_limit_hi =
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_OFFSET_LIMIT_HI_DEFAULT;
	pdev->smudge_correct_config.sample_limit =
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbde:	461a      	mov	r2, r3
 800dbe0:	23c8      	movs	r3, #200	; 0xc8
 800dbe2:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
		VL53L1_TUNINGPARM_DYNXTALK_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.single_xtalk_delta =
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbec:	461a      	mov	r2, r3
 800dbee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dbf2:	f8c2 33f0 	str.w	r3, [r2, #1008]	; 0x3f0
		VL53L1_TUNINGPARM_DYNXTALK_SINGLE_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.averaged_xtalk_delta =
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc02:	f8c2 33f4 	str.w	r3, [r2, #1012]	; 0x3f4
		VL53L1_TUNINGPARM_DYNXTALK_AVERAGED_XTALK_DELTA_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_clip_limit =
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	4b3a      	ldr	r3, [pc, #232]	; (800dcf8 <VL53L1_dynamic_xtalk_correction_data_init+0x198>)
 800dc10:	f8c2 33f8 	str.w	r3, [r2, #1016]	; 0x3f8
		VL53L1_TUNINGPARM_DYNXTALK_CLIP_LIMIT_DEFAULT;
	pdev->smudge_correct_config.smudge_corr_ambient_threshold =
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800dc20:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
		VL53L1_TUNINGPARM_DYNXTALK_XTALK_AMB_THRESHOLD_DEFAULT;
	pdev->smudge_correct_config.scaler_calc_method =
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
		0;
	pdev->smudge_correct_config.x_gradient_scaler =
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc36:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc3a:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		VL53L1_TUNINGPARM_DYNXTALK_XGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.y_gradient_scaler =
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc44:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dc48:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		VL53L1_TUNINGPARM_DYNXTALK_YGRADIENT_SCALER_DEFAULT;
	pdev->smudge_correct_config.user_scaler_set =
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc52:	2200      	movs	r2, #0
 800dc54:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		VL53L1_TUNINGPARM_DYNXTALK_USER_SCALER_SET_DEFAULT;
	pdev->smudge_correct_config.nodetect_ambient_threshold =
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc5e:	461a      	mov	r2, r3
 800dc60:	f04f 735c 	mov.w	r3, #57671680	; 0x3700000
 800dc64:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_AMB_THRESHOLD_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_sample_limit =
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc6e:	461a      	mov	r2, r3
 800dc70:	230a      	movs	r3, #10
 800dc72:	f8c2 340c 	str.w	r3, [r2, #1036]	; 0x40c
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_SAMPLE_LIMIT_DEFAULT;
	pdev->smudge_correct_config.nodetect_xtalk_offset =
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc82:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_XTALK_OFFSET_KCPS_DEFAULT;
	pdev->smudge_correct_config.nodetect_min_range_mm =
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc8c:	f44f 7261 	mov.w	r2, #900	; 0x384
 800dc90:	f8a3 2414 	strh.w	r2, [r3, #1044]	; 0x414
		VL53L1_TUNINGPARM_DYNXTALK_NODETECT_MIN_RANGE_MM_DEFAULT;
	pdev->smudge_correct_config.max_smudge_factor =
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dca0:	f8c2 3418 	str.w	r3, [r2, #1048]	; 0x418
		VL53L1_TUNINGPARM_DYNXTALK_MAX_SMUDGE_FACTOR_DEFAULT;


	pdev->smudge_corrector_internals.current_samples = 0;
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcaa:	461a      	mov	r2, r3
 800dcac:	2300      	movs	r3, #0
 800dcae:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
	pdev->smudge_corrector_internals.required_samples = 0;
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcb8:	461a      	mov	r2, r3
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
	pdev->smudge_corrector_internals.accumulator = 0;
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 800dcc6:	3310      	adds	r3, #16
 800dcc8:	4619      	mov	r1, r3
 800dcca:	f04f 0200 	mov.w	r2, #0
 800dcce:	f04f 0300 	mov.w	r3, #0
 800dcd2:	e941 2302 	strd	r2, r3, [r1, #-8]
	pdev->smudge_corrector_internals.nodetect_counter = 0;
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dcdc:	461a      	mov	r2, r3
 800dcde:	2300      	movs	r3, #0
 800dce0:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430


	VL53L1_dynamic_xtalk_correction_output_init(pres);
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f000 f809 	bl	800dcfc <VL53L1_dynamic_xtalk_correction_output_init>

	LOG_FUNCTION_END(status);

	return status;
 800dcea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3718      	adds	r7, #24
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}
 800dcf6:	bf00      	nop
 800dcf8:	000ff800 	.word	0x000ff800

0800dcfc <VL53L1_dynamic_xtalk_correction_output_init>:

VL53L1_Error VL53L1_dynamic_xtalk_correction_output_init(
	VL53L1_LLDriverResults_t *pres
	)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b085      	sub	sp, #20
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dd04:	2300      	movs	r3, #0
 800dd06:	73fb      	strb	r3, [r7, #15]
	VL53L1_smudge_corrector_data_t *pdata;

	LOG_FUNCTION_START("");


	pdata = &(pres->range_results.smudge_corrector_data);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800dd0e:	60bb      	str	r3, [r7, #8]

	pdata->smudge_corr_valid = 0;
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	2200      	movs	r2, #0
 800dd14:	701a      	strb	r2, [r3, #0]
	pdata->smudge_corr_clipped = 0;
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	705a      	strb	r2, [r3, #1]
	pdata->single_xtalk_delta_flag = 0;
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	709a      	strb	r2, [r3, #2]
	pdata->averaged_xtalk_delta_flag = 0;
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	2200      	movs	r2, #0
 800dd26:	70da      	strb	r2, [r3, #3]
	pdata->sample_limit_exceeded_flag = 0;
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	711a      	strb	r2, [r3, #4]
	pdata->gradient_zero_flag = 0;
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	2200      	movs	r2, #0
 800dd32:	715a      	strb	r2, [r3, #5]
	pdata->new_xtalk_applied_flag = 0;
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	2200      	movs	r2, #0
 800dd38:	719a      	strb	r2, [r3, #6]

	pdata->algo__crosstalk_compensation_plane_offset_kcps = 0;
 800dd3a:	68bb      	ldr	r3, [r7, #8]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	609a      	str	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	2200      	movs	r2, #0
 800dd44:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	81da      	strh	r2, [r3, #14]

	LOG_FUNCTION_END(status);

	return status;
 800dd4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3714      	adds	r7, #20
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr

0800dd5c <VL53L1_xtalk_cal_data_init>:


VL53L1_Error VL53L1_xtalk_cal_data_init(
	VL53L1_DEV                          Dev
	)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dd64:	2300      	movs	r3, #0
 800dd66:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	3318      	adds	r3, #24
 800dd6c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->xtalk_cal.algo__crosstalk_compensation_plane_offset_kcps = 0;
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd74:	461a      	mov	r2, r3
 800dd76:	2300      	movs	r3, #0
 800dd78:	f8c2 3280 	str.w	r3, [r2, #640]	; 0x280
	pdev->xtalk_cal.algo__crosstalk_compensation_x_plane_gradient_kcps = 0;
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd82:	2200      	movs	r2, #0
 800dd84:	f8a3 2284 	strh.w	r2, [r3, #644]	; 0x284
	pdev->xtalk_cal.algo__crosstalk_compensation_y_plane_gradient_kcps = 0;
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f8a3 2286 	strh.w	r2, [r3, #646]	; 0x286
	memset(&pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps[0], 0,
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	f503 5394 	add.w	r3, r3, #4736	; 0x1280
 800dd9a:	3308      	adds	r3, #8
 800dd9c:	2218      	movs	r2, #24
 800dd9e:	2100      	movs	r1, #0
 800dda0:	4618      	mov	r0, r3
 800dda2:	f00b f9c7 	bl	8019134 <memset>
		sizeof(pdev->xtalk_cal.algo__xtalk_cpo_HistoMerge_kcps));

	LOG_FUNCTION_END(status);

	return status;
 800dda6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3710      	adds	r7, #16
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}

0800ddb2 <VL53L1_low_power_auto_data_init>:


VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800ddb2:	b480      	push	{r7}
 800ddb4:	b085      	sub	sp, #20
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	3318      	adds	r3, #24
 800ddc2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddca:	2203      	movs	r2, #3
 800ddcc:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dde2:	2200      	movs	r2, #0
 800dde4:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de06:	2200      	movs	r2, #0
 800de08:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de12:	2200      	movs	r2, #0
 800de14:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de1e:	461a      	mov	r2, r3
 800de20:	2300      	movs	r3, #0
 800de22:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de2c:	2200      	movs	r2, #0
 800de2e:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	LOG_FUNCTION_END(status);

	return status;
 800de32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3714      	adds	r7, #20
 800de3a:	46bd      	mov	sp, r7
 800de3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de40:	4770      	bx	lr

0800de42 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800de42:	b480      	push	{r7}
 800de44:	b085      	sub	sp, #20
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800de4a:	2300      	movs	r3, #0
 800de4c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	3318      	adds	r3, #24
 800de52:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de5a:	22ff      	movs	r2, #255	; 0xff
 800de5c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de66:	2200      	movs	r2, #0
 800de68:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de72:	461a      	mov	r2, r3
 800de74:	2300      	movs	r3, #0
 800de76:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
	pdev->low_power_auto_data.dss__required_spads = 0;
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de80:	2200      	movs	r2, #0
 800de82:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444


	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de8c:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800de90:	2b00      	cmp	r3, #0
 800de92:	d007      	beq.n	800dea4 <VL53L1_low_power_auto_data_stop_range+0x62>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de9a:	f893 243c 	ldrb.w	r2, [r3, #1084]	; 0x43c
		pdev->stat_nvm.vhv_config__init =
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deaa:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d007      	beq.n	800dec2 <VL53L1_low_power_auto_data_stop_range+0x80>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800deb8:	f893 243d 	ldrb.w	r2, [r3, #1085]	; 0x43d
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324


	pdev->gen_cfg.phasecal_config__override = 0x00;
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b

	LOG_FUNCTION_END(status);

	return status;
 800deca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3714      	adds	r7, #20
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr

0800deda <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800deda:	b480      	push	{r7}
 800dedc:	b087      	sub	sp, #28
 800dede:	af00      	add	r7, sp, #0
 800dee0:	60f8      	str	r0, [r7, #12]
 800dee2:	60b9      	str	r1, [r7, #8]
 800dee4:	607a      	str	r2, [r7, #4]




	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dee6:	2300      	movs	r3, #0
 800dee8:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");


	plpadata->is_low_power_auto_mode = 1;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2201      	movs	r2, #1
 800deee:	705a      	strb	r2, [r3, #1]


	plpadata->low_power_auto_range_count = 0;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2200      	movs	r2, #0
 800def4:	709a      	strb	r2, [r3, #2]


	pdynamic->system__sequence_config =
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	229b      	movs	r2, #155	; 0x9b
 800defa:	745a      	strb	r2, [r3, #17]

			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800defc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df00:	4618      	mov	r0, r3
 800df02:	371c      	adds	r7, #28
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr

0800df0c <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]



	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	3318      	adds	r3, #24
 800df18:	60fb      	str	r3, [r7, #12]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800df1a:	2300      	movs	r3, #0
 800df1c:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");


	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f893 2327 	ldrb.w	r2, [r3, #807]	; 0x327
	pdev->low_power_auto_data.saved_vhv_init =
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df2a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f893 2324 	ldrb.w	r2, [r3, #804]	; 0x324
	pdev->low_power_auto_data.saved_vhv_timeout =
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df3a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d


	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f893 3327 	ldrb.w	r3, [r3, #807]	; 0x327
 800df44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df48:	b2da      	uxtb	r2, r3
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f883 2327 	strb.w	r2, [r3, #807]	; 0x327

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800df56:	f003 0303 	and.w	r3, r3, #3
 800df5a:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df62:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800df6a:	4413      	add	r3, r2
 800df6c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

	pdev->gen_cfg.phasecal_config__override = 0x01;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2201      	movs	r2, #1
 800df78:	f883 236b 	strb.w	r2, [r3, #875]	; 0x36b
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df82:	f893 23a2 	ldrb.w	r2, [r3, #930]	; 0x3a2
	pdev->low_power_auto_data.first_run_phasecal_result =
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df8c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df96:	f893 243e 	ldrb.w	r2, [r3, #1086]	; 0x43e
	pdev->gen_cfg.cal_config__vcsel_start =
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f883 2365 	strb.w	r2, [r3, #869]	; 0x365

	LOG_FUNCTION_END(status);

	return status;
 800dfa0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3714      	adds	r7, #20
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <VL53L1_compute_histo_merge_nb>:



VL53L1_Error VL53L1_compute_histo_merge_nb(
	VL53L1_DEV        Dev,	uint8_t *histo_merge_nb)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b087      	sub	sp, #28
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	3318      	adds	r3, #24
 800dfbe:	613b      	str	r3, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	73fb      	strb	r3, [r7, #15]
	uint8_t i, timing;
	uint8_t sum = 0;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	75bb      	strb	r3, [r7, #22]

	timing = (pdev->hist_data.bin_seq[0] == 7 ? 1 : 0);
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 800dfce:	2b07      	cmp	r3, #7
 800dfd0:	bf0c      	ite	eq
 800dfd2:	2301      	moveq	r3, #1
 800dfd4:	2300      	movne	r3, #0
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800dfda:	2300      	movs	r3, #0
 800dfdc:	75fb      	strb	r3, [r7, #23]
 800dfde:	e019      	b.n	800e014 <VL53L1_compute_histo_merge_nb+0x64>
		if (pdev->multi_bins_rec[i][timing][7] > 0)
 800dfe0:	7df9      	ldrb	r1, [r7, #23]
 800dfe2:	7bbb      	ldrb	r3, [r7, #14]
 800dfe4:	6938      	ldr	r0, [r7, #16]
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	0052      	lsls	r2, r2, #1
 800dfea:	441a      	add	r2, r3
 800dfec:	0153      	lsls	r3, r2, #5
 800dfee:	461a      	mov	r2, r3
 800dff0:	460b      	mov	r3, r1
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	440b      	add	r3, r1
 800dff6:	019b      	lsls	r3, r3, #6
 800dff8:	4413      	add	r3, r2
 800dffa:	4403      	add	r3, r0
 800dffc:	f503 53e3 	add.w	r3, r3, #7264	; 0x1c60
 800e000:	3314      	adds	r3, #20
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	dd02      	ble.n	800e00e <VL53L1_compute_histo_merge_nb+0x5e>
			sum++;
 800e008:	7dbb      	ldrb	r3, [r7, #22]
 800e00a:	3301      	adds	r3, #1
 800e00c:	75bb      	strb	r3, [r7, #22]
	for (i = 0; i < VL53L1_BIN_REC_SIZE; i++)
 800e00e:	7dfb      	ldrb	r3, [r7, #23]
 800e010:	3301      	adds	r3, #1
 800e012:	75fb      	strb	r3, [r7, #23]
 800e014:	7dfb      	ldrb	r3, [r7, #23]
 800e016:	2b05      	cmp	r3, #5
 800e018:	d9e2      	bls.n	800dfe0 <VL53L1_compute_histo_merge_nb+0x30>
	*histo_merge_nb = sum;
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	7dba      	ldrb	r2, [r7, #22]
 800e01e:	701a      	strb	r2, [r3, #0]

	return status;
 800e020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e024:	4618      	mov	r0, r3
 800e026:	371c      	adds	r7, #28
 800e028:	46bd      	mov	sp, r7
 800e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02e:	4770      	bx	lr

0800e030 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800e030:	b480      	push	{r7}
 800e032:	b085      	sub	sp, #20
 800e034:	af00      	add	r7, sp, #0
 800e036:	4603      	mov	r3, r0
 800e038:	80fb      	strh	r3, [r7, #6]


	uint32_t  pll_period_us        = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency > 0)
 800e03e:	88fb      	ldrh	r3, [r7, #6]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d005      	beq.n	800e050 <VL53L1_calc_pll_period_us+0x20>
		pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800e044:	88fb      	ldrh	r3, [r7, #6]
 800e046:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e04a:	fb92 f3f3 	sdiv	r3, r2, r3
 800e04e:	60fb      	str	r3, [r7, #12]



	LOG_FUNCTION_END(0);

	return pll_period_us;
 800e050:	68fb      	ldr	r3, [r7, #12]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3714      	adds	r7, #20
 800e056:	46bd      	mov	sp, r7
 800e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05c:	4770      	bx	lr

0800e05e <VL53L1_duration_maths>:
uint32_t  VL53L1_duration_maths(
	uint32_t  pll_period_us,
	uint32_t  vcsel_parm_pclks,
	uint32_t  window_vclks,
	uint32_t  elapsed_mclks)
{
 800e05e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e062:	b089      	sub	sp, #36	; 0x24
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	603b      	str	r3, [r7, #0]


	uint64_t  tmp_long_int = 0;
 800e06e:	f04f 0200 	mov.w	r2, #0
 800e072:	f04f 0300 	mov.w	r3, #0
 800e076:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint32_t  duration_us  = 0;
 800e07a:	2300      	movs	r3, #0
 800e07c:	617b      	str	r3, [r7, #20]


	duration_us = window_vclks * pll_period_us;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	fb02 f303 	mul.w	r3, r2, r3
 800e086:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 12;
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	0b1b      	lsrs	r3, r3, #12
 800e08c:	617b      	str	r3, [r7, #20]


	tmp_long_int = (uint64_t)duration_us;
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	2200      	movs	r2, #0
 800e092:	469a      	mov	sl, r3
 800e094:	4693      	mov	fp, r2
 800e096:	e9c7 ab06 	strd	sl, fp, [r7, #24]


	duration_us = elapsed_mclks * vcsel_parm_pclks;
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	68ba      	ldr	r2, [r7, #8]
 800e09e:	fb02 f303 	mul.w	r3, r2, r3
 800e0a2:	617b      	str	r3, [r7, #20]


	duration_us = duration_us >> 4;
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	091b      	lsrs	r3, r3, #4
 800e0a8:	617b      	str	r3, [r7, #20]


	tmp_long_int = tmp_long_int * (uint64_t)duration_us;
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	4698      	mov	r8, r3
 800e0b0:	4691      	mov	r9, r2
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	fb08 f203 	mul.w	r2, r8, r3
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	fb09 f303 	mul.w	r3, r9, r3
 800e0be:	4413      	add	r3, r2
 800e0c0:	69ba      	ldr	r2, [r7, #24]
 800e0c2:	fba2 4508 	umull	r4, r5, r2, r8
 800e0c6:	442b      	add	r3, r5
 800e0c8:	461d      	mov	r5, r3
 800e0ca:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800e0ce:	e9c7 4506 	strd	r4, r5, [r7, #24]


	tmp_long_int = tmp_long_int >> 12;
 800e0d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e0d6:	f04f 0200 	mov.w	r2, #0
 800e0da:	f04f 0300 	mov.w	r3, #0
 800e0de:	0b02      	lsrs	r2, r0, #12
 800e0e0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800e0e4:	0b0b      	lsrs	r3, r1, #12
 800e0e6:	e9c7 2306 	strd	r2, r3, [r7, #24]


	if (tmp_long_int > 0xFFFFFFFF)
 800e0ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	d305      	bcc.n	800e0fe <VL53L1_duration_maths+0xa0>
		tmp_long_int = 0xFFFFFFFF;
 800e0f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f6:	f04f 0300 	mov.w	r3, #0
 800e0fa:	e9c7 2306 	strd	r2, r3, [r7, #24]

	duration_us  = (uint32_t)tmp_long_int;
 800e0fe:	69bb      	ldr	r3, [r7, #24]
 800e100:	617b      	str	r3, [r7, #20]

	return duration_us;
 800e102:	697b      	ldr	r3, [r7, #20]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3724      	adds	r7, #36	; 0x24
 800e108:	46bd      	mov	sp, r7
 800e10a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e10e:	4770      	bx	lr

0800e110 <VL53L1_events_per_spad_maths>:

uint32_t VL53L1_events_per_spad_maths(
	int32_t   VL53L1_p_013,
	uint16_t  num_spads,
	uint32_t  duration)
{
 800e110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e114:	b096      	sub	sp, #88	; 0x58
 800e116:	af00      	add	r7, sp, #0
 800e118:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e11a:	460b      	mov	r3, r1
 800e11c:	627a      	str	r2, [r7, #36]	; 0x24
 800e11e:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint64_t total_hist_counts  = 0;
 800e120:	f04f 0200 	mov.w	r2, #0
 800e124:	f04f 0300 	mov.w	r3, #0
 800e128:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_per_spad     = 0;
 800e12c:	f04f 0200 	mov.w	r2, #0
 800e130:	f04f 0300 	mov.w	r3, #0
 800e134:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	uint32_t rate_per_spad_kcps = 0;
 800e138:	2300      	movs	r3, #0
 800e13a:	647b      	str	r3, [r7, #68]	; 0x44





	uint64_t dividend = ((uint64_t)VL53L1_p_013
 800e13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13e:	17da      	asrs	r2, r3, #31
 800e140:	469a      	mov	sl, r3
 800e142:	4693      	mov	fp, r2
 800e144:	4652      	mov	r2, sl
 800e146:	465b      	mov	r3, fp
 800e148:	f04f 0000 	mov.w	r0, #0
 800e14c:	f04f 0100 	mov.w	r1, #0
 800e150:	0159      	lsls	r1, r3, #5
 800e152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e156:	0150      	lsls	r0, r2, #5
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	ebb2 040a 	subs.w	r4, r2, sl
 800e160:	eb63 050b 	sbc.w	r5, r3, fp
 800e164:	f04f 0200 	mov.w	r2, #0
 800e168:	f04f 0300 	mov.w	r3, #0
 800e16c:	00ab      	lsls	r3, r5, #2
 800e16e:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800e172:	00a2      	lsls	r2, r4, #2
 800e174:	4614      	mov	r4, r2
 800e176:	461d      	mov	r5, r3
 800e178:	eb14 080a 	adds.w	r8, r4, sl
 800e17c:	eb45 090b 	adc.w	r9, r5, fp
 800e180:	f04f 0200 	mov.w	r2, #0
 800e184:	f04f 0300 	mov.w	r3, #0
 800e188:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800e18c:	ea43 5358 	orr.w	r3, r3, r8, lsr #21
 800e190:	ea4f 22c8 	mov.w	r2, r8, lsl #11
 800e194:	4690      	mov	r8, r2
 800e196:	4699      	mov	r9, r3
 800e198:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
			* 1000 * 256);

	if (num_spads != 0)
 800e19c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00d      	beq.n	800e1be <VL53L1_events_per_spad_maths+0xae>
		total_hist_counts = do_division_u(
 800e1a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	61bb      	str	r3, [r7, #24]
 800e1a8:	61fa      	str	r2, [r7, #28]
 800e1aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e1ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800e1b2:	f7f2 f885 	bl	80002c0 <__aeabi_uldivmod>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
				dividend, (uint64_t)num_spads);



	if (duration > 0) {
 800e1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d02a      	beq.n	800e21a <VL53L1_events_per_spad_maths+0x10a>


		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e1c4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e1c8:	f04f 0200 	mov.w	r2, #0
 800e1cc:	f04f 0300 	mov.w	r3, #0
 800e1d0:	02cb      	lsls	r3, r1, #11
 800e1d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e1d6:	02c2      	lsls	r2, r0, #11
			+ ((uint64_t)duration / 2));
 800e1d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1da:	0849      	lsrs	r1, r1, #1
 800e1dc:	2000      	movs	r0, #0
 800e1de:	6139      	str	r1, [r7, #16]
 800e1e0:	6178      	str	r0, [r7, #20]
		uint64_t dividend = (((uint64_t)(total_hist_counts << 11))
 800e1e2:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800e1e6:	4621      	mov	r1, r4
 800e1e8:	1851      	adds	r1, r2, r1
 800e1ea:	6039      	str	r1, [r7, #0]
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	eb43 0101 	adc.w	r1, r3, r1
 800e1f2:	6079      	str	r1, [r7, #4]
 800e1f4:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e1f8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

		xtalk_per_spad = do_division_u(dividend, (uint64_t)duration);
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fe:	2200      	movs	r2, #0
 800e200:	60bb      	str	r3, [r7, #8]
 800e202:	60fa      	str	r2, [r7, #12]
 800e204:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e208:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800e20c:	f7f2 f858 	bl	80002c0 <__aeabi_uldivmod>
 800e210:	4602      	mov	r2, r0
 800e212:	460b      	mov	r3, r1
 800e214:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800e218:	e00b      	b.n	800e232 <VL53L1_events_per_spad_maths+0x122>
	} else {
		xtalk_per_spad =   (uint64_t)(total_hist_counts << 11);
 800e21a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e21e:	f04f 0200 	mov.w	r2, #0
 800e222:	f04f 0300 	mov.w	r3, #0
 800e226:	02cb      	lsls	r3, r1, #11
 800e228:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800e22c:	02c2      	lsls	r2, r0, #11
 800e22e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	}

	rate_per_spad_kcps = (uint32_t)xtalk_per_spad;
 800e232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e234:	647b      	str	r3, [r7, #68]	; 0x44

	return rate_per_spad_kcps;
 800e236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3758      	adds	r7, #88	; 0x58
 800e23c:	46bd      	mov	sp, r7
 800e23e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e242 <VL53L1_isqrt>:


uint32_t VL53L1_isqrt(uint32_t num)
{
 800e242:	b480      	push	{r7}
 800e244:	b085      	sub	sp, #20
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]



	uint32_t  res = 0;
 800e24a:	2300      	movs	r3, #0
 800e24c:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800e24e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e252:	60bb      	str	r3, [r7, #8]


	while (bit > num)
 800e254:	e002      	b.n	800e25c <VL53L1_isqrt+0x1a>
		bit >>= 2;
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	089b      	lsrs	r3, r3, #2
 800e25a:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	429a      	cmp	r2, r3
 800e262:	d8f8      	bhi.n	800e256 <VL53L1_isqrt+0x14>

	while (bit != 0) {
 800e264:	e017      	b.n	800e296 <VL53L1_isqrt+0x54>
		if (num >= res + bit)  {
 800e266:	68fa      	ldr	r2, [r7, #12]
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	4413      	add	r3, r2
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d30b      	bcc.n	800e28a <VL53L1_isqrt+0x48>
			num -= res + bit;
 800e272:	68fa      	ldr	r2, [r7, #12]
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	4413      	add	r3, r2
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	1ad3      	subs	r3, r2, r3
 800e27c:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	085b      	lsrs	r3, r3, #1
 800e282:	68ba      	ldr	r2, [r7, #8]
 800e284:	4413      	add	r3, r2
 800e286:	60fb      	str	r3, [r7, #12]
 800e288:	e002      	b.n	800e290 <VL53L1_isqrt+0x4e>
		} else {
			res >>= 1;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	085b      	lsrs	r3, r3, #1
 800e28e:	60fb      	str	r3, [r7, #12]
		}
		bit >>= 2;
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	089b      	lsrs	r3, r3, #2
 800e294:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1e4      	bne.n	800e266 <VL53L1_isqrt+0x24>
	}

	return res;
 800e29c:	68fb      	ldr	r3, [r7, #12]
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3714      	adds	r7, #20
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr

0800e2aa <VL53L1_hist_calc_zero_distance_phase>:


void  VL53L1_hist_calc_zero_distance_phase(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b084      	sub	sp, #16
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]


	uint32_t  period        = 0;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	60bb      	str	r3, [r7, #8]
	uint32_t  VL53L1_p_017         = 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata->VL53L1_p_009);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f000 faa5 	bl	800e810 <VL53L1_decode_vcsel_period>
 800e2c6:	4603      	mov	r3, r0
	period = 2048 *
 800e2c8:	02db      	lsls	r3, r3, #11
 800e2ca:	60bb      	str	r3, [r7, #8]

	VL53L1_p_017  = period;
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (uint32_t)pdata->phasecal_result__reference_phase;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	4413      	add	r3, r2
 800e2dc:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 += (2048 * (uint32_t)pdata->phasecal_result__vcsel_start);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e2e4:	02db      	lsls	r3, r3, #11
 800e2e6:	68fa      	ldr	r2, [r7, #12]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	60fb      	str	r3, [r7, #12]
	VL53L1_p_017 -= (2048 * (uint32_t)pdata->cal_config__vcsel_start);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e2f2:	02db      	lsls	r3, r3, #11
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	60fb      	str	r3, [r7, #12]

	if (period != 0)
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d009      	beq.n	800e314 <VL53L1_hist_calc_zero_distance_phase+0x6a>
		VL53L1_p_017  = VL53L1_p_017 % period;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	68ba      	ldr	r2, [r7, #8]
 800e304:	fbb3 f2f2 	udiv	r2, r3, r2
 800e308:	68b9      	ldr	r1, [r7, #8]
 800e30a:	fb01 f202 	mul.w	r2, r1, r2
 800e30e:	1a9b      	subs	r3, r3, r2
 800e310:	60fb      	str	r3, [r7, #12]
 800e312:	e001      	b.n	800e318 <VL53L1_hist_calc_zero_distance_phase+0x6e>
	else
		VL53L1_p_017 = 0;
 800e314:	2300      	movs	r3, #0
 800e316:	60fb      	str	r3, [r7, #12]

	pdata->zero_distance_phase = (uint16_t)VL53L1_p_017;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	b29a      	uxth	r2, r3
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	LOG_FUNCTION_END(0);
}
 800e322:	bf00      	nop
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}

0800e32a <VL53L1_hist_estimate_ambient_from_thresholded_bins>:


void  VL53L1_hist_estimate_ambient_from_thresholded_bins(
	int32_t                        ambient_threshold_sigma,
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e32a:	b580      	push	{r7, lr}
 800e32c:	b084      	sub	sp, #16
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
 800e332:	6039      	str	r1, [r7, #0]


	uint8_t  bin                      = 0;
 800e334:	2300      	movs	r3, #0
 800e336:	73fb      	strb	r3, [r7, #15]
	int32_t  VL53L1_p_032 = 0;
 800e338:	2300      	movs	r3, #0
 800e33a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	VL53L1_hist_find_min_max_bin_values(pdata);
 800e33c:	6838      	ldr	r0, [r7, #0]
 800e33e:	f000 fb90 	bl	800ea62 <VL53L1_hist_find_min_max_bin_values>



	VL53L1_p_032  =
		(int32_t)VL53L1_isqrt((uint32_t)pdata->min_bin_value);
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e348:	4618      	mov	r0, r3
 800e34a:	f7ff ff7a 	bl	800e242 <VL53L1_isqrt>
 800e34e:	4603      	mov	r3, r0
	VL53L1_p_032  =
 800e350:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 *= ambient_threshold_sigma;
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	fb02 f303 	mul.w	r3, r2, r3
 800e35a:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += 0x07;
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	3307      	adds	r3, #7
 800e360:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032  = VL53L1_p_032 >> 4;
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	111b      	asrs	r3, r3, #4
 800e366:	60bb      	str	r3, [r7, #8]
	VL53L1_p_032 += pdata->min_bin_value;
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e36e:	68ba      	ldr	r2, [r7, #8]
 800e370:	4413      	add	r3, r2
 800e372:	60bb      	str	r3, [r7, #8]



	pdata->number_of_ambient_samples = 0;
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	2200      	movs	r2, #0
 800e378:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum        = 0;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	2200      	movs	r2, #0
 800e380:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e384:	2300      	movs	r3, #0
 800e386:	73fb      	strb	r3, [r7, #15]
 800e388:	e01e      	b.n	800e3c8 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x9e>
		if (pdata->bin_data[bin] < VL53L1_p_032) {
 800e38a:	7bfa      	ldrb	r2, [r7, #15]
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	3206      	adds	r2, #6
 800e390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	429a      	cmp	r2, r3
 800e398:	dd13      	ble.n	800e3c2 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x98>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800e3a0:	7bf9      	ldrb	r1, [r7, #15]
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	3106      	adds	r1, #6
 800e3a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e3aa:	441a      	add	r2, r3
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			pdata->number_of_ambient_samples++;
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++)
 800e3c2:	7bfb      	ldrb	r3, [r7, #15]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	73fb      	strb	r3, [r7, #15]
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	7a9b      	ldrb	r3, [r3, #10]
 800e3cc:	7bfa      	ldrb	r2, [r7, #15]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d3db      	bcc.n	800e38a <VL53L1_hist_estimate_ambient_from_thresholded_bins+0x60>
		}



	if (pdata->number_of_ambient_samples > 0) {
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d01c      	beq.n	800e416 <VL53L1_hist_estimate_ambient_from_thresholded_bins+0xec>
		pdata->VL53L1_p_004 =
			pdata->ambient_events_sum;
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		pdata->VL53L1_p_004 =
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			((int32_t)pdata->number_of_ambient_samples/2);
 800e3ee:	683a      	ldr	r2, [r7, #0]
 800e3f0:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 800e3f4:	0852      	lsrs	r2, r2, #1
 800e3f6:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800e3f8:	441a      	add	r2, r3
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_samples;
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
		pdata->VL53L1_p_004 /=
 800e40c:	fb93 f2f2 	sdiv	r2, r3, r2
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	}

	LOG_FUNCTION_END(0);
}
 800e416:	bf00      	nop
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <VL53L1_hist_remove_ambient_bins>:


void  VL53L1_hist_remove_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800e41e:	b480      	push	{r7}
 800e420:	b085      	sub	sp, #20
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]



	uint8_t bin = 0;
 800e426:	2300      	movs	r3, #0
 800e428:	73fb      	strb	r3, [r7, #15]
	uint8_t lc = 0;
 800e42a:	2300      	movs	r3, #0
 800e42c:	73bb      	strb	r3, [r7, #14]
	uint8_t i = 0;
 800e42e:	2300      	movs	r3, #0
 800e430:	737b      	strb	r3, [r7, #13]



	if ((pdata->bin_seq[0] & 0x07) == 0x07) {
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	7b1b      	ldrb	r3, [r3, #12]
 800e436:	f003 0307 	and.w	r3, r3, #7
 800e43a:	2b07      	cmp	r3, #7
 800e43c:	d13a      	bne.n	800e4b4 <VL53L1_hist_remove_ambient_bins+0x96>

		i = 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e442:	2300      	movs	r3, #0
 800e444:	73bb      	strb	r3, [r7, #14]
 800e446:	e01f      	b.n	800e488 <VL53L1_hist_remove_ambient_bins+0x6a>
			if ((pdata->bin_seq[lc] & 0x07) != 0x07) {
 800e448:	7bbb      	ldrb	r3, [r7, #14]
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	4413      	add	r3, r2
 800e44e:	7b1b      	ldrb	r3, [r3, #12]
 800e450:	f003 0307 	and.w	r3, r3, #7
 800e454:	2b07      	cmp	r3, #7
 800e456:	d014      	beq.n	800e482 <VL53L1_hist_remove_ambient_bins+0x64>
				pdata->bin_seq[i] = pdata->bin_seq[lc];
 800e458:	7bba      	ldrb	r2, [r7, #14]
 800e45a:	7b7b      	ldrb	r3, [r7, #13]
 800e45c:	6879      	ldr	r1, [r7, #4]
 800e45e:	440a      	add	r2, r1
 800e460:	7b11      	ldrb	r1, [r2, #12]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	4413      	add	r3, r2
 800e466:	460a      	mov	r2, r1
 800e468:	731a      	strb	r2, [r3, #12]
				pdata->bin_rep[i] = pdata->bin_rep[lc];
 800e46a:	7bba      	ldrb	r2, [r7, #14]
 800e46c:	7b7b      	ldrb	r3, [r7, #13]
 800e46e:	6879      	ldr	r1, [r7, #4]
 800e470:	440a      	add	r2, r1
 800e472:	7c91      	ldrb	r1, [r2, #18]
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	4413      	add	r3, r2
 800e478:	460a      	mov	r2, r1
 800e47a:	749a      	strb	r2, [r3, #18]
				i++;
 800e47c:	7b7b      	ldrb	r3, [r7, #13]
 800e47e:	3301      	adds	r3, #1
 800e480:	737b      	strb	r3, [r7, #13]
		for (lc = 0; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e482:	7bbb      	ldrb	r3, [r7, #14]
 800e484:	3301      	adds	r3, #1
 800e486:	73bb      	strb	r3, [r7, #14]
 800e488:	7bbb      	ldrb	r3, [r7, #14]
 800e48a:	2b05      	cmp	r3, #5
 800e48c:	d9dc      	bls.n	800e448 <VL53L1_hist_remove_ambient_bins+0x2a>
			}
		}



		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e48e:	7b7b      	ldrb	r3, [r7, #13]
 800e490:	73bb      	strb	r3, [r7, #14]
 800e492:	e00c      	b.n	800e4ae <VL53L1_hist_remove_ambient_bins+0x90>
			pdata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE + 1;
 800e494:	7bbb      	ldrb	r3, [r7, #14]
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	4413      	add	r3, r2
 800e49a:	2210      	movs	r2, #16
 800e49c:	731a      	strb	r2, [r3, #12]
			pdata->bin_rep[lc] = 0;
 800e49e:	7bbb      	ldrb	r3, [r7, #14]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	4413      	add	r3, r2
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	749a      	strb	r2, [r3, #18]
		for (lc = i; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH; lc++) {
 800e4a8:	7bbb      	ldrb	r3, [r7, #14]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	73bb      	strb	r3, [r7, #14]
 800e4ae:	7bbb      	ldrb	r3, [r7, #14]
 800e4b0:	2b05      	cmp	r3, #5
 800e4b2:	d9ef      	bls.n	800e494 <VL53L1_hist_remove_ambient_bins+0x76>
		}
	}

	if (pdata->number_of_ambient_bins > 0) {
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	7adb      	ldrb	r3, [r3, #11]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d023      	beq.n	800e504 <VL53L1_hist_remove_ambient_bins+0xe6>


		for (bin = pdata->number_of_ambient_bins;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	7adb      	ldrb	r3, [r3, #11]
 800e4c0:	73fb      	strb	r3, [r7, #15]
 800e4c2:	e00f      	b.n	800e4e4 <VL53L1_hist_remove_ambient_bins+0xc6>
				bin < pdata->VL53L1_p_023; bin++) {
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
				pdata->bin_data[bin];
 800e4c4:	7bf9      	ldrb	r1, [r7, #15]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e4c6:	7bfb      	ldrb	r3, [r7, #15]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	7ad2      	ldrb	r2, [r2, #11]
 800e4cc:	1a9a      	subs	r2, r3, r2
				pdata->bin_data[bin];
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	3106      	adds	r1, #6
 800e4d2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
			pdata->bin_data[bin-pdata->number_of_ambient_bins] =
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	3206      	adds	r2, #6
 800e4da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				bin < pdata->VL53L1_p_023; bin++) {
 800e4de:	7bfb      	ldrb	r3, [r7, #15]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	73fb      	strb	r3, [r7, #15]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	7a5b      	ldrb	r3, [r3, #9]
		for (bin = pdata->number_of_ambient_bins;
 800e4e8:	7bfa      	ldrb	r2, [r7, #15]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d3ea      	bcc.n	800e4c4 <VL53L1_hist_remove_ambient_bins+0xa6>
		}


		pdata->VL53L1_p_024 =
				pdata->VL53L1_p_024 -
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	7a9a      	ldrb	r2, [r3, #10]
				pdata->number_of_ambient_bins;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	7adb      	ldrb	r3, [r3, #11]
				pdata->VL53L1_p_024 -
 800e4f6:	1ad3      	subs	r3, r2, r3
 800e4f8:	b2da      	uxtb	r2, r3
		pdata->VL53L1_p_024 =
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	729a      	strb	r2, [r3, #10]
		pdata->number_of_ambient_bins = 0;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	2200      	movs	r2, #0
 800e502:	72da      	strb	r2, [r3, #11]
	}
}
 800e504:	bf00      	nop
 800e506:	3714      	adds	r7, #20
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <VL53L1_calc_pll_period_mm>:


uint32_t VL53L1_calc_pll_period_mm(
	uint16_t fast_osc_frequency)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	4603      	mov	r3, r0
 800e518:	80fb      	strh	r3, [r7, #6]


	uint32_t pll_period_us = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	60fb      	str	r3, [r7, #12]
	uint32_t pll_period_mm = 0;
 800e51e:	2300      	movs	r3, #0
 800e520:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e522:	88fb      	ldrh	r3, [r7, #6]
 800e524:	4618      	mov	r0, r3
 800e526:	f7ff fd83 	bl	800e030 <VL53L1_calc_pll_period_us>
 800e52a:	60f8      	str	r0, [r7, #12]



	pll_period_mm =
			VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8 *
			(pll_period_us >> 2);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	089b      	lsrs	r3, r3, #2
	pll_period_mm =
 800e530:	f249 2257 	movw	r2, #37463	; 0x9257
 800e534:	fb02 f303 	mul.w	r3, r2, r3
 800e538:	60bb      	str	r3, [r7, #8]


	pll_period_mm = (pll_period_mm + (0x01<<15)) >> 16;
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800e540:	0c1b      	lsrs	r3, r3, #16
 800e542:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END(0);

	return pll_period_mm;
 800e544:	68bb      	ldr	r3, [r7, #8]
}
 800e546:	4618      	mov	r0, r3
 800e548:	3710      	adds	r7, #16
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}

0800e54e <VL53L1_rate_maths>:


uint16_t VL53L1_rate_maths(
	int32_t   VL53L1_p_008,
	uint32_t  time_us)
{
 800e54e:	b480      	push	{r7}
 800e550:	b087      	sub	sp, #28
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
 800e556:	6039      	str	r1, [r7, #0]


	uint32_t  tmp_int   = 0;
 800e558:	2300      	movs	r3, #0
 800e55a:	617b      	str	r3, [r7, #20]
	uint32_t  frac_bits = 7;
 800e55c:	2307      	movs	r3, #7
 800e55e:	613b      	str	r3, [r7, #16]
	uint16_t  rate_mcps = 0;
 800e560:	2300      	movs	r3, #0
 800e562:	81fb      	strh	r3, [r7, #14]



	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_MAX)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e56a:	db03      	blt.n	800e574 <VL53L1_rate_maths+0x26>
		tmp_int = VL53L1_SPAD_TOTAL_COUNT_MAX;
 800e56c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800e570:	617b      	str	r3, [r7, #20]
 800e572:	e004      	b.n	800e57e <VL53L1_rate_maths+0x30>
	else if (VL53L1_p_008 > 0)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	dd01      	ble.n	800e57e <VL53L1_rate_maths+0x30>
		tmp_int = (uint32_t)VL53L1_p_008;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	617b      	str	r3, [r7, #20]




	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e584:	dd02      	ble.n	800e58c <VL53L1_rate_maths+0x3e>
		frac_bits = 3;
 800e586:	2303      	movs	r3, #3
 800e588:	613b      	str	r3, [r7, #16]
 800e58a:	e001      	b.n	800e590 <VL53L1_rate_maths+0x42>
	else
		frac_bits = 7;
 800e58c:	2307      	movs	r3, #7
 800e58e:	613b      	str	r3, [r7, #16]


	if (time_us > 0)
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d009      	beq.n	800e5aa <VL53L1_rate_maths+0x5c>
		tmp_int = ((tmp_int << frac_bits) + (time_us / 2)) / time_us;
 800e596:	697a      	ldr	r2, [r7, #20]
 800e598:	693b      	ldr	r3, [r7, #16]
 800e59a:	409a      	lsls	r2, r3
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	085b      	lsrs	r3, r3, #1
 800e5a0:	441a      	add	r2, r3
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5a8:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_008 > VL53L1_SPAD_TOTAL_COUNT_RES_THRES)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e5b0:	dd02      	ble.n	800e5b8 <VL53L1_rate_maths+0x6a>
		tmp_int = tmp_int << 4;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	011b      	lsls	r3, r3, #4
 800e5b6:	617b      	str	r3, [r7, #20]



	if (tmp_int > 0xFFFF)
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5be:	d302      	bcc.n	800e5c6 <VL53L1_rate_maths+0x78>
		tmp_int = 0xFFFF;
 800e5c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5c4:	617b      	str	r3, [r7, #20]

	rate_mcps =  (uint16_t)tmp_int;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	81fb      	strh	r3, [r7, #14]

	return rate_mcps;
 800e5ca:	89fb      	ldrh	r3, [r7, #14]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	371c      	adds	r7, #28
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <VL53L1_rate_per_spad_maths>:
uint16_t VL53L1_rate_per_spad_maths(
	uint32_t  frac_bits,
	uint32_t  peak_count_rate,
	uint16_t  num_spads,
	uint32_t  max_output_value)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b087      	sub	sp, #28
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	60f8      	str	r0, [r7, #12]
 800e5e0:	60b9      	str	r1, [r7, #8]
 800e5e2:	603b      	str	r3, [r7, #0]
 800e5e4:	4613      	mov	r3, r2
 800e5e6:	80fb      	strh	r3, [r7, #6]

	uint32_t  tmp_int   = 0;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	617b      	str	r3, [r7, #20]


	uint16_t  rate_per_spad = 0;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	827b      	strh	r3, [r7, #18]





	if (num_spads > 0) {
 800e5f0:	88fb      	ldrh	r3, [r7, #6]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d010      	beq.n	800e618 <VL53L1_rate_per_spad_maths+0x40>
		tmp_int = (peak_count_rate << 8) << frac_bits;
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	021a      	lsls	r2, r3, #8
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	fa02 f303 	lsl.w	r3, r2, r3
 800e600:	617b      	str	r3, [r7, #20]
		tmp_int = (tmp_int +
			((uint32_t)num_spads / 2)) /
 800e602:	88fb      	ldrh	r3, [r7, #6]
 800e604:	085b      	lsrs	r3, r3, #1
 800e606:	b29b      	uxth	r3, r3
 800e608:	461a      	mov	r2, r3
		tmp_int = (tmp_int +
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	441a      	add	r2, r3
				(uint32_t)num_spads;
 800e60e:	88fb      	ldrh	r3, [r7, #6]
		tmp_int = (tmp_int +
 800e610:	fbb2 f3f3 	udiv	r3, r2, r3
 800e614:	617b      	str	r3, [r7, #20]
 800e616:	e004      	b.n	800e622 <VL53L1_rate_per_spad_maths+0x4a>
	} else {
		tmp_int = ((peak_count_rate) << frac_bits);
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	fa02 f303 	lsl.w	r3, r2, r3
 800e620:	617b      	str	r3, [r7, #20]
	}



	if (tmp_int > max_output_value)
 800e622:	697a      	ldr	r2, [r7, #20]
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	429a      	cmp	r2, r3
 800e628:	d901      	bls.n	800e62e <VL53L1_rate_per_spad_maths+0x56>
		tmp_int = max_output_value;
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	617b      	str	r3, [r7, #20]

	rate_per_spad = (uint16_t)tmp_int;
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	827b      	strh	r3, [r7, #18]

	return rate_per_spad;
 800e632:	8a7b      	ldrh	r3, [r7, #18]
}
 800e634:	4618      	mov	r0, r3
 800e636:	371c      	adds	r7, #28
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <VL53L1_range_maths>:
	uint16_t  VL53L1_p_017,
	uint16_t  zero_distance_phase,
	uint8_t   fractional_bits,
	int32_t   gain_factor,
	int32_t   range_offset_mm)
{
 800e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e644:	b093      	sub	sp, #76	; 0x4c
 800e646:	af00      	add	r7, sp, #0
 800e648:	461e      	mov	r6, r3
 800e64a:	4603      	mov	r3, r0
 800e64c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e64e:	460b      	mov	r3, r1
 800e650:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e652:	4613      	mov	r3, r2
 800e654:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e656:	4633      	mov	r3, r6
 800e658:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	uint32_t    pll_period_us = 0;
 800e65c:	2300      	movs	r3, #0
 800e65e:	643b      	str	r3, [r7, #64]	; 0x40
	int64_t     tmp_long_int  = 0;
 800e660:	f04f 0200 	mov.w	r2, #0
 800e664:	f04f 0300 	mov.w	r3, #0
 800e668:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	int32_t     range_mm      = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	647b      	str	r3, [r7, #68]	; 0x44
	int32_t     range_mm_10   = 0;
 800e670:	2300      	movs	r3, #0
 800e672:	637b      	str	r3, [r7, #52]	; 0x34



	pll_period_us  = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800e674:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e676:	4618      	mov	r0, r3
 800e678:	f7ff fcda 	bl	800e030 <VL53L1_calc_pll_period_us>
 800e67c:	6438      	str	r0, [r7, #64]	; 0x40



	tmp_long_int = (int64_t)VL53L1_p_017 - (int64_t)zero_distance_phase;
 800e67e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e680:	2200      	movs	r2, #0
 800e682:	623b      	str	r3, [r7, #32]
 800e684:	627a      	str	r2, [r7, #36]	; 0x24
 800e686:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e688:	2200      	movs	r2, #0
 800e68a:	61bb      	str	r3, [r7, #24]
 800e68c:	61fa      	str	r2, [r7, #28]
 800e68e:	6a3b      	ldr	r3, [r7, #32]
 800e690:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e694:	4602      	mov	r2, r0
 800e696:	1a9b      	subs	r3, r3, r2
 800e698:	613b      	str	r3, [r7, #16]
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	460a      	mov	r2, r1
 800e69e:	eb63 0302 	sbc.w	r3, r3, r2
 800e6a2:	617b      	str	r3, [r7, #20]
 800e6a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e6a8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * (int64_t)pll_period_us;
 800e6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	469a      	mov	sl, r3
 800e6b2:	4693      	mov	fp, r2
 800e6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b6:	fb0a f203 	mul.w	r2, sl, r3
 800e6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6bc:	fb0b f303 	mul.w	r3, fp, r3
 800e6c0:	4413      	add	r3, r2
 800e6c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6c4:	fba2 890a 	umull	r8, r9, r2, sl
 800e6c8:	444b      	add	r3, r9
 800e6ca:	4699      	mov	r9, r3
 800e6cc:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800e6d0:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 9);
 800e6d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	da08      	bge.n	800e6ee <VL53L1_range_maths+0xae>
 800e6dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800e6e0:	1851      	adds	r1, r2, r1
 800e6e2:	60b9      	str	r1, [r7, #8]
 800e6e4:	f143 0300 	adc.w	r3, r3, #0
 800e6e8:	60fb      	str	r3, [r7, #12]
 800e6ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e6ee:	f04f 0000 	mov.w	r0, #0
 800e6f2:	f04f 0100 	mov.w	r1, #0
 800e6f6:	0a50      	lsrs	r0, r2, #9
 800e6f8:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800e6fc:	1259      	asrs	r1, r3, #9
 800e6fe:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int * VL53L1_SPEED_OF_LIGHT_IN_AIR_DIV_8;
 800e702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e704:	f249 2257 	movw	r2, #37463	; 0x9257
 800e708:	fb03 f202 	mul.w	r2, r3, r2
 800e70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70e:	2100      	movs	r1, #0
 800e710:	fb01 f303 	mul.w	r3, r1, r3
 800e714:	4413      	add	r3, r2
 800e716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e718:	f249 2157 	movw	r1, #37463	; 0x9257
 800e71c:	fba2 4501 	umull	r4, r5, r2, r1
 800e720:	442b      	add	r3, r5
 800e722:	461d      	mov	r5, r3
 800e724:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800e728:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38



	tmp_long_int =  tmp_long_int / (0x01 << 22);
 800e72c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e730:	2b00      	cmp	r3, #0
 800e732:	da07      	bge.n	800e744 <VL53L1_range_maths+0x104>
 800e734:	4934      	ldr	r1, [pc, #208]	; (800e808 <VL53L1_range_maths+0x1c8>)
 800e736:	1851      	adds	r1, r2, r1
 800e738:	6039      	str	r1, [r7, #0]
 800e73a:	f143 0300 	adc.w	r3, r3, #0
 800e73e:	607b      	str	r3, [r7, #4]
 800e740:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e744:	f04f 0000 	mov.w	r0, #0
 800e748:	f04f 0100 	mov.w	r1, #0
 800e74c:	0d90      	lsrs	r0, r2, #22
 800e74e:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
 800e752:	1599      	asrs	r1, r3, #22
 800e754:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38


	range_mm  = (int32_t)tmp_long_int + range_offset_mm;
 800e758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e75a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e75c:	4413      	add	r3, r2
 800e75e:	647b      	str	r3, [r7, #68]	; 0x44


	range_mm *= gain_factor;
 800e760:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e762:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e764:	fb02 f303 	mul.w	r3, r2, r3
 800e768:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm += 0x0400;
 800e76a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e76c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e770:	647b      	str	r3, [r7, #68]	; 0x44
	range_mm /= 0x0800;
 800e772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e774:	2b00      	cmp	r3, #0
 800e776:	da01      	bge.n	800e77c <VL53L1_range_maths+0x13c>
 800e778:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800e77c:	12db      	asrs	r3, r3, #11
 800e77e:	647b      	str	r3, [r7, #68]	; 0x44


	if (fractional_bits == 0) {
 800e780:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e784:	2b00      	cmp	r3, #0
 800e786:	d130      	bne.n	800e7ea <VL53L1_range_maths+0x1aa>
		range_mm_10 = range_mm * 10;
 800e788:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e78a:	4613      	mov	r3, r2
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	4413      	add	r3, r2
 800e790:	005b      	lsls	r3, r3, #1
 800e792:	637b      	str	r3, [r7, #52]	; 0x34
		range_mm_10 = range_mm_10 / (0x01 << 2);
 800e794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e796:	2b00      	cmp	r3, #0
 800e798:	da00      	bge.n	800e79c <VL53L1_range_maths+0x15c>
 800e79a:	3303      	adds	r3, #3
 800e79c:	109b      	asrs	r3, r3, #2
 800e79e:	637b      	str	r3, [r7, #52]	; 0x34
		if ((range_mm_10 % 10) < 5)
 800e7a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e7a2:	4b1a      	ldr	r3, [pc, #104]	; (800e80c <VL53L1_range_maths+0x1cc>)
 800e7a4:	fb83 2301 	smull	r2, r3, r3, r1
 800e7a8:	109a      	asrs	r2, r3, #2
 800e7aa:	17cb      	asrs	r3, r1, #31
 800e7ac:	1ad2      	subs	r2, r2, r3
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	4413      	add	r3, r2
 800e7b4:	005b      	lsls	r3, r3, #1
 800e7b6:	1aca      	subs	r2, r1, r3
 800e7b8:	2a04      	cmp	r2, #4
 800e7ba:	dc09      	bgt.n	800e7d0 <VL53L1_range_maths+0x190>
			range_mm = (int16_t)(range_mm_10 / 10);
 800e7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7be:	4a13      	ldr	r2, [pc, #76]	; (800e80c <VL53L1_range_maths+0x1cc>)
 800e7c0:	fb82 1203 	smull	r1, r2, r2, r3
 800e7c4:	1092      	asrs	r2, r2, #2
 800e7c6:	17db      	asrs	r3, r3, #31
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	b21b      	sxth	r3, r3
 800e7cc:	647b      	str	r3, [r7, #68]	; 0x44
 800e7ce:	e015      	b.n	800e7fc <VL53L1_range_maths+0x1bc>
		else
			range_mm = (int16_t)(range_mm_10 / 10 + 1);
 800e7d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7d2:	4a0e      	ldr	r2, [pc, #56]	; (800e80c <VL53L1_range_maths+0x1cc>)
 800e7d4:	fb82 1203 	smull	r1, r2, r2, r3
 800e7d8:	1092      	asrs	r2, r2, #2
 800e7da:	17db      	asrs	r3, r3, #31
 800e7dc:	1ad3      	subs	r3, r2, r3
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	b21b      	sxth	r3, r3
 800e7e6:	647b      	str	r3, [r7, #68]	; 0x44
 800e7e8:	e008      	b.n	800e7fc <VL53L1_range_maths+0x1bc>
	} else if (fractional_bits == 1)
 800e7ea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d104      	bne.n	800e7fc <VL53L1_range_maths+0x1bc>
		range_mm = range_mm / (0x01 << 1);
 800e7f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7f4:	0fda      	lsrs	r2, r3, #31
 800e7f6:	4413      	add	r3, r2
 800e7f8:	105b      	asrs	r3, r3, #1
 800e7fa:	647b      	str	r3, [r7, #68]	; 0x44

	return range_mm;
 800e7fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	374c      	adds	r7, #76	; 0x4c
 800e802:	46bd      	mov	sp, r7
 800e804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e808:	003fffff 	.word	0x003fffff
 800e80c:	66666667 	.word	0x66666667

0800e810 <VL53L1_decode_vcsel_period>:


uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800e810:	b480      	push	{r7}
 800e812:	b085      	sub	sp, #20
 800e814:	af00      	add	r7, sp, #0
 800e816:	4603      	mov	r3, r0
 800e818:	71fb      	strb	r3, [r7, #7]


	uint8_t VL53L1_p_031 = 0;
 800e81a:	2300      	movs	r3, #0
 800e81c:	73fb      	strb	r3, [r7, #15]

	VL53L1_p_031 = (vcsel_period_reg + 1) << 1;
 800e81e:	79fb      	ldrb	r3, [r7, #7]
 800e820:	3301      	adds	r3, #1
 800e822:	b2db      	uxtb	r3, r3
 800e824:	005b      	lsls	r3, r3, #1
 800e826:	73fb      	strb	r3, [r7, #15]

	return VL53L1_p_031;
 800e828:	7bfb      	ldrb	r3, [r7, #15]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3714      	adds	r7, #20
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr

0800e836 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>:


void VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
		VL53L1_xtalk_histogram_shape_t *pxtalk,
		VL53L1_histogram_bin_data_t    *phist)
{
 800e836:	b480      	push	{r7}
 800e838:	b083      	sub	sp, #12
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	6039      	str	r1, [r7, #0]


	phist->cal_config__vcsel_start =
			pxtalk->cal_config__vcsel_start;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
	phist->cal_config__vcsel_start =
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	phist->VL53L1_p_019 =
			pxtalk->VL53L1_p_019;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
	phist->VL53L1_p_019 =
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	phist->VL53L1_p_022 =
			pxtalk->VL53L1_p_022;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	7a1a      	ldrb	r2, [r3, #8]
	phist->VL53L1_p_022 =
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	721a      	strb	r2, [r3, #8]

	phist->phasecal_result__reference_phase   =
			pxtalk->phasecal_result__reference_phase;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
	phist->phasecal_result__reference_phase   =
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	phist->phasecal_result__vcsel_start       =
			pxtalk->phasecal_result__vcsel_start;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	phist->phasecal_result__vcsel_start       =
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

	phist->vcsel_width =
			pxtalk->vcsel_width;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
	phist->vcsel_width =
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	phist->zero_distance_phase =
			pxtalk->zero_distance_phase;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
	phist->zero_distance_phase =
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	phist->zone_id      = pxtalk->zone_id;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	781a      	ldrb	r2, [r3, #0]
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	709a      	strb	r2, [r3, #2]
	phist->VL53L1_p_023  = pxtalk->VL53L1_p_023;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	7a5a      	ldrb	r2, [r3, #9]
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	725a      	strb	r2, [r3, #9]
	phist->time_stamp   = pxtalk->time_stamp;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	685a      	ldr	r2, [r3, #4]
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	605a      	str	r2, [r3, #4]
}
 800e8a6:	bf00      	nop
 800e8a8:	370c      	adds	r7, #12
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr

0800e8b2 <VL53L1_init_histogram_bin_data_struct>:

void VL53L1_init_histogram_bin_data_struct(
	int32_t                      bin_value,
	uint16_t                     VL53L1_p_024,
	VL53L1_histogram_bin_data_t *pdata)
{
 800e8b2:	b480      	push	{r7}
 800e8b4:	b087      	sub	sp, #28
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	60f8      	str	r0, [r7, #12]
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	607a      	str	r2, [r7, #4]
 800e8be:	817b      	strh	r3, [r7, #10]



	uint16_t          i = 0;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	82fb      	strh	r3, [r7, #22]

	pdata->cfg_device_state          = VL53L1_DEVICESTATE_SW_STANDBY;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2203      	movs	r2, #3
 800e8c8:	701a      	strb	r2, [r3, #0]
	pdata->rd_device_state           = VL53L1_DEVICESTATE_SW_STANDBY;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2203      	movs	r2, #3
 800e8ce:	705a      	strb	r2, [r3, #1]

	pdata->zone_id                   = 0;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	709a      	strb	r2, [r3, #2]
	pdata->time_stamp                = 0;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2200      	movs	r2, #0
 800e8da:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_022                 = 0;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2200      	movs	r2, #0
 800e8e0:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_023               = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2218      	movs	r2, #24
 800e8e6:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_024            = (uint8_t)VL53L1_p_024;
 800e8e8:	897b      	ldrh	r3, [r7, #10]
 800e8ea:	b2da      	uxtb	r2, r3
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	729a      	strb	r2, [r3, #10]
	pdata->number_of_ambient_bins    = 0;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	72da      	strb	r2, [r3, #11]

	pdata->result__interrupt_status           = 0;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	pdata->result__range_status               = 0;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
	pdata->result__report_status              = 0;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2200      	movs	r2, #0
 800e90a:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	pdata->result__stream_count               = 0;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b

	pdata->result__dss_actual_effective_spads = 0;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2200      	movs	r2, #0
 800e91a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	pdata->phasecal_result__reference_phase   = 0;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2200      	movs	r2, #0
 800e922:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
	pdata->phasecal_result__vcsel_start       = 0;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	pdata->cal_config__vcsel_start            = 0;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	pdata->vcsel_width                        = 0;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2200      	movs	r2, #0
 800e93a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	pdata->VL53L1_p_009                       = 0;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	pdata->VL53L1_p_019                = 0;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	pdata->total_periods_elapsed              = 0;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	pdata->min_bin_value                      = 0;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	pdata->max_bin_value                      = 0;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pdata->zero_distance_phase                = 0;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2200      	movs	r2, #0
 800e96a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	pdata->number_of_ambient_samples          = 0;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2200      	movs	r2, #0
 800e972:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	pdata->ambient_events_sum                 = 0;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	2200      	movs	r2, #0
 800e97a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pdata->VL53L1_p_004             = 0;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e986:	2300      	movs	r3, #0
 800e988:	82fb      	strh	r3, [r7, #22]
 800e98a:	e009      	b.n	800e9a0 <VL53L1_init_histogram_bin_data_struct+0xee>
		pdata->bin_seq[i] = (uint8_t)i;
 800e98c:	8afb      	ldrh	r3, [r7, #22]
 800e98e:	8afa      	ldrh	r2, [r7, #22]
 800e990:	b2d1      	uxtb	r1, r2
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	4413      	add	r3, r2
 800e996:	460a      	mov	r2, r1
 800e998:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e99a:	8afb      	ldrh	r3, [r7, #22]
 800e99c:	3301      	adds	r3, #1
 800e99e:	82fb      	strh	r3, [r7, #22]
 800e9a0:	8afb      	ldrh	r3, [r7, #22]
 800e9a2:	2b05      	cmp	r3, #5
 800e9a4:	d9f2      	bls.n	800e98c <VL53L1_init_histogram_bin_data_struct+0xda>

	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	82fb      	strh	r3, [r7, #22]
 800e9aa:	e007      	b.n	800e9bc <VL53L1_init_histogram_bin_data_struct+0x10a>
		pdata->bin_rep[i] = 1;
 800e9ac:	8afb      	ldrh	r3, [r7, #22]
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	749a      	strb	r2, [r3, #18]
	for (i = 0; i < VL53L1_MAX_BIN_SEQUENCE_LENGTH; i++)
 800e9b6:	8afb      	ldrh	r3, [r7, #22]
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	82fb      	strh	r3, [r7, #22]
 800e9bc:	8afb      	ldrh	r3, [r7, #22]
 800e9be:	2b05      	cmp	r3, #5
 800e9c0:	d9f4      	bls.n	800e9ac <VL53L1_init_histogram_bin_data_struct+0xfa>


	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	82fb      	strh	r3, [r7, #22]
 800e9c6:	e013      	b.n	800e9f0 <VL53L1_init_histogram_bin_data_struct+0x13e>
		if (i < VL53L1_p_024)
 800e9c8:	8afa      	ldrh	r2, [r7, #22]
 800e9ca:	897b      	ldrh	r3, [r7, #10]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	d206      	bcs.n	800e9de <VL53L1_init_histogram_bin_data_struct+0x12c>
			pdata->bin_data[i] = bin_value;
 800e9d0:	8afa      	ldrh	r2, [r7, #22]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	3206      	adds	r2, #6
 800e9d6:	68f9      	ldr	r1, [r7, #12]
 800e9d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e9dc:	e005      	b.n	800e9ea <VL53L1_init_histogram_bin_data_struct+0x138>
		else
			pdata->bin_data[i] = 0;
 800e9de:	8afa      	ldrh	r2, [r7, #22]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	3206      	adds	r2, #6
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < VL53L1_HISTOGRAM_BUFFER_SIZE; i++)
 800e9ea:	8afb      	ldrh	r3, [r7, #22]
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	82fb      	strh	r3, [r7, #22]
 800e9f0:	8afb      	ldrh	r3, [r7, #22]
 800e9f2:	2b17      	cmp	r3, #23
 800e9f4:	d9e8      	bls.n	800e9c8 <VL53L1_init_histogram_bin_data_struct+0x116>


}
 800e9f6:	bf00      	nop
 800e9f8:	bf00      	nop
 800e9fa:	371c      	adds	r7, #28
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	607a      	str	r2, [r7, #4]
 800ea10:	73fb      	strb	r3, [r7, #15]



	if (spad_number > 127) {
 800ea12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	da10      	bge.n	800ea3c <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
 800ea1c:	43db      	mvns	r3, r3
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	f003 0307 	and.w	r3, r3, #7
 800ea24:	b2db      	uxtb	r3, r3
 800ea26:	3308      	adds	r3, #8
 800ea28:	b2da      	uxtb	r2, r3
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800ea2e:	7bfb      	ldrb	r3, [r7, #15]
 800ea30:	3b80      	subs	r3, #128	; 0x80
 800ea32:	10db      	asrs	r3, r3, #3
 800ea34:	b2da      	uxtb	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800ea3a:	e00c      	b.n	800ea56 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800ea3c:	7bfb      	ldrb	r3, [r7, #15]
 800ea3e:	f003 0307 	and.w	r3, r3, #7
 800ea42:	b2da      	uxtb	r2, r3
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800ea48:	7bfb      	ldrb	r3, [r7, #15]
 800ea4a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ea4e:	10db      	asrs	r3, r3, #3
 800ea50:	b2da      	uxtb	r2, r3
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	701a      	strb	r2, [r3, #0]
}
 800ea56:	bf00      	nop
 800ea58:	3714      	adds	r7, #20
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr

0800ea62 <VL53L1_hist_find_min_max_bin_values>:


void  VL53L1_hist_find_min_max_bin_values(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800ea62:	b480      	push	{r7}
 800ea64:	b085      	sub	sp, #20
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800ea6e:	2300      	movs	r3, #0
 800ea70:	73fb      	strb	r3, [r7, #15]
 800ea72:	e02c      	b.n	800eace <VL53L1_hist_find_min_max_bin_values+0x6c>

		if (bin == 0 || pdata->min_bin_value >= pdata->bin_data[bin])
 800ea74:	7bfb      	ldrb	r3, [r7, #15]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d009      	beq.n	800ea8e <VL53L1_hist_find_min_max_bin_values+0x2c>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800ea80:	7bf9      	ldrb	r1, [r7, #15]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	3106      	adds	r1, #6
 800ea86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	db07      	blt.n	800ea9e <VL53L1_hist_find_min_max_bin_values+0x3c>
			pdata->min_bin_value = pdata->bin_data[bin];
 800ea8e:	7bfa      	ldrb	r2, [r7, #15]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	3206      	adds	r2, #6
 800ea94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

		if (bin == 0 || pdata->max_bin_value <= pdata->bin_data[bin])
 800ea9e:	7bfb      	ldrb	r3, [r7, #15]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d009      	beq.n	800eab8 <VL53L1_hist_find_min_max_bin_values+0x56>
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800eaaa:	7bf9      	ldrb	r1, [r7, #15]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	3106      	adds	r1, #6
 800eab0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	dc07      	bgt.n	800eac8 <VL53L1_hist_find_min_max_bin_values+0x66>
			pdata->max_bin_value = pdata->bin_data[bin];
 800eab8:	7bfa      	ldrb	r2, [r7, #15]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	3206      	adds	r2, #6
 800eabe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	for (bin = 0; bin < pdata->VL53L1_p_024; bin++) {
 800eac8:	7bfb      	ldrb	r3, [r7, #15]
 800eaca:	3301      	adds	r3, #1
 800eacc:	73fb      	strb	r3, [r7, #15]
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	7a9b      	ldrb	r3, [r3, #10]
 800ead2:	7bfa      	ldrb	r2, [r7, #15]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d3cd      	bcc.n	800ea74 <VL53L1_hist_find_min_max_bin_values+0x12>

	}

	LOG_FUNCTION_END(0);

}
 800ead8:	bf00      	nop
 800eada:	bf00      	nop
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <VL53L1_hist_estimate_ambient_from_ambient_bins>:


void  VL53L1_hist_estimate_ambient_from_ambient_bins(
	VL53L1_histogram_bin_data_t   *pdata)
{
 800eae6:	b480      	push	{r7}
 800eae8:	b085      	sub	sp, #20
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]


	uint8_t  bin            = 0;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdata->number_of_ambient_bins > 0) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	7adb      	ldrb	r3, [r3, #11]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d03a      	beq.n	800eb70 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x8a>

		pdata->number_of_ambient_samples =
			pdata->number_of_ambient_bins;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	7ada      	ldrb	r2, [r3, #11]
		pdata->number_of_ambient_samples =
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e



		pdata->ambient_events_sum = 0;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	73fb      	strb	r3, [r7, #15]
 800eb10:	e00e      	b.n	800eb30 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x4a>
			pdata->ambient_events_sum += pdata->bin_data[bin];
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eb18:	7bf9      	ldrb	r1, [r7, #15]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	3106      	adds	r1, #6
 800eb1e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb22:	441a      	add	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		for (bin = 0; bin < pdata->number_of_ambient_bins; bin++)
 800eb2a:	7bfb      	ldrb	r3, [r7, #15]
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	73fb      	strb	r3, [r7, #15]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	7adb      	ldrb	r3, [r3, #11]
 800eb34:	7bfa      	ldrb	r2, [r7, #15]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d3eb      	bcc.n	800eb12 <VL53L1_hist_estimate_ambient_from_ambient_bins+0x2c>

		pdata->VL53L1_p_004 = pdata->ambient_events_sum;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 +=
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
				((int32_t)pdata->number_of_ambient_bins / 2);
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	7ad2      	ldrb	r2, [r2, #11]
 800eb50:	0852      	lsrs	r2, r2, #1
 800eb52:	b2d2      	uxtb	r2, r2
		pdata->VL53L1_p_004 +=
 800eb54:	441a      	add	r2, r3
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pdata->VL53L1_p_004 /=
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
			(int32_t)pdata->number_of_ambient_bins;
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	7ad2      	ldrb	r2, [r2, #11]
		pdata->VL53L1_p_004 /=
 800eb66:	fb93 f2f2 	sdiv	r2, r3, r2
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	}

	LOG_FUNCTION_END(0);
}
 800eb70:	bf00      	nop
 800eb72:	3714      	adds	r7, #20
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <VL53L1_f_001>:
	VL53L1_dmax_calibration_data_t	     *pcal,
	VL53L1_hist_gen3_dmax_config_t	     *pcfg,
	VL53L1_histogram_bin_data_t          *pbins,
	VL53L1_hist_gen3_dmax_private_data_t *pdata,
	int16_t                              *pambient_dmax_mm)
{
 800eb7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800eb80:	b0ca      	sub	sp, #296	; 0x128
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800eb88:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800eb8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800eb90:	4603      	mov	r3, r0
 800eb92:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106



	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800eb96:	2300      	movs	r3, #0
 800eb98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	uint32_t    pll_period_us       = 0;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t    periods_elapsed     = 0;
 800eba2:	2300      	movs	r3, #0
 800eba4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint32_t    tmp32               = 0;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	uint64_t    tmp64               = 0;
 800ebae:	f04f 0200 	mov.w	r2, #0
 800ebb2:	f04f 0300 	mov.w	r3, #0
 800ebb6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	uint32_t    amb_thres_delta     = 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_006     = 0x0000;
 800ebc0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	8353      	strh	r3, [r2, #26]
	pdata->VL53L1_p_033 = 0x0000;
 800ebc8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ebcc:	2300      	movs	r3, #0
 800ebce:	6153      	str	r3, [r2, #20]
	pdata->VL53L1_p_001          = 0x0000;
 800ebd0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	8313      	strh	r3, [r2, #24]
	pdata->VL53L1_p_012    = 0x0000;
 800ebd8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ebdc:	2300      	movs	r3, #0
 800ebde:	6113      	str	r3, [r2, #16]
	pdata->VL53L1_p_004     = 0x0000;
 800ebe0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	61d3      	str	r3, [r2, #28]
	pdata->VL53L1_p_034 = 0x0000;
 800ebe8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ebec:	2300      	movs	r3, #0
 800ebee:	6213      	str	r3, [r2, #32]
	pdata->VL53L1_p_035             = 0;
 800ebf0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	8493      	strh	r3, [r2, #36]	; 0x24
	pdata->VL53L1_p_007            = 0;
 800ebf8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	84d3      	strh	r3, [r2, #38]	; 0x26

	*pambient_dmax_mm  = 0;
 800ec00:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800ec04:	2300      	movs	r3, #0
 800ec06:	8013      	strh	r3, [r2, #0]


	if ((pbins->VL53L1_p_019        != 0) &&
 800ec08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ec0c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f000 80e1 	beq.w	800edd8 <VL53L1_f_001+0x25c>
		(pbins->total_periods_elapsed      != 0)) {
 800ec16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ec1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	if ((pbins->VL53L1_p_019        != 0) &&
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f000 80da 	beq.w	800edd8 <VL53L1_f_001+0x25c>



		pll_period_us   =
			VL53L1_calc_pll_period_us(pbins->VL53L1_p_019);
 800ec24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ec28:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7ff f9ff 	bl	800e030 <VL53L1_calc_pll_period_us>
 800ec32:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110



		periods_elapsed = pbins->total_periods_elapsed + 1;
 800ec36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ec3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec3e:	3301      	adds	r3, #1
 800ec40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c



		pdata->VL53L1_p_036  =
			VL53L1_duration_maths(
 800ec44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ec48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec4c:	2110      	movs	r1, #16
 800ec4e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ec52:	f7ff fa04 	bl	800e05e <VL53L1_duration_maths>
 800ec56:	4602      	mov	r2, r0
		pdata->VL53L1_p_036  =
 800ec58:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec5c:	601a      	str	r2, [r3, #0]
				VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
				periods_elapsed);


		pdata->VL53L1_p_001 =
			VL53L1_rate_maths(
 800ec5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ec62:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800ec66:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	4610      	mov	r0, r2
 800ec70:	f7ff fc6d 	bl	800e54e <VL53L1_rate_maths>
 800ec74:	4603      	mov	r3, r0
		pdata->VL53L1_p_001 =
 800ec76:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ec7a:	8313      	strh	r3, [r2, #24]
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_033   =
			VL53L1_events_per_spad_maths(
 800ec7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ec80:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 800ec84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ec88:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800ec8c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	461a      	mov	r2, r3
 800ec94:	f7ff fa3c 	bl	800e110 <VL53L1_events_per_spad_maths>
 800ec98:	4602      	mov	r2, r0
		pdata->VL53L1_p_033   =
 800ec9a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ec9e:	615a      	str	r2, [r3, #20]
				pbins->result__dss_actual_effective_spads,
				pdata->VL53L1_p_036);



		pdata->VL53L1_p_037 = pcfg->max_effective_spads;
 800eca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800eca4:	8adb      	ldrh	r3, [r3, #22]
 800eca6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ecaa:	8193      	strh	r3, [r2, #12]
		pdata->VL53L1_p_006  = pcfg->max_effective_spads;
 800ecac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ecb0:	8adb      	ldrh	r3, [r3, #22]
 800ecb2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800ecb6:	8353      	strh	r3, [r2, #26]

		if (pdata->VL53L1_p_033 > 0) {
 800ecb8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ecbc:	695b      	ldr	r3, [r3, #20]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	f000 808a 	beq.w	800edd8 <VL53L1_f_001+0x25c>
			tmp64   =
			(uint64_t)pcfg->dss_config__target_total_rate_mcps;
 800ecc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ecc8:	8b1b      	ldrh	r3, [r3, #24]
			tmp64   =
 800ecca:	b29b      	uxth	r3, r3
 800eccc:	2200      	movs	r2, #0
 800ecce:	461c      	mov	r4, r3
 800ecd0:	4615      	mov	r5, r2
 800ecd2:	e9c7 4546 	strd	r4, r5, [r7, #280]	; 0x118
			tmp64  *= 1000;
 800ecd6:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800ecda:	4622      	mov	r2, r4
 800ecdc:	462b      	mov	r3, r5
 800ecde:	f04f 0000 	mov.w	r0, #0
 800ece2:	f04f 0100 	mov.w	r1, #0
 800ece6:	0159      	lsls	r1, r3, #5
 800ece8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ecec:	0150      	lsls	r0, r2, #5
 800ecee:	4602      	mov	r2, r0
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	ebb2 0804 	subs.w	r8, r2, r4
 800ecf6:	eb63 0905 	sbc.w	r9, r3, r5
 800ecfa:	f04f 0200 	mov.w	r2, #0
 800ecfe:	f04f 0300 	mov.w	r3, #0
 800ed02:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800ed06:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800ed0a:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800ed0e:	4690      	mov	r8, r2
 800ed10:	4699      	mov	r9, r3
 800ed12:	eb18 0a04 	adds.w	sl, r8, r4
 800ed16:	eb49 0b05 	adc.w	fp, r9, r5
 800ed1a:	f04f 0200 	mov.w	r2, #0
 800ed1e:	f04f 0300 	mov.w	r3, #0
 800ed22:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ed26:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ed2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ed2e:	4692      	mov	sl, r2
 800ed30:	469b      	mov	fp, r3
 800ed32:	e9c7 ab46 	strd	sl, fp, [r7, #280]	; 0x118
			tmp64 <<= (11+1);
 800ed36:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ed3a:	f04f 0000 	mov.w	r0, #0
 800ed3e:	f04f 0100 	mov.w	r1, #0
 800ed42:	0319      	lsls	r1, r3, #12
 800ed44:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 800ed48:	0310      	lsls	r0, r2, #12
 800ed4a:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
			tmp32 = pdata->VL53L1_p_033/2;
 800ed4e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ed52:	695b      	ldr	r3, [r3, #20]
 800ed54:	085b      	lsrs	r3, r3, #1
 800ed56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			tmp64  += (uint64_t)tmp32;
 800ed5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ed64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ed68:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800ed6c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800ed70:	4621      	mov	r1, r4
 800ed72:	1851      	adds	r1, r2, r1
 800ed74:	65b9      	str	r1, [r7, #88]	; 0x58
 800ed76:	4629      	mov	r1, r5
 800ed78:	eb43 0101 	adc.w	r1, r3, r1
 800ed7c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800ed7e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800ed82:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
			tmp64 = do_division_u(tmp64,
 800ed86:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ed8a:	695b      	ldr	r3, [r3, #20]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ed92:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ed96:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800ed9a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800ed9e:	f7f1 fa8f 	bl	80002c0 <__aeabi_uldivmod>
 800eda2:	4602      	mov	r2, r0
 800eda4:	460b      	mov	r3, r1
 800eda6:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
				(uint64_t)pdata->VL53L1_p_033);

			if (tmp64 < (uint64_t)pcfg->max_effective_spads)
 800edaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800edae:	8adb      	ldrh	r3, [r3, #22]
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	2200      	movs	r2, #0
 800edb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800edb8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800edbc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800edc0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800edc4:	4621      	mov	r1, r4
 800edc6:	428a      	cmp	r2, r1
 800edc8:	4629      	mov	r1, r5
 800edca:	418b      	sbcs	r3, r1
 800edcc:	d204      	bcs.n	800edd8 <VL53L1_f_001+0x25c>
				pdata->VL53L1_p_006 = (uint16_t)tmp64;
 800edce:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 800edd2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800edd6:	8353      	strh	r3, [r2, #26]
		}
	}



	if ((pcal->ref__actual_effective_spads != 0) &&
 800edd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800eddc:	881b      	ldrh	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	f000 82e9 	beq.w	800f3b6 <VL53L1_f_001+0x83a>
		(pbins->VL53L1_p_019        != 0) &&
 800ede4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ede8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
	if ((pcal->ref__actual_effective_spads != 0) &&
 800edec:	2b00      	cmp	r3, #0
 800edee:	f000 82e2 	beq.w	800f3b6 <VL53L1_f_001+0x83a>
		(pcal->ref_reflectance_pc          != 0) &&
 800edf2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800edf6:	88db      	ldrh	r3, [r3, #6]
		(pbins->VL53L1_p_019        != 0) &&
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 82dc 	beq.w	800f3b6 <VL53L1_f_001+0x83a>
		(pbins->total_periods_elapsed      != 0)) {
 800edfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ee02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
		(pcal->ref_reflectance_pc          != 0) &&
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	f000 82d5 	beq.w	800f3b6 <VL53L1_f_001+0x83a>



		tmp64  = (uint64_t)pcal->ref__peak_signal_count_rate_mcps;
 800ee0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ee10:	885b      	ldrh	r3, [r3, #2]
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	2200      	movs	r2, #0
 800ee16:	653b      	str	r3, [r7, #80]	; 0x50
 800ee18:	657a      	str	r2, [r7, #84]	; 0x54
 800ee1a:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 800ee1e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 *= (1000 * 256);
 800ee22:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800ee26:	4622      	mov	r2, r4
 800ee28:	462b      	mov	r3, r5
 800ee2a:	f04f 0000 	mov.w	r0, #0
 800ee2e:	f04f 0100 	mov.w	r1, #0
 800ee32:	0159      	lsls	r1, r3, #5
 800ee34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ee38:	0150      	lsls	r0, r2, #5
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	1b11      	subs	r1, r2, r4
 800ee40:	64b9      	str	r1, [r7, #72]	; 0x48
 800ee42:	eb63 0305 	sbc.w	r3, r3, r5
 800ee46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee48:	f04f 0200 	mov.w	r2, #0
 800ee4c:	f04f 0300 	mov.w	r3, #0
 800ee50:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 800ee54:	4649      	mov	r1, r9
 800ee56:	008b      	lsls	r3, r1, #2
 800ee58:	4641      	mov	r1, r8
 800ee5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ee5e:	4641      	mov	r1, r8
 800ee60:	008a      	lsls	r2, r1, #2
 800ee62:	4611      	mov	r1, r2
 800ee64:	461a      	mov	r2, r3
 800ee66:	460b      	mov	r3, r1
 800ee68:	191b      	adds	r3, r3, r4
 800ee6a:	643b      	str	r3, [r7, #64]	; 0x40
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	eb45 0303 	adc.w	r3, r5, r3
 800ee72:	647b      	str	r3, [r7, #68]	; 0x44
 800ee74:	f04f 0200 	mov.w	r2, #0
 800ee78:	f04f 0300 	mov.w	r3, #0
 800ee7c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800ee80:	4629      	mov	r1, r5
 800ee82:	02cb      	lsls	r3, r1, #11
 800ee84:	4621      	mov	r1, r4
 800ee86:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800ee8a:	4621      	mov	r1, r4
 800ee8c:	02ca      	lsls	r2, r1, #11
 800ee8e:	461c      	mov	r4, r3
 800ee90:	4613      	mov	r3, r2
 800ee92:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp32  = pcal->ref__actual_effective_spads/2;
 800ee96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ee9a:	881b      	ldrh	r3, [r3, #0]
 800ee9c:	085b      	lsrs	r3, r3, #1
 800ee9e:	b29b      	uxth	r3, r3
 800eea0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp64 += (uint64_t)tmp32;
 800eea4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800eeae:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800eeb2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800eeb6:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800eeba:	4621      	mov	r1, r4
 800eebc:	1851      	adds	r1, r2, r1
 800eebe:	63b9      	str	r1, [r7, #56]	; 0x38
 800eec0:	4629      	mov	r1, r5
 800eec2:	eb43 0101 	adc.w	r1, r3, r1
 800eec6:	63f9      	str	r1, [r7, #60]	; 0x3c
 800eec8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800eecc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  = do_division_u(tmp64,
 800eed0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800eed4:	881b      	ldrh	r3, [r3, #0]
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	2200      	movs	r2, #0
 800eeda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800eede:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800eee2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800eee6:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800eeea:	f7f1 f9e9 	bl	80002c0 <__aeabi_uldivmod>
 800eeee:	4602      	mov	r2, r0
 800eef0:	460b      	mov	r3, r1
 800eef2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			(uint64_t)pcal->ref__actual_effective_spads);

		pdata->VL53L1_p_012   = (uint32_t)tmp64;
 800eef6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800eefa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800eefe:	611a      	str	r2, [r3, #16]
		pdata->VL53L1_p_012 <<= 4;
 800ef00:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ef04:	691b      	ldr	r3, [r3, #16]
 800ef06:	011a      	lsls	r2, r3, #4
 800ef08:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ef0c:	611a      	str	r2, [r3, #16]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800ef0e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	2200      	movs	r2, #0
 800ef16:	633b      	str	r3, [r7, #48]	; 0x30
 800ef18:	637a      	str	r2, [r7, #52]	; 0x34
 800ef1a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800ef1e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_033;
 800ef22:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ef26:	695b      	ldr	r3, [r3, #20]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ef2e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800ef32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ef36:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	fb02 f203 	mul.w	r2, r2, r3
 800ef40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ef44:	4629      	mov	r1, r5
 800ef46:	fb01 f303 	mul.w	r3, r1, r3
 800ef4a:	441a      	add	r2, r3
 800ef4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ef50:	4621      	mov	r1, r4
 800ef52:	fba3 1301 	umull	r1, r3, r3, r1
 800ef56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ef60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ef64:	18d3      	adds	r3, r2, r3
 800ef66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ef6a:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 800ef6e:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800ef72:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800ef76:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800ef7a:	8b5b      	ldrh	r3, [r3, #26]
 800ef7c:	b29b      	uxth	r3, r3
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ef84:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ef88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800ef8c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ef90:	4622      	mov	r2, r4
 800ef92:	fb02 f203 	mul.w	r2, r2, r3
 800ef96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ef9a:	4629      	mov	r1, r5
 800ef9c:	fb01 f303 	mul.w	r3, r1, r3
 800efa0:	441a      	add	r2, r3
 800efa2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800efa6:	4621      	mov	r1, r4
 800efa8:	fba3 1301 	umull	r1, r3, r3, r1
 800efac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800efb0:	460b      	mov	r3, r1
 800efb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800efb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efba:	18d3      	adds	r3, r2, r3
 800efbc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800efc0:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800efc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800efc8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800efcc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800efd0:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800efd4:	62b9      	str	r1, [r7, #40]	; 0x28
 800efd6:	f143 0300 	adc.w	r3, r3, #0
 800efda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800efdc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800efe0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800efe4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800efe8:	f04f 0000 	mov.w	r0, #0
 800efec:	f04f 0100 	mov.w	r1, #0
 800eff0:	0cd0      	lsrs	r0, r2, #19
 800eff2:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800eff6:	0cd9      	lsrs	r1, r3, #19
 800eff8:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118
		tmp64  +=  500;
 800effc:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f000:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f004:	6239      	str	r1, [r7, #32]
 800f006:	f143 0300 	adc.w	r3, r3, #0
 800f00a:	627b      	str	r3, [r7, #36]	; 0x24
 800f00c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f010:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64   = do_division_u(tmp64, 1000);
 800f014:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f018:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f01c:	f04f 0300 	mov.w	r3, #0
 800f020:	f7f1 f94e 	bl	80002c0 <__aeabi_uldivmod>
 800f024:	4602      	mov	r2, r0
 800f026:	460b      	mov	r3, r1
 800f028:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f02c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f030:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f034:	f173 0300 	sbcs.w	r3, r3, #0
 800f038:	d305      	bcc.n	800f046 <VL53L1_f_001+0x4ca>
			tmp64 = 0x00FFFFFF;
 800f03a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f03e:	f04f 0300 	mov.w	r3, #0
 800f042:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_004 = (uint32_t)tmp64;
 800f046:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f04a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f04e:	61da      	str	r2, [r3, #28]



		tmp64   = (uint64_t)pdata->VL53L1_p_036;
 800f050:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2200      	movs	r2, #0
 800f058:	61bb      	str	r3, [r7, #24]
 800f05a:	61fa      	str	r2, [r7, #28]
 800f05c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800f060:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_012;
 800f064:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f068:	691b      	ldr	r3, [r3, #16]
 800f06a:	2200      	movs	r2, #0
 800f06c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f070:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f074:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f078:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800f07c:	4622      	mov	r2, r4
 800f07e:	fb02 f203 	mul.w	r2, r2, r3
 800f082:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f086:	4629      	mov	r1, r5
 800f088:	fb01 f303 	mul.w	r3, r1, r3
 800f08c:	441a      	add	r2, r3
 800f08e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f092:	4621      	mov	r1, r4
 800f094:	fba3 1301 	umull	r1, r3, r3, r1
 800f098:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f09c:	460b      	mov	r3, r1
 800f09e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800f0a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0a6:	18d3      	adds	r3, r2, r3
 800f0a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800f0ac:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 800f0b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f0b4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  *= (uint64_t)pdata->VL53L1_p_006;
 800f0b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f0bc:	8b5b      	ldrh	r3, [r3, #26]
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f0c6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800f0ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f0ce:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800f0d2:	4622      	mov	r2, r4
 800f0d4:	fb02 f203 	mul.w	r2, r2, r3
 800f0d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f0dc:	4629      	mov	r1, r5
 800f0de:	fb01 f303 	mul.w	r3, r1, r3
 800f0e2:	441a      	add	r2, r3
 800f0e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f0e8:	4621      	mov	r1, r4
 800f0ea:	fba3 1301 	umull	r1, r3, r3, r1
 800f0ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f0f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f0fc:	18d3      	adds	r3, r2, r3
 800f0fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f102:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 800f106:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f10a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64  += (1<<(11+7));
 800f10e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f112:	f512 2180 	adds.w	r1, r2, #262144	; 0x40000
 800f116:	6139      	str	r1, [r7, #16]
 800f118:	f143 0300 	adc.w	r3, r3, #0
 800f11c:	617b      	str	r3, [r7, #20]
 800f11e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800f122:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 >>= (11+8);
 800f126:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f12a:	f04f 0000 	mov.w	r0, #0
 800f12e:	f04f 0100 	mov.w	r1, #0
 800f132:	0cd0      	lsrs	r0, r2, #19
 800f134:	ea40 3043 	orr.w	r0, r0, r3, lsl #13
 800f138:	0cd9      	lsrs	r1, r3, #19
 800f13a:	e9c7 0146 	strd	r0, r1, [r7, #280]	; 0x118



		tmp64  *= ((uint64_t)target_reflectance *
 800f13e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800f142:	2200      	movs	r2, #0
 800f144:	67bb      	str	r3, [r7, #120]	; 0x78
 800f146:	67fa      	str	r2, [r7, #124]	; 0x7c
				   (uint64_t)pcal->coverglass_transmission);
 800f148:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f14c:	891b      	ldrh	r3, [r3, #8]
 800f14e:	b29b      	uxth	r3, r3
 800f150:	2200      	movs	r2, #0
 800f152:	673b      	str	r3, [r7, #112]	; 0x70
 800f154:	677a      	str	r2, [r7, #116]	; 0x74
		tmp64  *= ((uint64_t)target_reflectance *
 800f156:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800f15a:	462b      	mov	r3, r5
 800f15c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800f160:	4642      	mov	r2, r8
 800f162:	fb02 f203 	mul.w	r2, r2, r3
 800f166:	464b      	mov	r3, r9
 800f168:	4621      	mov	r1, r4
 800f16a:	fb01 f303 	mul.w	r3, r1, r3
 800f16e:	4413      	add	r3, r2
 800f170:	4622      	mov	r2, r4
 800f172:	4641      	mov	r1, r8
 800f174:	fba2 1201 	umull	r1, r2, r2, r1
 800f178:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f17c:	460a      	mov	r2, r1
 800f17e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800f182:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800f186:	4413      	add	r3, r2
 800f188:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f18c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f190:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 800f194:	4622      	mov	r2, r4
 800f196:	fb02 f203 	mul.w	r2, r2, r3
 800f19a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f19e:	4629      	mov	r1, r5
 800f1a0:	fb01 f303 	mul.w	r3, r1, r3
 800f1a4:	4413      	add	r3, r2
 800f1a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f1aa:	4621      	mov	r1, r4
 800f1ac:	fba2 1201 	umull	r1, r2, r2, r1
 800f1b0:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800f1b4:	460a      	mov	r2, r1
 800f1b6:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800f1ba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f1be:	4413      	add	r3, r2
 800f1c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800f1c4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 800f1c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800f1cc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118

		tmp64  += ((uint64_t)pcal->ref_reflectance_pc * 128);
 800f1d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f1d4:	88db      	ldrh	r3, [r3, #6]
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	2200      	movs	r2, #0
 800f1da:	66bb      	str	r3, [r7, #104]	; 0x68
 800f1dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f1de:	f04f 0200 	mov.w	r2, #0
 800f1e2:	f04f 0300 	mov.w	r3, #0
 800f1e6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800f1ea:	4629      	mov	r1, r5
 800f1ec:	01cb      	lsls	r3, r1, #7
 800f1ee:	4621      	mov	r1, r4
 800f1f0:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 800f1f4:	4621      	mov	r1, r4
 800f1f6:	01ca      	lsls	r2, r1, #7
 800f1f8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f1fc:	1884      	adds	r4, r0, r2
 800f1fe:	60bc      	str	r4, [r7, #8]
 800f200:	eb41 0303 	adc.w	r3, r1, r3
 800f204:	60fb      	str	r3, [r7, #12]
 800f206:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800f20a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64,
 800f20e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f212:	88db      	ldrh	r3, [r3, #6]
 800f214:	b29b      	uxth	r3, r3
 800f216:	2200      	movs	r2, #0
 800f218:	663b      	str	r3, [r7, #96]	; 0x60
 800f21a:	667a      	str	r2, [r7, #100]	; 0x64
 800f21c:	f04f 0200 	mov.w	r2, #0
 800f220:	f04f 0300 	mov.w	r3, #0
 800f224:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800f228:	4629      	mov	r1, r5
 800f22a:	020b      	lsls	r3, r1, #8
 800f22c:	4621      	mov	r1, r4
 800f22e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800f232:	4621      	mov	r1, r4
 800f234:	020a      	lsls	r2, r1, #8
 800f236:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f23a:	f7f1 f841 	bl	80002c0 <__aeabi_uldivmod>
 800f23e:	4602      	mov	r2, r0
 800f240:	460b      	mov	r3, r1
 800f242:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			((uint64_t)pcal->ref_reflectance_pc * 256));

		tmp64  +=  500;
 800f246:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f24a:	f512 71fa 	adds.w	r1, r2, #500	; 0x1f4
 800f24e:	6039      	str	r1, [r7, #0]
 800f250:	f143 0300 	adc.w	r3, r3, #0
 800f254:	607b      	str	r3, [r7, #4]
 800f256:	e9d7 3400 	ldrd	r3, r4, [r7]
 800f25a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
		tmp64 = do_division_u(tmp64, 1000);
 800f25e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 800f262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f266:	f04f 0300 	mov.w	r3, #0
 800f26a:	f7f1 f829 	bl	80002c0 <__aeabi_uldivmod>
 800f26e:	4602      	mov	r2, r0
 800f270:	460b      	mov	r3, r1
 800f272:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118


		if (tmp64 > 0x00FFFFFF)
 800f276:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800f27a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800f27e:	f173 0300 	sbcs.w	r3, r3, #0
 800f282:	d305      	bcc.n	800f290 <VL53L1_f_001+0x714>
			tmp64 = 0x00FFFFFF;
 800f284:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800f288:	f04f 0300 	mov.w	r3, #0
 800f28c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

		pdata->VL53L1_p_034 = (uint32_t)tmp64;
 800f290:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f294:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f298:	621a      	str	r2, [r3, #32]



		tmp32  = VL53L1_isqrt(pdata->VL53L1_p_004 << 8);
 800f29a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f29e:	69db      	ldr	r3, [r3, #28]
 800f2a0:	021b      	lsls	r3, r3, #8
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f7fe ffcd 	bl	800e242 <VL53L1_isqrt>
 800f2a8:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pcfg->ambient_thresh_sigma;
 800f2ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f2b0:	785b      	ldrb	r3, [r3, #1]
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f2b8:	fb02 f303 	mul.w	r3, r2, r3
 800f2bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124



		if (pdata->VL53L1_p_004 <
 800f2c0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2c4:	69db      	ldr	r3, [r3, #28]
			(uint32_t)pcfg->min_ambient_thresh_events) {
 800f2c6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800f2ca:	6852      	ldr	r2, [r2, #4]
		if (pdata->VL53L1_p_004 <
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d218      	bcs.n	800f302 <VL53L1_f_001+0x786>

			amb_thres_delta =
				pcfg->min_ambient_thresh_events -
 800f2d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	461a      	mov	r2, r3
				(uint32_t)pdata->VL53L1_p_004;
 800f2d8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f2dc:	69db      	ldr	r3, [r3, #28]
			amb_thres_delta =
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108


			amb_thres_delta <<= 8;
 800f2e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f2e8:	021b      	lsls	r3, r3, #8
 800f2ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			if (tmp32 < amb_thres_delta)
 800f2ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800f2f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d203      	bcs.n	800f302 <VL53L1_f_001+0x786>
				tmp32 = amb_thres_delta;
 800f2fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800f2fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		}



		pdata->VL53L1_p_007 =
			(int16_t)VL53L1_f_002(
 800f302:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f306:	6a19      	ldr	r1, [r3, #32]
				tmp32,
				pdata->VL53L1_p_034,
				(uint32_t)pcal->ref__distance_mm,
 800f308:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f30c:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f30e:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f314:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f316:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800f31a:	f000 f854 	bl	800f3c6 <VL53L1_f_002>
 800f31e:	4603      	mov	r3, r0
 800f320:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_007 =
 800f322:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f326:	84da      	strh	r2, [r3, #38]	; 0x26



		tmp32  = (uint32_t)pdata->VL53L1_p_034;
 800f328:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f32c:	6a1b      	ldr	r3, [r3, #32]
 800f32e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 *= (uint32_t)pbins->vcsel_width;
 800f332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f336:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800f33a:	461a      	mov	r2, r3
 800f33c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f340:	fb02 f303 	mul.w	r3, r2, r3
 800f344:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 += (1 << 3);
 800f348:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f34c:	3308      	adds	r3, #8
 800f34e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
		tmp32 /= (1 << 4);
 800f352:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f356:	091b      	lsrs	r3, r3, #4
 800f358:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124

		pdata->VL53L1_p_035 =
			(int16_t)VL53L1_f_002(
				256 * (uint32_t)pcfg->signal_total_events_limit,
 800f35c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f360:	689b      	ldr	r3, [r3, #8]
			(int16_t)VL53L1_f_002(
 800f362:	0218      	lsls	r0, r3, #8
				tmp32,
				(uint32_t)pcal->ref__distance_mm,
 800f364:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f368:	889b      	ldrh	r3, [r3, #4]
			(int16_t)VL53L1_f_002(
 800f36a:	461a      	mov	r2, r3
				(uint32_t)pcfg->signal_thresh_sigma);
 800f36c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800f370:	781b      	ldrb	r3, [r3, #0]
			(int16_t)VL53L1_f_002(
 800f372:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800f376:	f000 f826 	bl	800f3c6 <VL53L1_f_002>
 800f37a:	4603      	mov	r3, r0
 800f37c:	b21a      	sxth	r2, r3
		pdata->VL53L1_p_035 =
 800f37e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f382:	849a      	strh	r2, [r3, #36]	; 0x24




		if (pdata->VL53L1_p_035 < pdata->VL53L1_p_007)
 800f384:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f388:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f38c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f390:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800f394:	429a      	cmp	r2, r3
 800f396:	da07      	bge.n	800f3a8 <VL53L1_f_001+0x82c>
			*pambient_dmax_mm = pdata->VL53L1_p_035;
 800f398:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f39c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800f3a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f3a4:	801a      	strh	r2, [r3, #0]
 800f3a6:	e006      	b.n	800f3b6 <VL53L1_f_001+0x83a>
		else
			*pambient_dmax_mm = pdata->VL53L1_p_007;
 800f3a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800f3ac:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800f3b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f3b4:	801a      	strh	r2, [r3, #0]

	}

	LOG_FUNCTION_END(status);

	return status;
 800f3b6:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117

}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f3c6 <VL53L1_f_002>:
uint32_t VL53L1_f_002(
	uint32_t     events_threshold,
	uint32_t     ref_signal_events,
	uint32_t	 ref_distance_mm,
	uint32_t     signal_thresh_sigma)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b086      	sub	sp, #24
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	60f8      	str	r0, [r7, #12]
 800f3ce:	60b9      	str	r1, [r7, #8]
 800f3d0:	607a      	str	r2, [r7, #4]
 800f3d2:	603b      	str	r3, [r7, #0]



	uint32_t    tmp32               = 0;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	613b      	str	r3, [r7, #16]
	uint32_t    range_mm            = 0;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	617b      	str	r3, [r7, #20]

	tmp32 = 4 * events_threshold;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	613b      	str	r3, [r7, #16]



	tmp32 += ((uint32_t)signal_thresh_sigma *
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	fb03 f303 	mul.w	r3, r3, r3
 800f3e8:	693a      	ldr	r2, [r7, #16]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	613b      	str	r3, [r7, #16]
			  (uint32_t)signal_thresh_sigma);



	tmp32  = VL53L1_isqrt(tmp32);
 800f3ee:	6938      	ldr	r0, [r7, #16]
 800f3f0:	f7fe ff27 	bl	800e242 <VL53L1_isqrt>
 800f3f4:	6138      	str	r0, [r7, #16]
	tmp32 += (uint32_t)signal_thresh_sigma;
 800f3f6:	693a      	ldr	r2, [r7, #16]
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	4413      	add	r3, r2
 800f3fc:	613b      	str	r3, [r7, #16]



	range_mm =
		(uint32_t)VL53L1_isqrt(ref_signal_events << 4);
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	011b      	lsls	r3, r3, #4
 800f402:	4618      	mov	r0, r3
 800f404:	f7fe ff1d 	bl	800e242 <VL53L1_isqrt>
 800f408:	6178      	str	r0, [r7, #20]
	range_mm *= ref_distance_mm;
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	fb02 f303 	mul.w	r3, r2, r3
 800f412:	617b      	str	r3, [r7, #20]

	if (tmp32 > 0) {
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d009      	beq.n	800f42e <VL53L1_f_002+0x68>
		range_mm += (tmp32);
 800f41a:	697a      	ldr	r2, [r7, #20]
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	4413      	add	r3, r2
 800f420:	617b      	str	r3, [r7, #20]
		range_mm /= (2*tmp32);
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	005b      	lsls	r3, r3, #1
 800f426:	697a      	ldr	r2, [r7, #20]
 800f428:	fbb2 f3f3 	udiv	r3, r2, r3
 800f42c:	617b      	str	r3, [r7, #20]
	}

	return range_mm;
 800f42e:	697b      	ldr	r3, [r7, #20]

}
 800f430:	4618      	mov	r0, r3
 800f432:	3718      	adds	r7, #24
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <VL53L1_f_016>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void VL53L1_f_016(
	VL53L1_hist_gen3_algo_private_data_t   *palgo)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]


	uint8_t  lb                 = 0;
 800f440:	2300      	movs	r3, #0
 800f442:	73fb      	strb	r3, [r7, #15]

	palgo->VL53L1_p_023              = VL53L1_HISTOGRAM_BUFFER_SIZE;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2218      	movs	r2, #24
 800f448:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022                = 0;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024           = 0;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_045         = 0;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	711a      	strb	r2, [r3, #4]
	palgo->VL53L1_p_004   = 0;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2200      	movs	r2, #0
 800f460:	609a      	str	r2, [r3, #8]
	palgo->VL53L1_p_032 = 0;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2200      	movs	r2, #0
 800f466:	60da      	str	r2, [r3, #12]

	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	73fb      	strb	r3, [r7, #15]
 800f46e:	e01f      	b.n	800f4b0 <VL53L1_f_016+0x78>
		palgo->VL53L1_p_043[lb]      = 0;
 800f470:	7bfb      	ldrb	r3, [r7, #15]
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	4413      	add	r3, r2
 800f476:	2200      	movs	r2, #0
 800f478:	741a      	strb	r2, [r3, #16]
		palgo->VL53L1_p_046[lb] = 0;
 800f47a:	7bfb      	ldrb	r3, [r7, #15]
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	4413      	add	r3, r2
 800f480:	2200      	movs	r2, #0
 800f482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		palgo->VL53L1_p_047[lb]     = 0;
 800f486:	7bfb      	ldrb	r3, [r7, #15]
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	4413      	add	r3, r2
 800f48c:	2200      	movs	r2, #0
 800f48e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		palgo->VL53L1_p_048[lb]      = 0;
 800f492:	7bfa      	ldrb	r2, [r7, #15]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	322e      	adds	r2, #46	; 0x2e
 800f498:	2100      	movs	r1, #0
 800f49a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		palgo->VL53L1_p_008[lb]     = 0;
 800f49e:	7bfa      	ldrb	r2, [r7, #15]
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	3246      	adds	r2, #70	; 0x46
 800f4a4:	2100      	movs	r1, #0
 800f4a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lb = palgo->VL53L1_p_022; lb < palgo->VL53L1_p_023; lb++) {
 800f4aa:	7bfb      	ldrb	r3, [r7, #15]
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	73fb      	strb	r3, [r7, #15]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	785b      	ldrb	r3, [r3, #1]
 800f4b4:	7bfa      	ldrb	r2, [r7, #15]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d3da      	bcc.n	800f470 <VL53L1_f_016+0x38>
	}

	palgo->VL53L1_p_049 = 0;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
	palgo->VL53L1_p_050               = VL53L1_D_001;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2208      	movs	r2, #8
 800f4c6:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
	palgo->VL53L1_p_051             = 0;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a



	VL53L1_init_histogram_bin_data_struct(
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800f4d8:	461a      	mov	r2, r3
 800f4da:	2118      	movs	r1, #24
 800f4dc:	2000      	movs	r0, #0
 800f4de:	f7ff f9e8 	bl	800e8b2 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_010));
	VL53L1_init_histogram_bin_data_struct(
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f503 7352 	add.w	r3, r3, #840	; 0x348
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	2118      	movs	r1, #24
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	f7ff f9e0 	bl	800e8b2 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_038));
	VL53L1_init_histogram_bin_data_struct(
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800f4f8:	461a      	mov	r2, r3
 800f4fa:	2118      	movs	r1, #24
 800f4fc:	2000      	movs	r0, #0
 800f4fe:	f7ff f9d8 	bl	800e8b2 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_052));
	VL53L1_init_histogram_bin_data_struct(
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800f508:	461a      	mov	r2, r3
 800f50a:	2118      	movs	r1, #24
 800f50c:	2000      	movs	r0, #0
 800f50e:	f7ff f9d0 	bl	800e8b2 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_053));
	VL53L1_init_histogram_bin_data_struct(
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 800f518:	461a      	mov	r2, r3
 800f51a:	2118      	movs	r1, #24
 800f51c:	2000      	movs	r0, #0
 800f51e:	f7ff f9c8 	bl	800e8b2 <VL53L1_init_histogram_bin_data_struct>
		0,
		VL53L1_HISTOGRAM_BUFFER_SIZE,
		&(palgo->VL53L1_p_054));
}
 800f522:	bf00      	nop
 800f524:	3710      	adds	r7, #16
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}

0800f52a <VL53L1_f_018>:
	int32_t                           min_ambient_threshold_events,
	uint8_t                           algo__crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_histogram_bin_data_t           *pxtalk,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800f52a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f52e:	b090      	sub	sp, #64	; 0x40
 800f530:	af00      	add	r7, sp, #0
 800f532:	61b9      	str	r1, [r7, #24]
 800f534:	617a      	str	r2, [r7, #20]
 800f536:	461a      	mov	r2, r3
 800f538:	4603      	mov	r3, r0
 800f53a:	83fb      	strh	r3, [r7, #30]
 800f53c:	4613      	mov	r3, r2
 800f53e:	777b      	strb	r3, [r7, #29]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800f540:	2300      	movs	r3, #0
 800f542:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t  lb            = 0;
 800f546:	2300      	movs	r3, #0
 800f548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t  VL53L1_p_001            = 0;
 800f54c:	2300      	movs	r3, #0
 800f54e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	int64_t  tmp          = 0;
 800f552:	f04f 0200 	mov.w	r2, #0
 800f556:	f04f 0300 	mov.w	r3, #0
 800f55a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	int32_t  amb_events   = 0;
 800f55e:	2300      	movs	r3, #0
 800f560:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  VL53L1_p_008       = 0;
 800f562:	2300      	movs	r3, #0
 800f564:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t  samples      = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	623b      	str	r3, [r7, #32]

	LOG_FUNCTION_START("");


	palgo->VL53L1_p_023            = pbins->VL53L1_p_023;
 800f56a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f56c:	7a5a      	ldrb	r2, [r3, #9]
 800f56e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f570:	705a      	strb	r2, [r3, #1]
	palgo->VL53L1_p_022              = pbins->VL53L1_p_022;
 800f572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f574:	7a1a      	ldrb	r2, [r3, #8]
 800f576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f578:	701a      	strb	r2, [r3, #0]
	palgo->VL53L1_p_024         = pbins->VL53L1_p_024;
 800f57a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f57c:	7a9a      	ldrb	r2, [r3, #10]
 800f57e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f580:	709a      	strb	r2, [r3, #2]
	palgo->VL53L1_p_004 = pbins->VL53L1_p_004;
 800f582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f584:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800f588:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f58a:	609a      	str	r2, [r3, #8]



	palgo->VL53L1_p_031 =
			VL53L1_decode_vcsel_period(pbins->VL53L1_p_009);
 800f58c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f58e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f592:	4618      	mov	r0, r3
 800f594:	f7ff f93c 	bl	800e810 <VL53L1_decode_vcsel_period>
 800f598:	4603      	mov	r3, r0
 800f59a:	461a      	mov	r2, r3
	palgo->VL53L1_p_031 =
 800f59c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f59e:	70da      	strb	r2, [r3, #3]



	tmp  = (int64_t)pbins->VL53L1_p_004;
 800f5a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f5a6:	17da      	asrs	r2, r3, #31
 800f5a8:	60bb      	str	r3, [r7, #8]
 800f5aa:	60fa      	str	r2, [r7, #12]
 800f5ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f5b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	tmp *= (int64_t)ambient_threshold_events_scaler;
 800f5b4:	8bfb      	ldrh	r3, [r7, #30]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	4698      	mov	r8, r3
 800f5ba:	4691      	mov	r9, r2
 800f5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5be:	fb08 f203 	mul.w	r2, r8, r3
 800f5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c4:	fb09 f303 	mul.w	r3, r9, r3
 800f5c8:	4413      	add	r3, r2
 800f5ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5cc:	fba2 4508 	umull	r4, r5, r2, r8
 800f5d0:	442b      	add	r3, r5
 800f5d2:	461d      	mov	r5, r3
 800f5d4:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
 800f5d8:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
	tmp += 2048;
 800f5dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f5e0:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800f5e4:	f143 0b00 	adc.w	fp, r3, #0
 800f5e8:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
	tmp = do_division_s(tmp, 4096);
 800f5ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	da08      	bge.n	800f606 <VL53L1_f_018+0xdc>
 800f5f4:	f640 71ff 	movw	r1, #4095	; 0xfff
 800f5f8:	1851      	adds	r1, r2, r1
 800f5fa:	6039      	str	r1, [r7, #0]
 800f5fc:	f143 0300 	adc.w	r3, r3, #0
 800f600:	607b      	str	r3, [r7, #4]
 800f602:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f606:	f04f 0000 	mov.w	r0, #0
 800f60a:	f04f 0100 	mov.w	r1, #0
 800f60e:	0b10      	lsrs	r0, r2, #12
 800f610:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 800f614:	1319      	asrs	r1, r3, #12
 800f616:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
	amb_events = (int32_t)tmp;
 800f61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61c:	627b      	str	r3, [r7, #36]	; 0x24



	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800f61e:	2300      	movs	r3, #0
 800f620:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f624:	e062      	b.n	800f6ec <VL53L1_f_018+0x1c2>

		VL53L1_p_001 = lb >> 2;
 800f626:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f62a:	089b      	lsrs	r3, r3, #2
 800f62c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		samples = (int32_t)pbins->bin_rep[VL53L1_p_001];
 800f630:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f636:	4413      	add	r3, r2
 800f638:	7c9b      	ldrb	r3, [r3, #18]
 800f63a:	623b      	str	r3, [r7, #32]

		if (samples > 0) {
 800f63c:	6a3b      	ldr	r3, [r7, #32]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	dd4f      	ble.n	800f6e2 <VL53L1_f_018+0x1b8>

			if (lb < pxtalk->VL53L1_p_024 &&
 800f642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f644:	7a9b      	ldrb	r3, [r3, #10]
 800f646:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d20f      	bcs.n	800f66e <VL53L1_f_018+0x144>
 800f64e:	7f7b      	ldrb	r3, [r7, #29]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d00c      	beq.n	800f66e <VL53L1_f_018+0x144>
				algo__crosstalk_compensation_enable > 0)
				VL53L1_p_008 = samples * (amb_events +
					pxtalk->bin_data[lb]);
 800f654:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f65a:	3206      	adds	r2, #6
 800f65c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				VL53L1_p_008 = samples * (amb_events +
 800f660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f662:	441a      	add	r2, r3
 800f664:	6a3b      	ldr	r3, [r7, #32]
 800f666:	fb02 f303 	mul.w	r3, r2, r3
 800f66a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f66c:	e004      	b.n	800f678 <VL53L1_f_018+0x14e>
			else
				VL53L1_p_008 = samples *  amb_events;
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f672:	fb02 f303 	mul.w	r3, r2, r3
 800f676:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008  = VL53L1_isqrt(VL53L1_p_008);
 800f678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7fe fde1 	bl	800e242 <VL53L1_isqrt>
 800f680:	4603      	mov	r3, r0
 800f682:	63bb      	str	r3, [r7, #56]	; 0x38

			VL53L1_p_008 += (samples/2);
 800f684:	6a3b      	ldr	r3, [r7, #32]
 800f686:	0fda      	lsrs	r2, r3, #31
 800f688:	4413      	add	r3, r2
 800f68a:	105b      	asrs	r3, r3, #1
 800f68c:	461a      	mov	r2, r3
 800f68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f690:	4413      	add	r3, r2
 800f692:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= samples;
 800f694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f696:	6a3b      	ldr	r3, [r7, #32]
 800f698:	fb92 f3f3 	sdiv	r3, r2, r3
 800f69c:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 *= ambient_threshold_sigma;
 800f69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a0:	69ba      	ldr	r2, [r7, #24]
 800f6a2:	fb02 f303 	mul.w	r3, r2, r3
 800f6a6:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += 8;
 800f6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6aa:	3308      	adds	r3, #8
 800f6ac:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 /= 16;
 800f6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	da00      	bge.n	800f6b6 <VL53L1_f_018+0x18c>
 800f6b4:	330f      	adds	r3, #15
 800f6b6:	111b      	asrs	r3, r3, #4
 800f6b8:	63bb      	str	r3, [r7, #56]	; 0x38
			VL53L1_p_008 += amb_events;
 800f6ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6be:	4413      	add	r3, r2
 800f6c0:	63bb      	str	r3, [r7, #56]	; 0x38

			if (VL53L1_p_008 < min_ambient_threshold_events)
 800f6c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	da01      	bge.n	800f6ce <VL53L1_f_018+0x1a4>
				VL53L1_p_008 = min_ambient_threshold_events;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	63bb      	str	r3, [r7, #56]	; 0x38

			palgo->VL53L1_p_056[lb]             = VL53L1_p_008;
 800f6ce:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f6d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6d4:	3216      	adds	r2, #22
 800f6d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f6d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			palgo->VL53L1_p_032 = VL53L1_p_008;
 800f6dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6e0:	60da      	str	r2, [r3, #12]
	for (lb = 0; lb < pbins->VL53L1_p_024; lb++) {
 800f6e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f6ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6ee:	7a9b      	ldrb	r3, [r3, #10]
 800f6f0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d396      	bcc.n	800f626 <VL53L1_f_018+0xfc>

	}



	palgo->VL53L1_p_045 = 0;
 800f6f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	711a      	strb	r2, [r3, #4]

	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800f6fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f700:	7a1b      	ldrb	r3, [r3, #8]
 800f702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f706:	e033      	b.n	800f770 <VL53L1_f_018+0x246>

		if (pbins->bin_data[lb] > palgo->VL53L1_p_056[lb]) {
 800f708:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f70c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f70e:	3206      	adds	r2, #6
 800f710:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f714:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800f718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f71a:	3116      	adds	r1, #22
 800f71c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f720:	429a      	cmp	r2, r3
 800f722:	dd13      	ble.n	800f74c <VL53L1_f_018+0x222>
			palgo->VL53L1_p_043[lb]      = 1;
 800f724:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f728:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f72a:	4413      	add	r3, r2
 800f72c:	2201      	movs	r2, #1
 800f72e:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 1;
 800f730:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f734:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f736:	4413      	add	r3, r2
 800f738:	2201      	movs	r2, #1
 800f73a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			palgo->VL53L1_p_045++;
 800f73e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f740:	791b      	ldrb	r3, [r3, #4]
 800f742:	3301      	adds	r3, #1
 800f744:	b2da      	uxtb	r2, r3
 800f746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f748:	711a      	strb	r2, [r3, #4]
 800f74a:	e00c      	b.n	800f766 <VL53L1_f_018+0x23c>
		} else {
			palgo->VL53L1_p_043[lb]      = 0;
 800f74c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f750:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f752:	4413      	add	r3, r2
 800f754:	2200      	movs	r2, #0
 800f756:	741a      	strb	r2, [r3, #16]
			palgo->VL53L1_p_046[lb] = 0;
 800f758:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f75c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f75e:	4413      	add	r3, r2
 800f760:	2200      	movs	r2, #0
 800f762:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (lb = pbins->VL53L1_p_022; lb < pbins->VL53L1_p_024; lb++) {
 800f766:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f76a:	3301      	adds	r3, #1
 800f76c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800f770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f772:	7a9b      	ldrb	r3, [r3, #10]
 800f774:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800f778:	429a      	cmp	r2, r3
 800f77a:	d3c5      	bcc.n	800f708 <VL53L1_f_018+0x1de>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800f77c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37

}
 800f780:	4618      	mov	r0, r3
 800f782:	3740      	adds	r7, #64	; 0x40
 800f784:	46bd      	mov	sp, r7
 800f786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800f78a <VL53L1_f_019>:



VL53L1_Error VL53L1_f_019(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800f78a:	b480      	push	{r7}
 800f78c:	b085      	sub	sp, #20
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800f792:	2300      	movs	r3, #0
 800f794:	737b      	strb	r3, [r7, #13]

	uint8_t  i            = 0;
 800f796:	2300      	movs	r3, #0
 800f798:	73fb      	strb	r3, [r7, #15]
	uint8_t  j            = 0;
 800f79a:	2300      	movs	r3, #0
 800f79c:	733b      	strb	r3, [r7, #12]
	uint8_t  found        = 0;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	palgo->VL53L1_p_049 = 0;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178

	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	73fb      	strb	r3, [r7, #15]
 800f7ae:	e02d      	b.n	800f80c <VL53L1_f_019+0x82>

		j = (i + 1) % palgo->VL53L1_p_031;
 800f7b0:	7bfb      	ldrb	r3, [r7, #15]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	78d2      	ldrb	r2, [r2, #3]
 800f7b8:	fb93 f1f2 	sdiv	r1, r3, r2
 800f7bc:	fb01 f202 	mul.w	r2, r1, r2
 800f7c0:	1a9b      	subs	r3, r3, r2
 800f7c2:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	789b      	ldrb	r3, [r3, #2]
 800f7c8:	7bfa      	ldrb	r2, [r7, #15]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d21b      	bcs.n	800f806 <VL53L1_f_019+0x7c>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	789b      	ldrb	r3, [r3, #2]
 800f7d2:	7b3a      	ldrb	r2, [r7, #12]
 800f7d4:	429a      	cmp	r2, r3
 800f7d6:	d216      	bcs.n	800f806 <VL53L1_f_019+0x7c>
			if (palgo->VL53L1_p_046[i] == 0 &&
 800f7d8:	7bfb      	ldrb	r3, [r7, #15]
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	4413      	add	r3, r2
 800f7de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d10f      	bne.n	800f806 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800f7e6:	7b3b      	ldrb	r3, [r7, #12]
 800f7e8:	687a      	ldr	r2, [r7, #4]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d108      	bne.n	800f806 <VL53L1_f_019+0x7c>
				palgo->VL53L1_p_046[j] == 1 &&
 800f7f4:	7bbb      	ldrb	r3, [r7, #14]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d105      	bne.n	800f806 <VL53L1_f_019+0x7c>
				found == 0) {
				palgo->VL53L1_p_049 = i;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	7bfa      	ldrb	r2, [r7, #15]
 800f7fe:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
				found = 1;
 800f802:	2301      	movs	r3, #1
 800f804:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < palgo->VL53L1_p_031; i++) {
 800f806:	7bfb      	ldrb	r3, [r7, #15]
 800f808:	3301      	adds	r3, #1
 800f80a:	73fb      	strb	r3, [r7, #15]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	78db      	ldrb	r3, [r3, #3]
 800f810:	7bfa      	ldrb	r2, [r7, #15]
 800f812:	429a      	cmp	r2, r3
 800f814:	d3cc      	bcc.n	800f7b0 <VL53L1_f_019+0x26>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800f816:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3714      	adds	r7, #20
 800f81e:	46bd      	mov	sp, r7
 800f820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f824:	4770      	bx	lr

0800f826 <VL53L1_f_020>:


VL53L1_Error VL53L1_f_020(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800f826:	b480      	push	{r7}
 800f828:	b085      	sub	sp, #20
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800f82e:	2300      	movs	r3, #0
 800f830:	73bb      	strb	r3, [r7, #14]
	uint8_t  i            = 0;
 800f832:	2300      	movs	r3, #0
 800f834:	737b      	strb	r3, [r7, #13]
	uint8_t  j            = 0;
 800f836:	2300      	movs	r3, #0
 800f838:	733b      	strb	r3, [r7, #12]
	uint8_t  lb            = 0;
 800f83a:	2300      	movs	r3, #0
 800f83c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	for (lb = palgo->VL53L1_p_049;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800f844:	73fb      	strb	r3, [r7, #15]
 800f846:	e05a      	b.n	800f8fe <VL53L1_f_020+0xd8>
		palgo->VL53L1_p_031);
		lb++) {



		i =  lb      % palgo->VL53L1_p_031;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	78da      	ldrb	r2, [r3, #3]
 800f84c:	7bfb      	ldrb	r3, [r7, #15]
 800f84e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f852:	fb01 f202 	mul.w	r2, r1, r2
 800f856:	1a9b      	subs	r3, r3, r2
 800f858:	737b      	strb	r3, [r7, #13]
		j = (lb + 1) % palgo->VL53L1_p_031;
 800f85a:	7bfb      	ldrb	r3, [r7, #15]
 800f85c:	3301      	adds	r3, #1
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	78d2      	ldrb	r2, [r2, #3]
 800f862:	fb93 f1f2 	sdiv	r1, r3, r2
 800f866:	fb01 f202 	mul.w	r2, r1, r2
 800f86a:	1a9b      	subs	r3, r3, r2
 800f86c:	733b      	strb	r3, [r7, #12]



		if (i < palgo->VL53L1_p_024 && j < palgo->VL53L1_p_024) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	789b      	ldrb	r3, [r3, #2]
 800f872:	7b7a      	ldrb	r2, [r7, #13]
 800f874:	429a      	cmp	r2, r3
 800f876:	d23f      	bcs.n	800f8f8 <VL53L1_f_020+0xd2>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	789b      	ldrb	r3, [r3, #2]
 800f87c:	7b3a      	ldrb	r2, [r7, #12]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d23a      	bcs.n	800f8f8 <VL53L1_f_020+0xd2>

			if (palgo->VL53L1_p_046[i] == 0 &&
 800f882:	7b7b      	ldrb	r3, [r7, #13]
 800f884:	687a      	ldr	r2, [r7, #4]
 800f886:	4413      	add	r3, r2
 800f888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d10e      	bne.n	800f8ae <VL53L1_f_020+0x88>
				palgo->VL53L1_p_046[j] == 1)
 800f890:	7b3b      	ldrb	r3, [r7, #12]
 800f892:	687a      	ldr	r2, [r7, #4]
 800f894:	4413      	add	r3, r2
 800f896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
			if (palgo->VL53L1_p_046[i] == 0 &&
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d107      	bne.n	800f8ae <VL53L1_f_020+0x88>
				palgo->VL53L1_p_051++;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_051 > palgo->VL53L1_p_050)
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f893 217a 	ldrb.w	r2, [r3, #378]	; 0x17a
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d905      	bls.n	800f8ca <VL53L1_f_020+0xa4>
				palgo->VL53L1_p_051 = palgo->VL53L1_p_050;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f893 2179 	ldrb.w	r2, [r3, #377]	; 0x179
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f883 217a 	strb.w	r2, [r3, #378]	; 0x17a

			if (palgo->VL53L1_p_046[i] > 0)
 800f8ca:	7b7b      	ldrb	r3, [r7, #13]
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d009      	beq.n	800f8ec <VL53L1_f_020+0xc6>
				palgo->VL53L1_p_047[i] = palgo->VL53L1_p_051;
 800f8d8:	7b7b      	ldrb	r3, [r7, #13]
 800f8da:	687a      	ldr	r2, [r7, #4]
 800f8dc:	f892 117a 	ldrb.w	r1, [r2, #378]	; 0x17a
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	4413      	add	r3, r2
 800f8e4:	460a      	mov	r2, r1
 800f8e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f8ea:	e005      	b.n	800f8f8 <VL53L1_f_020+0xd2>
			else
				palgo->VL53L1_p_047[i] = 0;
 800f8ec:	7b7b      	ldrb	r3, [r7, #13]
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		lb++) {
 800f8f8:	7bfb      	ldrb	r3, [r7, #15]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	73fb      	strb	r3, [r7, #15]
		lb < (palgo->VL53L1_p_049 +
 800f8fe:	7bfa      	ldrb	r2, [r7, #15]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800f906:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 800f90c:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 800f90e:	429a      	cmp	r2, r3
 800f910:	db9a      	blt.n	800f848 <VL53L1_f_020+0x22>

	}

	LOG_FUNCTION_END(status);

	return status;
 800f912:	f997 300e 	ldrsb.w	r3, [r7, #14]

}
 800f916:	4618      	mov	r0, r3
 800f918:	3714      	adds	r7, #20
 800f91a:	46bd      	mov	sp, r7
 800f91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f920:	4770      	bx	lr

0800f922 <VL53L1_f_021>:


VL53L1_Error VL53L1_f_021(
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800f922:	b480      	push	{r7}
 800f924:	b087      	sub	sp, #28
 800f926:	af00      	add	r7, sp, #0
 800f928:	6078      	str	r0, [r7, #4]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800f92a:	2300      	movs	r3, #0
 800f92c:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800f92e:	2300      	movs	r3, #0
 800f930:	757b      	strb	r3, [r7, #21]
	uint8_t  j            = 0;
 800f932:	2300      	movs	r3, #0
 800f934:	753b      	strb	r3, [r7, #20]
	uint8_t  blb            = 0;
 800f936:	2300      	movs	r3, #0
 800f938:	75fb      	strb	r3, [r7, #23]
	uint8_t  pulse_no     = 0;
 800f93a:	2300      	movs	r3, #0
 800f93c:	74fb      	strb	r3, [r7, #19]

	uint8_t  max_filter_half_width = 0;
 800f93e:	2300      	movs	r3, #0
 800f940:	74bb      	strb	r3, [r7, #18]

	LOG_FUNCTION_START("");



	max_filter_half_width = palgo->VL53L1_p_031 - 1;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	78db      	ldrb	r3, [r3, #3]
 800f946:	3b01      	subs	r3, #1
 800f948:	74bb      	strb	r3, [r7, #18]
	max_filter_half_width = max_filter_half_width >> 1;
 800f94a:	7cbb      	ldrb	r3, [r7, #18]
 800f94c:	085b      	lsrs	r3, r3, #1
 800f94e:	74bb      	strb	r3, [r7, #18]

	for (blb = palgo->VL53L1_p_049;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800f956:	75fb      	strb	r3, [r7, #23]
 800f958:	e0a2      	b.n	800faa0 <VL53L1_f_021+0x17e>
		palgo->VL53L1_p_031);
		blb++) {



		i =  blb      % palgo->VL53L1_p_031;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	78da      	ldrb	r2, [r3, #3]
 800f95e:	7dfb      	ldrb	r3, [r7, #23]
 800f960:	fbb3 f1f2 	udiv	r1, r3, r2
 800f964:	fb01 f202 	mul.w	r2, r1, r2
 800f968:	1a9b      	subs	r3, r3, r2
 800f96a:	757b      	strb	r3, [r7, #21]
		j = (blb + 1) % palgo->VL53L1_p_031;
 800f96c:	7dfb      	ldrb	r3, [r7, #23]
 800f96e:	3301      	adds	r3, #1
 800f970:	687a      	ldr	r2, [r7, #4]
 800f972:	78d2      	ldrb	r2, [r2, #3]
 800f974:	fb93 f1f2 	sdiv	r1, r3, r2
 800f978:	fb01 f202 	mul.w	r2, r1, r2
 800f97c:	1a9b      	subs	r3, r3, r2
 800f97e:	753b      	strb	r3, [r7, #20]



		if (i < palgo->VL53L1_p_024 &&
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	789b      	ldrb	r3, [r3, #2]
 800f984:	7d7a      	ldrb	r2, [r7, #21]
 800f986:	429a      	cmp	r2, r3
 800f988:	f080 8087 	bcs.w	800fa9a <VL53L1_f_021+0x178>
				j < palgo->VL53L1_p_024) {
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo->VL53L1_p_024 &&
 800f990:	7d3a      	ldrb	r2, [r7, #20]
 800f992:	429a      	cmp	r2, r3
 800f994:	f080 8081 	bcs.w	800fa9a <VL53L1_f_021+0x178>



			if (palgo->VL53L1_p_047[i] == 0 &&
 800f998:	7d7b      	ldrb	r3, [r7, #21]
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	4413      	add	r3, r2
 800f99e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d12f      	bne.n	800fa06 <VL53L1_f_021+0xe4>
					palgo->VL53L1_p_047[j] > 0) {
 800f9a6:	7d3b      	ldrb	r3, [r7, #20]
 800f9a8:	687a      	ldr	r2, [r7, #4]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
			if (palgo->VL53L1_p_047[i] == 0 &&
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d028      	beq.n	800fa06 <VL53L1_f_021+0xe4>

				pulse_no = palgo->VL53L1_p_047[j] - 1;
 800f9b4:	7d3b      	ldrb	r3, [r7, #20]
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	4413      	add	r3, r2
 800f9ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9be:	3b01      	subs	r3, #1
 800f9c0:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800f9c8:	7cfa      	ldrb	r2, [r7, #19]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d21b      	bcs.n	800fa06 <VL53L1_f_021+0xe4>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800f9ce:	7cfa      	ldrb	r2, [r7, #19]
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	00db      	lsls	r3, r3, #3
 800f9d4:	4413      	add	r3, r2
 800f9d6:	009b      	lsls	r3, r3, #2
 800f9d8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800f9dc:	687a      	ldr	r2, [r7, #4]
 800f9de:	4413      	add	r3, r2
 800f9e0:	3304      	adds	r3, #4
 800f9e2:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_015 = blb;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	7dfa      	ldrb	r2, [r7, #23]
 800f9e8:	701a      	strb	r2, [r3, #0]
					pdata->VL53L1_p_022    = blb + 1;
 800f9ea:	7dfb      	ldrb	r3, [r7, #23]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	b2da      	uxtb	r2, r3
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	705a      	strb	r2, [r3, #1]
					pdata->VL53L1_p_025   = 0xFF;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	22ff      	movs	r2, #255	; 0xff
 800f9f8:	709a      	strb	r2, [r3, #2]
					pdata->VL53L1_p_026     = 0;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016   = 0;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2200      	movs	r2, #0
 800fa04:	711a      	strb	r2, [r3, #4]
				}
			}



			if (palgo->VL53L1_p_047[i] > 0
 800fa06:	7d7b      	ldrb	r3, [r7, #21]
 800fa08:	687a      	ldr	r2, [r7, #4]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d042      	beq.n	800fa9a <VL53L1_f_021+0x178>
				&& palgo->VL53L1_p_047[j] == 0) {
 800fa14:	7d3b      	ldrb	r3, [r7, #20]
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	4413      	add	r3, r2
 800fa1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d13b      	bne.n	800fa9a <VL53L1_f_021+0x178>

				pulse_no = palgo->VL53L1_p_047[i] - 1;
 800fa22:	7d7b      	ldrb	r3, [r7, #21]
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	4413      	add	r3, r2
 800fa28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	74fb      	strb	r3, [r7, #19]

				if (pulse_no < palgo->VL53L1_p_050) {
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800fa36:	7cfa      	ldrb	r2, [r7, #19]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d22e      	bcs.n	800fa9a <VL53L1_f_021+0x178>
					pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800fa3c:	7cfa      	ldrb	r2, [r7, #19]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	00db      	lsls	r3, r3, #3
 800fa42:	4413      	add	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	3304      	adds	r3, #4
 800fa50:	60fb      	str	r3, [r7, #12]
					pdata->VL53L1_p_026    = blb;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	7dfa      	ldrb	r2, [r7, #23]
 800fa56:	70da      	strb	r2, [r3, #3]
					pdata->VL53L1_p_016  = blb + 1;
 800fa58:	7dfb      	ldrb	r3, [r7, #23]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	b2da      	uxtb	r2, r3
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	711a      	strb	r2, [r3, #4]

					pdata->VL53L1_p_027 =
						(pdata->VL53L1_p_026 + 1) -
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	78da      	ldrb	r2, [r3, #3]
						pdata->VL53L1_p_022;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	785b      	ldrb	r3, [r3, #1]
						(pdata->VL53L1_p_026 + 1) -
 800fa6a:	1ad3      	subs	r3, r2, r3
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	3301      	adds	r3, #1
 800fa70:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_027 =
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	715a      	strb	r2, [r3, #5]
					pdata->VL53L1_p_055 =
						(pdata->VL53L1_p_016 + 1) -
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	791a      	ldrb	r2, [r3, #4]
						pdata->VL53L1_p_015;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	781b      	ldrb	r3, [r3, #0]
						(pdata->VL53L1_p_016 + 1) -
 800fa7e:	1ad3      	subs	r3, r2, r3
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	3301      	adds	r3, #1
 800fa84:	b2da      	uxtb	r2, r3
					pdata->VL53L1_p_055 =
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	719a      	strb	r2, [r3, #6]

					if (pdata->VL53L1_p_055 >
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	799b      	ldrb	r3, [r3, #6]
 800fa8e:	7cba      	ldrb	r2, [r7, #18]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d202      	bcs.n	800fa9a <VL53L1_f_021+0x178>
						max_filter_half_width)
						pdata->VL53L1_p_055 =
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	7cba      	ldrb	r2, [r7, #18]
 800fa98:	719a      	strb	r2, [r3, #6]
		blb++) {
 800fa9a:	7dfb      	ldrb	r3, [r7, #23]
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	75fb      	strb	r3, [r7, #23]
		blb < (palgo->VL53L1_p_049 +
 800faa0:	7dfa      	ldrb	r2, [r7, #23]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800faa8:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	78db      	ldrb	r3, [r3, #3]
		blb < (palgo->VL53L1_p_049 +
 800faae:	440b      	add	r3, r1
	for (blb = palgo->VL53L1_p_049;
 800fab0:	429a      	cmp	r2, r3
 800fab2:	f6ff af52 	blt.w	800f95a <VL53L1_f_021+0x38>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 800fab6:	f997 3016 	ldrsb.w	r3, [r7, #22]

}
 800faba:	4618      	mov	r0, r3
 800fabc:	371c      	adds	r7, #28
 800fabe:	46bd      	mov	sp, r7
 800fac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac4:	4770      	bx	lr

0800fac6 <VL53L1_f_028>:


VL53L1_Error VL53L1_f_028(
	VL53L1_HistTargetOrder                target_order,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fac6:	b580      	push	{r7, lr}
 800fac8:	b090      	sub	sp, #64	; 0x40
 800faca:	af00      	add	r7, sp, #0
 800facc:	4603      	mov	r3, r0
 800face:	6039      	str	r1, [r7, #0]
 800fad0:	71fb      	strb	r3, [r7, #7]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fad2:	2300      	movs	r3, #0
 800fad4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	VL53L1_hist_pulse_data_t  tmp;
	VL53L1_hist_pulse_data_t *ptmp = &tmp;
 800fad8:	f107 030c 	add.w	r3, r7, #12
 800fadc:	63bb      	str	r3, [r7, #56]	; 0x38
	VL53L1_hist_pulse_data_t *p0;
	VL53L1_hist_pulse_data_t *p1;

	uint8_t i       = 0;
 800fade:	2300      	movs	r3, #0
 800fae0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t swapped = 1;
 800fae4:	2301      	movs	r3, #1
 800fae6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	LOG_FUNCTION_START("");

	if (!(palgo->VL53L1_p_051 > 1))
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d965      	bls.n	800fbc0 <VL53L1_f_028+0xfa>
		goto ENDFUNC;

	while (swapped > 0) {
 800faf4:	e05f      	b.n	800fbb6 <VL53L1_f_028+0xf0>

		swapped = 0;
 800faf6:	2300      	movs	r3, #0
 800faf8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800fafc:	2301      	movs	r3, #1
 800fafe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fb02:	e051      	b.n	800fba8 <VL53L1_f_028+0xe2>

			p0 = &(palgo->VL53L1_p_002[i-1]);
 800fb04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb08:	1e5a      	subs	r2, r3, #1
 800fb0a:	4613      	mov	r3, r2
 800fb0c:	00db      	lsls	r3, r3, #3
 800fb0e:	4413      	add	r3, r2
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fb16:	683a      	ldr	r2, [r7, #0]
 800fb18:	4413      	add	r3, r2
 800fb1a:	3304      	adds	r3, #4
 800fb1c:	637b      	str	r3, [r7, #52]	; 0x34
			p1 = &(palgo->VL53L1_p_002[i]);
 800fb1e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fb22:	4613      	mov	r3, r2
 800fb24:	00db      	lsls	r3, r3, #3
 800fb26:	4413      	add	r3, r2
 800fb28:	009b      	lsls	r3, r3, #2
 800fb2a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fb2e:	683a      	ldr	r2, [r7, #0]
 800fb30:	4413      	add	r3, r2
 800fb32:	3304      	adds	r3, #4
 800fb34:	633b      	str	r3, [r7, #48]	; 0x30



			if (target_order
 800fb36:	79fb      	ldrb	r3, [r7, #7]
 800fb38:	2b02      	cmp	r3, #2
 800fb3a:	d118      	bne.n	800fb6e <VL53L1_f_028+0xa8>
			== VL53L1_HIST_TARGET_ORDER__STRONGEST_FIRST) {

				if (p0->VL53L1_p_013 <
 800fb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3e:	691a      	ldr	r2, [r3, #16]
						p1->VL53L1_p_013) {
 800fb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb42:	691b      	ldr	r3, [r3, #16]
				if (p0->VL53L1_p_013 <
 800fb44:	429a      	cmp	r2, r3
 800fb46:	da2a      	bge.n	800fb9e <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 800fb48:	2224      	movs	r2, #36	; 0x24
 800fb4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb4e:	f009 fae3 	bl	8019118 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 800fb52:	2224      	movs	r2, #36	; 0x24
 800fb54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb58:	f009 fade 	bl	8019118 <memcpy>
					p0, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 800fb5c:	2224      	movs	r2, #36	; 0x24
 800fb5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb62:	f009 fad9 	bl	8019118 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 800fb66:	2301      	movs	r3, #1
 800fb68:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800fb6c:	e017      	b.n	800fb9e <VL53L1_f_028+0xd8>
				}

			} else {

				if (p0->VL53L1_p_014 > p1->VL53L1_p_014) {
 800fb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb70:	699a      	ldr	r2, [r3, #24]
 800fb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb74:	699b      	ldr	r3, [r3, #24]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d911      	bls.n	800fb9e <VL53L1_f_028+0xd8>



					memcpy(ptmp,
 800fb7a:	2224      	movs	r2, #36	; 0x24
 800fb7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fb7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fb80:	f009 faca 	bl	8019118 <memcpy>
					p1, sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p1,
 800fb84:	2224      	movs	r2, #36	; 0x24
 800fb86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fb88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb8a:	f009 fac5 	bl	8019118 <memcpy>
					p0,   sizeof(VL53L1_hist_pulse_data_t));
					memcpy(p0,
 800fb8e:	2224      	movs	r2, #36	; 0x24
 800fb90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fb94:	f009 fac0 	bl	8019118 <memcpy>
					ptmp, sizeof(VL53L1_hist_pulse_data_t));

					swapped = 1;
 800fb98:	2301      	movs	r3, #1
 800fb9a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		for (i = 1; i < palgo->VL53L1_p_051; i++) {
 800fb9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fba2:	3301      	adds	r3, #1
 800fba4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 800fbae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d3a6      	bcc.n	800fb04 <VL53L1_f_028+0x3e>
	while (swapped > 0) {
 800fbb6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d19b      	bne.n	800faf6 <VL53L1_f_028+0x30>

			}
		}
	}

ENDFUNC:
 800fbbe:	e000      	b.n	800fbc2 <VL53L1_f_028+0xfc>
		goto ENDFUNC;
 800fbc0:	bf00      	nop
	LOG_FUNCTION_END(status);

	return status;
 800fbc2:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d

}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3740      	adds	r7, #64	; 0x40
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}

0800fbce <VL53L1_f_022>:

VL53L1_Error VL53L1_f_022(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fbce:	b480      	push	{r7}
 800fbd0:	b087      	sub	sp, #28
 800fbd2:	af00      	add	r7, sp, #0
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	60b9      	str	r1, [r7, #8]
 800fbd8:	607a      	str	r2, [r7, #4]
 800fbda:	73fb      	strb	r3, [r7, #15]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800fbe8:	7bfa      	ldrb	r2, [r7, #15]
 800fbea:	4613      	mov	r3, r2
 800fbec:	00db      	lsls	r3, r3, #3
 800fbee:	4413      	add	r3, r2
 800fbf0:	009b      	lsls	r3, r3, #2
 800fbf2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fbf6:	687a      	ldr	r2, [r7, #4]
 800fbf8:	4413      	add	r3, r2
 800fbfa:	3304      	adds	r3, #4
 800fbfc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	pdata->VL53L1_p_021  = 0;
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	2200      	movs	r2, #0
 800fc02:	60da      	str	r2, [r3, #12]
	pdata->VL53L1_p_020 = 0;
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	2200      	movs	r2, #0
 800fc08:	609a      	str	r2, [r3, #8]

	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	75fb      	strb	r3, [r7, #23]
 800fc10:	e01c      	b.n	800fc4c <VL53L1_f_022+0x7e>
		i =  lb % palgo->VL53L1_p_031;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	78da      	ldrb	r2, [r3, #3]
 800fc16:	7dfb      	ldrb	r3, [r7, #23]
 800fc18:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc1c:	fb01 f202 	mul.w	r2, r1, r2
 800fc20:	1a9b      	subs	r3, r3, r2
 800fc22:	757b      	strb	r3, [r7, #21]
		pdata->VL53L1_p_021  += pbins->bin_data[i];
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	68da      	ldr	r2, [r3, #12]
 800fc28:	7d79      	ldrb	r1, [r7, #21]
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	3106      	adds	r1, #6
 800fc2e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc32:	441a      	add	r2, r3
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	60da      	str	r2, [r3, #12]
		pdata->VL53L1_p_020 += palgo->VL53L1_p_004;
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	689a      	ldr	r2, [r3, #8]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	689b      	ldr	r3, [r3, #8]
 800fc40:	441a      	add	r2, r3
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	609a      	str	r2, [r3, #8]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 800fc46:	7dfb      	ldrb	r3, [r7, #23]
 800fc48:	3301      	adds	r3, #1
 800fc4a:	75fb      	strb	r3, [r7, #23]
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	791b      	ldrb	r3, [r3, #4]
 800fc50:	7dfa      	ldrb	r2, [r7, #23]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d9dd      	bls.n	800fc12 <VL53L1_f_022+0x44>
	}



	pdata->VL53L1_p_013 =
		pdata->VL53L1_p_021 - pdata->VL53L1_p_020;
 800fc56:	693b      	ldr	r3, [r7, #16]
 800fc58:	68da      	ldr	r2, [r3, #12]
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	689b      	ldr	r3, [r3, #8]
 800fc5e:	1ad2      	subs	r2, r2, r3
	pdata->VL53L1_p_013 =
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	611a      	str	r2, [r3, #16]

	LOG_FUNCTION_END(status);

	return status;
 800fc64:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	371c      	adds	r7, #28
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr

0800fc74 <VL53L1_f_027>:
VL53L1_Error VL53L1_f_027(
	uint8_t                                pulse_no,
	uint8_t                                clip_events,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo)
{
 800fc74:	b590      	push	{r4, r7, lr}
 800fc76:	b08d      	sub	sp, #52	; 0x34
 800fc78:	af02      	add	r7, sp, #8
 800fc7a:	60ba      	str	r2, [r7, #8]
 800fc7c:	607b      	str	r3, [r7, #4]
 800fc7e:	4603      	mov	r3, r0
 800fc80:	73fb      	strb	r3, [r7, #15]
 800fc82:	460b      	mov	r3, r1
 800fc84:	73bb      	strb	r3, [r7, #14]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fc86:	2300      	movs	r3, #0
 800fc88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t   i            = 0;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int16_t   VL53L1_p_015 = 0;
 800fc92:	2300      	movs	r3, #0
 800fc94:	843b      	strh	r3, [r7, #32]
	int16_t   VL53L1_p_016   = 0;
 800fc96:	2300      	movs	r3, #0
 800fc98:	83fb      	strh	r3, [r7, #30]
	int16_t   window_width = 0;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint32_t  tmp_phase    = 0;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	61bb      	str	r3, [r7, #24]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 800fca2:	7bfa      	ldrb	r2, [r7, #15]
 800fca4:	4613      	mov	r3, r2
 800fca6:	00db      	lsls	r3, r3, #3
 800fca8:	4413      	add	r3, r2
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	4413      	add	r3, r2
 800fcb4:	3304      	adds	r3, #4
 800fcb6:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");



	if (pdata->VL53L1_p_025 == 0xFF)
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	789b      	ldrb	r3, [r3, #2]
 800fcbc:	2bff      	cmp	r3, #255	; 0xff
 800fcbe:	d102      	bne.n	800fcc6 <VL53L1_f_027+0x52>
		pdata->VL53L1_p_025 = 1;
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	709a      	strb	r2, [r3, #2]

	i = pdata->VL53L1_p_025 % palgo->VL53L1_p_031;
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	789b      	ldrb	r3, [r3, #2]
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	78d2      	ldrb	r2, [r2, #3]
 800fcce:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcd2:	fb01 f202 	mul.w	r2, r1, r2
 800fcd6:	1a9b      	subs	r3, r3, r2
 800fcd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	VL53L1_p_015  = (int16_t)i;
 800fcdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fce0:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 += (int16_t)pdata->VL53L1_p_015;
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	781b      	ldrb	r3, [r3, #0]
 800fce6:	b29a      	uxth	r2, r3
 800fce8:	8c3b      	ldrh	r3, [r7, #32]
 800fcea:	4413      	add	r3, r2
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	843b      	strh	r3, [r7, #32]
	VL53L1_p_015 -= (int16_t)pdata->VL53L1_p_025;
 800fcf0:	8c3a      	ldrh	r2, [r7, #32]
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	789b      	ldrb	r3, [r3, #2]
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	1ad3      	subs	r3, r2, r3
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	843b      	strh	r3, [r7, #32]

	VL53L1_p_016    = (int16_t)i;
 800fcfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fd02:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   += (int16_t)pdata->VL53L1_p_016;
 800fd04:	697b      	ldr	r3, [r7, #20]
 800fd06:	791b      	ldrb	r3, [r3, #4]
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	8bfb      	ldrh	r3, [r7, #30]
 800fd0c:	4413      	add	r3, r2
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	83fb      	strh	r3, [r7, #30]
	VL53L1_p_016   -= (int16_t)pdata->VL53L1_p_025;
 800fd12:	8bfa      	ldrh	r2, [r7, #30]
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	789b      	ldrb	r3, [r3, #2]
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	1ad3      	subs	r3, r2, r3
 800fd1c:	b29b      	uxth	r3, r3
 800fd1e:	83fb      	strh	r3, [r7, #30]


	window_width = VL53L1_p_016 - VL53L1_p_015;
 800fd20:	8bfa      	ldrh	r2, [r7, #30]
 800fd22:	8c3b      	ldrh	r3, [r7, #32]
 800fd24:	1ad3      	subs	r3, r2, r3
 800fd26:	b29b      	uxth	r3, r3
 800fd28:	84bb      	strh	r3, [r7, #36]	; 0x24
	if (window_width > 3)
 800fd2a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800fd2e:	2b03      	cmp	r3, #3
 800fd30:	dd01      	ble.n	800fd36 <VL53L1_f_027+0xc2>
		window_width = 3;
 800fd32:	2303      	movs	r3, #3
 800fd34:	84bb      	strh	r3, [r7, #36]	; 0x24

	status =
		VL53L1_f_030(
			VL53L1_p_015,
			VL53L1_p_015 + window_width,
 800fd36:	8c3a      	ldrh	r2, [r7, #32]
 800fd38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd3a:	4413      	add	r3, r2
 800fd3c:	b29b      	uxth	r3, r3
		VL53L1_f_030(
 800fd3e:	b219      	sxth	r1, r3
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	78da      	ldrb	r2, [r3, #3]
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	3314      	adds	r3, #20
 800fd48:	7bbc      	ldrb	r4, [r7, #14]
 800fd4a:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800fd4e:	9301      	str	r3, [sp, #4]
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	9300      	str	r3, [sp, #0]
 800fd54:	4623      	mov	r3, r4
 800fd56:	f000 f846 	bl	800fde6 <VL53L1_f_030>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			clip_events,
			pbins,
			&(pdata->VL53L1_p_028));


	if (status == VL53L1_ERROR_NONE)
 800fd60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d114      	bne.n	800fd92 <VL53L1_f_027+0x11e>
		status =
			VL53L1_f_030(
				VL53L1_p_016 - window_width,
 800fd68:	8bfa      	ldrh	r2, [r7, #30]
 800fd6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd6c:	1ad3      	subs	r3, r2, r3
 800fd6e:	b29b      	uxth	r3, r3
			VL53L1_f_030(
 800fd70:	b218      	sxth	r0, r3
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	78da      	ldrb	r2, [r3, #3]
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	331c      	adds	r3, #28
 800fd7a:	7bbc      	ldrb	r4, [r7, #14]
 800fd7c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800fd80:	9301      	str	r3, [sp, #4]
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	9300      	str	r3, [sp, #0]
 800fd86:	4623      	mov	r3, r4
 800fd88:	f000 f82d 	bl	800fde6 <VL53L1_f_030>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				clip_events,
				pbins,
				&(pdata->VL53L1_p_029));


	if (pdata->VL53L1_p_028 > pdata->VL53L1_p_029) {
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	695a      	ldr	r2, [r3, #20]
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	69db      	ldr	r3, [r3, #28]
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d909      	bls.n	800fdb2 <VL53L1_f_027+0x13e>
		tmp_phase        = pdata->VL53L1_p_028;
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	695b      	ldr	r3, [r3, #20]
 800fda2:	61bb      	str	r3, [r7, #24]
		pdata->VL53L1_p_028 = pdata->VL53L1_p_029;
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	69da      	ldr	r2, [r3, #28]
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	615a      	str	r2, [r3, #20]
		pdata->VL53L1_p_029 = tmp_phase;
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	69ba      	ldr	r2, [r7, #24]
 800fdb0:	61da      	str	r2, [r3, #28]
	}


	if (pdata->VL53L1_p_014 < pdata->VL53L1_p_028)
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	699a      	ldr	r2, [r3, #24]
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	695b      	ldr	r3, [r3, #20]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d203      	bcs.n	800fdc6 <VL53L1_f_027+0x152>
		pdata->VL53L1_p_028 = pdata->VL53L1_p_014;
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	699a      	ldr	r2, [r3, #24]
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	615a      	str	r2, [r3, #20]


	if (pdata->VL53L1_p_014 > pdata->VL53L1_p_029)
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	699a      	ldr	r2, [r3, #24]
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	69db      	ldr	r3, [r3, #28]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d903      	bls.n	800fdda <VL53L1_f_027+0x166>
		pdata->VL53L1_p_029 = pdata->VL53L1_p_014;
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	699a      	ldr	r2, [r3, #24]
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	61da      	str	r2, [r3, #28]

	LOG_FUNCTION_END(status);

	return status;
 800fdda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	372c      	adds	r7, #44	; 0x2c
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd90      	pop	{r4, r7, pc}

0800fde6 <VL53L1_f_030>:
	int16_t                            VL53L1_p_026,
	uint8_t                            VL53L1_p_031,
	uint8_t                            clip_events,
	VL53L1_histogram_bin_data_t       *pbins,
	uint32_t                          *pphase)
{
 800fde6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdea:	b09d      	sub	sp, #116	; 0x74
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	461c      	mov	r4, r3
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800fdf6:	460b      	mov	r3, r1
 800fdf8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800fdfc:	4613      	mov	r3, r2
 800fdfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fe02:	4623      	mov	r3, r4
 800fe04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	int16_t  i            = 0;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t  lb            = 0;
 800fe14:	2300      	movs	r3, #0
 800fe16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	int64_t VL53L1_p_008        = 0;
 800fe1a:	f04f 0200 	mov.w	r2, #0
 800fe1e:	f04f 0300 	mov.w	r3, #0
 800fe22:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int64_t event_sum     = 0;
 800fe26:	f04f 0200 	mov.w	r2, #0
 800fe2a:	f04f 0300 	mov.w	r3, #0
 800fe2e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	int64_t weighted_sum  = 0;
 800fe32:	f04f 0200 	mov.w	r2, #0
 800fe36:	f04f 0300 	mov.w	r3, #0
 800fe3a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	LOG_FUNCTION_START("");

	*pphase = VL53L1_MAX_ALLOWED_PHASE;
 800fe3e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800fe42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe46:	6013      	str	r3, [r2, #0]

	if (VL53L1_p_031 != 0)
 800fe48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	f000 809c 	beq.w	800ff8a <VL53L1_f_030+0x1a4>
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 800fe52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800fe56:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800fe5a:	e08f      	b.n	800ff7c <VL53L1_f_030+0x196>

		if (lb < 0)
 800fe5c:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	da09      	bge.n	800fe78 <VL53L1_f_030+0x92>
			i = lb + (int16_t)VL53L1_p_031;
 800fe64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe68:	b29a      	uxth	r2, r3
 800fe6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800fe6e:	4413      	add	r3, r2
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800fe76:	e00a      	b.n	800fe8e <VL53L1_f_030+0xa8>
		else
			i = lb % (int16_t)VL53L1_p_031;
 800fe78:	f9b7 106c 	ldrsh.w	r1, [r7, #108]	; 0x6c
 800fe7c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800fe80:	fb91 f3f2 	sdiv	r3, r1, r2
 800fe84:	fb02 f303 	mul.w	r3, r2, r3
 800fe88:	1acb      	subs	r3, r1, r3
 800fe8a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		if ((i >= 0) && (i < VL53L1_HISTOGRAM_BUFFER_SIZE)) {
 800fe8e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	db6b      	blt.n	800ff6e <VL53L1_f_030+0x188>
 800fe96:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800fe9a:	2b17      	cmp	r3, #23
 800fe9c:	dc67      	bgt.n	800ff6e <VL53L1_f_030+0x188>
			VL53L1_p_008 =
				(int64_t)pbins->bin_data[i] -
 800fe9e:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 800fea2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fea6:	3306      	adds	r3, #6
 800fea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feac:	17da      	asrs	r2, r3, #31
 800feae:	633b      	str	r3, [r7, #48]	; 0x30
 800feb0:	637a      	str	r2, [r7, #52]	; 0x34
				(int64_t)pbins->VL53L1_p_004;
 800feb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800feb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800feba:	17da      	asrs	r2, r3, #31
 800febc:	62bb      	str	r3, [r7, #40]	; 0x28
 800febe:	62fa      	str	r2, [r7, #44]	; 0x2c
			VL53L1_p_008 =
 800fec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800fec6:	4602      	mov	r2, r0
 800fec8:	1a9b      	subs	r3, r3, r2
 800feca:	623b      	str	r3, [r7, #32]
 800fecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fece:	460a      	mov	r2, r1
 800fed0:	eb63 0302 	sbc.w	r3, r3, r2
 800fed4:	627b      	str	r3, [r7, #36]	; 0x24
 800fed6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800feda:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

			if (clip_events > 0 && VL53L1_p_008 < 0)
 800fede:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d009      	beq.n	800fefa <VL53L1_f_030+0x114>
 800fee6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800feea:	2b00      	cmp	r3, #0
 800feec:	da05      	bge.n	800fefa <VL53L1_f_030+0x114>
				VL53L1_p_008 = 0;
 800feee:	f04f 0200 	mov.w	r2, #0
 800fef2:	f04f 0300 	mov.w	r3, #0
 800fef6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
			event_sum += VL53L1_p_008;
 800fefa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800fefe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ff02:	1884      	adds	r4, r0, r2
 800ff04:	61bc      	str	r4, [r7, #24]
 800ff06:	eb41 0303 	adc.w	r3, r1, r3
 800ff0a:	61fb      	str	r3, [r7, #28]
 800ff0c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ff10:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			weighted_sum +=
				(VL53L1_p_008 * (1024 + (2048*(int64_t)lb)));
 800ff14:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ff18:	17da      	asrs	r2, r3, #31
 800ff1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ff1e:	f04f 0200 	mov.w	r2, #0
 800ff22:	f04f 0300 	mov.w	r3, #0
 800ff26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ff28:	02cb      	lsls	r3, r1, #11
 800ff2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff2c:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800ff30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff32:	02ca      	lsls	r2, r1, #11
 800ff34:	f512 6580 	adds.w	r5, r2, #1024	; 0x400
 800ff38:	f143 0600 	adc.w	r6, r3, #0
 800ff3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff3e:	fb06 f203 	mul.w	r2, r6, r3
 800ff42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff44:	fb05 f303 	mul.w	r3, r5, r3
 800ff48:	441a      	add	r2, r3
 800ff4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff4c:	fba3 ab05 	umull	sl, fp, r3, r5
 800ff50:	eb02 030b 	add.w	r3, r2, fp
 800ff54:	469b      	mov	fp, r3
			weighted_sum +=
 800ff56:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ff5a:	eb12 010a 	adds.w	r1, r2, sl
 800ff5e:	6139      	str	r1, [r7, #16]
 800ff60:	eb43 030b 	adc.w	r3, r3, fp
 800ff64:	617b      	str	r3, [r7, #20]
 800ff66:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ff6a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	for (lb = VL53L1_p_022; lb <= VL53L1_p_026; lb++) {
 800ff6e:	f9b7 306c 	ldrsh.w	r3, [r7, #108]	; 0x6c
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	3301      	adds	r3, #1
 800ff76:	b29b      	uxth	r3, r3
 800ff78:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800ff7c:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	; 0x6c
 800ff80:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800ff84:	429a      	cmp	r2, r3
 800ff86:	f77f af69 	ble.w	800fe5c <VL53L1_f_030+0x76>
			VL53L1_TRACE_LEVEL_INFO,
			" event_sum = %8d, weighted_sum = %8d\n",
			event_sum, weighted_sum);
	}

	if (event_sum  > 0) {
 800ff8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ff8e:	2a01      	cmp	r2, #1
 800ff90:	f173 0300 	sbcs.w	r3, r3, #0
 800ff94:	db3b      	blt.n	801000e <VL53L1_f_030+0x228>
		weighted_sum += do_division_s(event_sum, 2);
 800ff96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ff9a:	0fd9      	lsrs	r1, r3, #31
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	60b9      	str	r1, [r7, #8]
 800ffa0:	60f8      	str	r0, [r7, #12]
 800ffa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	eb11 0802 	adds.w	r8, r1, r2
 800ffac:	4629      	mov	r1, r5
 800ffae:	eb41 0903 	adc.w	r9, r1, r3
 800ffb2:	f04f 0200 	mov.w	r2, #0
 800ffb6:	f04f 0300 	mov.w	r3, #0
 800ffba:	ea4f 0258 	mov.w	r2, r8, lsr #1
 800ffbe:	ea42 72c9 	orr.w	r2, r2, r9, lsl #31
 800ffc2:	ea4f 0369 	mov.w	r3, r9, asr #1
 800ffc6:	4610      	mov	r0, r2
 800ffc8:	4619      	mov	r1, r3
 800ffca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ffce:	1814      	adds	r4, r2, r0
 800ffd0:	603c      	str	r4, [r7, #0]
 800ffd2:	414b      	adcs	r3, r1
 800ffd4:	607b      	str	r3, [r7, #4]
 800ffd6:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ffda:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
		weighted_sum = do_division_s(weighted_sum, event_sum);
 800ffde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ffe2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ffe6:	f7f0 f91b 	bl	8000220 <__aeabi_ldivmod>
 800ffea:	4602      	mov	r2, r0
 800ffec:	460b      	mov	r3, r1
 800ffee:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		if (weighted_sum < 0)
 800fff2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	da05      	bge.n	8010006 <VL53L1_f_030+0x220>
			weighted_sum = 0;
 800fffa:	f04f 0200 	mov.w	r2, #0
 800fffe:	f04f 0300 	mov.w	r3, #0
 8010002:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		*pphase = (uint32_t)weighted_sum;
 8010006:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801000c:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(status);

	return status;
 801000e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8010012:	4618      	mov	r0, r3
 8010014:	3774      	adds	r7, #116	; 0x74
 8010016:	46bd      	mov	sp, r7
 8010018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801001c <VL53L1_f_023>:
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *pbins,
	VL53L1_hist_gen3_algo_private_data_t  *palgo,
	int32_t                                pad_value,
	VL53L1_histogram_bin_data_t           *ppulse)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b086      	sub	sp, #24
 8010020:	af00      	add	r7, sp, #0
 8010022:	60b9      	str	r1, [r7, #8]
 8010024:	607a      	str	r2, [r7, #4]
 8010026:	603b      	str	r3, [r7, #0]
 8010028:	4603      	mov	r3, r0
 801002a:	73fb      	strb	r3, [r7, #15]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 801002c:	2300      	movs	r3, #0
 801002e:	75bb      	strb	r3, [r7, #22]

	uint8_t  i            = 0;
 8010030:	2300      	movs	r3, #0
 8010032:	757b      	strb	r3, [r7, #21]
	uint8_t  lb            = 0;
 8010034:	2300      	movs	r3, #0
 8010036:	75fb      	strb	r3, [r7, #23]

	VL53L1_hist_pulse_data_t *pdata = &(palgo->VL53L1_p_002[pulse_no]);
 8010038:	7bfa      	ldrb	r2, [r7, #15]
 801003a:	4613      	mov	r3, r2
 801003c:	00db      	lsls	r3, r3, #3
 801003e:	4413      	add	r3, r2
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	4413      	add	r3, r2
 801004a:	3304      	adds	r3, #4
 801004c:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");



	memcpy(ppulse, pbins, sizeof(VL53L1_histogram_bin_data_t));
 801004e:	22ac      	movs	r2, #172	; 0xac
 8010050:	68b9      	ldr	r1, [r7, #8]
 8010052:	6a38      	ldr	r0, [r7, #32]
 8010054:	f009 f860 	bl	8019118 <memcpy>



	for (lb = palgo->VL53L1_p_049;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 801005e:	75fb      	strb	r3, [r7, #23]
 8010060:	e020      	b.n	80100a4 <VL53L1_f_023+0x88>
		lb < (palgo->VL53L1_p_049 +
		palgo->VL53L1_p_031);
		lb++) {

		if (lb < pdata->VL53L1_p_015 || lb > pdata->VL53L1_p_016) {
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	781b      	ldrb	r3, [r3, #0]
 8010066:	7dfa      	ldrb	r2, [r7, #23]
 8010068:	429a      	cmp	r2, r3
 801006a:	d304      	bcc.n	8010076 <VL53L1_f_023+0x5a>
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	791b      	ldrb	r3, [r3, #4]
 8010070:	7dfa      	ldrb	r2, [r7, #23]
 8010072:	429a      	cmp	r2, r3
 8010074:	d913      	bls.n	801009e <VL53L1_f_023+0x82>
			i =  lb % palgo->VL53L1_p_031;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	78da      	ldrb	r2, [r3, #3]
 801007a:	7dfb      	ldrb	r3, [r7, #23]
 801007c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010080:	fb01 f202 	mul.w	r2, r1, r2
 8010084:	1a9b      	subs	r3, r3, r2
 8010086:	757b      	strb	r3, [r7, #21]
			if (i < ppulse->VL53L1_p_024)
 8010088:	6a3b      	ldr	r3, [r7, #32]
 801008a:	7a9b      	ldrb	r3, [r3, #10]
 801008c:	7d7a      	ldrb	r2, [r7, #21]
 801008e:	429a      	cmp	r2, r3
 8010090:	d205      	bcs.n	801009e <VL53L1_f_023+0x82>
				ppulse->bin_data[i] = pad_value;
 8010092:	7d7a      	ldrb	r2, [r7, #21]
 8010094:	6a3b      	ldr	r3, [r7, #32]
 8010096:	3206      	adds	r2, #6
 8010098:	6839      	ldr	r1, [r7, #0]
 801009a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		lb++) {
 801009e:	7dfb      	ldrb	r3, [r7, #23]
 80100a0:	3301      	adds	r3, #1
 80100a2:	75fb      	strb	r3, [r7, #23]
		lb < (palgo->VL53L1_p_049 +
 80100a4:	7dfa      	ldrb	r2, [r7, #23]
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80100ac:	4619      	mov	r1, r3
		palgo->VL53L1_p_031);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	78db      	ldrb	r3, [r3, #3]
		lb < (palgo->VL53L1_p_049 +
 80100b2:	440b      	add	r3, r1
	for (lb = palgo->VL53L1_p_049;
 80100b4:	429a      	cmp	r2, r3
 80100b6:	dbd4      	blt.n	8010062 <VL53L1_f_023+0x46>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 80100b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	3718      	adds	r7, #24
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <VL53L1_f_026>:
	uint8_t                       crosstalk_compensation_enable,
	VL53L1_histogram_bin_data_t  *phist_data_ap,
	VL53L1_histogram_bin_data_t  *phist_data_zp,
	VL53L1_histogram_bin_data_t  *pxtalk_hist,
	uint16_t                     *psigma_est)
{
 80100c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c8:	b096      	sub	sp, #88	; 0x58
 80100ca:	af08      	add	r7, sp, #32
 80100cc:	4604      	mov	r4, r0
 80100ce:	4608      	mov	r0, r1
 80100d0:	4611      	mov	r1, r2
 80100d2:	461a      	mov	r2, r3
 80100d4:	4623      	mov	r3, r4
 80100d6:	73fb      	strb	r3, [r7, #15]
 80100d8:	4603      	mov	r3, r0
 80100da:	73bb      	strb	r3, [r7, #14]
 80100dc:	460b      	mov	r3, r1
 80100de:	737b      	strb	r3, [r7, #13]
 80100e0:	4613      	mov	r3, r2
 80100e2:	733b      	strb	r3, [r7, #12]


	VL53L1_Error status      = VL53L1_ERROR_NONE;
 80100e4:	2300      	movs	r3, #0
 80100e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_Error func_status = VL53L1_ERROR_NONE;
 80100ea:	2300      	movs	r3, #0
 80100ec:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	uint8_t  i    = 0;
 80100f0:	2300      	movs	r3, #0
 80100f2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int32_t  VL53L1_p_003    = 0;
 80100f6:	2300      	movs	r3, #0
 80100f8:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t  VL53L1_p_018    = 0;
 80100fa:	2300      	movs	r3, #0
 80100fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t  VL53L1_p_001    = 0;
 80100fe:	2300      	movs	r3, #0
 8010100:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t  a_zp = 0;
 8010102:	2300      	movs	r3, #0
 8010104:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t  c_zp = 0;
 8010106:	2300      	movs	r3, #0
 8010108:	623b      	str	r3, [r7, #32]
	int32_t  ax   = 0;
 801010a:	2300      	movs	r3, #0
 801010c:	61fb      	str	r3, [r7, #28]
	int32_t  bx   = 0;
 801010e:	2300      	movs	r3, #0
 8010110:	61bb      	str	r3, [r7, #24]
	int32_t  cx   = 0;
 8010112:	2300      	movs	r3, #0
 8010114:	617b      	str	r3, [r7, #20]


	if (VL53L1_p_031 == 0) {
 8010116:	7b7b      	ldrb	r3, [r7, #13]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d106      	bne.n	801012a <VL53L1_f_026+0x66>
		*psigma_est = 0xFFFF;
 801011c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801011e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010122:	801a      	strh	r2, [r3, #0]
		return VL53L1_ERROR_DIVISION_BY_ZERO;
 8010124:	f06f 030e 	mvn.w	r3, #14
 8010128:	e06f      	b.n	801020a <VL53L1_f_026+0x146>
	}
	i = bin % VL53L1_p_031;
 801012a:	7bfb      	ldrb	r3, [r7, #15]
 801012c:	7b7a      	ldrb	r2, [r7, #13]
 801012e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010132:	fb01 f202 	mul.w	r2, r1, r2
 8010136:	1a9b      	subs	r3, r3, r2
 8010138:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35



	VL53L1_f_013(
 801013c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010140:	7b39      	ldrb	r1, [r7, #12]
 8010142:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010146:	f107 0320 	add.w	r3, r7, #32
 801014a:	9301      	str	r3, [sp, #4]
 801014c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010150:	9300      	str	r3, [sp, #0]
 8010152:	4613      	mov	r3, r2
 8010154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010156:	f000 fddb 	bl	8010d10 <VL53L1_f_013>
			&VL53L1_p_018,
			&c_zp);



	VL53L1_f_013(
 801015a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801015e:	7b39      	ldrb	r1, [r7, #12]
 8010160:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8010164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010168:	9301      	str	r3, [sp, #4]
 801016a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801016e:	9300      	str	r3, [sp, #0]
 8010170:	4613      	mov	r3, r2
 8010172:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010174:	f000 fdcc 	bl	8010d10 <VL53L1_f_013>
			phist_data_ap,
			&VL53L1_p_003,
			&VL53L1_p_018,
			&VL53L1_p_001);

	if (crosstalk_compensation_enable > 0)
 8010178:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00e      	beq.n	801019e <VL53L1_f_026+0xda>
		VL53L1_f_013(
 8010180:	f107 021c 	add.w	r2, r7, #28
 8010184:	7b39      	ldrb	r1, [r7, #12]
 8010186:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 801018a:	f107 0314 	add.w	r3, r7, #20
 801018e:	9301      	str	r3, [sp, #4]
 8010190:	f107 0318 	add.w	r3, r7, #24
 8010194:	9300      	str	r3, [sp, #0]
 8010196:	4613      	mov	r3, r2
 8010198:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801019a:	f000 fdb9 	bl	8010d10 <VL53L1_f_013>




	func_status =
		VL53L1_f_014(
 801019e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a0:	469c      	mov	ip, r3
 80101a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a4:	469e      	mov	lr, r3
 80101a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a8:	4698      	mov	r8, r3
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	4619      	mov	r1, r3
 80101ae:	6a3b      	ldr	r3, [r7, #32]
 80101b0:	461c      	mov	r4, r3
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	461d      	mov	r5, r3
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	461e      	mov	r6, r3
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	60bb      	str	r3, [r7, #8]
			(uint32_t)a_zp,
			(uint32_t)c_zp,
			(uint32_t)bx,
			(uint32_t)ax,
			(uint32_t)cx,
			(uint32_t)phist_data_ap->VL53L1_p_004,
 80101be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
		VL53L1_f_014(
 80101c4:	607b      	str	r3, [r7, #4]
 80101c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80101cc:	7bb8      	ldrb	r0, [r7, #14]
 80101ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80101d0:	9207      	str	r2, [sp, #28]
 80101d2:	9306      	str	r3, [sp, #24]
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	9205      	str	r2, [sp, #20]
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	9304      	str	r3, [sp, #16]
 80101dc:	9603      	str	r6, [sp, #12]
 80101de:	9502      	str	r5, [sp, #8]
 80101e0:	9401      	str	r4, [sp, #4]
 80101e2:	9100      	str	r1, [sp, #0]
 80101e4:	4643      	mov	r3, r8
 80101e6:	4672      	mov	r2, lr
 80101e8:	4661      	mov	r1, ip
 80101ea:	f002 ff30 	bl	801304e <VL53L1_f_014>
 80101ee:	4603      	mov	r3, r0
 80101f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			psigma_est);




	if (func_status == VL53L1_ERROR_DIVISION_BY_ZERO)
 80101f4:	f997 3036 	ldrsb.w	r3, [r7, #54]	; 0x36
 80101f8:	f113 0f0f 	cmn.w	r3, #15
 80101fc:	d103      	bne.n	8010206 <VL53L1_f_026+0x142>
		*psigma_est = 0xFFFF;
 80101fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010204:	801a      	strh	r2, [r3, #0]


	return status;
 8010206:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801020a:	4618      	mov	r0, r3
 801020c:	3738      	adds	r7, #56	; 0x38
 801020e:	46bd      	mov	sp, r7
 8010210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010214 <VL53L1_f_029>:
	uint8_t                      valid_phase_high,
	uint16_t                     sigma_thres,
	VL53L1_histogram_bin_data_t *pbins,
	VL53L1_hist_pulse_data_t    *ppulse,
	VL53L1_range_data_t         *pdata)
{
 8010214:	b490      	push	{r4, r7}
 8010216:	b084      	sub	sp, #16
 8010218:	af00      	add	r7, sp, #0
 801021a:	4604      	mov	r4, r0
 801021c:	4608      	mov	r0, r1
 801021e:	4611      	mov	r1, r2
 8010220:	461a      	mov	r2, r3
 8010222:	4623      	mov	r3, r4
 8010224:	71fb      	strb	r3, [r7, #7]
 8010226:	4603      	mov	r3, r0
 8010228:	71bb      	strb	r3, [r7, #6]
 801022a:	460b      	mov	r3, r1
 801022c:	717b      	strb	r3, [r7, #5]
 801022e:	4613      	mov	r3, r2
 8010230:	807b      	strh	r3, [r7, #2]

	uint16_t  lower_phase_limit = 0;
 8010232:	2300      	movs	r3, #0
 8010234:	81fb      	strh	r3, [r7, #14]
	uint16_t  upper_phase_limit = 0;
 8010236:	2300      	movs	r3, #0
 8010238:	81bb      	strh	r3, [r7, #12]



	pdata->range_id              = range_id;
 801023a:	6a3b      	ldr	r3, [r7, #32]
 801023c:	79fa      	ldrb	r2, [r7, #7]
 801023e:	701a      	strb	r2, [r3, #0]
	pdata->time_stamp            = 0;
 8010240:	6a3b      	ldr	r3, [r7, #32]
 8010242:	2200      	movs	r2, #0
 8010244:	605a      	str	r2, [r3, #4]

	pdata->VL53L1_p_015          = ppulse->VL53L1_p_015;
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	781a      	ldrb	r2, [r3, #0]
 801024a:	6a3b      	ldr	r3, [r7, #32]
 801024c:	721a      	strb	r2, [r3, #8]
	pdata->VL53L1_p_022             = ppulse->VL53L1_p_022;
 801024e:	69fb      	ldr	r3, [r7, #28]
 8010250:	785a      	ldrb	r2, [r3, #1]
 8010252:	6a3b      	ldr	r3, [r7, #32]
 8010254:	725a      	strb	r2, [r3, #9]
	pdata->VL53L1_p_025            = ppulse->VL53L1_p_025;
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	789a      	ldrb	r2, [r3, #2]
 801025a:	6a3b      	ldr	r3, [r7, #32]
 801025c:	729a      	strb	r2, [r3, #10]
	pdata->VL53L1_p_026              = ppulse->VL53L1_p_026;
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	78da      	ldrb	r2, [r3, #3]
 8010262:	6a3b      	ldr	r3, [r7, #32]
 8010264:	72da      	strb	r2, [r3, #11]
	pdata->VL53L1_p_016            = ppulse->VL53L1_p_016;
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	791a      	ldrb	r2, [r3, #4]
 801026a:	6a3b      	ldr	r3, [r7, #32]
 801026c:	731a      	strb	r2, [r3, #12]
	pdata->VL53L1_p_027             = ppulse->VL53L1_p_027;
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	795a      	ldrb	r2, [r3, #5]
 8010272:	6a3b      	ldr	r3, [r7, #32]
 8010274:	735a      	strb	r2, [r3, #13]



	pdata->VL53L1_p_030  =
		(ppulse->VL53L1_p_016 + 1) - ppulse->VL53L1_p_015;
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	791a      	ldrb	r2, [r3, #4]
 801027a:	69fb      	ldr	r3, [r7, #28]
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	1ad3      	subs	r3, r2, r3
 8010280:	b2db      	uxtb	r3, r3
 8010282:	3301      	adds	r3, #1
 8010284:	b2da      	uxtb	r2, r3
	pdata->VL53L1_p_030  =
 8010286:	6a3b      	ldr	r3, [r7, #32]
 8010288:	741a      	strb	r2, [r3, #16]



	pdata->zero_distance_phase   = pbins->zero_distance_phase;
 801028a:	69bb      	ldr	r3, [r7, #24]
 801028c:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8010290:	6a3b      	ldr	r3, [r7, #32]
 8010292:	829a      	strh	r2, [r3, #20]
	pdata->VL53L1_p_005              = ppulse->VL53L1_p_005;
 8010294:	69fb      	ldr	r3, [r7, #28]
 8010296:	8c1a      	ldrh	r2, [r3, #32]
 8010298:	6a3b      	ldr	r3, [r7, #32]
 801029a:	879a      	strh	r2, [r3, #60]	; 0x3c
	pdata->VL53L1_p_028             = (uint16_t)ppulse->VL53L1_p_028;
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	695b      	ldr	r3, [r3, #20]
 80102a0:	b29a      	uxth	r2, r3
 80102a2:	6a3b      	ldr	r3, [r7, #32]
 80102a4:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdata->VL53L1_p_014          = (uint16_t)ppulse->VL53L1_p_014;
 80102a6:	69fb      	ldr	r3, [r7, #28]
 80102a8:	699b      	ldr	r3, [r3, #24]
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	6a3b      	ldr	r3, [r7, #32]
 80102ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	pdata->VL53L1_p_029             = (uint16_t)ppulse->VL53L1_p_029;
 80102b2:	69fb      	ldr	r3, [r7, #28]
 80102b4:	69db      	ldr	r3, [r3, #28]
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	6a3b      	ldr	r3, [r7, #32]
 80102ba:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pdata->VL53L1_p_021  = (uint32_t)ppulse->VL53L1_p_021;
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	68db      	ldr	r3, [r3, #12]
 80102c2:	461a      	mov	r2, r3
 80102c4:	6a3b      	ldr	r3, [r7, #32]
 80102c6:	629a      	str	r2, [r3, #40]	; 0x28
	pdata->VL53L1_p_013   = ppulse->VL53L1_p_013;
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	691a      	ldr	r2, [r3, #16]
 80102cc:	6a3b      	ldr	r3, [r7, #32]
 80102ce:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->VL53L1_p_020 = (uint32_t)ppulse->VL53L1_p_020;
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	689b      	ldr	r3, [r3, #8]
 80102d4:	461a      	mov	r2, r3
 80102d6:	6a3b      	ldr	r3, [r7, #32]
 80102d8:	625a      	str	r2, [r3, #36]	; 0x24
	pdata->total_periods_elapsed = pbins->total_periods_elapsed;
 80102da:	69bb      	ldr	r3, [r7, #24]
 80102dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80102e0:	6a3b      	ldr	r3, [r7, #32]
 80102e2:	619a      	str	r2, [r3, #24]



	pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 80102e4:	6a3b      	ldr	r3, [r7, #32]
 80102e6:	2213      	movs	r2, #19
 80102e8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a


	if (sigma_thres > 0 &&
 80102ec:	887b      	ldrh	r3, [r7, #2]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d00a      	beq.n	8010308 <VL53L1_f_029+0xf4>
		(uint32_t)ppulse->VL53L1_p_005 > ((uint32_t)sigma_thres << 5))
 80102f2:	69fb      	ldr	r3, [r7, #28]
 80102f4:	8c1b      	ldrh	r3, [r3, #32]
 80102f6:	461a      	mov	r2, r3
 80102f8:	887b      	ldrh	r3, [r7, #2]
 80102fa:	015b      	lsls	r3, r3, #5
	if (sigma_thres > 0 &&
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d903      	bls.n	8010308 <VL53L1_f_029+0xf4>
		pdata->range_status = VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK;
 8010300:	6a3b      	ldr	r3, [r7, #32]
 8010302:	2206      	movs	r2, #6
 8010304:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a



	lower_phase_limit  = (uint8_t)valid_phase_low << 8;
 8010308:	79bb      	ldrb	r3, [r7, #6]
 801030a:	b29b      	uxth	r3, r3
 801030c:	021b      	lsls	r3, r3, #8
 801030e:	81fb      	strh	r3, [r7, #14]
	if (lower_phase_limit < pdata->zero_distance_phase)
 8010310:	6a3b      	ldr	r3, [r7, #32]
 8010312:	8a9b      	ldrh	r3, [r3, #20]
 8010314:	89fa      	ldrh	r2, [r7, #14]
 8010316:	429a      	cmp	r2, r3
 8010318:	d205      	bcs.n	8010326 <VL53L1_f_029+0x112>
		lower_phase_limit =
			pdata->zero_distance_phase -
 801031a:	6a3b      	ldr	r3, [r7, #32]
 801031c:	8a9a      	ldrh	r2, [r3, #20]
		lower_phase_limit =
 801031e:	89fb      	ldrh	r3, [r7, #14]
 8010320:	1ad3      	subs	r3, r2, r3
 8010322:	81fb      	strh	r3, [r7, #14]
 8010324:	e001      	b.n	801032a <VL53L1_f_029+0x116>
			lower_phase_limit;
	else
		lower_phase_limit  = 0;
 8010326:	2300      	movs	r3, #0
 8010328:	81fb      	strh	r3, [r7, #14]

	upper_phase_limit  = (uint8_t)valid_phase_high << 8;
 801032a:	797b      	ldrb	r3, [r7, #5]
 801032c:	b29b      	uxth	r3, r3
 801032e:	021b      	lsls	r3, r3, #8
 8010330:	81bb      	strh	r3, [r7, #12]
	upper_phase_limit += pbins->zero_distance_phase;
 8010332:	69bb      	ldr	r3, [r7, #24]
 8010334:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8010338:	89bb      	ldrh	r3, [r7, #12]
 801033a:	4413      	add	r3, r2
 801033c:	81bb      	strh	r3, [r7, #12]

	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 801033e:	6a3b      	ldr	r3, [r7, #32]
 8010340:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8010344:	89fa      	ldrh	r2, [r7, #14]
 8010346:	429a      	cmp	r2, r3
 8010348:	d805      	bhi.n	8010356 <VL53L1_f_029+0x142>
		pdata->VL53L1_p_014 > upper_phase_limit)
 801034a:	6a3b      	ldr	r3, [r7, #32]
 801034c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
	if (pdata->VL53L1_p_014 < lower_phase_limit ||
 8010350:	89ba      	ldrh	r2, [r7, #12]
 8010352:	429a      	cmp	r2, r3
 8010354:	d203      	bcs.n	801035e <VL53L1_f_029+0x14a>
		pdata->range_status = VL53L1_DEVICEERROR_RANGEPHASECHECK;
 8010356:	6a3b      	ldr	r3, [r7, #32]
 8010358:	2205      	movs	r2, #5
 801035a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

}
 801035e:	bf00      	nop
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bc90      	pop	{r4, r7}
 8010366:	4770      	bx	lr

08010368 <VL53L1_f_033>:
	VL53L1_hist_gen3_algo_private_data_t   *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t  *pfiltered,
	VL53L1_hist_gen3_dmax_private_data_t   *pdmax_algo,
	VL53L1_range_results_t                 *presults,
	uint8_t                                histo_merge_nb)
{
 8010368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801036a:	b08f      	sub	sp, #60	; 0x3c
 801036c:	af06      	add	r7, sp, #24
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	607a      	str	r2, [r7, #4]
 8010374:	603b      	str	r3, [r7, #0]


	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8010376:	2300      	movs	r3, #0
 8010378:	77fb      	strb	r3, [r7, #31]

	VL53L1_hist_pulse_data_t     *ppulse_data;
	VL53L1_range_data_t          *prange_data;

	uint8_t                       p = 0;
 801037a:	2300      	movs	r3, #0
 801037c:	77bb      	strb	r3, [r7, #30]
	VL53L1_histogram_bin_data_t *pB = &(palgo3->VL53L1_p_010);
 801037e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010380:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010384:	61bb      	str	r3, [r7, #24]





	VL53L1_f_016(palgo3);
 8010386:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010388:	f7ff f856 	bl	800f438 <VL53L1_f_016>



	memcpy(
		&(palgo3->VL53L1_p_010),
 801038c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801038e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
	memcpy(
 8010392:	22ac      	movs	r2, #172	; 0xac
 8010394:	6839      	ldr	r1, [r7, #0]
 8010396:	4618      	mov	r0, r3
 8010398:	f008 febe 	bl	8019118 <memcpy>
		pbins_input,
		sizeof(VL53L1_histogram_bin_data_t));



	presults->cfg_device_state = pbins_input->cfg_device_state;
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	781a      	ldrb	r2, [r3, #0]
 80103a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103a2:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pbins_input->rd_device_state;
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	785a      	ldrb	r2, [r3, #1]
 80103a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103aa:	705a      	strb	r2, [r3, #1]
	presults->zone_id          = pbins_input->zone_id;
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	789a      	ldrb	r2, [r3, #2]
 80103b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103b2:	709a      	strb	r2, [r3, #2]
	presults->stream_count     = pbins_input->result__stream_count;
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	f893 207b 	ldrb.w	r2, [r3, #123]	; 0x7b
 80103ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103bc:	70da      	strb	r2, [r3, #3]
	presults->wrap_dmax_mm     = 0;
 80103be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103c0:	2200      	movs	r2, #0
 80103c2:	81da      	strh	r2, [r3, #14]
	presults->max_results      = VL53L1_MAX_RANGE_RESULTS;
 80103c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103c6:	2204      	movs	r2, #4
 80103c8:	745a      	strb	r2, [r3, #17]
	presults->active_results   = 0;
 80103ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103cc:	2200      	movs	r2, #0
 80103ce:	749a      	strb	r2, [r3, #18]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 80103d0:	2300      	movs	r3, #0
 80103d2:	77bb      	strb	r3, [r7, #30]
 80103d4:	e008      	b.n	80103e8 <VL53L1_f_033+0x80>
		presults->VL53L1_p_007[p] = 0;
 80103d6:	7fbb      	ldrb	r3, [r7, #30]
 80103d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103da:	005b      	lsls	r3, r3, #1
 80103dc:	4413      	add	r3, r2
 80103de:	2200      	movs	r2, #0
 80103e0:	809a      	strh	r2, [r3, #4]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++)
 80103e2:	7fbb      	ldrb	r3, [r7, #30]
 80103e4:	3301      	adds	r3, #1
 80103e6:	77bb      	strb	r3, [r7, #30]
 80103e8:	7fbb      	ldrb	r3, [r7, #30]
 80103ea:	2b04      	cmp	r3, #4
 80103ec:	d9f3      	bls.n	80103d6 <VL53L1_f_033+0x6e>



	VL53L1_hist_calc_zero_distance_phase(&(palgo3->VL53L1_p_010));
 80103ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103f0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fd ff58 	bl	800e2aa <VL53L1_hist_calc_zero_distance_phase>



	VL53L1_hist_estimate_ambient_from_thresholded_bins(
		(int32_t)ppost_cfg->ambient_thresh_sigma0,
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	795b      	ldrb	r3, [r3, #5]
	VL53L1_hist_estimate_ambient_from_thresholded_bins(
 80103fe:	461a      	mov	r2, r3
 8010400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010402:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010406:	4619      	mov	r1, r3
 8010408:	4610      	mov	r0, r2
 801040a:	f7fd ff8e 	bl	800e32a <VL53L1_hist_estimate_ambient_from_thresholded_bins>
		&(palgo3->VL53L1_p_010));

	VL53L1_hist_estimate_ambient_from_ambient_bins(
 801040e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010410:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010414:	4618      	mov	r0, r3
 8010416:	f7fe fb66 	bl	800eae6 <VL53L1_hist_estimate_ambient_from_ambient_bins>
			&(palgo3->VL53L1_p_010));


	VL53L1_hist_remove_ambient_bins(&(palgo3->VL53L1_p_010));
 801041a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801041c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8010420:	4618      	mov	r0, r3
 8010422:	f7fd fffc 	bl	800e41e <VL53L1_hist_remove_ambient_bins>


	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801042c:	2b00      	cmp	r3, #0
 801042e:	d009      	beq.n	8010444 <VL53L1_f_033+0xdc>
		VL53L1_f_004(
 8010430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010432:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010438:	f503 7352 	add.w	r3, r3, #840	; 0x348
 801043c:	461a      	mov	r2, r3
 801043e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010440:	f000 fdae 	bl	8010fa0 <VL53L1_f_004>
				&(palgo3->VL53L1_p_010),
				&(palgo3->VL53L1_p_038));


	pdmax_cfg->ambient_thresh_sigma =
		ppost_cfg->ambient_thresh_sigma1;
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	799a      	ldrb	r2, [r3, #6]
	pdmax_cfg->ambient_thresh_sigma =
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	705a      	strb	r2, [r3, #1]

	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 801044c:	2300      	movs	r3, #0
 801044e:	77bb      	strb	r3, [r7, #30]
 8010450:	e01e      	b.n	8010490 <VL53L1_f_033+0x128>
		if (status == VL53L1_ERROR_NONE) {
 8010452:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d117      	bne.n	801048a <VL53L1_f_033+0x122>
			status =
			VL53L1_f_001(
 801045a:	7fbb      	ldrb	r3, [r7, #30]
 801045c:	68ba      	ldr	r2, [r7, #8]
 801045e:	3304      	adds	r3, #4
 8010460:	005b      	lsls	r3, r3, #1
 8010462:	4413      	add	r3, r2
 8010464:	8898      	ldrh	r0, [r3, #4]
 8010466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010468:	f503 7127 	add.w	r1, r3, #668	; 0x29c
				pdmax_cfg->target_reflectance_for_dmax_calc[p],
				pdmax_cal,
				pdmax_cfg,
				&(palgo3->VL53L1_p_010),
				pdmax_algo,
				&(presults->VL53L1_p_007[p]));
 801046c:	7fbb      	ldrb	r3, [r7, #30]
			VL53L1_f_001(
 801046e:	005b      	lsls	r3, r3, #1
 8010470:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010472:	4413      	add	r3, r2
 8010474:	3304      	adds	r3, #4
 8010476:	9301      	str	r3, [sp, #4]
 8010478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801047a:	9300      	str	r3, [sp, #0]
 801047c:	460b      	mov	r3, r1
 801047e:	68ba      	ldr	r2, [r7, #8]
 8010480:	68f9      	ldr	r1, [r7, #12]
 8010482:	f7fe fb7b 	bl	800eb7c <VL53L1_f_001>
 8010486:	4603      	mov	r3, r0
 8010488:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < VL53L1_MAX_AMBIENT_DMAX_VALUES; p++) {
 801048a:	7fbb      	ldrb	r3, [r7, #30]
 801048c:	3301      	adds	r3, #1
 801048e:	77bb      	strb	r3, [r7, #30]
 8010490:	7fbb      	ldrb	r3, [r7, #30]
 8010492:	2b04      	cmp	r3, #4
 8010494:	d9dd      	bls.n	8010452 <VL53L1_f_033+0xea>





	if (status == VL53L1_ERROR_NONE)
 8010496:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d11a      	bne.n	80104d4 <VL53L1_f_033+0x16c>
		status =
			VL53L1_f_018(
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	8918      	ldrh	r0, [r3, #8]
			ppost_cfg->ambient_thresh_events_scaler,
			(int32_t)pdmax_cfg->ambient_thresh_sigma,
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	785b      	ldrb	r3, [r3, #1]
			VL53L1_f_018(
 80104a6:	461e      	mov	r6, r3
			(int32_t)ppost_cfg->min_ambient_thresh_events,
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	68dc      	ldr	r4, [r3, #12]
			VL53L1_f_018(
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f893 5028 	ldrb.w	r5, [r3, #40]	; 0x28
 80104b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104b4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80104b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80104ba:	f502 7252 	add.w	r2, r2, #840	; 0x348
 80104be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80104c0:	9102      	str	r1, [sp, #8]
 80104c2:	9201      	str	r2, [sp, #4]
 80104c4:	9300      	str	r3, [sp, #0]
 80104c6:	462b      	mov	r3, r5
 80104c8:	4622      	mov	r2, r4
 80104ca:	4631      	mov	r1, r6
 80104cc:	f7ff f82d 	bl	800f52a <VL53L1_f_018>
 80104d0:	4603      	mov	r3, r0
 80104d2:	77fb      	strb	r3, [r7, #31]





	if (status == VL53L1_ERROR_NONE)
 80104d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d104      	bne.n	80104e6 <VL53L1_f_033+0x17e>
		status =
			VL53L1_f_019(palgo3);
 80104dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104de:	f7ff f954 	bl	800f78a <VL53L1_f_019>
 80104e2:	4603      	mov	r3, r0
 80104e4:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 80104e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d104      	bne.n	80104f8 <VL53L1_f_033+0x190>
		status =
			VL53L1_f_020(palgo3);
 80104ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80104f0:	f7ff f999 	bl	800f826 <VL53L1_f_020>
 80104f4:	4603      	mov	r3, r0
 80104f6:	77fb      	strb	r3, [r7, #31]



	if (status == VL53L1_ERROR_NONE)
 80104f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d104      	bne.n	801050a <VL53L1_f_033+0x1a2>
		status =
			VL53L1_f_021(palgo3);
 8010500:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010502:	f7ff fa0e 	bl	800f922 <VL53L1_f_021>
 8010506:	4603      	mov	r3, r0
 8010508:	77fb      	strb	r3, [r7, #31]



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 801050a:	2300      	movs	r3, #0
 801050c:	77bb      	strb	r3, [r7, #30]
 801050e:	e0a6      	b.n	801065e <VL53L1_f_033+0x2f6>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 8010510:	7fba      	ldrb	r2, [r7, #30]
 8010512:	4613      	mov	r3, r2
 8010514:	00db      	lsls	r3, r3, #3
 8010516:	4413      	add	r3, r2
 8010518:	009b      	lsls	r3, r3, #2
 801051a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801051e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010520:	4413      	add	r3, r2
 8010522:	3304      	adds	r3, #4
 8010524:	617b      	str	r3, [r7, #20]



		if (status == VL53L1_ERROR_NONE)
 8010526:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d109      	bne.n	8010542 <VL53L1_f_033+0x1da>
			status =
				VL53L1_f_022(
 801052e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010530:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010534:	7fbb      	ldrb	r3, [r7, #30]
 8010536:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010538:	4618      	mov	r0, r3
 801053a:	f7ff fb48 	bl	800fbce <VL53L1_f_022>
 801053e:	4603      	mov	r3, r0
 8010540:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_010),
					palgo3);



		if (status == VL53L1_ERROR_NONE)
 8010542:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d110      	bne.n	801056c <VL53L1_f_033+0x204>
			status =
				VL53L1_f_023(
 801054a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801054c:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8010556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010558:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 801055c:	7fb8      	ldrb	r0, [r7, #30]
 801055e:	9300      	str	r3, [sp, #0]
 8010560:	4613      	mov	r3, r2
 8010562:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010564:	f7ff fd5a 	bl	801001c <VL53L1_f_023>
 8010568:	4603      	mov	r3, r0
 801056a:	77fb      	strb	r3, [r7, #31]
					pB->VL53L1_p_004,
					&(palgo3->VL53L1_p_052));



		if (status == VL53L1_ERROR_NONE) {
 801056c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d10d      	bne.n	8010590 <VL53L1_f_033+0x228>
			status =
				VL53L1_f_023(
 8010574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010576:	f503 7127 	add.w	r1, r3, #668	; 0x29c
 801057a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801057c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8010580:	7fb8      	ldrb	r0, [r7, #30]
 8010582:	9300      	str	r3, [sp, #0]
 8010584:	2300      	movs	r3, #0
 8010586:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010588:	f7ff fd48 	bl	801001c <VL53L1_f_023>
 801058c:	4603      	mov	r3, r0
 801058e:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_053));
		}



		if (status == VL53L1_ERROR_NONE) {
 8010590:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d10d      	bne.n	80105b4 <VL53L1_f_033+0x24c>
			status =
				VL53L1_f_023(
 8010598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801059a:	f503 7152 	add.w	r1, r3, #840	; 0x348
 801059e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105a0:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 80105a4:	7fb8      	ldrb	r0, [r7, #30]
 80105a6:	9300      	str	r3, [sp, #0]
 80105a8:	2300      	movs	r3, #0
 80105aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80105ac:	f7ff fd36 	bl	801001c <VL53L1_f_023>
 80105b0:	4603      	mov	r3, r0
 80105b2:	77fb      	strb	r3, [r7, #31]
					&(palgo3->VL53L1_p_054));
		}



		if (status == VL53L1_ERROR_NONE)
 80105b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d109      	bne.n	80105d0 <VL53L1_f_033+0x268>
			status =
				VL53L1_f_034(
 80105bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105be:	f503 717d 	add.w	r1, r3, #1012	; 0x3f4
 80105c2:	7fb8      	ldrb	r0, [r7, #30]
 80105c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80105c8:	f000 f8dd 	bl	8010786 <VL53L1_f_034>
 80105cc:	4603      	mov	r3, r0
 80105ce:	77fb      	strb	r3, [r7, #31]
					palgo3,
					pfiltered);



		if (status == VL53L1_ERROR_NONE)
 80105d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d108      	bne.n	80105ea <VL53L1_f_033+0x282>
			status =
				VL53L1_f_035(
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	8a19      	ldrh	r1, [r3, #16]
 80105dc:	7fb8      	ldrb	r0, [r7, #30]
 80105de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105e2:	f000 f95c 	bl	801089e <VL53L1_f_035>
 80105e6:	4603      	mov	r3, r0
 80105e8:	77fb      	strb	r3, [r7, #31]
					p,
					ppost_cfg->noise_threshold,
					pfiltered,
					palgo3);

		if (status == VL53L1_ERROR_NONE)
 80105ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d124      	bne.n	801063c <VL53L1_f_033+0x2d4>
			status =
			VL53L1_f_026(
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	789d      	ldrb	r5, [r3, #2]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	7e1e      	ldrb	r6, [r3, #24]
 80105fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105fc:	f893 c003 	ldrb.w	ip, [r3, #3]
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	f893 e006 	ldrb.w	lr, [r3, #6]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801060c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801060e:	f502 727d 	add.w	r2, r2, #1012	; 0x3f4
 8010612:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010614:	f501 6194 	add.w	r1, r1, #1184	; 0x4a0
 8010618:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801061a:	f200 504c 	addw	r0, r0, #1356	; 0x54c
 801061e:	697c      	ldr	r4, [r7, #20]
 8010620:	3420      	adds	r4, #32
 8010622:	9404      	str	r4, [sp, #16]
 8010624:	9003      	str	r0, [sp, #12]
 8010626:	9102      	str	r1, [sp, #8]
 8010628:	9201      	str	r2, [sp, #4]
 801062a:	9300      	str	r3, [sp, #0]
 801062c:	4673      	mov	r3, lr
 801062e:	4662      	mov	r2, ip
 8010630:	4631      	mov	r1, r6
 8010632:	4628      	mov	r0, r5
 8010634:	f7ff fd46 	bl	80100c4 <VL53L1_f_026>
 8010638:	4603      	mov	r3, r0
 801063a:	77fb      	strb	r3, [r7, #31]
			&(palgo3->VL53L1_p_054),
			&(ppulse_data->VL53L1_p_005));



		if (status == VL53L1_ERROR_NONE)
 801063c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d109      	bne.n	8010658 <VL53L1_f_033+0x2f0>
			status =
				VL53L1_f_027(
 8010644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010646:	f503 7227 	add.w	r2, r3, #668	; 0x29c
 801064a:	7fb8      	ldrb	r0, [r7, #30]
 801064c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801064e:	2101      	movs	r1, #1
 8010650:	f7ff fb10 	bl	800fc74 <VL53L1_f_027>
 8010654:	4603      	mov	r3, r0
 8010656:	77fb      	strb	r3, [r7, #31]
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010658:	7fbb      	ldrb	r3, [r7, #30]
 801065a:	3301      	adds	r3, #1
 801065c:	77bb      	strb	r3, [r7, #30]
 801065e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010660:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010664:	7fba      	ldrb	r2, [r7, #30]
 8010666:	429a      	cmp	r2, r3
 8010668:	f4ff af52 	bcc.w	8010510 <VL53L1_f_033+0x1a8>

	}



	if (status == VL53L1_ERROR_NONE)
 801066c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d107      	bne.n	8010684 <VL53L1_f_033+0x31c>
		status =
			VL53L1_f_028(
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	785b      	ldrb	r3, [r3, #1]
 8010678:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801067a:	4618      	mov	r0, r3
 801067c:	f7ff fa23 	bl	800fac6 <VL53L1_f_028>
 8010680:	4603      	mov	r3, r0
 8010682:	77fb      	strb	r3, [r7, #31]
				ppost_cfg->hist_target_order,
				palgo3);



	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010684:	2300      	movs	r3, #0
 8010686:	77bb      	strb	r3, [r7, #30]
 8010688:	e071      	b.n	801076e <VL53L1_f_033+0x406>

		ppulse_data = &(palgo3->VL53L1_p_002[p]);
 801068a:	7fba      	ldrb	r2, [r7, #30]
 801068c:	4613      	mov	r3, r2
 801068e:	00db      	lsls	r3, r3, #3
 8010690:	4413      	add	r3, r2
 8010692:	009b      	lsls	r3, r3, #2
 8010694:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8010698:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801069a:	4413      	add	r3, r2
 801069c:	3304      	adds	r3, #4
 801069e:	617b      	str	r3, [r7, #20]


		if (!(presults->active_results < presults->max_results))
 80106a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106a2:	7c9a      	ldrb	r2, [r3, #18]
 80106a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106a6:	7c5b      	ldrb	r3, [r3, #17]
 80106a8:	429a      	cmp	r2, r3
 80106aa:	d25c      	bcs.n	8010766 <VL53L1_f_033+0x3fe>
			continue;




		if (ppulse_data->VL53L1_p_013 >
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	691a      	ldr	r2, [r3, #16]
			ppost_cfg->signal_total_events_limit &&
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	695b      	ldr	r3, [r3, #20]
		if (ppulse_data->VL53L1_p_013 >
 80106b4:	429a      	cmp	r2, r3
 80106b6:	dd57      	ble.n	8010768 <VL53L1_f_033+0x400>
			ppulse_data->VL53L1_p_025 < 0xFF) {
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	789b      	ldrb	r3, [r3, #2]
			ppost_cfg->signal_total_events_limit &&
 80106bc:	2bff      	cmp	r3, #255	; 0xff
 80106be:	d053      	beq.n	8010768 <VL53L1_f_033+0x400>

			prange_data =
			&(presults->VL53L1_p_002[presults->active_results]);
 80106c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106c2:	7c9b      	ldrb	r3, [r3, #18]
 80106c4:	461a      	mov	r2, r3
			prange_data =
 80106c6:	234c      	movs	r3, #76	; 0x4c
 80106c8:	fb02 f303 	mul.w	r3, r2, r3
 80106cc:	3310      	adds	r3, #16
 80106ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106d0:	4413      	add	r3, r2
 80106d2:	3304      	adds	r3, #4
 80106d4:	613b      	str	r3, [r7, #16]

			if (status == VL53L1_ERROR_NONE)
 80106d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d115      	bne.n	801070a <VL53L1_f_033+0x3a2>
				VL53L1_f_029(
 80106de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106e0:	7c98      	ldrb	r0, [r3, #18]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f893 1020 	ldrb.w	r1, [r3, #32]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	8b5d      	ldrh	r5, [r3, #26]
 80106f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106f4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	9202      	str	r2, [sp, #8]
 80106fc:	697a      	ldr	r2, [r7, #20]
 80106fe:	9201      	str	r2, [sp, #4]
 8010700:	9300      	str	r3, [sp, #0]
 8010702:	462b      	mov	r3, r5
 8010704:	4622      	mov	r2, r4
 8010706:	f7ff fd85 	bl	8010214 <VL53L1_f_029>
						ppost_cfg->sigma_thresh,
						&(palgo3->VL53L1_p_010),
						ppulse_data,
						prange_data);

			if (status == VL53L1_ERROR_NONE)
 801070a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d115      	bne.n	801073e <VL53L1_f_033+0x3d6>
				status =
				VL53L1_f_011(
 8010712:	69bb      	ldr	r3, [r7, #24]
 8010714:	f8b3 0082 	ldrh.w	r0, [r3, #130]	; 0x82
 8010718:	69bb      	ldr	r3, [r7, #24]
 801071a:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 801071e:	69bb      	ldr	r3, [r7, #24]
 8010720:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010724:	69bb      	ldr	r3, [r7, #24]
 8010726:	f8b3 407c 	ldrh.w	r4, [r3, #124]	; 0x7c
 801072a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801072e:	9301      	str	r3, [sp, #4]
 8010730:	693b      	ldr	r3, [r7, #16]
 8010732:	9300      	str	r3, [sp, #0]
 8010734:	4623      	mov	r3, r4
 8010736:	f000 fb44 	bl	8010dc2 <VL53L1_f_011>
 801073a:	4603      	mov	r3, r0
 801073c:	77fb      	strb	r3, [r7, #31]
				pB->total_periods_elapsed,
				pB->result__dss_actual_effective_spads,
				prange_data,
				histo_merge_nb);

			if (status == VL53L1_ERROR_NONE)
 801073e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d108      	bne.n	8010758 <VL53L1_f_033+0x3f0>
				VL53L1_f_012(
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	8bd8      	ldrh	r0, [r3, #30]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8010750:	693a      	ldr	r2, [r7, #16]
 8010752:	4619      	mov	r1, r3
 8010754:	f000 fbda 	bl	8010f0c <VL53L1_f_012>
					ppost_cfg->gain_factor,
					ppost_cfg->range_offset_mm,
					prange_data);

			presults->active_results++;
 8010758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801075a:	7c9b      	ldrb	r3, [r3, #18]
 801075c:	3301      	adds	r3, #1
 801075e:	b2da      	uxtb	r2, r3
 8010760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010762:	749a      	strb	r2, [r3, #18]
 8010764:	e000      	b.n	8010768 <VL53L1_f_033+0x400>
			continue;
 8010766:	bf00      	nop
	for (p = 0; p < palgo3->VL53L1_p_051; p++) {
 8010768:	7fbb      	ldrb	r3, [r7, #30]
 801076a:	3301      	adds	r3, #1
 801076c:	77bb      	strb	r3, [r7, #30]
 801076e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010770:	f893 317a 	ldrb.w	r3, [r3, #378]	; 0x17a
 8010774:	7fba      	ldrb	r2, [r7, #30]
 8010776:	429a      	cmp	r2, r3
 8010778:	d387      	bcc.n	801068a <VL53L1_f_033+0x322>



	LOG_FUNCTION_END(status);

	return status;
 801077a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3724      	adds	r7, #36	; 0x24
 8010782:	46bd      	mov	sp, r7
 8010784:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010786 <VL53L1_f_034>:
VL53L1_Error VL53L1_f_034(
	uint8_t                                pulse_no,
	VL53L1_histogram_bin_data_t           *ppulse,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered)
{
 8010786:	b580      	push	{r7, lr}
 8010788:	b08c      	sub	sp, #48	; 0x30
 801078a:	af02      	add	r7, sp, #8
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	607a      	str	r2, [r7, #4]
 8010790:	603b      	str	r3, [r7, #0]
 8010792:	4603      	mov	r3, r0
 8010794:	73fb      	strb	r3, [r7, #15]




	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 8010796:	2300      	movs	r3, #0
 8010798:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 801079c:	7bfa      	ldrb	r2, [r7, #15]
 801079e:	4613      	mov	r3, r2
 80107a0:	00db      	lsls	r3, r3, #3
 80107a2:	4413      	add	r3, r2
 80107a4:	009b      	lsls	r3, r3, #2
 80107a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80107aa:	687a      	ldr	r2, [r7, #4]
 80107ac:	4413      	add	r3, r2
 80107ae:	3304      	adds	r3, #4
 80107b0:	623b      	str	r3, [r7, #32]

	uint8_t  lb     = 0;
 80107b2:	2300      	movs	r3, #0
 80107b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t  i     = 0;
 80107b8:	2300      	movs	r3, #0
 80107ba:	77fb      	strb	r3, [r7, #31]
	int32_t  suma  = 0;
 80107bc:	2300      	movs	r3, #0
 80107be:	61bb      	str	r3, [r7, #24]
	int32_t  sumb  = 0;
 80107c0:	2300      	movs	r3, #0
 80107c2:	617b      	str	r3, [r7, #20]
	int32_t  sumc  = 0;
 80107c4:	2300      	movs	r3, #0
 80107c6:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	pfiltered->VL53L1_p_023    = palgo3->VL53L1_p_023;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	785a      	ldrb	r2, [r3, #1]
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	705a      	strb	r2, [r3, #1]
	pfiltered->VL53L1_p_022      = palgo3->VL53L1_p_022;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	781a      	ldrb	r2, [r3, #0]
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	701a      	strb	r2, [r3, #0]
	pfiltered->VL53L1_p_024 = palgo3->VL53L1_p_024;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	789a      	ldrb	r2, [r3, #2]
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	709a      	strb	r2, [r3, #2]



	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 80107e0:	6a3b      	ldr	r3, [r7, #32]
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80107e8:	e04d      	b.n	8010886 <VL53L1_f_034+0x100>

		i =  lb  % palgo3->VL53L1_p_031;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	78da      	ldrb	r2, [r3, #3]
 80107ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80107f6:	fb01 f202 	mul.w	r2, r1, r2
 80107fa:	1a9b      	subs	r3, r3, r2
 80107fc:	77fb      	strb	r3, [r7, #31]


		VL53L1_f_013(
 80107fe:	6a3b      	ldr	r3, [r7, #32]
 8010800:	7999      	ldrb	r1, [r3, #6]
 8010802:	f107 0218 	add.w	r2, r7, #24
 8010806:	7ff8      	ldrb	r0, [r7, #31]
 8010808:	f107 0310 	add.w	r3, r7, #16
 801080c:	9301      	str	r3, [sp, #4]
 801080e:	f107 0314 	add.w	r3, r7, #20
 8010812:	9300      	str	r3, [sp, #0]
 8010814:	4613      	mov	r3, r2
 8010816:	68ba      	ldr	r2, [r7, #8]
 8010818:	f000 fa7a 	bl	8010d10 <VL53L1_f_013>
				&suma,
				&sumb,
				&sumc);


		pfiltered->VL53L1_p_003[i] = suma;
 801081c:	7ffb      	ldrb	r3, [r7, #31]
 801081e:	69ba      	ldr	r2, [r7, #24]
 8010820:	6839      	ldr	r1, [r7, #0]
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	440b      	add	r3, r1
 8010826:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_018[i] = sumb;
 8010828:	7ffb      	ldrb	r3, [r7, #31]
 801082a:	697a      	ldr	r2, [r7, #20]
 801082c:	6839      	ldr	r1, [r7, #0]
 801082e:	3318      	adds	r3, #24
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	440b      	add	r3, r1
 8010834:	605a      	str	r2, [r3, #4]
		pfiltered->VL53L1_p_001[i] = sumc;
 8010836:	7ffb      	ldrb	r3, [r7, #31]
 8010838:	693a      	ldr	r2, [r7, #16]
 801083a:	6839      	ldr	r1, [r7, #0]
 801083c:	3330      	adds	r3, #48	; 0x30
 801083e:	009b      	lsls	r3, r3, #2
 8010840:	440b      	add	r3, r1
 8010842:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_039[i] =
			(suma + sumb) -
 8010844:	69ba      	ldr	r2, [r7, #24]
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	18d1      	adds	r1, r2, r3
			(sumc + palgo3->VL53L1_p_004);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	689a      	ldr	r2, [r3, #8]
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	441a      	add	r2, r3
		pfiltered->VL53L1_p_039[i] =
 8010852:	7ffb      	ldrb	r3, [r7, #31]
			(suma + sumb) -
 8010854:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_039[i] =
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	3348      	adds	r3, #72	; 0x48
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	440b      	add	r3, r1
 801085e:	605a      	str	r2, [r3, #4]



		pfiltered->VL53L1_p_040[i] =
			(sumb + sumc) -
 8010860:	697a      	ldr	r2, [r7, #20]
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	18d1      	adds	r1, r2, r3
			(suma + palgo3->VL53L1_p_004);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	689a      	ldr	r2, [r3, #8]
 801086a:	69bb      	ldr	r3, [r7, #24]
 801086c:	441a      	add	r2, r3
		pfiltered->VL53L1_p_040[i] =
 801086e:	7ffb      	ldrb	r3, [r7, #31]
			(sumb + sumc) -
 8010870:	1a8a      	subs	r2, r1, r2
		pfiltered->VL53L1_p_040[i] =
 8010872:	6839      	ldr	r1, [r7, #0]
 8010874:	3360      	adds	r3, #96	; 0x60
 8010876:	009b      	lsls	r3, r3, #2
 8010878:	440b      	add	r3, r1
 801087a:	605a      	str	r2, [r3, #4]
	for (lb = pdata->VL53L1_p_015; lb <= pdata->VL53L1_p_016; lb++) {
 801087c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010880:	3301      	adds	r3, #1
 8010882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010886:	6a3b      	ldr	r3, [r7, #32]
 8010888:	791b      	ldrb	r3, [r3, #4]
 801088a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801088e:	429a      	cmp	r2, r3
 8010890:	d9ab      	bls.n	80107ea <VL53L1_f_034+0x64>
	}

	return status;
 8010892:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8010896:	4618      	mov	r0, r3
 8010898:	3728      	adds	r7, #40	; 0x28
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}

0801089e <VL53L1_f_035>:
VL53L1_Error VL53L1_f_035(
	uint8_t                                pulse_no,
	uint16_t                               noise_threshold,
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered,
	VL53L1_hist_gen3_algo_private_data_t  *palgo3)
{
 801089e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108a0:	b08f      	sub	sp, #60	; 0x3c
 80108a2:	af06      	add	r7, sp, #24
 80108a4:	60ba      	str	r2, [r7, #8]
 80108a6:	607b      	str	r3, [r7, #4]
 80108a8:	4603      	mov	r3, r0
 80108aa:	73fb      	strb	r3, [r7, #15]
 80108ac:	460b      	mov	r3, r1
 80108ae:	81bb      	strh	r3, [r7, #12]



	VL53L1_Error  status       = VL53L1_ERROR_NONE;
 80108b0:	2300      	movs	r3, #0
 80108b2:	77bb      	strb	r3, [r7, #30]
	VL53L1_Error  func_status  = VL53L1_ERROR_NONE;
 80108b4:	2300      	movs	r3, #0
 80108b6:	777b      	strb	r3, [r7, #29]

	VL53L1_hist_pulse_data_t *pdata = &(palgo3->VL53L1_p_002[pulse_no]);
 80108b8:	7bfa      	ldrb	r2, [r7, #15]
 80108ba:	4613      	mov	r3, r2
 80108bc:	00db      	lsls	r3, r3, #3
 80108be:	4413      	add	r3, r2
 80108c0:	009b      	lsls	r3, r3, #2
 80108c2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80108c6:	687a      	ldr	r2, [r7, #4]
 80108c8:	4413      	add	r3, r2
 80108ca:	3304      	adds	r3, #4
 80108cc:	61bb      	str	r3, [r7, #24]

	uint8_t  lb            = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	77fb      	strb	r3, [r7, #31]
	uint8_t  i            = 0;
 80108d2:	2300      	movs	r3, #0
 80108d4:	75fb      	strb	r3, [r7, #23]
	uint8_t  j            = 0;
 80108d6:	2300      	movs	r3, #0
 80108d8:	75bb      	strb	r3, [r7, #22]

	SUPPRESS_UNUSED_WARNING(noise_threshold);

	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	77fb      	strb	r3, [r7, #31]
 80108e0:	e0b9      	b.n	8010a56 <VL53L1_f_035+0x1b8>

		i =  lb    % palgo3->VL53L1_p_031;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	78da      	ldrb	r2, [r3, #3]
 80108e6:	7ffb      	ldrb	r3, [r7, #31]
 80108e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80108ec:	fb01 f202 	mul.w	r2, r1, r2
 80108f0:	1a9b      	subs	r3, r3, r2
 80108f2:	75fb      	strb	r3, [r7, #23]
		j = (lb+1) % palgo3->VL53L1_p_031;
 80108f4:	7ffb      	ldrb	r3, [r7, #31]
 80108f6:	3301      	adds	r3, #1
 80108f8:	687a      	ldr	r2, [r7, #4]
 80108fa:	78d2      	ldrb	r2, [r2, #3]
 80108fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8010900:	fb01 f202 	mul.w	r2, r1, r2
 8010904:	1a9b      	subs	r3, r3, r2
 8010906:	75bb      	strb	r3, [r7, #22]

		if (i < palgo3->VL53L1_p_024 &&
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	789b      	ldrb	r3, [r3, #2]
 801090c:	7dfa      	ldrb	r2, [r7, #23]
 801090e:	429a      	cmp	r2, r3
 8010910:	f080 809e 	bcs.w	8010a50 <VL53L1_f_035+0x1b2>
			j < palgo3->VL53L1_p_024) {
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	789b      	ldrb	r3, [r3, #2]
		if (i < palgo3->VL53L1_p_024 &&
 8010918:	7dba      	ldrb	r2, [r7, #22]
 801091a:	429a      	cmp	r2, r3
 801091c:	f080 8098 	bcs.w	8010a50 <VL53L1_f_035+0x1b2>

			if (pfiltered->VL53L1_p_039[i] == 0 &&
 8010920:	7dfb      	ldrb	r3, [r7, #23]
 8010922:	68ba      	ldr	r2, [r7, #8]
 8010924:	3348      	adds	r3, #72	; 0x48
 8010926:	009b      	lsls	r3, r3, #2
 8010928:	4413      	add	r3, r2
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d10e      	bne.n	801094e <VL53L1_f_035+0xb0>
				pfiltered->VL53L1_p_040[i] == 0)
 8010930:	7dfb      	ldrb	r3, [r7, #23]
 8010932:	68ba      	ldr	r2, [r7, #8]
 8010934:	3360      	adds	r3, #96	; 0x60
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	4413      	add	r3, r2
 801093a:	685b      	ldr	r3, [r3, #4]
			if (pfiltered->VL53L1_p_039[i] == 0 &&
 801093c:	2b00      	cmp	r3, #0
 801093e:	d106      	bne.n	801094e <VL53L1_f_035+0xb0>

				pfiltered->VL53L1_p_043[i] = 0;
 8010940:	7dfb      	ldrb	r3, [r7, #23]
 8010942:	68ba      	ldr	r2, [r7, #8]
 8010944:	4413      	add	r3, r2
 8010946:	2200      	movs	r2, #0
 8010948:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 801094c:	e043      	b.n	80109d6 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 801094e:	7dfb      	ldrb	r3, [r7, #23]
 8010950:	68ba      	ldr	r2, [r7, #8]
 8010952:	3348      	adds	r3, #72	; 0x48
 8010954:	009b      	lsls	r3, r3, #2
 8010956:	4413      	add	r3, r2
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	2b00      	cmp	r3, #0
 801095c:	db0e      	blt.n	801097c <VL53L1_f_035+0xde>
					 pfiltered->VL53L1_p_040[i] >= 0)
 801095e:	7dfb      	ldrb	r3, [r7, #23]
 8010960:	68ba      	ldr	r2, [r7, #8]
 8010962:	3360      	adds	r3, #96	; 0x60
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	4413      	add	r3, r2
 8010968:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] >= 0 &&
 801096a:	2b00      	cmp	r3, #0
 801096c:	db06      	blt.n	801097c <VL53L1_f_035+0xde>
				pfiltered->VL53L1_p_043[i] = 1;
 801096e:	7dfb      	ldrb	r3, [r7, #23]
 8010970:	68ba      	ldr	r2, [r7, #8]
 8010972:	4413      	add	r3, r2
 8010974:	2201      	movs	r2, #1
 8010976:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 801097a:	e02c      	b.n	80109d6 <VL53L1_f_035+0x138>

			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 801097c:	7dfb      	ldrb	r3, [r7, #23]
 801097e:	68ba      	ldr	r2, [r7, #8]
 8010980:	3348      	adds	r3, #72	; 0x48
 8010982:	009b      	lsls	r3, r3, #2
 8010984:	4413      	add	r3, r2
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	2b00      	cmp	r3, #0
 801098a:	da1e      	bge.n	80109ca <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 801098c:	7dfb      	ldrb	r3, [r7, #23]
 801098e:	68ba      	ldr	r2, [r7, #8]
 8010990:	3360      	adds	r3, #96	; 0x60
 8010992:	009b      	lsls	r3, r3, #2
 8010994:	4413      	add	r3, r2
 8010996:	685b      	ldr	r3, [r3, #4]
			else if (pfiltered->VL53L1_p_039[i] <  0 &&
 8010998:	2b00      	cmp	r3, #0
 801099a:	db16      	blt.n	80109ca <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 801099c:	7dbb      	ldrb	r3, [r7, #22]
 801099e:	68ba      	ldr	r2, [r7, #8]
 80109a0:	3348      	adds	r3, #72	; 0x48
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	4413      	add	r3, r2
 80109a6:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_040[i] >= 0 &&
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	db0e      	blt.n	80109ca <VL53L1_f_035+0x12c>
					 pfiltered->VL53L1_p_040[j] <  0)
 80109ac:	7dbb      	ldrb	r3, [r7, #22]
 80109ae:	68ba      	ldr	r2, [r7, #8]
 80109b0:	3360      	adds	r3, #96	; 0x60
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	4413      	add	r3, r2
 80109b6:	685b      	ldr	r3, [r3, #4]
					 pfiltered->VL53L1_p_039[j] >= 0 &&
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	da06      	bge.n	80109ca <VL53L1_f_035+0x12c>
				pfiltered->VL53L1_p_043[i] = 1;
 80109bc:	7dfb      	ldrb	r3, [r7, #23]
 80109be:	68ba      	ldr	r2, [r7, #8]
 80109c0:	4413      	add	r3, r2
 80109c2:	2201      	movs	r2, #1
 80109c4:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80109c8:	e005      	b.n	80109d6 <VL53L1_f_035+0x138>

			else
				pfiltered->VL53L1_p_043[i] = 0;
 80109ca:	7dfb      	ldrb	r3, [r7, #23]
 80109cc:	68ba      	ldr	r2, [r7, #8]
 80109ce:	4413      	add	r3, r2
 80109d0:	2200      	movs	r2, #0
 80109d2:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4


			if (pfiltered->VL53L1_p_043[i] > 0) {
 80109d6:	7dfb      	ldrb	r3, [r7, #23]
 80109d8:	68ba      	ldr	r2, [r7, #8]
 80109da:	4413      	add	r3, r2
 80109dc:	f893 31e4 	ldrb.w	r3, [r3, #484]	; 0x1e4
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d035      	beq.n	8010a50 <VL53L1_f_035+0x1b2>

				pdata->VL53L1_p_025 = lb;
 80109e4:	69bb      	ldr	r3, [r7, #24]
 80109e6:	7ffa      	ldrb	r2, [r7, #31]
 80109e8:	709a      	strb	r2, [r3, #2]

				func_status =
					VL53L1_f_036(
 80109ea:	7dfb      	ldrb	r3, [r7, #23]
 80109ec:	68ba      	ldr	r2, [r7, #8]
 80109ee:	009b      	lsls	r3, r3, #2
 80109f0:	4413      	add	r3, r2
 80109f2:	685c      	ldr	r4, [r3, #4]
 80109f4:	7dfb      	ldrb	r3, [r7, #23]
 80109f6:	68ba      	ldr	r2, [r7, #8]
 80109f8:	3318      	adds	r3, #24
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	4413      	add	r3, r2
 80109fe:	685d      	ldr	r5, [r3, #4]
 8010a00:	7dfb      	ldrb	r3, [r7, #23]
 8010a02:	68ba      	ldr	r2, [r7, #8]
 8010a04:	3330      	adds	r3, #48	; 0x30
 8010a06:	009b      	lsls	r3, r3, #2
 8010a08:	4413      	add	r3, r2
 8010a0a:	685e      	ldr	r6, [r3, #4]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	689b      	ldr	r3, [r3, #8]
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	78d2      	ldrb	r2, [r2, #3]
 8010a14:	69b9      	ldr	r1, [r7, #24]
 8010a16:	3118      	adds	r1, #24
 8010a18:	7ff8      	ldrb	r0, [r7, #31]
 8010a1a:	9105      	str	r1, [sp, #20]
 8010a1c:	9204      	str	r2, [sp, #16]
 8010a1e:	9303      	str	r3, [sp, #12]
 8010a20:	2300      	movs	r3, #0
 8010a22:	9302      	str	r3, [sp, #8]
 8010a24:	2300      	movs	r3, #0
 8010a26:	9301      	str	r3, [sp, #4]
 8010a28:	2300      	movs	r3, #0
 8010a2a:	9300      	str	r3, [sp, #0]
 8010a2c:	4633      	mov	r3, r6
 8010a2e:	462a      	mov	r2, r5
 8010a30:	4621      	mov	r1, r4
 8010a32:	f000 f81c 	bl	8010a6e <VL53L1_f_036>
 8010a36:	4603      	mov	r3, r0
 8010a38:	777b      	strb	r3, [r7, #29]
					0,
					palgo3->VL53L1_p_004,
					palgo3->VL53L1_p_031,
					&(pdata->VL53L1_p_014));

				if (func_status ==
 8010a3a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010a3e:	f113 0f0f 	cmn.w	r3, #15
 8010a42:	d105      	bne.n	8010a50 <VL53L1_f_035+0x1b2>
					VL53L1_ERROR_DIVISION_BY_ZERO)
					pfiltered->VL53L1_p_043[i] = 0;
 8010a44:	7dfb      	ldrb	r3, [r7, #23]
 8010a46:	68ba      	ldr	r2, [r7, #8]
 8010a48:	4413      	add	r3, r2
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
	for (lb = pdata->VL53L1_p_015; lb < pdata->VL53L1_p_016; lb++) {
 8010a50:	7ffb      	ldrb	r3, [r7, #31]
 8010a52:	3301      	adds	r3, #1
 8010a54:	77fb      	strb	r3, [r7, #31]
 8010a56:	69bb      	ldr	r3, [r7, #24]
 8010a58:	791b      	ldrb	r3, [r3, #4]
 8010a5a:	7ffa      	ldrb	r2, [r7, #31]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	f4ff af40 	bcc.w	80108e2 <VL53L1_f_035+0x44>

			}
		}
	}

	return status;
 8010a62:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3724      	adds	r7, #36	; 0x24
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010a6e <VL53L1_f_036>:
	int32_t   bx,
	int32_t   cx,
	int32_t   VL53L1_p_004,
	uint8_t   VL53L1_p_031,
	uint32_t *pmean_phase)
{
 8010a6e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010a72:	b0b2      	sub	sp, #200	; 0xc8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8010a7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010a7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010a82:	4603      	mov	r3, r0
 8010a84:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	VL53L1_Error  status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8010a88:	23f1      	movs	r3, #241	; 0xf1
 8010a8a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

	int64_t  mean_phase  = VL53L1_MAX_ALLOWED_PHASE;
 8010a8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a92:	f04f 0300 	mov.w	r3, #0
 8010a96:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	int32_t  mean_phase32;
	int64_t  VL53L1_p_041   = 0;
 8010a9a:	f04f 0200 	mov.w	r2, #0
 8010a9e:	f04f 0300 	mov.w	r3, #0
 8010aa2:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	int64_t  half_b_minus_amb = 0;
 8010aa6:	f04f 0200 	mov.w	r2, #0
 8010aaa:	f04f 0300 	mov.w	r3, #0
 8010aae:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8


	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010ab6:	17da      	asrs	r2, r3, #31
 8010ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010abc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8010ac0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010ac4:	17da      	asrs	r2, r3, #31
 8010ac6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010aca:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010ace:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ad2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8010ad6:	4602      	mov	r2, r0
 8010ad8:	ebb3 0802 	subs.w	r8, r3, r2
 8010adc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ae0:	460a      	mov	r2, r1
 8010ae2:	eb63 0902 	sbc.w	r9, r3, r2
		(int64_t)cx - (int64_t)VL53L1_p_003 -  (int64_t)ax);
 8010ae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010aea:	17da      	asrs	r2, r3, #31
 8010aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8010aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8010af0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8010af4:	460b      	mov	r3, r1
 8010af6:	ebb8 0a03 	subs.w	sl, r8, r3
 8010afa:	4613      	mov	r3, r2
 8010afc:	eb69 0b03 	sbc.w	fp, r9, r3
 8010b00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010b04:	17da      	asrs	r2, r3, #31
 8010b06:	673b      	str	r3, [r7, #112]	; 0x70
 8010b08:	677a      	str	r2, [r7, #116]	; 0x74
 8010b0a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8010b0e:	460b      	mov	r3, r1
 8010b10:	ebba 0403 	subs.w	r4, sl, r3
 8010b14:	4613      	mov	r3, r2
 8010b16:	eb6b 0503 	sbc.w	r5, fp, r3
	VL53L1_p_041    = 4096 * ((int64_t)VL53L1_p_001 -
 8010b1a:	f04f 0200 	mov.w	r2, #0
 8010b1e:	f04f 0300 	mov.w	r3, #0
 8010b22:	032b      	lsls	r3, r5, #12
 8010b24:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8010b28:	0322      	lsls	r2, r4, #12
 8010b2a:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b32:	17da      	asrs	r2, r3, #31
 8010b34:	66bb      	str	r3, [r7, #104]	; 0x68
 8010b36:	66fa      	str	r2, [r7, #108]	; 0x6c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8010b38:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8010b3c:	17da      	asrs	r2, r3, #31
 8010b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8010b40:	667a      	str	r2, [r7, #100]	; 0x64
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010b42:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8010b46:	4623      	mov	r3, r4
 8010b48:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010b4c:	4602      	mov	r2, r0
 8010b4e:	1a9b      	subs	r3, r3, r2
 8010b50:	65bb      	str	r3, [r7, #88]	; 0x58
 8010b52:	462b      	mov	r3, r5
 8010b54:	460a      	mov	r2, r1
 8010b56:	eb63 0302 	sbc.w	r3, r3, r2
 8010b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
		(int64_t)bx - (int64_t)VL53L1_p_004);
 8010b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b60:	17da      	asrs	r2, r3, #31
 8010b62:	653b      	str	r3, [r7, #80]	; 0x50
 8010b64:	657a      	str	r2, [r7, #84]	; 0x54
 8010b66:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8010b6a:	4623      	mov	r3, r4
 8010b6c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8010b70:	4602      	mov	r2, r0
 8010b72:	1a9b      	subs	r3, r3, r2
 8010b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8010b76:	462b      	mov	r3, r5
 8010b78:	460a      	mov	r2, r1
 8010b7a:	eb63 0302 	sbc.w	r3, r3, r2
 8010b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
	half_b_minus_amb  = 4096 * ((int64_t)VL53L1_p_018 -
 8010b80:	f04f 0200 	mov.w	r2, #0
 8010b84:	f04f 0300 	mov.w	r3, #0
 8010b88:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8010b8c:	4629      	mov	r1, r5
 8010b8e:	030b      	lsls	r3, r1, #12
 8010b90:	4621      	mov	r1, r4
 8010b92:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8010b96:	4621      	mov	r1, r4
 8010b98:	030a      	lsls	r2, r1, #12
 8010b9a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	if (half_b_minus_amb != 0) {
 8010b9e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	f000 80a8 	beq.w	8010cf8 <VL53L1_f_036+0x28a>
		mean_phase = (4096 * VL53L1_p_041) + half_b_minus_amb;
 8010ba8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8010bac:	f04f 0000 	mov.w	r0, #0
 8010bb0:	f04f 0100 	mov.w	r1, #0
 8010bb4:	0319      	lsls	r1, r3, #12
 8010bb6:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 8010bba:	0310      	lsls	r0, r2, #12
 8010bbc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010bc0:	1814      	adds	r4, r2, r0
 8010bc2:	633c      	str	r4, [r7, #48]	; 0x30
 8010bc4:	414b      	adcs	r3, r1
 8010bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8010bc8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8010bcc:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase = do_division_s(mean_phase, (half_b_minus_amb * 2));
 8010bd0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8010bd4:	1891      	adds	r1, r2, r2
 8010bd6:	62b9      	str	r1, [r7, #40]	; 0x28
 8010bd8:	415b      	adcs	r3, r3
 8010bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010bdc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010be0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8010be4:	f7ef fb1c 	bl	8000220 <__aeabi_ldivmod>
 8010be8:	4602      	mov	r2, r0
 8010bea:	460b      	mov	r3, r1
 8010bec:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		mean_phase += 2048;
 8010bf0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010bf4:	f512 6100 	adds.w	r1, r2, #2048	; 0x800
 8010bf8:	6239      	str	r1, [r7, #32]
 8010bfa:	f143 0300 	adc.w	r3, r3, #0
 8010bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8010c00:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8010c04:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		mean_phase += (4096 * (int64_t)bin);
 8010c08:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	643b      	str	r3, [r7, #64]	; 0x40
 8010c10:	647a      	str	r2, [r7, #68]	; 0x44
 8010c12:	f04f 0200 	mov.w	r2, #0
 8010c16:	f04f 0300 	mov.w	r3, #0
 8010c1a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8010c1e:	4629      	mov	r1, r5
 8010c20:	030b      	lsls	r3, r1, #12
 8010c22:	4621      	mov	r1, r4
 8010c24:	ea43 5311 	orr.w	r3, r3, r1, lsr #20
 8010c28:	4621      	mov	r1, r4
 8010c2a:	030a      	lsls	r2, r1, #12
 8010c2c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8010c30:	1884      	adds	r4, r0, r2
 8010c32:	61bc      	str	r4, [r7, #24]
 8010c34:	eb41 0303 	adc.w	r3, r1, r3
 8010c38:	61fb      	str	r3, [r7, #28]
 8010c3a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8010c3e:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		mean_phase  = do_division_s((mean_phase + 1), 2);
 8010c42:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010c46:	1c51      	adds	r1, r2, #1
 8010c48:	63b9      	str	r1, [r7, #56]	; 0x38
 8010c4a:	f143 0300 	adc.w	r3, r3, #0
 8010c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010c50:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8010c54:	460b      	mov	r3, r1
 8010c56:	0fdb      	lsrs	r3, r3, #31
 8010c58:	2200      	movs	r2, #0
 8010c5a:	613b      	str	r3, [r7, #16]
 8010c5c:	617a      	str	r2, [r7, #20]
 8010c5e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010c62:	4623      	mov	r3, r4
 8010c64:	4602      	mov	r2, r0
 8010c66:	189b      	adds	r3, r3, r2
 8010c68:	60bb      	str	r3, [r7, #8]
 8010c6a:	460b      	mov	r3, r1
 8010c6c:	462a      	mov	r2, r5
 8010c6e:	eb42 0303 	adc.w	r3, r2, r3
 8010c72:	60fb      	str	r3, [r7, #12]
 8010c74:	f04f 0200 	mov.w	r2, #0
 8010c78:	f04f 0300 	mov.w	r3, #0
 8010c7c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010c80:	4621      	mov	r1, r4
 8010c82:	084a      	lsrs	r2, r1, #1
 8010c84:	4629      	mov	r1, r5
 8010c86:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8010c8a:	4629      	mov	r1, r5
 8010c8c:	104b      	asrs	r3, r1, #1
 8010c8e:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		if (mean_phase  < 0)
 8010c92:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	da05      	bge.n	8010ca6 <VL53L1_f_036+0x238>
			mean_phase = 0;
 8010c9a:	f04f 0200 	mov.w	r2, #0
 8010c9e:	f04f 0300 	mov.w	r3, #0
 8010ca2:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
		if (mean_phase > VL53L1_MAX_ALLOWED_PHASE)
 8010ca6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8010caa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8010cae:	f173 0300 	sbcs.w	r3, r3, #0
 8010cb2:	db05      	blt.n	8010cc0 <VL53L1_f_036+0x252>
			mean_phase = VL53L1_MAX_ALLOWED_PHASE;
 8010cb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cb8:	f04f 0300 	mov.w	r3, #0
 8010cbc:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

		mean_phase32 = (int32_t)mean_phase;
 8010cc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase32 = mean_phase32 %
			((int32_t)VL53L1_p_031 * 2048);
 8010cc8:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 8010ccc:	02da      	lsls	r2, r3, #11
		mean_phase32 = mean_phase32 %
 8010cce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010cd2:	fb93 f1f2 	sdiv	r1, r3, r2
 8010cd6:	fb01 f202 	mul.w	r2, r1, r2
 8010cda:	1a9b      	subs	r3, r3, r2
 8010cdc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		mean_phase = mean_phase32;
 8010ce0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010ce4:	17da      	asrs	r2, r3, #31
 8010ce6:	603b      	str	r3, [r7, #0]
 8010ce8:	607a      	str	r2, [r7, #4]
 8010cea:	e9d7 3400 	ldrd	r3, r4, [r7]
 8010cee:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8

		status = VL53L1_ERROR_NONE;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	}

	*pmean_phase = (uint32_t)mean_phase;
 8010cf8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010d00:	601a      	str	r2, [r3, #0]

	return status;
 8010d02:	f997 30c7 	ldrsb.w	r3, [r7, #199]	; 0xc7
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	37c8      	adds	r7, #200	; 0xc8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010d10 <VL53L1_f_013>:
	uint8_t                         filter_woi,
	VL53L1_histogram_bin_data_t    *pbins,
	int32_t                        *pa,
	int32_t                        *pb,
	int32_t                        *pc)
{
 8010d10:	b480      	push	{r7}
 8010d12:	b087      	sub	sp, #28
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	60ba      	str	r2, [r7, #8]
 8010d18:	607b      	str	r3, [r7, #4]
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	73fb      	strb	r3, [r7, #15]
 8010d1e:	460b      	mov	r3, r1
 8010d20:	73bb      	strb	r3, [r7, #14]


	uint8_t w = 0;
 8010d22:	2300      	movs	r3, #0
 8010d24:	75fb      	strb	r3, [r7, #23]
	uint8_t j = 0;
 8010d26:	2300      	movs	r3, #0
 8010d28:	75bb      	strb	r3, [r7, #22]

	*pa = 0;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	601a      	str	r2, [r3, #0]
	*pb = pbins->bin_data[VL53L1_p_018];
 8010d30:	7bfa      	ldrb	r2, [r7, #15]
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	3206      	adds	r2, #6
 8010d36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010d3a:	6a3b      	ldr	r3, [r7, #32]
 8010d3c:	601a      	str	r2, [r3, #0]
	*pc = 0;
 8010d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d40:	2200      	movs	r2, #0
 8010d42:	601a      	str	r2, [r3, #0]

	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8010d44:	2300      	movs	r3, #0
 8010d46:	75fb      	strb	r3, [r7, #23]
 8010d48:	e02f      	b.n	8010daa <VL53L1_f_013+0x9a>


		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8010d4a:	7bfa      	ldrb	r2, [r7, #15]
 8010d4c:	7dfb      	ldrb	r3, [r7, #23]
 8010d4e:	4413      	add	r3, r2
 8010d50:	68ba      	ldr	r2, [r7, #8]
 8010d52:	7a92      	ldrb	r2, [r2, #10]
 8010d54:	441a      	add	r2, r3
 8010d56:	7bbb      	ldrb	r3, [r7, #14]
 8010d58:	1ad3      	subs	r3, r2, r3
			filter_woi) % pbins->VL53L1_p_024;
 8010d5a:	68ba      	ldr	r2, [r7, #8]
 8010d5c:	7a92      	ldrb	r2, [r2, #10]
 8010d5e:	fb93 f1f2 	sdiv	r1, r3, r2
 8010d62:	fb01 f202 	mul.w	r2, r1, r2
 8010d66:	1a9b      	subs	r3, r3, r2
		j = ((VL53L1_p_018 + w + pbins->VL53L1_p_024) -
 8010d68:	75bb      	strb	r3, [r7, #22]


		if (w < filter_woi)
 8010d6a:	7dfa      	ldrb	r2, [r7, #23]
 8010d6c:	7bbb      	ldrb	r3, [r7, #14]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d20a      	bcs.n	8010d88 <VL53L1_f_013+0x78>
			*pa += pbins->bin_data[j];
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	7db9      	ldrb	r1, [r7, #22]
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	3106      	adds	r1, #6
 8010d7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d80:	441a      	add	r2, r3
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	601a      	str	r2, [r3, #0]
 8010d86:	e00d      	b.n	8010da4 <VL53L1_f_013+0x94>
		else if (w > filter_woi)
 8010d88:	7dfa      	ldrb	r2, [r7, #23]
 8010d8a:	7bbb      	ldrb	r3, [r7, #14]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d909      	bls.n	8010da4 <VL53L1_f_013+0x94>
			*pc += pbins->bin_data[j];
 8010d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d92:	681a      	ldr	r2, [r3, #0]
 8010d94:	7db9      	ldrb	r1, [r7, #22]
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	3106      	adds	r1, #6
 8010d9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010d9e:	441a      	add	r2, r3
 8010da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da2:	601a      	str	r2, [r3, #0]
	for (w = 0 ; w < ((filter_woi << 1)+1) ; w++) {
 8010da4:	7dfb      	ldrb	r3, [r7, #23]
 8010da6:	3301      	adds	r3, #1
 8010da8:	75fb      	strb	r3, [r7, #23]
 8010daa:	7bbb      	ldrb	r3, [r7, #14]
 8010dac:	005a      	lsls	r2, r3, #1
 8010dae:	7dfb      	ldrb	r3, [r7, #23]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	daca      	bge.n	8010d4a <VL53L1_f_013+0x3a>
	}
}
 8010db4:	bf00      	nop
 8010db6:	bf00      	nop
 8010db8:	371c      	adds	r7, #28
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr

08010dc2 <VL53L1_f_011>:
	uint16_t           fast_osc_frequency,
	uint32_t           total_periods_elapsed,
	uint16_t           VL53L1_p_006,
	VL53L1_range_data_t  *pdata,
	uint8_t histo_merge_nb)
{
 8010dc2:	b580      	push	{r7, lr}
 8010dc4:	b088      	sub	sp, #32
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	60ba      	str	r2, [r7, #8]
 8010dca:	461a      	mov	r2, r3
 8010dcc:	4603      	mov	r3, r0
 8010dce:	81fb      	strh	r3, [r7, #14]
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	81bb      	strh	r3, [r7, #12]
 8010dd4:	4613      	mov	r3, r2
 8010dd6:	80fb      	strh	r3, [r7, #6]
	VL53L1_Error     status = VL53L1_ERROR_NONE;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	77fb      	strb	r3, [r7, #31]

	uint32_t    pll_period_us       = 0;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	617b      	str	r3, [r7, #20]
	uint32_t    periods_elapsed     = 0;
 8010de0:	2300      	movs	r3, #0
 8010de2:	613b      	str	r3, [r7, #16]
	uint32_t    count_rate_total    = 0;
 8010de4:	2300      	movs	r3, #0
 8010de6:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");



	pdata->width                  = vcsel_width;
 8010de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dea:	89fa      	ldrh	r2, [r7, #14]
 8010dec:	81da      	strh	r2, [r3, #14]
	pdata->fast_osc_frequency     = fast_osc_frequency;
 8010dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df0:	89ba      	ldrh	r2, [r7, #12]
 8010df2:	825a      	strh	r2, [r3, #18]
	pdata->total_periods_elapsed  = total_periods_elapsed;
 8010df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	619a      	str	r2, [r3, #24]
	pdata->VL53L1_p_006 = VL53L1_p_006;
 8010dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfc:	88fa      	ldrh	r2, [r7, #6]
 8010dfe:	82da      	strh	r2, [r3, #22]



	if (pdata->fast_osc_frequency == 0)
 8010e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e02:	8a5b      	ldrh	r3, [r3, #18]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d101      	bne.n	8010e0c <VL53L1_f_011+0x4a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8010e08:	23f1      	movs	r3, #241	; 0xf1
 8010e0a:	77fb      	strb	r3, [r7, #31]

	if (pdata->total_periods_elapsed == 0)
 8010e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0e:	699b      	ldr	r3, [r3, #24]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d101      	bne.n	8010e18 <VL53L1_f_011+0x56>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8010e14:	23f1      	movs	r3, #241	; 0xf1
 8010e16:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8010e18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d16f      	bne.n	8010f00 <VL53L1_f_011+0x13e>



		pll_period_us =
			VL53L1_calc_pll_period_us(pdata->fast_osc_frequency);
 8010e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e22:	8a5b      	ldrh	r3, [r3, #18]
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7fd f903 	bl	800e030 <VL53L1_calc_pll_period_us>
 8010e2a:	6178      	str	r0, [r7, #20]



		periods_elapsed      = pdata->total_periods_elapsed + 1;
 8010e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2e:	699b      	ldr	r3, [r3, #24]
 8010e30:	3301      	adds	r3, #1
 8010e32:	613b      	str	r3, [r7, #16]



		pdata->peak_duration_us    = VL53L1_duration_maths(
			pll_period_us,
			(uint32_t)pdata->width,
 8010e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e36:	89db      	ldrh	r3, [r3, #14]
		pdata->peak_duration_us    = VL53L1_duration_maths(
 8010e38:	4619      	mov	r1, r3
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e40:	6978      	ldr	r0, [r7, #20]
 8010e42:	f7fd f90c 	bl	800e05e <VL53L1_duration_maths>
 8010e46:	4602      	mov	r2, r0
 8010e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4a:	61da      	str	r2, [r3, #28]
			VL53L1_RANGING_WINDOW_VCSEL_PERIODS,
			periods_elapsed);

		pdata->woi_duration_us     = VL53L1_duration_maths(
			pll_period_us,
			((uint32_t)pdata->VL53L1_p_030) << 4,
 8010e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4e:	7c1b      	ldrb	r3, [r3, #16]
		pdata->woi_duration_us     = VL53L1_duration_maths(
 8010e50:	0119      	lsls	r1, r3, #4
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e58:	6978      	ldr	r0, [r7, #20]
 8010e5a:	f7fd f900 	bl	800e05e <VL53L1_duration_maths>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e62:	621a      	str	r2, [r3, #32]
			periods_elapsed);



		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->peak_signal_count_rate_mcps = VL53L1_rate_maths(
 8010e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e6a:	69db      	ldr	r3, [r3, #28]
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	4610      	mov	r0, r2
 8010e70:	f7fd fb6d 	bl	800e54e <VL53L1_rate_maths>
 8010e74:	4603      	mov	r3, r0
 8010e76:	461a      	mov	r2, r3
 8010e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7a:	861a      	strh	r2, [r3, #48]	; 0x30
			pdata->peak_duration_us);

		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_013,
 8010e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		pdata->avg_signal_count_rate_mcps = VL53L1_rate_maths(
 8010e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e82:	6a1b      	ldr	r3, [r3, #32]
 8010e84:	4619      	mov	r1, r3
 8010e86:	4610      	mov	r0, r2
 8010e88:	f7fd fb61 	bl	800e54e <VL53L1_rate_maths>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	461a      	mov	r2, r3
 8010e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e92:	865a      	strh	r2, [r3, #50]	; 0x32
			pdata->woi_duration_us);

		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
			(int32_t)pdata->VL53L1_p_020,
 8010e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		pdata->ambient_count_rate_mcps    = VL53L1_rate_maths(
 8010e98:	461a      	mov	r2, r3
 8010e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9c:	6a1b      	ldr	r3, [r3, #32]
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	4610      	mov	r0, r2
 8010ea2:	f7fd fb54 	bl	800e54e <VL53L1_rate_maths>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eac:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->woi_duration_us);



		count_rate_total =
			(uint32_t)pdata->peak_signal_count_rate_mcps +
 8010eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8010eb2:	461a      	mov	r2, r3
			(uint32_t)pdata->ambient_count_rate_mcps;
 8010eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
		count_rate_total =
 8010eb8:	4413      	add	r3, r2
 8010eba:	61bb      	str	r3, [r7, #24]

		if (histo_merge_nb > 1)
 8010ebc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	d905      	bls.n	8010ed0 <VL53L1_f_011+0x10e>
			count_rate_total /= histo_merge_nb;
 8010ec4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010ec8:	69ba      	ldr	r2, [r7, #24]
 8010eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ece:	61bb      	str	r3, [r7, #24]

		pdata->total_rate_per_spad_mcps   =
			VL53L1_rate_per_spad_maths(
 8010ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ed2:	8ada      	ldrh	r2, [r3, #22]
 8010ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ed8:	69b9      	ldr	r1, [r7, #24]
 8010eda:	2006      	movs	r0, #6
 8010edc:	f7fd fb7c 	bl	800e5d8 <VL53L1_rate_per_spad_maths>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	461a      	mov	r2, r3
		pdata->total_rate_per_spad_mcps   =
 8010ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee6:	86da      	strh	r2, [r3, #54]	; 0x36
					 0xFFFF);



		pdata->VL53L1_p_012   =
			VL53L1_events_per_spad_maths(
 8010ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eee:	8ad9      	ldrh	r1, [r3, #22]
 8010ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef2:	69db      	ldr	r3, [r3, #28]
 8010ef4:	461a      	mov	r2, r3
 8010ef6:	f7fd f90b 	bl	800e110 <VL53L1_events_per_spad_maths>
 8010efa:	4602      	mov	r2, r0
		pdata->VL53L1_p_012   =
 8010efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010efe:	639a      	str	r2, [r3, #56]	; 0x38

	}

	LOG_FUNCTION_END(status);

	return status;
 8010f00:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3720      	adds	r7, #32
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <VL53L1_f_012>:

void VL53L1_f_012(
	uint16_t             gain_factor,
	int16_t              range_offset_mm,
	VL53L1_range_data_t *pdata)
{
 8010f0c:	b590      	push	{r4, r7, lr}
 8010f0e:	b085      	sub	sp, #20
 8010f10:	af02      	add	r7, sp, #8
 8010f12:	4603      	mov	r3, r0
 8010f14:	603a      	str	r2, [r7, #0]
 8010f16:	80fb      	strh	r3, [r7, #6]
 8010f18:	460b      	mov	r3, r1
 8010f1a:	80bb      	strh	r3, [r7, #4]
	LOG_FUNCTION_START("");



	pdata->min_range_mm =
		(int16_t)VL53L1_range_maths(
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	8a58      	ldrh	r0, [r3, #18]
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	8a9c      	ldrh	r4, [r3, #20]
 8010f28:	88fb      	ldrh	r3, [r7, #6]
 8010f2a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010f2e:	9201      	str	r2, [sp, #4]
 8010f30:	9300      	str	r3, [sp, #0]
 8010f32:	2300      	movs	r3, #0
 8010f34:	4622      	mov	r2, r4
 8010f36:	f7fd fb83 	bl	800e640 <VL53L1_range_maths>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	b21a      	sxth	r2, r3
	pdata->min_range_mm =
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->median_range_mm =
		(int16_t)VL53L1_range_maths(
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	8a58      	ldrh	r0, [r3, #18]
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	8a9c      	ldrh	r4, [r3, #20]
 8010f52:	88fb      	ldrh	r3, [r7, #6]
 8010f54:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010f58:	9201      	str	r2, [sp, #4]
 8010f5a:	9300      	str	r3, [sp, #0]
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	4622      	mov	r2, r4
 8010f60:	f7fd fb6e 	bl	800e640 <VL53L1_range_maths>
 8010f64:	4603      	mov	r3, r0
 8010f66:	b21a      	sxth	r2, r3
	pdata->median_range_mm =
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				0,
				(int32_t)gain_factor,
				(int32_t)range_offset_mm);

	pdata->max_range_mm =
		(int16_t)VL53L1_range_maths(
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	8a58      	ldrh	r0, [r3, #18]
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	f8b3 1042 	ldrh.w	r1, [r3, #66]	; 0x42
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	8a9c      	ldrh	r4, [r3, #20]
 8010f7c:	88fb      	ldrh	r3, [r7, #6]
 8010f7e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8010f82:	9201      	str	r2, [sp, #4]
 8010f84:	9300      	str	r3, [sp, #0]
 8010f86:	2300      	movs	r3, #0
 8010f88:	4622      	mov	r2, r4
 8010f8a:	f7fd fb59 	bl	800e640 <VL53L1_range_maths>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	b21a      	sxth	r2, r3
	pdata->max_range_mm =
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48




	LOG_FUNCTION_END(0);
}
 8010f98:	bf00      	nop
 8010f9a:	370c      	adds	r7, #12
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd90      	pop	{r4, r7, pc}

08010fa0 <VL53L1_f_004>:

void  VL53L1_f_004(
	VL53L1_histogram_bin_data_t   *pxtalk,
	VL53L1_histogram_bin_data_t   *pbins,
	VL53L1_histogram_bin_data_t   *pxtalk_realigned)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b086      	sub	sp, #24
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	60b9      	str	r1, [r7, #8]
 8010faa:	607a      	str	r2, [r7, #4]


	uint8_t i          = 0;
 8010fac:	2300      	movs	r3, #0
 8010fae:	75fb      	strb	r3, [r7, #23]
	uint8_t min_bins   = 0;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	75bb      	strb	r3, [r7, #22]
	int8_t  bin_offset = 0;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	753b      	strb	r3, [r7, #20]
	int8_t  bin_access = 0;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	757b      	strb	r3, [r7, #21]





	memcpy(
 8010fbc:	22ac      	movs	r2, #172	; 0xac
 8010fbe:	68b9      	ldr	r1, [r7, #8]
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f008 f8a9 	bl	8019118 <memcpy>
		pxtalk_realigned,
		pbins,
		sizeof(VL53L1_histogram_bin_data_t));

	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	75fb      	strb	r3, [r7, #23]
 8010fca:	e008      	b.n	8010fde <VL53L1_f_004+0x3e>
		pxtalk_realigned->bin_data[i] = 0;
 8010fcc:	7dfa      	ldrb	r2, [r7, #23]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	3206      	adds	r2, #6
 8010fd2:	2100      	movs	r1, #0
 8010fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i < pxtalk_realigned->VL53L1_p_023 ; i++)
 8010fd8:	7dfb      	ldrb	r3, [r7, #23]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	75fb      	strb	r3, [r7, #23]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	7a5b      	ldrb	r3, [r3, #9]
 8010fe2:	7dfa      	ldrb	r2, [r7, #23]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d3f1      	bcc.n	8010fcc <VL53L1_f_004+0x2c>



	bin_offset =  VL53L1_f_038(
 8010fe8:	68f9      	ldr	r1, [r7, #12]
 8010fea:	68b8      	ldr	r0, [r7, #8]
 8010fec:	f000 f878 	bl	80110e0 <VL53L1_f_038>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	753b      	strb	r3, [r7, #20]
						pbins,
						pxtalk);



	if (pxtalk->VL53L1_p_024 < pbins->VL53L1_p_024)
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	7a9a      	ldrb	r2, [r3, #10]
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	7a9b      	ldrb	r3, [r3, #10]
 8010ffc:	429a      	cmp	r2, r3
 8010ffe:	d203      	bcs.n	8011008 <VL53L1_f_004+0x68>
		min_bins = pxtalk->VL53L1_p_024;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	7a9b      	ldrb	r3, [r3, #10]
 8011004:	75bb      	strb	r3, [r7, #22]
 8011006:	e002      	b.n	801100e <VL53L1_f_004+0x6e>
	else
		min_bins = pbins->VL53L1_p_024;
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	7a9b      	ldrb	r3, [r3, #10]
 801100c:	75bb      	strb	r3, [r7, #22]


	for (i = 0 ; i <  min_bins ; i++) {
 801100e:	2300      	movs	r3, #0
 8011010:	75fb      	strb	r3, [r7, #23]
 8011012:	e05c      	b.n	80110ce <VL53L1_f_004+0x12e>



		if (bin_offset >= 0)
 8011014:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8011018:	2b00      	cmp	r3, #0
 801101a:	db0f      	blt.n	801103c <VL53L1_f_004+0x9c>
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 801101c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011020:	461a      	mov	r2, r3
 8011022:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8011026:	4413      	add	r3, r2
				% (int8_t)pbins->VL53L1_p_024;
 8011028:	68ba      	ldr	r2, [r7, #8]
 801102a:	7a92      	ldrb	r2, [r2, #10]
 801102c:	b252      	sxtb	r2, r2
 801102e:	fb93 f1f2 	sdiv	r1, r3, r2
 8011032:	fb01 f202 	mul.w	r2, r1, r2
 8011036:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)i + (int8_t)bin_offset)
 8011038:	757b      	strb	r3, [r7, #21]
 801103a:	e013      	b.n	8011064 <VL53L1_f_004+0xc4>
		else
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	7a9b      	ldrb	r3, [r3, #10]
 8011040:	b25b      	sxtb	r3, r3
 8011042:	461a      	mov	r2, r3
				((int8_t)i + (int8_t)bin_offset))
 8011044:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011048:	4619      	mov	r1, r3
 801104a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801104e:	440b      	add	r3, r1
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8011050:	4413      	add	r3, r2
					% (int8_t)pbins->VL53L1_p_024;
 8011052:	68ba      	ldr	r2, [r7, #8]
 8011054:	7a92      	ldrb	r2, [r2, #10]
 8011056:	b252      	sxtb	r2, r2
 8011058:	fb93 f1f2 	sdiv	r1, r3, r2
 801105c:	fb01 f202 	mul.w	r2, r1, r2
 8011060:	1a9b      	subs	r3, r3, r2
			bin_access = ((int8_t)pbins->VL53L1_p_024 +
 8011062:	757b      	strb	r3, [r7, #21]
			pbins->bin_data[(uint8_t)bin_access],
			pxtalk->bin_data[i]);



		if (pbins->bin_data[(uint8_t)bin_access] >
 8011064:	7d7b      	ldrb	r3, [r7, #21]
 8011066:	461a      	mov	r2, r3
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	3206      	adds	r2, #6
 801106c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
			pxtalk->bin_data[i]) {
 8011070:	7df9      	ldrb	r1, [r7, #23]
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	3106      	adds	r1, #6
 8011076:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
		if (pbins->bin_data[(uint8_t)bin_access] >
 801107a:	429a      	cmp	r2, r3
 801107c:	dd12      	ble.n	80110a4 <VL53L1_f_004+0x104>

			pbins->bin_data[(uint8_t)bin_access] =
				pbins->bin_data[(uint8_t)bin_access]
 801107e:	7d7b      	ldrb	r3, [r7, #21]
 8011080:	461a      	mov	r2, r3
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	3206      	adds	r2, #6
 8011086:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				- pxtalk->bin_data[i];
 801108a:	7df9      	ldrb	r1, [r7, #23]
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	3106      	adds	r1, #6
 8011090:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			pbins->bin_data[(uint8_t)bin_access] =
 8011094:	7d79      	ldrb	r1, [r7, #21]
 8011096:	4608      	mov	r0, r1
				- pxtalk->bin_data[i];
 8011098:	1ad1      	subs	r1, r2, r3
			pbins->bin_data[(uint8_t)bin_access] =
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	1d82      	adds	r2, r0, #6
 801109e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80110a2:	e006      	b.n	80110b2 <VL53L1_f_004+0x112>

		} else {
			pbins->bin_data[(uint8_t)bin_access] = 0;
 80110a4:	7d7b      	ldrb	r3, [r7, #21]
 80110a6:	461a      	mov	r2, r3
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	3206      	adds	r2, #6
 80110ac:	2100      	movs	r1, #0
 80110ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]




		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
			pxtalk->bin_data[i];
 80110b2:	7dfa      	ldrb	r2, [r7, #23]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80110b4:	7d7b      	ldrb	r3, [r7, #21]
 80110b6:	4618      	mov	r0, r3
			pxtalk->bin_data[i];
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	3206      	adds	r2, #6
 80110bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		pxtalk_realigned->bin_data[(uint8_t)bin_access] =
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	1d82      	adds	r2, r0, #6
 80110c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0 ; i <  min_bins ; i++) {
 80110c8:	7dfb      	ldrb	r3, [r7, #23]
 80110ca:	3301      	adds	r3, #1
 80110cc:	75fb      	strb	r3, [r7, #23]
 80110ce:	7dfa      	ldrb	r2, [r7, #23]
 80110d0:	7dbb      	ldrb	r3, [r7, #22]
 80110d2:	429a      	cmp	r2, r3
 80110d4:	d39e      	bcc.n	8011014 <VL53L1_f_004+0x74>
	}



	LOG_FUNCTION_END(0);
}
 80110d6:	bf00      	nop
 80110d8:	bf00      	nop
 80110da:	3718      	adds	r7, #24
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <VL53L1_f_038>:


int8_t  VL53L1_f_038(
	VL53L1_histogram_bin_data_t   *pdata1,
	VL53L1_histogram_bin_data_t   *pdata2)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b086      	sub	sp, #24
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]


	int32_t  phase_delta      = 0;
 80110ea:	2300      	movs	r3, #0
 80110ec:	60fb      	str	r3, [r7, #12]
	int8_t   bin_offset       = 0;
 80110ee:	2300      	movs	r3, #0
 80110f0:	75fb      	strb	r3, [r7, #23]
	uint32_t period           = 0;
 80110f2:	2300      	movs	r3, #0
 80110f4:	60bb      	str	r3, [r7, #8]
	uint32_t remapped_phase   = 0;
 80110f6:	2300      	movs	r3, #0
 80110f8:	613b      	str	r3, [r7, #16]
	LOG_FUNCTION_START("");



	period = 2048 *
		(uint32_t)VL53L1_decode_vcsel_period(pdata1->VL53L1_p_009);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011100:	4618      	mov	r0, r3
 8011102:	f7fd fb85 	bl	800e810 <VL53L1_decode_vcsel_period>
 8011106:	4603      	mov	r3, r0
	period = 2048 *
 8011108:	02db      	lsls	r3, r3, #11
 801110a:	60bb      	str	r3, [r7, #8]

	if (period != 0)
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d00a      	beq.n	8011128 <VL53L1_f_038+0x48>
		remapped_phase =
		(uint32_t)pdata2->zero_distance_phase % period;
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		remapped_phase =
 8011118:	68ba      	ldr	r2, [r7, #8]
 801111a:	fbb3 f2f2 	udiv	r2, r3, r2
 801111e:	68b9      	ldr	r1, [r7, #8]
 8011120:	fb01 f202 	mul.w	r2, r1, r2
 8011124:	1a9b      	subs	r3, r3, r2
 8011126:	613b      	str	r3, [r7, #16]


	phase_delta = (int32_t)pdata1->zero_distance_phase
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 801112e:	461a      	mov	r2, r3
				- (int32_t)remapped_phase;
 8011130:	693b      	ldr	r3, [r7, #16]
	phase_delta = (int32_t)pdata1->zero_distance_phase
 8011132:	1ad3      	subs	r3, r2, r3
 8011134:	60fb      	str	r3, [r7, #12]



	if (phase_delta > 0)
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2b00      	cmp	r3, #0
 801113a:	dd09      	ble.n	8011150 <VL53L1_f_038+0x70>
		bin_offset = (int8_t)((phase_delta + 1024) / 2048);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011142:	2b00      	cmp	r3, #0
 8011144:	da01      	bge.n	801114a <VL53L1_f_038+0x6a>
 8011146:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801114a:	12db      	asrs	r3, r3, #11
 801114c:	75fb      	strb	r3, [r7, #23]
 801114e:	e008      	b.n	8011162 <VL53L1_f_038+0x82>
	else
		bin_offset = (int8_t)((phase_delta - 1024) / 2048);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8011156:	2b00      	cmp	r3, #0
 8011158:	da01      	bge.n	801115e <VL53L1_f_038+0x7e>
 801115a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 801115e:	12db      	asrs	r3, r3, #11
 8011160:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(0);

	return bin_offset;
 8011162:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011166:	4618      	mov	r0, r3
 8011168:	3718      	adds	r7, #24
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}

0801116e <VL53L1_f_039>:


VL53L1_Error  VL53L1_f_039(
	VL53L1_histogram_bin_data_t   *pidata,
	VL53L1_histogram_bin_data_t   *podata)
{
 801116e:	b580      	push	{r7, lr}
 8011170:	b08e      	sub	sp, #56	; 0x38
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
 8011176:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011178:	2300      	movs	r3, #0
 801117a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	uint8_t  bin_initial_index[VL53L1_MAX_BIN_SEQUENCE_CODE+1];
	uint8_t  bin_repeat_count[VL53L1_MAX_BIN_SEQUENCE_CODE+1];

	uint8_t  bin_cfg        = 0;
 801117e:	2300      	movs	r3, #0
 8011180:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t  bin_seq_length = 0;
 8011184:	2300      	movs	r3, #0
 8011186:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int32_t  repeat_count   = 0;
 801118a:	2300      	movs	r3, #0
 801118c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t  VL53L1_p_018       = 0;
 801118e:	2300      	movs	r3, #0
 8011190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t  lc       = 0;
 8011194:	2300      	movs	r3, #0
 8011196:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t  i       = 0;
 801119a:	2300      	movs	r3, #0
 801119c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	LOG_FUNCTION_START("");



	memcpy(podata, pidata, sizeof(VL53L1_histogram_bin_data_t));
 80111a0:	22ac      	movs	r2, #172	; 0xac
 80111a2:	6879      	ldr	r1, [r7, #4]
 80111a4:	6838      	ldr	r0, [r7, #0]
 80111a6:	f007 ffb7 	bl	8019118 <memcpy>


	podata->VL53L1_p_024 = 0;
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	2200      	movs	r2, #0
 80111ae:	729a      	strb	r2, [r3, #10]

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 80111b0:	2300      	movs	r3, #0
 80111b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80111b6:	e00a      	b.n	80111ce <VL53L1_f_039+0x60>
		podata->bin_seq[lc] = VL53L1_MAX_BIN_SEQUENCE_CODE+1;
 80111b8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80111bc:	683a      	ldr	r2, [r7, #0]
 80111be:	4413      	add	r3, r2
 80111c0:	2210      	movs	r2, #16
 80111c2:	731a      	strb	r2, [r3, #12]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++)
 80111c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80111c8:	3301      	adds	r3, #1
 80111ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80111ce:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80111d2:	2b05      	cmp	r3, #5
 80111d4:	d9f0      	bls.n	80111b8 <VL53L1_f_039+0x4a>

	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 80111d6:	2300      	movs	r3, #0
 80111d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80111dc:	e00b      	b.n	80111f6 <VL53L1_f_039+0x88>
		podata->bin_data[lc] = 0;
 80111de:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	3206      	adds	r2, #6
 80111e6:	2100      	movs	r1, #0
 80111e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (lc = 0 ; lc < podata->VL53L1_p_023 ; lc++)
 80111ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80111f0:	3301      	adds	r3, #1
 80111f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	7a5b      	ldrb	r3, [r3, #9]
 80111fa:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80111fe:	429a      	cmp	r2, r3
 8011200:	d3ed      	bcc.n	80111de <VL53L1_f_039+0x70>



	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011202:	2300      	movs	r3, #0
 8011204:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011208:	e012      	b.n	8011230 <VL53L1_f_039+0xc2>
		bin_initial_index[lc] = 0x00;
 801120a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801120e:	3338      	adds	r3, #56	; 0x38
 8011210:	443b      	add	r3, r7
 8011212:	2200      	movs	r2, #0
 8011214:	f803 2c20 	strb.w	r2, [r3, #-32]
		bin_repeat_count[lc]  = 0x00;
 8011218:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801121c:	3338      	adds	r3, #56	; 0x38
 801121e:	443b      	add	r3, r7
 8011220:	2200      	movs	r2, #0
 8011222:	f803 2c30 	strb.w	r2, [r3, #-48]
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011226:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801122a:	3301      	adds	r3, #1
 801122c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011230:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011234:	2b0f      	cmp	r3, #15
 8011236:	d9e8      	bls.n	801120a <VL53L1_f_039+0x9c>
	}




	bin_seq_length = 0x00;
 8011238:	2300      	movs	r3, #0
 801123a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801123e:	2300      	movs	r3, #0
 8011240:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011244:	e068      	b.n	8011318 <VL53L1_f_039+0x1aa>

		bin_cfg = pidata->bin_seq[lc];
 8011246:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801124a:	687a      	ldr	r2, [r7, #4]
 801124c:	4413      	add	r3, r2
 801124e:	7b1b      	ldrb	r3, [r3, #12]
 8011250:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33



		if (bin_repeat_count[bin_cfg] == 0) {
 8011254:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011258:	3338      	adds	r3, #56	; 0x38
 801125a:	443b      	add	r3, r7
 801125c:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d115      	bne.n	8011290 <VL53L1_f_039+0x122>
			bin_initial_index[bin_cfg]      = bin_seq_length * 4;
 8011264:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011268:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801126c:	0092      	lsls	r2, r2, #2
 801126e:	b2d2      	uxtb	r2, r2
 8011270:	3338      	adds	r3, #56	; 0x38
 8011272:	443b      	add	r3, r7
 8011274:	f803 2c20 	strb.w	r2, [r3, #-32]
			podata->bin_seq[bin_seq_length] = bin_cfg;
 8011278:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801127c:	683a      	ldr	r2, [r7, #0]
 801127e:	4413      	add	r3, r2
 8011280:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8011284:	731a      	strb	r2, [r3, #12]
			bin_seq_length++;
 8011286:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801128a:	3301      	adds	r3, #1
 801128c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}

		bin_repeat_count[bin_cfg]++;
 8011290:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011294:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8011298:	443a      	add	r2, r7
 801129a:	f812 2c30 	ldrb.w	r2, [r2, #-48]
 801129e:	3201      	adds	r2, #1
 80112a0:	b2d2      	uxtb	r2, r2
 80112a2:	3338      	adds	r3, #56	; 0x38
 80112a4:	443b      	add	r3, r7
 80112a6:	f803 2c30 	strb.w	r2, [r3, #-48]



		VL53L1_p_018 = bin_initial_index[bin_cfg];
 80112aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80112ae:	3338      	adds	r3, #56	; 0x38
 80112b0:	443b      	add	r3, r7
 80112b2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80112b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

		for (i = 0 ; i < 4 ; i++)
 80112ba:	2300      	movs	r3, #0
 80112bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80112c0:	e021      	b.n	8011306 <VL53L1_f_039+0x198>
			podata->bin_data[VL53L1_p_018+i] +=
 80112c2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80112c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80112ca:	441a      	add	r2, r3
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	3206      	adds	r2, #6
 80112d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				pidata->bin_data[lc*4+i];
 80112d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80112d8:	009a      	lsls	r2, r3, #2
 80112da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80112de:	441a      	add	r2, r3
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	3206      	adds	r2, #6
 80112e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
			podata->bin_data[VL53L1_p_018+i] +=
 80112e8:	f897 002b 	ldrb.w	r0, [r7, #43]	; 0x2b
 80112ec:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80112f0:	4402      	add	r2, r0
 80112f2:	4419      	add	r1, r3
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	3206      	adds	r2, #6
 80112f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (i = 0 ; i < 4 ; i++)
 80112fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011300:	3301      	adds	r3, #1
 8011302:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8011306:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801130a:	2b03      	cmp	r3, #3
 801130c:	d9d9      	bls.n	80112c2 <VL53L1_f_039+0x154>
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 801130e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011312:	3301      	adds	r3, #1
 8011314:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011318:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801131c:	2b05      	cmp	r3, #5
 801131e:	d992      	bls.n	8011246 <VL53L1_f_039+0xd8>

	}



	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8011320:	2300      	movs	r3, #0
 8011322:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011326:	e022      	b.n	801136e <VL53L1_f_039+0x200>

		bin_cfg = podata->bin_seq[lc];
 8011328:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801132c:	683a      	ldr	r2, [r7, #0]
 801132e:	4413      	add	r3, r2
 8011330:	7b1b      	ldrb	r3, [r3, #12]
 8011332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if (bin_cfg <= VL53L1_MAX_BIN_SEQUENCE_CODE)
 8011336:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801133a:	2b0f      	cmp	r3, #15
 801133c:	d80c      	bhi.n	8011358 <VL53L1_f_039+0x1ea>
			podata->bin_rep[lc] =
				bin_repeat_count[bin_cfg];
 801133e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
			podata->bin_rep[lc] =
 8011342:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
				bin_repeat_count[bin_cfg];
 8011346:	3238      	adds	r2, #56	; 0x38
 8011348:	443a      	add	r2, r7
 801134a:	f812 1c30 	ldrb.w	r1, [r2, #-48]
			podata->bin_rep[lc] =
 801134e:	683a      	ldr	r2, [r7, #0]
 8011350:	4413      	add	r3, r2
 8011352:	460a      	mov	r2, r1
 8011354:	749a      	strb	r2, [r3, #18]
 8011356:	e005      	b.n	8011364 <VL53L1_f_039+0x1f6>
		else
			podata->bin_rep[lc] = 0;
 8011358:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801135c:	683a      	ldr	r2, [r7, #0]
 801135e:	4413      	add	r3, r2
 8011360:	2200      	movs	r2, #0
 8011362:	749a      	strb	r2, [r3, #18]
	for (lc = 0 ; lc < VL53L1_MAX_BIN_SEQUENCE_LENGTH ; lc++) {
 8011364:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011368:	3301      	adds	r3, #1
 801136a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801136e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011372:	2b05      	cmp	r3, #5
 8011374:	d9d8      	bls.n	8011328 <VL53L1_f_039+0x1ba>
	}

	podata->VL53L1_p_024 = bin_seq_length * 4;
 8011376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	b2da      	uxtb	r2, r3
 801137e:	683b      	ldr	r3, [r7, #0]
 8011380:	729a      	strb	r2, [r3, #10]





	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011382:	2300      	movs	r3, #0
 8011384:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8011388:	e050      	b.n	801142c <VL53L1_f_039+0x2be>

		repeat_count = (int32_t)bin_repeat_count[lc];
 801138a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 801138e:	3338      	adds	r3, #56	; 0x38
 8011390:	443b      	add	r3, r7
 8011392:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8011396:	62fb      	str	r3, [r7, #44]	; 0x2c

		if (repeat_count > 0) {
 8011398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801139a:	2b00      	cmp	r3, #0
 801139c:	dd41      	ble.n	8011422 <VL53L1_f_039+0x2b4>

			VL53L1_p_018 = bin_initial_index[lc];
 801139e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80113a2:	3338      	adds	r3, #56	; 0x38
 80113a4:	443b      	add	r3, r7
 80113a6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80113aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			for (i = 0 ; i < 4 ; i++) {
 80113ae:	2300      	movs	r3, #0
 80113b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80113b4:	e031      	b.n	801141a <VL53L1_f_039+0x2ac>
				podata->bin_data[VL53L1_p_018+i] +=
 80113b6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80113ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80113be:	441a      	add	r2, r3
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	3206      	adds	r2, #6
 80113c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(repeat_count/2);
 80113c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ca:	0fda      	lsrs	r2, r3, #31
 80113cc:	4413      	add	r3, r2
 80113ce:	105b      	asrs	r3, r3, #1
 80113d0:	4618      	mov	r0, r3
				podata->bin_data[VL53L1_p_018+i] +=
 80113d2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80113d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80113da:	441a      	add	r2, r3
 80113dc:	4401      	add	r1, r0
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	3206      	adds	r2, #6
 80113e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				podata->bin_data[VL53L1_p_018+i] /=
 80113e6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80113ea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80113ee:	441a      	add	r2, r3
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	3206      	adds	r2, #6
 80113f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80113f8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80113fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011400:	441a      	add	r2, r3
 8011402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011404:	fb91 f1f3 	sdiv	r1, r1, r3
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	3206      	adds	r2, #6
 801140c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0 ; i < 4 ; i++) {
 8011410:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8011414:	3301      	adds	r3, #1
 8011416:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 801141a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801141e:	2b03      	cmp	r3, #3
 8011420:	d9c9      	bls.n	80113b6 <VL53L1_f_039+0x248>
	for (lc = 0 ; lc <= VL53L1_MAX_BIN_SEQUENCE_CODE ; lc++) {
 8011422:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011426:	3301      	adds	r3, #1
 8011428:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 801142c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011430:	2b0f      	cmp	r3, #15
 8011432:	d9aa      	bls.n	801138a <VL53L1_f_039+0x21c>
		}
	}



	podata->number_of_ambient_bins = 0;
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	2200      	movs	r2, #0
 8011438:	72da      	strb	r2, [r3, #11]
	if ((bin_repeat_count[7] > 0) ||
 801143a:	7bfb      	ldrb	r3, [r7, #15]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d102      	bne.n	8011446 <VL53L1_f_039+0x2d8>
		(bin_repeat_count[15] > 0))
 8011440:	7dfb      	ldrb	r3, [r7, #23]
	if ((bin_repeat_count[7] > 0) ||
 8011442:	2b00      	cmp	r3, #0
 8011444:	d002      	beq.n	801144c <VL53L1_f_039+0x2de>
		podata->number_of_ambient_bins = 4;
 8011446:	683b      	ldr	r3, [r7, #0]
 8011448:	2204      	movs	r2, #4
 801144a:	72da      	strb	r2, [r3, #11]

	LOG_FUNCTION_END(status);

	return status;
 801144c:	f997 3034 	ldrsb.w	r3, [r7, #52]	; 0x34
}
 8011450:	4618      	mov	r0, r3
 8011452:	3738      	adds	r7, #56	; 0x38
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}

08011458 <VL53L1_hist_process_data>:
	VL53L1_xtalk_histogram_data_t      *pxtalk_shape,
	uint8_t                            *pArea1,
	uint8_t                            *pArea2,
	VL53L1_range_results_t             *presults,
	uint8_t                            *HistMergeNumber)
{
 8011458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801145a:	b0cb      	sub	sp, #300	; 0x12c
 801145c:	af06      	add	r7, sp, #24
 801145e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8011462:	f5a4 7482 	sub.w	r4, r4, #260	; 0x104
 8011466:	6020      	str	r0, [r4, #0]
 8011468:	f507 7088 	add.w	r0, r7, #272	; 0x110
 801146c:	f5a0 7084 	sub.w	r0, r0, #264	; 0x108
 8011470:	6001      	str	r1, [r0, #0]
 8011472:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011476:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 801147a:	600a      	str	r2, [r1, #0]
 801147c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011480:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011484:	6013      	str	r3, [r2, #0]



	VL53L1_Error  status  = VL53L1_ERROR_NONE;
 8011486:	2300      	movs	r3, #0
 8011488:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	VL53L1_hist_gen3_algo_private_data_t  *palgo_gen3 =
 801148c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011490:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
			(VL53L1_hist_gen3_algo_private_data_t *) pArea1;
	VL53L1_hist_gen4_algo_filtered_data_t *pfiltered4 =
 8011494:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011498:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			(VL53L1_hist_gen4_algo_filtered_data_t *) pArea2;

	VL53L1_hist_gen3_dmax_private_data_t   dmax_algo_gen3;
	VL53L1_hist_gen3_dmax_private_data_t  *pdmax_algo_gen3 =
 801149c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80114a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
						&dmax_algo_gen3;

	VL53L1_histogram_bin_data_t             bins_averaged;
	VL53L1_histogram_bin_data_t           *pbins_averaged = &bins_averaged;
 80114a4:	f107 0318 	add.w	r3, r7, #24
 80114a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

	VL53L1_range_data_t                   *pdata;

	uint32_t xtalk_rate_kcps               = 0;
 80114ac:	2300      	movs	r3, #0
 80114ae:	617b      	str	r3, [r7, #20]
	uint32_t max_xtalk_rate_per_spad_kcps  = 0;
 80114b0:	2300      	movs	r3, #0
 80114b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	uint8_t  xtalk_enable                  = 0;
 80114b6:	2300      	movs	r3, #0
 80114b8:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	uint8_t  r                             = 0;
 80114bc:	2300      	movs	r3, #0
 80114be:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t  t                             = 0;
 80114c2:	2300      	movs	r3, #0
 80114c4:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	uint32_t XtalkDetectMaxSigma           = 0;
 80114c8:	2300      	movs	r3, #0
 80114ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0


	int16_t  delta_mm                      = 0;
 80114ce:	2300      	movs	r3, #0
 80114d0:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

	LOG_FUNCTION_START("");



	VL53L1_f_039(
 80114d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80114d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80114dc:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80114e0:	6818      	ldr	r0, [r3, #0]
 80114e2:	f7ff fe44 	bl	801116e <VL53L1_f_039>



	VL53L1_init_histogram_bin_data_struct(
			0,
			pxtalk_shape->xtalk_shape.VL53L1_p_024,
 80114e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80114ea:	7a9b      	ldrb	r3, [r3, #10]
	VL53L1_init_histogram_bin_data_struct(
 80114ec:	b299      	uxth	r1, r3
 80114ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80114f2:	3348      	adds	r3, #72	; 0x48
 80114f4:	461a      	mov	r2, r3
 80114f6:	2000      	movs	r0, #0
 80114f8:	f7fd f9db 	bl	800e8b2 <VL53L1_init_histogram_bin_data_struct>
			&(pxtalk_shape->xtalk_hist_removed));



	VL53L1_copy_xtalk_bin_data_to_histogram_data_struct(
 80114fc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8011500:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011504:	3348      	adds	r3, #72	; 0x48
 8011506:	4619      	mov	r1, r3
 8011508:	4610      	mov	r0, r2
 801150a:	f7fd f994 	bl	800e836 <VL53L1_copy_xtalk_bin_data_to_histogram_data_struct>
			&(pxtalk_shape->xtalk_shape),
			&(pxtalk_shape->xtalk_hist_removed));



	if ((status == VL53L1_ERROR_NONE) &&
 801150e:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 8011512:	2b00      	cmp	r3, #0
 8011514:	d142      	bne.n	801159c <VL53L1_hist_process_data+0x144>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 8011516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801151a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 8011524:	2b00      	cmp	r3, #0
 8011526:	d039      	beq.n	801159c <VL53L1_hist_process_data+0x144>
		status =
		VL53L1_f_040(
 8011528:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801152c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8011534:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011538:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f9b3 5030 	ldrsh.w	r5, [r3, #48]	; 0x30
 8011542:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011546:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	f9b3 6032 	ldrsh.w	r6, [r3, #50]	; 0x32
 8011550:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011554:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 801155e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011562:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8011566:	6812      	ldr	r2, [r2, #0]
 8011568:	f892 20a8 	ldrb.w	r2, [r2, #168]	; 0xa8
 801156c:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011570:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8011574:	6809      	ldr	r1, [r1, #0]
 8011576:	f891 10a9 	ldrb.w	r1, [r1, #169]	; 0xa9
 801157a:	f107 0014 	add.w	r0, r7, #20
 801157e:	9004      	str	r0, [sp, #16]
 8011580:	9103      	str	r1, [sp, #12]
 8011582:	9202      	str	r2, [sp, #8]
 8011584:	9301      	str	r3, [sp, #4]
 8011586:	2300      	movs	r3, #0
 8011588:	9300      	str	r3, [sp, #0]
 801158a:	2300      	movs	r3, #0
 801158c:	4632      	mov	r2, r6
 801158e:	4629      	mov	r1, r5
 8011590:	4620      	mov	r0, r4
 8011592:	f002 f98c 	bl	80138ae <VL53L1_f_040>
 8011596:	4603      	mov	r3, r0
 8011598:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		pbins_input->roi_config__user_roi_requested_global_xy_size,
		&(xtalk_rate_kcps));



	if ((status == VL53L1_ERROR_NONE) &&
 801159c:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d115      	bne.n	80115d0 <VL53L1_hist_process_data+0x178>
		(ppost_cfg->algo__crosstalk_compensation_enable > 0))
 80115a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80115a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	if ((status == VL53L1_ERROR_NONE) &&
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d00c      	beq.n	80115d0 <VL53L1_hist_process_data+0x178>
		status =
			VL53L1_f_041(
 80115b6:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80115ba:	697a      	ldr	r2, [r7, #20]
 80115bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80115c0:	3348      	adds	r3, #72	; 0x48
 80115c2:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80115c6:	f002 fbe4 	bl	8013d92 <VL53L1_f_041>
 80115ca:	4603      	mov	r3, r0
 80115cc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f




	presults->xmonitor.total_periods_elapsed =
		pbins_averaged->total_periods_elapsed;
 80115d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80115d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	presults->xmonitor.total_periods_elapsed =
 80115d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80115dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	presults->xmonitor.VL53L1_p_006 =
		pbins_averaged->result__dss_actual_effective_spads;
 80115e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80115e4:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
	presults->xmonitor.VL53L1_p_006 =
 80115e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80115ec:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a

	presults->xmonitor.peak_signal_count_rate_mcps = 0;
 80115f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80115f4:	2200      	movs	r2, #0
 80115f6:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	presults->xmonitor.VL53L1_p_012     = 0;
 80115fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80115fe:	2200      	movs	r2, #0
 8011600:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c

	presults->xmonitor.range_id     = 0;
 8011604:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011608:	2200      	movs	r2, #0
 801160a:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	presults->xmonitor.range_status = VL53L1_DEVICEERROR_NOUPDATE;
 801160e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011612:	2200      	movs	r2, #0
 8011614:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e



	xtalk_enable = 0;
 8011618:	2300      	movs	r3, #0
 801161a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e
	if (ppost_cfg->algo__crosstalk_compensation_enable > 0)
 801161e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011622:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801162c:	2b00      	cmp	r3, #0
 801162e:	d002      	beq.n	8011636 <VL53L1_hist_process_data+0x1de>
		xtalk_enable = 1;
 8011630:	2301      	movs	r3, #1
 8011632:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e



	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011636:	2300      	movs	r3, #0
 8011638:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 801163c:	e108      	b.n	8011850 <VL53L1_hist_process_data+0x3f8>


		ppost_cfg->algo__crosstalk_compensation_enable = r;
 801163e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011642:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 801164c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28



		status =
		VL53L1_f_033(
 8011650:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8011654:	3348      	adds	r3, #72	; 0x48
 8011656:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801165a:	7814      	ldrb	r4, [r2, #0]
 801165c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011660:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8011664:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8011668:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 801166c:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8011670:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011674:	9405      	str	r4, [sp, #20]
 8011676:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 801167a:	9404      	str	r4, [sp, #16]
 801167c:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8011680:	9403      	str	r4, [sp, #12]
 8011682:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8011686:	9402      	str	r4, [sp, #8]
 8011688:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 801168c:	9401      	str	r4, [sp, #4]
 801168e:	9300      	str	r3, [sp, #0]
 8011690:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011694:	6812      	ldr	r2, [r2, #0]
 8011696:	6809      	ldr	r1, [r1, #0]
 8011698:	6800      	ldr	r0, [r0, #0]
 801169a:	f7fe fe65 	bl	8010368 <VL53L1_f_033>
 801169e:	4603      	mov	r3, r0
 80116a0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			pdmax_algo_gen3,
			presults,
			*HistMergeNumber);


		if (!(status == VL53L1_ERROR_NONE && r == 0))
 80116a4:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f040 80cb 	bne.w	8011844 <VL53L1_hist_process_data+0x3ec>
 80116ae:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	f040 80c6 	bne.w	8011844 <VL53L1_hist_process_data+0x3ec>
			continue;



		if (presults->active_results == 0) {
 80116b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80116bc:	7c9b      	ldrb	r3, [r3, #18]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d110      	bne.n	80116e4 <VL53L1_hist_process_data+0x28c>
			pdata = &(presults->VL53L1_p_002[0]);
 80116c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80116c6:	3314      	adds	r3, #20
 80116c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			pdata->ambient_count_rate_mcps =
				pdmax_algo_gen3->VL53L1_p_001;
 80116cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80116d0:	8b1a      	ldrh	r2, [r3, #24]
			pdata->ambient_count_rate_mcps =
 80116d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80116d6:	869a      	strh	r2, [r3, #52]	; 0x34
			pdata->VL53L1_p_006 =
				pdmax_algo_gen3->VL53L1_p_006;
 80116d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80116dc:	8b5a      	ldrh	r2, [r3, #26]
			pdata->VL53L1_p_006 =
 80116de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80116e2:	82da      	strh	r2, [r3, #22]
		}



		max_xtalk_rate_per_spad_kcps = (uint32_t)(
		ppost_cfg->algo__crosstalk_detect_max_valid_rate_kcps);
 80116e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80116e8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
		max_xtalk_rate_per_spad_kcps = (uint32_t)(
 80116f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps *= (uint32_t)(*HistMergeNumber);
 80116f4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80116f8:	781b      	ldrb	r3, [r3, #0]
 80116fa:	461a      	mov	r2, r3
 80116fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011700:	fb02 f303 	mul.w	r3, r2, r3
 8011704:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		max_xtalk_rate_per_spad_kcps <<= 4;
 8011708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801170c:	011b      	lsls	r3, r3, #4
 801170e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

		for (t = 0 ; t < presults->active_results ; t++) {
 8011712:	2300      	movs	r3, #0
 8011714:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011718:	e08b      	b.n	8011832 <VL53L1_hist_process_data+0x3da>

			pdata = &(presults->VL53L1_p_002[t]);
 801171a:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 801171e:	224c      	movs	r2, #76	; 0x4c
 8011720:	fb02 f303 	mul.w	r3, r2, r3
 8011724:	3310      	adds	r3, #16
 8011726:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801172a:	4413      	add	r3, r2
 801172c:	3304      	adds	r3, #4
 801172e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec



			if (pdata->max_range_mm > pdata->min_range_mm)
 8011732:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011736:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 801173a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801173e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011742:	429a      	cmp	r2, r3
 8011744:	dd0e      	ble.n	8011764 <VL53L1_hist_process_data+0x30c>
				delta_mm =
					pdata->max_range_mm -
 8011746:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801174a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 801174e:	b29a      	uxth	r2, r3
					pdata->min_range_mm;
 8011750:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011754:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8011758:	b29b      	uxth	r3, r3
					pdata->max_range_mm -
 801175a:	1ad3      	subs	r3, r2, r3
 801175c:	b29b      	uxth	r3, r3
				delta_mm =
 801175e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8011762:	e00d      	b.n	8011780 <VL53L1_hist_process_data+0x328>
			else
				delta_mm =
					pdata->min_range_mm -
 8011764:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011768:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801176c:	b29a      	uxth	r2, r3
					pdata->max_range_mm;
 801176e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011772:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8011776:	b29b      	uxth	r3, r3
					pdata->min_range_mm -
 8011778:	1ad3      	subs	r3, r2, r3
 801177a:	b29b      	uxth	r3, r3
				delta_mm =
 801177c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

			XtalkDetectMaxSigma =
				ppost_cfg->algo__crosstalk_detect_max_sigma_mm;
 8011780:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011784:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
			XtalkDetectMaxSigma =
 801178c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma *= (uint32_t)(*HistMergeNumber);
 8011790:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011794:	781b      	ldrb	r3, [r3, #0]
 8011796:	461a      	mov	r2, r3
 8011798:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801179c:	fb02 f303 	mul.w	r3, r2, r3
 80117a0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			XtalkDetectMaxSigma <<= 5;
 80117a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80117a8:	015b      	lsls	r3, r3, #5
 80117aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			if (pdata->median_range_mm  >
 80117ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117b2:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 80117b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80117ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
			if (pdata->median_range_mm  >
 80117c4:	429a      	cmp	r2, r3
 80117c6:	dd2f      	ble.n	8011828 <VL53L1_hist_process_data+0x3d0>
			pdata->median_range_mm  <
 80117c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117cc:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 80117d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80117d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
			ppost_cfg->algo__crosstalk_detect_min_valid_range_mm &&
 80117de:	429a      	cmp	r2, r3
 80117e0:	da22      	bge.n	8011828 <VL53L1_hist_process_data+0x3d0>
			pdata->VL53L1_p_012 <
 80117e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
			ppost_cfg->algo__crosstalk_detect_max_valid_range_mm &&
 80117e8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d91b      	bls.n	8011828 <VL53L1_hist_process_data+0x3d0>
			max_xtalk_rate_per_spad_kcps &&
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 80117f0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80117f4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80117f6:	461a      	mov	r2, r3
			max_xtalk_rate_per_spad_kcps &&
 80117f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d913      	bls.n	8011828 <VL53L1_hist_process_data+0x3d0>
			delta_mm <
 8011800:	f9b7 310a 	ldrsh.w	r3, [r7, #266]	; 0x10a
			ppost_cfg->algo__crosstalk_detect_min_max_tolerance) {
 8011804:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8011808:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 801180c:	6812      	ldr	r2, [r2, #0]
 801180e:	8fd2      	ldrh	r2, [r2, #62]	; 0x3e
			pdata->VL53L1_p_005 < XtalkDetectMaxSigma &&
 8011810:	4293      	cmp	r3, r2
 8011812:	da09      	bge.n	8011828 <VL53L1_hist_process_data+0x3d0>



				memcpy(
					&(presults->xmonitor),
 8011814:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011818:	f503 73a2 	add.w	r3, r3, #324	; 0x144
				memcpy(
 801181c:	224c      	movs	r2, #76	; 0x4c
 801181e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8011822:	4618      	mov	r0, r3
 8011824:	f007 fc78 	bl	8019118 <memcpy>
		for (t = 0 ; t < presults->active_results ; t++) {
 8011828:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 801182c:	3301      	adds	r3, #1
 801182e:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
 8011832:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011836:	7c9b      	ldrb	r3, [r3, #18]
 8011838:	f897 210c 	ldrb.w	r2, [r7, #268]	; 0x10c
 801183c:	429a      	cmp	r2, r3
 801183e:	f4ff af6c 	bcc.w	801171a <VL53L1_hist_process_data+0x2c2>
 8011842:	e000      	b.n	8011846 <VL53L1_hist_process_data+0x3ee>
			continue;
 8011844:	bf00      	nop
	for (r = 0 ; r <= xtalk_enable ; r++) {
 8011846:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 801184a:	3301      	adds	r3, #1
 801184c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
 8011850:	f897 210d 	ldrb.w	r2, [r7, #269]	; 0x10d
 8011854:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
 8011858:	429a      	cmp	r2, r3
 801185a:	f67f aef0 	bls.w	801163e <VL53L1_hist_process_data+0x1e6>

	}



	ppost_cfg->algo__crosstalk_compensation_enable = xtalk_enable;
 801185e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8011862:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 801186c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	LOG_FUNCTION_END(status);

	return status;
 8011870:	f997 310f 	ldrsb.w	r3, [r7, #271]	; 0x10f
}
 8011874:	4618      	mov	r0, r3
 8011876:	f507 778a 	add.w	r7, r7, #276	; 0x114
 801187a:	46bd      	mov	sp, r7
 801187c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801187e <VL53L1_nvm_enable>:

VL53L1_Error VL53L1_nvm_enable(
	VL53L1_DEV      Dev,
	uint16_t        nvm_ctrl_pulse_width,
	int32_t         nvm_power_up_delay_us)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b086      	sub	sp, #24
 8011882:	af00      	add	r7, sp, #0
 8011884:	60f8      	str	r0, [r7, #12]
 8011886:	460b      	mov	r3, r1
 8011888:	607a      	str	r2, [r7, #4]
 801188a:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801188c:	2300      	movs	r3, #0
 801188e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");




	if (status == VL53L1_ERROR_NONE)
 8011890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d104      	bne.n	80118a2 <VL53L1_nvm_enable+0x24>
		status = VL53L1_disable_firmware(Dev);
 8011898:	68f8      	ldr	r0, [r7, #12]
 801189a:	f7f9 fb5a 	bl	800af52 <VL53L1_disable_firmware>
 801189e:	4603      	mov	r3, r0
 80118a0:	75fb      	strb	r3, [r7, #23]




	if (status == VL53L1_ERROR_NONE)
 80118a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d104      	bne.n	80118b4 <VL53L1_nvm_enable+0x36>
		status = VL53L1_enable_powerforce(Dev);
 80118aa:	68f8      	ldr	r0, [r7, #12]
 80118ac:	f7f9 fb82 	bl	800afb4 <VL53L1_enable_powerforce>
 80118b0:	4603      	mov	r3, r0
 80118b2:	75fb      	strb	r3, [r7, #23]



	if (status == VL53L1_ERROR_NONE)
 80118b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d105      	bne.n	80118c8 <VL53L1_nvm_enable+0x4a>
		status = VL53L1_WaitUs(
 80118bc:	21fa      	movs	r1, #250	; 0xfa
 80118be:	68f8      	ldr	r0, [r7, #12]
 80118c0:	f002 fdd0 	bl	8014464 <VL53L1_WaitUs>
 80118c4:	4603      	mov	r3, r0
 80118c6:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_ENABLE_POWERFORCE_SETTLING_TIME_US);



	if (status == VL53L1_ERROR_NONE)
 80118c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d107      	bne.n	80118e0 <VL53L1_nvm_enable+0x62>
		status = VL53L1_WrByte(
 80118d0:	2201      	movs	r2, #1
 80118d2:	f240 7181 	movw	r1, #1921	; 0x781
 80118d6:	68f8      	ldr	r0, [r7, #12]
 80118d8:	f002 fcd0 	bl	801427c <VL53L1_WrByte>
 80118dc:	4603      	mov	r3, r0
 80118de:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 80118e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d107      	bne.n	80118f8 <VL53L1_nvm_enable+0x7a>
		status = VL53L1_WrByte(
 80118e8:	2205      	movs	r2, #5
 80118ea:	f240 6183 	movw	r1, #1667	; 0x683
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f002 fcc4 	bl	801427c <VL53L1_WrByte>
 80118f4:	4603      	mov	r3, r0
 80118f6:	75fb      	strb	r3, [r7, #23]
					VL53L1_RANGING_CORE__CLK_CTRL1,
					0x05);



	if (status == VL53L1_ERROR_NONE)
 80118f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d105      	bne.n	801190c <VL53L1_nvm_enable+0x8e>
		status = VL53L1_WaitUs(
 8011900:	6879      	ldr	r1, [r7, #4]
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	f002 fdae 	bl	8014464 <VL53L1_WaitUs>
 8011908:	4603      	mov	r3, r0
 801190a:	75fb      	strb	r3, [r7, #23]
					Dev,
					nvm_power_up_delay_us);



	if (status == VL53L1_ERROR_NONE)
 801190c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d107      	bne.n	8011924 <VL53L1_nvm_enable+0xa6>
		status = VL53L1_WrByte(
 8011914:	2201      	movs	r2, #1
 8011916:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 801191a:	68f8      	ldr	r0, [r7, #12]
 801191c:	f002 fcae 	bl	801427c <VL53L1_WrByte>
 8011920:	4603      	mov	r3, r0
 8011922:	75fb      	strb	r3, [r7, #23]
					Dev,
					VL53L1_RANGING_CORE__NVM_CTRL__MODE,
					0x01);

	if (status == VL53L1_ERROR_NONE)
 8011924:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d108      	bne.n	801193e <VL53L1_nvm_enable+0xc0>
		status = VL53L1_WrWord(
 801192c:	897b      	ldrh	r3, [r7, #10]
 801192e:	461a      	mov	r2, r3
 8011930:	f240 7184 	movw	r1, #1924	; 0x784
 8011934:	68f8      	ldr	r0, [r7, #12]
 8011936:	f002 fccb 	bl	80142d0 <VL53L1_WrWord>
 801193a:	4603      	mov	r3, r0
 801193c:	75fb      	strb	r3, [r7, #23]
			VL53L1_RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB,
			nvm_ctrl_pulse_width);

	LOG_FUNCTION_END(status);

	return status;
 801193e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011942:	4618      	mov	r0, r3
 8011944:	3718      	adds	r7, #24
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <VL53L1_nvm_read>:
VL53L1_Error VL53L1_nvm_read(
	VL53L1_DEV    Dev,
	uint8_t       start_address,
	uint8_t       count,
	uint8_t      *pdata)
{
 801194a:	b580      	push	{r7, lr}
 801194c:	b086      	sub	sp, #24
 801194e:	af00      	add	r7, sp, #0
 8011950:	60f8      	str	r0, [r7, #12]
 8011952:	607b      	str	r3, [r7, #4]
 8011954:	460b      	mov	r3, r1
 8011956:	72fb      	strb	r3, [r7, #11]
 8011958:	4613      	mov	r3, r2
 801195a:	72bb      	strb	r3, [r7, #10]


	VL53L1_Error status   = VL53L1_ERROR_NONE;
 801195c:	2300      	movs	r3, #0
 801195e:	75fb      	strb	r3, [r7, #23]
	uint8_t      nvm_addr = 0;
 8011960:	2300      	movs	r3, #0
 8011962:	75bb      	strb	r3, [r7, #22]
	trace_print(
		   VL53L1_TRACE_LEVEL_INFO,
		   "%-12s = 0x%02X (%3u)\n",
		   "count", count, count);

	for (nvm_addr = start_address;
 8011964:	7afb      	ldrb	r3, [r7, #11]
 8011966:	75bb      	strb	r3, [r7, #22]
 8011968:	e041      	b.n	80119ee <VL53L1_nvm_read+0xa4>
		nvm_addr < (start_address+count) ; nvm_addr++) {



		if (status == VL53L1_ERROR_NONE)
 801196a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d108      	bne.n	8011984 <VL53L1_nvm_read+0x3a>
			status = VL53L1_WrByte(
 8011972:	7dbb      	ldrb	r3, [r7, #22]
 8011974:	461a      	mov	r2, r3
 8011976:	f240 7194 	movw	r1, #1940	; 0x794
 801197a:	68f8      	ldr	r0, [r7, #12]
 801197c:	f002 fc7e 	bl	801427c <VL53L1_WrByte>
 8011980:	4603      	mov	r3, r0
 8011982:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__ADDR,
				nvm_addr);



		if (status == VL53L1_ERROR_NONE)
 8011984:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d107      	bne.n	801199c <VL53L1_nvm_read+0x52>
			status = VL53L1_WrByte(
 801198c:	2200      	movs	r2, #0
 801198e:	f240 7183 	movw	r1, #1923	; 0x783
 8011992:	68f8      	ldr	r0, [r7, #12]
 8011994:	f002 fc72 	bl	801427c <VL53L1_WrByte>
 8011998:	4603      	mov	r3, r0
 801199a:	75fb      	strb	r3, [r7, #23]
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x00);



		if (status == VL53L1_ERROR_NONE)
 801199c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d105      	bne.n	80119b0 <VL53L1_nvm_read+0x66>
			status = VL53L1_WaitUs(
 80119a4:	2105      	movs	r1, #5
 80119a6:	68f8      	ldr	r0, [r7, #12]
 80119a8:	f002 fd5c 	bl	8014464 <VL53L1_WaitUs>
 80119ac:	4603      	mov	r3, r0
 80119ae:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_NVM_READ_TRIGGER_DELAY_US);

		if (status == VL53L1_ERROR_NONE)
 80119b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d107      	bne.n	80119c8 <VL53L1_nvm_read+0x7e>
			status = VL53L1_WrByte(
 80119b8:	2201      	movs	r2, #1
 80119ba:	f240 7183 	movw	r1, #1923	; 0x783
 80119be:	68f8      	ldr	r0, [r7, #12]
 80119c0:	f002 fc5c 	bl	801427c <VL53L1_WrByte>
 80119c4:	4603      	mov	r3, r0
 80119c6:	75fb      	strb	r3, [r7, #23]
				Dev,
				VL53L1_RANGING_CORE__NVM_CTRL__READN,
				0x01);


		if (status == VL53L1_ERROR_NONE)
 80119c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d108      	bne.n	80119e2 <VL53L1_nvm_read+0x98>
			status = VL53L1_ReadMulti(
 80119d0:	2304      	movs	r3, #4
 80119d2:	687a      	ldr	r2, [r7, #4]
 80119d4:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	f002 fc19 	bl	8014210 <VL53L1_ReadMulti>
 80119de:	4603      	mov	r3, r0
 80119e0:	75fb      	strb	r3, [r7, #23]
			"NVM address : 0x%02X = 0x%02X%02X%02X%02X\n",
			nvm_addr, *pdata, *(pdata+1), *(pdata+2), *(pdata+3));



		pdata = pdata + 4;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	3304      	adds	r3, #4
 80119e6:	607b      	str	r3, [r7, #4]
		nvm_addr < (start_address+count) ; nvm_addr++) {
 80119e8:	7dbb      	ldrb	r3, [r7, #22]
 80119ea:	3301      	adds	r3, #1
 80119ec:	75bb      	strb	r3, [r7, #22]
 80119ee:	7dba      	ldrb	r2, [r7, #22]
 80119f0:	7af9      	ldrb	r1, [r7, #11]
 80119f2:	7abb      	ldrb	r3, [r7, #10]
 80119f4:	440b      	add	r3, r1
	for (nvm_addr = start_address;
 80119f6:	429a      	cmp	r2, r3
 80119f8:	dbb7      	blt.n	801196a <VL53L1_nvm_read+0x20>

	}

	LOG_FUNCTION_END(status);

	return status;
 80119fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3718      	adds	r7, #24
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}

08011a06 <VL53L1_nvm_disable>:


VL53L1_Error VL53L1_nvm_disable(
	VL53L1_DEV    Dev)
{
 8011a06:	b580      	push	{r7, lr}
 8011a08:	b084      	sub	sp, #16
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	6078      	str	r0, [r7, #4]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011a0e:	2300      	movs	r3, #0
 8011a10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8011a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d107      	bne.n	8011a2a <VL53L1_nvm_disable+0x24>
		status = VL53L1_WrByte(
 8011a1a:	2201      	movs	r2, #1
 8011a1c:	f240 7183 	movw	r1, #1923	; 0x783
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f002 fc2b 	bl	801427c <VL53L1_WrByte>
 8011a26:	4603      	mov	r3, r0
 8011a28:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__READN,
					0x01);



	if (status == VL53L1_ERROR_NONE)
 8011a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d107      	bne.n	8011a42 <VL53L1_nvm_disable+0x3c>
		status = VL53L1_WrByte(
 8011a32:	2200      	movs	r2, #0
 8011a34:	f240 7181 	movw	r1, #1921	; 0x781
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f002 fc1f 	bl	801427c <VL53L1_WrByte>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	73fb      	strb	r3, [r7, #15]
					VL53L1_RANGING_CORE__NVM_CTRL__PDN,
					0x00);



	if (status == VL53L1_ERROR_NONE)
 8011a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d104      	bne.n	8011a54 <VL53L1_nvm_disable+0x4e>
		status = VL53L1_disable_powerforce(Dev);
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f7f9 fac4 	bl	800afd8 <VL53L1_disable_powerforce>
 8011a50:	4603      	mov	r3, r0
 8011a52:	73fb      	strb	r3, [r7, #15]



	if (status == VL53L1_ERROR_NONE)
 8011a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d104      	bne.n	8011a66 <VL53L1_nvm_disable+0x60>
		status = VL53L1_enable_firmware(Dev);
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	f7f9 fa66 	bl	800af2e <VL53L1_enable_firmware>
 8011a62:	4603      	mov	r3, r0
 8011a64:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8011a66:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3710      	adds	r7, #16
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}

08011a72 <VL53L1_nvm_decode_optical_centre>:

VL53L1_Error VL53L1_nvm_decode_optical_centre(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_optical_centre_t    *pdata)
{
 8011a72:	b480      	push	{r7}
 8011a74:	b087      	sub	sp, #28
 8011a76:	af00      	add	r7, sp, #0
 8011a78:	4603      	mov	r3, r0
 8011a7a:	60b9      	str	r1, [r7, #8]
 8011a7c:	607a      	str	r2, [r7, #4]
 8011a7e:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011a80:	2300      	movs	r3, #0
 8011a82:	757b      	strb	r3, [r7, #21]

	uint16_t  tmp = 0;
 8011a84:	2300      	movs	r3, #0
 8011a86:	82fb      	strh	r3, [r7, #22]

	if (buf_size < VL53L1_NVM__FMT__OPTICAL_CENTRE_DATA_SIZE)
 8011a88:	89fb      	ldrh	r3, [r7, #14]
 8011a8a:	2b03      	cmp	r3, #3
 8011a8c:	d802      	bhi.n	8011a94 <VL53L1_nvm_decode_optical_centre+0x22>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011a8e:	f06f 0308 	mvn.w	r3, #8
 8011a92:	e018      	b.n	8011ac6 <VL53L1_nvm_decode_optical_centre+0x54>


	tmp  = 0x0100;
 8011a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a98:	82fb      	strh	r3, [r7, #22]
	tmp -= (uint16_t)*(pbuffer + 2);
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	3302      	adds	r3, #2
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	8afa      	ldrh	r2, [r7, #22]
 8011aa4:	1ad3      	subs	r3, r2, r3
 8011aa6:	82fb      	strh	r3, [r7, #22]
	if (tmp > 0x0FF)
 8011aa8:	8afb      	ldrh	r3, [r7, #22]
 8011aaa:	2bff      	cmp	r3, #255	; 0xff
 8011aac:	d901      	bls.n	8011ab2 <VL53L1_nvm_decode_optical_centre+0x40>
		tmp = 0;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	82fb      	strh	r3, [r7, #22]

	pdata->x_centre = (uint8_t)tmp;
 8011ab2:	8afb      	ldrh	r3, [r7, #22]
 8011ab4:	b2da      	uxtb	r2, r3
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	701a      	strb	r2, [r3, #0]
	pdata->y_centre = *(pbuffer + 3);
 8011aba:	68bb      	ldr	r3, [r7, #8]
 8011abc:	78da      	ldrb	r2, [r3, #3]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	705a      	strb	r2, [r3, #1]

	return status;
 8011ac2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	371c      	adds	r7, #28
 8011aca:	46bd      	mov	sp, r7
 8011acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad0:	4770      	bx	lr

08011ad2 <VL53L1_nvm_decode_cal_peak_rate_map>:

VL53L1_Error VL53L1_nvm_decode_cal_peak_rate_map(
	uint16_t                    buf_size,
	uint8_t                    *pbuffer,
	VL53L1_cal_peak_rate_map_t *pdata)
{
 8011ad2:	b590      	push	{r4, r7, lr}
 8011ad4:	b087      	sub	sp, #28
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	4603      	mov	r3, r0
 8011ada:	60b9      	str	r1, [r7, #8]
 8011adc:	607a      	str	r2, [r7, #4]
 8011ade:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	74bb      	strb	r3, [r7, #18]

	uint8_t   *ptmp = NULL;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	617b      	str	r3, [r7, #20]
	uint8_t       i = 0;
 8011ae8:	2300      	movs	r3, #0
 8011aea:	74fb      	strb	r3, [r7, #19]

	if (buf_size < VL53L1_NVM__FMT__CAL_PEAK_RATE_MAP_DATA_SIZE)
 8011aec:	89fb      	ldrh	r3, [r7, #14]
 8011aee:	2b37      	cmp	r3, #55	; 0x37
 8011af0:	d802      	bhi.n	8011af8 <VL53L1_nvm_decode_cal_peak_rate_map+0x26>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011af2:	f06f 0308 	mvn.w	r3, #8
 8011af6:	e03e      	b.n	8011b76 <VL53L1_nvm_decode_cal_peak_rate_map+0xa4>

	pdata->cal_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011af8:	68b9      	ldr	r1, [r7, #8]
 8011afa:	2002      	movs	r0, #2
 8011afc:	f7f9 f8fd 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011b00:	4603      	mov	r3, r0
 8011b02:	b21a      	sxth	r2, r3
	pdata->cal_distance_mm =
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	801a      	strh	r2, [r3, #0]

	pdata->cal_reflectance_pc =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8011b08:	68bb      	ldr	r3, [r7, #8]
 8011b0a:	3302      	adds	r3, #2
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	2002      	movs	r0, #2
 8011b10:	f7f9 f8f3 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011b14:	4603      	mov	r3, r0
 8011b16:	461a      	mov	r2, r3
	pdata->cal_reflectance_pc =
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	805a      	strh	r2, [r3, #2]
	pdata->cal_reflectance_pc =
		pdata->cal_reflectance_pc >> 6;
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	885b      	ldrh	r3, [r3, #2]
	pdata->cal_reflectance_pc =
 8011b20:	099b      	lsrs	r3, r3, #6
 8011b22:	b29a      	uxth	r2, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	805a      	strh	r2, [r3, #2]

	pdata->max_samples = VL53L1_NVM_PEAK_RATE_MAP_SAMPLES;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2219      	movs	r2, #25
 8011b2c:	809a      	strh	r2, [r3, #4]
	pdata->width       = VL53L1_NVM_PEAK_RATE_MAP_WIDTH;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2205      	movs	r2, #5
 8011b32:	80da      	strh	r2, [r3, #6]
	pdata->height      = VL53L1_NVM_PEAK_RATE_MAP_HEIGHT;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2205      	movs	r2, #5
 8011b38:	811a      	strh	r2, [r3, #8]

	ptmp = pbuffer + 4;
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	3304      	adds	r3, #4
 8011b3e:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8011b40:	2300      	movs	r3, #0
 8011b42:	74fb      	strb	r3, [r7, #19]
 8011b44:	e012      	b.n	8011b6c <VL53L1_nvm_decode_cal_peak_rate_map+0x9a>
		pdata->peak_rate_mcps[i] =
 8011b46:	7cfc      	ldrb	r4, [r7, #19]
			(uint16_t)VL53L1_i2c_decode_uint16_t(2, ptmp);
 8011b48:	6979      	ldr	r1, [r7, #20]
 8011b4a:	2002      	movs	r0, #2
 8011b4c:	f7f9 f8d5 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011b50:	4603      	mov	r3, r0
 8011b52:	4619      	mov	r1, r3
		pdata->peak_rate_mcps[i] =
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	1d23      	adds	r3, r4, #4
 8011b58:	005b      	lsls	r3, r3, #1
 8011b5a:	4413      	add	r3, r2
 8011b5c:	460a      	mov	r2, r1
 8011b5e:	805a      	strh	r2, [r3, #2]
		ptmp += 2;
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	3302      	adds	r3, #2
 8011b64:	617b      	str	r3, [r7, #20]
	for (i = 0 ; i < VL53L1_NVM_PEAK_RATE_MAP_SAMPLES ; i++) {
 8011b66:	7cfb      	ldrb	r3, [r7, #19]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	74fb      	strb	r3, [r7, #19]
 8011b6c:	7cfb      	ldrb	r3, [r7, #19]
 8011b6e:	2b18      	cmp	r3, #24
 8011b70:	d9e9      	bls.n	8011b46 <VL53L1_nvm_decode_cal_peak_rate_map+0x74>
	}

	return status;
 8011b72:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	371c      	adds	r7, #28
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd90      	pop	{r4, r7, pc}

08011b7e <VL53L1_nvm_decode_additional_offset_cal_data>:

VL53L1_Error VL53L1_nvm_decode_additional_offset_cal_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_additional_offset_cal_data_t *pdata)
{
 8011b7e:	b580      	push	{r7, lr}
 8011b80:	b086      	sub	sp, #24
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	4603      	mov	r3, r0
 8011b86:	60b9      	str	r1, [r7, #8]
 8011b88:	607a      	str	r2, [r7, #4]
 8011b8a:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE)
 8011b90:	89fb      	ldrh	r3, [r7, #14]
 8011b92:	2b07      	cmp	r3, #7
 8011b94:	d802      	bhi.n	8011b9c <VL53L1_nvm_decode_additional_offset_cal_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011b96:	f06f 0308 	mvn.w	r3, #8
 8011b9a:	e027      	b.n	8011bec <VL53L1_nvm_decode_additional_offset_cal_data+0x6e>

	pdata->result__mm_inner_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011b9c:	68b9      	ldr	r1, [r7, #8]
 8011b9e:	2002      	movs	r0, #2
 8011ba0:	f7f9 f8ab 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads =
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	801a      	strh	r2, [r3, #0]

	pdata->result__mm_outer_actual_effective_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 2);
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	3302      	adds	r3, #2
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	2002      	movs	r0, #2
 8011bb4:	f7f9 f8a1 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads =
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	805a      	strh	r2, [r3, #2]

	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	3304      	adds	r3, #4
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	2002      	movs	r0, #2
 8011bc8:	f7f9 f897 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	461a      	mov	r2, r3
	pdata->result__mm_inner_peak_signal_count_rtn_mcps =
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	809a      	strh	r2, [r3, #4]

	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8011bd4:	68bb      	ldr	r3, [r7, #8]
 8011bd6:	3306      	adds	r3, #6
 8011bd8:	4619      	mov	r1, r3
 8011bda:	2002      	movs	r0, #2
 8011bdc:	f7f9 f88d 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011be0:	4603      	mov	r3, r0
 8011be2:	461a      	mov	r2, r3
	pdata->result__mm_outer_peak_signal_count_rtn_mcps =
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	80da      	strh	r2, [r3, #6]

	return status;
 8011be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3718      	adds	r7, #24
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <VL53L1_nvm_decode_fmt_range_results_data>:

VL53L1_Error VL53L1_nvm_decode_fmt_range_results_data(
	uint16_t                             buf_size,
	uint8_t                             *pbuffer,
	VL53L1_decoded_nvm_fmt_range_data_t *pdata)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
 8011c00:	81fb      	strh	r3, [r7, #14]

	VL53L1_Error status   = VL53L1_ERROR_NONE;
 8011c02:	2300      	movs	r3, #0
 8011c04:	75fb      	strb	r3, [r7, #23]

	if (buf_size < VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES)
 8011c06:	89fb      	ldrh	r3, [r7, #14]
 8011c08:	2b0f      	cmp	r3, #15
 8011c0a:	d802      	bhi.n	8011c12 <VL53L1_nvm_decode_fmt_range_results_data+0x1e>
		return VL53L1_ERROR_BUFFER_TOO_SMALL;
 8011c0c:	f06f 0308 	mvn.w	r3, #8
 8011c10:	e04d      	b.n	8011cae <VL53L1_nvm_decode_fmt_range_results_data+0xba>

	pdata->result__actual_effective_rtn_spads =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer);
 8011c12:	68b9      	ldr	r1, [r7, #8]
 8011c14:	2002      	movs	r0, #2
 8011c16:	f7f9 f870 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	461a      	mov	r2, r3
	pdata->result__actual_effective_rtn_spads =
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	801a      	strh	r2, [r3, #0]

	pdata->ref_spad_array__num_requested_ref_spads =
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	789a      	ldrb	r2, [r3, #2]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	709a      	strb	r2, [r3, #2]
		*(pbuffer+2);

	pdata->ref_spad_array__ref_location =
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	78da      	ldrb	r2, [r3, #3]
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	70da      	strb	r2, [r3, #3]
		*(pbuffer+3);

	pdata->result__peak_signal_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 4);
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	3304      	adds	r3, #4
 8011c36:	4619      	mov	r1, r3
 8011c38:	2002      	movs	r0, #2
 8011c3a:	f7f9 f85e 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_rtn_mcps =
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	809a      	strh	r2, [r3, #4]

	pdata->result__ambient_count_rate_rtn_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 6);
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	3306      	adds	r3, #6
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	2002      	movs	r0, #2
 8011c4e:	f7f9 f854 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011c52:	4603      	mov	r3, r0
 8011c54:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_rtn_mcps =
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	80da      	strh	r2, [r3, #6]

	pdata->result__peak_signal_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 8);
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	3308      	adds	r3, #8
 8011c5e:	4619      	mov	r1, r3
 8011c60:	2002      	movs	r0, #2
 8011c62:	f7f9 f84a 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011c66:	4603      	mov	r3, r0
 8011c68:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_ref_mcps =
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	811a      	strh	r2, [r3, #8]

	pdata->result__ambient_count_rate_ref_mcps =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 10);
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	330a      	adds	r3, #10
 8011c72:	4619      	mov	r1, r3
 8011c74:	2002      	movs	r0, #2
 8011c76:	f7f9 f840 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_ref_mcps =
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	815a      	strh	r2, [r3, #10]

	pdata->measured_distance_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 12);
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	330c      	adds	r3, #12
 8011c86:	4619      	mov	r1, r3
 8011c88:	2002      	movs	r0, #2
 8011c8a:	f7f9 f836 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	461a      	mov	r2, r3
	pdata->measured_distance_mm =
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	819a      	strh	r2, [r3, #12]

	pdata->measured_distance_stdev_mm =
		(uint16_t)VL53L1_i2c_decode_uint16_t(2, pbuffer + 14);
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	330e      	adds	r3, #14
 8011c9a:	4619      	mov	r1, r3
 8011c9c:	2002      	movs	r0, #2
 8011c9e:	f7f9 f82c 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	461a      	mov	r2, r3
	pdata->measured_distance_stdev_mm =
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	81da      	strh	r2, [r3, #14]

	return status;
 8011caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3718      	adds	r7, #24
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}

08011cb6 <VL53L1_read_nvm_raw_data>:
VL53L1_Error VL53L1_read_nvm_raw_data(
	VL53L1_DEV     Dev,
	uint8_t        start_address,
	uint8_t        count,
	uint8_t       *pnvm_raw_data)
{
 8011cb6:	b580      	push	{r7, lr}
 8011cb8:	b086      	sub	sp, #24
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	60f8      	str	r0, [r7, #12]
 8011cbe:	607b      	str	r3, [r7, #4]
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	72fb      	strb	r3, [r7, #11]
 8011cc4:	4613      	mov	r3, r2
 8011cc6:	72bb      	strb	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");



	if (status == VL53L1_ERROR_NONE)
 8011ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d106      	bne.n	8011ce2 <VL53L1_read_nvm_raw_data+0x2c>
		status = VL53L1_nvm_enable(
 8011cd4:	2232      	movs	r2, #50	; 0x32
 8011cd6:	2104      	movs	r1, #4
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f7ff fdd0 	bl	801187e <VL53L1_nvm_enable>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	75fb      	strb	r3, [r7, #23]
					0x0004,
					VL53L1_NVM_POWER_UP_DELAY_US);



	if (status == VL53L1_ERROR_NONE)
 8011ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d107      	bne.n	8011cfa <VL53L1_read_nvm_raw_data+0x44>
		status = VL53L1_nvm_read(
 8011cea:	7aba      	ldrb	r2, [r7, #10]
 8011cec:	7af9      	ldrb	r1, [r7, #11]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	68f8      	ldr	r0, [r7, #12]
 8011cf2:	f7ff fe2a 	bl	801194a <VL53L1_nvm_read>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	75fb      	strb	r3, [r7, #23]
			count,
			pnvm_raw_data);



	if (status == VL53L1_ERROR_NONE)
 8011cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d104      	bne.n	8011d0c <VL53L1_read_nvm_raw_data+0x56>
		status = VL53L1_nvm_disable(Dev);
 8011d02:	68f8      	ldr	r0, [r7, #12]
 8011d04:	f7ff fe7f 	bl	8011a06 <VL53L1_nvm_disable>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(status);

	return status;
 8011d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3718      	adds	r7, #24
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <VL53L1_read_nvm_optical_centre>:


VL53L1_Error VL53L1_read_nvm_optical_centre(
	VL53L1_DEV                        Dev,
	VL53L1_optical_centre_t          *pcentre)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011d22:	2300      	movs	r3, #0
 8011d24:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8011d26:	f107 0308 	add.w	r3, r7, #8
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	212e      	movs	r1, #46	; 0x2e
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f7ff ffc1 	bl	8011cb6 <VL53L1_read_nvm_raw_data>
 8011d34:	4603      	mov	r3, r0
 8011d36:	73fb      	strb	r3, [r7, #15]
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8011d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d108      	bne.n	8011d52 <VL53L1_read_nvm_optical_centre+0x3a>
		status =
			VL53L1_nvm_decode_optical_centre(
 8011d40:	f107 0308 	add.w	r3, r7, #8
 8011d44:	683a      	ldr	r2, [r7, #0]
 8011d46:	4619      	mov	r1, r3
 8011d48:	2004      	movs	r0, #4
 8011d4a:	f7ff fe92 	bl	8011a72 <VL53L1_nvm_decode_optical_centre>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	73fb      	strb	r3, [r7, #15]
				nvm_data,
				pcentre);

	LOG_FUNCTION_END(status);

	return status;
 8011d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3710      	adds	r7, #16
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}

08011d5e <VL53L1_read_nvm_cal_peak_rate_map>:


VL53L1_Error VL53L1_read_nvm_cal_peak_rate_map(
	VL53L1_DEV                           Dev,
	VL53L1_cal_peak_rate_map_t          *pcal_data)
{
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b092      	sub	sp, #72	; 0x48
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
 8011d66:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8011d6e:	f107 030c 	add.w	r3, r7, #12
 8011d72:	220e      	movs	r2, #14
 8011d74:	2157      	movs	r1, #87	; 0x57
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f7ff ff9d 	bl	8011cb6 <VL53L1_read_nvm_raw_data>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					>> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8011d82:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d109      	bne.n	8011d9e <VL53L1_read_nvm_cal_peak_rate_map+0x40>
		status =
			VL53L1_nvm_decode_cal_peak_rate_map(
 8011d8a:	f107 030c 	add.w	r3, r7, #12
 8011d8e:	683a      	ldr	r2, [r7, #0]
 8011d90:	4619      	mov	r1, r3
 8011d92:	2038      	movs	r0, #56	; 0x38
 8011d94:	f7ff fe9d 	bl	8011ad2 <VL53L1_nvm_decode_cal_peak_rate_map>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				nvm_data,
				pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8011d9e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3748      	adds	r7, #72	; 0x48
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}

08011daa <VL53L1_read_nvm_additional_offset_cal_data>:


VL53L1_Error VL53L1_read_nvm_additional_offset_cal_data(
	VL53L1_DEV                           Dev,
	VL53L1_additional_offset_cal_data_t *pcal_data)
{
 8011daa:	b580      	push	{r7, lr}
 8011dac:	b086      	sub	sp, #24
 8011dae:	af00      	add	r7, sp, #0
 8011db0:	6078      	str	r0, [r7, #4]
 8011db2:	6039      	str	r1, [r7, #0]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011db4:	2300      	movs	r3, #0
 8011db6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");



	status =
		VL53L1_read_nvm_raw_data(
 8011db8:	f107 030c 	add.w	r3, r7, #12
 8011dbc:	2202      	movs	r2, #2
 8011dbe:	2165      	movs	r1, #101	; 0x65
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f7ff ff78 	bl	8011cb6 <VL53L1_read_nvm_raw_data>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	75fb      	strb	r3, [r7, #23]
			VL53L1_NVM__FMT__ADDITIONAL_OFFSET_CAL_DATA_SIZE >> 2),
			nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8011dca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d108      	bne.n	8011de4 <VL53L1_read_nvm_additional_offset_cal_data+0x3a>
		status = VL53L1_nvm_decode_additional_offset_cal_data(
 8011dd2:	f107 030c 	add.w	r3, r7, #12
 8011dd6:	683a      	ldr	r2, [r7, #0]
 8011dd8:	4619      	mov	r1, r3
 8011dda:	2008      	movs	r0, #8
 8011ddc:	f7ff fecf 	bl	8011b7e <VL53L1_nvm_decode_additional_offset_cal_data>
 8011de0:	4603      	mov	r3, r0
 8011de2:	75fb      	strb	r3, [r7, #23]
			nvm_data,
			pcal_data);

	LOG_FUNCTION_END(status);

	return status;
 8011de4:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8011de8:	4618      	mov	r0, r3
 8011dea:	3718      	adds	r7, #24
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}

08011df0 <VL53L1_read_nvm_fmt_range_results_data>:

VL53L1_Error VL53L1_read_nvm_fmt_range_results_data(
	VL53L1_DEV                           Dev,
	uint16_t                             range_results_select,
	VL53L1_decoded_nvm_fmt_range_data_t *prange_data)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b08a      	sub	sp, #40	; 0x28
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	60f8      	str	r0, [r7, #12]
 8011df8:	460b      	mov	r3, r1
 8011dfa:	607a      	str	r2, [r7, #4]
 8011dfc:	817b      	strh	r3, [r7, #10]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	LOG_FUNCTION_START("");



	status = VL53L1_read_nvm_raw_data(
 8011e04:	897b      	ldrh	r3, [r7, #10]
 8011e06:	089b      	lsrs	r3, r3, #2
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	b2d9      	uxtb	r1, r3
 8011e0c:	f107 0314 	add.w	r3, r7, #20
 8011e10:	2204      	movs	r2, #4
 8011e12:	68f8      	ldr	r0, [r7, #12]
 8011e14:	f7ff ff4f 	bl	8011cb6 <VL53L1_read_nvm_raw_data>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		(uint8_t)(VL53L1_NVM__FMT__RANGE_RESULTS__SIZE_BYTES >> 2),
		nvm_data);



	if (status == VL53L1_ERROR_NONE)
 8011e1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d109      	bne.n	8011e3a <VL53L1_read_nvm_fmt_range_results_data+0x4a>
		status =
			VL53L1_nvm_decode_fmt_range_results_data(
 8011e26:	f107 0314 	add.w	r3, r7, #20
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	2010      	movs	r0, #16
 8011e30:	f7ff fee0 	bl	8011bf4 <VL53L1_nvm_decode_fmt_range_results_data>
 8011e34:	4603      	mov	r3, r0
 8011e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				nvm_data,
				prange_data);

	LOG_FUNCTION_END(status);

	return status;
 8011e3a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27

}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3728      	adds	r7, #40	; 0x28
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8011e46:	b580      	push	{r7, lr}
 8011e48:	b086      	sub	sp, #24
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	60f8      	str	r0, [r7, #12]
 8011e4e:	460b      	mov	r3, r1
 8011e50:	607a      	str	r2, [r7, #4]
 8011e52:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011e54:	2300      	movs	r3, #0
 8011e56:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8011e58:	897b      	ldrh	r3, [r7, #10]
 8011e5a:	2b0a      	cmp	r3, #10
 8011e5c:	d802      	bhi.n	8011e64 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011e5e:	f06f 0309 	mvn.w	r3, #9
 8011e62:	e047      	b.n	8011ef4 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e6c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8011e7a:	f002 020f 	and.w	r2, r2, #15
 8011e7e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8011e80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8011e8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011e8e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8011e90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8011e9a:	f002 0203 	and.w	r2, r2, #3
 8011e9e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8011ea0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8011eaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011eae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8011eb0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	88d8      	ldrh	r0, [r3, #6]
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	3305      	adds	r3, #5
 8011eba:	461a      	mov	r2, r3
 8011ebc:	2102      	movs	r1, #2
 8011ebe:	f7f8 fef1 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8011eca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8011ed0:	68fa      	ldr	r2, [r7, #12]
 8011ed2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8011ed4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8011ede:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8011ee2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8011ee4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8011eea:	68fa      	ldr	r2, [r7, #12]
 8011eec:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8011eee:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8011ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3718      	adds	r7, #24
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b086      	sub	sp, #24
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	4603      	mov	r3, r0
 8011f04:	60b9      	str	r1, [r7, #8]
 8011f06:	607a      	str	r2, [r7, #4]
 8011f08:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES)
 8011f0e:	89fb      	ldrh	r3, [r7, #14]
 8011f10:	2b0a      	cmp	r3, #10
 8011f12:	d802      	bhi.n	8011f1a <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8011f14:	f06f 0309 	mvn.w	r3, #9
 8011f18:	e046      	b.n	8011fa8 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f22:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	3301      	adds	r3, #1
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	f003 030f 	and.w	r3, r3, #15
 8011f32:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8011f38:	68bb      	ldr	r3, [r7, #8]
 8011f3a:	3302      	adds	r3, #2
 8011f3c:	781b      	ldrb	r3, [r3, #0]
 8011f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f42:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	3303      	adds	r3, #3
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	f003 0303 	and.w	r3, r3, #3
 8011f52:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8011f58:	68bb      	ldr	r3, [r7, #8]
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f62:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	3305      	adds	r3, #5
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	2002      	movs	r0, #2
 8011f70:	f7f8 fec3 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8011f74:	4603      	mov	r3, r0
 8011f76:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	79da      	ldrb	r2, [r3, #7]
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	7a1a      	ldrb	r2, [r3, #8]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	3309      	adds	r3, #9
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f96:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8011f9c:	68bb      	ldr	r3, [r7, #8]
 8011f9e:	7a9a      	ldrb	r2, [r3, #10]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8011fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3718      	adds	r7, #24
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b086      	sub	sp, #24
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
 8011fb8:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8011fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d108      	bne.n	8011fd8 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8011fc6:	f107 020c 	add.w	r2, r7, #12
 8011fca:	230b      	movs	r3, #11
 8011fcc:	2101      	movs	r1, #1
 8011fce:	6878      	ldr	r0, [r7, #4]
 8011fd0:	f002 f91e 	bl	8014210 <VL53L1_ReadMulti>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8011fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d108      	bne.n	8011ff2 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8011fe0:	f107 030c 	add.w	r3, r7, #12
 8011fe4:	683a      	ldr	r2, [r7, #0]
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	200b      	movs	r0, #11
 8011fea:	f7ff ff87 	bl	8011efc <VL53L1_i2c_decode_static_nvm_managed>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8011ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3718      	adds	r7, #24
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}

08011ffe <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8011ffe:	b580      	push	{r7, lr}
 8012000:	b086      	sub	sp, #24
 8012002:	af00      	add	r7, sp, #0
 8012004:	60f8      	str	r0, [r7, #12]
 8012006:	460b      	mov	r3, r1
 8012008:	607a      	str	r2, [r7, #4]
 801200a:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801200c:	2300      	movs	r3, #0
 801200e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8012010:	897b      	ldrh	r3, [r7, #10]
 8012012:	2b16      	cmp	r3, #22
 8012014:	d802      	bhi.n	801201c <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012016:	f06f 0309 	mvn.w	r3, #9
 801201a:	e076      	b.n	801210a <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8012028:	68fa      	ldr	r2, [r7, #12]
 801202a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801202c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8012032:	68fa      	ldr	r2, [r7, #12]
 8012034:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012036:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 801203c:	68fa      	ldr	r2, [r7, #12]
 801203e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8012040:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8012046:	68fa      	ldr	r2, [r7, #12]
 8012048:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 801204a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8012054:	f002 020f 	and.w	r2, r2, #15
 8012058:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801205a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8012060:	68fa      	ldr	r2, [r7, #12]
 8012062:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8012064:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 801206e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012072:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012074:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 801207e:	f002 0203 	and.w	r2, r2, #3
 8012082:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012084:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	8958      	ldrh	r0, [r3, #10]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	3309      	adds	r3, #9
 801208e:	461a      	mov	r2, r3
 8012090:	2102      	movs	r1, #2
 8012092:	f7f8 fe07 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	330b      	adds	r3, #11
 80120a0:	461a      	mov	r2, r3
 80120a2:	2102      	movs	r1, #2
 80120a4:	f7f8 fe49 	bl	800ad3a <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	330d      	adds	r3, #13
 80120b2:	461a      	mov	r2, r3
 80120b4:	2102      	movs	r1, #2
 80120b6:	f7f8 fe40 	bl	800ad3a <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	8a18      	ldrh	r0, [r3, #16]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	330f      	adds	r3, #15
 80120c2:	461a      	mov	r2, r3
 80120c4:	2102      	movs	r1, #2
 80120c6:	f7f8 fded 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 80120d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80120d4:	b218      	sxth	r0, r3
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	3311      	adds	r3, #17
 80120da:	461a      	mov	r2, r3
 80120dc:	2102      	movs	r1, #2
 80120de:	f7f8 fe2c 	bl	800ad3a <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	3313      	adds	r3, #19
 80120ec:	461a      	mov	r2, r3
 80120ee:	2102      	movs	r1, #2
 80120f0:	f7f8 fe23 	bl	800ad3a <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	3315      	adds	r3, #21
 80120fe:	461a      	mov	r2, r3
 8012100:	2102      	movs	r1, #2
 8012102:	f7f8 fe1a 	bl	800ad3a <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8012106:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801210a:	4618      	mov	r0, r3
 801210c:	3718      	adds	r7, #24
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8012112:	b580      	push	{r7, lr}
 8012114:	b086      	sub	sp, #24
 8012116:	af00      	add	r7, sp, #0
 8012118:	4603      	mov	r3, r0
 801211a:	60b9      	str	r1, [r7, #8]
 801211c:	607a      	str	r2, [r7, #4]
 801211e:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012120:	2300      	movs	r3, #0
 8012122:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES)
 8012124:	89fb      	ldrh	r3, [r7, #14]
 8012126:	2b16      	cmp	r3, #22
 8012128:	d802      	bhi.n	8012130 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801212a:	f06f 0309 	mvn.w	r3, #9
 801212e:	e079      	b.n	8012224 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	785a      	ldrb	r2, [r3, #1]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8012140:	68bb      	ldr	r3, [r7, #8]
 8012142:	789a      	ldrb	r2, [r3, #2]
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8012148:	68bb      	ldr	r3, [r7, #8]
 801214a:	78da      	ldrb	r2, [r3, #3]
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	791a      	ldrb	r2, [r3, #4]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	3305      	adds	r3, #5
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	f003 030f 	and.w	r3, r3, #15
 8012162:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8012168:	68bb      	ldr	r3, [r7, #8]
 801216a:	799a      	ldrb	r2, [r3, #6]
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	3307      	adds	r3, #7
 8012174:	781b      	ldrb	r3, [r3, #0]
 8012176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801217a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	3308      	adds	r3, #8
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	f003 0303 	and.w	r3, r3, #3
 801218a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	3309      	adds	r3, #9
 8012194:	4619      	mov	r1, r3
 8012196:	2002      	movs	r0, #2
 8012198:	f7f8 fdaf 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 801219c:	4603      	mov	r3, r0
 801219e:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	330b      	adds	r3, #11
 80121a8:	4619      	mov	r1, r3
 80121aa:	2002      	movs	r0, #2
 80121ac:	f7f8 fdf1 	bl	800ad92 <VL53L1_i2c_decode_int16_t>
 80121b0:	4603      	mov	r3, r0
 80121b2:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	330d      	adds	r3, #13
 80121bc:	4619      	mov	r1, r3
 80121be:	2002      	movs	r0, #2
 80121c0:	f7f8 fde7 	bl	800ad92 <VL53L1_i2c_decode_int16_t>
 80121c4:	4603      	mov	r3, r0
 80121c6:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 80121cc:	68bb      	ldr	r3, [r7, #8]
 80121ce:	330f      	adds	r3, #15
 80121d0:	4619      	mov	r1, r3
 80121d2:	2002      	movs	r0, #2
 80121d4:	f7f8 fd91 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 80121d8:	4603      	mov	r3, r0
 80121da:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	3311      	adds	r3, #17
 80121e4:	4619      	mov	r1, r3
 80121e6:	2002      	movs	r0, #2
 80121e8:	f7f8 fdd3 	bl	800ad92 <VL53L1_i2c_decode_int16_t>
 80121ec:	4603      	mov	r3, r0
 80121ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80121f2:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	3313      	adds	r3, #19
 80121fc:	4619      	mov	r1, r3
 80121fe:	2002      	movs	r0, #2
 8012200:	f7f8 fdc7 	bl	800ad92 <VL53L1_i2c_decode_int16_t>
 8012204:	4603      	mov	r3, r0
 8012206:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	3315      	adds	r3, #21
 8012210:	4619      	mov	r1, r3
 8012212:	2002      	movs	r0, #2
 8012214:	f7f8 fdbd 	bl	800ad92 <VL53L1_i2c_decode_int16_t>
 8012218:	4603      	mov	r3, r0
 801221a:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8012220:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012224:	4618      	mov	r0, r3
 8012226:	3718      	adds	r7, #24
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b088      	sub	sp, #32
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012236:	2300      	movs	r3, #0
 8012238:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801223a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d108      	bne.n	8012254 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8012242:	f107 0208 	add.w	r2, r7, #8
 8012246:	2317      	movs	r3, #23
 8012248:	210d      	movs	r1, #13
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f001 ffe0 	bl	8014210 <VL53L1_ReadMulti>
 8012250:	4603      	mov	r3, r0
 8012252:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8012254:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d108      	bne.n	801226e <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 801225c:	f107 0308 	add.w	r3, r7, #8
 8012260:	683a      	ldr	r2, [r7, #0]
 8012262:	4619      	mov	r1, r3
 8012264:	2017      	movs	r0, #23
 8012266:	f7ff ff54 	bl	8012112 <VL53L1_i2c_decode_customer_nvm_managed>
 801226a:	4603      	mov	r3, r0
 801226c:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801226e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012272:	4618      	mov	r0, r3
 8012274:	3720      	adds	r7, #32
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}

0801227a <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801227a:	b580      	push	{r7, lr}
 801227c:	b086      	sub	sp, #24
 801227e:	af00      	add	r7, sp, #0
 8012280:	60f8      	str	r0, [r7, #12]
 8012282:	460b      	mov	r3, r1
 8012284:	607a      	str	r2, [r7, #4]
 8012286:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012288:	2300      	movs	r3, #0
 801228a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES)
 801228c:	897b      	ldrh	r3, [r7, #10]
 801228e:	2b1f      	cmp	r3, #31
 8012290:	d802      	bhi.n	8012298 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012292:	f06f 0309 	mvn.w	r3, #9
 8012296:	e0cf      	b.n	8012438 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	881b      	ldrh	r3, [r3, #0]
 801229c:	687a      	ldr	r2, [r7, #4]
 801229e:	2102      	movs	r1, #2
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7f8 fcff 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 80122ae:	f002 0201 	and.w	r2, r2, #1
 80122b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80122b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 80122be:	f002 020f 	and.w	r2, r2, #15
 80122c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80122c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 80122ce:	f002 020f 	and.w	r2, r2, #15
 80122d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80122d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 80122de:	f002 021f 	and.w	r2, r2, #31
 80122e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80122e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 80122ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80122f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80122f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 80122fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012302:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8012304:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 801230e:	f002 0201 	and.w	r2, r2, #1
 8012312:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8012314:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 801231a:	68fa      	ldr	r2, [r7, #12]
 801231c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 801231e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8012328:	f002 0201 	and.w	r2, r2, #1
 801232c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 801232e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8012338:	f002 0203 	and.w	r2, r2, #3
 801233c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801233e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8012348:	f002 021f 	and.w	r2, r2, #31
 801234c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801234e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8012358:	f002 0203 	and.w	r2, r2, #3
 801235c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801235e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8012368:	f002 0203 	and.w	r2, r2, #3
 801236c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 801236e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8012378:	f002 0207 	and.w	r2, r2, #7
 801237c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 801237e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8012388:	f002 021f 	and.w	r2, r2, #31
 801238c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 801238e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8012398:	f002 0201 	and.w	r2, r2, #1
 801239c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801239e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 80123a4:	68fa      	ldr	r2, [r7, #12]
 80123a6:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80123a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 80123ae:	68fa      	ldr	r2, [r7, #12]
 80123b0:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80123b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 80123b8:	68fa      	ldr	r2, [r7, #12]
 80123ba:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80123bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 80123c2:	68fa      	ldr	r2, [r7, #12]
 80123c4:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80123c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 80123cc:	68fa      	ldr	r2, [r7, #12]
 80123ce:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 80123d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 80123d6:	68fa      	ldr	r2, [r7, #12]
 80123d8:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 80123da:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	8b18      	ldrh	r0, [r3, #24]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	3318      	adds	r3, #24
 80123e4:	461a      	mov	r2, r3
 80123e6:	2102      	movs	r1, #2
 80123e8:	f7f8 fc5c 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80123f0:	68fa      	ldr	r2, [r7, #12]
 80123f2:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80123f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80123fa:	68fa      	ldr	r2, [r7, #12]
 80123fc:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80123fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8012408:	f002 020f 	and.w	r2, r2, #15
 801240c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 801240e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8012414:	68fa      	ldr	r2, [r7, #12]
 8012416:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8012418:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8012422:	f002 020f 	and.w	r2, r2, #15
 8012426:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8012428:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 801242e:	68fa      	ldr	r2, [r7, #12]
 8012430:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8012432:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012434:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012438:	4618      	mov	r0, r3
 801243a:	3718      	adds	r7, #24
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b086      	sub	sp, #24
 8012444:	af00      	add	r7, sp, #0
 8012446:	60f8      	str	r0, [r7, #12]
 8012448:	460b      	mov	r3, r1
 801244a:	607a      	str	r2, [r7, #4]
 801244c:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801244e:	2300      	movs	r3, #0
 8012450:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES)
 8012452:	897b      	ldrh	r3, [r7, #10]
 8012454:	2b15      	cmp	r3, #21
 8012456:	d802      	bhi.n	801245e <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012458:	f06f 0309 	mvn.w	r3, #9
 801245c:	e070      	b.n	8012540 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 801246a:	68fa      	ldr	r2, [r7, #12]
 801246c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801246e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8012474:	68fa      	ldr	r2, [r7, #12]
 8012476:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8012478:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8012482:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012486:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8012488:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 801248e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012492:	b298      	uxth	r0, r3
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	3304      	adds	r3, #4
 8012498:	461a      	mov	r2, r3
 801249a:	2102      	movs	r1, #2
 801249c:	f7f8 fc02 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 80124a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80124ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80124ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 80124b4:	68fa      	ldr	r2, [r7, #12]
 80124b6:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 80124b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 80124be:	68fa      	ldr	r2, [r7, #12]
 80124c0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80124c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 80124cc:	f002 0201 	and.w	r2, r2, #1
 80124d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80124d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 80124dc:	f002 0207 	and.w	r2, r2, #7
 80124e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80124e2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	8998      	ldrh	r0, [r3, #12]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	330c      	adds	r3, #12
 80124ec:	461a      	mov	r2, r3
 80124ee:	2102      	movs	r1, #2
 80124f0:	f7f8 fbd8 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	89d8      	ldrh	r0, [r3, #14]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	330e      	adds	r3, #14
 80124fc:	461a      	mov	r2, r3
 80124fe:	2102      	movs	r1, #2
 8012500:	f7f8 fbd0 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	8a18      	ldrh	r0, [r3, #16]
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	3310      	adds	r3, #16
 801250c:	461a      	mov	r2, r3
 801250e:	2102      	movs	r1, #2
 8012510:	f7f8 fbc8 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8012518:	68fa      	ldr	r2, [r7, #12]
 801251a:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 801251c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8012522:	68fa      	ldr	r2, [r7, #12]
 8012524:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8012526:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 801252c:	68fa      	ldr	r2, [r7, #12]
 801252e:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8012530:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8012536:	68fa      	ldr	r2, [r7, #12]
 8012538:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 801253a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801253c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012540:	4618      	mov	r0, r3
 8012542:	3718      	adds	r7, #24
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b086      	sub	sp, #24
 801254c:	af00      	add	r7, sp, #0
 801254e:	60f8      	str	r0, [r7, #12]
 8012550:	460b      	mov	r3, r1
 8012552:	607a      	str	r2, [r7, #4]
 8012554:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012556:	2300      	movs	r3, #0
 8012558:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES)
 801255a:	897b      	ldrh	r3, [r7, #10]
 801255c:	2b16      	cmp	r3, #22
 801255e:	d802      	bhi.n	8012566 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012560:	f06f 0309 	mvn.w	r3, #9
 8012564:	e06e      	b.n	8012644 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	f003 030f 	and.w	r3, r3, #15
 801256e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8012578:	68fa      	ldr	r2, [r7, #12]
 801257a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801257c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8012586:	f002 020f 	and.w	r2, r2, #15
 801258a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801258c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8012592:	68fa      	ldr	r2, [r7, #12]
 8012594:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8012596:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80125a0:	f002 020f 	and.w	r2, r2, #15
 80125a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80125a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 80125ac:	68fa      	ldr	r2, [r7, #12]
 80125ae:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 80125b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 80125ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80125be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80125c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80125ca:	f002 020f 	and.w	r2, r2, #15
 80125ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80125d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 80125d6:	68fa      	ldr	r2, [r7, #12]
 80125d8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80125da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 80125e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80125e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80125ea:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	8958      	ldrh	r0, [r3, #10]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	330a      	adds	r3, #10
 80125f4:	461a      	mov	r2, r3
 80125f6:	2102      	movs	r1, #2
 80125f8:	f7f8 fb54 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	8998      	ldrh	r0, [r3, #12]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	330c      	adds	r3, #12
 8012604:	461a      	mov	r2, r3
 8012606:	2102      	movs	r1, #2
 8012608:	f7f8 fb4c 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8012610:	68fa      	ldr	r2, [r7, #12]
 8012612:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8012614:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 801261a:	68fa      	ldr	r2, [r7, #12]
 801261c:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 801261e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	6918      	ldr	r0, [r3, #16]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	3312      	adds	r3, #18
 8012628:	461a      	mov	r2, r3
 801262a:	2104      	movs	r1, #4
 801262c:	f7f8 fbda 	bl	800ade4 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8012638:	f002 0201 	and.w	r2, r2, #1
 801263c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 801263e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8012640:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012644:	4618      	mov	r0, r3
 8012646:	3718      	adds	r7, #24
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b086      	sub	sp, #24
 8012650:	af00      	add	r7, sp, #0
 8012652:	60f8      	str	r0, [r7, #12]
 8012654:	460b      	mov	r3, r1
 8012656:	607a      	str	r2, [r7, #4]
 8012658:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801265a:	2300      	movs	r3, #0
 801265c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES)
 801265e:	897b      	ldrh	r3, [r7, #10]
 8012660:	2b11      	cmp	r3, #17
 8012662:	d802      	bhi.n	801266a <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012664:	f06f 0309 	mvn.w	r3, #9
 8012668:	e071      	b.n	801274e <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	f003 0303 	and.w	r3, r3, #3
 8012672:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	8858      	ldrh	r0, [r3, #2]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	3301      	adds	r3, #1
 8012680:	461a      	mov	r2, r3
 8012682:	2102      	movs	r1, #2
 8012684:	f7f8 fb0e 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	8898      	ldrh	r0, [r3, #4]
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	3303      	adds	r3, #3
 8012690:	461a      	mov	r2, r3
 8012692:	2102      	movs	r1, #2
 8012694:	f7f8 fb06 	bl	800aca4 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80126a0:	f002 0201 	and.w	r2, r2, #1
 80126a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80126a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 80126b0:	f002 0207 	and.w	r2, r2, #7
 80126b4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80126b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 80126bc:	68fa      	ldr	r2, [r7, #12]
 80126be:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80126c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 80126c6:	68fa      	ldr	r2, [r7, #12]
 80126c8:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80126ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80126d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80126d8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80126da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80126e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80126e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80126ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80126f4:	f002 0203 	and.w	r2, r2, #3
 80126f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80126fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8012704:	f002 0203 	and.w	r2, r2, #3
 8012708:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801270a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8012714:	f002 020f 	and.w	r2, r2, #15
 8012718:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801271a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8012720:	68fa      	ldr	r2, [r7, #12]
 8012722:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8012724:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 801272a:	68fa      	ldr	r2, [r7, #12]
 801272c:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 801272e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8012734:	68fa      	ldr	r2, [r7, #12]
 8012736:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8012738:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8012742:	f002 0203 	and.w	r2, r2, #3
 8012746:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8012748:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801274a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801274e:	4618      	mov	r0, r3
 8012750:	3718      	adds	r7, #24
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}

08012756 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8012756:	b480      	push	{r7}
 8012758:	b087      	sub	sp, #28
 801275a:	af00      	add	r7, sp, #0
 801275c:	60f8      	str	r0, [r7, #12]
 801275e:	460b      	mov	r3, r1
 8012760:	607a      	str	r2, [r7, #4]
 8012762:	817b      	strh	r3, [r7, #10]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012764:	2300      	movs	r3, #0
 8012766:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES)
 8012768:	897b      	ldrh	r3, [r7, #10]
 801276a:	2b04      	cmp	r3, #4
 801276c:	d802      	bhi.n	8012774 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801276e:	f06f 0309 	mvn.w	r3, #9
 8012772:	e025      	b.n	80127c0 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	f003 0301 	and.w	r3, r3, #1
 801277c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 801278a:	f002 0201 	and.w	r2, r2, #1
 801278e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8012790:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 801279a:	f002 0201 	and.w	r2, r2, #1
 801279e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80127a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 80127aa:	f002 0203 	and.w	r2, r2, #3
 80127ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80127b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	3304      	adds	r3, #4
		pdata->system__mode_start;
 80127b6:	68fa      	ldr	r2, [r7, #12]
 80127b8:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80127ba:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80127bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	371c      	adds	r7, #28
 80127c4:	46bd      	mov	sp, r7
 80127c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ca:	4770      	bx	lr

080127cc <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b084      	sub	sp, #16
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	6078      	str	r0, [r7, #4]
 80127d4:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 80127d6:	2300      	movs	r3, #0
 80127d8:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80127da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d108      	bne.n	80127f4 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 80127e2:	f107 0308 	add.w	r3, r7, #8
 80127e6:	461a      	mov	r2, r3
 80127e8:	2105      	movs	r1, #5
 80127ea:	6838      	ldr	r0, [r7, #0]
 80127ec:	f7ff ffb3 	bl	8012756 <VL53L1_i2c_encode_system_control>
 80127f0:	4603      	mov	r3, r0
 80127f2:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 80127f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d108      	bne.n	801280e <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 80127fc:	f107 0208 	add.w	r2, r7, #8
 8012800:	2305      	movs	r3, #5
 8012802:	2183      	movs	r1, #131	; 0x83
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f001 fccd 	bl	80141a4 <VL53L1_WriteMulti>
 801280a:	4603      	mov	r3, r0
 801280c:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 801280e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012812:	4618      	mov	r0, r3
 8012814:	3710      	adds	r7, #16
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}

0801281a <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 801281a:	b580      	push	{r7, lr}
 801281c:	b086      	sub	sp, #24
 801281e:	af00      	add	r7, sp, #0
 8012820:	4603      	mov	r3, r0
 8012822:	60b9      	str	r1, [r7, #8]
 8012824:	607a      	str	r2, [r7, #4]
 8012826:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012828:	2300      	movs	r3, #0
 801282a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES)
 801282c:	89fb      	ldrh	r3, [r7, #14]
 801282e:	2b2b      	cmp	r3, #43	; 0x2b
 8012830:	d802      	bhi.n	8012838 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012832:	f06f 0309 	mvn.w	r3, #9
 8012836:	e0e2      	b.n	80129fe <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012840:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	785a      	ldrb	r2, [r3, #1]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	3302      	adds	r3, #2
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	f003 030f 	and.w	r3, r3, #15
 8012858:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 801285e:	68bb      	ldr	r3, [r7, #8]
 8012860:	78da      	ldrb	r2, [r3, #3]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	3304      	adds	r3, #4
 801286a:	4619      	mov	r1, r3
 801286c:	2002      	movs	r0, #2
 801286e:	f7f8 fa44 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012872:	4603      	mov	r3, r0
 8012874:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 801287a:	68bb      	ldr	r3, [r7, #8]
 801287c:	3306      	adds	r3, #6
 801287e:	4619      	mov	r1, r3
 8012880:	2002      	movs	r0, #2
 8012882:	f7f8 fa3a 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012886:	4603      	mov	r3, r0
 8012888:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	3308      	adds	r3, #8
 8012892:	4619      	mov	r1, r3
 8012894:	2002      	movs	r0, #2
 8012896:	f7f8 fa30 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 801289a:	4603      	mov	r3, r0
 801289c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	330a      	adds	r3, #10
 80128a6:	4619      	mov	r1, r3
 80128a8:	2002      	movs	r0, #2
 80128aa:	f7f8 fa26 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 80128ae:	4603      	mov	r3, r0
 80128b0:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	330c      	adds	r3, #12
 80128ba:	4619      	mov	r1, r3
 80128bc:	2002      	movs	r0, #2
 80128be:	f7f8 fa1c 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 80128c2:	4603      	mov	r3, r0
 80128c4:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	330e      	adds	r3, #14
 80128ce:	4619      	mov	r1, r3
 80128d0:	2002      	movs	r0, #2
 80128d2:	f7f8 fa12 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 80128d6:	4603      	mov	r3, r0
 80128d8:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	3310      	adds	r3, #16
 80128e2:	4619      	mov	r1, r3
 80128e4:	2002      	movs	r0, #2
 80128e6:	f7f8 fa08 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 80128ea:	4603      	mov	r3, r0
 80128ec:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 80128f2:	68bb      	ldr	r3, [r7, #8]
 80128f4:	3312      	adds	r3, #18
 80128f6:	4619      	mov	r1, r3
 80128f8:	2002      	movs	r0, #2
 80128fa:	f7f8 f9fe 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 80128fe:	4603      	mov	r3, r0
 8012900:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	3314      	adds	r3, #20
 801290a:	4619      	mov	r1, r3
 801290c:	2002      	movs	r0, #2
 801290e:	f7f8 f9f4 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012912:	4603      	mov	r3, r0
 8012914:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	3316      	adds	r3, #22
 801291e:	4619      	mov	r1, r3
 8012920:	2002      	movs	r0, #2
 8012922:	f7f8 f9ea 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012926:	4603      	mov	r3, r0
 8012928:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	3318      	adds	r3, #24
 8012932:	4619      	mov	r1, r3
 8012934:	2002      	movs	r0, #2
 8012936:	f7f8 f9e0 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 801293a:	4603      	mov	r3, r0
 801293c:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	331a      	adds	r3, #26
 8012946:	4619      	mov	r1, r3
 8012948:	2002      	movs	r0, #2
 801294a:	f7f8 f9d6 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 801294e:	4603      	mov	r3, r0
 8012950:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	331c      	adds	r3, #28
 801295a:	4619      	mov	r1, r3
 801295c:	2002      	movs	r0, #2
 801295e:	f7f8 f9cc 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012962:	4603      	mov	r3, r0
 8012964:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	331e      	adds	r3, #30
 801296e:	4619      	mov	r1, r3
 8012970:	2002      	movs	r0, #2
 8012972:	f7f8 f9c2 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012976:	4603      	mov	r3, r0
 8012978:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	3320      	adds	r3, #32
 8012982:	4619      	mov	r1, r3
 8012984:	2002      	movs	r0, #2
 8012986:	f7f8 f9b8 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 801298a:	4603      	mov	r3, r0
 801298c:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	3322      	adds	r3, #34	; 0x22
 8012996:	4619      	mov	r1, r3
 8012998:	2002      	movs	r0, #2
 801299a:	f7f8 f9ae 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 801299e:	4603      	mov	r3, r0
 80129a0:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	3324      	adds	r3, #36	; 0x24
 80129aa:	4619      	mov	r1, r3
 80129ac:	2002      	movs	r0, #2
 80129ae:	f7f8 f9a4 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 80129b2:	4603      	mov	r3, r0
 80129b4:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	3326      	adds	r3, #38	; 0x26
 80129be:	4619      	mov	r1, r3
 80129c0:	2002      	movs	r0, #2
 80129c2:	f7f8 f99a 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 80129c6:	4603      	mov	r3, r0
 80129c8:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	3328      	adds	r3, #40	; 0x28
 80129d2:	4619      	mov	r1, r3
 80129d4:	2002      	movs	r0, #2
 80129d6:	f7f8 f990 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 80129da:	4603      	mov	r3, r0
 80129dc:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 80129fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3718      	adds	r7, #24
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}

08012a06 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8012a06:	b580      	push	{r7, lr}
 8012a08:	b086      	sub	sp, #24
 8012a0a:	af00      	add	r7, sp, #0
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	60b9      	str	r1, [r7, #8]
 8012a10:	607a      	str	r2, [r7, #4]
 8012a12:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012a14:	2300      	movs	r3, #0
 8012a16:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_CORE_RESULTS_I2C_SIZE_BYTES)
 8012a18:	89fb      	ldrh	r3, [r7, #14]
 8012a1a:	2b20      	cmp	r3, #32
 8012a1c:	d802      	bhi.n	8012a24 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012a1e:	f06f 0309 	mvn.w	r3, #9
 8012a22:	e04d      	b.n	8012ac0 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8012a24:	68b9      	ldr	r1, [r7, #8]
 8012a26:	2004      	movs	r0, #4
 8012a28:	f7f8 fa06 	bl	800ae38 <VL53L1_i2c_decode_uint32_t>
 8012a2c:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	3304      	adds	r3, #4
 8012a36:	4619      	mov	r1, r3
 8012a38:	2004      	movs	r0, #4
 8012a3a:	f7f8 f9fd 	bl	800ae38 <VL53L1_i2c_decode_uint32_t>
 8012a3e:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	3308      	adds	r3, #8
 8012a48:	4619      	mov	r1, r3
 8012a4a:	2004      	movs	r0, #4
 8012a4c:	f7f8 fa11 	bl	800ae72 <VL53L1_i2c_decode_int32_t>
 8012a50:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	330c      	adds	r3, #12
 8012a5a:	4619      	mov	r1, r3
 8012a5c:	2004      	movs	r0, #4
 8012a5e:	f7f8 f9eb 	bl	800ae38 <VL53L1_i2c_decode_uint32_t>
 8012a62:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	3310      	adds	r3, #16
 8012a6c:	4619      	mov	r1, r3
 8012a6e:	2004      	movs	r0, #4
 8012a70:	f7f8 f9e2 	bl	800ae38 <VL53L1_i2c_decode_uint32_t>
 8012a74:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8012a7a:	68bb      	ldr	r3, [r7, #8]
 8012a7c:	3314      	adds	r3, #20
 8012a7e:	4619      	mov	r1, r3
 8012a80:	2004      	movs	r0, #4
 8012a82:	f7f8 f9d9 	bl	800ae38 <VL53L1_i2c_decode_uint32_t>
 8012a86:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	3318      	adds	r3, #24
 8012a90:	4619      	mov	r1, r3
 8012a92:	2004      	movs	r0, #4
 8012a94:	f7f8 f9ed 	bl	800ae72 <VL53L1_i2c_decode_int32_t>
 8012a98:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	331c      	adds	r3, #28
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	2004      	movs	r0, #4
 8012aa6:	f7f8 f9c7 	bl	800ae38 <VL53L1_i2c_decode_uint32_t>
 8012aaa:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8012abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3718      	adds	r7, #24
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}

08012ac8 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b086      	sub	sp, #24
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	4603      	mov	r3, r0
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	607a      	str	r2, [r7, #4]
 8012ad4:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES)
 8012ada:	89fb      	ldrh	r3, [r7, #14]
 8012adc:	2b37      	cmp	r3, #55	; 0x37
 8012ade:	d802      	bhi.n	8012ae6 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012ae0:	f06f 0309 	mvn.w	r3, #9
 8012ae4:	e15e      	b.n	8012da4 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8012ae6:	68b9      	ldr	r1, [r7, #8]
 8012ae8:	2002      	movs	r0, #2
 8012aea:	f7f8 f906 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012aee:	4603      	mov	r3, r0
 8012af0:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	3302      	adds	r3, #2
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b00:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	3303      	adds	r3, #3
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b10:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	3304      	adds	r3, #4
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	f003 0303 	and.w	r3, r3, #3
 8012b20:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	3305      	adds	r3, #5
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	f003 0301 	and.w	r3, r3, #1
 8012b30:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	3306      	adds	r3, #6
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b40:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	3307      	adds	r3, #7
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012b50:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	3308      	adds	r3, #8
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	2002      	movs	r0, #2
 8012b5e:	f7f8 f8cc 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012b62:	4603      	mov	r3, r0
 8012b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012b68:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	330a      	adds	r3, #10
 8012b72:	781b      	ldrb	r3, [r3, #0]
 8012b74:	f003 0303 	and.w	r3, r3, #3
 8012b78:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8012b7e:	68bb      	ldr	r3, [r7, #8]
 8012b80:	330b      	adds	r3, #11
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	f003 0303 	and.w	r3, r3, #3
 8012b88:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	330c      	adds	r3, #12
 8012b92:	781b      	ldrb	r3, [r3, #0]
 8012b94:	f003 030f 	and.w	r3, r3, #15
 8012b98:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	330d      	adds	r3, #13
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	f003 0307 	and.w	r3, r3, #7
 8012ba8:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	330e      	adds	r3, #14
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	f003 0301 	and.w	r3, r3, #1
 8012bb8:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	330f      	adds	r3, #15
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	f003 0303 	and.w	r3, r3, #3
 8012bc8:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	7c1a      	ldrb	r2, [r3, #16]
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	7c5a      	ldrb	r2, [r3, #17]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	3312      	adds	r3, #18
 8012be2:	4619      	mov	r1, r3
 8012be4:	2002      	movs	r0, #2
 8012be6:	f7f8 f888 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012bea:	4603      	mov	r3, r0
 8012bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012bf0:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	3316      	adds	r3, #22
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	2002      	movs	r0, #2
 8012bfe:	f7f8 f87c 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012c02:	4603      	mov	r3, r0
 8012c04:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	3318      	adds	r3, #24
 8012c0e:	4619      	mov	r1, r3
 8012c10:	2002      	movs	r0, #2
 8012c12:	f7f8 f872 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012c16:	4603      	mov	r3, r0
 8012c18:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	331a      	adds	r3, #26
 8012c22:	781b      	ldrb	r3, [r3, #0]
 8012c24:	f003 0301 	and.w	r3, r3, #1
 8012c28:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	331b      	adds	r3, #27
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	f003 0307 	and.w	r3, r3, #7
 8012c38:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	7f1a      	ldrb	r2, [r3, #28]
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8012c46:	68bb      	ldr	r3, [r7, #8]
 8012c48:	7f5a      	ldrb	r2, [r3, #29]
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	331e      	adds	r3, #30
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c58:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8012c5e:	68bb      	ldr	r3, [r7, #8]
 8012c60:	331f      	adds	r3, #31
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c68:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	3320      	adds	r3, #32
 8012c72:	781b      	ldrb	r3, [r3, #0]
 8012c74:	f003 0303 	and.w	r3, r3, #3
 8012c78:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	3321      	adds	r3, #33	; 0x21
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	f003 030f 	and.w	r3, r3, #15
 8012c88:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8012c8e:	68bb      	ldr	r3, [r7, #8]
 8012c90:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8012ca6:	68bb      	ldr	r3, [r7, #8]
 8012ca8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	3325      	adds	r3, #37	; 0x25
 8012cb6:	781b      	ldrb	r3, [r3, #0]
 8012cb8:	f003 0301 	and.w	r3, r3, #1
 8012cbc:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8012cc4:	68bb      	ldr	r3, [r7, #8]
 8012cc6:	3326      	adds	r3, #38	; 0x26
 8012cc8:	781b      	ldrb	r3, [r3, #0]
 8012cca:	f003 0303 	and.w	r3, r3, #3
 8012cce:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	3327      	adds	r3, #39	; 0x27
 8012cda:	781b      	ldrb	r3, [r3, #0]
 8012cdc:	f003 031f 	and.w	r3, r3, #31
 8012ce0:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	3328      	adds	r3, #40	; 0x28
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	f003 031f 	and.w	r3, r3, #31
 8012cf2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	3329      	adds	r3, #41	; 0x29
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	f003 031f 	and.w	r3, r3, #31
 8012d04:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	332a      	adds	r3, #42	; 0x2a
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	f003 0301 	and.w	r3, r3, #1
 8012d16:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	332b      	adds	r3, #43	; 0x2b
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	f003 0301 	and.w	r3, r3, #1
 8012d28:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8012d30:	68bb      	ldr	r3, [r7, #8]
 8012d32:	332c      	adds	r3, #44	; 0x2c
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	f003 0303 	and.w	r3, r3, #3
 8012d3a:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	332d      	adds	r3, #45	; 0x2d
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d4c:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	332e      	adds	r3, #46	; 0x2e
 8012d58:	4619      	mov	r1, r3
 8012d5a:	2004      	movs	r0, #4
 8012d5c:	f7f8 f86c 	bl	800ae38 <VL53L1_i2c_decode_uint32_t>
 8012d60:	4603      	mov	r3, r0
 8012d62:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	3332      	adds	r3, #50	; 0x32
 8012d6e:	4619      	mov	r1, r3
 8012d70:	2004      	movs	r0, #4
 8012d72:	f7f8 f861 	bl	800ae38 <VL53L1_i2c_decode_uint32_t>
 8012d76:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	3336      	adds	r3, #54	; 0x36
 8012d80:	781b      	ldrb	r3, [r3, #0]
 8012d82:	f003 0301 	and.w	r3, r3, #1
 8012d86:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	3337      	adds	r3, #55	; 0x37
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	f003 0301 	and.w	r3, r3, #1
 8012d98:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8012da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3718      	adds	r7, #24
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b086      	sub	sp, #24
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	4603      	mov	r3, r0
 8012db4:	60b9      	str	r1, [r7, #8]
 8012db6:	607a      	str	r2, [r7, #4]
 8012db8:	81fb      	strh	r3, [r7, #14]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (buf_size < VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES)
 8012dbe:	89fb      	ldrh	r3, [r7, #14]
 8012dc0:	2b30      	cmp	r3, #48	; 0x30
 8012dc2:	d802      	bhi.n	8012dca <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8012dc4:	f06f 0309 	mvn.w	r3, #9
 8012dc8:	e112      	b.n	8012ff0 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8012dca:	68bb      	ldr	r3, [r7, #8]
 8012dcc:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	785a      	ldrb	r2, [r3, #1]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	789a      	ldrb	r2, [r3, #2]
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	3303      	adds	r3, #3
 8012de6:	4619      	mov	r1, r3
 8012de8:	2002      	movs	r0, #2
 8012dea:	f7f7 ff86 	bl	800acfa <VL53L1_i2c_decode_uint16_t>
 8012dee:	4603      	mov	r3, r0
 8012df0:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	3305      	adds	r3, #5
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e00:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	3306      	adds	r3, #6
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	f003 0307 	and.w	r3, r3, #7
 8012e10:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	3307      	adds	r3, #7
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	f003 0307 	and.w	r3, r3, #7
 8012e20:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	3308      	adds	r3, #8
 8012e2a:	781b      	ldrb	r3, [r3, #0]
 8012e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e30:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	3309      	adds	r3, #9
 8012e3a:	781b      	ldrb	r3, [r3, #0]
 8012e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e40:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	330a      	adds	r3, #10
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	f003 0301 	and.w	r3, r3, #1
 8012e50:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	330b      	adds	r3, #11
 8012e5a:	781b      	ldrb	r3, [r3, #0]
 8012e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e60:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	330c      	adds	r3, #12
 8012e6a:	781b      	ldrb	r3, [r3, #0]
 8012e6c:	f003 0301 	and.w	r3, r3, #1
 8012e70:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	330d      	adds	r3, #13
 8012e7a:	781b      	ldrb	r3, [r3, #0]
 8012e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e80:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	330e      	adds	r3, #14
 8012e8a:	781b      	ldrb	r3, [r3, #0]
 8012e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e90:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	7bda      	ldrb	r2, [r3, #15]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	7c1a      	ldrb	r2, [r3, #16]
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8012ea6:	68bb      	ldr	r3, [r7, #8]
 8012ea8:	7c5a      	ldrb	r2, [r3, #17]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8012eae:	68bb      	ldr	r3, [r7, #8]
 8012eb0:	7c9a      	ldrb	r2, [r3, #18]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	7cda      	ldrb	r2, [r3, #19]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	7d1a      	ldrb	r2, [r3, #20]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	7d5a      	ldrb	r2, [r3, #21]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8012ece:	68bb      	ldr	r3, [r7, #8]
 8012ed0:	7d9a      	ldrb	r2, [r3, #22]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	7dda      	ldrb	r2, [r3, #23]
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	7e1a      	ldrb	r2, [r3, #24]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	7e5a      	ldrb	r2, [r3, #25]
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	7e9a      	ldrb	r2, [r3, #26]
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8012ef6:	68bb      	ldr	r3, [r7, #8]
 8012ef8:	7eda      	ldrb	r2, [r3, #27]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	7f1a      	ldrb	r2, [r3, #28]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8012f06:	68bb      	ldr	r3, [r7, #8]
 8012f08:	7f5a      	ldrb	r2, [r3, #29]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	7f9a      	ldrb	r2, [r3, #30]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8012f16:	68bb      	ldr	r3, [r7, #8]
 8012f18:	7fda      	ldrb	r2, [r3, #31]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	f893 2020 	ldrb.w	r2, [r3, #32]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8012f50:	68bb      	ldr	r3, [r7, #8]
 8012f52:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8012f74:	68bb      	ldr	r3, [r7, #8]
 8012f76:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8012fa4:	68bb      	ldr	r3, [r7, #8]
 8012fa6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8012fbc:	68bb      	ldr	r3, [r7, #8]
 8012fbe:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8012fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3718      	adds	r7, #24
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}

08012ff8 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b090      	sub	sp, #64	; 0x40
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013002:	2300      	movs	r3, #0
 8013004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8013008:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801300c:	2b00      	cmp	r3, #0
 801300e:	d10a      	bne.n	8013026 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8013010:	f107 020c 	add.w	r2, r7, #12
 8013014:	2331      	movs	r3, #49	; 0x31
 8013016:	f240 110f 	movw	r1, #271	; 0x10f
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f001 f8f8 	bl	8014210 <VL53L1_ReadMulti>
 8013020:	4603      	mov	r3, r0
 8013022:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8013026:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801302a:	2b00      	cmp	r3, #0
 801302c:	d109      	bne.n	8013042 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 801302e:	f107 030c 	add.w	r3, r7, #12
 8013032:	683a      	ldr	r2, [r7, #0]
 8013034:	4619      	mov	r1, r3
 8013036:	2031      	movs	r0, #49	; 0x31
 8013038:	f7ff feb8 	bl	8012dac <VL53L1_i2c_decode_nvm_copy_data>
 801303c:	4603      	mov	r3, r0
 801303e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8013042:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8013046:	4618      	mov	r0, r3
 8013048:	3740      	adds	r7, #64	; 0x40
 801304a:	46bd      	mov	sp, r7
 801304c:	bd80      	pop	{r7, pc}

0801304e <VL53L1_f_014>:
	uint32_t ax_zp,
	uint32_t cx_zp,
	uint32_t VL53L1_p_004,
	uint16_t fast_osc_frequency,
	uint16_t *psigma_est)
{
 801304e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013052:	b0d6      	sub	sp, #344	; 0x158
 8013054:	af00      	add	r7, sp, #0
 8013056:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 801305a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 801305e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013062:	4603      	mov	r3, r0
 8013064:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127


	VL53L1_Error status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8013068:	23f1      	movs	r3, #241	; 0xf1
 801306a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
	uint32_t sigma_int  = VL53L1_D_002;
 801306e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013072:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	uint32_t pll_period_mm  = 0;
 8013076:	2300      	movs	r3, #0
 8013078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

	uint64_t tmp0        = 0;
 801307c:	f04f 0200 	mov.w	r2, #0
 8013080:	f04f 0300 	mov.w	r3, #0
 8013084:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	uint64_t tmp1        = 0;
 8013088:	f04f 0200 	mov.w	r2, #0
 801308c:	f04f 0300 	mov.w	r3, #0
 8013090:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	uint64_t b_minus_amb = 0;
 8013094:	f04f 0200 	mov.w	r2, #0
 8013098:	f04f 0300 	mov.w	r3, #0
 801309c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint64_t VL53L1_p_041   = 0;
 80130a0:	f04f 0200 	mov.w	r2, #0
 80130a4:	f04f 0300 	mov.w	r3, #0
 80130a8:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	*psigma_est  = VL53L1_D_002;
 80130ac:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80130b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130b4:	8013      	strh	r3, [r2, #0]



	if (fast_osc_frequency != 0) {
 80130b6:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	f000 8322 	beq.w	8013704 <VL53L1_f_014+0x6b6>



		pll_period_mm = VL53L1_calc_pll_period_mm(fast_osc_frequency);
 80130c0:	f8b7 3190 	ldrh.w	r3, [r7, #400]	; 0x190
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7fb fa23 	bl	800e510 <VL53L1_calc_pll_period_mm>
 80130ca:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128



		if (VL53L1_p_004 > VL53L1_p_018)
 80130ce:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80130d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80130d6:	429a      	cmp	r2, r3
 80130d8:	d91a      	bls.n	8013110 <VL53L1_f_014+0xc2>
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 80130da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80130de:	2200      	movs	r2, #0
 80130e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80130e4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
			(uint64_t)VL53L1_p_018;
 80130e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80130ec:	2200      	movs	r2, #0
 80130ee:	4698      	mov	r8, r3
 80130f0:	4691      	mov	r9, r2
			b_minus_amb =  (uint64_t)VL53L1_p_004 -
 80130f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80130f6:	460b      	mov	r3, r1
 80130f8:	ebb3 0308 	subs.w	r3, r3, r8
 80130fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80130fe:	4613      	mov	r3, r2
 8013100:	eb63 0309 	sbc.w	r3, r3, r9
 8013104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013106:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 801310a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
 801310e:	e013      	b.n	8013138 <VL53L1_f_014+0xea>
		else
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8013110:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013114:	2200      	movs	r2, #0
 8013116:	469a      	mov	sl, r3
 8013118:	4693      	mov	fp, r2
			(uint64_t)VL53L1_p_004;
 801311a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801311e:	2200      	movs	r2, #0
 8013120:	461c      	mov	r4, r3
 8013122:	4615      	mov	r5, r2
			b_minus_amb =  (uint64_t)VL53L1_p_018 -
 8013124:	ebba 0304 	subs.w	r3, sl, r4
 8013128:	633b      	str	r3, [r7, #48]	; 0x30
 801312a:	eb6b 0305 	sbc.w	r3, fp, r5
 801312e:	637b      	str	r3, [r7, #52]	; 0x34
 8013130:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013134:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138



		if (VL53L1_p_003 > VL53L1_p_001)
 8013138:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801313c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013140:	429a      	cmp	r2, r3
 8013142:	d91f      	bls.n	8013184 <VL53L1_f_014+0x136>
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8013144:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013148:	2200      	movs	r2, #0
 801314a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801314e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
			(uint64_t)VL53L1_p_001;
 8013152:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013156:	2200      	movs	r2, #0
 8013158:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801315c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_003 -
 8013160:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8013164:	4623      	mov	r3, r4
 8013166:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801316a:	4602      	mov	r2, r0
 801316c:	1a9b      	subs	r3, r3, r2
 801316e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013170:	462b      	mov	r3, r5
 8013172:	460a      	mov	r2, r1
 8013174:	eb63 0302 	sbc.w	r3, r3, r2
 8013178:	62fb      	str	r3, [r7, #44]	; 0x2c
 801317a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 801317e:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
 8013182:	e01e      	b.n	80131c2 <VL53L1_f_014+0x174>
		else
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 8013184:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013188:	2200      	movs	r2, #0
 801318a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801318e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			(uint64_t)VL53L1_p_003;
 8013192:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013196:	2200      	movs	r2, #0
 8013198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801319c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
			VL53L1_p_041 =  (uint64_t)VL53L1_p_001 -
 80131a0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 80131a4:	4623      	mov	r3, r4
 80131a6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80131aa:	4602      	mov	r2, r0
 80131ac:	1a9b      	subs	r3, r3, r2
 80131ae:	623b      	str	r3, [r7, #32]
 80131b0:	462b      	mov	r3, r5
 80131b2:	460a      	mov	r2, r1
 80131b4:	eb63 0302 	sbc.w	r3, r3, r2
 80131b8:	627b      	str	r3, [r7, #36]	; 0x24
 80131ba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80131be:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130



		if (b_minus_amb != 0) {
 80131c2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80131c6:	4313      	orrs	r3, r2
 80131c8:	f000 829c 	beq.w	8013704 <VL53L1_f_014+0x6b6>




			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 80131cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80131d0:	2200      	movs	r2, #0
 80131d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80131d6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80131da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80131de:	2200      	movs	r2, #0
 80131e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80131e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80131e8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80131ec:	4623      	mov	r3, r4
 80131ee:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80131f2:	4602      	mov	r2, r0
 80131f4:	189b      	adds	r3, r3, r2
 80131f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80131fa:	460b      	mov	r3, r1
 80131fc:	462a      	mov	r2, r5
 80131fe:	eb42 0303 	adc.w	r3, r2, r3
 8013202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
					(uint64_t)VL53L1_p_004;
 8013206:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801320a:	2200      	movs	r2, #0
 801320c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013210:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
			tmp0 = (uint64_t)VL53L1_p_018 + (uint64_t)bx +
 8013214:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8013218:	4623      	mov	r3, r4
 801321a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801321e:	4602      	mov	r2, r0
 8013220:	189b      	adds	r3, r3, r2
 8013222:	61bb      	str	r3, [r7, #24]
 8013224:	460b      	mov	r3, r1
 8013226:	462a      	mov	r2, r5
 8013228:	eb42 0303 	adc.w	r3, r2, r3
 801322c:	61fb      	str	r3, [r7, #28]
 801322e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8013232:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > VL53L1_D_003)
 8013236:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801323a:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 801323e:	f173 0300 	sbcs.w	r3, r3, #0
 8013242:	d305      	bcc.n	8013250 <VL53L1_f_014+0x202>
				tmp0 = VL53L1_D_003;
 8013244:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8013248:	f04f 0300 	mov.w	r3, #0
 801324c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			tmp1 = (uint64_t)VL53L1_p_041 * (uint64_t)VL53L1_p_041;
 8013250:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013254:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013258:	fb03 f102 	mul.w	r1, r3, r2
 801325c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8013260:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013264:	fb02 f303 	mul.w	r3, r2, r3
 8013268:	18ca      	adds	r2, r1, r3
 801326a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801326e:	fba3 1303 	umull	r1, r3, r3, r3
 8013272:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013276:	460b      	mov	r3, r1
 8013278:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801327c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013280:	18d3      	adds	r3, r2, r3
 8013282:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013286:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 801328a:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 801328e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp1 = tmp1 << 8;
 8013292:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013296:	f04f 0000 	mov.w	r0, #0
 801329a:	f04f 0100 	mov.w	r1, #0
 801329e:	0219      	lsls	r1, r3, #8
 80132a0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80132a4:	0210      	lsls	r0, r2, #8
 80132a6:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			if (tmp1 > VL53L1_D_004)
 80132aa:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80132ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80132b2:	d305      	bcc.n	80132c0 <VL53L1_f_014+0x272>
				tmp1 = VL53L1_D_004;
 80132b4:	f04f 32ff 	mov.w	r2, #4294967295
 80132b8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80132bc:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp1 = do_division_u(tmp1, b_minus_amb);
 80132c0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80132c4:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80132c8:	f7ec fffa 	bl	80002c0 <__aeabi_uldivmod>
 80132cc:	4602      	mov	r2, r0
 80132ce:	460b      	mov	r3, r1
 80132d0:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = do_division_u(tmp1, b_minus_amb);
 80132d4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80132d8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 80132dc:	f7ec fff0 	bl	80002c0 <__aeabi_uldivmod>
 80132e0:	4602      	mov	r2, r0
 80132e2:	460b      	mov	r3, r1
 80132e4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_005)
 80132e8:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80132ec:	2b80      	cmp	r3, #128	; 0x80
 80132ee:	d305      	bcc.n	80132fc <VL53L1_f_014+0x2ae>
				tmp1 = (uint64_t)VL53L1_D_005;
 80132f0:	f04f 32ff 	mov.w	r2, #4294967295
 80132f4:	f04f 037f 	mov.w	r3, #127	; 0x7f
 80132f8:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140


			tmp0 = tmp1 * tmp0;
 80132fc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8013300:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013304:	fb03 f102 	mul.w	r1, r3, r2
 8013308:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801330c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013310:	fb02 f303 	mul.w	r3, r2, r3
 8013314:	4419      	add	r1, r3
 8013316:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801331a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801331e:	fba2 2303 	umull	r2, r3, r2, r3
 8013322:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8013326:	4613      	mov	r3, r2
 8013328:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801332c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8013330:	18cb      	adds	r3, r1, r3
 8013332:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8013336:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 801333a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801333e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013342:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8013346:	2200      	movs	r2, #0
 8013348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801334c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013350:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8013354:	2200      	movs	r2, #0
 8013356:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801335a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801335e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013362:	4623      	mov	r3, r4
 8013364:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8013368:	4602      	mov	r2, r0
 801336a:	189b      	adds	r3, r3, r2
 801336c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013370:	460b      	mov	r3, r1
 8013372:	462a      	mov	r2, r5
 8013374:	eb42 0303 	adc.w	r3, r2, r3
 8013378:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				(uint64_t)a_zp + (uint64_t)ax_zp;
 801337c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013380:	2200      	movs	r2, #0
 8013382:	67bb      	str	r3, [r7, #120]	; 0x78
 8013384:	67fa      	str	r2, [r7, #124]	; 0x7c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 8013386:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 801338a:	4623      	mov	r3, r4
 801338c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8013390:	4602      	mov	r2, r0
 8013392:	189b      	adds	r3, r3, r2
 8013394:	673b      	str	r3, [r7, #112]	; 0x70
 8013396:	460b      	mov	r3, r1
 8013398:	462a      	mov	r2, r5
 801339a:	eb42 0303 	adc.w	r3, r2, r3
 801339e:	677b      	str	r3, [r7, #116]	; 0x74
				(uint64_t)a_zp + (uint64_t)ax_zp;
 80133a0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80133a4:	2200      	movs	r2, #0
 80133a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80133a8:	66fa      	str	r2, [r7, #108]	; 0x6c
			tmp1 = (uint64_t)c_zp + (uint64_t)cx_zp +
 80133aa:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80133ae:	4623      	mov	r3, r4
 80133b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80133b4:	4602      	mov	r2, r0
 80133b6:	189b      	adds	r3, r3, r2
 80133b8:	613b      	str	r3, [r7, #16]
 80133ba:	460b      	mov	r3, r1
 80133bc:	462a      	mov	r2, r5
 80133be:	eb42 0303 	adc.w	r3, r2, r3
 80133c2:	617b      	str	r3, [r7, #20]
 80133c4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80133c8:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140


			if (tmp1 > (uint64_t)VL53L1_D_003)
 80133cc:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80133d0:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 80133d4:	f173 0300 	sbcs.w	r3, r3, #0
 80133d8:	d305      	bcc.n	80133e6 <VL53L1_f_014+0x398>
				tmp1 = (uint64_t)VL53L1_D_003;
 80133da:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80133de:	f04f 0300 	mov.w	r3, #0
 80133e2:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140

			tmp1 = tmp1 << 8;
 80133e6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80133ea:	f04f 0000 	mov.w	r0, #0
 80133ee:	f04f 0100 	mov.w	r1, #0
 80133f2:	0219      	lsls	r1, r3, #8
 80133f4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80133f8:	0210      	lsls	r0, r2, #8
 80133fa:	e9c7 0150 	strd	r0, r1, [r7, #320]	; 0x140


			tmp0 = tmp1 + tmp0;
 80133fe:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013402:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8013406:	1884      	adds	r4, r0, r2
 8013408:	60bc      	str	r4, [r7, #8]
 801340a:	eb41 0303 	adc.w	r3, r1, r3
 801340e:	60fb      	str	r3, [r7, #12]
 8013410:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013414:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
			if (tmp0 > (uint64_t)VL53L1_D_006)
 8013418:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801341c:	2b00      	cmp	r3, #0
 801341e:	da05      	bge.n	801342c <VL53L1_f_014+0x3de>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013420:	f04f 32ff 	mov.w	r2, #4294967295
 8013424:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013428:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148





			if (tmp0 > (uint64_t)VL53L1_D_007) {
 801342c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013430:	2b01      	cmp	r3, #1
 8013432:	d331      	bcc.n	8013498 <VL53L1_f_014+0x44a>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013434:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8013438:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801343c:	f7ec ff40 	bl	80002c0 <__aeabi_uldivmod>
 8013440:	4602      	mov	r2, r0
 8013442:	460b      	mov	r3, r1
 8013444:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8013448:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801344c:	2200      	movs	r2, #0
 801344e:	663b      	str	r3, [r7, #96]	; 0x60
 8013450:	667a      	str	r2, [r7, #100]	; 0x64
 8013452:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013456:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 801345a:	4622      	mov	r2, r4
 801345c:	fb02 f203 	mul.w	r2, r2, r3
 8013460:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013464:	4629      	mov	r1, r5
 8013466:	fb01 f303 	mul.w	r3, r1, r3
 801346a:	441a      	add	r2, r3
 801346c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8013470:	4621      	mov	r1, r4
 8013472:	fba3 1301 	umull	r1, r3, r3, r1
 8013476:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801347a:	460b      	mov	r3, r1
 801347c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013484:	18d3      	adds	r3, r2, r3
 8013486:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801348a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 801348e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013492:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013496:	e030      	b.n	80134fa <VL53L1_f_014+0x4ac>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013498:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801349c:	2200      	movs	r2, #0
 801349e:	65bb      	str	r3, [r7, #88]	; 0x58
 80134a0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80134a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80134a6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80134aa:	4622      	mov	r2, r4
 80134ac:	fb02 f203 	mul.w	r2, r2, r3
 80134b0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80134b4:	4629      	mov	r1, r5
 80134b6:	fb01 f303 	mul.w	r3, r1, r3
 80134ba:	441a      	add	r2, r3
 80134bc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80134c0:	4621      	mov	r1, r4
 80134c2:	fba3 1301 	umull	r1, r3, r3, r1
 80134c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80134ca:	460b      	mov	r3, r1
 80134cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80134d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80134d4:	18d3      	adds	r3, r2, r3
 80134d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80134da:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 80134de:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80134e2:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80134e6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80134ea:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80134ee:	f7ec fee7 	bl	80002c0 <__aeabi_uldivmod>
 80134f2:	4602      	mov	r2, r0
 80134f4:	460b      	mov	r3, r1
 80134f6:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 80134fa:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80134fe:	2b00      	cmp	r3, #0
 8013500:	da05      	bge.n	801350e <VL53L1_f_014+0x4c0>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013502:	f04f 32ff 	mov.w	r2, #4294967295
 8013506:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801350a:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148



			if (tmp0 > (uint64_t)VL53L1_D_007) {
 801350e:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013512:	2b01      	cmp	r3, #1
 8013514:	d33d      	bcc.n	8013592 <VL53L1_f_014+0x544>
				tmp0 = do_division_u(tmp0, b_minus_amb);
 8013516:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 801351a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801351e:	f7ec fecf 	bl	80002c0 <__aeabi_uldivmod>
 8013522:	4602      	mov	r2, r0
 8013524:	460b      	mov	r3, r1
 8013526:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 801352a:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 801352e:	f04f 0200 	mov.w	r2, #0
 8013532:	f04f 0300 	mov.w	r3, #0
 8013536:	0882      	lsrs	r2, r0, #2
 8013538:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 801353c:	088b      	lsrs	r3, r1, #2
 801353e:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = tmp0 * pll_period_mm;
 8013542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013546:	2200      	movs	r2, #0
 8013548:	653b      	str	r3, [r7, #80]	; 0x50
 801354a:	657a      	str	r2, [r7, #84]	; 0x54
 801354c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8013550:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8013554:	4622      	mov	r2, r4
 8013556:	fb02 f203 	mul.w	r2, r2, r3
 801355a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801355e:	4629      	mov	r1, r5
 8013560:	fb01 f303 	mul.w	r3, r1, r3
 8013564:	4413      	add	r3, r2
 8013566:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801356a:	4621      	mov	r1, r4
 801356c:	fba2 1201 	umull	r1, r2, r2, r1
 8013570:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8013574:	460a      	mov	r2, r1
 8013576:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 801357a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801357e:	4413      	add	r3, r2
 8013580:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013584:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8013588:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 801358c:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 8013590:	e03c      	b.n	801360c <VL53L1_f_014+0x5be>
			} else {
				tmp0 = tmp0 * pll_period_mm;
 8013592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013596:	2200      	movs	r2, #0
 8013598:	64bb      	str	r3, [r7, #72]	; 0x48
 801359a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801359c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80135a0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80135a4:	4622      	mov	r2, r4
 80135a6:	fb02 f203 	mul.w	r2, r2, r3
 80135aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80135ae:	4629      	mov	r1, r5
 80135b0:	fb01 f303 	mul.w	r3, r1, r3
 80135b4:	4413      	add	r3, r2
 80135b6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80135ba:	4621      	mov	r1, r4
 80135bc:	fba2 1201 	umull	r1, r2, r2, r1
 80135c0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80135c4:	460a      	mov	r2, r1
 80135c6:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80135ca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80135ce:	4413      	add	r3, r2
 80135d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80135d4:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80135d8:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 80135dc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, b_minus_amb);
 80135e0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80135e4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80135e8:	f7ec fe6a 	bl	80002c0 <__aeabi_uldivmod>
 80135ec:	4602      	mov	r2, r0
 80135ee:	460b      	mov	r3, r1
 80135f0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				tmp0 = do_division_u(tmp0, 4);
 80135f4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80135f8:	f04f 0200 	mov.w	r2, #0
 80135fc:	f04f 0300 	mov.w	r3, #0
 8013600:	0882      	lsrs	r2, r0, #2
 8013602:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013606:	088b      	lsrs	r3, r1, #2
 8013608:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
			}


			if (tmp0 > (uint64_t)VL53L1_D_006)
 801360c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8013610:	2b00      	cmp	r3, #0
 8013612:	da05      	bge.n	8013620 <VL53L1_f_014+0x5d2>
				tmp0 = (uint64_t)VL53L1_D_006;
 8013614:	f04f 32ff 	mov.w	r2, #4294967295
 8013618:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801361c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp0 = tmp0 >> 2;
 8013620:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8013624:	f04f 0200 	mov.w	r2, #0
 8013628:	f04f 0300 	mov.w	r3, #0
 801362c:	0882      	lsrs	r2, r0, #2
 801362e:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8013632:	088b      	lsrs	r3, r1, #2
 8013634:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 8013638:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 801363c:	2b01      	cmp	r3, #1
 801363e:	d305      	bcc.n	801364c <VL53L1_f_014+0x5fe>
				tmp0 = (uint64_t)VL53L1_D_007;
 8013640:	f04f 32ff 	mov.w	r2, #4294967295
 8013644:	f04f 0300 	mov.w	r3, #0
 8013648:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			tmp1 = (uint64_t)sigma_estimator__sigma_ref_mm << 7;
 801364c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013650:	2200      	movs	r2, #0
 8013652:	643b      	str	r3, [r7, #64]	; 0x40
 8013654:	647a      	str	r2, [r7, #68]	; 0x44
 8013656:	f04f 0200 	mov.w	r2, #0
 801365a:	f04f 0300 	mov.w	r3, #0
 801365e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013662:	4629      	mov	r1, r5
 8013664:	01cb      	lsls	r3, r1, #7
 8013666:	4621      	mov	r1, r4
 8013668:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 801366c:	4621      	mov	r1, r4
 801366e:	01ca      	lsls	r2, r1, #7
 8013670:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
			tmp1 = tmp1 * tmp1;
 8013674:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013678:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801367c:	fb03 f202 	mul.w	r2, r3, r2
 8013680:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8013684:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8013688:	fb01 f303 	mul.w	r3, r1, r3
 801368c:	441a      	add	r2, r3
 801368e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8013692:	fba3 1303 	umull	r1, r3, r3, r3
 8013696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801369a:	460b      	mov	r3, r1
 801369c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80136a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80136a4:	18d3      	adds	r3, r2, r3
 80136a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80136aa:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80136ae:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
 80136b2:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
			tmp0 = tmp0 + tmp1;
 80136b6:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 80136ba:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80136be:	1884      	adds	r4, r0, r2
 80136c0:	603c      	str	r4, [r7, #0]
 80136c2:	eb41 0303 	adc.w	r3, r1, r3
 80136c6:	607b      	str	r3, [r7, #4]
 80136c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80136cc:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148


			if (tmp0 > (uint64_t)VL53L1_D_007)
 80136d0:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80136d4:	2b01      	cmp	r3, #1
 80136d6:	d305      	bcc.n	80136e4 <VL53L1_f_014+0x696>
				tmp0 = (uint64_t)VL53L1_D_007;
 80136d8:	f04f 32ff 	mov.w	r2, #4294967295
 80136dc:	f04f 0300 	mov.w	r3, #0
 80136e0:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148


			sigma_int = VL53L1_isqrt((uint32_t)tmp0);
 80136e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80136e8:	4618      	mov	r0, r3
 80136ea:	f7fa fdaa 	bl	800e242 <VL53L1_isqrt>
 80136ee:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c

			*psigma_est = (uint16_t)sigma_int;
 80136f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80136f6:	b29a      	uxth	r2, r3
 80136f8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80136fc:	801a      	strh	r2, [r3, #0]

			status = VL53L1_ERROR_NONE;
 80136fe:	2300      	movs	r3, #0
 8013700:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		}

	}

	return status;
 8013704:	f997 3157 	ldrsb.w	r3, [r7, #343]	; 0x157
}
 8013708:	4618      	mov	r0, r3
 801370a:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 801370e:	46bd      	mov	sp, r7
 8013710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013714 <VL53L1_wait_for_test_completion>:
}


VL53L1_Error VL53L1_wait_for_test_completion(
	VL53L1_DEV     Dev)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b086      	sub	sp, #24
 8013718:	af00      	add	r7, sp, #0
 801371a:	6078      	str	r0, [r7, #4]



	VL53L1_Error status = VL53L1_ERROR_NONE;
 801371c:	2300      	movs	r3, #0
 801371e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	3318      	adds	r3, #24
 8013724:	613b      	str	r3, [r7, #16]

	uint8_t      data_ready  = 0;
 8013726:	2300      	movs	r3, #0
 8013728:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	if (pdev->wait_method == VL53L1_WAIT_METHOD_BLOCKING) {
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d107      	bne.n	8013742 <VL53L1_wait_for_test_completion+0x2e>



		status =
			VL53L1_poll_for_range_completion(
 8013732:	f64e 2160 	movw	r1, #60000	; 0xea60
 8013736:	6878      	ldr	r0, [r7, #4]
 8013738:	f000 f88b 	bl	8013852 <VL53L1_poll_for_range_completion>
 801373c:	4603      	mov	r3, r0
 801373e:	75fb      	strb	r3, [r7, #23]
 8013740:	e01b      	b.n	801377a <VL53L1_wait_for_test_completion+0x66>

	} else {



		data_ready = 0;
 8013742:	2300      	movs	r3, #0
 8013744:	73fb      	strb	r3, [r7, #15]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 8013746:	e011      	b.n	801376c <VL53L1_wait_for_test_completion+0x58>
			status = VL53L1_is_new_data_ready(
 8013748:	f107 030f 	add.w	r3, r7, #15
 801374c:	4619      	mov	r1, r3
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f000 f819 	bl	8013786 <VL53L1_is_new_data_ready>
 8013754:	4603      	mov	r3, r0
 8013756:	75fb      	strb	r3, [r7, #23]
				Dev,
				&data_ready);

			if (status == VL53L1_ERROR_NONE) {
 8013758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d105      	bne.n	801376c <VL53L1_wait_for_test_completion+0x58>
				status = VL53L1_WaitMs(
 8013760:	2101      	movs	r1, #1
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f000 fe6e 	bl	8014444 <VL53L1_WaitMs>
 8013768:	4603      	mov	r3, r0
 801376a:	75fb      	strb	r3, [r7, #23]
		while (data_ready == 0x00 && status == VL53L1_ERROR_NONE) {
 801376c:	7bfb      	ldrb	r3, [r7, #15]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d103      	bne.n	801377a <VL53L1_wait_for_test_completion+0x66>
 8013772:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d0e6      	beq.n	8013748 <VL53L1_wait_for_test_completion+0x34>
		}
	}

	LOG_FUNCTION_END(status);

	return status;
 801377a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801377e:	4618      	mov	r0, r3
 8013780:	3718      	adds	r7, #24
 8013782:	46bd      	mov	sp, r7
 8013784:	bd80      	pop	{r7, pc}

08013786 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8013786:	b580      	push	{r7, lr}
 8013788:	b086      	sub	sp, #24
 801378a:	af00      	add	r7, sp, #0
 801378c:	6078      	str	r0, [r7, #4]
 801378e:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013790:	2300      	movs	r3, #0
 8013792:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	3318      	adds	r3, #24
 8013798:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801379a:	2300      	movs	r3, #0
 801379c:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 801379e:	2300      	movs	r3, #0
 80137a0:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 80137a2:	2300      	movs	r3, #0
 80137a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 80137ac:	f003 0310 	and.w	r3, r3, #16
 80137b0:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 80137b2:	7bfb      	ldrb	r3, [r7, #15]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d102      	bne.n	80137be <VL53L1_is_new_data_ready+0x38>
		interrupt_ready = 0x01;
 80137b8:	2301      	movs	r3, #1
 80137ba:	75fb      	strb	r3, [r7, #23]
 80137bc:	e001      	b.n	80137c2 <VL53L1_is_new_data_ready+0x3c>
	else
		interrupt_ready = 0x00;
 80137be:	2300      	movs	r3, #0
 80137c0:	75fb      	strb	r3, [r7, #23]



	status = VL53L1_RdByte(
 80137c2:	f107 030e 	add.w	r3, r7, #14
 80137c6:	461a      	mov	r2, r3
 80137c8:	2131      	movs	r1, #49	; 0x31
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f000 fdb2 	bl	8014334 <VL53L1_RdByte>
 80137d0:	4603      	mov	r3, r0
 80137d2:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);



	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 80137d4:	7bbb      	ldrb	r3, [r7, #14]
 80137d6:	f003 0201 	and.w	r2, r3, #1
 80137da:	7dfb      	ldrb	r3, [r7, #23]
 80137dc:	429a      	cmp	r2, r3
 80137de:	d103      	bne.n	80137e8 <VL53L1_is_new_data_ready+0x62>
		*pready = 0x01;
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	2201      	movs	r2, #1
 80137e4:	701a      	strb	r2, [r3, #0]
 80137e6:	e002      	b.n	80137ee <VL53L1_is_new_data_ready+0x68>
	else
		*pready = 0x00;
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	2200      	movs	r2, #0
 80137ec:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80137ee:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80137f2:	4618      	mov	r0, r3
 80137f4:	3718      	adds	r7, #24
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}

080137fa <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 80137fa:	b580      	push	{r7, lr}
 80137fc:	b086      	sub	sp, #24
 80137fe:	af02      	add	r7, sp, #8
 8013800:	6078      	str	r0, [r7, #4]
 8013802:	6039      	str	r1, [r7, #0]


	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8013804:	2300      	movs	r3, #0
 8013806:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");



	status = VL53L1_WaitUs(
 8013808:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f000 fe29 	bl	8014464 <VL53L1_WaitUs>
 8013812:	4603      	mov	r3, r0
 8013814:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8013816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d10b      	bne.n	8013836 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 801381e:	2301      	movs	r3, #1
 8013820:	9301      	str	r3, [sp, #4]
 8013822:	2301      	movs	r3, #1
 8013824:	9300      	str	r3, [sp, #0]
 8013826:	2301      	movs	r3, #1
 8013828:	22e5      	movs	r2, #229	; 0xe5
 801382a:	6839      	ldr	r1, [r7, #0]
 801382c:	6878      	ldr	r0, [r7, #4]
 801382e:	f000 fe31 	bl	8014494 <VL53L1_WaitValueMaskEx>
 8013832:	4603      	mov	r3, r0
 8013834:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8013836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d103      	bne.n	8013846 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 801383e:	2103      	movs	r1, #3
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f7f6 fc38 	bl	800a0b6 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8013846:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801384a:	4618      	mov	r0, r3
 801384c:	3710      	adds	r7, #16
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}

08013852 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8013852:	b580      	push	{r7, lr}
 8013854:	b088      	sub	sp, #32
 8013856:	af02      	add	r7, sp, #8
 8013858:	6078      	str	r0, [r7, #4]
 801385a:	6039      	str	r1, [r7, #0]


	VL53L1_Error status = VL53L1_ERROR_NONE;
 801385c:	2300      	movs	r3, #0
 801385e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	3318      	adds	r3, #24
 8013864:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8013866:	2300      	movs	r3, #0
 8013868:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 801386a:	2300      	movs	r3, #0
 801386c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	f893 334e 	ldrb.w	r3, [r3, #846]	; 0x34e
	gpio__mux_active_high_hv =
 8013874:	f003 0310 	and.w	r3, r3, #16
 8013878:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801387a:	7bfb      	ldrb	r3, [r7, #15]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d102      	bne.n	8013886 <VL53L1_poll_for_range_completion+0x34>
		interrupt_ready = 0x01;
 8013880:	2301      	movs	r3, #1
 8013882:	75fb      	strb	r3, [r7, #23]
 8013884:	e001      	b.n	801388a <VL53L1_poll_for_range_completion+0x38>
	else
		interrupt_ready = 0x00;
 8013886:	2300      	movs	r3, #0
 8013888:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 801388a:	7dfb      	ldrb	r3, [r7, #23]
 801388c:	2201      	movs	r2, #1
 801388e:	9201      	str	r2, [sp, #4]
 8013890:	2201      	movs	r2, #1
 8013892:	9200      	str	r2, [sp, #0]
 8013894:	2231      	movs	r2, #49	; 0x31
 8013896:	6839      	ldr	r1, [r7, #0]
 8013898:	6878      	ldr	r0, [r7, #4]
 801389a:	f000 fdfb 	bl	8014494 <VL53L1_WaitValueMaskEx>
 801389e:	4603      	mov	r3, r0
 80138a0:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 80138a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	3718      	adds	r7, #24
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}

080138ae <VL53L1_f_040>:
	uint16_t                       roi_effective_spads,
	uint8_t                        roi_centre_spad,
	uint8_t                        roi_xy_size,
	uint32_t                      *xtalk_rate_kcps
	)
{
 80138ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80138b2:	b0c0      	sub	sp, #256	; 0x100
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
 80138ba:	4618      	mov	r0, r3
 80138bc:	460b      	mov	r3, r1
 80138be:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
 80138c2:	4613      	mov	r3, r2
 80138c4:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
 80138c8:	4603      	mov	r3, r0
 80138ca:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	VL53L1_Error status = VL53L1_ERROR_NONE;
 80138ce:	2300      	movs	r3, #0
 80138d0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf

	uint8_t row = 0;
 80138d4:	2300      	movs	r3, #0
 80138d6:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
	uint8_t col = 0;
 80138da:	2300      	movs	r3, #0
 80138dc:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd



	int16_t  bound_l_x = 0;
 80138e0:	2300      	movs	r3, #0
 80138e2:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	int16_t  bound_r_x = 0;
 80138e6:	2300      	movs	r3, #0
 80138e8:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
	int16_t  bound_u_y = 0;
 80138ec:	2300      	movs	r3, #0
 80138ee:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
	int16_t  bound_d_y = 0;
 80138f2:	2300      	movs	r3, #0
 80138f4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

	int64_t xtalk_rate_ll = 0;
 80138f8:	f04f 0200 	mov.w	r2, #0
 80138fc:	f04f 0300 	mov.w	r3, #0
 8013900:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
	int64_t xtalk_rate_ur = 0;
 8013904:	f04f 0200 	mov.w	r2, #0
 8013908:	f04f 0300 	mov.w	r3, #0
 801390c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	int64_t xtalk_avg = 0;
 8013910:	f04f 0200 	mov.w	r2, #0
 8013914:	f04f 0300 	mov.w	r3, #0
 8013918:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	if (status == VL53L1_ERROR_NONE) {
 801391c:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013920:	2b00      	cmp	r3, #0
 8013922:	d108      	bne.n	8013936 <VL53L1_f_040+0x88>
		VL53L1_decode_row_col(
 8013924:	f107 02dd 	add.w	r2, r7, #221	; 0xdd
 8013928:	f107 01de 	add.w	r1, r7, #222	; 0xde
 801392c:	f897 3128 	ldrb.w	r3, [r7, #296]	; 0x128
 8013930:	4618      	mov	r0, r3
 8013932:	f7fb f867 	bl	800ea04 <VL53L1_decode_row_col>
			"    %-48s : %10d\n",
			"Col", col);



	if (status == VL53L1_ERROR_NONE) {
 8013936:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 801393a:	2b00      	cmp	r3, #0
 801393c:	d165      	bne.n	8013a0a <VL53L1_f_040+0x15c>
		if ((((int16_t)roi_xy_size / 16) & 0x01) == 1)
 801393e:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013942:	091b      	lsrs	r3, r3, #4
 8013944:	b2db      	uxtb	r3, r3
 8013946:	f003 0301 	and.w	r3, r3, #1
 801394a:	2b00      	cmp	r3, #0
 801394c:	d00e      	beq.n	801396c <VL53L1_f_040+0xbe>
			bound_l_x = (int16_t) col -
 801394e:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013952:	b29a      	uxth	r2, r3
 8013954:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013958:	095b      	lsrs	r3, r3, #5
 801395a:	b2db      	uxtb	r3, r3
 801395c:	b29b      	uxth	r3, r3
 801395e:	1ad3      	subs	r3, r2, r3
 8013960:	b29b      	uxth	r3, r3
 8013962:	3b01      	subs	r3, #1
 8013964:	b29b      	uxth	r3, r3
 8013966:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 801396a:	e00b      	b.n	8013984 <VL53L1_f_040+0xd6>
			(((int16_t)roi_xy_size / 32) + 1);
		else
			bound_l_x = (int16_t) col -
 801396c:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013970:	b29a      	uxth	r2, r3
 8013972:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 8013976:	095b      	lsrs	r3, r3, #5
 8013978:	b2db      	uxtb	r3, r3
 801397a:	b29b      	uxth	r3, r3
 801397c:	1ad3      	subs	r3, r2, r3
 801397e:	b29b      	uxth	r3, r3
 8013980:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
			((int16_t)roi_xy_size / 32);

		bound_r_x = (int16_t) col + ((int16_t)roi_xy_size / 32);
 8013984:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8013988:	b29a      	uxth	r2, r3
 801398a:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 801398e:	095b      	lsrs	r3, r3, #5
 8013990:	b2db      	uxtb	r3, r3
 8013992:	b29b      	uxth	r3, r3
 8013994:	4413      	add	r3, r2
 8013996:	b29b      	uxth	r3, r3
 8013998:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc

		if ((((int16_t)roi_xy_size) & 0x01) == 1)
 801399c:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80139a0:	f003 0301 	and.w	r3, r3, #1
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d011      	beq.n	80139cc <VL53L1_f_040+0x11e>
			bound_d_y = (int16_t) row -
 80139a8:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80139ac:	b299      	uxth	r1, r3
			((((int16_t)roi_xy_size & 0x0f) / 2) + 1);
 80139ae:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80139b2:	f003 020f 	and.w	r2, r3, #15
 80139b6:	0fd3      	lsrs	r3, r2, #31
 80139b8:	4413      	add	r3, r2
 80139ba:	105b      	asrs	r3, r3, #1
			bound_d_y = (int16_t) row -
 80139bc:	b29b      	uxth	r3, r3
 80139be:	1acb      	subs	r3, r1, r3
 80139c0:	b29b      	uxth	r3, r3
 80139c2:	3b01      	subs	r3, #1
 80139c4:	b29b      	uxth	r3, r3
 80139c6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80139ca:	e00f      	b.n	80139ec <VL53L1_f_040+0x13e>
		else
			bound_d_y = (int16_t) row -
 80139cc:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80139d0:	b299      	uxth	r1, r3
			(((int16_t)roi_xy_size & 0x0f) / 2);
 80139d2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80139d6:	f003 020f 	and.w	r2, r3, #15
 80139da:	0fd3      	lsrs	r3, r2, #31
 80139dc:	4413      	add	r3, r2
 80139de:	105b      	asrs	r3, r3, #1
 80139e0:	425b      	negs	r3, r3
			bound_d_y = (int16_t) row -
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	440b      	add	r3, r1
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8

		bound_u_y = (int16_t) row +
 80139ec:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80139f0:	b299      	uxth	r1, r3
				(((int16_t)roi_xy_size & 0xf) / 2);
 80139f2:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 80139f6:	f003 020f 	and.w	r2, r3, #15
 80139fa:	0fd3      	lsrs	r3, r2, #31
 80139fc:	4413      	add	r3, r2
 80139fe:	105b      	asrs	r3, r3, #1
		bound_u_y = (int16_t) row +
 8013a00:	b29b      	uxth	r3, r3
 8013a02:	440b      	add	r3, r1
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
			"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013a0a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d133      	bne.n	8013a7a <VL53L1_f_040+0x1cc>
		bound_l_x =  (2 * bound_l_x) - 15 +
 8013a12:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8013a16:	b29a      	uxth	r2, r3
 8013a18:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8013a1c:	4413      	add	r3, r2
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	005b      	lsls	r3, r3, #1
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	3b0f      	subs	r3, #15
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
				(2 * (int16_t)centre_offset_x);
		bound_r_x =  (2 * bound_r_x) - 15 +
 8013a2c:	f997 30cf 	ldrsb.w	r3, [r7, #207]	; 0xcf
 8013a30:	b29a      	uxth	r2, r3
 8013a32:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8013a36:	4413      	add	r3, r2
 8013a38:	b29b      	uxth	r3, r3
 8013a3a:	005b      	lsls	r3, r3, #1
 8013a3c:	b29b      	uxth	r3, r3
 8013a3e:	3b0f      	subs	r3, #15
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
				(2 * (int16_t)centre_offset_x);
		bound_u_y =  (2 * bound_u_y) - 15 +
 8013a46:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8013a4a:	b29a      	uxth	r2, r3
 8013a4c:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 8013a50:	4413      	add	r3, r2
 8013a52:	b29b      	uxth	r3, r3
 8013a54:	005b      	lsls	r3, r3, #1
 8013a56:	b29b      	uxth	r3, r3
 8013a58:	3b0f      	subs	r3, #15
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				(2 * (int16_t)centre_offset_y);
		bound_d_y =  (2 * bound_d_y) - 15 +
 8013a60:	f997 3120 	ldrsb.w	r3, [r7, #288]	; 0x120
 8013a64:	b29a      	uxth	r2, r3
 8013a66:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8013a6a:	4413      	add	r3, r2
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	005b      	lsls	r3, r3, #1
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	3b0f      	subs	r3, #15
 8013a74:	b29b      	uxth	r3, r3
 8013a76:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
		"Bound_d_y", bound_d_y);




	if (status == VL53L1_ERROR_NONE) {
 8013a7a:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	f040 8135 	bne.w	8013cee <VL53L1_f_040+0x440>
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013a84:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	; 0xfe
 8013a88:	17da      	asrs	r2, r3, #31
 8013a8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013a8e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013a92:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8013a96:	17da      	asrs	r2, r3, #31
 8013a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013aa0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8013aaa:	fb02 f203 	mul.w	r2, r2, r3
 8013aae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013ab2:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8013ab6:	4601      	mov	r1, r0
 8013ab8:	fb01 f303 	mul.w	r3, r1, r3
 8013abc:	4413      	add	r3, r2
 8013abe:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8013ac2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013ac6:	fba2 4501 	umull	r4, r5, r2, r1
 8013aca:	442b      	add	r3, r5
 8013acc:	461d      	mov	r5, r3
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013ace:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 8013ad2:	17da      	asrs	r2, r3, #31
 8013ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013ad8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
					((int64_t)ygradient));
 8013adc:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8013ae0:	17da      	asrs	r2, r3, #31
 8013ae2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013ae6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
			((int64_t)xgradient)) + ((int64_t)bound_d_y *
 8013aea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8013aee:	460b      	mov	r3, r1
 8013af0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8013af4:	fb02 f203 	mul.w	r2, r2, r3
 8013af8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013afc:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
 8013b00:	4601      	mov	r1, r0
 8013b02:	fb01 f303 	mul.w	r3, r1, r3
 8013b06:	4413      	add	r3, r2
 8013b08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8013b0c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8013b10:	fba2 8901 	umull	r8, r9, r2, r1
 8013b14:	444b      	add	r3, r9
 8013b16:	4699      	mov	r9, r3
		xtalk_rate_ll  = ((int64_t)bound_l_x *
 8013b18:	eb14 0308 	adds.w	r3, r4, r8
 8013b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013b1e:	eb45 0309 	adc.w	r3, r5, r9
 8013b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b24:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8013b28:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		xtalk_rate_ll  = do_division_s((xtalk_rate_ll + 1), 2);
 8013b2c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8013b30:	1c51      	adds	r1, r2, #1
 8013b32:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8013b36:	f143 0300 	adc.w	r3, r3, #0
 8013b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013b3e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8013b42:	460b      	mov	r3, r1
 8013b44:	0fdb      	lsrs	r3, r3, #31
 8013b46:	2200      	movs	r2, #0
 8013b48:	643b      	str	r3, [r7, #64]	; 0x40
 8013b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8013b4c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8013b50:	4623      	mov	r3, r4
 8013b52:	4602      	mov	r2, r0
 8013b54:	189b      	adds	r3, r3, r2
 8013b56:	63bb      	str	r3, [r7, #56]	; 0x38
 8013b58:	460b      	mov	r3, r1
 8013b5a:	462a      	mov	r2, r5
 8013b5c:	eb42 0303 	adc.w	r3, r2, r3
 8013b60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b62:	f04f 0200 	mov.w	r2, #0
 8013b66:	f04f 0300 	mov.w	r3, #0
 8013b6a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8013b6e:	4621      	mov	r1, r4
 8013b70:	084a      	lsrs	r2, r1, #1
 8013b72:	4629      	mov	r1, r5
 8013b74:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013b78:	4629      	mov	r1, r5
 8013b7a:	104b      	asrs	r3, r1, #1
 8013b7c:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
		xtalk_rate_ll += ((int64_t)mean_offset * 4);
 8013b80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013b84:	2200      	movs	r2, #0
 8013b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013b8e:	f04f 0000 	mov.w	r0, #0
 8013b92:	f04f 0100 	mov.w	r1, #0
 8013b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013b9a:	462b      	mov	r3, r5
 8013b9c:	0099      	lsls	r1, r3, #2
 8013b9e:	4623      	mov	r3, r4
 8013ba0:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8013ba4:	4623      	mov	r3, r4
 8013ba6:	0098      	lsls	r0, r3, #2
 8013ba8:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8013bac:	1814      	adds	r4, r2, r0
 8013bae:	633c      	str	r4, [r7, #48]	; 0x30
 8013bb0:	414b      	adcs	r3, r1
 8013bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8013bb4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013bb8:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0

		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013bbc:	f9b7 30fc 	ldrsh.w	r3, [r7, #252]	; 0xfc
 8013bc0:	17da      	asrs	r2, r3, #31
 8013bc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013bc6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013bca:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8013bce:	17da      	asrs	r2, r3, #31
 8013bd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013bd4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013bd8:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8013bdc:	462b      	mov	r3, r5
 8013bde:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8013be2:	4642      	mov	r2, r8
 8013be4:	fb02 f203 	mul.w	r2, r2, r3
 8013be8:	464b      	mov	r3, r9
 8013bea:	4621      	mov	r1, r4
 8013bec:	fb01 f303 	mul.w	r3, r1, r3
 8013bf0:	4413      	add	r3, r2
 8013bf2:	4622      	mov	r2, r4
 8013bf4:	4641      	mov	r1, r8
 8013bf6:	fba2 ab01 	umull	sl, fp, r2, r1
 8013bfa:	445b      	add	r3, fp
 8013bfc:	469b      	mov	fp, r3
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013bfe:	f9b7 30fa 	ldrsh.w	r3, [r7, #250]	; 0xfa
 8013c02:	17da      	asrs	r2, r3, #31
 8013c04:	67bb      	str	r3, [r7, #120]	; 0x78
 8013c06:	67fa      	str	r2, [r7, #124]	; 0x7c
			((int64_t)ygradient));
 8013c08:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 8013c0c:	17da      	asrs	r2, r3, #31
 8013c0e:	673b      	str	r3, [r7, #112]	; 0x70
 8013c10:	677a      	str	r2, [r7, #116]	; 0x74
			((int64_t)xgradient)) + ((int64_t)bound_u_y *
 8013c12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8013c16:	462b      	mov	r3, r5
 8013c18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8013c1c:	4642      	mov	r2, r8
 8013c1e:	fb02 f203 	mul.w	r2, r2, r3
 8013c22:	464b      	mov	r3, r9
 8013c24:	4621      	mov	r1, r4
 8013c26:	fb01 f303 	mul.w	r3, r1, r3
 8013c2a:	4413      	add	r3, r2
 8013c2c:	4622      	mov	r2, r4
 8013c2e:	4641      	mov	r1, r8
 8013c30:	fba2 1201 	umull	r1, r2, r2, r1
 8013c34:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013c38:	460a      	mov	r2, r1
 8013c3a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8013c3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8013c42:	4413      	add	r3, r2
 8013c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		xtalk_rate_ur  = ((int64_t)bound_r_x *
 8013c48:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8013c4c:	460b      	mov	r3, r1
 8013c4e:	eb1a 0303 	adds.w	r3, sl, r3
 8013c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8013c54:	4613      	mov	r3, r2
 8013c56:	eb4b 0303 	adc.w	r3, fp, r3
 8013c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c5c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8013c60:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		xtalk_rate_ur  = do_division_s((xtalk_rate_ur + 1), 2);
 8013c64:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8013c68:	1c51      	adds	r1, r2, #1
 8013c6a:	66b9      	str	r1, [r7, #104]	; 0x68
 8013c6c:	f143 0300 	adc.w	r3, r3, #0
 8013c70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013c72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013c76:	460b      	mov	r3, r1
 8013c78:	0fdb      	lsrs	r3, r3, #31
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	623b      	str	r3, [r7, #32]
 8013c7e:	627a      	str	r2, [r7, #36]	; 0x24
 8013c80:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8013c84:	4623      	mov	r3, r4
 8013c86:	4602      	mov	r2, r0
 8013c88:	189b      	adds	r3, r3, r2
 8013c8a:	61bb      	str	r3, [r7, #24]
 8013c8c:	460b      	mov	r3, r1
 8013c8e:	462a      	mov	r2, r5
 8013c90:	eb42 0303 	adc.w	r3, r2, r3
 8013c94:	61fb      	str	r3, [r7, #28]
 8013c96:	f04f 0200 	mov.w	r2, #0
 8013c9a:	f04f 0300 	mov.w	r3, #0
 8013c9e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8013ca2:	4621      	mov	r1, r4
 8013ca4:	084a      	lsrs	r2, r1, #1
 8013ca6:	4629      	mov	r1, r5
 8013ca8:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013cac:	4629      	mov	r1, r5
 8013cae:	104b      	asrs	r3, r1, #1
 8013cb0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		xtalk_rate_ur += ((int64_t)mean_offset * 4);
 8013cb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013cb8:	2200      	movs	r2, #0
 8013cba:	663b      	str	r3, [r7, #96]	; 0x60
 8013cbc:	667a      	str	r2, [r7, #100]	; 0x64
 8013cbe:	f04f 0200 	mov.w	r2, #0
 8013cc2:	f04f 0300 	mov.w	r3, #0
 8013cc6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8013cca:	4629      	mov	r1, r5
 8013ccc:	008b      	lsls	r3, r1, #2
 8013cce:	4621      	mov	r1, r4
 8013cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013cd4:	4621      	mov	r1, r4
 8013cd6:	008a      	lsls	r2, r1, #2
 8013cd8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8013cdc:	1884      	adds	r4, r0, r2
 8013cde:	613c      	str	r4, [r7, #16]
 8013ce0:	eb41 0303 	adc.w	r3, r1, r3
 8013ce4:	617b      	str	r3, [r7, #20]
 8013ce6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013cea:	e9c7 343a 	strd	r3, r4, [r7, #232]	; 0xe8
		"    %-48s : %10d\n",
		"xtalk_rate_ur", xtalk_rate_ur);



	if (status == VL53L1_ERROR_NONE)
 8013cee:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d132      	bne.n	8013d5c <VL53L1_f_040+0x4ae>
		xtalk_avg = do_division_s(
 8013cf6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8013cfa:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8013cfe:	1884      	adds	r4, r0, r2
 8013d00:	65bc      	str	r4, [r7, #88]	; 0x58
 8013d02:	eb41 0303 	adc.w	r3, r1, r3
 8013d06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013d08:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8013d0c:	460b      	mov	r3, r1
 8013d0e:	3301      	adds	r3, #1
 8013d10:	653b      	str	r3, [r7, #80]	; 0x50
 8013d12:	4613      	mov	r3, r2
 8013d14:	f143 0300 	adc.w	r3, r3, #0
 8013d18:	657b      	str	r3, [r7, #84]	; 0x54
 8013d1a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8013d1e:	460b      	mov	r3, r1
 8013d20:	0fdb      	lsrs	r3, r3, #31
 8013d22:	2200      	movs	r2, #0
 8013d24:	60bb      	str	r3, [r7, #8]
 8013d26:	60fa      	str	r2, [r7, #12]
 8013d28:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013d2c:	4623      	mov	r3, r4
 8013d2e:	4602      	mov	r2, r0
 8013d30:	189b      	adds	r3, r3, r2
 8013d32:	603b      	str	r3, [r7, #0]
 8013d34:	460b      	mov	r3, r1
 8013d36:	462a      	mov	r2, r5
 8013d38:	eb42 0303 	adc.w	r3, r2, r3
 8013d3c:	607b      	str	r3, [r7, #4]
 8013d3e:	f04f 0200 	mov.w	r2, #0
 8013d42:	f04f 0300 	mov.w	r3, #0
 8013d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013d4a:	4621      	mov	r1, r4
 8013d4c:	084a      	lsrs	r2, r1, #1
 8013d4e:	4629      	mov	r1, r5
 8013d50:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8013d54:	4629      	mov	r1, r5
 8013d56:	104b      	asrs	r3, r1, #1
 8013d58:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
			"    %-48s : %10d\n",
			"xtalk_avg", xtalk_avg);



	if (status == VL53L1_ERROR_NONE)
 8013d5c:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d109      	bne.n	8013d78 <VL53L1_f_040+0x4ca>
		if (xtalk_avg < 0)
 8013d64:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	da05      	bge.n	8013d78 <VL53L1_f_040+0x4ca>
			xtalk_avg = 0;
 8013d6c:	f04f 0200 	mov.w	r2, #0
 8013d70:	f04f 0300 	mov.w	r3, #0
 8013d74:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0





	*xtalk_rate_kcps = (uint32_t) xtalk_avg;
 8013d78:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8013d7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8013d80:	601a      	str	r2, [r3, #0]
			"    %-48s : %10d\n",
			"xtalk_rate_kcps", xtalk_avg);

	LOG_FUNCTION_END(status);

	return status;
 8013d82:	f997 30df 	ldrsb.w	r3, [r7, #223]	; 0xdf
}
 8013d86:	4618      	mov	r0, r3
 8013d88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8013d8c:	46bd      	mov	sp, r7
 8013d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013d92 <VL53L1_f_041>:
	VL53L1_histogram_bin_data_t    *phist_data,
	VL53L1_xtalk_histogram_shape_t *pxtalk_data,
	uint32_t                        xtalk_rate_kcps,
	VL53L1_histogram_bin_data_t    *pxtalkcount_data
	)
{
 8013d92:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013d96:	b09a      	sub	sp, #104	; 0x68
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6478      	str	r0, [r7, #68]	; 0x44
 8013d9c:	6439      	str	r1, [r7, #64]	; 0x40
 8013d9e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8013da0:	63bb      	str	r3, [r7, #56]	; 0x38


	VL53L1_Error status              = VL53L1_ERROR_NONE;
 8013da2:	2300      	movs	r3, #0
 8013da4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	uint64_t xtalk_events_per_spad = 0;
 8013da8:	f04f 0200 	mov.w	r2, #0
 8013dac:	f04f 0300 	mov.w	r3, #0
 8013db0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	uint64_t xtalk_total_events = 0;
 8013db4:	f04f 0200 	mov.w	r2, #0
 8013db8:	f04f 0300 	mov.w	r3, #0
 8013dbc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	uint64_t xtalk_temp_bin = 0;
 8013dc0:	f04f 0200 	mov.w	r2, #0
 8013dc4:	f04f 0300 	mov.w	r3, #0
 8013dc8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint8_t  i = 0;
 8013dcc:	2300      	movs	r3, #0
 8013dce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			"    %-48s : %10d\n",
			"pk_duration_internal", phist_data->peak_duration_us);



	xtalk_events_per_spad = do_division_u((((uint64_t)xtalk_rate_kcps *
 8013dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	633b      	str	r3, [r7, #48]	; 0x30
 8013dd8:	637a      	str	r2, [r7, #52]	; 0x34
 8013dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013de0:	2200      	movs	r2, #0
 8013de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8013de4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013de6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8013dea:	460b      	mov	r3, r1
 8013dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013dee:	fb02 f203 	mul.w	r2, r2, r3
 8013df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013df4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8013df8:	4601      	mov	r1, r0
 8013dfa:	fb01 f303 	mul.w	r3, r1, r3
 8013dfe:	4413      	add	r3, r2
 8013e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013e04:	fba2 4501 	umull	r4, r5, r2, r1
 8013e08:	442b      	add	r3, r5
 8013e0a:	461d      	mov	r5, r3
 8013e0c:	f514 73fa 	adds.w	r3, r4, #500	; 0x1f4
 8013e10:	623b      	str	r3, [r7, #32]
 8013e12:	f145 0300 	adc.w	r3, r5, #0
 8013e16:	627b      	str	r3, [r7, #36]	; 0x24
 8013e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e1c:	f04f 0300 	mov.w	r3, #0
 8013e20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8013e24:	f7ec fa4c 	bl	80002c0 <__aeabi_uldivmod>
 8013e28:	4602      	mov	r2, r0
 8013e2a:	460b      	mov	r3, r1
 8013e2c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50




	xtalk_total_events = xtalk_events_per_spad *
		(uint64_t)phist_data->result__dss_actual_effective_spads;
 8013e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e32:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8013e36:	b29b      	uxth	r3, r3
 8013e38:	2200      	movs	r2, #0
 8013e3a:	61bb      	str	r3, [r7, #24]
 8013e3c:	61fa      	str	r2, [r7, #28]
	xtalk_total_events = xtalk_events_per_spad *
 8013e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e40:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8013e44:	4622      	mov	r2, r4
 8013e46:	fb02 f203 	mul.w	r2, r2, r3
 8013e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e4c:	4629      	mov	r1, r5
 8013e4e:	fb01 f303 	mul.w	r3, r1, r3
 8013e52:	4413      	add	r3, r2
 8013e54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013e56:	4621      	mov	r1, r4
 8013e58:	fba2 ab01 	umull	sl, fp, r2, r1
 8013e5c:	445b      	add	r3, fp
 8013e5e:	469b      	mov	fp, r3
 8013e60:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
 8013e64:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events), 256);
 8013e68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8013e6c:	f04f 0200 	mov.w	r2, #0
 8013e70:	f04f 0300 	mov.w	r3, #0
 8013e74:	0a02      	lsrs	r2, r0, #8
 8013e76:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8013e7a:	0a0b      	lsrs	r3, r1, #8
 8013e7c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	xtalk_total_events = do_division_u((xtalk_total_events + 1024), 2048);
 8013e80:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8013e84:	f512 6180 	adds.w	r1, r2, #1024	; 0x400
 8013e88:	6139      	str	r1, [r7, #16]
 8013e8a:	f143 0300 	adc.w	r3, r3, #0
 8013e8e:	617b      	str	r3, [r7, #20]
 8013e90:	f04f 0200 	mov.w	r2, #0
 8013e94:	f04f 0300 	mov.w	r3, #0
 8013e98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8013e9c:	4621      	mov	r1, r4
 8013e9e:	0aca      	lsrs	r2, r1, #11
 8013ea0:	4629      	mov	r1, r5
 8013ea2:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8013ea6:	4629      	mov	r1, r5
 8013ea8:	0acb      	lsrs	r3, r1, #11
 8013eaa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if (xtalk_total_events > 0xFFFFFFFF)
 8013eae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8013eb2:	2b01      	cmp	r3, #1
 8013eb4:	d305      	bcc.n	8013ec2 <VL53L1_f_041+0x130>
		xtalk_total_events = 0xFFFFFFFF;
 8013eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8013eba:	f04f 0300 	mov.w	r3, #0
 8013ebe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60





	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013ec8:	e041      	b.n	8013f4e <VL53L1_f_041+0x1bc>
		xtalk_temp_bin = (uint64_t)pxtalk_data->bin_data[i] *
 8013eca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013ece:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013ed0:	3302      	adds	r3, #2
 8013ed2:	009b      	lsls	r3, r3, #2
 8013ed4:	4413      	add	r3, r2
 8013ed6:	685b      	ldr	r3, [r3, #4]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	60bb      	str	r3, [r7, #8]
 8013edc:	60fa      	str	r2, [r7, #12]
 8013ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ee0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8013ee4:	4622      	mov	r2, r4
 8013ee6:	fb02 f203 	mul.w	r2, r2, r3
 8013eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013eec:	4629      	mov	r1, r5
 8013eee:	fb01 f303 	mul.w	r3, r1, r3
 8013ef2:	4413      	add	r3, r2
 8013ef4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ef6:	4621      	mov	r1, r4
 8013ef8:	fba2 8901 	umull	r8, r9, r2, r1
 8013efc:	444b      	add	r3, r9
 8013efe:	4699      	mov	r9, r3
 8013f00:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
 8013f04:	e9c7 8912 	strd	r8, r9, [r7, #72]	; 0x48
				(uint64_t)xtalk_total_events;
		xtalk_temp_bin = do_division_u((xtalk_temp_bin + 512), 1024);
 8013f08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8013f0c:	f512 7100 	adds.w	r1, r2, #512	; 0x200
 8013f10:	6039      	str	r1, [r7, #0]
 8013f12:	f143 0300 	adc.w	r3, r3, #0
 8013f16:	607b      	str	r3, [r7, #4]
 8013f18:	f04f 0200 	mov.w	r2, #0
 8013f1c:	f04f 0300 	mov.w	r3, #0
 8013f20:	e9d7 4500 	ldrd	r4, r5, [r7]
 8013f24:	4621      	mov	r1, r4
 8013f26:	0a8a      	lsrs	r2, r1, #10
 8013f28:	4629      	mov	r1, r5
 8013f2a:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8013f2e:	4629      	mov	r1, r5
 8013f30:	0a8b      	lsrs	r3, r1, #10
 8013f32:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		pxtalkcount_data->bin_data[i] = (uint32_t)xtalk_temp_bin;
 8013f36:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8013f3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f3e:	3206      	adds	r2, #6
 8013f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < pxtalk_data->VL53L1_p_024; i++) {
 8013f44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013f48:	3301      	adds	r3, #1
 8013f4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f50:	7a9b      	ldrb	r3, [r3, #10]
 8013f52:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d3b7      	bcc.n	8013eca <VL53L1_f_041+0x138>
			"bin_data", pxtalkcount_data->bin_data[i]);
	}

	LOG_FUNCTION_END(status);

	return status;
 8013f5a:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	3768      	adds	r7, #104	; 0x68
 8013f62:	46bd      	mov	sp, r7
 8013f64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013f68 <VL53L1_init_zone_config_structure>:
	uint8_t y_inc,
	uint8_t y_zones,
	uint8_t width,
	uint8_t height,
	VL53L1_zone_config_t   *pdata)
{
 8013f68:	b590      	push	{r4, r7, lr}
 8013f6a:	b085      	sub	sp, #20
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	4604      	mov	r4, r0
 8013f70:	4608      	mov	r0, r1
 8013f72:	4611      	mov	r1, r2
 8013f74:	461a      	mov	r2, r3
 8013f76:	4623      	mov	r3, r4
 8013f78:	71fb      	strb	r3, [r7, #7]
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	71bb      	strb	r3, [r7, #6]
 8013f7e:	460b      	mov	r3, r1
 8013f80:	717b      	strb	r3, [r7, #5]
 8013f82:	4613      	mov	r3, r2
 8013f84:	713b      	strb	r3, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013f86:	2300      	movs	r3, #0
 8013f88:	72fb      	strb	r3, [r7, #11]

	uint8_t  x  = 0;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	73fb      	strb	r3, [r7, #15]
	uint8_t  y  = 0;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	73bb      	strb	r3, [r7, #14]
	uint16_t  i  = 0;
 8013f92:	2300      	movs	r3, #0
 8013f94:	81bb      	strh	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pdata->max_zones = VL53L1_MAX_USER_ZONES;
 8013f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f98:	2210      	movs	r2, #16
 8013f9a:	701a      	strb	r2, [r3, #0]

	i = 0;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	81bb      	strh	r3, [r7, #12]

	for (x = 0 ; x < x_zones ; x++) {
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	73fb      	strb	r3, [r7, #15]
 8013fa4:	e046      	b.n	8014034 <VL53L1_init_zone_config_structure+0xcc>
		for (y = 0 ; y <  y_zones ; y++) {
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	73bb      	strb	r3, [r7, #14]
 8013faa:	e03b      	b.n	8014024 <VL53L1_init_zone_config_structure+0xbc>

			if (i < VL53L1_MAX_USER_ZONES) {
 8013fac:	89bb      	ldrh	r3, [r7, #12]
 8013fae:	2b0f      	cmp	r3, #15
 8013fb0:	d832      	bhi.n	8014018 <VL53L1_init_zone_config_structure+0xb0>

				pdata->active_zones = (uint8_t)i;
 8013fb2:	89bb      	ldrh	r3, [r7, #12]
 8013fb4:	b2da      	uxtb	r2, r3
 8013fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fb8:	705a      	strb	r2, [r3, #1]
				pdata->user_zones[i].height   = height;
 8013fba:	89bb      	ldrh	r3, [r7, #12]
 8013fbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fbe:	3306      	adds	r3, #6
 8013fc0:	009b      	lsls	r3, r3, #2
 8013fc2:	4413      	add	r3, r2
 8013fc4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013fc8:	71da      	strb	r2, [r3, #7]
				pdata->user_zones[i].width    = width;
 8013fca:	89bb      	ldrh	r3, [r7, #12]
 8013fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fce:	3306      	adds	r3, #6
 8013fd0:	009b      	lsls	r3, r3, #2
 8013fd2:	4413      	add	r3, r2
 8013fd4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013fd8:	719a      	strb	r2, [r3, #6]
				pdata->user_zones[i].x_centre =
						x_off + (x * x_inc);
 8013fda:	7bfa      	ldrb	r2, [r7, #15]
 8013fdc:	79bb      	ldrb	r3, [r7, #6]
 8013fde:	fb12 f303 	smulbb	r3, r2, r3
 8013fe2:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].x_centre =
 8013fe4:	89bb      	ldrh	r3, [r7, #12]
						x_off + (x * x_inc);
 8013fe6:	79fa      	ldrb	r2, [r7, #7]
 8013fe8:	440a      	add	r2, r1
 8013fea:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].x_centre =
 8013fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fee:	3306      	adds	r3, #6
 8013ff0:	009b      	lsls	r3, r3, #2
 8013ff2:	4413      	add	r3, r2
 8013ff4:	460a      	mov	r2, r1
 8013ff6:	711a      	strb	r2, [r3, #4]
				pdata->user_zones[i].y_centre =
						y_off + (y * y_inc);
 8013ff8:	7bba      	ldrb	r2, [r7, #14]
 8013ffa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013ffe:	fb12 f303 	smulbb	r3, r2, r3
 8014002:	b2d9      	uxtb	r1, r3
				pdata->user_zones[i].y_centre =
 8014004:	89bb      	ldrh	r3, [r7, #12]
						y_off + (y * y_inc);
 8014006:	793a      	ldrb	r2, [r7, #4]
 8014008:	440a      	add	r2, r1
 801400a:	b2d1      	uxtb	r1, r2
				pdata->user_zones[i].y_centre =
 801400c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801400e:	3306      	adds	r3, #6
 8014010:	009b      	lsls	r3, r3, #2
 8014012:	4413      	add	r3, r2
 8014014:	460a      	mov	r2, r1
 8014016:	715a      	strb	r2, [r3, #5]
			}

			i++;
 8014018:	89bb      	ldrh	r3, [r7, #12]
 801401a:	3301      	adds	r3, #1
 801401c:	81bb      	strh	r3, [r7, #12]
		for (y = 0 ; y <  y_zones ; y++) {
 801401e:	7bbb      	ldrb	r3, [r7, #14]
 8014020:	3301      	adds	r3, #1
 8014022:	73bb      	strb	r3, [r7, #14]
 8014024:	7bba      	ldrb	r2, [r7, #14]
 8014026:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801402a:	429a      	cmp	r2, r3
 801402c:	d3be      	bcc.n	8013fac <VL53L1_init_zone_config_structure+0x44>
	for (x = 0 ; x < x_zones ; x++) {
 801402e:	7bfb      	ldrb	r3, [r7, #15]
 8014030:	3301      	adds	r3, #1
 8014032:	73fb      	strb	r3, [r7, #15]
 8014034:	7bfa      	ldrb	r2, [r7, #15]
 8014036:	797b      	ldrb	r3, [r7, #5]
 8014038:	429a      	cmp	r2, r3
 801403a:	d3b4      	bcc.n	8013fa6 <VL53L1_init_zone_config_structure+0x3e>
		}
	}

	status = VL53L1_init_zone_config_histogram_bins(pdata);
 801403c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801403e:	f000 f86c 	bl	801411a <VL53L1_init_zone_config_histogram_bins>
 8014042:	4603      	mov	r3, r0
 8014044:	72fb      	strb	r3, [r7, #11]


	LOG_FUNCTION_END(status);

	return status;
 8014046:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801404a:	4618      	mov	r0, r3
 801404c:	3714      	adds	r7, #20
 801404e:	46bd      	mov	sp, r7
 8014050:	bd90      	pop	{r4, r7, pc}

08014052 <VL53L1_zone_preset_xtalk_planar>:


VL53L1_Error VL53L1_zone_preset_xtalk_planar(
	VL53L1_general_config_t	*pgeneral,
	VL53L1_zone_config_t    *pzone_cfg)
{
 8014052:	b580      	push	{r7, lr}
 8014054:	b084      	sub	sp, #16
 8014056:	af00      	add	r7, sp, #0
 8014058:	6078      	str	r0, [r7, #4]
 801405a:	6039      	str	r1, [r7, #0]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801405c:	2300      	movs	r3, #0
 801405e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");


	pgeneral->global_config__stream_divider = 0x05;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2205      	movs	r2, #5
 8014064:	705a      	strb	r2, [r3, #1]


	pzone_cfg->active_zones                 = 0x04;
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	2204      	movs	r2, #4
 801406a:	705a      	strb	r2, [r3, #1]

	pzone_cfg->user_zones[0].height         = 15;
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	220f      	movs	r2, #15
 8014070:	77da      	strb	r2, [r3, #31]
	pzone_cfg->user_zones[0].width          = 7;
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	2207      	movs	r2, #7
 8014076:	779a      	strb	r2, [r3, #30]
	pzone_cfg->user_zones[0].x_centre       = 4;
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	2204      	movs	r2, #4
 801407c:	771a      	strb	r2, [r3, #28]
	pzone_cfg->user_zones[0].y_centre       = 8;
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	2208      	movs	r2, #8
 8014082:	775a      	strb	r2, [r3, #29]

	pzone_cfg->user_zones[1].height         = 15;
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	220f      	movs	r2, #15
 8014088:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pzone_cfg->user_zones[1].width          = 7;
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	2207      	movs	r2, #7
 8014090:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pzone_cfg->user_zones[1].x_centre       = 12;
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	220c      	movs	r2, #12
 8014098:	f883 2020 	strb.w	r2, [r3, #32]
	pzone_cfg->user_zones[1].y_centre       = 8;
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	2208      	movs	r2, #8
 80140a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	pzone_cfg->user_zones[2].height         = 7;
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	2207      	movs	r2, #7
 80140a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pzone_cfg->user_zones[2].width          = 15;
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	220f      	movs	r2, #15
 80140b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pzone_cfg->user_zones[2].x_centre       = 8;
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	2208      	movs	r2, #8
 80140b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pzone_cfg->user_zones[2].y_centre       = 4;
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	2204      	movs	r2, #4
 80140c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	pzone_cfg->user_zones[3].height         = 7;
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	2207      	movs	r2, #7
 80140c8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pzone_cfg->user_zones[3].width          = 15;
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	220f      	movs	r2, #15
 80140d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pzone_cfg->user_zones[3].x_centre       = 8;
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	2208      	movs	r2, #8
 80140d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pzone_cfg->user_zones[3].y_centre       = 12;
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	220c      	movs	r2, #12
 80140e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29



	pzone_cfg->user_zones[4].height         = 15;
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	220f      	movs	r2, #15
 80140e8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	pzone_cfg->user_zones[4].width          = 15;
 80140ec:	683b      	ldr	r3, [r7, #0]
 80140ee:	220f      	movs	r2, #15
 80140f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	pzone_cfg->user_zones[4].x_centre       = 8;
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	2208      	movs	r2, #8
 80140f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	pzone_cfg->user_zones[4].y_centre       = 8;
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	2208      	movs	r2, #8
 8014100:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	status = VL53L1_init_zone_config_histogram_bins(pzone_cfg);
 8014104:	6838      	ldr	r0, [r7, #0]
 8014106:	f000 f808 	bl	801411a <VL53L1_init_zone_config_histogram_bins>
 801410a:	4603      	mov	r3, r0
 801410c:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(status);

	return status;
 801410e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014112:	4618      	mov	r0, r3
 8014114:	3710      	adds	r7, #16
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}

0801411a <VL53L1_init_zone_config_histogram_bins>:


VL53L1_Error VL53L1_init_zone_config_histogram_bins(
	VL53L1_zone_config_t   *pdata)
{
 801411a:	b480      	push	{r7}
 801411c:	b085      	sub	sp, #20
 801411e:	af00      	add	r7, sp, #0
 8014120:	6078      	str	r0, [r7, #4]


	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014122:	2300      	movs	r3, #0
 8014124:	73bb      	strb	r3, [r7, #14]

	uint8_t i;

	LOG_FUNCTION_START("");

	for (i = 0; i < pdata->max_zones; i++)
 8014126:	2300      	movs	r3, #0
 8014128:	73fb      	strb	r3, [r7, #15]
 801412a:	e008      	b.n	801413e <VL53L1_init_zone_config_histogram_bins+0x24>
		pdata->bin_config[i] = VL53L1_ZONECONFIG_BINCONFIG__LOWAMB;
 801412c:	7bfb      	ldrb	r3, [r7, #15]
 801412e:	687a      	ldr	r2, [r7, #4]
 8014130:	4413      	add	r3, r2
 8014132:	2201      	movs	r2, #1
 8014134:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	for (i = 0; i < pdata->max_zones; i++)
 8014138:	7bfb      	ldrb	r3, [r7, #15]
 801413a:	3301      	adds	r3, #1
 801413c:	73fb      	strb	r3, [r7, #15]
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	781b      	ldrb	r3, [r3, #0]
 8014142:	7bfa      	ldrb	r2, [r7, #15]
 8014144:	429a      	cmp	r2, r3
 8014146:	d3f1      	bcc.n	801412c <VL53L1_init_zone_config_histogram_bins+0x12>

	LOG_FUNCTION_END(status);

	return status;
 8014148:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 801414c:	4618      	mov	r0, r3
 801414e:	3714      	adds	r7, #20
 8014150:	46bd      	mov	sp, r7
 8014152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014156:	4770      	bx	lr

08014158 <_I2CWrite>:
unsigned char SPI2C_Buffer[256];

/* Private functions prototypes */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay);

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8014158:	b580      	push	{r7, lr}
 801415a:	b084      	sub	sp, #16
 801415c:	af00      	add	r7, sp, #0
 801415e:	60f8      	str	r0, [r7, #12]
 8014160:	60b9      	str	r1, [r7, #8]
 8014162:	607a      	str	r2, [r7, #4]
	return Dev->IO.WriteReg(Dev->IO.Address, pdata, count);
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	68db      	ldr	r3, [r3, #12]
 8014168:	68fa      	ldr	r2, [r7, #12]
 801416a:	8910      	ldrh	r0, [r2, #8]
 801416c:	687a      	ldr	r2, [r7, #4]
 801416e:	b292      	uxth	r2, r2
 8014170:	68b9      	ldr	r1, [r7, #8]
 8014172:	4798      	blx	r3
 8014174:	4603      	mov	r3, r0
}
 8014176:	4618      	mov	r0, r3
 8014178:	3710      	adds	r7, #16
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}

0801417e <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 801417e:	b580      	push	{r7, lr}
 8014180:	b084      	sub	sp, #16
 8014182:	af00      	add	r7, sp, #0
 8014184:	60f8      	str	r0, [r7, #12]
 8014186:	60b9      	str	r1, [r7, #8]
 8014188:	607a      	str	r2, [r7, #4]
	return Dev->IO.ReadReg(Dev->IO.Address, pdata, count);
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	691b      	ldr	r3, [r3, #16]
 801418e:	68fa      	ldr	r2, [r7, #12]
 8014190:	8910      	ldrh	r0, [r2, #8]
 8014192:	687a      	ldr	r2, [r7, #4]
 8014194:	b292      	uxth	r2, r2
 8014196:	68b9      	ldr	r1, [r7, #8]
 8014198:	4798      	blx	r3
 801419a:	4603      	mov	r3, r0
}
 801419c:	4618      	mov	r0, r3
 801419e:	3710      	adds	r7, #16
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd80      	pop	{r7, pc}

080141a4 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b086      	sub	sp, #24
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	60f8      	str	r0, [r7, #12]
 80141ac:	607a      	str	r2, [r7, #4]
 80141ae:	603b      	str	r3, [r7, #0]
 80141b0:	460b      	mov	r3, r1
 80141b2:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80141b4:	2300      	movs	r3, #0
 80141b6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80141b8:	683b      	ldr	r3, [r7, #0]
 80141ba:	2bff      	cmp	r3, #255	; 0xff
 80141bc:	d902      	bls.n	80141c4 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 80141be:	f06f 0303 	mvn.w	r3, #3
 80141c2:	e01d      	b.n	8014200 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 80141c4:	897b      	ldrh	r3, [r7, #10]
 80141c6:	0a1b      	lsrs	r3, r3, #8
 80141c8:	b29b      	uxth	r3, r3
 80141ca:	b2da      	uxtb	r2, r3
 80141cc:	4b0e      	ldr	r3, [pc, #56]	; (8014208 <VL53L1_WriteMulti+0x64>)
 80141ce:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80141d0:	897b      	ldrh	r3, [r7, #10]
 80141d2:	b2da      	uxtb	r2, r3
 80141d4:	4b0c      	ldr	r3, [pc, #48]	; (8014208 <VL53L1_WriteMulti+0x64>)
 80141d6:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 80141d8:	683a      	ldr	r2, [r7, #0]
 80141da:	6879      	ldr	r1, [r7, #4]
 80141dc:	480b      	ldr	r0, [pc, #44]	; (801420c <VL53L1_WriteMulti+0x68>)
 80141de:	f004 ff9b 	bl	8019118 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	3302      	adds	r3, #2
 80141e6:	461a      	mov	r2, r3
 80141e8:	4907      	ldr	r1, [pc, #28]	; (8014208 <VL53L1_WriteMulti+0x64>)
 80141ea:	68f8      	ldr	r0, [r7, #12]
 80141ec:	f7ff ffb4 	bl	8014158 <_I2CWrite>
 80141f0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d001      	beq.n	80141fc <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80141f8:	23f3      	movs	r3, #243	; 0xf3
 80141fa:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 80141fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014200:	4618      	mov	r0, r3
 8014202:	3718      	adds	r7, #24
 8014204:	46bd      	mov	sp, r7
 8014206:	bd80      	pop	{r7, pc}
 8014208:	20008438 	.word	0x20008438
 801420c:	2000843a 	.word	0x2000843a

08014210 <VL53L1_ReadMulti>:

VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8014210:	b580      	push	{r7, lr}
 8014212:	b086      	sub	sp, #24
 8014214:	af00      	add	r7, sp, #0
 8014216:	60f8      	str	r0, [r7, #12]
 8014218:	607a      	str	r2, [r7, #4]
 801421a:	603b      	str	r3, [r7, #0]
 801421c:	460b      	mov	r3, r1
 801421e:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014220:	2300      	movs	r3, #0
 8014222:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014224:	897b      	ldrh	r3, [r7, #10]
 8014226:	0a1b      	lsrs	r3, r3, #8
 8014228:	b29b      	uxth	r3, r3
 801422a:	b2da      	uxtb	r2, r3
 801422c:	4b12      	ldr	r3, [pc, #72]	; (8014278 <VL53L1_ReadMulti+0x68>)
 801422e:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8014230:	897b      	ldrh	r3, [r7, #10]
 8014232:	b2da      	uxtb	r2, r3
 8014234:	4b10      	ldr	r3, [pc, #64]	; (8014278 <VL53L1_ReadMulti+0x68>)
 8014236:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8014238:	2202      	movs	r2, #2
 801423a:	490f      	ldr	r1, [pc, #60]	; (8014278 <VL53L1_ReadMulti+0x68>)
 801423c:	68f8      	ldr	r0, [r7, #12]
 801423e:	f7ff ff8b 	bl	8014158 <_I2CWrite>
 8014242:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8014244:	693b      	ldr	r3, [r7, #16]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d002      	beq.n	8014250 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801424a:	23f3      	movs	r3, #243	; 0xf3
 801424c:	75fb      	strb	r3, [r7, #23]
        goto done;
 801424e:	e00c      	b.n	801426a <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8014250:	683a      	ldr	r2, [r7, #0]
 8014252:	6879      	ldr	r1, [r7, #4]
 8014254:	68f8      	ldr	r0, [r7, #12]
 8014256:	f7ff ff92 	bl	801417e <_I2CRead>
 801425a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801425c:	693b      	ldr	r3, [r7, #16]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d002      	beq.n	8014268 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014262:	23f3      	movs	r3, #243	; 0xf3
 8014264:	75fb      	strb	r3, [r7, #23]
 8014266:	e000      	b.n	801426a <VL53L1_ReadMulti+0x5a>
    }
done:
 8014268:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 801426a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801426e:	4618      	mov	r0, r3
 8014270:	3718      	adds	r7, #24
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop
 8014278:	20008438 	.word	0x20008438

0801427c <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 801427c:	b580      	push	{r7, lr}
 801427e:	b084      	sub	sp, #16
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
 8014284:	460b      	mov	r3, r1
 8014286:	807b      	strh	r3, [r7, #2]
 8014288:	4613      	mov	r3, r2
 801428a:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 801428c:	2300      	movs	r3, #0
 801428e:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8014290:	887b      	ldrh	r3, [r7, #2]
 8014292:	0a1b      	lsrs	r3, r3, #8
 8014294:	b29b      	uxth	r3, r3
 8014296:	b2da      	uxtb	r2, r3
 8014298:	4b0c      	ldr	r3, [pc, #48]	; (80142cc <VL53L1_WrByte+0x50>)
 801429a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 801429c:	887b      	ldrh	r3, [r7, #2]
 801429e:	b2da      	uxtb	r2, r3
 80142a0:	4b0a      	ldr	r3, [pc, #40]	; (80142cc <VL53L1_WrByte+0x50>)
 80142a2:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 80142a4:	4a09      	ldr	r2, [pc, #36]	; (80142cc <VL53L1_WrByte+0x50>)
 80142a6:	787b      	ldrb	r3, [r7, #1]
 80142a8:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80142aa:	2203      	movs	r2, #3
 80142ac:	4907      	ldr	r1, [pc, #28]	; (80142cc <VL53L1_WrByte+0x50>)
 80142ae:	6878      	ldr	r0, [r7, #4]
 80142b0:	f7ff ff52 	bl	8014158 <_I2CWrite>
 80142b4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d001      	beq.n	80142c0 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80142bc:	23f3      	movs	r3, #243	; 0xf3
 80142be:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 80142c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3710      	adds	r7, #16
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	20008438 	.word	0x20008438

080142d0 <VL53L1_WrWord>:

VL53L1_Error VL53L1_WrWord(VL53L1_DEV Dev, uint16_t index, uint16_t data) {
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b084      	sub	sp, #16
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	460b      	mov	r3, r1
 80142da:	807b      	strh	r3, [r7, #2]
 80142dc:	4613      	mov	r3, r2
 80142de:	803b      	strh	r3, [r7, #0]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80142e0:	2300      	movs	r3, #0
 80142e2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80142e4:	887b      	ldrh	r3, [r7, #2]
 80142e6:	0a1b      	lsrs	r3, r3, #8
 80142e8:	b29b      	uxth	r3, r3
 80142ea:	b2da      	uxtb	r2, r3
 80142ec:	4b10      	ldr	r3, [pc, #64]	; (8014330 <VL53L1_WrWord+0x60>)
 80142ee:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 80142f0:	887b      	ldrh	r3, [r7, #2]
 80142f2:	b2da      	uxtb	r2, r3
 80142f4:	4b0e      	ldr	r3, [pc, #56]	; (8014330 <VL53L1_WrWord+0x60>)
 80142f6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data >> 8;
 80142f8:	883b      	ldrh	r3, [r7, #0]
 80142fa:	0a1b      	lsrs	r3, r3, #8
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	b2da      	uxtb	r2, r3
 8014300:	4b0b      	ldr	r3, [pc, #44]	; (8014330 <VL53L1_WrWord+0x60>)
 8014302:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = data & 0x00FF;
 8014304:	883b      	ldrh	r3, [r7, #0]
 8014306:	b2da      	uxtb	r2, r3
 8014308:	4b09      	ldr	r3, [pc, #36]	; (8014330 <VL53L1_WrWord+0x60>)
 801430a:	70da      	strb	r2, [r3, #3]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 4);
 801430c:	2204      	movs	r2, #4
 801430e:	4908      	ldr	r1, [pc, #32]	; (8014330 <VL53L1_WrWord+0x60>)
 8014310:	6878      	ldr	r0, [r7, #4]
 8014312:	f7ff ff21 	bl	8014158 <_I2CWrite>
 8014316:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d001      	beq.n	8014322 <VL53L1_WrWord+0x52>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801431e:	23f3      	movs	r3, #243	; 0xf3
 8014320:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8014322:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014326:	4618      	mov	r0, r3
 8014328:	3710      	adds	r7, #16
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	20008438 	.word	0x20008438

08014334 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8014334:	b580      	push	{r7, lr}
 8014336:	b086      	sub	sp, #24
 8014338:	af00      	add	r7, sp, #0
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	460b      	mov	r3, r1
 801433e:	607a      	str	r2, [r7, #4]
 8014340:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014342:	2300      	movs	r3, #0
 8014344:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8014346:	897b      	ldrh	r3, [r7, #10]
 8014348:	0a1b      	lsrs	r3, r3, #8
 801434a:	b29b      	uxth	r3, r3
 801434c:	b2da      	uxtb	r2, r3
 801434e:	4b12      	ldr	r3, [pc, #72]	; (8014398 <VL53L1_RdByte+0x64>)
 8014350:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8014352:	897b      	ldrh	r3, [r7, #10]
 8014354:	b2da      	uxtb	r2, r3
 8014356:	4b10      	ldr	r3, [pc, #64]	; (8014398 <VL53L1_RdByte+0x64>)
 8014358:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 801435a:	2202      	movs	r2, #2
 801435c:	490e      	ldr	r1, [pc, #56]	; (8014398 <VL53L1_RdByte+0x64>)
 801435e:	68f8      	ldr	r0, [r7, #12]
 8014360:	f7ff fefa 	bl	8014158 <_I2CWrite>
 8014364:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d002      	beq.n	8014372 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 801436c:	23f3      	movs	r3, #243	; 0xf3
 801436e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8014370:	e00c      	b.n	801438c <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8014372:	2201      	movs	r2, #1
 8014374:	6879      	ldr	r1, [r7, #4]
 8014376:	68f8      	ldr	r0, [r7, #12]
 8014378:	f7ff ff01 	bl	801417e <_I2CRead>
 801437c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801437e:	693b      	ldr	r3, [r7, #16]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d002      	beq.n	801438a <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8014384:	23f3      	movs	r3, #243	; 0xf3
 8014386:	75fb      	strb	r3, [r7, #23]
 8014388:	e000      	b.n	801438c <VL53L1_RdByte+0x58>
    }
done:
 801438a:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 801438c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014390:	4618      	mov	r0, r3
 8014392:	3718      	adds	r7, #24
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}
 8014398:	20008438 	.word	0x20008438

0801439c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 801439c:	b580      	push	{r7, lr}
 801439e:	b086      	sub	sp, #24
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	60f8      	str	r0, [r7, #12]
 80143a4:	460b      	mov	r3, r1
 80143a6:	607a      	str	r2, [r7, #4]
 80143a8:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 80143aa:	2300      	movs	r3, #0
 80143ac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 80143ae:	897b      	ldrh	r3, [r7, #10]
 80143b0:	0a1b      	lsrs	r3, r3, #8
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	b2da      	uxtb	r2, r3
 80143b6:	4b18      	ldr	r3, [pc, #96]	; (8014418 <VL53L1_RdWord+0x7c>)
 80143b8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 80143ba:	897b      	ldrh	r3, [r7, #10]
 80143bc:	b2da      	uxtb	r2, r3
 80143be:	4b16      	ldr	r3, [pc, #88]	; (8014418 <VL53L1_RdWord+0x7c>)
 80143c0:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80143c2:	2202      	movs	r2, #2
 80143c4:	4914      	ldr	r1, [pc, #80]	; (8014418 <VL53L1_RdWord+0x7c>)
 80143c6:	68f8      	ldr	r0, [r7, #12]
 80143c8:	f7ff fec6 	bl	8014158 <_I2CWrite>
 80143cc:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d002      	beq.n	80143da <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80143d4:	23f3      	movs	r3, #243	; 0xf3
 80143d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80143d8:	e017      	b.n	801440a <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80143da:	2202      	movs	r2, #2
 80143dc:	490e      	ldr	r1, [pc, #56]	; (8014418 <VL53L1_RdWord+0x7c>)
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f7ff fecd 	bl	801417e <_I2CRead>
 80143e4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80143e6:	693b      	ldr	r3, [r7, #16]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d002      	beq.n	80143f2 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 80143ec:	23f3      	movs	r3, #243	; 0xf3
 80143ee:	75fb      	strb	r3, [r7, #23]
        goto done;
 80143f0:	e00b      	b.n	801440a <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80143f2:	4b09      	ldr	r3, [pc, #36]	; (8014418 <VL53L1_RdWord+0x7c>)
 80143f4:	781b      	ldrb	r3, [r3, #0]
 80143f6:	b29b      	uxth	r3, r3
 80143f8:	021b      	lsls	r3, r3, #8
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	4b06      	ldr	r3, [pc, #24]	; (8014418 <VL53L1_RdWord+0x7c>)
 80143fe:	785b      	ldrb	r3, [r3, #1]
 8014400:	b29b      	uxth	r3, r3
 8014402:	4413      	add	r3, r2
 8014404:	b29a      	uxth	r2, r3
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 801440a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801440e:	4618      	mov	r0, r3
 8014410:	3718      	adds	r7, #24
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	20008438 	.word	0x20008438

0801441c <VL53L1_GetTickCount>:
    VL53L1_PutI2cBus();
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(VL53L1_DEV Dev, uint32_t *ptick_count_ms)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b084      	sub	sp, #16
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	6039      	str	r1, [r7, #0]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8014426:	2300      	movs	r3, #0
 8014428:	73fb      	strb	r3, [r7, #15]

	*ptick_count_ms = Dev->IO.GetTick();
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	695b      	ldr	r3, [r3, #20]
 801442e:	4798      	blx	r3
 8014430:	4603      	mov	r3, r0
 8014432:	461a      	mov	r2, r3
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8014438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801443c:	4618      	mov	r0, r3
 801443e:	3710      	adds	r7, #16
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}

08014444 <VL53L1_WaitMs>:
	
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_DEV Dev, int32_t wait_ms){
 8014444:	b580      	push	{r7, lr}
 8014446:	b082      	sub	sp, #8
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_ms);
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	4619      	mov	r1, r3
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f000 f8d2 	bl	80145fc <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014458:	2300      	movs	r3, #0
}
 801445a:	4618      	mov	r0, r3
 801445c:	3708      	adds	r7, #8
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
	...

08014464 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_DEV Dev, int32_t wait_us){
 8014464:	b580      	push	{r7, lr}
 8014466:	b082      	sub	sp, #8
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	6039      	str	r1, [r7, #0]
	VL53L1_Delay(Dev, wait_us/1000);
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	4a07      	ldr	r2, [pc, #28]	; (8014490 <VL53L1_WaitUs+0x2c>)
 8014472:	fb82 1203 	smull	r1, r2, r2, r3
 8014476:	1192      	asrs	r2, r2, #6
 8014478:	17db      	asrs	r3, r3, #31
 801447a:	1ad3      	subs	r3, r2, r3
 801447c:	4619      	mov	r1, r3
 801447e:	6878      	ldr	r0, [r7, #4]
 8014480:	f000 f8bc 	bl	80145fc <VL53L1_Delay>
    return VL53L1_ERROR_NONE;
 8014484:	2300      	movs	r3, #0
}
 8014486:	4618      	mov	r0, r3
 8014488:	3708      	adds	r7, #8
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}
 801448e:	bf00      	nop
 8014490:	10624dd3 	.word	0x10624dd3

08014494 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8014494:	b590      	push	{r4, r7, lr}
 8014496:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 801449a:	af00      	add	r7, sp, #0
 801449c:	f507 740a 	add.w	r4, r7, #552	; 0x228
 80144a0:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 80144a4:	6020      	str	r0, [r4, #0]
 80144a6:	f507 700a 	add.w	r0, r7, #552	; 0x228
 80144aa:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 80144ae:	6001      	str	r1, [r0, #0]
 80144b0:	4619      	mov	r1, r3
 80144b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80144b6:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80144ba:	801a      	strh	r2, [r3, #0]
 80144bc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80144c0:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 80144c4:	460a      	mov	r2, r1
 80144c6:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 80144c8:	2300      	movs	r3, #0
 80144ca:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 80144ce:	2300      	movs	r3, #0
 80144d0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 80144d4:	2300      	movs	r3, #0
 80144d6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 80144da:	2300      	movs	r3, #0
 80144dc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 80144e0:	2300      	movs	r3, #0
 80144e2:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 80144e6:	2300      	movs	r3, #0
 80144e8:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 80144ec:	f107 0310 	add.w	r3, r7, #16
 80144f0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80144f4:	4940      	ldr	r1, [pc, #256]	; (80145f8 <VL53L1_WaitValueMaskEx+0x164>)
 80144f6:	4618      	mov	r0, r3
 80144f8:	f004 fec8 	bl	801928c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(Dev, &start_time_ms);
 80144fc:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8014500:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014504:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014508:	4611      	mov	r1, r2
 801450a:	6818      	ldr	r0, [r3, #0]
 801450c:	f7ff ff86 	bl	801441c <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8014510:	e04e      	b.n	80145b0 <VL53L1_WaitValueMaskEx+0x11c>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8014512:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014516:	2b00      	cmp	r3, #0
 8014518:	d110      	bne.n	801453c <VL53L1_WaitValueMaskEx+0xa8>
			status = VL53L1_RdByte(
 801451a:	f207 2213 	addw	r2, r7, #531	; 0x213
 801451e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014522:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8014526:	8819      	ldrh	r1, [r3, #0]
 8014528:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801452c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014530:	6818      	ldr	r0, [r3, #0]
 8014532:	f7ff feff 	bl	8014334 <VL53L1_RdByte>
 8014536:	4603      	mov	r3, r0
 8014538:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							Dev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 801453c:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8014540:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8014544:	4013      	ands	r3, r2
 8014546:	b2db      	uxtb	r3, r3
 8014548:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801454c:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8014550:	7812      	ldrb	r2, [r2, #0]
 8014552:	429a      	cmp	r2, r3
 8014554:	d102      	bne.n	801455c <VL53L1_WaitValueMaskEx+0xc8>
			found = 1;
 8014556:	2301      	movs	r3, #1
 8014558:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 801455c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8014560:	2b00      	cmp	r3, #0
 8014562:	d114      	bne.n	801458e <VL53L1_WaitValueMaskEx+0xfa>
 8014564:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8014568:	2b00      	cmp	r3, #0
 801456a:	d110      	bne.n	801458e <VL53L1_WaitValueMaskEx+0xfa>
			found == 0 &&
 801456c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8014570:	2b00      	cmp	r3, #0
 8014572:	d00c      	beq.n	801458e <VL53L1_WaitValueMaskEx+0xfa>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8014574:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8014578:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801457c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8014580:	4611      	mov	r1, r2
 8014582:	6818      	ldr	r0, [r3, #0]
 8014584:	f7ff ff5e 	bl	8014444 <VL53L1_WaitMs>
 8014588:	4603      	mov	r3, r0
 801458a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					Dev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(Dev, &current_time_ms);
 801458e:	f507 7205 	add.w	r2, r7, #532	; 0x214
 8014592:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8014596:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 801459a:	4611      	mov	r1, r2
 801459c:	6818      	ldr	r0, [r3, #0]
 801459e:	f7ff ff3d 	bl	801441c <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 80145a2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80145a6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80145aa:	1ad3      	subs	r3, r2, r3
 80145ac:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 80145b0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d10c      	bne.n	80145d2 <VL53L1_WaitValueMaskEx+0x13e>
 80145b8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 80145bc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 80145c0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	429a      	cmp	r2, r3
 80145c8:	d203      	bcs.n	80145d2 <VL53L1_WaitValueMaskEx+0x13e>
		   (polling_time_ms < timeout_ms) &&
 80145ca:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d09f      	beq.n	8014512 <VL53L1_WaitValueMaskEx+0x7e>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 80145d2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d106      	bne.n	80145e8 <VL53L1_WaitValueMaskEx+0x154>
 80145da:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d102      	bne.n	80145e8 <VL53L1_WaitValueMaskEx+0x154>
		status = VL53L1_ERROR_TIME_OUT;
 80145e2:	23f9      	movs	r3, #249	; 0xf9
 80145e4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 80145e8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 80145ec:	4618      	mov	r0, r3
 80145ee:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd90      	pop	{r4, r7, pc}
 80145f6:	bf00      	nop
 80145f8:	0801a28c 	.word	0x0801a28c

080145fc <VL53L1_Delay>:
  * @param Dev   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval VL53L1_Error
  */
static VL53L1_Error VL53L1_Delay(VL53L1_DEV Dev, uint32_t Delay)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b084      	sub	sp, #16
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = Dev->IO.GetTick();
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	695b      	ldr	r3, [r3, #20]
 801460a:	4798      	blx	r3
 801460c:	4603      	mov	r3, r0
 801460e:	60fb      	str	r3, [r7, #12]

  while ((Dev->IO.GetTick() - tickstart) < Delay)
 8014610:	bf00      	nop
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	695b      	ldr	r3, [r3, #20]
 8014616:	4798      	blx	r3
 8014618:	4603      	mov	r3, r0
 801461a:	461a      	mov	r2, r3
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	1ad3      	subs	r3, r2, r3
 8014620:	683a      	ldr	r2, [r7, #0]
 8014622:	429a      	cmp	r2, r3
 8014624:	d8f5      	bhi.n	8014612 <VL53L1_Delay+0x16>
  {
  }

  return VL53L1_ERROR_NONE;
 8014626:	2300      	movs	r3, #0
}
 8014628:	4618      	mov	r0, r3
 801462a:	3710      	adds	r7, #16
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}

08014630 <VL53L1_ipp_hist_process_data>:
	VL53L1_xtalk_histogram_data_t     *pxtalk,
	uint8_t                           *pArea1,
	uint8_t                           *pArea2,
	uint8_t                           *phisto_merge_nb,
	VL53L1_range_results_t            *presults)
{
 8014630:	b580      	push	{r7, lr}
 8014632:	b08c      	sub	sp, #48	; 0x30
 8014634:	af06      	add	r7, sp, #24
 8014636:	60f8      	str	r0, [r7, #12]
 8014638:	60b9      	str	r1, [r7, #8]
 801463a:	607a      	str	r2, [r7, #4]
 801463c:	603b      	str	r3, [r7, #0]



	VL53L1_Error status         = VL53L1_ERROR_NONE;
 801463e:	2300      	movs	r3, #0
 8014640:	75fb      	strb	r3, [r7, #23]

	SUPPRESS_UNUSED_WARNING(Dev);

	status =
		VL53L1_hist_process_data(
 8014642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014644:	9304      	str	r3, [sp, #16]
 8014646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014648:	9303      	str	r3, [sp, #12]
 801464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801464c:	9302      	str	r3, [sp, #8]
 801464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014650:	9301      	str	r3, [sp, #4]
 8014652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014654:	9300      	str	r3, [sp, #0]
 8014656:	6a3b      	ldr	r3, [r7, #32]
 8014658:	683a      	ldr	r2, [r7, #0]
 801465a:	6879      	ldr	r1, [r7, #4]
 801465c:	68b8      	ldr	r0, [r7, #8]
 801465e:	f7fc fefb 	bl	8011458 <VL53L1_hist_process_data>
 8014662:	4603      	mov	r3, r0
 8014664:	75fb      	strb	r3, [r7, #23]
			pArea1,
			pArea2,
			presults,
			phisto_merge_nb);

	return status;
 8014666:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801466a:	4618      	mov	r0, r3
 801466c:	3718      	adds	r7, #24
 801466e:	46bd      	mov	sp, r7
 8014670:	bd80      	pop	{r7, pc}

08014672 <VL53L1CB_RegisterBusIO>:
  * @param pObj    vl53l1cb context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_RegisterBusIO(VL53L1CB_Object_t *pObj, VL53L1CB_IO_t *pIO)
{
 8014672:	b580      	push	{r7, lr}
 8014674:	b084      	sub	sp, #16
 8014676:	af00      	add	r7, sp, #0
 8014678:	6078      	str	r0, [r7, #4]
 801467a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d103      	bne.n	801468a <VL53L1CB_RegisterBusIO+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014682:	f06f 0301 	mvn.w	r3, #1
 8014686:	60fb      	str	r3, [r7, #12]
 8014688:	e023      	b.n	80146d2 <VL53L1CB_RegisterBusIO+0x60>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 801468a:	683b      	ldr	r3, [r7, #0]
 801468c:	681a      	ldr	r2, [r3, #0]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8014692:	683b      	ldr	r3, [r7, #0]
 8014694:	685a      	ldr	r2, [r3, #4]
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	891a      	ldrh	r2, [r3, #8]
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	68da      	ldr	r2, [r3, #12]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	691a      	ldr	r2, [r3, #16]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	695a      	ldr	r2, [r3, #20]
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	615a      	str	r2, [r3, #20]

    if (pObj->IO.Init != NULL)
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d004      	beq.n	80146cc <VL53L1CB_RegisterBusIO+0x5a>
    {
      ret = pObj->IO.Init();
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	4798      	blx	r3
 80146c8:	60f8      	str	r0, [r7, #12]
 80146ca:	e002      	b.n	80146d2 <VL53L1CB_RegisterBusIO+0x60>
    }
    else
    {
      ret = VL53L1CB_ERROR;
 80146cc:	f04f 33ff 	mov.w	r3, #4294967295
 80146d0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80146d2:	68fb      	ldr	r3, [r7, #12]
}
 80146d4:	4618      	mov	r0, r3
 80146d6:	3710      	adds	r7, #16
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd80      	pop	{r7, pc}

080146dc <VL53L1CB_Init>:
  * @brief Initializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Init(VL53L1CB_Object_t *pObj)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b084      	sub	sp, #16
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj->IsInitialized != 0U)
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80146ea:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d003      	beq.n	80146fa <VL53L1CB_Init+0x1e>
  {
    ret =  VL53L1CB_ERROR;
 80146f2:	f04f 33ff 	mov.w	r3, #4294967295
 80146f6:	60fb      	str	r3, [r7, #12]
 80146f8:	e04d      	b.n	8014796 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_WaitDeviceBooted(pObj) != VL53L1_ERROR_NONE)
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f7ed f8d1 	bl	80018a2 <VL53L1_WaitDeviceBooted>
 8014700:	4603      	mov	r3, r0
 8014702:	2b00      	cmp	r3, #0
 8014704:	d003      	beq.n	801470e <VL53L1CB_Init+0x32>
  {
    ret =  VL53L1CB_ERROR;
 8014706:	f04f 33ff 	mov.w	r3, #4294967295
 801470a:	60fb      	str	r3, [r7, #12]
 801470c:	e043      	b.n	8014796 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_DataInit(pObj) != VL53L1_ERROR_NONE)
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f7ed f847 	bl	80017a2 <VL53L1_DataInit>
 8014714:	4603      	mov	r3, r0
 8014716:	2b00      	cmp	r3, #0
 8014718:	d003      	beq.n	8014722 <VL53L1CB_Init+0x46>
  {
    ret = VL53L1CB_ERROR;
 801471a:	f04f 33ff 	mov.w	r3, #4294967295
 801471e:	60fb      	str	r3, [r7, #12]
 8014720:	e039      	b.n	8014796 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_StaticInit(pObj) != VL53L1_ERROR_NONE)
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f7ed f892 	bl	800184c <VL53L1_StaticInit>
 8014728:	4603      	mov	r3, r0
 801472a:	2b00      	cmp	r3, #0
 801472c:	d003      	beq.n	8014736 <VL53L1CB_Init+0x5a>
  {
    ret = VL53L1CB_ERROR;
 801472e:	f04f 33ff 	mov.w	r3, #4294967295
 8014732:	60fb      	str	r3, [r7, #12]
 8014734:	e02f      	b.n	8014796 <VL53L1CB_Init+0xba>
  }
  else if (VL53L1_PerformRefSpadManagement(pObj) != VL53L1_ERROR_NONE)
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f7ee fe8a 	bl	8003450 <VL53L1_PerformRefSpadManagement>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d003      	beq.n	801474a <VL53L1CB_Init+0x6e>
  {
    ret = VL53L1CB_ERROR;
 8014742:	f04f 33ff 	mov.w	r3, #4294967295
 8014746:	60fb      	str	r3, [r7, #12]
 8014748:	e025      	b.n	8014796 <VL53L1CB_Init+0xba>
  }
  else
  {
    pObj->IsRanging = 0;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014750:	2200      	movs	r2, #0
 8014752:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    pObj->IsBlocking = 0;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801475c:	2200      	movs	r2, #0
 801475e:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
    pObj->IsContinuous = 0;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014768:	2200      	movs	r2, #0
 801476a:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
    pObj->IsAmbientEnabled = 0;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014774:	2200      	movs	r2, #0
 8014776:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = 0;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014780:	2200      	movs	r2, #0
 8014782:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d
    pObj->IsInitialized = 1;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801478c:	2201      	movs	r2, #1
 801478e:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    ret = VL53L1CB_OK;
 8014792:	2300      	movs	r3, #0
 8014794:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014796:	68fb      	ldr	r3, [r7, #12]
}
 8014798:	4618      	mov	r0, r3
 801479a:	3710      	adds	r7, #16
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}

080147a0 <VL53L1CB_DeInit>:
  * @brief Deinitializes the vl53l1cb.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_DeInit(VL53L1CB_Object_t *pObj)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b084      	sub	sp, #16
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
  int32_t ret = VL53L1CB_ERROR;
 80147a8:	f04f 33ff 	mov.w	r3, #4294967295
 80147ac:	60fb      	str	r3, [r7, #12]

  if (pObj->IsInitialized == 1U)
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80147b4:	f893 3a88 	ldrb.w	r3, [r3, #2696]	; 0xa88
 80147b8:	2b01      	cmp	r3, #1
 80147ba:	d111      	bne.n	80147e0 <VL53L1CB_DeInit+0x40>
  {
    /* De-initialize the vl53l1cb interface */
    if (pObj->IO.DeInit() != 0)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	685b      	ldr	r3, [r3, #4]
 80147c0:	4798      	blx	r3
 80147c2:	4603      	mov	r3, r0
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d003      	beq.n	80147d0 <VL53L1CB_DeInit+0x30>
    {
      ret = VL53L1CB_ERROR;
 80147c8:	f04f 33ff 	mov.w	r3, #4294967295
 80147cc:	60fb      	str	r3, [r7, #12]
 80147ce:	e007      	b.n	80147e0 <VL53L1CB_DeInit+0x40>
    }
    else
    {
      ret = VL53L1CB_OK;
 80147d0:	2300      	movs	r3, #0
 80147d2:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80147da:	2200      	movs	r2, #0
 80147dc:	f883 2a88 	strb.w	r2, [r3, #2696]	; 0xa88
    }
  }

  return ret;
 80147e0:	68fb      	ldr	r3, [r7, #12]
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	3710      	adds	r7, #16
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}

080147ea <VL53L1CB_ReadID>:
  * @param pObj    vl53l1cb context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ReadID(VL53L1CB_Object_t *pObj, uint32_t *pId)
{
 80147ea:	b580      	push	{r7, lr}
 80147ec:	b084      	sub	sp, #16
 80147ee:	af00      	add	r7, sp, #0
 80147f0:	6078      	str	r0, [r7, #4]
 80147f2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pId == NULL))
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d002      	beq.n	8014800 <VL53L1CB_ReadID+0x16>
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d103      	bne.n	8014808 <VL53L1CB_ReadID+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014800:	f06f 0301 	mvn.w	r3, #1
 8014804:	60fb      	str	r3, [r7, #12]
 8014806:	e00a      	b.n	801481e <VL53L1CB_ReadID+0x34>
  }
  else
  {
    *pId = 0;
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	2200      	movs	r2, #0
 801480c:	601a      	str	r2, [r3, #0]
    ret = VL53L1_RdWord(pObj, VL53L1CB_ID_REG, (uint16_t *) pId);
 801480e:	683a      	ldr	r2, [r7, #0]
 8014810:	f240 110f 	movw	r1, #271	; 0x10f
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f7ff fdc1 	bl	801439c <VL53L1_RdWord>
 801481a:	4603      	mov	r3, r0
 801481c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801481e:	68fb      	ldr	r3, [r7, #12]
}
 8014820:	4618      	mov	r0, r3
 8014822:	3710      	adds	r7, #16
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <VL53L1CB_GetCapabilities>:
  * @param pObj    vl53l1cb context object.
  * @param pCap    Pointer to the vl53l1cb capabilities.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetCapabilities(VL53L1CB_Object_t *pObj, VL53L1CB_Capabilities_t *pCap)
{
 8014828:	b480      	push	{r7}
 801482a:	b085      	sub	sp, #20
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d002      	beq.n	801483e <VL53L1CB_GetCapabilities+0x16>
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d103      	bne.n	8014846 <VL53L1CB_GetCapabilities+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 801483e:	f06f 0301 	mvn.w	r3, #1
 8014842:	60fb      	str	r3, [r7, #12]
 8014844:	e00d      	b.n	8014862 <VL53L1CB_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = 1;
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	2201      	movs	r2, #1
 801484a:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L1CB_NB_TARGET_PER_ZONE;
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	2204      	movs	r2, #4
 8014850:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 1;
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	2201      	movs	r2, #1
 8014856:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 0;
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	2200      	movs	r2, #0
 801485c:	60da      	str	r2, [r3, #12]

    ret = VL53L1CB_OK;
 801485e:	2300      	movs	r3, #0
 8014860:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014862:	68fb      	ldr	r3, [r7, #12]
}
 8014864:	4618      	mov	r0, r3
 8014866:	3714      	adds	r7, #20
 8014868:	46bd      	mov	sp, r7
 801486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486e:	4770      	bx	lr

08014870 <VL53L1CB_ConfigProfile>:
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @note for VL53L1CB the profile corresponds to the distance modes.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigProfile(VL53L1CB_Object_t *pObj, VL53L1CB_ProfileConfig_t *pConfig)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b084      	sub	sp, #16
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
 8014878:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ranging_profile;

  if ((pObj != NULL) && (pConfig != NULL))
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d009      	beq.n	8014894 <VL53L1CB_ConfigProfile+0x24>
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d006      	beq.n	8014894 <VL53L1CB_ConfigProfile+0x24>
  {
    ranging_profile = pConfig->RangingProfile;
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	781b      	ldrb	r3, [r3, #0]
 801488a:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L1CB_INVALID_PARAM;
  }

  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 801488c:	7afb      	ldrb	r3, [r7, #11]
 801488e:	2b01      	cmp	r3, #1
 8014890:	d103      	bne.n	801489a <VL53L1CB_ConfigProfile+0x2a>
 8014892:	e00c      	b.n	80148ae <VL53L1CB_ConfigProfile+0x3e>
    return VL53L1CB_INVALID_PARAM;
 8014894:	f06f 0301 	mvn.w	r3, #1
 8014898:	e043      	b.n	8014922 <VL53L1CB_ConfigProfile+0xb2>
  if ((ranging_profile != VL53L1CB_PROFILE_SHORT) &&
 801489a:	7afb      	ldrb	r3, [r7, #11]
 801489c:	2b02      	cmp	r3, #2
 801489e:	d006      	beq.n	80148ae <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_MEDIUM) &&
 80148a0:	7afb      	ldrb	r3, [r7, #11]
 80148a2:	2b03      	cmp	r3, #3
 80148a4:	d003      	beq.n	80148ae <VL53L1CB_ConfigProfile+0x3e>
      (ranging_profile != VL53L1CB_PROFILE_LONG))
  {
    ret = VL53L1CB_INVALID_PARAM;
 80148a6:	f06f 0301 	mvn.w	r3, #1
 80148aa:	60fb      	str	r3, [r7, #12]
 80148ac:	e038      	b.n	8014920 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetDistanceMode(pObj, ranging_profile) != VL53L1_ERROR_NONE)
 80148ae:	7afb      	ldrb	r3, [r7, #11]
 80148b0:	4619      	mov	r1, r3
 80148b2:	6878      	ldr	r0, [r7, #4]
 80148b4:	f7ed f970 	bl	8001b98 <VL53L1_SetDistanceMode>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d003      	beq.n	80148c6 <VL53L1CB_ConfigProfile+0x56>
  {
    ret = VL53L1CB_ERROR;
 80148be:	f04f 33ff 	mov.w	r3, #4294967295
 80148c2:	60fb      	str	r3, [r7, #12]
 80148c4:	e02c      	b.n	8014920 <VL53L1CB_ConfigProfile+0xb0>
  }
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
             pObj, (1000U * pConfig->TimingBudget)) != VL53L1_ERROR_NONE)
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	685b      	ldr	r3, [r3, #4]
  else if (VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80148ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80148ce:	fb02 f303 	mul.w	r3, r2, r3
 80148d2:	4619      	mov	r1, r3
 80148d4:	6878      	ldr	r0, [r7, #4]
 80148d6:	f7ed f9ed 	bl	8001cb4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80148da:	4603      	mov	r3, r0
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d003      	beq.n	80148e8 <VL53L1CB_ConfigProfile+0x78>
  {
    ret = VL53L1CB_ERROR;
 80148e0:	f04f 33ff 	mov.w	r3, #4294967295
 80148e4:	60fb      	str	r3, [r7, #12]
 80148e6:	e01b      	b.n	8014920 <VL53L1CB_ConfigProfile+0xb0>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	68db      	ldr	r3, [r3, #12]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	bf14      	ite	ne
 80148f0:	2301      	movne	r3, #1
 80148f2:	2300      	moveq	r3, #0
 80148f4:	b2db      	uxtb	r3, r3
 80148f6:	461a      	mov	r2, r3
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80148fe:	f883 2a8c 	strb.w	r2, [r3, #2700]	; 0xa8c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	691b      	ldr	r3, [r3, #16]
 8014906:	2b00      	cmp	r3, #0
 8014908:	bf14      	ite	ne
 801490a:	2301      	movne	r3, #1
 801490c:	2300      	moveq	r3, #0
 801490e:	b2db      	uxtb	r3, r3
 8014910:	461a      	mov	r2, r3
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014918:	f883 2a8d 	strb.w	r2, [r3, #2701]	; 0xa8d

    ret = VL53L1CB_OK;
 801491c:	2300      	movs	r3, #0
 801491e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014920:	68fb      	ldr	r3, [r7, #12]
}
 8014922:	4618      	mov	r0, r3
 8014924:	3710      	adds	r7, #16
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}

0801492a <VL53L1CB_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note Minimal ROI size is 4x4 spads.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigROI(VL53L1CB_Object_t *pObj, VL53L1CB_ROIConfig_t *pROIConfig)
{
 801492a:	b580      	push	{r7, lr}
 801492c:	b094      	sub	sp, #80	; 0x50
 801492e:	af00      	add	r7, sp, #0
 8014930:	6078      	str	r0, [r7, #4]
 8014932:	6039      	str	r1, [r7, #0]
  int32_t ret;
  VL53L1_RoiConfig_t roi_settings;

  if ((pObj == NULL) || (pROIConfig == NULL))
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d002      	beq.n	8014940 <VL53L1CB_ConfigROI+0x16>
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d103      	bne.n	8014948 <VL53L1CB_ConfigROI+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014940:	f06f 0301 	mvn.w	r3, #1
 8014944:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014946:	e01c      	b.n	8014982 <VL53L1CB_ConfigROI+0x58>
  }
  else
  {
    roi_settings.NumberOfRoi = 1;
 8014948:	2301      	movs	r3, #1
 801494a:	723b      	strb	r3, [r7, #8]
    roi_settings.UserRois[0].BotRightX = pROIConfig->BotRightX;
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	789b      	ldrb	r3, [r3, #2]
 8014950:	72fb      	strb	r3, [r7, #11]
    roi_settings.UserRois[0].BotRightY = pROIConfig->BotRightY;
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	78db      	ldrb	r3, [r3, #3]
 8014956:	733b      	strb	r3, [r7, #12]
    roi_settings.UserRois[0].TopLeftX = pROIConfig->TopLeftX;
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	781b      	ldrb	r3, [r3, #0]
 801495c:	727b      	strb	r3, [r7, #9]
    roi_settings.UserRois[0].TopLeftY = pROIConfig->TopLeftY;
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	785b      	ldrb	r3, [r3, #1]
 8014962:	72bb      	strb	r3, [r7, #10]

    if (VL53L1_SetROI(pObj, &roi_settings) != VL53L1_ERROR_NONE)
 8014964:	f107 0308 	add.w	r3, r7, #8
 8014968:	4619      	mov	r1, r3
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	f7ed fca6 	bl	80022bc <VL53L1_SetROI>
 8014970:	4603      	mov	r3, r0
 8014972:	2b00      	cmp	r3, #0
 8014974:	d003      	beq.n	801497e <VL53L1CB_ConfigROI+0x54>
    {
      ret = VL53L1CB_ERROR;
 8014976:	f04f 33ff 	mov.w	r3, #4294967295
 801497a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801497c:	e001      	b.n	8014982 <VL53L1CB_ConfigROI+0x58>
    }
    else
    {
      ret = VL53L1CB_OK;
 801497e:	2300      	movs	r3, #0
 8014980:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
  }

  return ret;
 8014982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8014984:	4618      	mov	r0, r3
 8014986:	3750      	adds	r7, #80	; 0x50
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <VL53L1CB_ConfigIT>:
  * @param pITConfig    Pointer to the IT configuration struct.
  * @warning This device does not support this feature.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_ConfigIT(VL53L1CB_Object_t *pObj, VL53L1CB_ITConfig_t *pITConfig)
{
 801498c:	b480      	push	{r7}
 801498e:	b083      	sub	sp, #12
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
 8014994:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pITConfig);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014996:	f06f 0303 	mvn.w	r3, #3
}
 801499a:	4618      	mov	r0, r3
 801499c:	370c      	adds	r7, #12
 801499e:	46bd      	mov	sp, r7
 80149a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a4:	4770      	bx	lr

080149a6 <VL53L1CB_GetDistance>:
  * @param pObj    vl53l1cb context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetDistance(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 80149a6:	b580      	push	{r7, lr}
 80149a8:	b084      	sub	sp, #16
 80149aa:	af00      	add	r7, sp, #0
 80149ac:	6078      	str	r0, [r7, #4]
 80149ae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d002      	beq.n	80149bc <VL53L1CB_GetDistance+0x16>
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d103      	bne.n	80149c4 <VL53L1CB_GetDistance+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 80149bc:	f06f 0301 	mvn.w	r3, #1
 80149c0:	60fb      	str	r3, [r7, #12]
 80149c2:	e03a      	b.n	8014a3a <VL53L1CB_GetDistance+0x94>
  }
  else if (pObj->IsRanging == 0U)
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80149ca:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d103      	bne.n	80149da <VL53L1CB_GetDistance+0x34>
  {
    ret = VL53L1CB_ERROR;
 80149d2:	f04f 33ff 	mov.w	r3, #4294967295
 80149d6:	60fb      	str	r3, [r7, #12]
 80149d8:	e02f      	b.n	8014a3a <VL53L1CB_GetDistance+0x94>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80149e0:	f893 3a8a 	ldrb.w	r3, [r3, #2698]	; 0xa8a
 80149e4:	2b01      	cmp	r3, #1
 80149e6:	d106      	bne.n	80149f6 <VL53L1CB_GetDistance+0x50>
    {
      ret = vl53l1cb_poll_for_measurement(pObj, VL53L1CB_POLL_TIMEOUT);
 80149e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 f92b 	bl	8014c48 <vl53l1cb_poll_for_measurement>
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	e004      	b.n	8014a00 <VL53L1CB_GetDistance+0x5a>
    }
    else
    {
      ret = vl53l1cb_poll_for_measurement(pObj, 0U);
 80149f6:	2100      	movs	r1, #0
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f000 f925 	bl	8014c48 <vl53l1cb_poll_for_measurement>
 80149fe:	60f8      	str	r0, [r7, #12]
    }
    /* a new measure is available if no error is returned by poll function */
    if (ret == VL53L1CB_OK)
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d119      	bne.n	8014a3a <VL53L1CB_GetDistance+0x94>
    {
      /* retrieve measurements and fill result structure */
      if (vl53l1cb_get_result(pObj, pResult) != VL53L1CB_OK)
 8014a06:	6839      	ldr	r1, [r7, #0]
 8014a08:	6878      	ldr	r0, [r7, #4]
 8014a0a:	f000 f94b 	bl	8014ca4 <vl53l1cb_get_result>
 8014a0e:	4603      	mov	r3, r0
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d003      	beq.n	8014a1c <VL53L1CB_GetDistance+0x76>
      {
        ret = VL53L1CB_ERROR;
 8014a14:	f04f 33ff 	mov.w	r3, #4294967295
 8014a18:	60fb      	str	r3, [r7, #12]
 8014a1a:	e00e      	b.n	8014a3a <VL53L1CB_GetDistance+0x94>
      }
      else if (pObj->IsContinuous == 1U)
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a22:	f893 3a8b 	ldrb.w	r3, [r3, #2699]	; 0xa8b
 8014a26:	2b01      	cmp	r3, #1
 8014a28:	d105      	bne.n	8014a36 <VL53L1CB_GetDistance+0x90>
      {
        /* trigger new measurement if device configured in continuous mode */
        ret = (int32_t)VL53L1_ClearInterruptAndStartMeasurement(pObj);
 8014a2a:	6878      	ldr	r0, [r7, #4]
 8014a2c:	f7ed fdde 	bl	80025ec <VL53L1_ClearInterruptAndStartMeasurement>
 8014a30:	4603      	mov	r3, r0
 8014a32:	60fb      	str	r3, [r7, #12]
 8014a34:	e001      	b.n	8014a3a <VL53L1CB_GetDistance+0x94>
      }
      else
      {
        ret = VL53L1CB_OK;
 8014a36:	2300      	movs	r3, #0
 8014a38:	60fb      	str	r3, [r7, #12]
      }
    }
  }
  
  return ret;
 8014a3a:	68fb      	ldr	r3, [r7, #12]
}
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	3710      	adds	r7, #16
 8014a40:	46bd      	mov	sp, r7
 8014a42:	bd80      	pop	{r7, pc}

08014a44 <VL53L1CB_Start>:
  * @param pObj    vl53l1cb context object.
  * @param Mode        The desired ranging mode.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Start(VL53L1CB_Object_t *pObj, uint32_t Mode)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b084      	sub	sp, #16
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
 8014a4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d103      	bne.n	8014a5c <VL53L1CB_Start+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014a54:	f06f 0301 	mvn.w	r3, #1
 8014a58:	60fb      	str	r3, [r7, #12]
 8014a5a:	e068      	b.n	8014b2e <VL53L1CB_Start+0xea>
  }
  else if (pObj->IsRanging == 1U)
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a62:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014a66:	2b01      	cmp	r3, #1
 8014a68:	d103      	bne.n	8014a72 <VL53L1CB_Start+0x2e>
  {
    ret = VL53L1CB_ERROR;
 8014a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a6e:	60fb      	str	r3, [r7, #12]
 8014a70:	e05d      	b.n	8014b2e <VL53L1CB_Start+0xea>
  }
  else if (VL53L1_StartMeasurement(pObj) == VL53L1_ERROR_NONE)
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f7ed fcf6 	bl	8002464 <VL53L1_StartMeasurement>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d154      	bne.n	8014b28 <VL53L1CB_Start+0xe4>
  {
    pObj->IsRanging = 1;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014a84:	2201      	movs	r2, #1
 8014a86:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8014a8e:	683b      	ldr	r3, [r7, #0]
 8014a90:	3b01      	subs	r3, #1
 8014a92:	2b03      	cmp	r3, #3
 8014a94:	d83e      	bhi.n	8014b14 <VL53L1CB_Start+0xd0>
 8014a96:	a201      	add	r2, pc, #4	; (adr r2, 8014a9c <VL53L1CB_Start+0x58>)
 8014a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a9c:	08014aad 	.word	0x08014aad
 8014aa0:	08014ac7 	.word	0x08014ac7
 8014aa4:	08014ae1 	.word	0x08014ae1
 8014aa8:	08014afb 	.word	0x08014afb
    {
    case VL53L1CB_MODE_BLOCKING_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014abe:	2201      	movs	r2, #1
 8014ac0:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014ac4:	e033      	b.n	8014b2e <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_BLOCKING_ONESHOT:
      pObj->IsContinuous = 0U;
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014acc:	2200      	movs	r2, #0
 8014ace:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 1U;
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ad8:	2201      	movs	r2, #1
 8014ada:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014ade:	e026      	b.n	8014b2e <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_CONTINUOUS:
      pObj->IsContinuous = 1U;
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014ae6:	2201      	movs	r2, #1
 8014ae8:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014af2:	2200      	movs	r2, #0
 8014af4:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014af8:	e019      	b.n	8014b2e <VL53L1CB_Start+0xea>

    case VL53L1CB_MODE_ASYNC_ONESHOT:
      pObj->IsContinuous = 0U;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b00:	2200      	movs	r2, #0
 8014b02:	f883 2a8b 	strb.w	r2, [r3, #2699]	; 0xa8b
      pObj->IsBlocking = 0U;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	f883 2a8a 	strb.w	r2, [r3, #2698]	; 0xa8a
      break;
 8014b12:	e00c      	b.n	8014b2e <VL53L1CB_Start+0xea>

    default:
      pObj->IsRanging = 0U;
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
      ret = VL53L1CB_INVALID_PARAM;
 8014b20:	f06f 0301 	mvn.w	r3, #1
 8014b24:	60fb      	str	r3, [r7, #12]
      break;
 8014b26:	e002      	b.n	8014b2e <VL53L1CB_Start+0xea>
    }
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8014b28:	f04f 33ff 	mov.w	r3, #4294967295
 8014b2c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014b2e:	68fb      	ldr	r3, [r7, #12]
}
 8014b30:	4618      	mov	r0, r3
 8014b32:	3710      	adds	r7, #16
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}

08014b38 <VL53L1CB_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l1cb context object.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_Stop(VL53L1CB_Object_t *pObj)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b084      	sub	sp, #16
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d103      	bne.n	8014b4e <VL53L1CB_Stop+0x16>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014b46:	f06f 0301 	mvn.w	r3, #1
 8014b4a:	60fb      	str	r3, [r7, #12]
 8014b4c:	e01c      	b.n	8014b88 <VL53L1CB_Stop+0x50>
  }
  else if (pObj->IsRanging == 0U)
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b54:	f893 3a89 	ldrb.w	r3, [r3, #2697]	; 0xa89
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d103      	bne.n	8014b64 <VL53L1CB_Stop+0x2c>
  {
	  /* ranging not started */
	  ret = VL53L1CB_ERROR;
 8014b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b60:	60fb      	str	r3, [r7, #12]
 8014b62:	e011      	b.n	8014b88 <VL53L1CB_Stop+0x50>
  }
  else if (VL53L1_StopMeasurement(pObj) == VL53L1_ERROR_NONE)
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f7ed fd1d 	bl	80025a4 <VL53L1_StopMeasurement>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d108      	bne.n	8014b82 <VL53L1CB_Stop+0x4a>
  {
    pObj->IsRanging = 0U;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014b76:	2200      	movs	r2, #0
 8014b78:	f883 2a89 	strb.w	r2, [r3, #2697]	; 0xa89
    ret = VL53L1CB_OK;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	60fb      	str	r3, [r7, #12]
 8014b80:	e002      	b.n	8014b88 <VL53L1CB_Stop+0x50>
  }
  else
  {
    ret = VL53L1CB_ERROR;
 8014b82:	f04f 33ff 	mov.w	r3, #4294967295
 8014b86:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014b88:	68fb      	ldr	r3, [r7, #12]
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3710      	adds	r7, #16
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}

08014b92 <VL53L1CB_SetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param Address     New I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetAddress(VL53L1CB_Object_t *pObj, uint32_t Address)
{
 8014b92:	b580      	push	{r7, lr}
 8014b94:	b084      	sub	sp, #16
 8014b96:	af00      	add	r7, sp, #0
 8014b98:	6078      	str	r0, [r7, #4]
 8014b9a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d103      	bne.n	8014baa <VL53L1CB_SetAddress+0x18>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014ba2:	f06f 0301 	mvn.w	r3, #1
 8014ba6:	60fb      	str	r3, [r7, #12]
 8014ba8:	e012      	b.n	8014bd0 <VL53L1CB_SetAddress+0x3e>
  }
  else if (VL53L1_SetDeviceAddress(pObj, (uint8_t)Address) != VL53L1_ERROR_NONE)
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	b2db      	uxtb	r3, r3
 8014bae:	4619      	mov	r1, r3
 8014bb0:	6878      	ldr	r0, [r7, #4]
 8014bb2:	f7ec fdcf 	bl	8001754 <VL53L1_SetDeviceAddress>
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d003      	beq.n	8014bc4 <VL53L1CB_SetAddress+0x32>
  {
    ret = VL53L1CB_ERROR;
 8014bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8014bc0:	60fb      	str	r3, [r7, #12]
 8014bc2:	e005      	b.n	8014bd0 <VL53L1CB_SetAddress+0x3e>
  }
  else
  {
    pObj->IO.Address = (uint16_t) Address;
 8014bc4:	683b      	ldr	r3, [r7, #0]
 8014bc6:	b29a      	uxth	r2, r3
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	811a      	strh	r2, [r3, #8]
    ret = VL53L1CB_OK;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014bd0:	68fb      	ldr	r3, [r7, #12]
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3710      	adds	r7, #16
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}

08014bda <VL53L1CB_GetAddress>:
  * @param pObj    vl53l1cb context object.
  * @param pAddress     Pointer to the current I2C address.
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetAddress(VL53L1CB_Object_t *pObj, uint32_t *pAddress)
{
 8014bda:	b480      	push	{r7}
 8014bdc:	b085      	sub	sp, #20
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	6078      	str	r0, [r7, #4]
 8014be2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d002      	beq.n	8014bf0 <VL53L1CB_GetAddress+0x16>
 8014bea:	683b      	ldr	r3, [r7, #0]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d103      	bne.n	8014bf8 <VL53L1CB_GetAddress+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014bf0:	f06f 0301 	mvn.w	r3, #1
 8014bf4:	60fb      	str	r3, [r7, #12]
 8014bf6:	e006      	b.n	8014c06 <VL53L1CB_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	891b      	ldrh	r3, [r3, #8]
 8014bfc:	461a      	mov	r2, r3
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	601a      	str	r2, [r3, #0]
    ret = VL53L1CB_OK;
 8014c02:	2300      	movs	r3, #0
 8014c04:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8014c06:	68fb      	ldr	r3, [r7, #12]
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3714      	adds	r7, #20
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c12:	4770      	bx	lr

08014c14 <VL53L1CB_SetPowerMode>:
  * @param PowerMode    New power mode to be entered.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_SetPowerMode(VL53L1CB_Object_t *pObj, uint32_t PowerMode)
{
 8014c14:	b480      	push	{r7}
 8014c16:	b083      	sub	sp, #12
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(PowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014c1e:	f06f 0303 	mvn.w	r3, #3
}
 8014c22:	4618      	mov	r0, r3
 8014c24:	370c      	adds	r7, #12
 8014c26:	46bd      	mov	sp, r7
 8014c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2c:	4770      	bx	lr

08014c2e <VL53L1CB_GetPowerMode>:
  * @param pPowerMode    Pointer to the current power mode.
  * @note Not implemented for this device
  * @retval VL53L1CB status
  */
int32_t VL53L1CB_GetPowerMode(VL53L1CB_Object_t *pObj, uint32_t *pPowerMode)
{
 8014c2e:	b480      	push	{r7}
 8014c30:	b083      	sub	sp, #12
 8014c32:	af00      	add	r7, sp, #0
 8014c34:	6078      	str	r0, [r7, #4]
 8014c36:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pPowerMode);
  return VL53L1CB_NOT_IMPLEMENTED;
 8014c38:	f06f 0303 	mvn.w	r3, #3
}
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	370c      	adds	r7, #12
 8014c40:	46bd      	mov	sp, r7
 8014c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c46:	4770      	bx	lr

08014c48 <vl53l1cb_poll_for_measurement>:
/** @defgroup VL53L1CB_Private_Functions Private Functions
  * @{
  */

static int32_t vl53l1cb_poll_for_measurement(VL53L1CB_Object_t *pObj, uint32_t Timeout)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b084      	sub	sp, #16
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	6039      	str	r1, [r7, #0]
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8014c52:	2300      	movs	r3, #0
 8014c54:	72fb      	strb	r3, [r7, #11]

  if (pObj == NULL)
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d102      	bne.n	8014c62 <vl53l1cb_poll_for_measurement+0x1a>
  {
    return VL53L1CB_INVALID_PARAM;
 8014c5c:	f06f 0301 	mvn.w	r3, #1
 8014c60:	e01b      	b.n	8014c9a <vl53l1cb_poll_for_measurement+0x52>
  }

  TickStart = pObj->IO.GetTick();
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	695b      	ldr	r3, [r3, #20]
 8014c66:	4798      	blx	r3
 8014c68:	4603      	mov	r3, r0
 8014c6a:	60fb      	str	r3, [r7, #12]

  do
  {
    (void)VL53L1_GetMeasurementDataReady(pObj, &NewDataReady);
 8014c6c:	f107 030b 	add.w	r3, r7, #11
 8014c70:	4619      	mov	r1, r3
 8014c72:	6878      	ldr	r0, [r7, #4]
 8014c74:	f7ed fcd0 	bl	8002618 <VL53L1_GetMeasurementDataReady>

    if (NewDataReady == 1U)
 8014c78:	7afb      	ldrb	r3, [r7, #11]
 8014c7a:	2b01      	cmp	r3, #1
 8014c7c:	d101      	bne.n	8014c82 <vl53l1cb_poll_for_measurement+0x3a>
    {
      return VL53L1CB_OK;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	e00b      	b.n	8014c9a <vl53l1cb_poll_for_measurement+0x52>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	695b      	ldr	r3, [r3, #20]
 8014c86:	4798      	blx	r3
 8014c88:	4603      	mov	r3, r0
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	1ad3      	subs	r3, r2, r3
 8014c90:	683a      	ldr	r2, [r7, #0]
 8014c92:	429a      	cmp	r2, r3
 8014c94:	d8ea      	bhi.n	8014c6c <vl53l1cb_poll_for_measurement+0x24>

  return VL53L1CB_TIMEOUT;
 8014c96:	f06f 0302 	mvn.w	r3, #2
}
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	3710      	adds	r7, #16
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	bd80      	pop	{r7, pc}
	...

08014ca4 <vl53l1cb_get_result>:

static int32_t vl53l1cb_get_result(VL53L1CB_Object_t *pObj, VL53L1CB_Result_t *pResult)
{
 8014ca4:	b590      	push	{r4, r7, lr}
 8014ca6:	b089      	sub	sp, #36	; 0x24
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
 8014cac:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint16_t spad_count; /* number of active spads for the current measurement */
  float_t ambient_temp, signal_temp; /* temporary variables used for computation */
  static VL53L1_MultiRangingData_t data;

  if ((pObj == NULL) || (pResult == NULL))
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d002      	beq.n	8014cba <vl53l1cb_get_result+0x16>
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d103      	bne.n	8014cc2 <vl53l1cb_get_result+0x1e>
  {
    ret = VL53L1CB_INVALID_PARAM;
 8014cba:	f06f 0301 	mvn.w	r3, #1
 8014cbe:	61fb      	str	r3, [r7, #28]
 8014cc0:	e100      	b.n	8014ec4 <vl53l1cb_get_result+0x220>
  }
  else if (VL53L1_GetMultiRangingData(pObj, &data) != VL53L1_ERROR_NONE)
 8014cc2:	4983      	ldr	r1, [pc, #524]	; (8014ed0 <vl53l1cb_get_result+0x22c>)
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f7ee fb85 	bl	80033d4 <VL53L1_GetMultiRangingData>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d003      	beq.n	8014cd8 <vl53l1cb_get_result+0x34>
  {
    ret = VL53L1CB_ERROR;
 8014cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014cd4:	61fb      	str	r3, [r7, #28]
 8014cd6:	e0f5      	b.n	8014ec4 <vl53l1cb_get_result+0x220>
  }
  else
  {
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8014cd8:	2300      	movs	r3, #0
 8014cda:	76fb      	strb	r3, [r7, #27]
 8014cdc:	e0ec      	b.n	8014eb8 <vl53l1cb_get_result+0x214>
    {
      /* number of detected targets by the device */
      pResult->ZoneResult[i].NumberOfTargets = data.NumberOfObjectsFound;
 8014cde:	4b7c      	ldr	r3, [pc, #496]	; (8014ed0 <vl53l1cb_get_result+0x22c>)
 8014ce0:	799b      	ldrb	r3, [r3, #6]
 8014ce2:	7efa      	ldrb	r2, [r7, #27]
 8014ce4:	4618      	mov	r0, r3
 8014ce6:	6839      	ldr	r1, [r7, #0]
 8014ce8:	4613      	mov	r3, r2
 8014cea:	011b      	lsls	r3, r3, #4
 8014cec:	4413      	add	r3, r2
 8014cee:	009b      	lsls	r3, r3, #2
 8014cf0:	440b      	add	r3, r1
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	6018      	str	r0, [r3, #0]

      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	76bb      	strb	r3, [r7, #26]
 8014cfa:	e0d4      	b.n	8014ea6 <vl53l1cb_get_result+0x202>
      {
        /* clip the value if negative */
        if (data.RangeData[j].RangeMilliMeter < 0)
 8014cfc:	7eba      	ldrb	r2, [r7, #26]
 8014cfe:	4974      	ldr	r1, [pc, #464]	; (8014ed0 <vl53l1cb_get_result+0x22c>)
 8014d00:	4613      	mov	r3, r2
 8014d02:	00db      	lsls	r3, r3, #3
 8014d04:	1a9b      	subs	r3, r3, r2
 8014d06:	009b      	lsls	r3, r3, #2
 8014d08:	440b      	add	r3, r1
 8014d0a:	331c      	adds	r3, #28
 8014d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	da0b      	bge.n	8014d2c <vl53l1cb_get_result+0x88>
        {
          pResult->ZoneResult[i].Distance[j] = 0U;
 8014d14:	7efa      	ldrb	r2, [r7, #27]
 8014d16:	7eb8      	ldrb	r0, [r7, #26]
 8014d18:	6839      	ldr	r1, [r7, #0]
 8014d1a:	4613      	mov	r3, r2
 8014d1c:	011b      	lsls	r3, r3, #4
 8014d1e:	4413      	add	r3, r2
 8014d20:	4403      	add	r3, r0
 8014d22:	009b      	lsls	r3, r3, #2
 8014d24:	440b      	add	r3, r1
 8014d26:	2200      	movs	r2, #0
 8014d28:	609a      	str	r2, [r3, #8]
 8014d2a:	e014      	b.n	8014d56 <vl53l1cb_get_result+0xb2>
        }
        else
        {
          pResult->ZoneResult[i].Distance[j] = (uint32_t)data.RangeData[j].RangeMilliMeter;
 8014d2c:	7eba      	ldrb	r2, [r7, #26]
 8014d2e:	4968      	ldr	r1, [pc, #416]	; (8014ed0 <vl53l1cb_get_result+0x22c>)
 8014d30:	4613      	mov	r3, r2
 8014d32:	00db      	lsls	r3, r3, #3
 8014d34:	1a9b      	subs	r3, r3, r2
 8014d36:	009b      	lsls	r3, r3, #2
 8014d38:	440b      	add	r3, r1
 8014d3a:	331c      	adds	r3, #28
 8014d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d40:	7efa      	ldrb	r2, [r7, #27]
 8014d42:	7eb8      	ldrb	r0, [r7, #26]
 8014d44:	461c      	mov	r4, r3
 8014d46:	6839      	ldr	r1, [r7, #0]
 8014d48:	4613      	mov	r3, r2
 8014d4a:	011b      	lsls	r3, r3, #4
 8014d4c:	4413      	add	r3, r2
 8014d4e:	4403      	add	r3, r0
 8014d50:	009b      	lsls	r3, r3, #2
 8014d52:	440b      	add	r3, r1
 8014d54:	609c      	str	r4, [r3, #8]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsAmbientEnabled == 1U)
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014d5c:	f893 3a8c 	ldrb.w	r3, [r3, #2700]	; 0xa8c
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d132      	bne.n	8014dca <vl53l1cb_get_result+0x126>
        {
          ambient_temp = (data.RangeData[j].AmbientRateRtnMegaCps / 65536.0f) * 1000.0f;
 8014d64:	7eba      	ldrb	r2, [r7, #26]
 8014d66:	495a      	ldr	r1, [pc, #360]	; (8014ed0 <vl53l1cb_get_result+0x22c>)
 8014d68:	4613      	mov	r3, r2
 8014d6a:	00db      	lsls	r3, r3, #3
 8014d6c:	1a9b      	subs	r3, r3, r2
 8014d6e:	009b      	lsls	r3, r3, #2
 8014d70:	440b      	add	r3, r1
 8014d72:	3314      	adds	r3, #20
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	ee07 3a90 	vmov	s15, r3
 8014d7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014d7e:	eddf 6a55 	vldr	s13, [pc, #340]	; 8014ed4 <vl53l1cb_get_result+0x230>
 8014d82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014d86:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8014ed8 <vl53l1cb_get_result+0x234>
 8014d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d8e:	edc7 7a05 	vstr	s15, [r7, #20]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8014d92:	4b4f      	ldr	r3, [pc, #316]	; (8014ed0 <vl53l1cb_get_result+0x22c>)
 8014d94:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8014d98:	0a1b      	lsrs	r3, r3, #8
 8014d9a:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Ambient[j] = ambient_temp / (float_t)spad_count;
 8014d9c:	8a7b      	ldrh	r3, [r7, #18]
 8014d9e:	ee07 3a90 	vmov	s15, r3
 8014da2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014da6:	7efa      	ldrb	r2, [r7, #27]
 8014da8:	7eb8      	ldrb	r0, [r7, #26]
 8014daa:	edd7 6a05 	vldr	s13, [r7, #20]
 8014dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014db2:	6839      	ldr	r1, [r7, #0]
 8014db4:	4613      	mov	r3, r2
 8014db6:	011b      	lsls	r3, r3, #4
 8014db8:	4413      	add	r3, r2
 8014dba:	4403      	add	r3, r0
 8014dbc:	3308      	adds	r3, #8
 8014dbe:	009b      	lsls	r3, r3, #2
 8014dc0:	440b      	add	r3, r1
 8014dc2:	3308      	adds	r3, #8
 8014dc4:	edc3 7a00 	vstr	s15, [r3]
 8014dc8:	e00d      	b.n	8014de6 <vl53l1cb_get_result+0x142>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8014dca:	7efa      	ldrb	r2, [r7, #27]
 8014dcc:	7eb8      	ldrb	r0, [r7, #26]
 8014dce:	6839      	ldr	r1, [r7, #0]
 8014dd0:	4613      	mov	r3, r2
 8014dd2:	011b      	lsls	r3, r3, #4
 8014dd4:	4413      	add	r3, r2
 8014dd6:	4403      	add	r3, r0
 8014dd8:	3308      	adds	r3, #8
 8014dda:	009b      	lsls	r3, r3, #2
 8014ddc:	440b      	add	r3, r1
 8014dde:	3308      	adds	r3, #8
 8014de0:	f04f 0200 	mov.w	r2, #0
 8014de4:	601a      	str	r2, [r3, #0]
         * - convert value from FixPoint1616 to Mcps by dividing by 65536
         * - convert value from Mcps to Kcps by multiplying it by 1000
         * - obtain number of active spads by dividing EffectiveSpadRtnCount by 256
         * - convert ambient value from Kcps to Kcps/spad diving by the number of active spads  
         */
        if (pObj->IsSignalEnabled == 1U)
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8014dec:	f893 3a8d 	ldrb.w	r3, [r3, #2701]	; 0xa8d
 8014df0:	2b01      	cmp	r3, #1
 8014df2:	d132      	bne.n	8014e5a <vl53l1cb_get_result+0x1b6>
        {
          signal_temp = (data.RangeData[j].SignalRateRtnMegaCps / 65536.0f) * 1000.0f;
 8014df4:	7eba      	ldrb	r2, [r7, #26]
 8014df6:	4936      	ldr	r1, [pc, #216]	; (8014ed0 <vl53l1cb_get_result+0x22c>)
 8014df8:	4613      	mov	r3, r2
 8014dfa:	00db      	lsls	r3, r3, #3
 8014dfc:	1a9b      	subs	r3, r3, r2
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	440b      	add	r3, r1
 8014e02:	3310      	adds	r3, #16
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	ee07 3a90 	vmov	s15, r3
 8014e0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014e0e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8014ed4 <vl53l1cb_get_result+0x230>
 8014e12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014e16:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8014ed8 <vl53l1cb_get_result+0x234>
 8014e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014e1e:	edc7 7a03 	vstr	s15, [r7, #12]
          spad_count = data.EffectiveSpadRtnCount >> 8;
 8014e22:	4b2b      	ldr	r3, [pc, #172]	; (8014ed0 <vl53l1cb_get_result+0x22c>)
 8014e24:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8014e28:	0a1b      	lsrs	r3, r3, #8
 8014e2a:	827b      	strh	r3, [r7, #18]
          pResult->ZoneResult[i].Signal[j] = signal_temp / (float_t)spad_count;
 8014e2c:	8a7b      	ldrh	r3, [r7, #18]
 8014e2e:	ee07 3a90 	vmov	s15, r3
 8014e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014e36:	7efa      	ldrb	r2, [r7, #27]
 8014e38:	7eb8      	ldrb	r0, [r7, #26]
 8014e3a:	edd7 6a03 	vldr	s13, [r7, #12]
 8014e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014e42:	6839      	ldr	r1, [r7, #0]
 8014e44:	4613      	mov	r3, r2
 8014e46:	011b      	lsls	r3, r3, #4
 8014e48:	4413      	add	r3, r2
 8014e4a:	4403      	add	r3, r0
 8014e4c:	330c      	adds	r3, #12
 8014e4e:	009b      	lsls	r3, r3, #2
 8014e50:	440b      	add	r3, r1
 8014e52:	3308      	adds	r3, #8
 8014e54:	edc3 7a00 	vstr	s15, [r3]
 8014e58:	e00d      	b.n	8014e76 <vl53l1cb_get_result+0x1d2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8014e5a:	7efa      	ldrb	r2, [r7, #27]
 8014e5c:	7eb8      	ldrb	r0, [r7, #26]
 8014e5e:	6839      	ldr	r1, [r7, #0]
 8014e60:	4613      	mov	r3, r2
 8014e62:	011b      	lsls	r3, r3, #4
 8014e64:	4413      	add	r3, r2
 8014e66:	4403      	add	r3, r0
 8014e68:	330c      	adds	r3, #12
 8014e6a:	009b      	lsls	r3, r3, #2
 8014e6c:	440b      	add	r3, r1
 8014e6e:	3308      	adds	r3, #8
 8014e70:	f04f 0200 	mov.w	r2, #0
 8014e74:	601a      	str	r2, [r3, #0]
        }

        pResult->ZoneResult[i].Status[j] = data.RangeData[j].RangeStatus;
 8014e76:	7eba      	ldrb	r2, [r7, #26]
 8014e78:	4915      	ldr	r1, [pc, #84]	; (8014ed0 <vl53l1cb_get_result+0x22c>)
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	00db      	lsls	r3, r3, #3
 8014e7e:	1a9b      	subs	r3, r3, r2
 8014e80:	009b      	lsls	r3, r3, #2
 8014e82:	440b      	add	r3, r1
 8014e84:	331f      	adds	r3, #31
 8014e86:	781b      	ldrb	r3, [r3, #0]
 8014e88:	7efa      	ldrb	r2, [r7, #27]
 8014e8a:	7eb8      	ldrb	r0, [r7, #26]
 8014e8c:	461c      	mov	r4, r3
 8014e8e:	6839      	ldr	r1, [r7, #0]
 8014e90:	4613      	mov	r3, r2
 8014e92:	011b      	lsls	r3, r3, #4
 8014e94:	4413      	add	r3, r2
 8014e96:	4403      	add	r3, r0
 8014e98:	3304      	adds	r3, #4
 8014e9a:	009b      	lsls	r3, r3, #2
 8014e9c:	440b      	add	r3, r1
 8014e9e:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.NumberOfObjectsFound; j++)
 8014ea0:	7ebb      	ldrb	r3, [r7, #26]
 8014ea2:	3301      	adds	r3, #1
 8014ea4:	76bb      	strb	r3, [r7, #26]
 8014ea6:	4b0a      	ldr	r3, [pc, #40]	; (8014ed0 <vl53l1cb_get_result+0x22c>)
 8014ea8:	799b      	ldrb	r3, [r3, #6]
 8014eaa:	7eba      	ldrb	r2, [r7, #26]
 8014eac:	429a      	cmp	r2, r3
 8014eae:	f4ff af25 	bcc.w	8014cfc <vl53l1cb_get_result+0x58>
    for (i = 0; i < VL53L1CB_MAX_NB_ZONES; i++)
 8014eb2:	7efb      	ldrb	r3, [r7, #27]
 8014eb4:	3301      	adds	r3, #1
 8014eb6:	76fb      	strb	r3, [r7, #27]
 8014eb8:	7efb      	ldrb	r3, [r7, #27]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	f43f af0f 	beq.w	8014cde <vl53l1cb_get_result+0x3a>
      }
    }

    ret = VL53L1CB_OK;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8014ec4:	69fb      	ldr	r3, [r7, #28]
}
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	3724      	adds	r7, #36	; 0x24
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	bd90      	pop	{r4, r7, pc}
 8014ece:	bf00      	nop
 8014ed0:	20008538 	.word	0x20008538
 8014ed4:	47800000 	.word	0x47800000
 8014ed8:	447a0000 	.word	0x447a0000

08014edc <LL_AHB2_GRP1_EnableClock>:
{
 8014edc:	b480      	push	{r7}
 8014ede:	b085      	sub	sp, #20
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8014ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014ee8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	4313      	orrs	r3, r2
 8014ef2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8014ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014ef8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	4013      	ands	r3, r2
 8014efe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014f00:	68fb      	ldr	r3, [r7, #12]
}
 8014f02:	bf00      	nop
 8014f04:	3714      	adds	r7, #20
 8014f06:	46bd      	mov	sp, r7
 8014f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0c:	4770      	bx	lr

08014f0e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8014f0e:	b480      	push	{r7}
 8014f10:	b085      	sub	sp, #20
 8014f12:	af00      	add	r7, sp, #0
 8014f14:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8014f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014f1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014f1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	4313      	orrs	r3, r2
 8014f24:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8014f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8014f2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	4013      	ands	r3, r2
 8014f30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014f32:	68fb      	ldr	r3, [r7, #12]
}
 8014f34:	bf00      	nop
 8014f36:	3714      	adds	r7, #20
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr

08014f40 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b084      	sub	sp, #16
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	4603      	mov	r3, r0
 8014f48:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8014f4e:	79fb      	ldrb	r3, [r7, #7]
 8014f50:	2b01      	cmp	r3, #1
 8014f52:	d903      	bls.n	8014f5c <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8014f54:	f06f 0301 	mvn.w	r3, #1
 8014f58:	60fb      	str	r3, [r7, #12]
 8014f5a:	e022      	b.n	8014fa2 <BSP_COM_Init+0x62>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8014f5c:	79fa      	ldrb	r2, [r7, #7]
 8014f5e:	79fb      	ldrb	r3, [r7, #7]
 8014f60:	4912      	ldr	r1, [pc, #72]	; (8014fac <BSP_COM_Init+0x6c>)
 8014f62:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8014f66:	4912      	ldr	r1, [pc, #72]	; (8014fb0 <BSP_COM_Init+0x70>)
 8014f68:	2094      	movs	r0, #148	; 0x94
 8014f6a:	fb00 f303 	mul.w	r3, r0, r3
 8014f6e:	440b      	add	r3, r1
 8014f70:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8014f72:	79fb      	ldrb	r3, [r7, #7]
 8014f74:	2294      	movs	r2, #148	; 0x94
 8014f76:	fb02 f303 	mul.w	r3, r2, r3
 8014f7a:	4a0d      	ldr	r2, [pc, #52]	; (8014fb0 <BSP_COM_Init+0x70>)
 8014f7c:	4413      	add	r3, r2
 8014f7e:	4618      	mov	r0, r3
 8014f80:	f000 f86a 	bl	8015058 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8014f84:	79fb      	ldrb	r3, [r7, #7]
 8014f86:	2294      	movs	r2, #148	; 0x94
 8014f88:	fb02 f303 	mul.w	r3, r2, r3
 8014f8c:	4a08      	ldr	r2, [pc, #32]	; (8014fb0 <BSP_COM_Init+0x70>)
 8014f8e:	4413      	add	r3, r2
 8014f90:	4618      	mov	r0, r3
 8014f92:	f000 f80f 	bl	8014fb4 <MX_USART1_UART_Init>
 8014f96:	4603      	mov	r3, r0
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d002      	beq.n	8014fa2 <BSP_COM_Init+0x62>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8014f9c:	f06f 0303 	mvn.w	r3, #3
 8014fa0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
}
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	3710      	adds	r7, #16
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	20000070 	.word	0x20000070
 8014fb0:	200085b8 	.word	0x200085b8

08014fb4 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	4a24      	ldr	r2, [pc, #144]	; (8015054 <MX_USART1_UART_Init+0xa0>)
 8014fc4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014fcc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_7B;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fd4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	2200      	movs	r2, #0
 8014fda:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2200      	movs	r2, #0
 8014fe0:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	220c      	movs	r2, #12
 8014fe6:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2200      	movs	r2, #0
 8014fec:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	625a      	str	r2, [r3, #36]	; 0x24
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2200      	movs	r2, #0
 8015004:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(huart) != HAL_OK)
 8015006:	6878      	ldr	r0, [r7, #4]
 8015008:	f003 f977 	bl	80182fa <HAL_UART_Init>
 801500c:	4603      	mov	r3, r0
 801500e:	2b00      	cmp	r3, #0
 8015010:	d001      	beq.n	8015016 <MX_USART1_UART_Init+0x62>
  {
    ret = HAL_ERROR;
 8015012:	2301      	movs	r3, #1
 8015014:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8015016:	2100      	movs	r1, #0
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f003 fe43 	bl	8018ca4 <HAL_UARTEx_SetTxFifoThreshold>
 801501e:	4603      	mov	r3, r0
 8015020:	2b00      	cmp	r3, #0
 8015022:	d001      	beq.n	8015028 <MX_USART1_UART_Init+0x74>
  {
    ret = HAL_ERROR;
 8015024:	2301      	movs	r3, #1
 8015026:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8015028:	2100      	movs	r1, #0
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f003 fe78 	bl	8018d20 <HAL_UARTEx_SetRxFifoThreshold>
 8015030:	4603      	mov	r3, r0
 8015032:	2b00      	cmp	r3, #0
 8015034:	d001      	beq.n	801503a <MX_USART1_UART_Init+0x86>
  {
    ret = HAL_ERROR;
 8015036:	2301      	movs	r3, #1
 8015038:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 801503a:	6878      	ldr	r0, [r7, #4]
 801503c:	f003 fdf9 	bl	8018c32 <HAL_UARTEx_DisableFifoMode>
 8015040:	4603      	mov	r3, r0
 8015042:	2b00      	cmp	r3, #0
 8015044:	d001      	beq.n	801504a <MX_USART1_UART_Init+0x96>
  {
    ret = HAL_ERROR;
 8015046:	2301      	movs	r3, #1
 8015048:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801504a:	7bfb      	ldrb	r3, [r7, #15]
}
 801504c:	4618      	mov	r0, r3
 801504e:	3710      	adds	r7, #16
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	40013800 	.word	0x40013800

08015058 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b09c      	sub	sp, #112	; 0x70
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015060:	f107 030c 	add.w	r3, r7, #12
 8015064:	2250      	movs	r2, #80	; 0x50
 8015066:	2100      	movs	r1, #0
 8015068:	4618      	mov	r0, r3
 801506a:	f004 f863 	bl	8019134 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801506e:	2301      	movs	r3, #1
 8015070:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8015072:	2300      	movs	r3, #0
 8015074:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8015076:	f107 030c 	add.w	r3, r7, #12
 801507a:	4618      	mov	r0, r3
 801507c:	f002 fe90 	bl	8017da0 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8015080:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8015084:	f7ff ff43 	bl	8014f0e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015088:	2002      	movs	r0, #2
 801508a:	f7ff ff27 	bl	8014edc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 801508e:	2340      	movs	r3, #64	; 0x40
 8015090:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015092:	2302      	movs	r3, #2
 8015094:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015096:	2301      	movs	r3, #1
 8015098:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801509a:	2300      	movs	r3, #0
 801509c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 801509e:	2307      	movs	r3, #7
 80150a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 80150a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80150a6:	4619      	mov	r1, r3
 80150a8:	480b      	ldr	r0, [pc, #44]	; (80150d8 <USART1_MspInit+0x80>)
 80150aa:	f000 f9a5 	bl	80153f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 80150ae:	2380      	movs	r3, #128	; 0x80
 80150b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80150b2:	2302      	movs	r3, #2
 80150b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80150b6:	2301      	movs	r3, #1
 80150b8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80150ba:	2300      	movs	r3, #0
 80150bc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 80150be:	2307      	movs	r3, #7
 80150c0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 80150c2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80150c6:	4619      	mov	r1, r3
 80150c8:	4803      	ldr	r0, [pc, #12]	; (80150d8 <USART1_MspInit+0x80>)
 80150ca:	f000 f995 	bl	80153f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 80150ce:	bf00      	nop
 80150d0:	3770      	adds	r7, #112	; 0x70
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}
 80150d6:	bf00      	nop
 80150d8:	48000400 	.word	0x48000400

080150dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80150e2:	2300      	movs	r3, #0
 80150e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80150e6:	4b0c      	ldr	r3, [pc, #48]	; (8015118 <HAL_Init+0x3c>)
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	4a0b      	ldr	r2, [pc, #44]	; (8015118 <HAL_Init+0x3c>)
 80150ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80150f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80150f2:	2003      	movs	r0, #3
 80150f4:	f000 f94e 	bl	8015394 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80150f8:	2000      	movs	r0, #0
 80150fa:	f000 f80f 	bl	801511c <HAL_InitTick>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	d002      	beq.n	801510a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8015104:	2301      	movs	r3, #1
 8015106:	71fb      	strb	r3, [r7, #7]
 8015108:	e001      	b.n	801510e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801510a:	f7eb fc1a 	bl	8000942 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 801510e:	79fb      	ldrb	r3, [r7, #7]
}
 8015110:	4618      	mov	r0, r3
 8015112:	3708      	adds	r7, #8
 8015114:	46bd      	mov	sp, r7
 8015116:	bd80      	pop	{r7, pc}
 8015118:	58004000 	.word	0x58004000

0801511c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b084      	sub	sp, #16
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8015124:	2300      	movs	r3, #0
 8015126:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8015128:	4b17      	ldr	r3, [pc, #92]	; (8015188 <HAL_InitTick+0x6c>)
 801512a:	781b      	ldrb	r3, [r3, #0]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d024      	beq.n	801517a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8015130:	f002 fb96 	bl	8017860 <HAL_RCC_GetHCLKFreq>
 8015134:	4602      	mov	r2, r0
 8015136:	4b14      	ldr	r3, [pc, #80]	; (8015188 <HAL_InitTick+0x6c>)
 8015138:	781b      	ldrb	r3, [r3, #0]
 801513a:	4619      	mov	r1, r3
 801513c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015140:	fbb3 f3f1 	udiv	r3, r3, r1
 8015144:	fbb2 f3f3 	udiv	r3, r2, r3
 8015148:	4618      	mov	r0, r3
 801514a:	f000 f948 	bl	80153de <HAL_SYSTICK_Config>
 801514e:	4603      	mov	r3, r0
 8015150:	2b00      	cmp	r3, #0
 8015152:	d10f      	bne.n	8015174 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2b0f      	cmp	r3, #15
 8015158:	d809      	bhi.n	801516e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801515a:	2200      	movs	r2, #0
 801515c:	6879      	ldr	r1, [r7, #4]
 801515e:	f04f 30ff 	mov.w	r0, #4294967295
 8015162:	f000 f922 	bl	80153aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8015166:	4a09      	ldr	r2, [pc, #36]	; (801518c <HAL_InitTick+0x70>)
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6013      	str	r3, [r2, #0]
 801516c:	e007      	b.n	801517e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 801516e:	2301      	movs	r3, #1
 8015170:	73fb      	strb	r3, [r7, #15]
 8015172:	e004      	b.n	801517e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8015174:	2301      	movs	r3, #1
 8015176:	73fb      	strb	r3, [r7, #15]
 8015178:	e001      	b.n	801517e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 801517a:	2301      	movs	r3, #1
 801517c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 801517e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015180:	4618      	mov	r0, r3
 8015182:	3710      	adds	r7, #16
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}
 8015188:	20000078 	.word	0x20000078
 801518c:	20000074 	.word	0x20000074

08015190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015190:	b480      	push	{r7}
 8015192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8015194:	4b06      	ldr	r3, [pc, #24]	; (80151b0 <HAL_IncTick+0x20>)
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	461a      	mov	r2, r3
 801519a:	4b06      	ldr	r3, [pc, #24]	; (80151b4 <HAL_IncTick+0x24>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	4413      	add	r3, r2
 80151a0:	4a04      	ldr	r2, [pc, #16]	; (80151b4 <HAL_IncTick+0x24>)
 80151a2:	6013      	str	r3, [r2, #0]
}
 80151a4:	bf00      	nop
 80151a6:	46bd      	mov	sp, r7
 80151a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ac:	4770      	bx	lr
 80151ae:	bf00      	nop
 80151b0:	20000078 	.word	0x20000078
 80151b4:	2000864c 	.word	0x2000864c

080151b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80151b8:	b480      	push	{r7}
 80151ba:	af00      	add	r7, sp, #0
  return uwTick;
 80151bc:	4b03      	ldr	r3, [pc, #12]	; (80151cc <HAL_GetTick+0x14>)
 80151be:	681b      	ldr	r3, [r3, #0]
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	46bd      	mov	sp, r7
 80151c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c8:	4770      	bx	lr
 80151ca:	bf00      	nop
 80151cc:	2000864c 	.word	0x2000864c

080151d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80151d0:	b480      	push	{r7}
 80151d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80151d4:	4b03      	ldr	r3, [pc, #12]	; (80151e4 <HAL_GetTickPrio+0x14>)
 80151d6:	681b      	ldr	r3, [r3, #0]
}
 80151d8:	4618      	mov	r0, r3
 80151da:	46bd      	mov	sp, r7
 80151dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e0:	4770      	bx	lr
 80151e2:	bf00      	nop
 80151e4:	20000074 	.word	0x20000074

080151e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b084      	sub	sp, #16
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80151f0:	f7ff ffe2 	bl	80151b8 <HAL_GetTick>
 80151f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015200:	d005      	beq.n	801520e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015202:	4b0a      	ldr	r3, [pc, #40]	; (801522c <HAL_Delay+0x44>)
 8015204:	781b      	ldrb	r3, [r3, #0]
 8015206:	461a      	mov	r2, r3
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	4413      	add	r3, r2
 801520c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801520e:	bf00      	nop
 8015210:	f7ff ffd2 	bl	80151b8 <HAL_GetTick>
 8015214:	4602      	mov	r2, r0
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	1ad3      	subs	r3, r2, r3
 801521a:	68fa      	ldr	r2, [r7, #12]
 801521c:	429a      	cmp	r2, r3
 801521e:	d8f7      	bhi.n	8015210 <HAL_Delay+0x28>
  {
  }
}
 8015220:	bf00      	nop
 8015222:	bf00      	nop
 8015224:	3710      	adds	r7, #16
 8015226:	46bd      	mov	sp, r7
 8015228:	bd80      	pop	{r7, pc}
 801522a:	bf00      	nop
 801522c:	20000078 	.word	0x20000078

08015230 <__NVIC_SetPriorityGrouping>:
{
 8015230:	b480      	push	{r7}
 8015232:	b085      	sub	sp, #20
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	f003 0307 	and.w	r3, r3, #7
 801523e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015240:	4b0c      	ldr	r3, [pc, #48]	; (8015274 <__NVIC_SetPriorityGrouping+0x44>)
 8015242:	68db      	ldr	r3, [r3, #12]
 8015244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015246:	68ba      	ldr	r2, [r7, #8]
 8015248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801524c:	4013      	ands	r3, r2
 801524e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015254:	68bb      	ldr	r3, [r7, #8]
 8015256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801525c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015262:	4a04      	ldr	r2, [pc, #16]	; (8015274 <__NVIC_SetPriorityGrouping+0x44>)
 8015264:	68bb      	ldr	r3, [r7, #8]
 8015266:	60d3      	str	r3, [r2, #12]
}
 8015268:	bf00      	nop
 801526a:	3714      	adds	r7, #20
 801526c:	46bd      	mov	sp, r7
 801526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015272:	4770      	bx	lr
 8015274:	e000ed00 	.word	0xe000ed00

08015278 <__NVIC_GetPriorityGrouping>:
{
 8015278:	b480      	push	{r7}
 801527a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801527c:	4b04      	ldr	r3, [pc, #16]	; (8015290 <__NVIC_GetPriorityGrouping+0x18>)
 801527e:	68db      	ldr	r3, [r3, #12]
 8015280:	0a1b      	lsrs	r3, r3, #8
 8015282:	f003 0307 	and.w	r3, r3, #7
}
 8015286:	4618      	mov	r0, r3
 8015288:	46bd      	mov	sp, r7
 801528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528e:	4770      	bx	lr
 8015290:	e000ed00 	.word	0xe000ed00

08015294 <__NVIC_SetPriority>:
{
 8015294:	b480      	push	{r7}
 8015296:	b083      	sub	sp, #12
 8015298:	af00      	add	r7, sp, #0
 801529a:	4603      	mov	r3, r0
 801529c:	6039      	str	r1, [r7, #0]
 801529e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80152a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	db0a      	blt.n	80152be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80152a8:	683b      	ldr	r3, [r7, #0]
 80152aa:	b2da      	uxtb	r2, r3
 80152ac:	490c      	ldr	r1, [pc, #48]	; (80152e0 <__NVIC_SetPriority+0x4c>)
 80152ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152b2:	0112      	lsls	r2, r2, #4
 80152b4:	b2d2      	uxtb	r2, r2
 80152b6:	440b      	add	r3, r1
 80152b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80152bc:	e00a      	b.n	80152d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80152be:	683b      	ldr	r3, [r7, #0]
 80152c0:	b2da      	uxtb	r2, r3
 80152c2:	4908      	ldr	r1, [pc, #32]	; (80152e4 <__NVIC_SetPriority+0x50>)
 80152c4:	79fb      	ldrb	r3, [r7, #7]
 80152c6:	f003 030f 	and.w	r3, r3, #15
 80152ca:	3b04      	subs	r3, #4
 80152cc:	0112      	lsls	r2, r2, #4
 80152ce:	b2d2      	uxtb	r2, r2
 80152d0:	440b      	add	r3, r1
 80152d2:	761a      	strb	r2, [r3, #24]
}
 80152d4:	bf00      	nop
 80152d6:	370c      	adds	r7, #12
 80152d8:	46bd      	mov	sp, r7
 80152da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152de:	4770      	bx	lr
 80152e0:	e000e100 	.word	0xe000e100
 80152e4:	e000ed00 	.word	0xe000ed00

080152e8 <NVIC_EncodePriority>:
{
 80152e8:	b480      	push	{r7}
 80152ea:	b089      	sub	sp, #36	; 0x24
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	60f8      	str	r0, [r7, #12]
 80152f0:	60b9      	str	r1, [r7, #8]
 80152f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	f003 0307 	and.w	r3, r3, #7
 80152fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	f1c3 0307 	rsb	r3, r3, #7
 8015302:	2b04      	cmp	r3, #4
 8015304:	bf28      	it	cs
 8015306:	2304      	movcs	r3, #4
 8015308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801530a:	69fb      	ldr	r3, [r7, #28]
 801530c:	3304      	adds	r3, #4
 801530e:	2b06      	cmp	r3, #6
 8015310:	d902      	bls.n	8015318 <NVIC_EncodePriority+0x30>
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	3b03      	subs	r3, #3
 8015316:	e000      	b.n	801531a <NVIC_EncodePriority+0x32>
 8015318:	2300      	movs	r3, #0
 801531a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801531c:	f04f 32ff 	mov.w	r2, #4294967295
 8015320:	69bb      	ldr	r3, [r7, #24]
 8015322:	fa02 f303 	lsl.w	r3, r2, r3
 8015326:	43da      	mvns	r2, r3
 8015328:	68bb      	ldr	r3, [r7, #8]
 801532a:	401a      	ands	r2, r3
 801532c:	697b      	ldr	r3, [r7, #20]
 801532e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015330:	f04f 31ff 	mov.w	r1, #4294967295
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	fa01 f303 	lsl.w	r3, r1, r3
 801533a:	43d9      	mvns	r1, r3
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015340:	4313      	orrs	r3, r2
}
 8015342:	4618      	mov	r0, r3
 8015344:	3724      	adds	r7, #36	; 0x24
 8015346:	46bd      	mov	sp, r7
 8015348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534c:	4770      	bx	lr
	...

08015350 <SysTick_Config>:
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	3b01      	subs	r3, #1
 801535c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015360:	d301      	bcc.n	8015366 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8015362:	2301      	movs	r3, #1
 8015364:	e00f      	b.n	8015386 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8015366:	4a0a      	ldr	r2, [pc, #40]	; (8015390 <SysTick_Config+0x40>)
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	3b01      	subs	r3, #1
 801536c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801536e:	210f      	movs	r1, #15
 8015370:	f04f 30ff 	mov.w	r0, #4294967295
 8015374:	f7ff ff8e 	bl	8015294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8015378:	4b05      	ldr	r3, [pc, #20]	; (8015390 <SysTick_Config+0x40>)
 801537a:	2200      	movs	r2, #0
 801537c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801537e:	4b04      	ldr	r3, [pc, #16]	; (8015390 <SysTick_Config+0x40>)
 8015380:	2207      	movs	r2, #7
 8015382:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8015384:	2300      	movs	r3, #0
}
 8015386:	4618      	mov	r0, r3
 8015388:	3708      	adds	r7, #8
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}
 801538e:	bf00      	nop
 8015390:	e000e010 	.word	0xe000e010

08015394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015394:	b580      	push	{r7, lr}
 8015396:	b082      	sub	sp, #8
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f7ff ff47 	bl	8015230 <__NVIC_SetPriorityGrouping>
}
 80153a2:	bf00      	nop
 80153a4:	3708      	adds	r7, #8
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}

080153aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80153aa:	b580      	push	{r7, lr}
 80153ac:	b086      	sub	sp, #24
 80153ae:	af00      	add	r7, sp, #0
 80153b0:	4603      	mov	r3, r0
 80153b2:	60b9      	str	r1, [r7, #8]
 80153b4:	607a      	str	r2, [r7, #4]
 80153b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80153b8:	f7ff ff5e 	bl	8015278 <__NVIC_GetPriorityGrouping>
 80153bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	68b9      	ldr	r1, [r7, #8]
 80153c2:	6978      	ldr	r0, [r7, #20]
 80153c4:	f7ff ff90 	bl	80152e8 <NVIC_EncodePriority>
 80153c8:	4602      	mov	r2, r0
 80153ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153ce:	4611      	mov	r1, r2
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7ff ff5f 	bl	8015294 <__NVIC_SetPriority>
}
 80153d6:	bf00      	nop
 80153d8:	3718      	adds	r7, #24
 80153da:	46bd      	mov	sp, r7
 80153dc:	bd80      	pop	{r7, pc}

080153de <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80153de:	b580      	push	{r7, lr}
 80153e0:	b082      	sub	sp, #8
 80153e2:	af00      	add	r7, sp, #0
 80153e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80153e6:	6878      	ldr	r0, [r7, #4]
 80153e8:	f7ff ffb2 	bl	8015350 <SysTick_Config>
 80153ec:	4603      	mov	r3, r0
}
 80153ee:	4618      	mov	r0, r3
 80153f0:	3708      	adds	r7, #8
 80153f2:	46bd      	mov	sp, r7
 80153f4:	bd80      	pop	{r7, pc}
	...

080153f8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80153f8:	b480      	push	{r7}
 80153fa:	b087      	sub	sp, #28
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8015402:	2300      	movs	r3, #0
 8015404:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8015406:	e14c      	b.n	80156a2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	681a      	ldr	r2, [r3, #0]
 801540c:	2101      	movs	r1, #1
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	fa01 f303 	lsl.w	r3, r1, r3
 8015414:	4013      	ands	r3, r2
 8015416:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	2b00      	cmp	r3, #0
 801541c:	f000 813e 	beq.w	801569c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	685b      	ldr	r3, [r3, #4]
 8015424:	f003 0303 	and.w	r3, r3, #3
 8015428:	2b01      	cmp	r3, #1
 801542a:	d005      	beq.n	8015438 <HAL_GPIO_Init+0x40>
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	685b      	ldr	r3, [r3, #4]
 8015430:	f003 0303 	and.w	r3, r3, #3
 8015434:	2b02      	cmp	r3, #2
 8015436:	d130      	bne.n	801549a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	689b      	ldr	r3, [r3, #8]
 801543c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 801543e:	697b      	ldr	r3, [r7, #20]
 8015440:	005b      	lsls	r3, r3, #1
 8015442:	2203      	movs	r2, #3
 8015444:	fa02 f303 	lsl.w	r3, r2, r3
 8015448:	43db      	mvns	r3, r3
 801544a:	693a      	ldr	r2, [r7, #16]
 801544c:	4013      	ands	r3, r2
 801544e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	68da      	ldr	r2, [r3, #12]
 8015454:	697b      	ldr	r3, [r7, #20]
 8015456:	005b      	lsls	r3, r3, #1
 8015458:	fa02 f303 	lsl.w	r3, r2, r3
 801545c:	693a      	ldr	r2, [r7, #16]
 801545e:	4313      	orrs	r3, r2
 8015460:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	693a      	ldr	r2, [r7, #16]
 8015466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	685b      	ldr	r3, [r3, #4]
 801546c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801546e:	2201      	movs	r2, #1
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	fa02 f303 	lsl.w	r3, r2, r3
 8015476:	43db      	mvns	r3, r3
 8015478:	693a      	ldr	r2, [r7, #16]
 801547a:	4013      	ands	r3, r2
 801547c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	685b      	ldr	r3, [r3, #4]
 8015482:	091b      	lsrs	r3, r3, #4
 8015484:	f003 0201 	and.w	r2, r3, #1
 8015488:	697b      	ldr	r3, [r7, #20]
 801548a:	fa02 f303 	lsl.w	r3, r2, r3
 801548e:	693a      	ldr	r2, [r7, #16]
 8015490:	4313      	orrs	r3, r2
 8015492:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	693a      	ldr	r2, [r7, #16]
 8015498:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	f003 0303 	and.w	r3, r3, #3
 80154a2:	2b03      	cmp	r3, #3
 80154a4:	d017      	beq.n	80154d6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	68db      	ldr	r3, [r3, #12]
 80154aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	005b      	lsls	r3, r3, #1
 80154b0:	2203      	movs	r2, #3
 80154b2:	fa02 f303 	lsl.w	r3, r2, r3
 80154b6:	43db      	mvns	r3, r3
 80154b8:	693a      	ldr	r2, [r7, #16]
 80154ba:	4013      	ands	r3, r2
 80154bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	689a      	ldr	r2, [r3, #8]
 80154c2:	697b      	ldr	r3, [r7, #20]
 80154c4:	005b      	lsls	r3, r3, #1
 80154c6:	fa02 f303 	lsl.w	r3, r2, r3
 80154ca:	693a      	ldr	r2, [r7, #16]
 80154cc:	4313      	orrs	r3, r2
 80154ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	693a      	ldr	r2, [r7, #16]
 80154d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	f003 0303 	and.w	r3, r3, #3
 80154de:	2b02      	cmp	r3, #2
 80154e0:	d123      	bne.n	801552a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	08da      	lsrs	r2, r3, #3
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	3208      	adds	r2, #8
 80154ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	f003 0307 	and.w	r3, r3, #7
 80154f6:	009b      	lsls	r3, r3, #2
 80154f8:	220f      	movs	r2, #15
 80154fa:	fa02 f303 	lsl.w	r3, r2, r3
 80154fe:	43db      	mvns	r3, r3
 8015500:	693a      	ldr	r2, [r7, #16]
 8015502:	4013      	ands	r3, r2
 8015504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	691a      	ldr	r2, [r3, #16]
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	f003 0307 	and.w	r3, r3, #7
 8015510:	009b      	lsls	r3, r3, #2
 8015512:	fa02 f303 	lsl.w	r3, r2, r3
 8015516:	693a      	ldr	r2, [r7, #16]
 8015518:	4313      	orrs	r3, r2
 801551a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 801551c:	697b      	ldr	r3, [r7, #20]
 801551e:	08da      	lsrs	r2, r3, #3
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	3208      	adds	r2, #8
 8015524:	6939      	ldr	r1, [r7, #16]
 8015526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8015530:	697b      	ldr	r3, [r7, #20]
 8015532:	005b      	lsls	r3, r3, #1
 8015534:	2203      	movs	r2, #3
 8015536:	fa02 f303 	lsl.w	r3, r2, r3
 801553a:	43db      	mvns	r3, r3
 801553c:	693a      	ldr	r2, [r7, #16]
 801553e:	4013      	ands	r3, r2
 8015540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	685b      	ldr	r3, [r3, #4]
 8015546:	f003 0203 	and.w	r2, r3, #3
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	005b      	lsls	r3, r3, #1
 801554e:	fa02 f303 	lsl.w	r3, r2, r3
 8015552:	693a      	ldr	r2, [r7, #16]
 8015554:	4313      	orrs	r3, r2
 8015556:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	693a      	ldr	r2, [r7, #16]
 801555c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015566:	2b00      	cmp	r3, #0
 8015568:	f000 8098 	beq.w	801569c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 801556c:	4a54      	ldr	r2, [pc, #336]	; (80156c0 <HAL_GPIO_Init+0x2c8>)
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	089b      	lsrs	r3, r3, #2
 8015572:	3302      	adds	r3, #2
 8015574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015578:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	f003 0303 	and.w	r3, r3, #3
 8015580:	009b      	lsls	r3, r3, #2
 8015582:	220f      	movs	r2, #15
 8015584:	fa02 f303 	lsl.w	r3, r2, r3
 8015588:	43db      	mvns	r3, r3
 801558a:	693a      	ldr	r2, [r7, #16]
 801558c:	4013      	ands	r3, r2
 801558e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8015596:	d019      	beq.n	80155cc <HAL_GPIO_Init+0x1d4>
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	4a4a      	ldr	r2, [pc, #296]	; (80156c4 <HAL_GPIO_Init+0x2cc>)
 801559c:	4293      	cmp	r3, r2
 801559e:	d013      	beq.n	80155c8 <HAL_GPIO_Init+0x1d0>
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	4a49      	ldr	r2, [pc, #292]	; (80156c8 <HAL_GPIO_Init+0x2d0>)
 80155a4:	4293      	cmp	r3, r2
 80155a6:	d00d      	beq.n	80155c4 <HAL_GPIO_Init+0x1cc>
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	4a48      	ldr	r2, [pc, #288]	; (80156cc <HAL_GPIO_Init+0x2d4>)
 80155ac:	4293      	cmp	r3, r2
 80155ae:	d007      	beq.n	80155c0 <HAL_GPIO_Init+0x1c8>
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	4a47      	ldr	r2, [pc, #284]	; (80156d0 <HAL_GPIO_Init+0x2d8>)
 80155b4:	4293      	cmp	r3, r2
 80155b6:	d101      	bne.n	80155bc <HAL_GPIO_Init+0x1c4>
 80155b8:	2304      	movs	r3, #4
 80155ba:	e008      	b.n	80155ce <HAL_GPIO_Init+0x1d6>
 80155bc:	2307      	movs	r3, #7
 80155be:	e006      	b.n	80155ce <HAL_GPIO_Init+0x1d6>
 80155c0:	2303      	movs	r3, #3
 80155c2:	e004      	b.n	80155ce <HAL_GPIO_Init+0x1d6>
 80155c4:	2302      	movs	r3, #2
 80155c6:	e002      	b.n	80155ce <HAL_GPIO_Init+0x1d6>
 80155c8:	2301      	movs	r3, #1
 80155ca:	e000      	b.n	80155ce <HAL_GPIO_Init+0x1d6>
 80155cc:	2300      	movs	r3, #0
 80155ce:	697a      	ldr	r2, [r7, #20]
 80155d0:	f002 0203 	and.w	r2, r2, #3
 80155d4:	0092      	lsls	r2, r2, #2
 80155d6:	4093      	lsls	r3, r2
 80155d8:	693a      	ldr	r2, [r7, #16]
 80155da:	4313      	orrs	r3, r2
 80155dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80155de:	4938      	ldr	r1, [pc, #224]	; (80156c0 <HAL_GPIO_Init+0x2c8>)
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	089b      	lsrs	r3, r3, #2
 80155e4:	3302      	adds	r3, #2
 80155e6:	693a      	ldr	r2, [r7, #16]
 80155e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80155ec:	4b39      	ldr	r3, [pc, #228]	; (80156d4 <HAL_GPIO_Init+0x2dc>)
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	43db      	mvns	r3, r3
 80155f6:	693a      	ldr	r2, [r7, #16]
 80155f8:	4013      	ands	r3, r2
 80155fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	685b      	ldr	r3, [r3, #4]
 8015600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015604:	2b00      	cmp	r3, #0
 8015606:	d003      	beq.n	8015610 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8015608:	693a      	ldr	r2, [r7, #16]
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	4313      	orrs	r3, r2
 801560e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8015610:	4a30      	ldr	r2, [pc, #192]	; (80156d4 <HAL_GPIO_Init+0x2dc>)
 8015612:	693b      	ldr	r3, [r7, #16]
 8015614:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8015616:	4b2f      	ldr	r3, [pc, #188]	; (80156d4 <HAL_GPIO_Init+0x2dc>)
 8015618:	685b      	ldr	r3, [r3, #4]
 801561a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	43db      	mvns	r3, r3
 8015620:	693a      	ldr	r2, [r7, #16]
 8015622:	4013      	ands	r3, r2
 8015624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8015626:	683b      	ldr	r3, [r7, #0]
 8015628:	685b      	ldr	r3, [r3, #4]
 801562a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801562e:	2b00      	cmp	r3, #0
 8015630:	d003      	beq.n	801563a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8015632:	693a      	ldr	r2, [r7, #16]
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	4313      	orrs	r3, r2
 8015638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801563a:	4a26      	ldr	r2, [pc, #152]	; (80156d4 <HAL_GPIO_Init+0x2dc>)
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8015640:	4b24      	ldr	r3, [pc, #144]	; (80156d4 <HAL_GPIO_Init+0x2dc>)
 8015642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	43db      	mvns	r3, r3
 801564c:	693a      	ldr	r2, [r7, #16]
 801564e:	4013      	ands	r3, r2
 8015650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801565a:	2b00      	cmp	r3, #0
 801565c:	d003      	beq.n	8015666 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 801565e:	693a      	ldr	r2, [r7, #16]
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	4313      	orrs	r3, r2
 8015664:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8015666:	4a1b      	ldr	r2, [pc, #108]	; (80156d4 <HAL_GPIO_Init+0x2dc>)
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 801566e:	4b19      	ldr	r3, [pc, #100]	; (80156d4 <HAL_GPIO_Init+0x2dc>)
 8015670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	43db      	mvns	r3, r3
 801567a:	693a      	ldr	r2, [r7, #16]
 801567c:	4013      	ands	r3, r2
 801567e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	685b      	ldr	r3, [r3, #4]
 8015684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015688:	2b00      	cmp	r3, #0
 801568a:	d003      	beq.n	8015694 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 801568c:	693a      	ldr	r2, [r7, #16]
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	4313      	orrs	r3, r2
 8015692:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8015694:	4a0f      	ldr	r2, [pc, #60]	; (80156d4 <HAL_GPIO_Init+0x2dc>)
 8015696:	693b      	ldr	r3, [r7, #16]
 8015698:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 801569c:	697b      	ldr	r3, [r7, #20]
 801569e:	3301      	adds	r3, #1
 80156a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	681a      	ldr	r2, [r3, #0]
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	fa22 f303 	lsr.w	r3, r2, r3
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	f47f aeab 	bne.w	8015408 <HAL_GPIO_Init+0x10>
  }
}
 80156b2:	bf00      	nop
 80156b4:	bf00      	nop
 80156b6:	371c      	adds	r7, #28
 80156b8:	46bd      	mov	sp, r7
 80156ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156be:	4770      	bx	lr
 80156c0:	40010000 	.word	0x40010000
 80156c4:	48000400 	.word	0x48000400
 80156c8:	48000800 	.word	0x48000800
 80156cc:	48000c00 	.word	0x48000c00
 80156d0:	48001000 	.word	0x48001000
 80156d4:	58000800 	.word	0x58000800

080156d8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80156d8:	b480      	push	{r7}
 80156da:	b087      	sub	sp, #28
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
 80156e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80156e2:	2300      	movs	r3, #0
 80156e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80156e6:	e0bb      	b.n	8015860 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80156e8:	2201      	movs	r2, #1
 80156ea:	697b      	ldr	r3, [r7, #20]
 80156ec:	fa02 f303 	lsl.w	r3, r2, r3
 80156f0:	683a      	ldr	r2, [r7, #0]
 80156f2:	4013      	ands	r3, r2
 80156f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	f000 80ae 	beq.w	801585a <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80156fe:	4a5f      	ldr	r2, [pc, #380]	; (801587c <HAL_GPIO_DeInit+0x1a4>)
 8015700:	697b      	ldr	r3, [r7, #20]
 8015702:	089b      	lsrs	r3, r3, #2
 8015704:	3302      	adds	r3, #2
 8015706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801570a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	f003 0303 	and.w	r3, r3, #3
 8015712:	009b      	lsls	r3, r3, #2
 8015714:	220f      	movs	r2, #15
 8015716:	fa02 f303 	lsl.w	r3, r2, r3
 801571a:	68fa      	ldr	r2, [r7, #12]
 801571c:	4013      	ands	r3, r2
 801571e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8015726:	d019      	beq.n	801575c <HAL_GPIO_DeInit+0x84>
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	4a55      	ldr	r2, [pc, #340]	; (8015880 <HAL_GPIO_DeInit+0x1a8>)
 801572c:	4293      	cmp	r3, r2
 801572e:	d013      	beq.n	8015758 <HAL_GPIO_DeInit+0x80>
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	4a54      	ldr	r2, [pc, #336]	; (8015884 <HAL_GPIO_DeInit+0x1ac>)
 8015734:	4293      	cmp	r3, r2
 8015736:	d00d      	beq.n	8015754 <HAL_GPIO_DeInit+0x7c>
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	4a53      	ldr	r2, [pc, #332]	; (8015888 <HAL_GPIO_DeInit+0x1b0>)
 801573c:	4293      	cmp	r3, r2
 801573e:	d007      	beq.n	8015750 <HAL_GPIO_DeInit+0x78>
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	4a52      	ldr	r2, [pc, #328]	; (801588c <HAL_GPIO_DeInit+0x1b4>)
 8015744:	4293      	cmp	r3, r2
 8015746:	d101      	bne.n	801574c <HAL_GPIO_DeInit+0x74>
 8015748:	2304      	movs	r3, #4
 801574a:	e008      	b.n	801575e <HAL_GPIO_DeInit+0x86>
 801574c:	2307      	movs	r3, #7
 801574e:	e006      	b.n	801575e <HAL_GPIO_DeInit+0x86>
 8015750:	2303      	movs	r3, #3
 8015752:	e004      	b.n	801575e <HAL_GPIO_DeInit+0x86>
 8015754:	2302      	movs	r3, #2
 8015756:	e002      	b.n	801575e <HAL_GPIO_DeInit+0x86>
 8015758:	2301      	movs	r3, #1
 801575a:	e000      	b.n	801575e <HAL_GPIO_DeInit+0x86>
 801575c:	2300      	movs	r3, #0
 801575e:	697a      	ldr	r2, [r7, #20]
 8015760:	f002 0203 	and.w	r2, r2, #3
 8015764:	0092      	lsls	r2, r2, #2
 8015766:	4093      	lsls	r3, r2
 8015768:	68fa      	ldr	r2, [r7, #12]
 801576a:	429a      	cmp	r2, r3
 801576c:	d136      	bne.n	80157dc <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 801576e:	4b48      	ldr	r3, [pc, #288]	; (8015890 <HAL_GPIO_DeInit+0x1b8>)
 8015770:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8015774:	693b      	ldr	r3, [r7, #16]
 8015776:	43db      	mvns	r3, r3
 8015778:	4945      	ldr	r1, [pc, #276]	; (8015890 <HAL_GPIO_DeInit+0x1b8>)
 801577a:	4013      	ands	r3, r2
 801577c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8015780:	4b43      	ldr	r3, [pc, #268]	; (8015890 <HAL_GPIO_DeInit+0x1b8>)
 8015782:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8015786:	693b      	ldr	r3, [r7, #16]
 8015788:	43db      	mvns	r3, r3
 801578a:	4941      	ldr	r1, [pc, #260]	; (8015890 <HAL_GPIO_DeInit+0x1b8>)
 801578c:	4013      	ands	r3, r2
 801578e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8015792:	4b3f      	ldr	r3, [pc, #252]	; (8015890 <HAL_GPIO_DeInit+0x1b8>)
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	693b      	ldr	r3, [r7, #16]
 8015798:	43db      	mvns	r3, r3
 801579a:	493d      	ldr	r1, [pc, #244]	; (8015890 <HAL_GPIO_DeInit+0x1b8>)
 801579c:	4013      	ands	r3, r2
 801579e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80157a0:	4b3b      	ldr	r3, [pc, #236]	; (8015890 <HAL_GPIO_DeInit+0x1b8>)
 80157a2:	685a      	ldr	r2, [r3, #4]
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	43db      	mvns	r3, r3
 80157a8:	4939      	ldr	r1, [pc, #228]	; (8015890 <HAL_GPIO_DeInit+0x1b8>)
 80157aa:	4013      	ands	r3, r2
 80157ac:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	f003 0303 	and.w	r3, r3, #3
 80157b4:	009b      	lsls	r3, r3, #2
 80157b6:	220f      	movs	r2, #15
 80157b8:	fa02 f303 	lsl.w	r3, r2, r3
 80157bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80157be:	4a2f      	ldr	r2, [pc, #188]	; (801587c <HAL_GPIO_DeInit+0x1a4>)
 80157c0:	697b      	ldr	r3, [r7, #20]
 80157c2:	089b      	lsrs	r3, r3, #2
 80157c4:	3302      	adds	r3, #2
 80157c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	43da      	mvns	r2, r3
 80157ce:	482b      	ldr	r0, [pc, #172]	; (801587c <HAL_GPIO_DeInit+0x1a4>)
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	089b      	lsrs	r3, r3, #2
 80157d4:	400a      	ands	r2, r1
 80157d6:	3302      	adds	r3, #2
 80157d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	681a      	ldr	r2, [r3, #0]
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	005b      	lsls	r3, r3, #1
 80157e4:	2103      	movs	r1, #3
 80157e6:	fa01 f303 	lsl.w	r3, r1, r3
 80157ea:	431a      	orrs	r2, r3
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	08da      	lsrs	r2, r3, #3
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	3208      	adds	r2, #8
 80157f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	f003 0307 	and.w	r3, r3, #7
 8015802:	009b      	lsls	r3, r3, #2
 8015804:	220f      	movs	r2, #15
 8015806:	fa02 f303 	lsl.w	r3, r2, r3
 801580a:	43db      	mvns	r3, r3
 801580c:	697a      	ldr	r2, [r7, #20]
 801580e:	08d2      	lsrs	r2, r2, #3
 8015810:	4019      	ands	r1, r3
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	3208      	adds	r2, #8
 8015816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	68da      	ldr	r2, [r3, #12]
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	005b      	lsls	r3, r3, #1
 8015822:	2103      	movs	r1, #3
 8015824:	fa01 f303 	lsl.w	r3, r1, r3
 8015828:	43db      	mvns	r3, r3
 801582a:	401a      	ands	r2, r3
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	685a      	ldr	r2, [r3, #4]
 8015834:	2101      	movs	r1, #1
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	fa01 f303 	lsl.w	r3, r1, r3
 801583c:	43db      	mvns	r3, r3
 801583e:	401a      	ands	r2, r3
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	689a      	ldr	r2, [r3, #8]
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	005b      	lsls	r3, r3, #1
 801584c:	2103      	movs	r1, #3
 801584e:	fa01 f303 	lsl.w	r3, r1, r3
 8015852:	43db      	mvns	r3, r3
 8015854:	401a      	ands	r2, r3
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	609a      	str	r2, [r3, #8]
    }

    position++;
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	3301      	adds	r3, #1
 801585e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8015860:	683a      	ldr	r2, [r7, #0]
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	fa22 f303 	lsr.w	r3, r2, r3
 8015868:	2b00      	cmp	r3, #0
 801586a:	f47f af3d 	bne.w	80156e8 <HAL_GPIO_DeInit+0x10>
  }
}
 801586e:	bf00      	nop
 8015870:	bf00      	nop
 8015872:	371c      	adds	r7, #28
 8015874:	46bd      	mov	sp, r7
 8015876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587a:	4770      	bx	lr
 801587c:	40010000 	.word	0x40010000
 8015880:	48000400 	.word	0x48000400
 8015884:	48000800 	.word	0x48000800
 8015888:	48000c00 	.word	0x48000c00
 801588c:	48001000 	.word	0x48001000
 8015890:	58000800 	.word	0x58000800

08015894 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8015894:	b480      	push	{r7}
 8015896:	b085      	sub	sp, #20
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
 801589c:	460b      	mov	r3, r1
 801589e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	691a      	ldr	r2, [r3, #16]
 80158a4:	887b      	ldrh	r3, [r7, #2]
 80158a6:	4013      	ands	r3, r2
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d002      	beq.n	80158b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80158ac:	2301      	movs	r3, #1
 80158ae:	73fb      	strb	r3, [r7, #15]
 80158b0:	e001      	b.n	80158b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80158b2:	2300      	movs	r3, #0
 80158b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80158b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80158b8:	4618      	mov	r0, r3
 80158ba:	3714      	adds	r7, #20
 80158bc:	46bd      	mov	sp, r7
 80158be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c2:	4770      	bx	lr

080158c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80158c4:	b480      	push	{r7}
 80158c6:	b083      	sub	sp, #12
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	460b      	mov	r3, r1
 80158ce:	807b      	strh	r3, [r7, #2]
 80158d0:	4613      	mov	r3, r2
 80158d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80158d4:	787b      	ldrb	r3, [r7, #1]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d003      	beq.n	80158e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80158da:	887a      	ldrh	r2, [r7, #2]
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80158e0:	e002      	b.n	80158e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80158e2:	887a      	ldrh	r2, [r7, #2]
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80158e8:	bf00      	nop
 80158ea:	370c      	adds	r7, #12
 80158ec:	46bd      	mov	sp, r7
 80158ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f2:	4770      	bx	lr

080158f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b082      	sub	sp, #8
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d101      	bne.n	8015906 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8015902:	2301      	movs	r3, #1
 8015904:	e081      	b.n	8015a0a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801590c:	b2db      	uxtb	r3, r3
 801590e:	2b00      	cmp	r3, #0
 8015910:	d106      	bne.n	8015920 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2200      	movs	r2, #0
 8015916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801591a:	6878      	ldr	r0, [r7, #4]
 801591c:	f000 f8a8 	bl	8015a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2224      	movs	r2, #36	; 0x24
 8015924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	681a      	ldr	r2, [r3, #0]
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	f022 0201 	bic.w	r2, r2, #1
 8015936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	685a      	ldr	r2, [r3, #4]
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8015944:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	689a      	ldr	r2, [r3, #8]
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	681b      	ldr	r3, [r3, #0]
 8015950:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8015954:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	68db      	ldr	r3, [r3, #12]
 801595a:	2b01      	cmp	r3, #1
 801595c:	d107      	bne.n	801596e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	689a      	ldr	r2, [r3, #8]
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801596a:	609a      	str	r2, [r3, #8]
 801596c:	e006      	b.n	801597c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	689a      	ldr	r2, [r3, #8]
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801597a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	68db      	ldr	r3, [r3, #12]
 8015980:	2b02      	cmp	r3, #2
 8015982:	d104      	bne.n	801598e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801598c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	685b      	ldr	r3, [r3, #4]
 8015994:	687a      	ldr	r2, [r7, #4]
 8015996:	6812      	ldr	r2, [r2, #0]
 8015998:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801599c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80159a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	68da      	ldr	r2, [r3, #12]
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80159b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	691a      	ldr	r2, [r3, #16]
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	695b      	ldr	r3, [r3, #20]
 80159ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	699b      	ldr	r3, [r3, #24]
 80159c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	430a      	orrs	r2, r1
 80159ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	69d9      	ldr	r1, [r3, #28]
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	6a1a      	ldr	r2, [r3, #32]
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	430a      	orrs	r2, r1
 80159da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	681a      	ldr	r2, [r3, #0]
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	f042 0201 	orr.w	r2, r2, #1
 80159ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	2200      	movs	r2, #0
 80159f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	2220      	movs	r2, #32
 80159f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	2200      	movs	r2, #0
 80159fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	2200      	movs	r2, #0
 8015a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8015a08:	2300      	movs	r3, #0
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3708      	adds	r7, #8
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}

08015a12 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8015a12:	b580      	push	{r7, lr}
 8015a14:	b082      	sub	sp, #8
 8015a16:	af00      	add	r7, sp, #0
 8015a18:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d101      	bne.n	8015a24 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8015a20:	2301      	movs	r3, #1
 8015a22:	e021      	b.n	8015a68 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	2224      	movs	r2, #36	; 0x24
 8015a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	681a      	ldr	r2, [r3, #0]
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	f022 0201 	bic.w	r2, r2, #1
 8015a3a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8015a3c:	6878      	ldr	r0, [r7, #4]
 8015a3e:	f000 f821 	bl	8015a84 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2200      	movs	r2, #0
 8015a46:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	2200      	movs	r2, #0
 8015a54:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	2200      	movs	r2, #0
 8015a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2200      	movs	r2, #0
 8015a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8015a66:	2300      	movs	r3, #0
}
 8015a68:	4618      	mov	r0, r3
 8015a6a:	3708      	adds	r7, #8
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	bd80      	pop	{r7, pc}

08015a70 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8015a70:	b480      	push	{r7}
 8015a72:	b083      	sub	sp, #12
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8015a78:	bf00      	nop
 8015a7a:	370c      	adds	r7, #12
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a82:	4770      	bx	lr

08015a84 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8015a84:	b480      	push	{r7}
 8015a86:	b083      	sub	sp, #12
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8015a8c:	bf00      	nop
 8015a8e:	370c      	adds	r7, #12
 8015a90:	46bd      	mov	sp, r7
 8015a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a96:	4770      	bx	lr

08015a98 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b088      	sub	sp, #32
 8015a9c:	af02      	add	r7, sp, #8
 8015a9e:	60f8      	str	r0, [r7, #12]
 8015aa0:	607a      	str	r2, [r7, #4]
 8015aa2:	461a      	mov	r2, r3
 8015aa4:	460b      	mov	r3, r1
 8015aa6:	817b      	strh	r3, [r7, #10]
 8015aa8:	4613      	mov	r3, r2
 8015aaa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015ab2:	b2db      	uxtb	r3, r3
 8015ab4:	2b20      	cmp	r3, #32
 8015ab6:	f040 80da 	bne.w	8015c6e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015ac0:	2b01      	cmp	r3, #1
 8015ac2:	d101      	bne.n	8015ac8 <HAL_I2C_Master_Transmit+0x30>
 8015ac4:	2302      	movs	r3, #2
 8015ac6:	e0d3      	b.n	8015c70 <HAL_I2C_Master_Transmit+0x1d8>
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	2201      	movs	r2, #1
 8015acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015ad0:	f7ff fb72 	bl	80151b8 <HAL_GetTick>
 8015ad4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	9300      	str	r3, [sp, #0]
 8015ada:	2319      	movs	r3, #25
 8015adc:	2201      	movs	r2, #1
 8015ade:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015ae2:	68f8      	ldr	r0, [r7, #12]
 8015ae4:	f000 fa00 	bl	8015ee8 <I2C_WaitOnFlagUntilTimeout>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d001      	beq.n	8015af2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8015aee:	2301      	movs	r3, #1
 8015af0:	e0be      	b.n	8015c70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	2221      	movs	r2, #33	; 0x21
 8015af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	2210      	movs	r2, #16
 8015afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	2200      	movs	r2, #0
 8015b06:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	893a      	ldrh	r2, [r7, #8]
 8015b12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	2200      	movs	r2, #0
 8015b18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b1e:	b29b      	uxth	r3, r3
 8015b20:	2bff      	cmp	r3, #255	; 0xff
 8015b22:	d90e      	bls.n	8015b42 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	22ff      	movs	r2, #255	; 0xff
 8015b28:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b2e:	b2da      	uxtb	r2, r3
 8015b30:	8979      	ldrh	r1, [r7, #10]
 8015b32:	4b51      	ldr	r3, [pc, #324]	; (8015c78 <HAL_I2C_Master_Transmit+0x1e0>)
 8015b34:	9300      	str	r3, [sp, #0]
 8015b36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015b3a:	68f8      	ldr	r0, [r7, #12]
 8015b3c:	f000 fc10 	bl	8016360 <I2C_TransferConfig>
 8015b40:	e06c      	b.n	8015c1c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b46:	b29a      	uxth	r2, r3
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b50:	b2da      	uxtb	r2, r3
 8015b52:	8979      	ldrh	r1, [r7, #10]
 8015b54:	4b48      	ldr	r3, [pc, #288]	; (8015c78 <HAL_I2C_Master_Transmit+0x1e0>)
 8015b56:	9300      	str	r3, [sp, #0]
 8015b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015b5c:	68f8      	ldr	r0, [r7, #12]
 8015b5e:	f000 fbff 	bl	8016360 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8015b62:	e05b      	b.n	8015c1c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015b64:	697a      	ldr	r2, [r7, #20]
 8015b66:	6a39      	ldr	r1, [r7, #32]
 8015b68:	68f8      	ldr	r0, [r7, #12]
 8015b6a:	f000 fa0c 	bl	8015f86 <I2C_WaitOnTXISFlagUntilTimeout>
 8015b6e:	4603      	mov	r3, r0
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d001      	beq.n	8015b78 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8015b74:	2301      	movs	r3, #1
 8015b76:	e07b      	b.n	8015c70 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b7c:	781a      	ldrb	r2, [r3, #0]
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b88:	1c5a      	adds	r2, r3, #1
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b92:	b29b      	uxth	r3, r3
 8015b94:	3b01      	subs	r3, #1
 8015b96:	b29a      	uxth	r2, r3
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ba0:	3b01      	subs	r3, #1
 8015ba2:	b29a      	uxth	r2, r3
 8015ba4:	68fb      	ldr	r3, [r7, #12]
 8015ba6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015bac:	b29b      	uxth	r3, r3
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d034      	beq.n	8015c1c <HAL_I2C_Master_Transmit+0x184>
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d130      	bne.n	8015c1c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	9300      	str	r3, [sp, #0]
 8015bbe:	6a3b      	ldr	r3, [r7, #32]
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	2180      	movs	r1, #128	; 0x80
 8015bc4:	68f8      	ldr	r0, [r7, #12]
 8015bc6:	f000 f98f 	bl	8015ee8 <I2C_WaitOnFlagUntilTimeout>
 8015bca:	4603      	mov	r3, r0
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d001      	beq.n	8015bd4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8015bd0:	2301      	movs	r3, #1
 8015bd2:	e04d      	b.n	8015c70 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015bd8:	b29b      	uxth	r3, r3
 8015bda:	2bff      	cmp	r3, #255	; 0xff
 8015bdc:	d90e      	bls.n	8015bfc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	22ff      	movs	r2, #255	; 0xff
 8015be2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015be8:	b2da      	uxtb	r2, r3
 8015bea:	8979      	ldrh	r1, [r7, #10]
 8015bec:	2300      	movs	r3, #0
 8015bee:	9300      	str	r3, [sp, #0]
 8015bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015bf4:	68f8      	ldr	r0, [r7, #12]
 8015bf6:	f000 fbb3 	bl	8016360 <I2C_TransferConfig>
 8015bfa:	e00f      	b.n	8015c1c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c00:	b29a      	uxth	r2, r3
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c0a:	b2da      	uxtb	r2, r3
 8015c0c:	8979      	ldrh	r1, [r7, #10]
 8015c0e:	2300      	movs	r3, #0
 8015c10:	9300      	str	r3, [sp, #0]
 8015c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015c16:	68f8      	ldr	r0, [r7, #12]
 8015c18:	f000 fba2 	bl	8016360 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015c20:	b29b      	uxth	r3, r3
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d19e      	bne.n	8015b64 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015c26:	697a      	ldr	r2, [r7, #20]
 8015c28:	6a39      	ldr	r1, [r7, #32]
 8015c2a:	68f8      	ldr	r0, [r7, #12]
 8015c2c:	f000 f9f2 	bl	8016014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015c30:	4603      	mov	r3, r0
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d001      	beq.n	8015c3a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8015c36:	2301      	movs	r3, #1
 8015c38:	e01a      	b.n	8015c70 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	2220      	movs	r2, #32
 8015c40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	6859      	ldr	r1, [r3, #4]
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	681a      	ldr	r2, [r3, #0]
 8015c4c:	4b0b      	ldr	r3, [pc, #44]	; (8015c7c <HAL_I2C_Master_Transmit+0x1e4>)
 8015c4e:	400b      	ands	r3, r1
 8015c50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	2220      	movs	r2, #32
 8015c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	2200      	movs	r2, #0
 8015c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015c6a:	2300      	movs	r3, #0
 8015c6c:	e000      	b.n	8015c70 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8015c6e:	2302      	movs	r3, #2
  }
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	3718      	adds	r7, #24
 8015c74:	46bd      	mov	sp, r7
 8015c76:	bd80      	pop	{r7, pc}
 8015c78:	80002000 	.word	0x80002000
 8015c7c:	fe00e800 	.word	0xfe00e800

08015c80 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b088      	sub	sp, #32
 8015c84:	af02      	add	r7, sp, #8
 8015c86:	60f8      	str	r0, [r7, #12]
 8015c88:	607a      	str	r2, [r7, #4]
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	460b      	mov	r3, r1
 8015c8e:	817b      	strh	r3, [r7, #10]
 8015c90:	4613      	mov	r3, r2
 8015c92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015c9a:	b2db      	uxtb	r3, r3
 8015c9c:	2b20      	cmp	r3, #32
 8015c9e:	f040 80db 	bne.w	8015e58 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015ca8:	2b01      	cmp	r3, #1
 8015caa:	d101      	bne.n	8015cb0 <HAL_I2C_Master_Receive+0x30>
 8015cac:	2302      	movs	r3, #2
 8015cae:	e0d4      	b.n	8015e5a <HAL_I2C_Master_Receive+0x1da>
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	2201      	movs	r2, #1
 8015cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8015cb8:	f7ff fa7e 	bl	80151b8 <HAL_GetTick>
 8015cbc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8015cbe:	697b      	ldr	r3, [r7, #20]
 8015cc0:	9300      	str	r3, [sp, #0]
 8015cc2:	2319      	movs	r3, #25
 8015cc4:	2201      	movs	r2, #1
 8015cc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015cca:	68f8      	ldr	r0, [r7, #12]
 8015ccc:	f000 f90c 	bl	8015ee8 <I2C_WaitOnFlagUntilTimeout>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d001      	beq.n	8015cda <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	e0bf      	b.n	8015e5a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	2222      	movs	r2, #34	; 0x22
 8015cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	2210      	movs	r2, #16
 8015ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	2200      	movs	r2, #0
 8015cee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	687a      	ldr	r2, [r7, #4]
 8015cf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	893a      	ldrh	r2, [r7, #8]
 8015cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	2200      	movs	r2, #0
 8015d00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d06:	b29b      	uxth	r3, r3
 8015d08:	2bff      	cmp	r3, #255	; 0xff
 8015d0a:	d90e      	bls.n	8015d2a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	22ff      	movs	r2, #255	; 0xff
 8015d10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d16:	b2da      	uxtb	r2, r3
 8015d18:	8979      	ldrh	r1, [r7, #10]
 8015d1a:	4b52      	ldr	r3, [pc, #328]	; (8015e64 <HAL_I2C_Master_Receive+0x1e4>)
 8015d1c:	9300      	str	r3, [sp, #0]
 8015d1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015d22:	68f8      	ldr	r0, [r7, #12]
 8015d24:	f000 fb1c 	bl	8016360 <I2C_TransferConfig>
 8015d28:	e06d      	b.n	8015e06 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d2e:	b29a      	uxth	r2, r3
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d38:	b2da      	uxtb	r2, r3
 8015d3a:	8979      	ldrh	r1, [r7, #10]
 8015d3c:	4b49      	ldr	r3, [pc, #292]	; (8015e64 <HAL_I2C_Master_Receive+0x1e4>)
 8015d3e:	9300      	str	r3, [sp, #0]
 8015d40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015d44:	68f8      	ldr	r0, [r7, #12]
 8015d46:	f000 fb0b 	bl	8016360 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8015d4a:	e05c      	b.n	8015e06 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015d4c:	697a      	ldr	r2, [r7, #20]
 8015d4e:	6a39      	ldr	r1, [r7, #32]
 8015d50:	68f8      	ldr	r0, [r7, #12]
 8015d52:	f000 f9a3 	bl	801609c <I2C_WaitOnRXNEFlagUntilTimeout>
 8015d56:	4603      	mov	r3, r0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d001      	beq.n	8015d60 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8015d5c:	2301      	movs	r3, #1
 8015d5e:	e07c      	b.n	8015e5a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d6a:	b2d2      	uxtb	r2, r2
 8015d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d72:	1c5a      	adds	r2, r3, #1
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d7c:	3b01      	subs	r3, #1
 8015d7e:	b29a      	uxth	r2, r3
 8015d80:	68fb      	ldr	r3, [r7, #12]
 8015d82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d88:	b29b      	uxth	r3, r3
 8015d8a:	3b01      	subs	r3, #1
 8015d8c:	b29a      	uxth	r2, r3
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015d96:	b29b      	uxth	r3, r3
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d034      	beq.n	8015e06 <HAL_I2C_Master_Receive+0x186>
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d130      	bne.n	8015e06 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8015da4:	697b      	ldr	r3, [r7, #20]
 8015da6:	9300      	str	r3, [sp, #0]
 8015da8:	6a3b      	ldr	r3, [r7, #32]
 8015daa:	2200      	movs	r2, #0
 8015dac:	2180      	movs	r1, #128	; 0x80
 8015dae:	68f8      	ldr	r0, [r7, #12]
 8015db0:	f000 f89a 	bl	8015ee8 <I2C_WaitOnFlagUntilTimeout>
 8015db4:	4603      	mov	r3, r0
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d001      	beq.n	8015dbe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8015dba:	2301      	movs	r3, #1
 8015dbc:	e04d      	b.n	8015e5a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015dc2:	b29b      	uxth	r3, r3
 8015dc4:	2bff      	cmp	r3, #255	; 0xff
 8015dc6:	d90e      	bls.n	8015de6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	22ff      	movs	r2, #255	; 0xff
 8015dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015dd2:	b2da      	uxtb	r2, r3
 8015dd4:	8979      	ldrh	r1, [r7, #10]
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	9300      	str	r3, [sp, #0]
 8015dda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8015dde:	68f8      	ldr	r0, [r7, #12]
 8015de0:	f000 fabe 	bl	8016360 <I2C_TransferConfig>
 8015de4:	e00f      	b.n	8015e06 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015dea:	b29a      	uxth	r2, r3
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015df4:	b2da      	uxtb	r2, r3
 8015df6:	8979      	ldrh	r1, [r7, #10]
 8015df8:	2300      	movs	r3, #0
 8015dfa:	9300      	str	r3, [sp, #0]
 8015dfc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015e00:	68f8      	ldr	r0, [r7, #12]
 8015e02:	f000 faad 	bl	8016360 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e0a:	b29b      	uxth	r3, r3
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d19d      	bne.n	8015d4c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8015e10:	697a      	ldr	r2, [r7, #20]
 8015e12:	6a39      	ldr	r1, [r7, #32]
 8015e14:	68f8      	ldr	r0, [r7, #12]
 8015e16:	f000 f8fd 	bl	8016014 <I2C_WaitOnSTOPFlagUntilTimeout>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d001      	beq.n	8015e24 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8015e20:	2301      	movs	r3, #1
 8015e22:	e01a      	b.n	8015e5a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	2220      	movs	r2, #32
 8015e2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	6859      	ldr	r1, [r3, #4]
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	681a      	ldr	r2, [r3, #0]
 8015e36:	4b0c      	ldr	r3, [pc, #48]	; (8015e68 <HAL_I2C_Master_Receive+0x1e8>)
 8015e38:	400b      	ands	r3, r1
 8015e3a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	2220      	movs	r2, #32
 8015e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	2200      	movs	r2, #0
 8015e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	2200      	movs	r2, #0
 8015e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8015e54:	2300      	movs	r3, #0
 8015e56:	e000      	b.n	8015e5a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8015e58:	2302      	movs	r3, #2
  }
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3718      	adds	r7, #24
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}
 8015e62:	bf00      	nop
 8015e64:	80002400 	.word	0x80002400
 8015e68:	fe00e800 	.word	0xfe00e800

08015e6c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8015e6c:	b480      	push	{r7}
 8015e6e:	b083      	sub	sp, #12
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8015e7a:	b2db      	uxtb	r3, r3
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	370c      	adds	r7, #12
 8015e80:	46bd      	mov	sp, r7
 8015e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e86:	4770      	bx	lr

08015e88 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8015e88:	b480      	push	{r7}
 8015e8a:	b083      	sub	sp, #12
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8015e94:	4618      	mov	r0, r3
 8015e96:	370c      	adds	r7, #12
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9e:	4770      	bx	lr

08015ea0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8015ea0:	b480      	push	{r7}
 8015ea2:	b083      	sub	sp, #12
 8015ea4:	af00      	add	r7, sp, #0
 8015ea6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	699b      	ldr	r3, [r3, #24]
 8015eae:	f003 0302 	and.w	r3, r3, #2
 8015eb2:	2b02      	cmp	r3, #2
 8015eb4:	d103      	bne.n	8015ebe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	699b      	ldr	r3, [r3, #24]
 8015ec4:	f003 0301 	and.w	r3, r3, #1
 8015ec8:	2b01      	cmp	r3, #1
 8015eca:	d007      	beq.n	8015edc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	699a      	ldr	r2, [r3, #24]
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	f042 0201 	orr.w	r2, r2, #1
 8015eda:	619a      	str	r2, [r3, #24]
  }
}
 8015edc:	bf00      	nop
 8015ede:	370c      	adds	r7, #12
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee6:	4770      	bx	lr

08015ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b084      	sub	sp, #16
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	60f8      	str	r0, [r7, #12]
 8015ef0:	60b9      	str	r1, [r7, #8]
 8015ef2:	603b      	str	r3, [r7, #0]
 8015ef4:	4613      	mov	r3, r2
 8015ef6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015ef8:	e031      	b.n	8015f5e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f00:	d02d      	beq.n	8015f5e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015f02:	f7ff f959 	bl	80151b8 <HAL_GetTick>
 8015f06:	4602      	mov	r2, r0
 8015f08:	69bb      	ldr	r3, [r7, #24]
 8015f0a:	1ad3      	subs	r3, r2, r3
 8015f0c:	683a      	ldr	r2, [r7, #0]
 8015f0e:	429a      	cmp	r2, r3
 8015f10:	d302      	bcc.n	8015f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d122      	bne.n	8015f5e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	699a      	ldr	r2, [r3, #24]
 8015f1e:	68bb      	ldr	r3, [r7, #8]
 8015f20:	4013      	ands	r3, r2
 8015f22:	68ba      	ldr	r2, [r7, #8]
 8015f24:	429a      	cmp	r2, r3
 8015f26:	bf0c      	ite	eq
 8015f28:	2301      	moveq	r3, #1
 8015f2a:	2300      	movne	r3, #0
 8015f2c:	b2db      	uxtb	r3, r3
 8015f2e:	461a      	mov	r2, r3
 8015f30:	79fb      	ldrb	r3, [r7, #7]
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d113      	bne.n	8015f5e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f3a:	f043 0220 	orr.w	r2, r3, #32
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2220      	movs	r2, #32
 8015f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	2200      	movs	r2, #0
 8015f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8015f5a:	2301      	movs	r3, #1
 8015f5c:	e00f      	b.n	8015f7e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	699a      	ldr	r2, [r3, #24]
 8015f64:	68bb      	ldr	r3, [r7, #8]
 8015f66:	4013      	ands	r3, r2
 8015f68:	68ba      	ldr	r2, [r7, #8]
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	bf0c      	ite	eq
 8015f6e:	2301      	moveq	r3, #1
 8015f70:	2300      	movne	r3, #0
 8015f72:	b2db      	uxtb	r3, r3
 8015f74:	461a      	mov	r2, r3
 8015f76:	79fb      	ldrb	r3, [r7, #7]
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	d0be      	beq.n	8015efa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015f7c:	2300      	movs	r3, #0
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3710      	adds	r7, #16
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}

08015f86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8015f86:	b580      	push	{r7, lr}
 8015f88:	b084      	sub	sp, #16
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	60f8      	str	r0, [r7, #12]
 8015f8e:	60b9      	str	r1, [r7, #8]
 8015f90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015f92:	e033      	b.n	8015ffc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8015f94:	687a      	ldr	r2, [r7, #4]
 8015f96:	68b9      	ldr	r1, [r7, #8]
 8015f98:	68f8      	ldr	r0, [r7, #12]
 8015f9a:	f000 f901 	bl	80161a0 <I2C_IsErrorOccurred>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d001      	beq.n	8015fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	e031      	b.n	801600c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fae:	d025      	beq.n	8015ffc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015fb0:	f7ff f902 	bl	80151b8 <HAL_GetTick>
 8015fb4:	4602      	mov	r2, r0
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	1ad3      	subs	r3, r2, r3
 8015fba:	68ba      	ldr	r2, [r7, #8]
 8015fbc:	429a      	cmp	r2, r3
 8015fbe:	d302      	bcc.n	8015fc6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8015fc0:	68bb      	ldr	r3, [r7, #8]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d11a      	bne.n	8015ffc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	699b      	ldr	r3, [r3, #24]
 8015fcc:	f003 0302 	and.w	r3, r3, #2
 8015fd0:	2b02      	cmp	r3, #2
 8015fd2:	d013      	beq.n	8015ffc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015fd8:	f043 0220 	orr.w	r2, r3, #32
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	2220      	movs	r2, #32
 8015fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	2200      	movs	r2, #0
 8015fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8015ff8:	2301      	movs	r3, #1
 8015ffa:	e007      	b.n	801600c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	699b      	ldr	r3, [r3, #24]
 8016002:	f003 0302 	and.w	r3, r3, #2
 8016006:	2b02      	cmp	r3, #2
 8016008:	d1c4      	bne.n	8015f94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 801600a:	2300      	movs	r3, #0
}
 801600c:	4618      	mov	r0, r3
 801600e:	3710      	adds	r7, #16
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}

08016014 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b084      	sub	sp, #16
 8016018:	af00      	add	r7, sp, #0
 801601a:	60f8      	str	r0, [r7, #12]
 801601c:	60b9      	str	r1, [r7, #8]
 801601e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016020:	e02f      	b.n	8016082 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	68b9      	ldr	r1, [r7, #8]
 8016026:	68f8      	ldr	r0, [r7, #12]
 8016028:	f000 f8ba 	bl	80161a0 <I2C_IsErrorOccurred>
 801602c:	4603      	mov	r3, r0
 801602e:	2b00      	cmp	r3, #0
 8016030:	d001      	beq.n	8016036 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8016032:	2301      	movs	r3, #1
 8016034:	e02d      	b.n	8016092 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016036:	f7ff f8bf 	bl	80151b8 <HAL_GetTick>
 801603a:	4602      	mov	r2, r0
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	1ad3      	subs	r3, r2, r3
 8016040:	68ba      	ldr	r2, [r7, #8]
 8016042:	429a      	cmp	r2, r3
 8016044:	d302      	bcc.n	801604c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8016046:	68bb      	ldr	r3, [r7, #8]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d11a      	bne.n	8016082 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	699b      	ldr	r3, [r3, #24]
 8016052:	f003 0320 	and.w	r3, r3, #32
 8016056:	2b20      	cmp	r3, #32
 8016058:	d013      	beq.n	8016082 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801605e:	f043 0220 	orr.w	r2, r3, #32
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	2220      	movs	r2, #32
 801606a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	2200      	movs	r2, #0
 8016072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	2200      	movs	r2, #0
 801607a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801607e:	2301      	movs	r3, #1
 8016080:	e007      	b.n	8016092 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	699b      	ldr	r3, [r3, #24]
 8016088:	f003 0320 	and.w	r3, r3, #32
 801608c:	2b20      	cmp	r3, #32
 801608e:	d1c8      	bne.n	8016022 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016090:	2300      	movs	r3, #0
}
 8016092:	4618      	mov	r0, r3
 8016094:	3710      	adds	r7, #16
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}
	...

0801609c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801609c:	b580      	push	{r7, lr}
 801609e:	b084      	sub	sp, #16
 80160a0:	af00      	add	r7, sp, #0
 80160a2:	60f8      	str	r0, [r7, #12]
 80160a4:	60b9      	str	r1, [r7, #8]
 80160a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80160a8:	e06b      	b.n	8016182 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80160aa:	687a      	ldr	r2, [r7, #4]
 80160ac:	68b9      	ldr	r1, [r7, #8]
 80160ae:	68f8      	ldr	r0, [r7, #12]
 80160b0:	f000 f876 	bl	80161a0 <I2C_IsErrorOccurred>
 80160b4:	4603      	mov	r3, r0
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d001      	beq.n	80160be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80160ba:	2301      	movs	r3, #1
 80160bc:	e069      	b.n	8016192 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	699b      	ldr	r3, [r3, #24]
 80160c4:	f003 0320 	and.w	r3, r3, #32
 80160c8:	2b20      	cmp	r3, #32
 80160ca:	d138      	bne.n	801613e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	699b      	ldr	r3, [r3, #24]
 80160d2:	f003 0304 	and.w	r3, r3, #4
 80160d6:	2b04      	cmp	r3, #4
 80160d8:	d105      	bne.n	80160e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d001      	beq.n	80160e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80160e2:	2300      	movs	r3, #0
 80160e4:	e055      	b.n	8016192 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	699b      	ldr	r3, [r3, #24]
 80160ec:	f003 0310 	and.w	r3, r3, #16
 80160f0:	2b10      	cmp	r3, #16
 80160f2:	d107      	bne.n	8016104 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	2210      	movs	r2, #16
 80160fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	2204      	movs	r2, #4
 8016100:	645a      	str	r2, [r3, #68]	; 0x44
 8016102:	e002      	b.n	801610a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2200      	movs	r2, #0
 8016108:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	2220      	movs	r2, #32
 8016110:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	6859      	ldr	r1, [r3, #4]
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	681a      	ldr	r2, [r3, #0]
 801611c:	4b1f      	ldr	r3, [pc, #124]	; (801619c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 801611e:	400b      	ands	r3, r1
 8016120:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	2220      	movs	r2, #32
 8016126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	2200      	movs	r2, #0
 801612e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	2200      	movs	r2, #0
 8016136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801613a:	2301      	movs	r3, #1
 801613c:	e029      	b.n	8016192 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801613e:	f7ff f83b 	bl	80151b8 <HAL_GetTick>
 8016142:	4602      	mov	r2, r0
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	1ad3      	subs	r3, r2, r3
 8016148:	68ba      	ldr	r2, [r7, #8]
 801614a:	429a      	cmp	r2, r3
 801614c:	d302      	bcc.n	8016154 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801614e:	68bb      	ldr	r3, [r7, #8]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d116      	bne.n	8016182 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	699b      	ldr	r3, [r3, #24]
 801615a:	f003 0304 	and.w	r3, r3, #4
 801615e:	2b04      	cmp	r3, #4
 8016160:	d00f      	beq.n	8016182 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016166:	f043 0220 	orr.w	r2, r3, #32
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	2220      	movs	r2, #32
 8016172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	2200      	movs	r2, #0
 801617a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801617e:	2301      	movs	r3, #1
 8016180:	e007      	b.n	8016192 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	699b      	ldr	r3, [r3, #24]
 8016188:	f003 0304 	and.w	r3, r3, #4
 801618c:	2b04      	cmp	r3, #4
 801618e:	d18c      	bne.n	80160aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8016190:	2300      	movs	r3, #0
}
 8016192:	4618      	mov	r0, r3
 8016194:	3710      	adds	r7, #16
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}
 801619a:	bf00      	nop
 801619c:	fe00e800 	.word	0xfe00e800

080161a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b08a      	sub	sp, #40	; 0x28
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	60f8      	str	r0, [r7, #12]
 80161a8:	60b9      	str	r1, [r7, #8]
 80161aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80161ac:	2300      	movs	r3, #0
 80161ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	699b      	ldr	r3, [r3, #24]
 80161b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80161ba:	2300      	movs	r3, #0
 80161bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80161c2:	69bb      	ldr	r3, [r7, #24]
 80161c4:	f003 0310 	and.w	r3, r3, #16
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d068      	beq.n	801629e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	2210      	movs	r2, #16
 80161d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80161d4:	e049      	b.n	801626a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161dc:	d045      	beq.n	801626a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80161de:	f7fe ffeb 	bl	80151b8 <HAL_GetTick>
 80161e2:	4602      	mov	r2, r0
 80161e4:	69fb      	ldr	r3, [r7, #28]
 80161e6:	1ad3      	subs	r3, r2, r3
 80161e8:	68ba      	ldr	r2, [r7, #8]
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d302      	bcc.n	80161f4 <I2C_IsErrorOccurred+0x54>
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d13a      	bne.n	801626a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	685b      	ldr	r3, [r3, #4]
 80161fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80161fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016206:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	699b      	ldr	r3, [r3, #24]
 801620e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016216:	d121      	bne.n	801625c <I2C_IsErrorOccurred+0xbc>
 8016218:	697b      	ldr	r3, [r7, #20]
 801621a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801621e:	d01d      	beq.n	801625c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8016220:	7cfb      	ldrb	r3, [r7, #19]
 8016222:	2b20      	cmp	r3, #32
 8016224:	d01a      	beq.n	801625c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	685a      	ldr	r2, [r3, #4]
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016234:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8016236:	f7fe ffbf 	bl	80151b8 <HAL_GetTick>
 801623a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801623c:	e00e      	b.n	801625c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801623e:	f7fe ffbb 	bl	80151b8 <HAL_GetTick>
 8016242:	4602      	mov	r2, r0
 8016244:	69fb      	ldr	r3, [r7, #28]
 8016246:	1ad3      	subs	r3, r2, r3
 8016248:	2b19      	cmp	r3, #25
 801624a:	d907      	bls.n	801625c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 801624c:	6a3b      	ldr	r3, [r7, #32]
 801624e:	f043 0320 	orr.w	r3, r3, #32
 8016252:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8016254:	2301      	movs	r3, #1
 8016256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801625a:	e006      	b.n	801626a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	699b      	ldr	r3, [r3, #24]
 8016262:	f003 0320 	and.w	r3, r3, #32
 8016266:	2b20      	cmp	r3, #32
 8016268:	d1e9      	bne.n	801623e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	699b      	ldr	r3, [r3, #24]
 8016270:	f003 0320 	and.w	r3, r3, #32
 8016274:	2b20      	cmp	r3, #32
 8016276:	d003      	beq.n	8016280 <I2C_IsErrorOccurred+0xe0>
 8016278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801627c:	2b00      	cmp	r3, #0
 801627e:	d0aa      	beq.n	80161d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8016280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016284:	2b00      	cmp	r3, #0
 8016286:	d103      	bne.n	8016290 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	2220      	movs	r2, #32
 801628e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8016290:	6a3b      	ldr	r3, [r7, #32]
 8016292:	f043 0304 	orr.w	r3, r3, #4
 8016296:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8016298:	2301      	movs	r3, #1
 801629a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	699b      	ldr	r3, [r3, #24]
 80162a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80162a6:	69bb      	ldr	r3, [r7, #24]
 80162a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d00b      	beq.n	80162c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80162b0:	6a3b      	ldr	r3, [r7, #32]
 80162b2:	f043 0301 	orr.w	r3, r3, #1
 80162b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80162c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80162c2:	2301      	movs	r3, #1
 80162c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80162c8:	69bb      	ldr	r3, [r7, #24]
 80162ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d00b      	beq.n	80162ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80162d2:	6a3b      	ldr	r3, [r7, #32]
 80162d4:	f043 0308 	orr.w	r3, r3, #8
 80162d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80162e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80162e4:	2301      	movs	r3, #1
 80162e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80162ea:	69bb      	ldr	r3, [r7, #24]
 80162ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d00b      	beq.n	801630c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80162f4:	6a3b      	ldr	r3, [r7, #32]
 80162f6:	f043 0302 	orr.w	r3, r3, #2
 80162fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016304:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8016306:	2301      	movs	r3, #1
 8016308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801630c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016310:	2b00      	cmp	r3, #0
 8016312:	d01c      	beq.n	801634e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8016314:	68f8      	ldr	r0, [r7, #12]
 8016316:	f7ff fdc3 	bl	8015ea0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	6859      	ldr	r1, [r3, #4]
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	681a      	ldr	r2, [r3, #0]
 8016324:	4b0d      	ldr	r3, [pc, #52]	; (801635c <I2C_IsErrorOccurred+0x1bc>)
 8016326:	400b      	ands	r3, r1
 8016328:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801632e:	6a3b      	ldr	r3, [r7, #32]
 8016330:	431a      	orrs	r2, r3
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	2220      	movs	r2, #32
 801633a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	2200      	movs	r2, #0
 8016342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	2200      	movs	r2, #0
 801634a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801634e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8016352:	4618      	mov	r0, r3
 8016354:	3728      	adds	r7, #40	; 0x28
 8016356:	46bd      	mov	sp, r7
 8016358:	bd80      	pop	{r7, pc}
 801635a:	bf00      	nop
 801635c:	fe00e800 	.word	0xfe00e800

08016360 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8016360:	b480      	push	{r7}
 8016362:	b087      	sub	sp, #28
 8016364:	af00      	add	r7, sp, #0
 8016366:	60f8      	str	r0, [r7, #12]
 8016368:	607b      	str	r3, [r7, #4]
 801636a:	460b      	mov	r3, r1
 801636c:	817b      	strh	r3, [r7, #10]
 801636e:	4613      	mov	r3, r2
 8016370:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016372:	897b      	ldrh	r3, [r7, #10]
 8016374:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016378:	7a7b      	ldrb	r3, [r7, #9]
 801637a:	041b      	lsls	r3, r3, #16
 801637c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016380:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8016386:	6a3b      	ldr	r3, [r7, #32]
 8016388:	4313      	orrs	r3, r2
 801638a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801638e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	685a      	ldr	r2, [r3, #4]
 8016396:	6a3b      	ldr	r3, [r7, #32]
 8016398:	0d5b      	lsrs	r3, r3, #21
 801639a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801639e:	4b08      	ldr	r3, [pc, #32]	; (80163c0 <I2C_TransferConfig+0x60>)
 80163a0:	430b      	orrs	r3, r1
 80163a2:	43db      	mvns	r3, r3
 80163a4:	ea02 0103 	and.w	r1, r2, r3
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	697a      	ldr	r2, [r7, #20]
 80163ae:	430a      	orrs	r2, r1
 80163b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80163b2:	bf00      	nop
 80163b4:	371c      	adds	r7, #28
 80163b6:	46bd      	mov	sp, r7
 80163b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163bc:	4770      	bx	lr
 80163be:	bf00      	nop
 80163c0:	03ff63ff 	.word	0x03ff63ff

080163c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80163c4:	b480      	push	{r7}
 80163c6:	b083      	sub	sp, #12
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80163d4:	b2db      	uxtb	r3, r3
 80163d6:	2b20      	cmp	r3, #32
 80163d8:	d138      	bne.n	801644c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80163e0:	2b01      	cmp	r3, #1
 80163e2:	d101      	bne.n	80163e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80163e4:	2302      	movs	r3, #2
 80163e6:	e032      	b.n	801644e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	2201      	movs	r2, #1
 80163ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	2224      	movs	r2, #36	; 0x24
 80163f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	681a      	ldr	r2, [r3, #0]
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	f022 0201 	bic.w	r2, r2, #1
 8016406:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	681a      	ldr	r2, [r3, #0]
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8016416:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	6819      	ldr	r1, [r3, #0]
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	683a      	ldr	r2, [r7, #0]
 8016424:	430a      	orrs	r2, r1
 8016426:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	681a      	ldr	r2, [r3, #0]
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	f042 0201 	orr.w	r2, r2, #1
 8016436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2220      	movs	r2, #32
 801643c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	2200      	movs	r2, #0
 8016444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8016448:	2300      	movs	r3, #0
 801644a:	e000      	b.n	801644e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801644c:	2302      	movs	r3, #2
  }
}
 801644e:	4618      	mov	r0, r3
 8016450:	370c      	adds	r7, #12
 8016452:	46bd      	mov	sp, r7
 8016454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016458:	4770      	bx	lr

0801645a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801645a:	b480      	push	{r7}
 801645c:	b085      	sub	sp, #20
 801645e:	af00      	add	r7, sp, #0
 8016460:	6078      	str	r0, [r7, #4]
 8016462:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801646a:	b2db      	uxtb	r3, r3
 801646c:	2b20      	cmp	r3, #32
 801646e:	d139      	bne.n	80164e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8016476:	2b01      	cmp	r3, #1
 8016478:	d101      	bne.n	801647e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801647a:	2302      	movs	r3, #2
 801647c:	e033      	b.n	80164e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	2201      	movs	r2, #1
 8016482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2224      	movs	r2, #36	; 0x24
 801648a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	681a      	ldr	r2, [r3, #0]
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	f022 0201 	bic.w	r2, r2, #1
 801649c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80164ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80164ae:	683b      	ldr	r3, [r7, #0]
 80164b0:	021b      	lsls	r3, r3, #8
 80164b2:	68fa      	ldr	r2, [r7, #12]
 80164b4:	4313      	orrs	r3, r2
 80164b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	68fa      	ldr	r2, [r7, #12]
 80164be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	681a      	ldr	r2, [r3, #0]
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	f042 0201 	orr.w	r2, r2, #1
 80164ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	2220      	movs	r2, #32
 80164d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2200      	movs	r2, #0
 80164dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80164e0:	2300      	movs	r3, #0
 80164e2:	e000      	b.n	80164e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80164e4:	2302      	movs	r3, #2
  }
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	3714      	adds	r7, #20
 80164ea:	46bd      	mov	sp, r7
 80164ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f0:	4770      	bx	lr

080164f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80164f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164f4:	b08b      	sub	sp, #44	; 0x2c
 80164f6:	af06      	add	r7, sp, #24
 80164f8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d101      	bne.n	8016504 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8016500:	2301      	movs	r3, #1
 8016502:	e0cb      	b.n	801669c <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 801650a:	b2db      	uxtb	r3, r3
 801650c:	2b00      	cmp	r3, #0
 801650e:	d106      	bne.n	801651e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	2200      	movs	r2, #0
 8016514:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8016518:	6878      	ldr	r0, [r7, #4]
 801651a:	f7ea fa19 	bl	8000950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	2203      	movs	r2, #3
 8016522:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	4618      	mov	r0, r3
 801652c:	f002 fc84 	bl	8018e38 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8016530:	2300      	movs	r3, #0
 8016532:	73fb      	strb	r3, [r7, #15]
 8016534:	e040      	b.n	80165b8 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8016536:	7bfb      	ldrb	r3, [r7, #15]
 8016538:	6879      	ldr	r1, [r7, #4]
 801653a:	1c5a      	adds	r2, r3, #1
 801653c:	4613      	mov	r3, r2
 801653e:	009b      	lsls	r3, r3, #2
 8016540:	4413      	add	r3, r2
 8016542:	00db      	lsls	r3, r3, #3
 8016544:	440b      	add	r3, r1
 8016546:	3301      	adds	r3, #1
 8016548:	2201      	movs	r2, #1
 801654a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801654c:	7bfb      	ldrb	r3, [r7, #15]
 801654e:	6879      	ldr	r1, [r7, #4]
 8016550:	1c5a      	adds	r2, r3, #1
 8016552:	4613      	mov	r3, r2
 8016554:	009b      	lsls	r3, r3, #2
 8016556:	4413      	add	r3, r2
 8016558:	00db      	lsls	r3, r3, #3
 801655a:	440b      	add	r3, r1
 801655c:	7bfa      	ldrb	r2, [r7, #15]
 801655e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8016560:	7bfb      	ldrb	r3, [r7, #15]
 8016562:	6879      	ldr	r1, [r7, #4]
 8016564:	1c5a      	adds	r2, r3, #1
 8016566:	4613      	mov	r3, r2
 8016568:	009b      	lsls	r3, r3, #2
 801656a:	4413      	add	r3, r2
 801656c:	00db      	lsls	r3, r3, #3
 801656e:	440b      	add	r3, r1
 8016570:	3303      	adds	r3, #3
 8016572:	2200      	movs	r2, #0
 8016574:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8016576:	7bfa      	ldrb	r2, [r7, #15]
 8016578:	6879      	ldr	r1, [r7, #4]
 801657a:	4613      	mov	r3, r2
 801657c:	009b      	lsls	r3, r3, #2
 801657e:	4413      	add	r3, r2
 8016580:	00db      	lsls	r3, r3, #3
 8016582:	440b      	add	r3, r1
 8016584:	3338      	adds	r3, #56	; 0x38
 8016586:	2200      	movs	r2, #0
 8016588:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 801658a:	7bfa      	ldrb	r2, [r7, #15]
 801658c:	6879      	ldr	r1, [r7, #4]
 801658e:	4613      	mov	r3, r2
 8016590:	009b      	lsls	r3, r3, #2
 8016592:	4413      	add	r3, r2
 8016594:	00db      	lsls	r3, r3, #3
 8016596:	440b      	add	r3, r1
 8016598:	333c      	adds	r3, #60	; 0x3c
 801659a:	2200      	movs	r2, #0
 801659c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 801659e:	7bfa      	ldrb	r2, [r7, #15]
 80165a0:	6879      	ldr	r1, [r7, #4]
 80165a2:	4613      	mov	r3, r2
 80165a4:	009b      	lsls	r3, r3, #2
 80165a6:	4413      	add	r3, r2
 80165a8:	00db      	lsls	r3, r3, #3
 80165aa:	440b      	add	r3, r1
 80165ac:	3340      	adds	r3, #64	; 0x40
 80165ae:	2200      	movs	r2, #0
 80165b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80165b2:	7bfb      	ldrb	r3, [r7, #15]
 80165b4:	3301      	adds	r3, #1
 80165b6:	73fb      	strb	r3, [r7, #15]
 80165b8:	7bfa      	ldrb	r2, [r7, #15]
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	429a      	cmp	r2, r3
 80165c0:	d3b9      	bcc.n	8016536 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80165c2:	2300      	movs	r3, #0
 80165c4:	73fb      	strb	r3, [r7, #15]
 80165c6:	e044      	b.n	8016652 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80165c8:	7bfa      	ldrb	r2, [r7, #15]
 80165ca:	6879      	ldr	r1, [r7, #4]
 80165cc:	4613      	mov	r3, r2
 80165ce:	009b      	lsls	r3, r3, #2
 80165d0:	4413      	add	r3, r2
 80165d2:	00db      	lsls	r3, r3, #3
 80165d4:	440b      	add	r3, r1
 80165d6:	f203 1369 	addw	r3, r3, #361	; 0x169
 80165da:	2200      	movs	r2, #0
 80165dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80165de:	7bfa      	ldrb	r2, [r7, #15]
 80165e0:	6879      	ldr	r1, [r7, #4]
 80165e2:	4613      	mov	r3, r2
 80165e4:	009b      	lsls	r3, r3, #2
 80165e6:	4413      	add	r3, r2
 80165e8:	00db      	lsls	r3, r3, #3
 80165ea:	440b      	add	r3, r1
 80165ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80165f0:	7bfa      	ldrb	r2, [r7, #15]
 80165f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80165f4:	7bfa      	ldrb	r2, [r7, #15]
 80165f6:	6879      	ldr	r1, [r7, #4]
 80165f8:	4613      	mov	r3, r2
 80165fa:	009b      	lsls	r3, r3, #2
 80165fc:	4413      	add	r3, r2
 80165fe:	00db      	lsls	r3, r3, #3
 8016600:	440b      	add	r3, r1
 8016602:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8016606:	2200      	movs	r2, #0
 8016608:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 801660a:	7bfa      	ldrb	r2, [r7, #15]
 801660c:	6879      	ldr	r1, [r7, #4]
 801660e:	4613      	mov	r3, r2
 8016610:	009b      	lsls	r3, r3, #2
 8016612:	4413      	add	r3, r2
 8016614:	00db      	lsls	r3, r3, #3
 8016616:	440b      	add	r3, r1
 8016618:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 801661c:	2200      	movs	r2, #0
 801661e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8016620:	7bfa      	ldrb	r2, [r7, #15]
 8016622:	6879      	ldr	r1, [r7, #4]
 8016624:	4613      	mov	r3, r2
 8016626:	009b      	lsls	r3, r3, #2
 8016628:	4413      	add	r3, r2
 801662a:	00db      	lsls	r3, r3, #3
 801662c:	440b      	add	r3, r1
 801662e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8016632:	2200      	movs	r2, #0
 8016634:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8016636:	7bfa      	ldrb	r2, [r7, #15]
 8016638:	6879      	ldr	r1, [r7, #4]
 801663a:	4613      	mov	r3, r2
 801663c:	009b      	lsls	r3, r3, #2
 801663e:	4413      	add	r3, r2
 8016640:	00db      	lsls	r3, r3, #3
 8016642:	440b      	add	r3, r1
 8016644:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8016648:	2200      	movs	r2, #0
 801664a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801664c:	7bfb      	ldrb	r3, [r7, #15]
 801664e:	3301      	adds	r3, #1
 8016650:	73fb      	strb	r3, [r7, #15]
 8016652:	7bfa      	ldrb	r2, [r7, #15]
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	685b      	ldr	r3, [r3, #4]
 8016658:	429a      	cmp	r2, r3
 801665a:	d3b5      	bcc.n	80165c8 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	603b      	str	r3, [r7, #0]
 8016662:	687e      	ldr	r6, [r7, #4]
 8016664:	466d      	mov	r5, sp
 8016666:	f106 0410 	add.w	r4, r6, #16
 801666a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801666c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801666e:	6823      	ldr	r3, [r4, #0]
 8016670:	602b      	str	r3, [r5, #0]
 8016672:	1d33      	adds	r3, r6, #4
 8016674:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016676:	6838      	ldr	r0, [r7, #0]
 8016678:	f002 fbf9 	bl	8018e6e <USB_DevInit>

  hpcd->USB_Address = 0U;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2200      	movs	r2, #0
 8016680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2201      	movs	r2, #1
 8016688:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	69db      	ldr	r3, [r3, #28]
 8016690:	2b01      	cmp	r3, #1
 8016692:	d102      	bne.n	801669a <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f000 f805 	bl	80166a4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 801669a:	2300      	movs	r3, #0
}
 801669c:	4618      	mov	r0, r3
 801669e:	3714      	adds	r7, #20
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080166a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80166a4:	b480      	push	{r7}
 80166a6:	b085      	sub	sp, #20
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	2201      	movs	r2, #1
 80166b6:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2200      	movs	r2, #0
 80166be:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80166c8:	b29b      	uxth	r3, r3
 80166ca:	f043 0301 	orr.w	r3, r3, #1
 80166ce:	b29a      	uxth	r2, r3
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80166dc:	b29b      	uxth	r3, r3
 80166de:	f043 0302 	orr.w	r3, r3, #2
 80166e2:	b29a      	uxth	r2, r3
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80166ea:	2300      	movs	r3, #0
}
 80166ec:	4618      	mov	r0, r3
 80166ee:	3714      	adds	r7, #20
 80166f0:	46bd      	mov	sp, r7
 80166f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f6:	4770      	bx	lr

080166f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80166f8:	b480      	push	{r7}
 80166fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80166fc:	4b05      	ldr	r3, [pc, #20]	; (8016714 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	4a04      	ldr	r2, [pc, #16]	; (8016714 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8016702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016706:	6013      	str	r3, [r2, #0]
}
 8016708:	bf00      	nop
 801670a:	46bd      	mov	sp, r7
 801670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016710:	4770      	bx	lr
 8016712:	bf00      	nop
 8016714:	58000400 	.word	0x58000400

08016718 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8016718:	b480      	push	{r7}
 801671a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 801671c:	4b04      	ldr	r3, [pc, #16]	; (8016730 <HAL_PWREx_GetVoltageRange+0x18>)
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8016724:	4618      	mov	r0, r3
 8016726:	46bd      	mov	sp, r7
 8016728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672c:	4770      	bx	lr
 801672e:	bf00      	nop
 8016730:	58000400 	.word	0x58000400

08016734 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8016734:	b480      	push	{r7}
 8016736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8016738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016746:	d101      	bne.n	801674c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8016748:	2301      	movs	r3, #1
 801674a:	e000      	b.n	801674e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 801674c:	2300      	movs	r3, #0
}
 801674e:	4618      	mov	r0, r3
 8016750:	46bd      	mov	sp, r7
 8016752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016756:	4770      	bx	lr

08016758 <LL_RCC_HSE_Enable>:
{
 8016758:	b480      	push	{r7}
 801675a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 801675c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801676a:	6013      	str	r3, [r2, #0]
}
 801676c:	bf00      	nop
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr

08016776 <LL_RCC_HSE_Disable>:
{
 8016776:	b480      	push	{r7}
 8016778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 801677a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016788:	6013      	str	r3, [r2, #0]
}
 801678a:	bf00      	nop
 801678c:	46bd      	mov	sp, r7
 801678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016792:	4770      	bx	lr

08016794 <LL_RCC_HSE_IsReady>:
{
 8016794:	b480      	push	{r7}
 8016796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8016798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80167a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80167a6:	d101      	bne.n	80167ac <LL_RCC_HSE_IsReady+0x18>
 80167a8:	2301      	movs	r3, #1
 80167aa:	e000      	b.n	80167ae <LL_RCC_HSE_IsReady+0x1a>
 80167ac:	2300      	movs	r3, #0
}
 80167ae:	4618      	mov	r0, r3
 80167b0:	46bd      	mov	sp, r7
 80167b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b6:	4770      	bx	lr

080167b8 <LL_RCC_HSI_Enable>:
{
 80167b8:	b480      	push	{r7}
 80167ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80167bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80167c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80167ca:	6013      	str	r3, [r2, #0]
}
 80167cc:	bf00      	nop
 80167ce:	46bd      	mov	sp, r7
 80167d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d4:	4770      	bx	lr

080167d6 <LL_RCC_HSI_Disable>:
{
 80167d6:	b480      	push	{r7}
 80167d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80167da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80167e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80167e8:	6013      	str	r3, [r2, #0]
}
 80167ea:	bf00      	nop
 80167ec:	46bd      	mov	sp, r7
 80167ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167f2:	4770      	bx	lr

080167f4 <LL_RCC_HSI_IsReady>:
{
 80167f4:	b480      	push	{r7}
 80167f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80167f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016806:	d101      	bne.n	801680c <LL_RCC_HSI_IsReady+0x18>
 8016808:	2301      	movs	r3, #1
 801680a:	e000      	b.n	801680e <LL_RCC_HSI_IsReady+0x1a>
 801680c:	2300      	movs	r3, #0
}
 801680e:	4618      	mov	r0, r3
 8016810:	46bd      	mov	sp, r7
 8016812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016816:	4770      	bx	lr

08016818 <LL_RCC_HSI_SetCalibTrimming>:
{
 8016818:	b480      	push	{r7}
 801681a:	b083      	sub	sp, #12
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8016820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016824:	685b      	ldr	r3, [r3, #4]
 8016826:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	061b      	lsls	r3, r3, #24
 801682e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016832:	4313      	orrs	r3, r2
 8016834:	604b      	str	r3, [r1, #4]
}
 8016836:	bf00      	nop
 8016838:	370c      	adds	r7, #12
 801683a:	46bd      	mov	sp, r7
 801683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016840:	4770      	bx	lr

08016842 <LL_RCC_HSI48_Enable>:
{
 8016842:	b480      	push	{r7}
 8016844:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801684a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801684e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016852:	f043 0301 	orr.w	r3, r3, #1
 8016856:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801685a:	bf00      	nop
 801685c:	46bd      	mov	sp, r7
 801685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016862:	4770      	bx	lr

08016864 <LL_RCC_HSI48_Disable>:
{
 8016864:	b480      	push	{r7}
 8016866:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8016868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801686c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016874:	f023 0301 	bic.w	r3, r3, #1
 8016878:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 801687c:	bf00      	nop
 801687e:	46bd      	mov	sp, r7
 8016880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016884:	4770      	bx	lr

08016886 <LL_RCC_HSI48_IsReady>:
{
 8016886:	b480      	push	{r7}
 8016888:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 801688a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801688e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016892:	f003 0302 	and.w	r3, r3, #2
 8016896:	2b02      	cmp	r3, #2
 8016898:	d101      	bne.n	801689e <LL_RCC_HSI48_IsReady+0x18>
 801689a:	2301      	movs	r3, #1
 801689c:	e000      	b.n	80168a0 <LL_RCC_HSI48_IsReady+0x1a>
 801689e:	2300      	movs	r3, #0
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	46bd      	mov	sp, r7
 80168a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a8:	4770      	bx	lr

080168aa <LL_RCC_LSE_Enable>:
{
 80168aa:	b480      	push	{r7}
 80168ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80168ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80168b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80168b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80168ba:	f043 0301 	orr.w	r3, r3, #1
 80168be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80168c2:	bf00      	nop
 80168c4:	46bd      	mov	sp, r7
 80168c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ca:	4770      	bx	lr

080168cc <LL_RCC_LSE_Disable>:
{
 80168cc:	b480      	push	{r7}
 80168ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80168d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80168d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80168d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80168dc:	f023 0301 	bic.w	r3, r3, #1
 80168e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80168e4:	bf00      	nop
 80168e6:	46bd      	mov	sp, r7
 80168e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ec:	4770      	bx	lr

080168ee <LL_RCC_LSE_EnableBypass>:
{
 80168ee:	b480      	push	{r7}
 80168f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80168f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80168f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80168fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80168fe:	f043 0304 	orr.w	r3, r3, #4
 8016902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016906:	bf00      	nop
 8016908:	46bd      	mov	sp, r7
 801690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690e:	4770      	bx	lr

08016910 <LL_RCC_LSE_DisableBypass>:
{
 8016910:	b480      	push	{r7}
 8016912:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8016914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801691c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016920:	f023 0304 	bic.w	r3, r3, #4
 8016924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8016928:	bf00      	nop
 801692a:	46bd      	mov	sp, r7
 801692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016930:	4770      	bx	lr

08016932 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8016932:	b480      	push	{r7}
 8016934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8016936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801693e:	f003 0302 	and.w	r3, r3, #2
 8016942:	2b02      	cmp	r3, #2
 8016944:	d101      	bne.n	801694a <LL_RCC_LSE_IsReady+0x18>
 8016946:	2301      	movs	r3, #1
 8016948:	e000      	b.n	801694c <LL_RCC_LSE_IsReady+0x1a>
 801694a:	2300      	movs	r3, #0
}
 801694c:	4618      	mov	r0, r3
 801694e:	46bd      	mov	sp, r7
 8016950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016954:	4770      	bx	lr

08016956 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8016956:	b480      	push	{r7}
 8016958:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801695a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801695e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016966:	f043 0301 	orr.w	r3, r3, #1
 801696a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 801696e:	bf00      	nop
 8016970:	46bd      	mov	sp, r7
 8016972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016976:	4770      	bx	lr

08016978 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8016978:	b480      	push	{r7}
 801697a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 801697c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016988:	f023 0301 	bic.w	r3, r3, #1
 801698c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8016990:	bf00      	nop
 8016992:	46bd      	mov	sp, r7
 8016994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016998:	4770      	bx	lr

0801699a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 801699a:	b480      	push	{r7}
 801699c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 801699e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80169a6:	f003 0302 	and.w	r3, r3, #2
 80169aa:	2b02      	cmp	r3, #2
 80169ac:	d101      	bne.n	80169b2 <LL_RCC_LSI1_IsReady+0x18>
 80169ae:	2301      	movs	r3, #1
 80169b0:	e000      	b.n	80169b4 <LL_RCC_LSI1_IsReady+0x1a>
 80169b2:	2300      	movs	r3, #0
}
 80169b4:	4618      	mov	r0, r3
 80169b6:	46bd      	mov	sp, r7
 80169b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169bc:	4770      	bx	lr

080169be <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80169be:	b480      	push	{r7}
 80169c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80169c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80169ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80169ce:	f043 0304 	orr.w	r3, r3, #4
 80169d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80169d6:	bf00      	nop
 80169d8:	46bd      	mov	sp, r7
 80169da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169de:	4770      	bx	lr

080169e0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80169e0:	b480      	push	{r7}
 80169e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80169e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80169e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80169ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80169f0:	f023 0304 	bic.w	r3, r3, #4
 80169f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80169f8:	bf00      	nop
 80169fa:	46bd      	mov	sp, r7
 80169fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a00:	4770      	bx	lr

08016a02 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8016a02:	b480      	push	{r7}
 8016a04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8016a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016a0e:	f003 0308 	and.w	r3, r3, #8
 8016a12:	2b08      	cmp	r3, #8
 8016a14:	d101      	bne.n	8016a1a <LL_RCC_LSI2_IsReady+0x18>
 8016a16:	2301      	movs	r3, #1
 8016a18:	e000      	b.n	8016a1c <LL_RCC_LSI2_IsReady+0x1a>
 8016a1a:	2300      	movs	r3, #0
}
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a24:	4770      	bx	lr

08016a26 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8016a26:	b480      	push	{r7}
 8016a28:	b083      	sub	sp, #12
 8016a2a:	af00      	add	r7, sp, #0
 8016a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8016a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016a36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	021b      	lsls	r3, r3, #8
 8016a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016a42:	4313      	orrs	r3, r2
 8016a44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8016a48:	bf00      	nop
 8016a4a:	370c      	adds	r7, #12
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a52:	4770      	bx	lr

08016a54 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8016a54:	b480      	push	{r7}
 8016a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8016a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a62:	f043 0301 	orr.w	r3, r3, #1
 8016a66:	6013      	str	r3, [r2, #0]
}
 8016a68:	bf00      	nop
 8016a6a:	46bd      	mov	sp, r7
 8016a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a70:	4770      	bx	lr

08016a72 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8016a72:	b480      	push	{r7}
 8016a74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8016a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016a80:	f023 0301 	bic.w	r3, r3, #1
 8016a84:	6013      	str	r3, [r2, #0]
}
 8016a86:	bf00      	nop
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8e:	4770      	bx	lr

08016a90 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8016a90:	b480      	push	{r7}
 8016a92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8016a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	f003 0302 	and.w	r3, r3, #2
 8016a9e:	2b02      	cmp	r3, #2
 8016aa0:	d101      	bne.n	8016aa6 <LL_RCC_MSI_IsReady+0x16>
 8016aa2:	2301      	movs	r3, #1
 8016aa4:	e000      	b.n	8016aa8 <LL_RCC_MSI_IsReady+0x18>
 8016aa6:	2300      	movs	r3, #0
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab0:	4770      	bx	lr

08016ab2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8016ab2:	b480      	push	{r7}
 8016ab4:	b083      	sub	sp, #12
 8016ab6:	af00      	add	r7, sp, #0
 8016ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8016aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016ac4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	4313      	orrs	r3, r2
 8016acc:	600b      	str	r3, [r1, #0]
}
 8016ace:	bf00      	nop
 8016ad0:	370c      	adds	r7, #12
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad8:	4770      	bx	lr

08016ada <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8016ada:	b480      	push	{r7}
 8016adc:	b083      	sub	sp, #12
 8016ade:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8016ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016aea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	2bb0      	cmp	r3, #176	; 0xb0
 8016af0:	d901      	bls.n	8016af6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8016af2:	23b0      	movs	r3, #176	; 0xb0
 8016af4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8016af6:	687b      	ldr	r3, [r7, #4]
}
 8016af8:	4618      	mov	r0, r3
 8016afa:	370c      	adds	r7, #12
 8016afc:	46bd      	mov	sp, r7
 8016afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b02:	4770      	bx	lr

08016b04 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8016b04:	b480      	push	{r7}
 8016b06:	b083      	sub	sp, #12
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8016b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b10:	685b      	ldr	r3, [r3, #4]
 8016b12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	021b      	lsls	r3, r3, #8
 8016b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016b1e:	4313      	orrs	r3, r2
 8016b20:	604b      	str	r3, [r1, #4]
}
 8016b22:	bf00      	nop
 8016b24:	370c      	adds	r7, #12
 8016b26:	46bd      	mov	sp, r7
 8016b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2c:	4770      	bx	lr

08016b2e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8016b2e:	b480      	push	{r7}
 8016b30:	b083      	sub	sp, #12
 8016b32:	af00      	add	r7, sp, #0
 8016b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8016b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b3a:	689b      	ldr	r3, [r3, #8]
 8016b3c:	f023 0203 	bic.w	r2, r3, #3
 8016b40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	4313      	orrs	r3, r2
 8016b48:	608b      	str	r3, [r1, #8]
}
 8016b4a:	bf00      	nop
 8016b4c:	370c      	adds	r7, #12
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b54:	4770      	bx	lr

08016b56 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8016b56:	b480      	push	{r7}
 8016b58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8016b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b5e:	689b      	ldr	r3, [r3, #8]
 8016b60:	f003 030c 	and.w	r3, r3, #12
}
 8016b64:	4618      	mov	r0, r3
 8016b66:	46bd      	mov	sp, r7
 8016b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6c:	4770      	bx	lr

08016b6e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016b6e:	b480      	push	{r7}
 8016b70:	b083      	sub	sp, #12
 8016b72:	af00      	add	r7, sp, #0
 8016b74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8016b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016b7a:	689b      	ldr	r3, [r3, #8]
 8016b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	4313      	orrs	r3, r2
 8016b88:	608b      	str	r3, [r1, #8]
}
 8016b8a:	bf00      	nop
 8016b8c:	370c      	adds	r7, #12
 8016b8e:	46bd      	mov	sp, r7
 8016b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b94:	4770      	bx	lr

08016b96 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8016b96:	b480      	push	{r7}
 8016b98:	b083      	sub	sp, #12
 8016b9a:	af00      	add	r7, sp, #0
 8016b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8016b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ba2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016ba6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016baa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	4313      	orrs	r3, r2
 8016bb2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016bb6:	bf00      	nop
 8016bb8:	370c      	adds	r7, #12
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc0:	4770      	bx	lr

08016bc2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8016bc2:	b480      	push	{r7}
 8016bc4:	b083      	sub	sp, #12
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8016bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016bd2:	f023 020f 	bic.w	r2, r3, #15
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	091b      	lsrs	r3, r3, #4
 8016bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016bde:	4313      	orrs	r3, r2
 8016be0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8016be4:	bf00      	nop
 8016be6:	370c      	adds	r7, #12
 8016be8:	46bd      	mov	sp, r7
 8016bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bee:	4770      	bx	lr

08016bf0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8016bf0:	b480      	push	{r7}
 8016bf2:	b083      	sub	sp, #12
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8016bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016bfc:	689b      	ldr	r3, [r3, #8]
 8016bfe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8016c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	4313      	orrs	r3, r2
 8016c0a:	608b      	str	r3, [r1, #8]
}
 8016c0c:	bf00      	nop
 8016c0e:	370c      	adds	r7, #12
 8016c10:	46bd      	mov	sp, r7
 8016c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c16:	4770      	bx	lr

08016c18 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8016c18:	b480      	push	{r7}
 8016c1a:	b083      	sub	sp, #12
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8016c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c24:	689b      	ldr	r3, [r3, #8]
 8016c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8016c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	4313      	orrs	r3, r2
 8016c32:	608b      	str	r3, [r1, #8]
}
 8016c34:	bf00      	nop
 8016c36:	370c      	adds	r7, #12
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c3e:	4770      	bx	lr

08016c40 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8016c40:	b480      	push	{r7}
 8016c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8016c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c48:	689b      	ldr	r3, [r3, #8]
 8016c4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016c4e:	4618      	mov	r0, r3
 8016c50:	46bd      	mov	sp, r7
 8016c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c56:	4770      	bx	lr

08016c58 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8016c58:	b480      	push	{r7}
 8016c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8016c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016c64:	011b      	lsls	r3, r3, #4
 8016c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c72:	4770      	bx	lr

08016c74 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8016c74:	b480      	push	{r7}
 8016c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8016c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c7c:	689b      	ldr	r3, [r3, #8]
 8016c7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	46bd      	mov	sp, r7
 8016c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8a:	4770      	bx	lr

08016c8c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8016c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016c94:	689b      	ldr	r3, [r3, #8]
 8016c96:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca2:	4770      	bx	lr

08016ca4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8016ca4:	b480      	push	{r7}
 8016ca6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8016ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016cb6:	6013      	str	r3, [r2, #0]
}
 8016cb8:	bf00      	nop
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc0:	4770      	bx	lr

08016cc2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8016cc2:	b480      	push	{r7}
 8016cc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8016cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016cca:	681b      	ldr	r3, [r3, #0]
 8016ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8016cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8016cd4:	6013      	str	r3, [r2, #0]
}
 8016cd6:	bf00      	nop
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cde:	4770      	bx	lr

08016ce0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8016ce0:	b480      	push	{r7}
 8016ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8016ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8016cf2:	d101      	bne.n	8016cf8 <LL_RCC_PLL_IsReady+0x18>
 8016cf4:	2301      	movs	r3, #1
 8016cf6:	e000      	b.n	8016cfa <LL_RCC_PLL_IsReady+0x1a>
 8016cf8:	2300      	movs	r3, #0
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d02:	4770      	bx	lr

08016d04 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8016d04:	b480      	push	{r7}
 8016d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8016d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d0c:	68db      	ldr	r3, [r3, #12]
 8016d0e:	0a1b      	lsrs	r3, r3, #8
 8016d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8016d14:	4618      	mov	r0, r3
 8016d16:	46bd      	mov	sp, r7
 8016d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d1c:	4770      	bx	lr

08016d1e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8016d1e:	b480      	push	{r7}
 8016d20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8016d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d26:	68db      	ldr	r3, [r3, #12]
 8016d28:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d34:	4770      	bx	lr

08016d36 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8016d36:	b480      	push	{r7}
 8016d38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8016d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d3e:	68db      	ldr	r3, [r3, #12]
 8016d40:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8016d44:	4618      	mov	r0, r3
 8016d46:	46bd      	mov	sp, r7
 8016d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4c:	4770      	bx	lr

08016d4e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8016d4e:	b480      	push	{r7}
 8016d50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8016d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d56:	68db      	ldr	r3, [r3, #12]
 8016d58:	f003 0303 	and.w	r3, r3, #3
}
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d64:	4770      	bx	lr

08016d66 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8016d66:	b480      	push	{r7}
 8016d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8016d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d6e:	689b      	ldr	r3, [r3, #8]
 8016d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d78:	d101      	bne.n	8016d7e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	e000      	b.n	8016d80 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8016d7e:	2300      	movs	r3, #0
}
 8016d80:	4618      	mov	r0, r3
 8016d82:	46bd      	mov	sp, r7
 8016d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d88:	4770      	bx	lr

08016d8a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8016d8a:	b480      	push	{r7}
 8016d8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8016d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016d92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016d9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016d9e:	d101      	bne.n	8016da4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8016da0:	2301      	movs	r3, #1
 8016da2:	e000      	b.n	8016da6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8016da4:	2300      	movs	r3, #0
}
 8016da6:	4618      	mov	r0, r3
 8016da8:	46bd      	mov	sp, r7
 8016daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dae:	4770      	bx	lr

08016db0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8016db0:	b480      	push	{r7}
 8016db2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8016db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016db8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8016dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016dc4:	d101      	bne.n	8016dca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	e000      	b.n	8016dcc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8016dca:	2300      	movs	r3, #0
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd4:	4770      	bx	lr

08016dd6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8016dd6:	b480      	push	{r7}
 8016dd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8016dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016dde:	689b      	ldr	r3, [r3, #8]
 8016de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016de8:	d101      	bne.n	8016dee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8016dea:	2301      	movs	r3, #1
 8016dec:	e000      	b.n	8016df0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8016dee:	2300      	movs	r3, #0
}
 8016df0:	4618      	mov	r0, r3
 8016df2:	46bd      	mov	sp, r7
 8016df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df8:	4770      	bx	lr

08016dfa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8016dfa:	b480      	push	{r7}
 8016dfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8016dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8016e02:	689b      	ldr	r3, [r3, #8]
 8016e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016e08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8016e0c:	d101      	bne.n	8016e12 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8016e0e:	2301      	movs	r3, #1
 8016e10:	e000      	b.n	8016e14 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8016e12:	2300      	movs	r3, #0
}
 8016e14:	4618      	mov	r0, r3
 8016e16:	46bd      	mov	sp, r7
 8016e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e1c:	4770      	bx	lr
	...

08016e20 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016e20:	b590      	push	{r4, r7, lr}
 8016e22:	b08d      	sub	sp, #52	; 0x34
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d101      	bne.n	8016e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8016e2e:	2301      	movs	r3, #1
 8016e30:	e363      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	f003 0320 	and.w	r3, r3, #32
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	f000 808d 	beq.w	8016f5a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016e40:	f7ff fe89 	bl	8016b56 <LL_RCC_GetSysClkSource>
 8016e44:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016e46:	f7ff ff82 	bl	8016d4e <LL_RCC_PLL_GetMainSource>
 8016e4a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8016e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d005      	beq.n	8016e5e <HAL_RCC_OscConfig+0x3e>
 8016e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e54:	2b0c      	cmp	r3, #12
 8016e56:	d147      	bne.n	8016ee8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8016e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e5a:	2b01      	cmp	r3, #1
 8016e5c:	d144      	bne.n	8016ee8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	69db      	ldr	r3, [r3, #28]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d101      	bne.n	8016e6a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8016e66:	2301      	movs	r3, #1
 8016e68:	e347      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016e6e:	f7ff fe34 	bl	8016ada <LL_RCC_MSI_GetRange>
 8016e72:	4603      	mov	r3, r0
 8016e74:	429c      	cmp	r4, r3
 8016e76:	d914      	bls.n	8016ea2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f000 fd2f 	bl	80178e0 <RCC_SetFlashLatencyFromMSIRange>
 8016e82:	4603      	mov	r3, r0
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d001      	beq.n	8016e8c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8016e88:	2301      	movs	r3, #1
 8016e8a:	e336      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e90:	4618      	mov	r0, r3
 8016e92:	f7ff fe0e 	bl	8016ab2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	6a1b      	ldr	r3, [r3, #32]
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f7ff fe32 	bl	8016b04 <LL_RCC_MSI_SetCalibTrimming>
 8016ea0:	e013      	b.n	8016eca <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7ff fe03 	bl	8016ab2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6a1b      	ldr	r3, [r3, #32]
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	f7ff fe27 	bl	8016b04 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f000 fd10 	bl	80178e0 <RCC_SetFlashLatencyFromMSIRange>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d001      	beq.n	8016eca <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8016ec6:	2301      	movs	r3, #1
 8016ec8:	e317      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8016eca:	f000 fcc9 	bl	8017860 <HAL_RCC_GetHCLKFreq>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	4aa4      	ldr	r2, [pc, #656]	; (8017164 <HAL_RCC_OscConfig+0x344>)
 8016ed2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8016ed4:	4ba4      	ldr	r3, [pc, #656]	; (8017168 <HAL_RCC_OscConfig+0x348>)
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7fe f91f 	bl	801511c <HAL_InitTick>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d039      	beq.n	8016f58 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	e308      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	69db      	ldr	r3, [r3, #28]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d01e      	beq.n	8016f2e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8016ef0:	f7ff fdb0 	bl	8016a54 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016ef4:	f7fe f960 	bl	80151b8 <HAL_GetTick>
 8016ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8016efa:	e008      	b.n	8016f0e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016efc:	f7fe f95c 	bl	80151b8 <HAL_GetTick>
 8016f00:	4602      	mov	r2, r0
 8016f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f04:	1ad3      	subs	r3, r2, r3
 8016f06:	2b02      	cmp	r3, #2
 8016f08:	d901      	bls.n	8016f0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8016f0a:	2303      	movs	r3, #3
 8016f0c:	e2f5      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8016f0e:	f7ff fdbf 	bl	8016a90 <LL_RCC_MSI_IsReady>
 8016f12:	4603      	mov	r3, r0
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d0f1      	beq.n	8016efc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7ff fdc8 	bl	8016ab2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	6a1b      	ldr	r3, [r3, #32]
 8016f26:	4618      	mov	r0, r3
 8016f28:	f7ff fdec 	bl	8016b04 <LL_RCC_MSI_SetCalibTrimming>
 8016f2c:	e015      	b.n	8016f5a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8016f2e:	f7ff fda0 	bl	8016a72 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8016f32:	f7fe f941 	bl	80151b8 <HAL_GetTick>
 8016f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8016f38:	e008      	b.n	8016f4c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8016f3a:	f7fe f93d 	bl	80151b8 <HAL_GetTick>
 8016f3e:	4602      	mov	r2, r0
 8016f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f42:	1ad3      	subs	r3, r2, r3
 8016f44:	2b02      	cmp	r3, #2
 8016f46:	d901      	bls.n	8016f4c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8016f48:	2303      	movs	r3, #3
 8016f4a:	e2d6      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8016f4c:	f7ff fda0 	bl	8016a90 <LL_RCC_MSI_IsReady>
 8016f50:	4603      	mov	r3, r0
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d1f1      	bne.n	8016f3a <HAL_RCC_OscConfig+0x11a>
 8016f56:	e000      	b.n	8016f5a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8016f58:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	f003 0301 	and.w	r3, r3, #1
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d047      	beq.n	8016ff6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016f66:	f7ff fdf6 	bl	8016b56 <LL_RCC_GetSysClkSource>
 8016f6a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016f6c:	f7ff feef 	bl	8016d4e <LL_RCC_PLL_GetMainSource>
 8016f70:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8016f72:	6a3b      	ldr	r3, [r7, #32]
 8016f74:	2b08      	cmp	r3, #8
 8016f76:	d005      	beq.n	8016f84 <HAL_RCC_OscConfig+0x164>
 8016f78:	6a3b      	ldr	r3, [r7, #32]
 8016f7a:	2b0c      	cmp	r3, #12
 8016f7c:	d108      	bne.n	8016f90 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8016f7e:	69fb      	ldr	r3, [r7, #28]
 8016f80:	2b03      	cmp	r3, #3
 8016f82:	d105      	bne.n	8016f90 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	685b      	ldr	r3, [r3, #4]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d134      	bne.n	8016ff6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8016f8c:	2301      	movs	r3, #1
 8016f8e:	e2b4      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	685b      	ldr	r3, [r3, #4]
 8016f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f98:	d102      	bne.n	8016fa0 <HAL_RCC_OscConfig+0x180>
 8016f9a:	f7ff fbdd 	bl	8016758 <LL_RCC_HSE_Enable>
 8016f9e:	e001      	b.n	8016fa4 <HAL_RCC_OscConfig+0x184>
 8016fa0:	f7ff fbe9 	bl	8016776 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	685b      	ldr	r3, [r3, #4]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d012      	beq.n	8016fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016fac:	f7fe f904 	bl	80151b8 <HAL_GetTick>
 8016fb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8016fb2:	e008      	b.n	8016fc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016fb4:	f7fe f900 	bl	80151b8 <HAL_GetTick>
 8016fb8:	4602      	mov	r2, r0
 8016fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fbc:	1ad3      	subs	r3, r2, r3
 8016fbe:	2b64      	cmp	r3, #100	; 0x64
 8016fc0:	d901      	bls.n	8016fc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8016fc2:	2303      	movs	r3, #3
 8016fc4:	e299      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8016fc6:	f7ff fbe5 	bl	8016794 <LL_RCC_HSE_IsReady>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d0f1      	beq.n	8016fb4 <HAL_RCC_OscConfig+0x194>
 8016fd0:	e011      	b.n	8016ff6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016fd2:	f7fe f8f1 	bl	80151b8 <HAL_GetTick>
 8016fd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8016fd8:	e008      	b.n	8016fec <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016fda:	f7fe f8ed 	bl	80151b8 <HAL_GetTick>
 8016fde:	4602      	mov	r2, r0
 8016fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe2:	1ad3      	subs	r3, r2, r3
 8016fe4:	2b64      	cmp	r3, #100	; 0x64
 8016fe6:	d901      	bls.n	8016fec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8016fe8:	2303      	movs	r3, #3
 8016fea:	e286      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8016fec:	f7ff fbd2 	bl	8016794 <LL_RCC_HSE_IsReady>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d1f1      	bne.n	8016fda <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	f003 0302 	and.w	r3, r3, #2
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d04c      	beq.n	801709c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017002:	f7ff fda8 	bl	8016b56 <LL_RCC_GetSysClkSource>
 8017006:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8017008:	f7ff fea1 	bl	8016d4e <LL_RCC_PLL_GetMainSource>
 801700c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 801700e:	69bb      	ldr	r3, [r7, #24]
 8017010:	2b04      	cmp	r3, #4
 8017012:	d005      	beq.n	8017020 <HAL_RCC_OscConfig+0x200>
 8017014:	69bb      	ldr	r3, [r7, #24]
 8017016:	2b0c      	cmp	r3, #12
 8017018:	d10e      	bne.n	8017038 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 801701a:	697b      	ldr	r3, [r7, #20]
 801701c:	2b02      	cmp	r3, #2
 801701e:	d10b      	bne.n	8017038 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	68db      	ldr	r3, [r3, #12]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d101      	bne.n	801702c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8017028:	2301      	movs	r3, #1
 801702a:	e266      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	691b      	ldr	r3, [r3, #16]
 8017030:	4618      	mov	r0, r3
 8017032:	f7ff fbf1 	bl	8016818 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8017036:	e031      	b.n	801709c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	68db      	ldr	r3, [r3, #12]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d019      	beq.n	8017074 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8017040:	f7ff fbba 	bl	80167b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017044:	f7fe f8b8 	bl	80151b8 <HAL_GetTick>
 8017048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 801704a:	e008      	b.n	801705e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801704c:	f7fe f8b4 	bl	80151b8 <HAL_GetTick>
 8017050:	4602      	mov	r2, r0
 8017052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017054:	1ad3      	subs	r3, r2, r3
 8017056:	2b02      	cmp	r3, #2
 8017058:	d901      	bls.n	801705e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801705a:	2303      	movs	r3, #3
 801705c:	e24d      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 801705e:	f7ff fbc9 	bl	80167f4 <LL_RCC_HSI_IsReady>
 8017062:	4603      	mov	r3, r0
 8017064:	2b00      	cmp	r3, #0
 8017066:	d0f1      	beq.n	801704c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	691b      	ldr	r3, [r3, #16]
 801706c:	4618      	mov	r0, r3
 801706e:	f7ff fbd3 	bl	8016818 <LL_RCC_HSI_SetCalibTrimming>
 8017072:	e013      	b.n	801709c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8017074:	f7ff fbaf 	bl	80167d6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017078:	f7fe f89e 	bl	80151b8 <HAL_GetTick>
 801707c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 801707e:	e008      	b.n	8017092 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8017080:	f7fe f89a 	bl	80151b8 <HAL_GetTick>
 8017084:	4602      	mov	r2, r0
 8017086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017088:	1ad3      	subs	r3, r2, r3
 801708a:	2b02      	cmp	r3, #2
 801708c:	d901      	bls.n	8017092 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 801708e:	2303      	movs	r3, #3
 8017090:	e233      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8017092:	f7ff fbaf 	bl	80167f4 <LL_RCC_HSI_IsReady>
 8017096:	4603      	mov	r3, r0
 8017098:	2b00      	cmp	r3, #0
 801709a:	d1f1      	bne.n	8017080 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	f003 0308 	and.w	r3, r3, #8
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d106      	bne.n	80170b6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	f000 80a3 	beq.w	80171fc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	695b      	ldr	r3, [r3, #20]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d076      	beq.n	80171ac <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	f003 0310 	and.w	r3, r3, #16
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d046      	beq.n	8017158 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80170ca:	f7ff fc66 	bl	801699a <LL_RCC_LSI1_IsReady>
 80170ce:	4603      	mov	r3, r0
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d113      	bne.n	80170fc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80170d4:	f7ff fc3f 	bl	8016956 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80170d8:	f7fe f86e 	bl	80151b8 <HAL_GetTick>
 80170dc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80170de:	e008      	b.n	80170f2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80170e0:	f7fe f86a 	bl	80151b8 <HAL_GetTick>
 80170e4:	4602      	mov	r2, r0
 80170e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170e8:	1ad3      	subs	r3, r2, r3
 80170ea:	2b02      	cmp	r3, #2
 80170ec:	d901      	bls.n	80170f2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80170ee:	2303      	movs	r3, #3
 80170f0:	e203      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80170f2:	f7ff fc52 	bl	801699a <LL_RCC_LSI1_IsReady>
 80170f6:	4603      	mov	r3, r0
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d0f1      	beq.n	80170e0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80170fc:	f7ff fc5f 	bl	80169be <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017100:	f7fe f85a 	bl	80151b8 <HAL_GetTick>
 8017104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8017106:	e008      	b.n	801711a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8017108:	f7fe f856 	bl	80151b8 <HAL_GetTick>
 801710c:	4602      	mov	r2, r0
 801710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017110:	1ad3      	subs	r3, r2, r3
 8017112:	2b03      	cmp	r3, #3
 8017114:	d901      	bls.n	801711a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8017116:	2303      	movs	r3, #3
 8017118:	e1ef      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 801711a:	f7ff fc72 	bl	8016a02 <LL_RCC_LSI2_IsReady>
 801711e:	4603      	mov	r3, r0
 8017120:	2b00      	cmp	r3, #0
 8017122:	d0f1      	beq.n	8017108 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	699b      	ldr	r3, [r3, #24]
 8017128:	4618      	mov	r0, r3
 801712a:	f7ff fc7c 	bl	8016a26 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 801712e:	f7ff fc23 	bl	8016978 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017132:	f7fe f841 	bl	80151b8 <HAL_GetTick>
 8017136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8017138:	e008      	b.n	801714c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801713a:	f7fe f83d 	bl	80151b8 <HAL_GetTick>
 801713e:	4602      	mov	r2, r0
 8017140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017142:	1ad3      	subs	r3, r2, r3
 8017144:	2b02      	cmp	r3, #2
 8017146:	d901      	bls.n	801714c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8017148:	2303      	movs	r3, #3
 801714a:	e1d6      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 801714c:	f7ff fc25 	bl	801699a <LL_RCC_LSI1_IsReady>
 8017150:	4603      	mov	r3, r0
 8017152:	2b00      	cmp	r3, #0
 8017154:	d1f1      	bne.n	801713a <HAL_RCC_OscConfig+0x31a>
 8017156:	e051      	b.n	80171fc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8017158:	f7ff fbfd 	bl	8016956 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801715c:	f7fe f82c 	bl	80151b8 <HAL_GetTick>
 8017160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8017162:	e00c      	b.n	801717e <HAL_RCC_OscConfig+0x35e>
 8017164:	20000008 	.word	0x20000008
 8017168:	20000074 	.word	0x20000074
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 801716c:	f7fe f824 	bl	80151b8 <HAL_GetTick>
 8017170:	4602      	mov	r2, r0
 8017172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017174:	1ad3      	subs	r3, r2, r3
 8017176:	2b02      	cmp	r3, #2
 8017178:	d901      	bls.n	801717e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 801717a:	2303      	movs	r3, #3
 801717c:	e1bd      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 801717e:	f7ff fc0c 	bl	801699a <LL_RCC_LSI1_IsReady>
 8017182:	4603      	mov	r3, r0
 8017184:	2b00      	cmp	r3, #0
 8017186:	d0f1      	beq.n	801716c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8017188:	f7ff fc2a 	bl	80169e0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 801718c:	e008      	b.n	80171a0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 801718e:	f7fe f813 	bl	80151b8 <HAL_GetTick>
 8017192:	4602      	mov	r2, r0
 8017194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017196:	1ad3      	subs	r3, r2, r3
 8017198:	2b03      	cmp	r3, #3
 801719a:	d901      	bls.n	80171a0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 801719c:	2303      	movs	r3, #3
 801719e:	e1ac      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80171a0:	f7ff fc2f 	bl	8016a02 <LL_RCC_LSI2_IsReady>
 80171a4:	4603      	mov	r3, r0
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d1f1      	bne.n	801718e <HAL_RCC_OscConfig+0x36e>
 80171aa:	e027      	b.n	80171fc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80171ac:	f7ff fc18 	bl	80169e0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80171b0:	f7fe f802 	bl	80151b8 <HAL_GetTick>
 80171b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80171b6:	e008      	b.n	80171ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80171b8:	f7fd fffe 	bl	80151b8 <HAL_GetTick>
 80171bc:	4602      	mov	r2, r0
 80171be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171c0:	1ad3      	subs	r3, r2, r3
 80171c2:	2b03      	cmp	r3, #3
 80171c4:	d901      	bls.n	80171ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80171c6:	2303      	movs	r3, #3
 80171c8:	e197      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80171ca:	f7ff fc1a 	bl	8016a02 <LL_RCC_LSI2_IsReady>
 80171ce:	4603      	mov	r3, r0
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d1f1      	bne.n	80171b8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80171d4:	f7ff fbd0 	bl	8016978 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80171d8:	f7fd ffee 	bl	80151b8 <HAL_GetTick>
 80171dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80171de:	e008      	b.n	80171f2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80171e0:	f7fd ffea 	bl	80151b8 <HAL_GetTick>
 80171e4:	4602      	mov	r2, r0
 80171e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e8:	1ad3      	subs	r3, r2, r3
 80171ea:	2b02      	cmp	r3, #2
 80171ec:	d901      	bls.n	80171f2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80171ee:	2303      	movs	r3, #3
 80171f0:	e183      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80171f2:	f7ff fbd2 	bl	801699a <LL_RCC_LSI1_IsReady>
 80171f6:	4603      	mov	r3, r0
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d1f1      	bne.n	80171e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	f003 0304 	and.w	r3, r3, #4
 8017204:	2b00      	cmp	r3, #0
 8017206:	d05b      	beq.n	80172c0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017208:	4ba7      	ldr	r3, [pc, #668]	; (80174a8 <HAL_RCC_OscConfig+0x688>)
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017210:	2b00      	cmp	r3, #0
 8017212:	d114      	bne.n	801723e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8017214:	f7ff fa70 	bl	80166f8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8017218:	f7fd ffce 	bl	80151b8 <HAL_GetTick>
 801721c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801721e:	e008      	b.n	8017232 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8017220:	f7fd ffca 	bl	80151b8 <HAL_GetTick>
 8017224:	4602      	mov	r2, r0
 8017226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017228:	1ad3      	subs	r3, r2, r3
 801722a:	2b02      	cmp	r3, #2
 801722c:	d901      	bls.n	8017232 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 801722e:	2303      	movs	r3, #3
 8017230:	e163      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8017232:	4b9d      	ldr	r3, [pc, #628]	; (80174a8 <HAL_RCC_OscConfig+0x688>)
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801723a:	2b00      	cmp	r3, #0
 801723c:	d0f0      	beq.n	8017220 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	689b      	ldr	r3, [r3, #8]
 8017242:	2b01      	cmp	r3, #1
 8017244:	d102      	bne.n	801724c <HAL_RCC_OscConfig+0x42c>
 8017246:	f7ff fb30 	bl	80168aa <LL_RCC_LSE_Enable>
 801724a:	e00c      	b.n	8017266 <HAL_RCC_OscConfig+0x446>
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	689b      	ldr	r3, [r3, #8]
 8017250:	2b05      	cmp	r3, #5
 8017252:	d104      	bne.n	801725e <HAL_RCC_OscConfig+0x43e>
 8017254:	f7ff fb4b 	bl	80168ee <LL_RCC_LSE_EnableBypass>
 8017258:	f7ff fb27 	bl	80168aa <LL_RCC_LSE_Enable>
 801725c:	e003      	b.n	8017266 <HAL_RCC_OscConfig+0x446>
 801725e:	f7ff fb35 	bl	80168cc <LL_RCC_LSE_Disable>
 8017262:	f7ff fb55 	bl	8016910 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	689b      	ldr	r3, [r3, #8]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d014      	beq.n	8017298 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801726e:	f7fd ffa3 	bl	80151b8 <HAL_GetTick>
 8017272:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8017274:	e00a      	b.n	801728c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017276:	f7fd ff9f 	bl	80151b8 <HAL_GetTick>
 801727a:	4602      	mov	r2, r0
 801727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801727e:	1ad3      	subs	r3, r2, r3
 8017280:	f241 3288 	movw	r2, #5000	; 0x1388
 8017284:	4293      	cmp	r3, r2
 8017286:	d901      	bls.n	801728c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8017288:	2303      	movs	r3, #3
 801728a:	e136      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 801728c:	f7ff fb51 	bl	8016932 <LL_RCC_LSE_IsReady>
 8017290:	4603      	mov	r3, r0
 8017292:	2b00      	cmp	r3, #0
 8017294:	d0ef      	beq.n	8017276 <HAL_RCC_OscConfig+0x456>
 8017296:	e013      	b.n	80172c0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017298:	f7fd ff8e 	bl	80151b8 <HAL_GetTick>
 801729c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 801729e:	e00a      	b.n	80172b6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80172a0:	f7fd ff8a 	bl	80151b8 <HAL_GetTick>
 80172a4:	4602      	mov	r2, r0
 80172a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172a8:	1ad3      	subs	r3, r2, r3
 80172aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80172ae:	4293      	cmp	r3, r2
 80172b0:	d901      	bls.n	80172b6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80172b2:	2303      	movs	r3, #3
 80172b4:	e121      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80172b6:	f7ff fb3c 	bl	8016932 <LL_RCC_LSE_IsReady>
 80172ba:	4603      	mov	r3, r0
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d1ef      	bne.n	80172a0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d02c      	beq.n	8017326 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d014      	beq.n	80172fe <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80172d4:	f7ff fab5 	bl	8016842 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80172d8:	f7fd ff6e 	bl	80151b8 <HAL_GetTick>
 80172dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80172de:	e008      	b.n	80172f2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80172e0:	f7fd ff6a 	bl	80151b8 <HAL_GetTick>
 80172e4:	4602      	mov	r2, r0
 80172e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172e8:	1ad3      	subs	r3, r2, r3
 80172ea:	2b02      	cmp	r3, #2
 80172ec:	d901      	bls.n	80172f2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80172ee:	2303      	movs	r3, #3
 80172f0:	e103      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80172f2:	f7ff fac8 	bl	8016886 <LL_RCC_HSI48_IsReady>
 80172f6:	4603      	mov	r3, r0
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d0f1      	beq.n	80172e0 <HAL_RCC_OscConfig+0x4c0>
 80172fc:	e013      	b.n	8017326 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80172fe:	f7ff fab1 	bl	8016864 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8017302:	f7fd ff59 	bl	80151b8 <HAL_GetTick>
 8017306:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8017308:	e008      	b.n	801731c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801730a:	f7fd ff55 	bl	80151b8 <HAL_GetTick>
 801730e:	4602      	mov	r2, r0
 8017310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017312:	1ad3      	subs	r3, r2, r3
 8017314:	2b02      	cmp	r3, #2
 8017316:	d901      	bls.n	801731c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8017318:	2303      	movs	r3, #3
 801731a:	e0ee      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 801731c:	f7ff fab3 	bl	8016886 <LL_RCC_HSI48_IsReady>
 8017320:	4603      	mov	r3, r0
 8017322:	2b00      	cmp	r3, #0
 8017324:	d1f1      	bne.n	801730a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801732a:	2b00      	cmp	r3, #0
 801732c:	f000 80e4 	beq.w	80174f8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8017330:	f7ff fc11 	bl	8016b56 <LL_RCC_GetSysClkSource>
 8017334:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8017336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801733a:	68db      	ldr	r3, [r3, #12]
 801733c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017342:	2b02      	cmp	r3, #2
 8017344:	f040 80b4 	bne.w	80174b0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	f003 0203 	and.w	r2, r3, #3
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017352:	429a      	cmp	r2, r3
 8017354:	d123      	bne.n	801739e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	f003 0270 	and.w	r2, r3, #112	; 0x70
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8017360:	429a      	cmp	r2, r3
 8017362:	d11c      	bne.n	801739e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	0a1b      	lsrs	r3, r3, #8
 8017368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8017370:	429a      	cmp	r2, r3
 8017372:	d114      	bne.n	801739e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 801737e:	429a      	cmp	r2, r3
 8017380:	d10d      	bne.n	801739e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801738c:	429a      	cmp	r2, r3
 801738e:	d106      	bne.n	801739e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 801739a:	429a      	cmp	r2, r3
 801739c:	d05d      	beq.n	801745a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801739e:	693b      	ldr	r3, [r7, #16]
 80173a0:	2b0c      	cmp	r3, #12
 80173a2:	d058      	beq.n	8017456 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80173a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d001      	beq.n	80173b6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80173b2:	2301      	movs	r3, #1
 80173b4:	e0a1      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80173b6:	f7ff fc84 	bl	8016cc2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80173ba:	f7fd fefd 	bl	80151b8 <HAL_GetTick>
 80173be:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80173c0:	e008      	b.n	80173d4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80173c2:	f7fd fef9 	bl	80151b8 <HAL_GetTick>
 80173c6:	4602      	mov	r2, r0
 80173c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ca:	1ad3      	subs	r3, r2, r3
 80173cc:	2b02      	cmp	r3, #2
 80173ce:	d901      	bls.n	80173d4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80173d0:	2303      	movs	r3, #3
 80173d2:	e092      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80173d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d1ef      	bne.n	80173c2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80173e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80173e6:	68da      	ldr	r2, [r3, #12]
 80173e8:	4b30      	ldr	r3, [pc, #192]	; (80174ac <HAL_RCC_OscConfig+0x68c>)
 80173ea:	4013      	ands	r3, r2
 80173ec:	687a      	ldr	r2, [r7, #4]
 80173ee:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80173f0:	687a      	ldr	r2, [r7, #4]
 80173f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80173f4:	4311      	orrs	r1, r2
 80173f6:	687a      	ldr	r2, [r7, #4]
 80173f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80173fa:	0212      	lsls	r2, r2, #8
 80173fc:	4311      	orrs	r1, r2
 80173fe:	687a      	ldr	r2, [r7, #4]
 8017400:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017402:	4311      	orrs	r1, r2
 8017404:	687a      	ldr	r2, [r7, #4]
 8017406:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8017408:	4311      	orrs	r1, r2
 801740a:	687a      	ldr	r2, [r7, #4]
 801740c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801740e:	430a      	orrs	r2, r1
 8017410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017414:	4313      	orrs	r3, r2
 8017416:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8017418:	f7ff fc44 	bl	8016ca4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801741c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017420:	68db      	ldr	r3, [r3, #12]
 8017422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801742a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 801742c:	f7fd fec4 	bl	80151b8 <HAL_GetTick>
 8017430:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017432:	e008      	b.n	8017446 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017434:	f7fd fec0 	bl	80151b8 <HAL_GetTick>
 8017438:	4602      	mov	r2, r0
 801743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801743c:	1ad3      	subs	r3, r2, r3
 801743e:	2b02      	cmp	r3, #2
 8017440:	d901      	bls.n	8017446 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8017442:	2303      	movs	r3, #3
 8017444:	e059      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017450:	2b00      	cmp	r3, #0
 8017452:	d0ef      	beq.n	8017434 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8017454:	e050      	b.n	80174f8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8017456:	2301      	movs	r3, #1
 8017458:	e04f      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801745a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8017464:	2b00      	cmp	r3, #0
 8017466:	d147      	bne.n	80174f8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8017468:	f7ff fc1c 	bl	8016ca4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801746c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017470:	68db      	ldr	r3, [r3, #12]
 8017472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801747a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801747c:	f7fd fe9c 	bl	80151b8 <HAL_GetTick>
 8017480:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017482:	e008      	b.n	8017496 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017484:	f7fd fe98 	bl	80151b8 <HAL_GetTick>
 8017488:	4602      	mov	r2, r0
 801748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801748c:	1ad3      	subs	r3, r2, r3
 801748e:	2b02      	cmp	r3, #2
 8017490:	d901      	bls.n	8017496 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8017492:	2303      	movs	r3, #3
 8017494:	e031      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d0ef      	beq.n	8017484 <HAL_RCC_OscConfig+0x664>
 80174a4:	e028      	b.n	80174f8 <HAL_RCC_OscConfig+0x6d8>
 80174a6:	bf00      	nop
 80174a8:	58000400 	.word	0x58000400
 80174ac:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	2b0c      	cmp	r3, #12
 80174b4:	d01e      	beq.n	80174f4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80174b6:	f7ff fc04 	bl	8016cc2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80174ba:	f7fd fe7d 	bl	80151b8 <HAL_GetTick>
 80174be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80174c0:	e008      	b.n	80174d4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80174c2:	f7fd fe79 	bl	80151b8 <HAL_GetTick>
 80174c6:	4602      	mov	r2, r0
 80174c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174ca:	1ad3      	subs	r3, r2, r3
 80174cc:	2b02      	cmp	r3, #2
 80174ce:	d901      	bls.n	80174d4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80174d0:	2303      	movs	r3, #3
 80174d2:	e012      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80174d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d1ef      	bne.n	80174c2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80174e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80174e6:	68da      	ldr	r2, [r3, #12]
 80174e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80174ec:	4b05      	ldr	r3, [pc, #20]	; (8017504 <HAL_RCC_OscConfig+0x6e4>)
 80174ee:	4013      	ands	r3, r2
 80174f0:	60cb      	str	r3, [r1, #12]
 80174f2:	e001      	b.n	80174f8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80174f4:	2301      	movs	r3, #1
 80174f6:	e000      	b.n	80174fa <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80174f8:	2300      	movs	r3, #0
}
 80174fa:	4618      	mov	r0, r3
 80174fc:	3734      	adds	r7, #52	; 0x34
 80174fe:	46bd      	mov	sp, r7
 8017500:	bd90      	pop	{r4, r7, pc}
 8017502:	bf00      	nop
 8017504:	eefefffc 	.word	0xeefefffc

08017508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b084      	sub	sp, #16
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
 8017510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	2b00      	cmp	r3, #0
 8017516:	d101      	bne.n	801751c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8017518:	2301      	movs	r3, #1
 801751a:	e12d      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801751c:	4b98      	ldr	r3, [pc, #608]	; (8017780 <HAL_RCC_ClockConfig+0x278>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	f003 0307 	and.w	r3, r3, #7
 8017524:	683a      	ldr	r2, [r7, #0]
 8017526:	429a      	cmp	r2, r3
 8017528:	d91b      	bls.n	8017562 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801752a:	4b95      	ldr	r3, [pc, #596]	; (8017780 <HAL_RCC_ClockConfig+0x278>)
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	f023 0207 	bic.w	r2, r3, #7
 8017532:	4993      	ldr	r1, [pc, #588]	; (8017780 <HAL_RCC_ClockConfig+0x278>)
 8017534:	683b      	ldr	r3, [r7, #0]
 8017536:	4313      	orrs	r3, r2
 8017538:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801753a:	f7fd fe3d 	bl	80151b8 <HAL_GetTick>
 801753e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017540:	e008      	b.n	8017554 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017542:	f7fd fe39 	bl	80151b8 <HAL_GetTick>
 8017546:	4602      	mov	r2, r0
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	1ad3      	subs	r3, r2, r3
 801754c:	2b02      	cmp	r3, #2
 801754e:	d901      	bls.n	8017554 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8017550:	2303      	movs	r3, #3
 8017552:	e111      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017554:	4b8a      	ldr	r3, [pc, #552]	; (8017780 <HAL_RCC_ClockConfig+0x278>)
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	f003 0307 	and.w	r3, r3, #7
 801755c:	683a      	ldr	r2, [r7, #0]
 801755e:	429a      	cmp	r2, r3
 8017560:	d1ef      	bne.n	8017542 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	f003 0302 	and.w	r3, r3, #2
 801756a:	2b00      	cmp	r3, #0
 801756c:	d016      	beq.n	801759c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	689b      	ldr	r3, [r3, #8]
 8017572:	4618      	mov	r0, r3
 8017574:	f7ff fafb 	bl	8016b6e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017578:	f7fd fe1e 	bl	80151b8 <HAL_GetTick>
 801757c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 801757e:	e008      	b.n	8017592 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8017580:	f7fd fe1a 	bl	80151b8 <HAL_GetTick>
 8017584:	4602      	mov	r2, r0
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	1ad3      	subs	r3, r2, r3
 801758a:	2b02      	cmp	r3, #2
 801758c:	d901      	bls.n	8017592 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 801758e:	2303      	movs	r3, #3
 8017590:	e0f2      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8017592:	f7ff fbe8 	bl	8016d66 <LL_RCC_IsActiveFlag_HPRE>
 8017596:	4603      	mov	r3, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	d0f1      	beq.n	8017580 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	f003 0320 	and.w	r3, r3, #32
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d016      	beq.n	80175d6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	695b      	ldr	r3, [r3, #20]
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7ff faf2 	bl	8016b96 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80175b2:	f7fd fe01 	bl	80151b8 <HAL_GetTick>
 80175b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80175b8:	e008      	b.n	80175cc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80175ba:	f7fd fdfd 	bl	80151b8 <HAL_GetTick>
 80175be:	4602      	mov	r2, r0
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	1ad3      	subs	r3, r2, r3
 80175c4:	2b02      	cmp	r3, #2
 80175c6:	d901      	bls.n	80175cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80175c8:	2303      	movs	r3, #3
 80175ca:	e0d5      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80175cc:	f7ff fbdd 	bl	8016d8a <LL_RCC_IsActiveFlag_C2HPRE>
 80175d0:	4603      	mov	r3, r0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d0f1      	beq.n	80175ba <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d016      	beq.n	8017610 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	699b      	ldr	r3, [r3, #24]
 80175e6:	4618      	mov	r0, r3
 80175e8:	f7ff faeb 	bl	8016bc2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80175ec:	f7fd fde4 	bl	80151b8 <HAL_GetTick>
 80175f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80175f2:	e008      	b.n	8017606 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80175f4:	f7fd fde0 	bl	80151b8 <HAL_GetTick>
 80175f8:	4602      	mov	r2, r0
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	1ad3      	subs	r3, r2, r3
 80175fe:	2b02      	cmp	r3, #2
 8017600:	d901      	bls.n	8017606 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8017602:	2303      	movs	r3, #3
 8017604:	e0b8      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8017606:	f7ff fbd3 	bl	8016db0 <LL_RCC_IsActiveFlag_SHDHPRE>
 801760a:	4603      	mov	r3, r0
 801760c:	2b00      	cmp	r3, #0
 801760e:	d0f1      	beq.n	80175f4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	f003 0304 	and.w	r3, r3, #4
 8017618:	2b00      	cmp	r3, #0
 801761a:	d016      	beq.n	801764a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	68db      	ldr	r3, [r3, #12]
 8017620:	4618      	mov	r0, r3
 8017622:	f7ff fae5 	bl	8016bf0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017626:	f7fd fdc7 	bl	80151b8 <HAL_GetTick>
 801762a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 801762c:	e008      	b.n	8017640 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801762e:	f7fd fdc3 	bl	80151b8 <HAL_GetTick>
 8017632:	4602      	mov	r2, r0
 8017634:	68fb      	ldr	r3, [r7, #12]
 8017636:	1ad3      	subs	r3, r2, r3
 8017638:	2b02      	cmp	r3, #2
 801763a:	d901      	bls.n	8017640 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 801763c:	2303      	movs	r3, #3
 801763e:	e09b      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8017640:	f7ff fbc9 	bl	8016dd6 <LL_RCC_IsActiveFlag_PPRE1>
 8017644:	4603      	mov	r3, r0
 8017646:	2b00      	cmp	r3, #0
 8017648:	d0f1      	beq.n	801762e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	f003 0308 	and.w	r3, r3, #8
 8017652:	2b00      	cmp	r3, #0
 8017654:	d017      	beq.n	8017686 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	691b      	ldr	r3, [r3, #16]
 801765a:	00db      	lsls	r3, r3, #3
 801765c:	4618      	mov	r0, r3
 801765e:	f7ff fadb 	bl	8016c18 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8017662:	f7fd fda9 	bl	80151b8 <HAL_GetTick>
 8017666:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8017668:	e008      	b.n	801767c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 801766a:	f7fd fda5 	bl	80151b8 <HAL_GetTick>
 801766e:	4602      	mov	r2, r0
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	1ad3      	subs	r3, r2, r3
 8017674:	2b02      	cmp	r3, #2
 8017676:	d901      	bls.n	801767c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8017678:	2303      	movs	r3, #3
 801767a:	e07d      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 801767c:	f7ff fbbd 	bl	8016dfa <LL_RCC_IsActiveFlag_PPRE2>
 8017680:	4603      	mov	r3, r0
 8017682:	2b00      	cmp	r3, #0
 8017684:	d0f1      	beq.n	801766a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	f003 0301 	and.w	r3, r3, #1
 801768e:	2b00      	cmp	r3, #0
 8017690:	d043      	beq.n	801771a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	685b      	ldr	r3, [r3, #4]
 8017696:	2b02      	cmp	r3, #2
 8017698:	d106      	bne.n	80176a8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 801769a:	f7ff f87b 	bl	8016794 <LL_RCC_HSE_IsReady>
 801769e:	4603      	mov	r3, r0
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d11e      	bne.n	80176e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80176a4:	2301      	movs	r3, #1
 80176a6:	e067      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	685b      	ldr	r3, [r3, #4]
 80176ac:	2b03      	cmp	r3, #3
 80176ae:	d106      	bne.n	80176be <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80176b0:	f7ff fb16 	bl	8016ce0 <LL_RCC_PLL_IsReady>
 80176b4:	4603      	mov	r3, r0
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d113      	bne.n	80176e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80176ba:	2301      	movs	r3, #1
 80176bc:	e05c      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	685b      	ldr	r3, [r3, #4]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d106      	bne.n	80176d4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80176c6:	f7ff f9e3 	bl	8016a90 <LL_RCC_MSI_IsReady>
 80176ca:	4603      	mov	r3, r0
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d108      	bne.n	80176e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80176d0:	2301      	movs	r3, #1
 80176d2:	e051      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80176d4:	f7ff f88e 	bl	80167f4 <LL_RCC_HSI_IsReady>
 80176d8:	4603      	mov	r3, r0
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d101      	bne.n	80176e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80176de:	2301      	movs	r3, #1
 80176e0:	e04a      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	685b      	ldr	r3, [r3, #4]
 80176e6:	4618      	mov	r0, r3
 80176e8:	f7ff fa21 	bl	8016b2e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80176ec:	f7fd fd64 	bl	80151b8 <HAL_GetTick>
 80176f0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80176f2:	e00a      	b.n	801770a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80176f4:	f7fd fd60 	bl	80151b8 <HAL_GetTick>
 80176f8:	4602      	mov	r2, r0
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	1ad3      	subs	r3, r2, r3
 80176fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8017702:	4293      	cmp	r3, r2
 8017704:	d901      	bls.n	801770a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8017706:	2303      	movs	r3, #3
 8017708:	e036      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801770a:	f7ff fa24 	bl	8016b56 <LL_RCC_GetSysClkSource>
 801770e:	4602      	mov	r2, r0
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	685b      	ldr	r3, [r3, #4]
 8017714:	009b      	lsls	r3, r3, #2
 8017716:	429a      	cmp	r2, r3
 8017718:	d1ec      	bne.n	80176f4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801771a:	4b19      	ldr	r3, [pc, #100]	; (8017780 <HAL_RCC_ClockConfig+0x278>)
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	f003 0307 	and.w	r3, r3, #7
 8017722:	683a      	ldr	r2, [r7, #0]
 8017724:	429a      	cmp	r2, r3
 8017726:	d21b      	bcs.n	8017760 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8017728:	4b15      	ldr	r3, [pc, #84]	; (8017780 <HAL_RCC_ClockConfig+0x278>)
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	f023 0207 	bic.w	r2, r3, #7
 8017730:	4913      	ldr	r1, [pc, #76]	; (8017780 <HAL_RCC_ClockConfig+0x278>)
 8017732:	683b      	ldr	r3, [r7, #0]
 8017734:	4313      	orrs	r3, r2
 8017736:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8017738:	f7fd fd3e 	bl	80151b8 <HAL_GetTick>
 801773c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801773e:	e008      	b.n	8017752 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017740:	f7fd fd3a 	bl	80151b8 <HAL_GetTick>
 8017744:	4602      	mov	r2, r0
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	1ad3      	subs	r3, r2, r3
 801774a:	2b02      	cmp	r3, #2
 801774c:	d901      	bls.n	8017752 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 801774e:	2303      	movs	r3, #3
 8017750:	e012      	b.n	8017778 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017752:	4b0b      	ldr	r3, [pc, #44]	; (8017780 <HAL_RCC_ClockConfig+0x278>)
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	f003 0307 	and.w	r3, r3, #7
 801775a:	683a      	ldr	r2, [r7, #0]
 801775c:	429a      	cmp	r2, r3
 801775e:	d1ef      	bne.n	8017740 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8017760:	f000 f87e 	bl	8017860 <HAL_RCC_GetHCLKFreq>
 8017764:	4603      	mov	r3, r0
 8017766:	4a07      	ldr	r2, [pc, #28]	; (8017784 <HAL_RCC_ClockConfig+0x27c>)
 8017768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 801776a:	f7fd fd31 	bl	80151d0 <HAL_GetTickPrio>
 801776e:	4603      	mov	r3, r0
 8017770:	4618      	mov	r0, r3
 8017772:	f7fd fcd3 	bl	801511c <HAL_InitTick>
 8017776:	4603      	mov	r3, r0
}
 8017778:	4618      	mov	r0, r3
 801777a:	3710      	adds	r7, #16
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}
 8017780:	58004000 	.word	0x58004000
 8017784:	20000008 	.word	0x20000008

08017788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017788:	b590      	push	{r4, r7, lr}
 801778a:	b085      	sub	sp, #20
 801778c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801778e:	f7ff f9e2 	bl	8016b56 <LL_RCC_GetSysClkSource>
 8017792:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d10a      	bne.n	80177b0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 801779a:	f7ff f99e 	bl	8016ada <LL_RCC_MSI_GetRange>
 801779e:	4603      	mov	r3, r0
 80177a0:	091b      	lsrs	r3, r3, #4
 80177a2:	f003 030f 	and.w	r3, r3, #15
 80177a6:	4a2b      	ldr	r2, [pc, #172]	; (8017854 <HAL_RCC_GetSysClockFreq+0xcc>)
 80177a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80177ac:	60fb      	str	r3, [r7, #12]
 80177ae:	e04b      	b.n	8017848 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	2b04      	cmp	r3, #4
 80177b4:	d102      	bne.n	80177bc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80177b6:	4b28      	ldr	r3, [pc, #160]	; (8017858 <HAL_RCC_GetSysClockFreq+0xd0>)
 80177b8:	60fb      	str	r3, [r7, #12]
 80177ba:	e045      	b.n	8017848 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	2b08      	cmp	r3, #8
 80177c0:	d10a      	bne.n	80177d8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80177c2:	f7fe ffb7 	bl	8016734 <LL_RCC_HSE_IsEnabledDiv2>
 80177c6:	4603      	mov	r3, r0
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	d102      	bne.n	80177d2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80177cc:	4b22      	ldr	r3, [pc, #136]	; (8017858 <HAL_RCC_GetSysClockFreq+0xd0>)
 80177ce:	60fb      	str	r3, [r7, #12]
 80177d0:	e03a      	b.n	8017848 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80177d2:	4b22      	ldr	r3, [pc, #136]	; (801785c <HAL_RCC_GetSysClockFreq+0xd4>)
 80177d4:	60fb      	str	r3, [r7, #12]
 80177d6:	e037      	b.n	8017848 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80177d8:	f7ff fab9 	bl	8016d4e <LL_RCC_PLL_GetMainSource>
 80177dc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	2b02      	cmp	r3, #2
 80177e2:	d003      	beq.n	80177ec <HAL_RCC_GetSysClockFreq+0x64>
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	2b03      	cmp	r3, #3
 80177e8:	d003      	beq.n	80177f2 <HAL_RCC_GetSysClockFreq+0x6a>
 80177ea:	e00d      	b.n	8017808 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80177ec:	4b1a      	ldr	r3, [pc, #104]	; (8017858 <HAL_RCC_GetSysClockFreq+0xd0>)
 80177ee:	60bb      	str	r3, [r7, #8]
        break;
 80177f0:	e015      	b.n	801781e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80177f2:	f7fe ff9f 	bl	8016734 <LL_RCC_HSE_IsEnabledDiv2>
 80177f6:	4603      	mov	r3, r0
 80177f8:	2b01      	cmp	r3, #1
 80177fa:	d102      	bne.n	8017802 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80177fc:	4b16      	ldr	r3, [pc, #88]	; (8017858 <HAL_RCC_GetSysClockFreq+0xd0>)
 80177fe:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8017800:	e00d      	b.n	801781e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8017802:	4b16      	ldr	r3, [pc, #88]	; (801785c <HAL_RCC_GetSysClockFreq+0xd4>)
 8017804:	60bb      	str	r3, [r7, #8]
        break;
 8017806:	e00a      	b.n	801781e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8017808:	f7ff f967 	bl	8016ada <LL_RCC_MSI_GetRange>
 801780c:	4603      	mov	r3, r0
 801780e:	091b      	lsrs	r3, r3, #4
 8017810:	f003 030f 	and.w	r3, r3, #15
 8017814:	4a0f      	ldr	r2, [pc, #60]	; (8017854 <HAL_RCC_GetSysClockFreq+0xcc>)
 8017816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801781a:	60bb      	str	r3, [r7, #8]
        break;
 801781c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 801781e:	f7ff fa71 	bl	8016d04 <LL_RCC_PLL_GetN>
 8017822:	4602      	mov	r2, r0
 8017824:	68bb      	ldr	r3, [r7, #8]
 8017826:	fb03 f402 	mul.w	r4, r3, r2
 801782a:	f7ff fa84 	bl	8016d36 <LL_RCC_PLL_GetDivider>
 801782e:	4603      	mov	r3, r0
 8017830:	091b      	lsrs	r3, r3, #4
 8017832:	3301      	adds	r3, #1
 8017834:	fbb4 f4f3 	udiv	r4, r4, r3
 8017838:	f7ff fa71 	bl	8016d1e <LL_RCC_PLL_GetR>
 801783c:	4603      	mov	r3, r0
 801783e:	0f5b      	lsrs	r3, r3, #29
 8017840:	3301      	adds	r3, #1
 8017842:	fbb4 f3f3 	udiv	r3, r4, r3
 8017846:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8017848:	68fb      	ldr	r3, [r7, #12]
}
 801784a:	4618      	mov	r0, r3
 801784c:	3714      	adds	r7, #20
 801784e:	46bd      	mov	sp, r7
 8017850:	bd90      	pop	{r4, r7, pc}
 8017852:	bf00      	nop
 8017854:	0801a3d4 	.word	0x0801a3d4
 8017858:	00f42400 	.word	0x00f42400
 801785c:	01e84800 	.word	0x01e84800

08017860 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8017860:	b598      	push	{r3, r4, r7, lr}
 8017862:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8017864:	f7ff ff90 	bl	8017788 <HAL_RCC_GetSysClockFreq>
 8017868:	4604      	mov	r4, r0
 801786a:	f7ff f9e9 	bl	8016c40 <LL_RCC_GetAHBPrescaler>
 801786e:	4603      	mov	r3, r0
 8017870:	091b      	lsrs	r3, r3, #4
 8017872:	f003 030f 	and.w	r3, r3, #15
 8017876:	4a03      	ldr	r2, [pc, #12]	; (8017884 <HAL_RCC_GetHCLKFreq+0x24>)
 8017878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801787c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8017880:	4618      	mov	r0, r3
 8017882:	bd98      	pop	{r3, r4, r7, pc}
 8017884:	0801a374 	.word	0x0801a374

08017888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8017888:	b598      	push	{r3, r4, r7, lr}
 801788a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 801788c:	f7ff ffe8 	bl	8017860 <HAL_RCC_GetHCLKFreq>
 8017890:	4604      	mov	r4, r0
 8017892:	f7ff f9ef 	bl	8016c74 <LL_RCC_GetAPB1Prescaler>
 8017896:	4603      	mov	r3, r0
 8017898:	0a1b      	lsrs	r3, r3, #8
 801789a:	f003 0307 	and.w	r3, r3, #7
 801789e:	4a04      	ldr	r2, [pc, #16]	; (80178b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80178a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178a4:	f003 031f 	and.w	r3, r3, #31
 80178a8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80178ac:	4618      	mov	r0, r3
 80178ae:	bd98      	pop	{r3, r4, r7, pc}
 80178b0:	0801a3b4 	.word	0x0801a3b4

080178b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80178b4:	b598      	push	{r3, r4, r7, lr}
 80178b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80178b8:	f7ff ffd2 	bl	8017860 <HAL_RCC_GetHCLKFreq>
 80178bc:	4604      	mov	r4, r0
 80178be:	f7ff f9e5 	bl	8016c8c <LL_RCC_GetAPB2Prescaler>
 80178c2:	4603      	mov	r3, r0
 80178c4:	0adb      	lsrs	r3, r3, #11
 80178c6:	f003 0307 	and.w	r3, r3, #7
 80178ca:	4a04      	ldr	r2, [pc, #16]	; (80178dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80178cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178d0:	f003 031f 	and.w	r3, r3, #31
 80178d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80178d8:	4618      	mov	r0, r3
 80178da:	bd98      	pop	{r3, r4, r7, pc}
 80178dc:	0801a3b4 	.word	0x0801a3b4

080178e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80178e0:	b590      	push	{r4, r7, lr}
 80178e2:	b085      	sub	sp, #20
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	2bb0      	cmp	r3, #176	; 0xb0
 80178ec:	d903      	bls.n	80178f6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80178ee:	4b15      	ldr	r3, [pc, #84]	; (8017944 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80178f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80178f2:	60fb      	str	r3, [r7, #12]
 80178f4:	e007      	b.n	8017906 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	091b      	lsrs	r3, r3, #4
 80178fa:	f003 030f 	and.w	r3, r3, #15
 80178fe:	4a11      	ldr	r2, [pc, #68]	; (8017944 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8017900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017904:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8017906:	f7ff f9a7 	bl	8016c58 <LL_RCC_GetAHB4Prescaler>
 801790a:	4603      	mov	r3, r0
 801790c:	091b      	lsrs	r3, r3, #4
 801790e:	f003 030f 	and.w	r3, r3, #15
 8017912:	4a0d      	ldr	r2, [pc, #52]	; (8017948 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8017914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017918:	68fa      	ldr	r2, [r7, #12]
 801791a:	fbb2 f3f3 	udiv	r3, r2, r3
 801791e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8017920:	68bb      	ldr	r3, [r7, #8]
 8017922:	4a0a      	ldr	r2, [pc, #40]	; (801794c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8017924:	fba2 2303 	umull	r2, r3, r2, r3
 8017928:	0c9c      	lsrs	r4, r3, #18
 801792a:	f7fe fef5 	bl	8016718 <HAL_PWREx_GetVoltageRange>
 801792e:	4603      	mov	r3, r0
 8017930:	4619      	mov	r1, r3
 8017932:	4620      	mov	r0, r4
 8017934:	f000 f80c 	bl	8017950 <RCC_SetFlashLatency>
 8017938:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 801793a:	4618      	mov	r0, r3
 801793c:	3714      	adds	r7, #20
 801793e:	46bd      	mov	sp, r7
 8017940:	bd90      	pop	{r4, r7, pc}
 8017942:	bf00      	nop
 8017944:	0801a3d4 	.word	0x0801a3d4
 8017948:	0801a374 	.word	0x0801a374
 801794c:	431bde83 	.word	0x431bde83

08017950 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8017950:	b590      	push	{r4, r7, lr}
 8017952:	b093      	sub	sp, #76	; 0x4c
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
 8017958:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 801795a:	4b37      	ldr	r3, [pc, #220]	; (8017a38 <RCC_SetFlashLatency+0xe8>)
 801795c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8017960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017962:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8017966:	4a35      	ldr	r2, [pc, #212]	; (8017a3c <RCC_SetFlashLatency+0xec>)
 8017968:	f107 031c 	add.w	r3, r7, #28
 801796c:	ca07      	ldmia	r2, {r0, r1, r2}
 801796e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8017972:	4b33      	ldr	r3, [pc, #204]	; (8017a40 <RCC_SetFlashLatency+0xf0>)
 8017974:	f107 040c 	add.w	r4, r7, #12
 8017978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801797a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 801797e:	2300      	movs	r3, #0
 8017980:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8017982:	683b      	ldr	r3, [r7, #0]
 8017984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017988:	d11a      	bne.n	80179c0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 801798a:	2300      	movs	r3, #0
 801798c:	643b      	str	r3, [r7, #64]	; 0x40
 801798e:	e013      	b.n	80179b8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8017990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017992:	009b      	lsls	r3, r3, #2
 8017994:	3348      	adds	r3, #72	; 0x48
 8017996:	443b      	add	r3, r7
 8017998:	f853 3c20 	ldr.w	r3, [r3, #-32]
 801799c:	687a      	ldr	r2, [r7, #4]
 801799e:	429a      	cmp	r2, r3
 80179a0:	d807      	bhi.n	80179b2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80179a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179a4:	009b      	lsls	r3, r3, #2
 80179a6:	3348      	adds	r3, #72	; 0x48
 80179a8:	443b      	add	r3, r7
 80179aa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80179ae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80179b0:	e020      	b.n	80179f4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80179b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179b4:	3301      	adds	r3, #1
 80179b6:	643b      	str	r3, [r7, #64]	; 0x40
 80179b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80179ba:	2b03      	cmp	r3, #3
 80179bc:	d9e8      	bls.n	8017990 <RCC_SetFlashLatency+0x40>
 80179be:	e019      	b.n	80179f4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80179c0:	2300      	movs	r3, #0
 80179c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80179c4:	e013      	b.n	80179ee <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80179c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179c8:	009b      	lsls	r3, r3, #2
 80179ca:	3348      	adds	r3, #72	; 0x48
 80179cc:	443b      	add	r3, r7
 80179ce:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80179d2:	687a      	ldr	r2, [r7, #4]
 80179d4:	429a      	cmp	r2, r3
 80179d6:	d807      	bhi.n	80179e8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80179d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179da:	009b      	lsls	r3, r3, #2
 80179dc:	3348      	adds	r3, #72	; 0x48
 80179de:	443b      	add	r3, r7
 80179e0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80179e4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80179e6:	e005      	b.n	80179f4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80179e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179ea:	3301      	adds	r3, #1
 80179ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80179ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179f0:	2b02      	cmp	r3, #2
 80179f2:	d9e8      	bls.n	80179c6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80179f4:	4b13      	ldr	r3, [pc, #76]	; (8017a44 <RCC_SetFlashLatency+0xf4>)
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	f023 0207 	bic.w	r2, r3, #7
 80179fc:	4911      	ldr	r1, [pc, #68]	; (8017a44 <RCC_SetFlashLatency+0xf4>)
 80179fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017a00:	4313      	orrs	r3, r2
 8017a02:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8017a04:	f7fd fbd8 	bl	80151b8 <HAL_GetTick>
 8017a08:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017a0a:	e008      	b.n	8017a1e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8017a0c:	f7fd fbd4 	bl	80151b8 <HAL_GetTick>
 8017a10:	4602      	mov	r2, r0
 8017a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a14:	1ad3      	subs	r3, r2, r3
 8017a16:	2b02      	cmp	r3, #2
 8017a18:	d901      	bls.n	8017a1e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8017a1a:	2303      	movs	r3, #3
 8017a1c:	e007      	b.n	8017a2e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8017a1e:	4b09      	ldr	r3, [pc, #36]	; (8017a44 <RCC_SetFlashLatency+0xf4>)
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	f003 0307 	and.w	r3, r3, #7
 8017a26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d1ef      	bne.n	8017a0c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8017a2c:	2300      	movs	r3, #0
}
 8017a2e:	4618      	mov	r0, r3
 8017a30:	374c      	adds	r7, #76	; 0x4c
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd90      	pop	{r4, r7, pc}
 8017a36:	bf00      	nop
 8017a38:	0801a290 	.word	0x0801a290
 8017a3c:	0801a2a0 	.word	0x0801a2a0
 8017a40:	0801a2ac 	.word	0x0801a2ac
 8017a44:	58004000 	.word	0x58004000

08017a48 <LL_RCC_LSE_IsEnabled>:
{
 8017a48:	b480      	push	{r7}
 8017a4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8017a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017a54:	f003 0301 	and.w	r3, r3, #1
 8017a58:	2b01      	cmp	r3, #1
 8017a5a:	d101      	bne.n	8017a60 <LL_RCC_LSE_IsEnabled+0x18>
 8017a5c:	2301      	movs	r3, #1
 8017a5e:	e000      	b.n	8017a62 <LL_RCC_LSE_IsEnabled+0x1a>
 8017a60:	2300      	movs	r3, #0
}
 8017a62:	4618      	mov	r0, r3
 8017a64:	46bd      	mov	sp, r7
 8017a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a6a:	4770      	bx	lr

08017a6c <LL_RCC_LSE_IsReady>:
{
 8017a6c:	b480      	push	{r7}
 8017a6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8017a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017a78:	f003 0302 	and.w	r3, r3, #2
 8017a7c:	2b02      	cmp	r3, #2
 8017a7e:	d101      	bne.n	8017a84 <LL_RCC_LSE_IsReady+0x18>
 8017a80:	2301      	movs	r3, #1
 8017a82:	e000      	b.n	8017a86 <LL_RCC_LSE_IsReady+0x1a>
 8017a84:	2300      	movs	r3, #0
}
 8017a86:	4618      	mov	r0, r3
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a8e:	4770      	bx	lr

08017a90 <LL_RCC_MSI_EnablePLLMode>:
{
 8017a90:	b480      	push	{r7}
 8017a92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8017a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017a9e:	f043 0304 	orr.w	r3, r3, #4
 8017aa2:	6013      	str	r3, [r2, #0]
}
 8017aa4:	bf00      	nop
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aac:	4770      	bx	lr

08017aae <LL_RCC_SetRFWKPClockSource>:
{
 8017aae:	b480      	push	{r7}
 8017ab0:	b083      	sub	sp, #12
 8017ab2:	af00      	add	r7, sp, #0
 8017ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8017ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8017abe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	4313      	orrs	r3, r2
 8017aca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8017ace:	bf00      	nop
 8017ad0:	370c      	adds	r7, #12
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad8:	4770      	bx	lr

08017ada <LL_RCC_SetSMPSClockSource>:
{
 8017ada:	b480      	push	{r7}
 8017adc:	b083      	sub	sp, #12
 8017ade:	af00      	add	r7, sp, #0
 8017ae0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8017ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ae8:	f023 0203 	bic.w	r2, r3, #3
 8017aec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	4313      	orrs	r3, r2
 8017af4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017af6:	bf00      	nop
 8017af8:	370c      	adds	r7, #12
 8017afa:	46bd      	mov	sp, r7
 8017afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b00:	4770      	bx	lr

08017b02 <LL_RCC_SetSMPSPrescaler>:
{
 8017b02:	b480      	push	{r7}
 8017b04:	b083      	sub	sp, #12
 8017b06:	af00      	add	r7, sp, #0
 8017b08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8017b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8017b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	4313      	orrs	r3, r2
 8017b1c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8017b1e:	bf00      	nop
 8017b20:	370c      	adds	r7, #12
 8017b22:	46bd      	mov	sp, r7
 8017b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b28:	4770      	bx	lr

08017b2a <LL_RCC_SetUSARTClockSource>:
{
 8017b2a:	b480      	push	{r7}
 8017b2c:	b083      	sub	sp, #12
 8017b2e:	af00      	add	r7, sp, #0
 8017b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8017b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017b3a:	f023 0203 	bic.w	r2, r3, #3
 8017b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	4313      	orrs	r3, r2
 8017b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017b4a:	bf00      	nop
 8017b4c:	370c      	adds	r7, #12
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b54:	4770      	bx	lr

08017b56 <LL_RCC_SetLPUARTClockSource>:
{
 8017b56:	b480      	push	{r7}
 8017b58:	b083      	sub	sp, #12
 8017b5a:	af00      	add	r7, sp, #0
 8017b5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8017b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017b66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8017b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	4313      	orrs	r3, r2
 8017b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017b76:	bf00      	nop
 8017b78:	370c      	adds	r7, #12
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b80:	4770      	bx	lr

08017b82 <LL_RCC_SetI2CClockSource>:
{
 8017b82:	b480      	push	{r7}
 8017b84:	b083      	sub	sp, #12
 8017b86:	af00      	add	r7, sp, #0
 8017b88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8017b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017b8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	091b      	lsrs	r3, r3, #4
 8017b96:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017b9a:	43db      	mvns	r3, r3
 8017b9c:	401a      	ands	r2, r3
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	011b      	lsls	r3, r3, #4
 8017ba2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8017ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017baa:	4313      	orrs	r3, r2
 8017bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017bb0:	bf00      	nop
 8017bb2:	370c      	adds	r7, #12
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bba:	4770      	bx	lr

08017bbc <LL_RCC_SetLPTIMClockSource>:
{
 8017bbc:	b480      	push	{r7}
 8017bbe:	b083      	sub	sp, #12
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8017bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017bc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	0c1b      	lsrs	r3, r3, #16
 8017bd0:	041b      	lsls	r3, r3, #16
 8017bd2:	43db      	mvns	r3, r3
 8017bd4:	401a      	ands	r2, r3
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	041b      	lsls	r3, r3, #16
 8017bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017bde:	4313      	orrs	r3, r2
 8017be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017be4:	bf00      	nop
 8017be6:	370c      	adds	r7, #12
 8017be8:	46bd      	mov	sp, r7
 8017bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bee:	4770      	bx	lr

08017bf0 <LL_RCC_SetSAIClockSource>:
{
 8017bf0:	b480      	push	{r7}
 8017bf2:	b083      	sub	sp, #12
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8017bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017c04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	4313      	orrs	r3, r2
 8017c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017c10:	bf00      	nop
 8017c12:	370c      	adds	r7, #12
 8017c14:	46bd      	mov	sp, r7
 8017c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1a:	4770      	bx	lr

08017c1c <LL_RCC_SetRNGClockSource>:
{
 8017c1c:	b480      	push	{r7}
 8017c1e:	b083      	sub	sp, #12
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8017c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c2c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8017c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	4313      	orrs	r3, r2
 8017c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017c3c:	bf00      	nop
 8017c3e:	370c      	adds	r7, #12
 8017c40:	46bd      	mov	sp, r7
 8017c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c46:	4770      	bx	lr

08017c48 <LL_RCC_SetCLK48ClockSource>:
{
 8017c48:	b480      	push	{r7}
 8017c4a:	b083      	sub	sp, #12
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8017c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017c5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	4313      	orrs	r3, r2
 8017c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017c68:	bf00      	nop
 8017c6a:	370c      	adds	r7, #12
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c72:	4770      	bx	lr

08017c74 <LL_RCC_SetUSBClockSource>:
{
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b082      	sub	sp, #8
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	f7ff ffe3 	bl	8017c48 <LL_RCC_SetCLK48ClockSource>
}
 8017c82:	bf00      	nop
 8017c84:	3708      	adds	r7, #8
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bd80      	pop	{r7, pc}

08017c8a <LL_RCC_SetADCClockSource>:
{
 8017c8a:	b480      	push	{r7}
 8017c8c:	b083      	sub	sp, #12
 8017c8e:	af00      	add	r7, sp, #0
 8017c90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8017c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017c9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8017c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	4313      	orrs	r3, r2
 8017ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8017caa:	bf00      	nop
 8017cac:	370c      	adds	r7, #12
 8017cae:	46bd      	mov	sp, r7
 8017cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb4:	4770      	bx	lr

08017cb6 <LL_RCC_SetRTCClockSource>:
{
 8017cb6:	b480      	push	{r7}
 8017cb8:	b083      	sub	sp, #12
 8017cba:	af00      	add	r7, sp, #0
 8017cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8017cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017cc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017cca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	4313      	orrs	r3, r2
 8017cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8017cd6:	bf00      	nop
 8017cd8:	370c      	adds	r7, #12
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce0:	4770      	bx	lr

08017ce2 <LL_RCC_GetRTCClockSource>:
{
 8017ce2:	b480      	push	{r7}
 8017ce4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8017ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cfa:	4770      	bx	lr

08017cfc <LL_RCC_ForceBackupDomainReset>:
{
 8017cfc:	b480      	push	{r7}
 8017cfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8017d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017d14:	bf00      	nop
 8017d16:	46bd      	mov	sp, r7
 8017d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1c:	4770      	bx	lr

08017d1e <LL_RCC_ReleaseBackupDomainReset>:
{
 8017d1e:	b480      	push	{r7}
 8017d20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8017d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8017d36:	bf00      	nop
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d3e:	4770      	bx	lr

08017d40 <LL_RCC_PLLSAI1_Enable>:
{
 8017d40:	b480      	push	{r7}
 8017d42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8017d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017d4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017d52:	6013      	str	r3, [r2, #0]
}
 8017d54:	bf00      	nop
 8017d56:	46bd      	mov	sp, r7
 8017d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5c:	4770      	bx	lr

08017d5e <LL_RCC_PLLSAI1_Disable>:
{
 8017d5e:	b480      	push	{r7}
 8017d60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8017d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017d6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017d70:	6013      	str	r3, [r2, #0]
}
 8017d72:	bf00      	nop
 8017d74:	46bd      	mov	sp, r7
 8017d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7a:	4770      	bx	lr

08017d7c <LL_RCC_PLLSAI1_IsReady>:
{
 8017d7c:	b480      	push	{r7}
 8017d7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8017d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8017d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017d8e:	d101      	bne.n	8017d94 <LL_RCC_PLLSAI1_IsReady+0x18>
 8017d90:	2301      	movs	r3, #1
 8017d92:	e000      	b.n	8017d96 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8017d94:	2300      	movs	r3, #0
}
 8017d96:	4618      	mov	r0, r3
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9e:	4770      	bx	lr

08017da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b088      	sub	sp, #32
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8017da8:	2300      	movs	r3, #0
 8017daa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8017dac:	2300      	movs	r3, #0
 8017dae:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d034      	beq.n	8017e26 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8017dc4:	d021      	beq.n	8017e0a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8017dc6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8017dca:	d81b      	bhi.n	8017e04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8017dcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017dd0:	d01d      	beq.n	8017e0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8017dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017dd6:	d815      	bhi.n	8017e04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d00b      	beq.n	8017df4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8017ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8017de0:	d110      	bne.n	8017e04 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8017de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017de6:	68db      	ldr	r3, [r3, #12]
 8017de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8017df0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8017df2:	e00d      	b.n	8017e10 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	3304      	adds	r3, #4
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f000 f94d 	bl	8018098 <RCCEx_PLLSAI1_ConfigNP>
 8017dfe:	4603      	mov	r3, r0
 8017e00:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8017e02:	e005      	b.n	8017e10 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8017e04:	2301      	movs	r3, #1
 8017e06:	77fb      	strb	r3, [r7, #31]
        break;
 8017e08:	e002      	b.n	8017e10 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8017e0a:	bf00      	nop
 8017e0c:	e000      	b.n	8017e10 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8017e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8017e10:	7ffb      	ldrb	r3, [r7, #31]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d105      	bne.n	8017e22 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	f7ff fee8 	bl	8017bf0 <LL_RCC_SetSAIClockSource>
 8017e20:	e001      	b.n	8017e26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017e22:	7ffb      	ldrb	r3, [r7, #31]
 8017e24:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d046      	beq.n	8017ec0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8017e32:	f7ff ff56 	bl	8017ce2 <LL_RCC_GetRTCClockSource>
 8017e36:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e3c:	69ba      	ldr	r2, [r7, #24]
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	d03c      	beq.n	8017ebc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8017e42:	f7fe fc59 	bl	80166f8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8017e46:	69bb      	ldr	r3, [r7, #24]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d105      	bne.n	8017e58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e50:	4618      	mov	r0, r3
 8017e52:	f7ff ff30 	bl	8017cb6 <LL_RCC_SetRTCClockSource>
 8017e56:	e02e      	b.n	8017eb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8017e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017e60:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8017e62:	f7ff ff4b 	bl	8017cfc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8017e66:	f7ff ff5a 	bl	8017d1e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8017e6a:	697b      	ldr	r3, [r7, #20]
 8017e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e74:	4313      	orrs	r3, r2
 8017e76:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8017e78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017e7c:	697b      	ldr	r3, [r7, #20]
 8017e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8017e82:	f7ff fde1 	bl	8017a48 <LL_RCC_LSE_IsEnabled>
 8017e86:	4603      	mov	r3, r0
 8017e88:	2b01      	cmp	r3, #1
 8017e8a:	d114      	bne.n	8017eb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8017e8c:	f7fd f994 	bl	80151b8 <HAL_GetTick>
 8017e90:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8017e92:	e00b      	b.n	8017eac <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017e94:	f7fd f990 	bl	80151b8 <HAL_GetTick>
 8017e98:	4602      	mov	r2, r0
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	1ad3      	subs	r3, r2, r3
 8017e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8017ea2:	4293      	cmp	r3, r2
 8017ea4:	d902      	bls.n	8017eac <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8017ea6:	2303      	movs	r3, #3
 8017ea8:	77fb      	strb	r3, [r7, #31]
              break;
 8017eaa:	e004      	b.n	8017eb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8017eac:	f7ff fdde 	bl	8017a6c <LL_RCC_LSE_IsReady>
 8017eb0:	4603      	mov	r3, r0
 8017eb2:	2b01      	cmp	r3, #1
 8017eb4:	d1ee      	bne.n	8017e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8017eb6:	7ffb      	ldrb	r3, [r7, #31]
 8017eb8:	77bb      	strb	r3, [r7, #30]
 8017eba:	e001      	b.n	8017ec0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017ebc:	7ffb      	ldrb	r3, [r7, #31]
 8017ebe:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	f003 0301 	and.w	r3, r3, #1
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d004      	beq.n	8017ed6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	699b      	ldr	r3, [r3, #24]
 8017ed0:	4618      	mov	r0, r3
 8017ed2:	f7ff fe2a 	bl	8017b2a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	f003 0302 	and.w	r3, r3, #2
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d004      	beq.n	8017eec <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	69db      	ldr	r3, [r3, #28]
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f7ff fe35 	bl	8017b56 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	f003 0310 	and.w	r3, r3, #16
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d004      	beq.n	8017f02 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017efc:	4618      	mov	r0, r3
 8017efe:	f7ff fe5d 	bl	8017bbc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	f003 0320 	and.w	r3, r3, #32
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d004      	beq.n	8017f18 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f12:	4618      	mov	r0, r3
 8017f14:	f7ff fe52 	bl	8017bbc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	f003 0304 	and.w	r3, r3, #4
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d004      	beq.n	8017f2e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	6a1b      	ldr	r3, [r3, #32]
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f7ff fe2a 	bl	8017b82 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	f003 0308 	and.w	r3, r3, #8
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d004      	beq.n	8017f44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7ff fe1f 	bl	8017b82 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d022      	beq.n	8017f96 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f54:	4618      	mov	r0, r3
 8017f56:	f7ff fe8d 	bl	8017c74 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8017f62:	d107      	bne.n	8017f74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8017f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017f68:	68db      	ldr	r3, [r3, #12]
 8017f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017f6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017f72:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017f78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8017f7c:	d10b      	bne.n	8017f96 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	3304      	adds	r3, #4
 8017f82:	4618      	mov	r0, r3
 8017f84:	f000 f8e3 	bl	801814e <RCCEx_PLLSAI1_ConfigNQ>
 8017f88:	4603      	mov	r3, r0
 8017f8a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8017f8c:	7ffb      	ldrb	r3, [r7, #31]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d001      	beq.n	8017f96 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8017f92:	7ffb      	ldrb	r3, [r7, #31]
 8017f94:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d02b      	beq.n	8017ffa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017faa:	d008      	beq.n	8017fbe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017fb4:	d003      	beq.n	8017fbe <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d105      	bne.n	8017fca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f7ff fe2a 	bl	8017c1c <LL_RCC_SetRNGClockSource>
 8017fc8:	e00a      	b.n	8017fe0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017fd2:	60fb      	str	r3, [r7, #12]
 8017fd4:	2000      	movs	r0, #0
 8017fd6:	f7ff fe21 	bl	8017c1c <LL_RCC_SetRNGClockSource>
 8017fda:	68f8      	ldr	r0, [r7, #12]
 8017fdc:	f7ff fe34 	bl	8017c48 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fe4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8017fe8:	d107      	bne.n	8017ffa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8017fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8017fee:	68db      	ldr	r3, [r3, #12]
 8017ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8017ff4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017ff8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018002:	2b00      	cmp	r3, #0
 8018004:	d022      	beq.n	801804c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801800a:	4618      	mov	r0, r3
 801800c:	f7ff fe3d 	bl	8017c8a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018018:	d107      	bne.n	801802a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801801a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801801e:	68db      	ldr	r3, [r3, #12]
 8018020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8018024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018028:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801802e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018032:	d10b      	bne.n	801804c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	3304      	adds	r3, #4
 8018038:	4618      	mov	r0, r3
 801803a:	f000 f8e3 	bl	8018204 <RCCEx_PLLSAI1_ConfigNR>
 801803e:	4603      	mov	r3, r0
 8018040:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8018042:	7ffb      	ldrb	r3, [r7, #31]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d001      	beq.n	801804c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8018048:	7ffb      	ldrb	r3, [r7, #31]
 801804a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018054:	2b00      	cmp	r3, #0
 8018056:	d004      	beq.n	8018062 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801805c:	4618      	mov	r0, r3
 801805e:	f7ff fd26 	bl	8017aae <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801806a:	2b00      	cmp	r3, #0
 801806c:	d009      	beq.n	8018082 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018072:	4618      	mov	r0, r3
 8018074:	f7ff fd45 	bl	8017b02 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801807c:	4618      	mov	r0, r3
 801807e:	f7ff fd2c 	bl	8017ada <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8018082:	7fbb      	ldrb	r3, [r7, #30]
}
 8018084:	4618      	mov	r0, r3
 8018086:	3720      	adds	r7, #32
 8018088:	46bd      	mov	sp, r7
 801808a:	bd80      	pop	{r7, pc}

0801808c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801808c:	b580      	push	{r7, lr}
 801808e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8018090:	f7ff fcfe 	bl	8017a90 <LL_RCC_MSI_EnablePLLMode>
}
 8018094:	bf00      	nop
 8018096:	bd80      	pop	{r7, pc}

08018098 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b084      	sub	sp, #16
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80180a0:	2300      	movs	r3, #0
 80180a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80180a4:	f7ff fe5b 	bl	8017d5e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80180a8:	f7fd f886 	bl	80151b8 <HAL_GetTick>
 80180ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80180ae:	e009      	b.n	80180c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80180b0:	f7fd f882 	bl	80151b8 <HAL_GetTick>
 80180b4:	4602      	mov	r2, r0
 80180b6:	68bb      	ldr	r3, [r7, #8]
 80180b8:	1ad3      	subs	r3, r2, r3
 80180ba:	2b02      	cmp	r3, #2
 80180bc:	d902      	bls.n	80180c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80180be:	2303      	movs	r3, #3
 80180c0:	73fb      	strb	r3, [r7, #15]
      break;
 80180c2:	e004      	b.n	80180ce <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80180c4:	f7ff fe5a 	bl	8017d7c <LL_RCC_PLLSAI1_IsReady>
 80180c8:	4603      	mov	r3, r0
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d1f0      	bne.n	80180b0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80180ce:	7bfb      	ldrb	r3, [r7, #15]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d137      	bne.n	8018144 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80180d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180d8:	691b      	ldr	r3, [r3, #16]
 80180da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	021b      	lsls	r3, r3, #8
 80180e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80180e8:	4313      	orrs	r3, r2
 80180ea:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80180ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80180f0:	691b      	ldr	r3, [r3, #16]
 80180f2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	685b      	ldr	r3, [r3, #4]
 80180fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80180fe:	4313      	orrs	r3, r2
 8018100:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8018102:	f7ff fe1d 	bl	8017d40 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018106:	f7fd f857 	bl	80151b8 <HAL_GetTick>
 801810a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801810c:	e009      	b.n	8018122 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801810e:	f7fd f853 	bl	80151b8 <HAL_GetTick>
 8018112:	4602      	mov	r2, r0
 8018114:	68bb      	ldr	r3, [r7, #8]
 8018116:	1ad3      	subs	r3, r2, r3
 8018118:	2b02      	cmp	r3, #2
 801811a:	d902      	bls.n	8018122 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 801811c:	2303      	movs	r3, #3
 801811e:	73fb      	strb	r3, [r7, #15]
        break;
 8018120:	e004      	b.n	801812c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018122:	f7ff fe2b 	bl	8017d7c <LL_RCC_PLLSAI1_IsReady>
 8018126:	4603      	mov	r3, r0
 8018128:	2b01      	cmp	r3, #1
 801812a:	d1f0      	bne.n	801810e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 801812c:	7bfb      	ldrb	r3, [r7, #15]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d108      	bne.n	8018144 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8018132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018136:	691a      	ldr	r2, [r3, #16]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	691b      	ldr	r3, [r3, #16]
 801813c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018140:	4313      	orrs	r3, r2
 8018142:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8018144:	7bfb      	ldrb	r3, [r7, #15]
}
 8018146:	4618      	mov	r0, r3
 8018148:	3710      	adds	r7, #16
 801814a:	46bd      	mov	sp, r7
 801814c:	bd80      	pop	{r7, pc}

0801814e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 801814e:	b580      	push	{r7, lr}
 8018150:	b084      	sub	sp, #16
 8018152:	af00      	add	r7, sp, #0
 8018154:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8018156:	2300      	movs	r3, #0
 8018158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 801815a:	f7ff fe00 	bl	8017d5e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 801815e:	f7fd f82b 	bl	80151b8 <HAL_GetTick>
 8018162:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018164:	e009      	b.n	801817a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8018166:	f7fd f827 	bl	80151b8 <HAL_GetTick>
 801816a:	4602      	mov	r2, r0
 801816c:	68bb      	ldr	r3, [r7, #8]
 801816e:	1ad3      	subs	r3, r2, r3
 8018170:	2b02      	cmp	r3, #2
 8018172:	d902      	bls.n	801817a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8018174:	2303      	movs	r3, #3
 8018176:	73fb      	strb	r3, [r7, #15]
      break;
 8018178:	e004      	b.n	8018184 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801817a:	f7ff fdff 	bl	8017d7c <LL_RCC_PLLSAI1_IsReady>
 801817e:	4603      	mov	r3, r0
 8018180:	2b00      	cmp	r3, #0
 8018182:	d1f0      	bne.n	8018166 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8018184:	7bfb      	ldrb	r3, [r7, #15]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d137      	bne.n	80181fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 801818a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801818e:	691b      	ldr	r3, [r3, #16]
 8018190:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	021b      	lsls	r3, r3, #8
 801819a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801819e:	4313      	orrs	r3, r2
 80181a0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80181a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181a6:	691b      	ldr	r3, [r3, #16]
 80181a8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	689b      	ldr	r3, [r3, #8]
 80181b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80181b4:	4313      	orrs	r3, r2
 80181b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80181b8:	f7ff fdc2 	bl	8017d40 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80181bc:	f7fc fffc 	bl	80151b8 <HAL_GetTick>
 80181c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80181c2:	e009      	b.n	80181d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80181c4:	f7fc fff8 	bl	80151b8 <HAL_GetTick>
 80181c8:	4602      	mov	r2, r0
 80181ca:	68bb      	ldr	r3, [r7, #8]
 80181cc:	1ad3      	subs	r3, r2, r3
 80181ce:	2b02      	cmp	r3, #2
 80181d0:	d902      	bls.n	80181d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80181d2:	2303      	movs	r3, #3
 80181d4:	73fb      	strb	r3, [r7, #15]
        break;
 80181d6:	e004      	b.n	80181e2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80181d8:	f7ff fdd0 	bl	8017d7c <LL_RCC_PLLSAI1_IsReady>
 80181dc:	4603      	mov	r3, r0
 80181de:	2b01      	cmp	r3, #1
 80181e0:	d1f0      	bne.n	80181c4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80181e2:	7bfb      	ldrb	r3, [r7, #15]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d108      	bne.n	80181fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80181e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80181ec:	691a      	ldr	r2, [r3, #16]
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	691b      	ldr	r3, [r3, #16]
 80181f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80181f6:	4313      	orrs	r3, r2
 80181f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80181fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	3710      	adds	r7, #16
 8018200:	46bd      	mov	sp, r7
 8018202:	bd80      	pop	{r7, pc}

08018204 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b084      	sub	sp, #16
 8018208:	af00      	add	r7, sp, #0
 801820a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801820c:	2300      	movs	r3, #0
 801820e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8018210:	f7ff fda5 	bl	8017d5e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8018214:	f7fc ffd0 	bl	80151b8 <HAL_GetTick>
 8018218:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 801821a:	e009      	b.n	8018230 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801821c:	f7fc ffcc 	bl	80151b8 <HAL_GetTick>
 8018220:	4602      	mov	r2, r0
 8018222:	68bb      	ldr	r3, [r7, #8]
 8018224:	1ad3      	subs	r3, r2, r3
 8018226:	2b02      	cmp	r3, #2
 8018228:	d902      	bls.n	8018230 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 801822a:	2303      	movs	r3, #3
 801822c:	73fb      	strb	r3, [r7, #15]
      break;
 801822e:	e004      	b.n	801823a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8018230:	f7ff fda4 	bl	8017d7c <LL_RCC_PLLSAI1_IsReady>
 8018234:	4603      	mov	r3, r0
 8018236:	2b00      	cmp	r3, #0
 8018238:	d1f0      	bne.n	801821c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 801823a:	7bfb      	ldrb	r3, [r7, #15]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d137      	bne.n	80182b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8018240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018244:	691b      	ldr	r3, [r3, #16]
 8018246:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	021b      	lsls	r3, r3, #8
 8018250:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018254:	4313      	orrs	r3, r2
 8018256:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8018258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801825c:	691b      	ldr	r3, [r3, #16]
 801825e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	68db      	ldr	r3, [r3, #12]
 8018266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 801826a:	4313      	orrs	r3, r2
 801826c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 801826e:	f7ff fd67 	bl	8017d40 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018272:	f7fc ffa1 	bl	80151b8 <HAL_GetTick>
 8018276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8018278:	e009      	b.n	801828e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801827a:	f7fc ff9d 	bl	80151b8 <HAL_GetTick>
 801827e:	4602      	mov	r2, r0
 8018280:	68bb      	ldr	r3, [r7, #8]
 8018282:	1ad3      	subs	r3, r2, r3
 8018284:	2b02      	cmp	r3, #2
 8018286:	d902      	bls.n	801828e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8018288:	2303      	movs	r3, #3
 801828a:	73fb      	strb	r3, [r7, #15]
        break;
 801828c:	e004      	b.n	8018298 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 801828e:	f7ff fd75 	bl	8017d7c <LL_RCC_PLLSAI1_IsReady>
 8018292:	4603      	mov	r3, r0
 8018294:	2b01      	cmp	r3, #1
 8018296:	d1f0      	bne.n	801827a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8018298:	7bfb      	ldrb	r3, [r7, #15]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d108      	bne.n	80182b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 801829e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182a2:	691a      	ldr	r2, [r3, #16]
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	691b      	ldr	r3, [r3, #16]
 80182a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80182ac:	4313      	orrs	r3, r2
 80182ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80182b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80182b2:	4618      	mov	r0, r3
 80182b4:	3710      	adds	r7, #16
 80182b6:	46bd      	mov	sp, r7
 80182b8:	bd80      	pop	{r7, pc}

080182ba <LL_RCC_GetUSARTClockSource>:
{
 80182ba:	b480      	push	{r7}
 80182bc:	b083      	sub	sp, #12
 80182be:	af00      	add	r7, sp, #0
 80182c0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80182c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	4013      	ands	r3, r2
}
 80182ce:	4618      	mov	r0, r3
 80182d0:	370c      	adds	r7, #12
 80182d2:	46bd      	mov	sp, r7
 80182d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d8:	4770      	bx	lr

080182da <LL_RCC_GetLPUARTClockSource>:
{
 80182da:	b480      	push	{r7}
 80182dc:	b083      	sub	sp, #12
 80182de:	af00      	add	r7, sp, #0
 80182e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80182e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80182e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	4013      	ands	r3, r2
}
 80182ee:	4618      	mov	r0, r3
 80182f0:	370c      	adds	r7, #12
 80182f2:	46bd      	mov	sp, r7
 80182f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f8:	4770      	bx	lr

080182fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80182fa:	b580      	push	{r7, lr}
 80182fc:	b082      	sub	sp, #8
 80182fe:	af00      	add	r7, sp, #0
 8018300:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d101      	bne.n	801830c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018308:	2301      	movs	r3, #1
 801830a:	e042      	b.n	8018392 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018312:	2b00      	cmp	r3, #0
 8018314:	d106      	bne.n	8018324 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	2200      	movs	r2, #0
 801831a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801831e:	6878      	ldr	r0, [r7, #4]
 8018320:	f000 f83b 	bl	801839a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	2224      	movs	r2, #36	; 0x24
 8018328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	681a      	ldr	r2, [r3, #0]
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	f022 0201 	bic.w	r2, r2, #1
 801833a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801833c:	6878      	ldr	r0, [r7, #4]
 801833e:	f000 f837 	bl	80183b0 <UART_SetConfig>
 8018342:	4603      	mov	r3, r0
 8018344:	2b01      	cmp	r3, #1
 8018346:	d101      	bne.n	801834c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8018348:	2301      	movs	r3, #1
 801834a:	e022      	b.n	8018392 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018350:	2b00      	cmp	r3, #0
 8018352:	d002      	beq.n	801835a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8018354:	6878      	ldr	r0, [r7, #4]
 8018356:	f000 fa53 	bl	8018800 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	685a      	ldr	r2, [r3, #4]
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8018368:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	689a      	ldr	r2, [r3, #8]
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8018378:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	681a      	ldr	r2, [r3, #0]
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	f042 0201 	orr.w	r2, r2, #1
 8018388:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801838a:	6878      	ldr	r0, [r7, #4]
 801838c:	f000 fada 	bl	8018944 <UART_CheckIdleState>
 8018390:	4603      	mov	r3, r0
}
 8018392:	4618      	mov	r0, r3
 8018394:	3708      	adds	r7, #8
 8018396:	46bd      	mov	sp, r7
 8018398:	bd80      	pop	{r7, pc}

0801839a <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 801839a:	b480      	push	{r7}
 801839c:	b083      	sub	sp, #12
 801839e:	af00      	add	r7, sp, #0
 80183a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80183a2:	bf00      	nop
 80183a4:	370c      	adds	r7, #12
 80183a6:	46bd      	mov	sp, r7
 80183a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ac:	4770      	bx	lr
	...

080183b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80183b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80183b4:	b08c      	sub	sp, #48	; 0x30
 80183b6:	af00      	add	r7, sp, #0
 80183b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80183ba:	2300      	movs	r3, #0
 80183bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80183c0:	697b      	ldr	r3, [r7, #20]
 80183c2:	689a      	ldr	r2, [r3, #8]
 80183c4:	697b      	ldr	r3, [r7, #20]
 80183c6:	691b      	ldr	r3, [r3, #16]
 80183c8:	431a      	orrs	r2, r3
 80183ca:	697b      	ldr	r3, [r7, #20]
 80183cc:	695b      	ldr	r3, [r3, #20]
 80183ce:	431a      	orrs	r2, r3
 80183d0:	697b      	ldr	r3, [r7, #20]
 80183d2:	69db      	ldr	r3, [r3, #28]
 80183d4:	4313      	orrs	r3, r2
 80183d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80183d8:	697b      	ldr	r3, [r7, #20]
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	681a      	ldr	r2, [r3, #0]
 80183de:	4baf      	ldr	r3, [pc, #700]	; (801869c <UART_SetConfig+0x2ec>)
 80183e0:	4013      	ands	r3, r2
 80183e2:	697a      	ldr	r2, [r7, #20]
 80183e4:	6812      	ldr	r2, [r2, #0]
 80183e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80183e8:	430b      	orrs	r3, r1
 80183ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80183ec:	697b      	ldr	r3, [r7, #20]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	685b      	ldr	r3, [r3, #4]
 80183f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80183f6:	697b      	ldr	r3, [r7, #20]
 80183f8:	68da      	ldr	r2, [r3, #12]
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	430a      	orrs	r2, r1
 8018400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8018402:	697b      	ldr	r3, [r7, #20]
 8018404:	699b      	ldr	r3, [r3, #24]
 8018406:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018408:	697b      	ldr	r3, [r7, #20]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	4aa4      	ldr	r2, [pc, #656]	; (80186a0 <UART_SetConfig+0x2f0>)
 801840e:	4293      	cmp	r3, r2
 8018410:	d004      	beq.n	801841c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8018412:	697b      	ldr	r3, [r7, #20]
 8018414:	6a1b      	ldr	r3, [r3, #32]
 8018416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018418:	4313      	orrs	r3, r2
 801841a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801841c:	697b      	ldr	r3, [r7, #20]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	689b      	ldr	r3, [r3, #8]
 8018422:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8018426:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801842a:	697a      	ldr	r2, [r7, #20]
 801842c:	6812      	ldr	r2, [r2, #0]
 801842e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018430:	430b      	orrs	r3, r1
 8018432:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8018434:	697b      	ldr	r3, [r7, #20]
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801843a:	f023 010f 	bic.w	r1, r3, #15
 801843e:	697b      	ldr	r3, [r7, #20]
 8018440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018442:	697b      	ldr	r3, [r7, #20]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	430a      	orrs	r2, r1
 8018448:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801844a:	697b      	ldr	r3, [r7, #20]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	4a95      	ldr	r2, [pc, #596]	; (80186a4 <UART_SetConfig+0x2f4>)
 8018450:	4293      	cmp	r3, r2
 8018452:	d125      	bne.n	80184a0 <UART_SetConfig+0xf0>
 8018454:	2003      	movs	r0, #3
 8018456:	f7ff ff30 	bl	80182ba <LL_RCC_GetUSARTClockSource>
 801845a:	4603      	mov	r3, r0
 801845c:	2b03      	cmp	r3, #3
 801845e:	d81b      	bhi.n	8018498 <UART_SetConfig+0xe8>
 8018460:	a201      	add	r2, pc, #4	; (adr r2, 8018468 <UART_SetConfig+0xb8>)
 8018462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018466:	bf00      	nop
 8018468:	08018479 	.word	0x08018479
 801846c:	08018489 	.word	0x08018489
 8018470:	08018481 	.word	0x08018481
 8018474:	08018491 	.word	0x08018491
 8018478:	2301      	movs	r3, #1
 801847a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801847e:	e042      	b.n	8018506 <UART_SetConfig+0x156>
 8018480:	2302      	movs	r3, #2
 8018482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018486:	e03e      	b.n	8018506 <UART_SetConfig+0x156>
 8018488:	2304      	movs	r3, #4
 801848a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801848e:	e03a      	b.n	8018506 <UART_SetConfig+0x156>
 8018490:	2308      	movs	r3, #8
 8018492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8018496:	e036      	b.n	8018506 <UART_SetConfig+0x156>
 8018498:	2310      	movs	r3, #16
 801849a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801849e:	e032      	b.n	8018506 <UART_SetConfig+0x156>
 80184a0:	697b      	ldr	r3, [r7, #20]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	4a7e      	ldr	r2, [pc, #504]	; (80186a0 <UART_SetConfig+0x2f0>)
 80184a6:	4293      	cmp	r3, r2
 80184a8:	d12a      	bne.n	8018500 <UART_SetConfig+0x150>
 80184aa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80184ae:	f7ff ff14 	bl	80182da <LL_RCC_GetLPUARTClockSource>
 80184b2:	4603      	mov	r3, r0
 80184b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80184b8:	d01a      	beq.n	80184f0 <UART_SetConfig+0x140>
 80184ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80184be:	d81b      	bhi.n	80184f8 <UART_SetConfig+0x148>
 80184c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80184c4:	d00c      	beq.n	80184e0 <UART_SetConfig+0x130>
 80184c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80184ca:	d815      	bhi.n	80184f8 <UART_SetConfig+0x148>
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d003      	beq.n	80184d8 <UART_SetConfig+0x128>
 80184d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80184d4:	d008      	beq.n	80184e8 <UART_SetConfig+0x138>
 80184d6:	e00f      	b.n	80184f8 <UART_SetConfig+0x148>
 80184d8:	2300      	movs	r3, #0
 80184da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80184de:	e012      	b.n	8018506 <UART_SetConfig+0x156>
 80184e0:	2302      	movs	r3, #2
 80184e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80184e6:	e00e      	b.n	8018506 <UART_SetConfig+0x156>
 80184e8:	2304      	movs	r3, #4
 80184ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80184ee:	e00a      	b.n	8018506 <UART_SetConfig+0x156>
 80184f0:	2308      	movs	r3, #8
 80184f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80184f6:	e006      	b.n	8018506 <UART_SetConfig+0x156>
 80184f8:	2310      	movs	r3, #16
 80184fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80184fe:	e002      	b.n	8018506 <UART_SetConfig+0x156>
 8018500:	2310      	movs	r3, #16
 8018502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018506:	697b      	ldr	r3, [r7, #20]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	4a65      	ldr	r2, [pc, #404]	; (80186a0 <UART_SetConfig+0x2f0>)
 801850c:	4293      	cmp	r3, r2
 801850e:	f040 8097 	bne.w	8018640 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018512:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8018516:	2b08      	cmp	r3, #8
 8018518:	d823      	bhi.n	8018562 <UART_SetConfig+0x1b2>
 801851a:	a201      	add	r2, pc, #4	; (adr r2, 8018520 <UART_SetConfig+0x170>)
 801851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018520:	08018545 	.word	0x08018545
 8018524:	08018563 	.word	0x08018563
 8018528:	0801854d 	.word	0x0801854d
 801852c:	08018563 	.word	0x08018563
 8018530:	08018553 	.word	0x08018553
 8018534:	08018563 	.word	0x08018563
 8018538:	08018563 	.word	0x08018563
 801853c:	08018563 	.word	0x08018563
 8018540:	0801855b 	.word	0x0801855b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8018544:	f7ff f9a0 	bl	8017888 <HAL_RCC_GetPCLK1Freq>
 8018548:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801854a:	e010      	b.n	801856e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801854c:	4b56      	ldr	r3, [pc, #344]	; (80186a8 <UART_SetConfig+0x2f8>)
 801854e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018550:	e00d      	b.n	801856e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018552:	f7ff f919 	bl	8017788 <HAL_RCC_GetSysClockFreq>
 8018556:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018558:	e009      	b.n	801856e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801855a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801855e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018560:	e005      	b.n	801856e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8018562:	2300      	movs	r3, #0
 8018564:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8018566:	2301      	movs	r3, #1
 8018568:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801856c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018570:	2b00      	cmp	r3, #0
 8018572:	f000 812b 	beq.w	80187cc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8018576:	697b      	ldr	r3, [r7, #20]
 8018578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801857a:	4a4c      	ldr	r2, [pc, #304]	; (80186ac <UART_SetConfig+0x2fc>)
 801857c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018580:	461a      	mov	r2, r3
 8018582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018584:	fbb3 f3f2 	udiv	r3, r3, r2
 8018588:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801858a:	697b      	ldr	r3, [r7, #20]
 801858c:	685a      	ldr	r2, [r3, #4]
 801858e:	4613      	mov	r3, r2
 8018590:	005b      	lsls	r3, r3, #1
 8018592:	4413      	add	r3, r2
 8018594:	69ba      	ldr	r2, [r7, #24]
 8018596:	429a      	cmp	r2, r3
 8018598:	d305      	bcc.n	80185a6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801859a:	697b      	ldr	r3, [r7, #20]
 801859c:	685b      	ldr	r3, [r3, #4]
 801859e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80185a0:	69ba      	ldr	r2, [r7, #24]
 80185a2:	429a      	cmp	r2, r3
 80185a4:	d903      	bls.n	80185ae <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80185a6:	2301      	movs	r3, #1
 80185a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80185ac:	e10e      	b.n	80187cc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80185ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b0:	2200      	movs	r2, #0
 80185b2:	60bb      	str	r3, [r7, #8]
 80185b4:	60fa      	str	r2, [r7, #12]
 80185b6:	697b      	ldr	r3, [r7, #20]
 80185b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185ba:	4a3c      	ldr	r2, [pc, #240]	; (80186ac <UART_SetConfig+0x2fc>)
 80185bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80185c0:	b29b      	uxth	r3, r3
 80185c2:	2200      	movs	r2, #0
 80185c4:	603b      	str	r3, [r7, #0]
 80185c6:	607a      	str	r2, [r7, #4]
 80185c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80185cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80185d0:	f7e7 fe76 	bl	80002c0 <__aeabi_uldivmod>
 80185d4:	4602      	mov	r2, r0
 80185d6:	460b      	mov	r3, r1
 80185d8:	4610      	mov	r0, r2
 80185da:	4619      	mov	r1, r3
 80185dc:	f04f 0200 	mov.w	r2, #0
 80185e0:	f04f 0300 	mov.w	r3, #0
 80185e4:	020b      	lsls	r3, r1, #8
 80185e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80185ea:	0202      	lsls	r2, r0, #8
 80185ec:	6979      	ldr	r1, [r7, #20]
 80185ee:	6849      	ldr	r1, [r1, #4]
 80185f0:	0849      	lsrs	r1, r1, #1
 80185f2:	2000      	movs	r0, #0
 80185f4:	460c      	mov	r4, r1
 80185f6:	4605      	mov	r5, r0
 80185f8:	eb12 0804 	adds.w	r8, r2, r4
 80185fc:	eb43 0905 	adc.w	r9, r3, r5
 8018600:	697b      	ldr	r3, [r7, #20]
 8018602:	685b      	ldr	r3, [r3, #4]
 8018604:	2200      	movs	r2, #0
 8018606:	469a      	mov	sl, r3
 8018608:	4693      	mov	fp, r2
 801860a:	4652      	mov	r2, sl
 801860c:	465b      	mov	r3, fp
 801860e:	4640      	mov	r0, r8
 8018610:	4649      	mov	r1, r9
 8018612:	f7e7 fe55 	bl	80002c0 <__aeabi_uldivmod>
 8018616:	4602      	mov	r2, r0
 8018618:	460b      	mov	r3, r1
 801861a:	4613      	mov	r3, r2
 801861c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801861e:	6a3b      	ldr	r3, [r7, #32]
 8018620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8018624:	d308      	bcc.n	8018638 <UART_SetConfig+0x288>
 8018626:	6a3b      	ldr	r3, [r7, #32]
 8018628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801862c:	d204      	bcs.n	8018638 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 801862e:	697b      	ldr	r3, [r7, #20]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	6a3a      	ldr	r2, [r7, #32]
 8018634:	60da      	str	r2, [r3, #12]
 8018636:	e0c9      	b.n	80187cc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8018638:	2301      	movs	r3, #1
 801863a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801863e:	e0c5      	b.n	80187cc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018640:	697b      	ldr	r3, [r7, #20]
 8018642:	69db      	ldr	r3, [r3, #28]
 8018644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018648:	d16d      	bne.n	8018726 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801864a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801864e:	3b01      	subs	r3, #1
 8018650:	2b07      	cmp	r3, #7
 8018652:	d82d      	bhi.n	80186b0 <UART_SetConfig+0x300>
 8018654:	a201      	add	r2, pc, #4	; (adr r2, 801865c <UART_SetConfig+0x2ac>)
 8018656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801865a:	bf00      	nop
 801865c:	0801867d 	.word	0x0801867d
 8018660:	08018685 	.word	0x08018685
 8018664:	080186b1 	.word	0x080186b1
 8018668:	0801868b 	.word	0x0801868b
 801866c:	080186b1 	.word	0x080186b1
 8018670:	080186b1 	.word	0x080186b1
 8018674:	080186b1 	.word	0x080186b1
 8018678:	08018693 	.word	0x08018693
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801867c:	f7ff f91a 	bl	80178b4 <HAL_RCC_GetPCLK2Freq>
 8018680:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018682:	e01b      	b.n	80186bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018684:	4b08      	ldr	r3, [pc, #32]	; (80186a8 <UART_SetConfig+0x2f8>)
 8018686:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018688:	e018      	b.n	80186bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801868a:	f7ff f87d 	bl	8017788 <HAL_RCC_GetSysClockFreq>
 801868e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8018690:	e014      	b.n	80186bc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8018692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018696:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018698:	e010      	b.n	80186bc <UART_SetConfig+0x30c>
 801869a:	bf00      	nop
 801869c:	cfff69f3 	.word	0xcfff69f3
 80186a0:	40008000 	.word	0x40008000
 80186a4:	40013800 	.word	0x40013800
 80186a8:	00f42400 	.word	0x00f42400
 80186ac:	0801a414 	.word	0x0801a414
      default:
        pclk = 0U;
 80186b0:	2300      	movs	r3, #0
 80186b2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80186b4:	2301      	movs	r3, #1
 80186b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80186ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80186bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186be:	2b00      	cmp	r3, #0
 80186c0:	f000 8084 	beq.w	80187cc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80186c4:	697b      	ldr	r3, [r7, #20]
 80186c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186c8:	4a4b      	ldr	r2, [pc, #300]	; (80187f8 <UART_SetConfig+0x448>)
 80186ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80186ce:	461a      	mov	r2, r3
 80186d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80186d6:	005a      	lsls	r2, r3, #1
 80186d8:	697b      	ldr	r3, [r7, #20]
 80186da:	685b      	ldr	r3, [r3, #4]
 80186dc:	085b      	lsrs	r3, r3, #1
 80186de:	441a      	add	r2, r3
 80186e0:	697b      	ldr	r3, [r7, #20]
 80186e2:	685b      	ldr	r3, [r3, #4]
 80186e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80186e8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80186ea:	6a3b      	ldr	r3, [r7, #32]
 80186ec:	2b0f      	cmp	r3, #15
 80186ee:	d916      	bls.n	801871e <UART_SetConfig+0x36e>
 80186f0:	6a3b      	ldr	r3, [r7, #32]
 80186f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80186f6:	d212      	bcs.n	801871e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80186f8:	6a3b      	ldr	r3, [r7, #32]
 80186fa:	b29b      	uxth	r3, r3
 80186fc:	f023 030f 	bic.w	r3, r3, #15
 8018700:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8018702:	6a3b      	ldr	r3, [r7, #32]
 8018704:	085b      	lsrs	r3, r3, #1
 8018706:	b29b      	uxth	r3, r3
 8018708:	f003 0307 	and.w	r3, r3, #7
 801870c:	b29a      	uxth	r2, r3
 801870e:	8bfb      	ldrh	r3, [r7, #30]
 8018710:	4313      	orrs	r3, r2
 8018712:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8018714:	697b      	ldr	r3, [r7, #20]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	8bfa      	ldrh	r2, [r7, #30]
 801871a:	60da      	str	r2, [r3, #12]
 801871c:	e056      	b.n	80187cc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801871e:	2301      	movs	r3, #1
 8018720:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8018724:	e052      	b.n	80187cc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8018726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801872a:	3b01      	subs	r3, #1
 801872c:	2b07      	cmp	r3, #7
 801872e:	d822      	bhi.n	8018776 <UART_SetConfig+0x3c6>
 8018730:	a201      	add	r2, pc, #4	; (adr r2, 8018738 <UART_SetConfig+0x388>)
 8018732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018736:	bf00      	nop
 8018738:	08018759 	.word	0x08018759
 801873c:	08018761 	.word	0x08018761
 8018740:	08018777 	.word	0x08018777
 8018744:	08018767 	.word	0x08018767
 8018748:	08018777 	.word	0x08018777
 801874c:	08018777 	.word	0x08018777
 8018750:	08018777 	.word	0x08018777
 8018754:	0801876f 	.word	0x0801876f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8018758:	f7ff f8ac 	bl	80178b4 <HAL_RCC_GetPCLK2Freq>
 801875c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801875e:	e010      	b.n	8018782 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8018760:	4b26      	ldr	r3, [pc, #152]	; (80187fc <UART_SetConfig+0x44c>)
 8018762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018764:	e00d      	b.n	8018782 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8018766:	f7ff f80f 	bl	8017788 <HAL_RCC_GetSysClockFreq>
 801876a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801876c:	e009      	b.n	8018782 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801876e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8018774:	e005      	b.n	8018782 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8018776:	2300      	movs	r3, #0
 8018778:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801877a:	2301      	movs	r3, #1
 801877c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8018780:	bf00      	nop
    }

    if (pclk != 0U)
 8018782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018784:	2b00      	cmp	r3, #0
 8018786:	d021      	beq.n	80187cc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018788:	697b      	ldr	r3, [r7, #20]
 801878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801878c:	4a1a      	ldr	r2, [pc, #104]	; (80187f8 <UART_SetConfig+0x448>)
 801878e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018792:	461a      	mov	r2, r3
 8018794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018796:	fbb3 f2f2 	udiv	r2, r3, r2
 801879a:	697b      	ldr	r3, [r7, #20]
 801879c:	685b      	ldr	r3, [r3, #4]
 801879e:	085b      	lsrs	r3, r3, #1
 80187a0:	441a      	add	r2, r3
 80187a2:	697b      	ldr	r3, [r7, #20]
 80187a4:	685b      	ldr	r3, [r3, #4]
 80187a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80187aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80187ac:	6a3b      	ldr	r3, [r7, #32]
 80187ae:	2b0f      	cmp	r3, #15
 80187b0:	d909      	bls.n	80187c6 <UART_SetConfig+0x416>
 80187b2:	6a3b      	ldr	r3, [r7, #32]
 80187b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80187b8:	d205      	bcs.n	80187c6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80187ba:	6a3b      	ldr	r3, [r7, #32]
 80187bc:	b29a      	uxth	r2, r3
 80187be:	697b      	ldr	r3, [r7, #20]
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	60da      	str	r2, [r3, #12]
 80187c4:	e002      	b.n	80187cc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80187c6:	2301      	movs	r3, #1
 80187c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80187cc:	697b      	ldr	r3, [r7, #20]
 80187ce:	2201      	movs	r2, #1
 80187d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80187d4:	697b      	ldr	r3, [r7, #20]
 80187d6:	2201      	movs	r2, #1
 80187d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80187dc:	697b      	ldr	r3, [r7, #20]
 80187de:	2200      	movs	r2, #0
 80187e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80187e2:	697b      	ldr	r3, [r7, #20]
 80187e4:	2200      	movs	r2, #0
 80187e6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80187e8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	3730      	adds	r7, #48	; 0x30
 80187f0:	46bd      	mov	sp, r7
 80187f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80187f6:	bf00      	nop
 80187f8:	0801a414 	.word	0x0801a414
 80187fc:	00f42400 	.word	0x00f42400

08018800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8018800:	b480      	push	{r7}
 8018802:	b083      	sub	sp, #12
 8018804:	af00      	add	r7, sp, #0
 8018806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801880c:	f003 0301 	and.w	r3, r3, #1
 8018810:	2b00      	cmp	r3, #0
 8018812:	d00a      	beq.n	801882a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	681b      	ldr	r3, [r3, #0]
 8018818:	685b      	ldr	r3, [r3, #4]
 801881a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	430a      	orrs	r2, r1
 8018828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801882e:	f003 0302 	and.w	r3, r3, #2
 8018832:	2b00      	cmp	r3, #0
 8018834:	d00a      	beq.n	801884c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	685b      	ldr	r3, [r3, #4]
 801883c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	430a      	orrs	r2, r1
 801884a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018850:	f003 0304 	and.w	r3, r3, #4
 8018854:	2b00      	cmp	r3, #0
 8018856:	d00a      	beq.n	801886e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	685b      	ldr	r3, [r3, #4]
 801885e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	430a      	orrs	r2, r1
 801886c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018872:	f003 0308 	and.w	r3, r3, #8
 8018876:	2b00      	cmp	r3, #0
 8018878:	d00a      	beq.n	8018890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	685b      	ldr	r3, [r3, #4]
 8018880:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	430a      	orrs	r2, r1
 801888e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8018890:	687b      	ldr	r3, [r7, #4]
 8018892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018894:	f003 0310 	and.w	r3, r3, #16
 8018898:	2b00      	cmp	r3, #0
 801889a:	d00a      	beq.n	80188b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	689b      	ldr	r3, [r3, #8]
 80188a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	430a      	orrs	r2, r1
 80188b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188b6:	f003 0320 	and.w	r3, r3, #32
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d00a      	beq.n	80188d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	689b      	ldr	r3, [r3, #8]
 80188c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	430a      	orrs	r2, r1
 80188d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d01a      	beq.n	8018916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	685b      	ldr	r3, [r3, #4]
 80188e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	430a      	orrs	r2, r1
 80188f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80188fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80188fe:	d10a      	bne.n	8018916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	685b      	ldr	r3, [r3, #4]
 8018906:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	681b      	ldr	r3, [r3, #0]
 8018912:	430a      	orrs	r2, r1
 8018914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801891a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801891e:	2b00      	cmp	r3, #0
 8018920:	d00a      	beq.n	8018938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	685b      	ldr	r3, [r3, #4]
 8018928:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	430a      	orrs	r2, r1
 8018936:	605a      	str	r2, [r3, #4]
  }
}
 8018938:	bf00      	nop
 801893a:	370c      	adds	r7, #12
 801893c:	46bd      	mov	sp, r7
 801893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018942:	4770      	bx	lr

08018944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b098      	sub	sp, #96	; 0x60
 8018948:	af02      	add	r7, sp, #8
 801894a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	2200      	movs	r2, #0
 8018950:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8018954:	f7fc fc30 	bl	80151b8 <HAL_GetTick>
 8018958:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	f003 0308 	and.w	r3, r3, #8
 8018964:	2b08      	cmp	r3, #8
 8018966:	d12f      	bne.n	80189c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8018968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801896c:	9300      	str	r3, [sp, #0]
 801896e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018970:	2200      	movs	r2, #0
 8018972:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018976:	6878      	ldr	r0, [r7, #4]
 8018978:	f000 f88e 	bl	8018a98 <UART_WaitOnFlagUntilTimeout>
 801897c:	4603      	mov	r3, r0
 801897e:	2b00      	cmp	r3, #0
 8018980:	d022      	beq.n	80189c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801898a:	e853 3f00 	ldrex	r3, [r3]
 801898e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8018990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018996:	653b      	str	r3, [r7, #80]	; 0x50
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	461a      	mov	r2, r3
 801899e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80189a0:	647b      	str	r3, [r7, #68]	; 0x44
 80189a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80189a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80189a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80189a8:	e841 2300 	strex	r3, r2, [r1]
 80189ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80189ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d1e6      	bne.n	8018982 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	2220      	movs	r2, #32
 80189b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	2200      	movs	r2, #0
 80189c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80189c4:	2303      	movs	r3, #3
 80189c6:	e063      	b.n	8018a90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	f003 0304 	and.w	r3, r3, #4
 80189d2:	2b04      	cmp	r3, #4
 80189d4:	d149      	bne.n	8018a6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80189d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80189da:	9300      	str	r3, [sp, #0]
 80189dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80189de:	2200      	movs	r2, #0
 80189e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80189e4:	6878      	ldr	r0, [r7, #4]
 80189e6:	f000 f857 	bl	8018a98 <UART_WaitOnFlagUntilTimeout>
 80189ea:	4603      	mov	r3, r0
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d03c      	beq.n	8018a6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80189f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189f8:	e853 3f00 	ldrex	r3, [r3]
 80189fc:	623b      	str	r3, [r7, #32]
   return(result);
 80189fe:	6a3b      	ldr	r3, [r7, #32]
 8018a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018a04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	461a      	mov	r2, r3
 8018a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8018a10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018a16:	e841 2300 	strex	r3, r2, [r1]
 8018a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8018a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d1e6      	bne.n	80189f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	3308      	adds	r3, #8
 8018a28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018a2a:	693b      	ldr	r3, [r7, #16]
 8018a2c:	e853 3f00 	ldrex	r3, [r3]
 8018a30:	60fb      	str	r3, [r7, #12]
   return(result);
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	f023 0301 	bic.w	r3, r3, #1
 8018a38:	64bb      	str	r3, [r7, #72]	; 0x48
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	3308      	adds	r3, #8
 8018a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018a42:	61fa      	str	r2, [r7, #28]
 8018a44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018a46:	69b9      	ldr	r1, [r7, #24]
 8018a48:	69fa      	ldr	r2, [r7, #28]
 8018a4a:	e841 2300 	strex	r3, r2, [r1]
 8018a4e:	617b      	str	r3, [r7, #20]
   return(result);
 8018a50:	697b      	ldr	r3, [r7, #20]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d1e5      	bne.n	8018a22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	2220      	movs	r2, #32
 8018a5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	2200      	movs	r2, #0
 8018a62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8018a66:	2303      	movs	r3, #3
 8018a68:	e012      	b.n	8018a90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	2220      	movs	r2, #32
 8018a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	2220      	movs	r2, #32
 8018a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	2200      	movs	r2, #0
 8018a84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	2200      	movs	r2, #0
 8018a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018a8e:	2300      	movs	r3, #0
}
 8018a90:	4618      	mov	r0, r3
 8018a92:	3758      	adds	r7, #88	; 0x58
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}

08018a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b084      	sub	sp, #16
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	60f8      	str	r0, [r7, #12]
 8018aa0:	60b9      	str	r1, [r7, #8]
 8018aa2:	603b      	str	r3, [r7, #0]
 8018aa4:	4613      	mov	r3, r2
 8018aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018aa8:	e049      	b.n	8018b3e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018aaa:	69bb      	ldr	r3, [r7, #24]
 8018aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ab0:	d045      	beq.n	8018b3e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018ab2:	f7fc fb81 	bl	80151b8 <HAL_GetTick>
 8018ab6:	4602      	mov	r2, r0
 8018ab8:	683b      	ldr	r3, [r7, #0]
 8018aba:	1ad3      	subs	r3, r2, r3
 8018abc:	69ba      	ldr	r2, [r7, #24]
 8018abe:	429a      	cmp	r2, r3
 8018ac0:	d302      	bcc.n	8018ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8018ac2:	69bb      	ldr	r3, [r7, #24]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d101      	bne.n	8018acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8018ac8:	2303      	movs	r3, #3
 8018aca:	e048      	b.n	8018b5e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	f003 0304 	and.w	r3, r3, #4
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d031      	beq.n	8018b3e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	69db      	ldr	r3, [r3, #28]
 8018ae0:	f003 0308 	and.w	r3, r3, #8
 8018ae4:	2b08      	cmp	r3, #8
 8018ae6:	d110      	bne.n	8018b0a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	2208      	movs	r2, #8
 8018aee:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8018af0:	68f8      	ldr	r0, [r7, #12]
 8018af2:	f000 f838 	bl	8018b66 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	2208      	movs	r2, #8
 8018afa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8018afe:	68fb      	ldr	r3, [r7, #12]
 8018b00:	2200      	movs	r2, #0
 8018b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8018b06:	2301      	movs	r3, #1
 8018b08:	e029      	b.n	8018b5e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	69db      	ldr	r3, [r3, #28]
 8018b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018b18:	d111      	bne.n	8018b3e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018b22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8018b24:	68f8      	ldr	r0, [r7, #12]
 8018b26:	f000 f81e 	bl	8018b66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	2220      	movs	r2, #32
 8018b2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	2200      	movs	r2, #0
 8018b36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8018b3a:	2303      	movs	r3, #3
 8018b3c:	e00f      	b.n	8018b5e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	69da      	ldr	r2, [r3, #28]
 8018b44:	68bb      	ldr	r3, [r7, #8]
 8018b46:	4013      	ands	r3, r2
 8018b48:	68ba      	ldr	r2, [r7, #8]
 8018b4a:	429a      	cmp	r2, r3
 8018b4c:	bf0c      	ite	eq
 8018b4e:	2301      	moveq	r3, #1
 8018b50:	2300      	movne	r3, #0
 8018b52:	b2db      	uxtb	r3, r3
 8018b54:	461a      	mov	r2, r3
 8018b56:	79fb      	ldrb	r3, [r7, #7]
 8018b58:	429a      	cmp	r2, r3
 8018b5a:	d0a6      	beq.n	8018aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8018b5c:	2300      	movs	r3, #0
}
 8018b5e:	4618      	mov	r0, r3
 8018b60:	3710      	adds	r7, #16
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}

08018b66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018b66:	b480      	push	{r7}
 8018b68:	b095      	sub	sp, #84	; 0x54
 8018b6a:	af00      	add	r7, sp, #0
 8018b6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b76:	e853 3f00 	ldrex	r3, [r3]
 8018b7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	461a      	mov	r2, r3
 8018b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b8c:	643b      	str	r3, [r7, #64]	; 0x40
 8018b8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018b90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018b94:	e841 2300 	strex	r3, r2, [r1]
 8018b98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8018b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d1e6      	bne.n	8018b6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	3308      	adds	r3, #8
 8018ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018ba8:	6a3b      	ldr	r3, [r7, #32]
 8018baa:	e853 3f00 	ldrex	r3, [r3]
 8018bae:	61fb      	str	r3, [r7, #28]
   return(result);
 8018bb0:	69fb      	ldr	r3, [r7, #28]
 8018bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018bb6:	f023 0301 	bic.w	r3, r3, #1
 8018bba:	64bb      	str	r3, [r7, #72]	; 0x48
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	3308      	adds	r3, #8
 8018bc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018bc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8018bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018bc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018bcc:	e841 2300 	strex	r3, r2, [r1]
 8018bd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d1e3      	bne.n	8018ba0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018bdc:	2b01      	cmp	r3, #1
 8018bde:	d118      	bne.n	8018c12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	e853 3f00 	ldrex	r3, [r3]
 8018bec:	60bb      	str	r3, [r7, #8]
   return(result);
 8018bee:	68bb      	ldr	r3, [r7, #8]
 8018bf0:	f023 0310 	bic.w	r3, r3, #16
 8018bf4:	647b      	str	r3, [r7, #68]	; 0x44
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	461a      	mov	r2, r3
 8018bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018bfe:	61bb      	str	r3, [r7, #24]
 8018c00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018c02:	6979      	ldr	r1, [r7, #20]
 8018c04:	69ba      	ldr	r2, [r7, #24]
 8018c06:	e841 2300 	strex	r3, r2, [r1]
 8018c0a:	613b      	str	r3, [r7, #16]
   return(result);
 8018c0c:	693b      	ldr	r3, [r7, #16]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d1e6      	bne.n	8018be0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	2220      	movs	r2, #32
 8018c16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	2200      	movs	r2, #0
 8018c1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	2200      	movs	r2, #0
 8018c24:	675a      	str	r2, [r3, #116]	; 0x74
}
 8018c26:	bf00      	nop
 8018c28:	3754      	adds	r7, #84	; 0x54
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c30:	4770      	bx	lr

08018c32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8018c32:	b480      	push	{r7}
 8018c34:	b085      	sub	sp, #20
 8018c36:	af00      	add	r7, sp, #0
 8018c38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8018c40:	2b01      	cmp	r3, #1
 8018c42:	d101      	bne.n	8018c48 <HAL_UARTEx_DisableFifoMode+0x16>
 8018c44:	2302      	movs	r3, #2
 8018c46:	e027      	b.n	8018c98 <HAL_UARTEx_DisableFifoMode+0x66>
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	2201      	movs	r2, #1
 8018c4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	2224      	movs	r2, #36	; 0x24
 8018c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	681b      	ldr	r3, [r3, #0]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	681a      	ldr	r2, [r3, #0]
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	681b      	ldr	r3, [r3, #0]
 8018c6a:	f022 0201 	bic.w	r2, r2, #1
 8018c6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8018c76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	68fa      	ldr	r2, [r7, #12]
 8018c84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	2220      	movs	r2, #32
 8018c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	2200      	movs	r2, #0
 8018c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018c96:	2300      	movs	r3, #0
}
 8018c98:	4618      	mov	r0, r3
 8018c9a:	3714      	adds	r7, #20
 8018c9c:	46bd      	mov	sp, r7
 8018c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca2:	4770      	bx	lr

08018ca4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b084      	sub	sp, #16
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
 8018cac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8018cb4:	2b01      	cmp	r3, #1
 8018cb6:	d101      	bne.n	8018cbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8018cb8:	2302      	movs	r3, #2
 8018cba:	e02d      	b.n	8018d18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	2201      	movs	r2, #1
 8018cc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	2224      	movs	r2, #36	; 0x24
 8018cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	681a      	ldr	r2, [r3, #0]
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	f022 0201 	bic.w	r2, r2, #1
 8018ce2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	681b      	ldr	r3, [r3, #0]
 8018ce8:	689b      	ldr	r3, [r3, #8]
 8018cea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	683a      	ldr	r2, [r7, #0]
 8018cf4:	430a      	orrs	r2, r1
 8018cf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018cf8:	6878      	ldr	r0, [r7, #4]
 8018cfa:	f000 f84f 	bl	8018d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	68fa      	ldr	r2, [r7, #12]
 8018d04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	2220      	movs	r2, #32
 8018d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	2200      	movs	r2, #0
 8018d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018d16:	2300      	movs	r3, #0
}
 8018d18:	4618      	mov	r0, r3
 8018d1a:	3710      	adds	r7, #16
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}

08018d20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b084      	sub	sp, #16
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8018d30:	2b01      	cmp	r3, #1
 8018d32:	d101      	bne.n	8018d38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8018d34:	2302      	movs	r3, #2
 8018d36:	e02d      	b.n	8018d94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	2201      	movs	r2, #1
 8018d3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	2224      	movs	r2, #36	; 0x24
 8018d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	681a      	ldr	r2, [r3, #0]
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	f022 0201 	bic.w	r2, r2, #1
 8018d5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	689b      	ldr	r3, [r3, #8]
 8018d66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	683a      	ldr	r2, [r7, #0]
 8018d70:	430a      	orrs	r2, r1
 8018d72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018d74:	6878      	ldr	r0, [r7, #4]
 8018d76:	f000 f811 	bl	8018d9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	68fa      	ldr	r2, [r7, #12]
 8018d80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	2220      	movs	r2, #32
 8018d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	2200      	movs	r2, #0
 8018d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018d92:	2300      	movs	r3, #0
}
 8018d94:	4618      	mov	r0, r3
 8018d96:	3710      	adds	r7, #16
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	bd80      	pop	{r7, pc}

08018d9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8018d9c:	b480      	push	{r7}
 8018d9e:	b085      	sub	sp, #20
 8018da0:	af00      	add	r7, sp, #0
 8018da2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d108      	bne.n	8018dbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	2201      	movs	r2, #1
 8018db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	2201      	movs	r2, #1
 8018db8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8018dbc:	e031      	b.n	8018e22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8018dbe:	2308      	movs	r3, #8
 8018dc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8018dc2:	2308      	movs	r3, #8
 8018dc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	689b      	ldr	r3, [r3, #8]
 8018dcc:	0e5b      	lsrs	r3, r3, #25
 8018dce:	b2db      	uxtb	r3, r3
 8018dd0:	f003 0307 	and.w	r3, r3, #7
 8018dd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	689b      	ldr	r3, [r3, #8]
 8018ddc:	0f5b      	lsrs	r3, r3, #29
 8018dde:	b2db      	uxtb	r3, r3
 8018de0:	f003 0307 	and.w	r3, r3, #7
 8018de4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018de6:	7bbb      	ldrb	r3, [r7, #14]
 8018de8:	7b3a      	ldrb	r2, [r7, #12]
 8018dea:	4911      	ldr	r1, [pc, #68]	; (8018e30 <UARTEx_SetNbDataToProcess+0x94>)
 8018dec:	5c8a      	ldrb	r2, [r1, r2]
 8018dee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8018df2:	7b3a      	ldrb	r2, [r7, #12]
 8018df4:	490f      	ldr	r1, [pc, #60]	; (8018e34 <UARTEx_SetNbDataToProcess+0x98>)
 8018df6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8018df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8018dfc:	b29a      	uxth	r2, r3
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018e04:	7bfb      	ldrb	r3, [r7, #15]
 8018e06:	7b7a      	ldrb	r2, [r7, #13]
 8018e08:	4909      	ldr	r1, [pc, #36]	; (8018e30 <UARTEx_SetNbDataToProcess+0x94>)
 8018e0a:	5c8a      	ldrb	r2, [r1, r2]
 8018e0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018e10:	7b7a      	ldrb	r2, [r7, #13]
 8018e12:	4908      	ldr	r1, [pc, #32]	; (8018e34 <UARTEx_SetNbDataToProcess+0x98>)
 8018e14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018e16:	fb93 f3f2 	sdiv	r3, r3, r2
 8018e1a:	b29a      	uxth	r2, r3
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8018e22:	bf00      	nop
 8018e24:	3714      	adds	r7, #20
 8018e26:	46bd      	mov	sp, r7
 8018e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2c:	4770      	bx	lr
 8018e2e:	bf00      	nop
 8018e30:	0801a42c 	.word	0x0801a42c
 8018e34:	0801a434 	.word	0x0801a434

08018e38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8018e38:	b480      	push	{r7}
 8018e3a:	b085      	sub	sp, #20
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8018e40:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8018e44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8018e4c:	b29a      	uxth	r2, r3
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	b29b      	uxth	r3, r3
 8018e52:	43db      	mvns	r3, r3
 8018e54:	b29b      	uxth	r3, r3
 8018e56:	4013      	ands	r3, r2
 8018e58:	b29a      	uxth	r2, r3
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8018e60:	2300      	movs	r3, #0
}
 8018e62:	4618      	mov	r0, r3
 8018e64:	3714      	adds	r7, #20
 8018e66:	46bd      	mov	sp, r7
 8018e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e6c:	4770      	bx	lr

08018e6e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8018e6e:	b084      	sub	sp, #16
 8018e70:	b480      	push	{r7}
 8018e72:	b083      	sub	sp, #12
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	6078      	str	r0, [r7, #4]
 8018e78:	f107 0014 	add.w	r0, r7, #20
 8018e7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	2201      	movs	r2, #1
 8018e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	2200      	movs	r2, #0
 8018e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	2200      	movs	r2, #0
 8018e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8018ea0:	2300      	movs	r3, #0
}
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	370c      	adds	r7, #12
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eac:	b004      	add	sp, #16
 8018eae:	4770      	bx	lr

08018eb0 <MX_TOF_Init>:
static void MX_53L1A2_MultiSensorRanging_Init(void);
static void MX_53L1A2_MultiSensorRanging_Process(void);
static void print_result(RANGING_SENSOR_Result_t *Result);

void MX_TOF_Init(void)
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_53L1A2_MultiSensorRanging_Init();
 8018eb4:	f000 f808 	bl	8018ec8 <MX_53L1A2_MultiSensorRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8018eb8:	bf00      	nop
 8018eba:	bd80      	pop	{r7, pc}

08018ebc <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_53L1A2_MultiSensorRanging_Process();
 8018ec0:	f000 f866 	bl	8018f90 <MX_53L1A2_MultiSensorRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 8018ec4:	bf00      	nop
 8018ec6:	bd80      	pop	{r7, pc}

08018ec8 <MX_53L1A2_MultiSensorRanging_Init>:

static void MX_53L1A2_MultiSensorRanging_Init(void)
{
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b082      	sub	sp, #8
 8018ecc:	af00      	add	r7, sp, #0
  uint8_t device;
  uint16_t i2c_addr;
  uint32_t id;

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8018ece:	2000      	movs	r0, #0
 8018ed0:	f7fc f836 	bl	8014f40 <BSP_COM_Init>

  printf("53L1A2 Multi Sensor Ranging demo application\n");
 8018ed4:	482a      	ldr	r0, [pc, #168]	; (8018f80 <MX_53L1A2_MultiSensorRanging_Init+0xb8>)
 8018ed6:	f000 f9d1 	bl	801927c <puts>

  /* put all the devices in shutdown mode */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8018eda:	2300      	movs	r3, #0
 8018edc:	71fb      	strb	r3, [r7, #7]
 8018ede:	e007      	b.n	8018ef0 <MX_53L1A2_MultiSensorRanging_Init+0x28>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_OFF);
 8018ee0:	79fb      	ldrb	r3, [r7, #7]
 8018ee2:	2101      	movs	r1, #1
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f7e8 fb43 	bl	8001570 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8018eea:	79fb      	ldrb	r3, [r7, #7]
 8018eec:	3301      	adds	r3, #1
 8018eee:	71fb      	strb	r3, [r7, #7]
 8018ef0:	79fb      	ldrb	r3, [r7, #7]
 8018ef2:	2b02      	cmp	r3, #2
 8018ef4:	d9f4      	bls.n	8018ee0 <MX_53L1A2_MultiSensorRanging_Init+0x18>

  /* power on the devices one at a time, initialize them and change their address.
   * once the address is updated, the communication with the devices is checked
   * reading its ID.
   */
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	71fb      	strb	r3, [r7, #7]
 8018efa:	e039      	b.n	8018f70 <MX_53L1A2_MultiSensorRanging_Init+0xa8>
  {
    VL53L1A2_RANGING_SENSOR_SetPowerMode(device, RANGING_SENSOR_POWERMODE_ON);
 8018efc:	79fb      	ldrb	r3, [r7, #7]
 8018efe:	2100      	movs	r1, #0
 8018f00:	4618      	mov	r0, r3
 8018f02:	f7e8 fb35 	bl	8001570 <VL53L1A2_RANGING_SENSOR_SetPowerMode>
    status = VL53L1A2_RANGING_SENSOR_Init(device);
 8018f06:	79fb      	ldrb	r3, [r7, #7]
 8018f08:	4618      	mov	r0, r3
 8018f0a:	f7e8 fa43 	bl	8001394 <VL53L1A2_RANGING_SENSOR_Init>
 8018f0e:	4603      	mov	r3, r0
 8018f10:	4a1c      	ldr	r2, [pc, #112]	; (8018f84 <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 8018f12:	6013      	str	r3, [r2, #0]

    /* 0: not detected, 1: detected */
    ToF_Present[device] = (status != BSP_ERROR_NONE) ? 0 : 1;
 8018f14:	4b1b      	ldr	r3, [pc, #108]	; (8018f84 <MX_53L1A2_MultiSensorRanging_Init+0xbc>)
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	bf0c      	ite	eq
 8018f1c:	2301      	moveq	r3, #1
 8018f1e:	2300      	movne	r3, #0
 8018f20:	b2da      	uxtb	r2, r3
 8018f22:	79fb      	ldrb	r3, [r7, #7]
 8018f24:	4611      	mov	r1, r2
 8018f26:	4a18      	ldr	r2, [pc, #96]	; (8018f88 <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 8018f28:	54d1      	strb	r1, [r2, r3]

    /* skip this device if init not successful */
    if (ToF_Present[device] == 0) continue;
 8018f2a:	79fb      	ldrb	r3, [r7, #7]
 8018f2c:	4a16      	ldr	r2, [pc, #88]	; (8018f88 <MX_53L1A2_MultiSensorRanging_Init+0xc0>)
 8018f2e:	5cd3      	ldrb	r3, [r2, r3]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d019      	beq.n	8018f68 <MX_53L1A2_MultiSensorRanging_Init+0xa0>

    /* left: 0x54, center: 0x56, right: 0x58 */
    i2c_addr = (RANGING_SENSOR_VL53L1CB_ADDRESS + (device + 1) * 2);
 8018f34:	79fb      	ldrb	r3, [r7, #7]
 8018f36:	3301      	adds	r3, #1
 8018f38:	b29b      	uxth	r3, r3
 8018f3a:	3329      	adds	r3, #41	; 0x29
 8018f3c:	b29b      	uxth	r3, r3
 8018f3e:	005b      	lsls	r3, r3, #1
 8018f40:	80bb      	strh	r3, [r7, #4]
    VL53L1A2_RANGING_SENSOR_SetAddress(device, i2c_addr);
 8018f42:	79fb      	ldrb	r3, [r7, #7]
 8018f44:	88ba      	ldrh	r2, [r7, #4]
 8018f46:	4611      	mov	r1, r2
 8018f48:	4618      	mov	r0, r3
 8018f4a:	f7e8 fae9 	bl	8001520 <VL53L1A2_RANGING_SENSOR_SetAddress>

    /* check the communication with the device reading the ID */
    VL53L1A2_RANGING_SENSOR_ReadID(device, &id);
 8018f4e:	79fb      	ldrb	r3, [r7, #7]
 8018f50:	463a      	mov	r2, r7
 8018f52:	4611      	mov	r1, r2
 8018f54:	4618      	mov	r0, r3
 8018f56:	f7e8 fa43 	bl	80013e0 <VL53L1A2_RANGING_SENSOR_ReadID>
    printf("ToF sensor %d - ID: %04lX\n", device, (unsigned long)id);
 8018f5a:	79fb      	ldrb	r3, [r7, #7]
 8018f5c:	683a      	ldr	r2, [r7, #0]
 8018f5e:	4619      	mov	r1, r3
 8018f60:	480a      	ldr	r0, [pc, #40]	; (8018f8c <MX_53L1A2_MultiSensorRanging_Init+0xc4>)
 8018f62:	f000 f8ef 	bl	8019144 <iprintf>
 8018f66:	e000      	b.n	8018f6a <MX_53L1A2_MultiSensorRanging_Init+0xa2>
    if (ToF_Present[device] == 0) continue;
 8018f68:	bf00      	nop
  for (device = 0; device < RANGING_SENSOR_INSTANCES_NBR; device++)
 8018f6a:	79fb      	ldrb	r3, [r7, #7]
 8018f6c:	3301      	adds	r3, #1
 8018f6e:	71fb      	strb	r3, [r7, #7]
 8018f70:	79fb      	ldrb	r3, [r7, #7]
 8018f72:	2b02      	cmp	r3, #2
 8018f74:	d9c2      	bls.n	8018efc <MX_53L1A2_MultiSensorRanging_Init+0x34>
  }
}
 8018f76:	bf00      	nop
 8018f78:	bf00      	nop
 8018f7a:	3708      	adds	r7, #8
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	bd80      	pop	{r7, pc}
 8018f80:	0801a2d4 	.word	0x0801a2d4
 8018f84:	20008650 	.word	0x20008650
 8018f88:	20008654 	.word	0x20008654
 8018f8c:	0801a304 	.word	0x0801a304

08018f90 <MX_53L1A2_MultiSensorRanging_Process>:

static void MX_53L1A2_MultiSensorRanging_Process(void)
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b082      	sub	sp, #8
 8018f94:	af00      	add	r7, sp, #0
  uint8_t i;

  static RANGING_SENSOR_Result_t Result;
  static RANGING_SENSOR_ProfileConfig_t Profile;

  Profile.RangingProfile = RS_MULTI_TARGET_MEDIUM_RANGE;
 8018f96:	4b2d      	ldr	r3, [pc, #180]	; (801904c <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8018f98:	2202      	movs	r2, #2
 8018f9a:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 16 ms < TimingBudget < 500 ms */
 8018f9c:	4b2b      	ldr	r3, [pc, #172]	; (801904c <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8018f9e:	221e      	movs	r2, #30
 8018fa0:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 0; /* Induces intermeasurement period, set to ZERO for normal ranging */
 8018fa2:	4b2a      	ldr	r3, [pc, #168]	; (801904c <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8018fa8:	4b28      	ldr	r3, [pc, #160]	; (801904c <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8018faa:	2200      	movs	r2, #0
 8018fac:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8018fae:	4b27      	ldr	r3, [pc, #156]	; (801904c <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8018fb0:	2200      	movs	r2, #0
 8018fb2:	611a      	str	r2, [r3, #16]

  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	71fb      	strb	r3, [r7, #7]
 8018fb8:	e01d      	b.n	8018ff6 <MX_53L1A2_MultiSensorRanging_Process+0x66>
  {
    /* skip this device if not detected */
    if (ToF_Present[i] != 1) continue;
 8018fba:	79fb      	ldrb	r3, [r7, #7]
 8018fbc:	4a24      	ldr	r2, [pc, #144]	; (8019050 <MX_53L1A2_MultiSensorRanging_Process+0xc0>)
 8018fbe:	5cd3      	ldrb	r3, [r2, r3]
 8018fc0:	2b01      	cmp	r3, #1
 8018fc2:	d114      	bne.n	8018fee <MX_53L1A2_MultiSensorRanging_Process+0x5e>

    VL53L1A2_RANGING_SENSOR_ConfigProfile(i, &Profile);
 8018fc4:	79fb      	ldrb	r3, [r7, #7]
 8018fc6:	4921      	ldr	r1, [pc, #132]	; (801904c <MX_53L1A2_MultiSensorRanging_Process+0xbc>)
 8018fc8:	4618      	mov	r0, r3
 8018fca:	f7e8 fa31 	bl	8001430 <VL53L1A2_RANGING_SENSOR_ConfigProfile>
    status = VL53L1A2_RANGING_SENSOR_Start(i, RS_MODE_BLOCKING_CONTINUOUS);
 8018fce:	79fb      	ldrb	r3, [r7, #7]
 8018fd0:	2101      	movs	r1, #1
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f7e8 fa7c 	bl	80014d0 <VL53L1A2_RANGING_SENSOR_Start>
 8018fd8:	4603      	mov	r3, r0
 8018fda:	4a1e      	ldr	r2, [pc, #120]	; (8019054 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 8018fdc:	6013      	str	r3, [r2, #0]

    if (status != BSP_ERROR_NONE)
 8018fde:	4b1d      	ldr	r3, [pc, #116]	; (8019054 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 8018fe0:	681b      	ldr	r3, [r3, #0]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d004      	beq.n	8018ff0 <MX_53L1A2_MultiSensorRanging_Process+0x60>
    {
      printf("VL53L1A2_RANGING_SENSOR_Start failed\n");
 8018fe6:	481c      	ldr	r0, [pc, #112]	; (8019058 <MX_53L1A2_MultiSensorRanging_Process+0xc8>)
 8018fe8:	f000 f948 	bl	801927c <puts>
      while(1);
 8018fec:	e7fe      	b.n	8018fec <MX_53L1A2_MultiSensorRanging_Process+0x5c>
    if (ToF_Present[i] != 1) continue;
 8018fee:	bf00      	nop
  for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8018ff0:	79fb      	ldrb	r3, [r7, #7]
 8018ff2:	3301      	adds	r3, #1
 8018ff4:	71fb      	strb	r3, [r7, #7]
 8018ff6:	79fb      	ldrb	r3, [r7, #7]
 8018ff8:	2b02      	cmp	r3, #2
 8018ffa:	d9de      	bls.n	8018fba <MX_53L1A2_MultiSensorRanging_Process+0x2a>
  }

  while (1)
  {
    /* polling mode */
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	71fb      	strb	r3, [r7, #7]
 8019000:	e01c      	b.n	801903c <MX_53L1A2_MultiSensorRanging_Process+0xac>
    {
      status = VL53L1A2_RANGING_SENSOR_GetDistance(i, &Result);
 8019002:	79fb      	ldrb	r3, [r7, #7]
 8019004:	4915      	ldr	r1, [pc, #84]	; (801905c <MX_53L1A2_MultiSensorRanging_Process+0xcc>)
 8019006:	4618      	mov	r0, r3
 8019008:	f7e8 fa3a 	bl	8001480 <VL53L1A2_RANGING_SENSOR_GetDistance>
 801900c:	4603      	mov	r3, r0
 801900e:	4a11      	ldr	r2, [pc, #68]	; (8019054 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 8019010:	6013      	str	r3, [r2, #0]

      if (status == BSP_ERROR_NONE)
 8019012:	4b10      	ldr	r3, [pc, #64]	; (8019054 <MX_53L1A2_MultiSensorRanging_Process+0xc4>)
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d10d      	bne.n	8019036 <MX_53L1A2_MultiSensorRanging_Process+0xa6>
      {
        printf("%s\t - ", TofDevStr[i]);
 801901a:	79fb      	ldrb	r3, [r7, #7]
 801901c:	4a10      	ldr	r2, [pc, #64]	; (8019060 <MX_53L1A2_MultiSensorRanging_Process+0xd0>)
 801901e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019022:	4619      	mov	r1, r3
 8019024:	480f      	ldr	r0, [pc, #60]	; (8019064 <MX_53L1A2_MultiSensorRanging_Process+0xd4>)
 8019026:	f000 f88d 	bl	8019144 <iprintf>
        print_result(&Result);
 801902a:	480c      	ldr	r0, [pc, #48]	; (801905c <MX_53L1A2_MultiSensorRanging_Process+0xcc>)
 801902c:	f000 f81c 	bl	8019068 <print_result>
        HAL_Delay(POLLING_PERIOD);
 8019030:	20fa      	movs	r0, #250	; 0xfa
 8019032:	f7fc f8d9 	bl	80151e8 <HAL_Delay>
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8019036:	79fb      	ldrb	r3, [r7, #7]
 8019038:	3301      	adds	r3, #1
 801903a:	71fb      	strb	r3, [r7, #7]
 801903c:	79fb      	ldrb	r3, [r7, #7]
 801903e:	2b02      	cmp	r3, #2
 8019040:	d9df      	bls.n	8019002 <MX_53L1A2_MultiSensorRanging_Process+0x72>
      }
    }
    printf ("\n");
 8019042:	200a      	movs	r0, #10
 8019044:	f000 f896 	bl	8019174 <putchar>
    for (i = 0; i < RANGING_SENSOR_INSTANCES_NBR; i++)
 8019048:	e7d8      	b.n	8018ffc <MX_53L1A2_MultiSensorRanging_Process+0x6c>
 801904a:	bf00      	nop
 801904c:	20008658 	.word	0x20008658
 8019050:	20008654 	.word	0x20008654
 8019054:	20008650 	.word	0x20008650
 8019058:	0801a320 	.word	0x0801a320
 801905c:	2000866c 	.word	0x2000866c
 8019060:	2000007c 	.word	0x2000007c
 8019064:	0801a348 	.word	0x0801a348

08019068 <print_result>:
  }
}

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b084      	sub	sp, #16
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 8019070:	2300      	movs	r3, #0
 8019072:	73fb      	strb	r3, [r7, #15]
 8019074:	e01a      	b.n	80190ac <print_result+0x44>
  {
    printf("Status = %2ld, Distance = %5ld mm",
      (long)Result->ZoneResult[i].Status[0],
 8019076:	7bfa      	ldrb	r2, [r7, #15]
 8019078:	6879      	ldr	r1, [r7, #4]
 801907a:	4613      	mov	r3, r2
 801907c:	011b      	lsls	r3, r3, #4
 801907e:	4413      	add	r3, r2
 8019080:	009b      	lsls	r3, r3, #2
 8019082:	440b      	add	r3, r1
 8019084:	3318      	adds	r3, #24
 8019086:	681b      	ldr	r3, [r3, #0]
    printf("Status = %2ld, Distance = %5ld mm",
 8019088:	4618      	mov	r0, r3
      (long)Result->ZoneResult[i].Distance[0]);
 801908a:	7bfa      	ldrb	r2, [r7, #15]
 801908c:	6879      	ldr	r1, [r7, #4]
 801908e:	4613      	mov	r3, r2
 8019090:	011b      	lsls	r3, r3, #4
 8019092:	4413      	add	r3, r2
 8019094:	009b      	lsls	r3, r3, #2
 8019096:	440b      	add	r3, r1
 8019098:	3308      	adds	r3, #8
 801909a:	681b      	ldr	r3, [r3, #0]
    printf("Status = %2ld, Distance = %5ld mm",
 801909c:	461a      	mov	r2, r3
 801909e:	4601      	mov	r1, r0
 80190a0:	4807      	ldr	r0, [pc, #28]	; (80190c0 <print_result+0x58>)
 80190a2:	f000 f84f 	bl	8019144 <iprintf>
  for (i = 0; i < RANGING_SENSOR_MAX_NB_ZONES; i++)
 80190a6:	7bfb      	ldrb	r3, [r7, #15]
 80190a8:	3301      	adds	r3, #1
 80190aa:	73fb      	strb	r3, [r7, #15]
 80190ac:	7bfb      	ldrb	r3, [r7, #15]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d0e1      	beq.n	8019076 <print_result+0xe>
  }
  printf ("\n");
 80190b2:	200a      	movs	r0, #10
 80190b4:	f000 f85e 	bl	8019174 <putchar>
}
 80190b8:	bf00      	nop
 80190ba:	3710      	adds	r7, #16
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	0801a350 	.word	0x0801a350

080190c4 <__errno>:
 80190c4:	4b01      	ldr	r3, [pc, #4]	; (80190cc <__errno+0x8>)
 80190c6:	6818      	ldr	r0, [r3, #0]
 80190c8:	4770      	bx	lr
 80190ca:	bf00      	nop
 80190cc:	20000088 	.word	0x20000088

080190d0 <__libc_init_array>:
 80190d0:	b570      	push	{r4, r5, r6, lr}
 80190d2:	4d0d      	ldr	r5, [pc, #52]	; (8019108 <__libc_init_array+0x38>)
 80190d4:	4c0d      	ldr	r4, [pc, #52]	; (801910c <__libc_init_array+0x3c>)
 80190d6:	1b64      	subs	r4, r4, r5
 80190d8:	10a4      	asrs	r4, r4, #2
 80190da:	2600      	movs	r6, #0
 80190dc:	42a6      	cmp	r6, r4
 80190de:	d109      	bne.n	80190f4 <__libc_init_array+0x24>
 80190e0:	4d0b      	ldr	r5, [pc, #44]	; (8019110 <__libc_init_array+0x40>)
 80190e2:	4c0c      	ldr	r4, [pc, #48]	; (8019114 <__libc_init_array+0x44>)
 80190e4:	f001 f8a4 	bl	801a230 <_init>
 80190e8:	1b64      	subs	r4, r4, r5
 80190ea:	10a4      	asrs	r4, r4, #2
 80190ec:	2600      	movs	r6, #0
 80190ee:	42a6      	cmp	r6, r4
 80190f0:	d105      	bne.n	80190fe <__libc_init_array+0x2e>
 80190f2:	bd70      	pop	{r4, r5, r6, pc}
 80190f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80190f8:	4798      	blx	r3
 80190fa:	3601      	adds	r6, #1
 80190fc:	e7ee      	b.n	80190dc <__libc_init_array+0xc>
 80190fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8019102:	4798      	blx	r3
 8019104:	3601      	adds	r6, #1
 8019106:	e7f2      	b.n	80190ee <__libc_init_array+0x1e>
 8019108:	0801a4dc 	.word	0x0801a4dc
 801910c:	0801a4dc 	.word	0x0801a4dc
 8019110:	0801a4dc 	.word	0x0801a4dc
 8019114:	0801a4e0 	.word	0x0801a4e0

08019118 <memcpy>:
 8019118:	440a      	add	r2, r1
 801911a:	4291      	cmp	r1, r2
 801911c:	f100 33ff 	add.w	r3, r0, #4294967295
 8019120:	d100      	bne.n	8019124 <memcpy+0xc>
 8019122:	4770      	bx	lr
 8019124:	b510      	push	{r4, lr}
 8019126:	f811 4b01 	ldrb.w	r4, [r1], #1
 801912a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801912e:	4291      	cmp	r1, r2
 8019130:	d1f9      	bne.n	8019126 <memcpy+0xe>
 8019132:	bd10      	pop	{r4, pc}

08019134 <memset>:
 8019134:	4402      	add	r2, r0
 8019136:	4603      	mov	r3, r0
 8019138:	4293      	cmp	r3, r2
 801913a:	d100      	bne.n	801913e <memset+0xa>
 801913c:	4770      	bx	lr
 801913e:	f803 1b01 	strb.w	r1, [r3], #1
 8019142:	e7f9      	b.n	8019138 <memset+0x4>

08019144 <iprintf>:
 8019144:	b40f      	push	{r0, r1, r2, r3}
 8019146:	4b0a      	ldr	r3, [pc, #40]	; (8019170 <iprintf+0x2c>)
 8019148:	b513      	push	{r0, r1, r4, lr}
 801914a:	681c      	ldr	r4, [r3, #0]
 801914c:	b124      	cbz	r4, 8019158 <iprintf+0x14>
 801914e:	69a3      	ldr	r3, [r4, #24]
 8019150:	b913      	cbnz	r3, 8019158 <iprintf+0x14>
 8019152:	4620      	mov	r0, r4
 8019154:	f000 fa88 	bl	8019668 <__sinit>
 8019158:	ab05      	add	r3, sp, #20
 801915a:	9a04      	ldr	r2, [sp, #16]
 801915c:	68a1      	ldr	r1, [r4, #8]
 801915e:	9301      	str	r3, [sp, #4]
 8019160:	4620      	mov	r0, r4
 8019162:	f000 fc91 	bl	8019a88 <_vfiprintf_r>
 8019166:	b002      	add	sp, #8
 8019168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801916c:	b004      	add	sp, #16
 801916e:	4770      	bx	lr
 8019170:	20000088 	.word	0x20000088

08019174 <putchar>:
 8019174:	4b09      	ldr	r3, [pc, #36]	; (801919c <putchar+0x28>)
 8019176:	b513      	push	{r0, r1, r4, lr}
 8019178:	681c      	ldr	r4, [r3, #0]
 801917a:	4601      	mov	r1, r0
 801917c:	b134      	cbz	r4, 801918c <putchar+0x18>
 801917e:	69a3      	ldr	r3, [r4, #24]
 8019180:	b923      	cbnz	r3, 801918c <putchar+0x18>
 8019182:	9001      	str	r0, [sp, #4]
 8019184:	4620      	mov	r0, r4
 8019186:	f000 fa6f 	bl	8019668 <__sinit>
 801918a:	9901      	ldr	r1, [sp, #4]
 801918c:	68a2      	ldr	r2, [r4, #8]
 801918e:	4620      	mov	r0, r4
 8019190:	b002      	add	sp, #8
 8019192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019196:	f000 bf3b 	b.w	801a010 <_putc_r>
 801919a:	bf00      	nop
 801919c:	20000088 	.word	0x20000088

080191a0 <_puts_r>:
 80191a0:	b570      	push	{r4, r5, r6, lr}
 80191a2:	460e      	mov	r6, r1
 80191a4:	4605      	mov	r5, r0
 80191a6:	b118      	cbz	r0, 80191b0 <_puts_r+0x10>
 80191a8:	6983      	ldr	r3, [r0, #24]
 80191aa:	b90b      	cbnz	r3, 80191b0 <_puts_r+0x10>
 80191ac:	f000 fa5c 	bl	8019668 <__sinit>
 80191b0:	69ab      	ldr	r3, [r5, #24]
 80191b2:	68ac      	ldr	r4, [r5, #8]
 80191b4:	b913      	cbnz	r3, 80191bc <_puts_r+0x1c>
 80191b6:	4628      	mov	r0, r5
 80191b8:	f000 fa56 	bl	8019668 <__sinit>
 80191bc:	4b2c      	ldr	r3, [pc, #176]	; (8019270 <_puts_r+0xd0>)
 80191be:	429c      	cmp	r4, r3
 80191c0:	d120      	bne.n	8019204 <_puts_r+0x64>
 80191c2:	686c      	ldr	r4, [r5, #4]
 80191c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80191c6:	07db      	lsls	r3, r3, #31
 80191c8:	d405      	bmi.n	80191d6 <_puts_r+0x36>
 80191ca:	89a3      	ldrh	r3, [r4, #12]
 80191cc:	0598      	lsls	r0, r3, #22
 80191ce:	d402      	bmi.n	80191d6 <_puts_r+0x36>
 80191d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80191d2:	f000 fae7 	bl	80197a4 <__retarget_lock_acquire_recursive>
 80191d6:	89a3      	ldrh	r3, [r4, #12]
 80191d8:	0719      	lsls	r1, r3, #28
 80191da:	d51d      	bpl.n	8019218 <_puts_r+0x78>
 80191dc:	6923      	ldr	r3, [r4, #16]
 80191de:	b1db      	cbz	r3, 8019218 <_puts_r+0x78>
 80191e0:	3e01      	subs	r6, #1
 80191e2:	68a3      	ldr	r3, [r4, #8]
 80191e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80191e8:	3b01      	subs	r3, #1
 80191ea:	60a3      	str	r3, [r4, #8]
 80191ec:	bb39      	cbnz	r1, 801923e <_puts_r+0x9e>
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	da38      	bge.n	8019264 <_puts_r+0xc4>
 80191f2:	4622      	mov	r2, r4
 80191f4:	210a      	movs	r1, #10
 80191f6:	4628      	mov	r0, r5
 80191f8:	f000 f85c 	bl	80192b4 <__swbuf_r>
 80191fc:	3001      	adds	r0, #1
 80191fe:	d011      	beq.n	8019224 <_puts_r+0x84>
 8019200:	250a      	movs	r5, #10
 8019202:	e011      	b.n	8019228 <_puts_r+0x88>
 8019204:	4b1b      	ldr	r3, [pc, #108]	; (8019274 <_puts_r+0xd4>)
 8019206:	429c      	cmp	r4, r3
 8019208:	d101      	bne.n	801920e <_puts_r+0x6e>
 801920a:	68ac      	ldr	r4, [r5, #8]
 801920c:	e7da      	b.n	80191c4 <_puts_r+0x24>
 801920e:	4b1a      	ldr	r3, [pc, #104]	; (8019278 <_puts_r+0xd8>)
 8019210:	429c      	cmp	r4, r3
 8019212:	bf08      	it	eq
 8019214:	68ec      	ldreq	r4, [r5, #12]
 8019216:	e7d5      	b.n	80191c4 <_puts_r+0x24>
 8019218:	4621      	mov	r1, r4
 801921a:	4628      	mov	r0, r5
 801921c:	f000 f89c 	bl	8019358 <__swsetup_r>
 8019220:	2800      	cmp	r0, #0
 8019222:	d0dd      	beq.n	80191e0 <_puts_r+0x40>
 8019224:	f04f 35ff 	mov.w	r5, #4294967295
 8019228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801922a:	07da      	lsls	r2, r3, #31
 801922c:	d405      	bmi.n	801923a <_puts_r+0x9a>
 801922e:	89a3      	ldrh	r3, [r4, #12]
 8019230:	059b      	lsls	r3, r3, #22
 8019232:	d402      	bmi.n	801923a <_puts_r+0x9a>
 8019234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019236:	f000 fab6 	bl	80197a6 <__retarget_lock_release_recursive>
 801923a:	4628      	mov	r0, r5
 801923c:	bd70      	pop	{r4, r5, r6, pc}
 801923e:	2b00      	cmp	r3, #0
 8019240:	da04      	bge.n	801924c <_puts_r+0xac>
 8019242:	69a2      	ldr	r2, [r4, #24]
 8019244:	429a      	cmp	r2, r3
 8019246:	dc06      	bgt.n	8019256 <_puts_r+0xb6>
 8019248:	290a      	cmp	r1, #10
 801924a:	d004      	beq.n	8019256 <_puts_r+0xb6>
 801924c:	6823      	ldr	r3, [r4, #0]
 801924e:	1c5a      	adds	r2, r3, #1
 8019250:	6022      	str	r2, [r4, #0]
 8019252:	7019      	strb	r1, [r3, #0]
 8019254:	e7c5      	b.n	80191e2 <_puts_r+0x42>
 8019256:	4622      	mov	r2, r4
 8019258:	4628      	mov	r0, r5
 801925a:	f000 f82b 	bl	80192b4 <__swbuf_r>
 801925e:	3001      	adds	r0, #1
 8019260:	d1bf      	bne.n	80191e2 <_puts_r+0x42>
 8019262:	e7df      	b.n	8019224 <_puts_r+0x84>
 8019264:	6823      	ldr	r3, [r4, #0]
 8019266:	250a      	movs	r5, #10
 8019268:	1c5a      	adds	r2, r3, #1
 801926a:	6022      	str	r2, [r4, #0]
 801926c:	701d      	strb	r5, [r3, #0]
 801926e:	e7db      	b.n	8019228 <_puts_r+0x88>
 8019270:	0801a460 	.word	0x0801a460
 8019274:	0801a480 	.word	0x0801a480
 8019278:	0801a440 	.word	0x0801a440

0801927c <puts>:
 801927c:	4b02      	ldr	r3, [pc, #8]	; (8019288 <puts+0xc>)
 801927e:	4601      	mov	r1, r0
 8019280:	6818      	ldr	r0, [r3, #0]
 8019282:	f7ff bf8d 	b.w	80191a0 <_puts_r>
 8019286:	bf00      	nop
 8019288:	20000088 	.word	0x20000088

0801928c <strncpy>:
 801928c:	b510      	push	{r4, lr}
 801928e:	3901      	subs	r1, #1
 8019290:	4603      	mov	r3, r0
 8019292:	b132      	cbz	r2, 80192a2 <strncpy+0x16>
 8019294:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019298:	f803 4b01 	strb.w	r4, [r3], #1
 801929c:	3a01      	subs	r2, #1
 801929e:	2c00      	cmp	r4, #0
 80192a0:	d1f7      	bne.n	8019292 <strncpy+0x6>
 80192a2:	441a      	add	r2, r3
 80192a4:	2100      	movs	r1, #0
 80192a6:	4293      	cmp	r3, r2
 80192a8:	d100      	bne.n	80192ac <strncpy+0x20>
 80192aa:	bd10      	pop	{r4, pc}
 80192ac:	f803 1b01 	strb.w	r1, [r3], #1
 80192b0:	e7f9      	b.n	80192a6 <strncpy+0x1a>
	...

080192b4 <__swbuf_r>:
 80192b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192b6:	460e      	mov	r6, r1
 80192b8:	4614      	mov	r4, r2
 80192ba:	4605      	mov	r5, r0
 80192bc:	b118      	cbz	r0, 80192c6 <__swbuf_r+0x12>
 80192be:	6983      	ldr	r3, [r0, #24]
 80192c0:	b90b      	cbnz	r3, 80192c6 <__swbuf_r+0x12>
 80192c2:	f000 f9d1 	bl	8019668 <__sinit>
 80192c6:	4b21      	ldr	r3, [pc, #132]	; (801934c <__swbuf_r+0x98>)
 80192c8:	429c      	cmp	r4, r3
 80192ca:	d12b      	bne.n	8019324 <__swbuf_r+0x70>
 80192cc:	686c      	ldr	r4, [r5, #4]
 80192ce:	69a3      	ldr	r3, [r4, #24]
 80192d0:	60a3      	str	r3, [r4, #8]
 80192d2:	89a3      	ldrh	r3, [r4, #12]
 80192d4:	071a      	lsls	r2, r3, #28
 80192d6:	d52f      	bpl.n	8019338 <__swbuf_r+0x84>
 80192d8:	6923      	ldr	r3, [r4, #16]
 80192da:	b36b      	cbz	r3, 8019338 <__swbuf_r+0x84>
 80192dc:	6923      	ldr	r3, [r4, #16]
 80192de:	6820      	ldr	r0, [r4, #0]
 80192e0:	1ac0      	subs	r0, r0, r3
 80192e2:	6963      	ldr	r3, [r4, #20]
 80192e4:	b2f6      	uxtb	r6, r6
 80192e6:	4283      	cmp	r3, r0
 80192e8:	4637      	mov	r7, r6
 80192ea:	dc04      	bgt.n	80192f6 <__swbuf_r+0x42>
 80192ec:	4621      	mov	r1, r4
 80192ee:	4628      	mov	r0, r5
 80192f0:	f000 f926 	bl	8019540 <_fflush_r>
 80192f4:	bb30      	cbnz	r0, 8019344 <__swbuf_r+0x90>
 80192f6:	68a3      	ldr	r3, [r4, #8]
 80192f8:	3b01      	subs	r3, #1
 80192fa:	60a3      	str	r3, [r4, #8]
 80192fc:	6823      	ldr	r3, [r4, #0]
 80192fe:	1c5a      	adds	r2, r3, #1
 8019300:	6022      	str	r2, [r4, #0]
 8019302:	701e      	strb	r6, [r3, #0]
 8019304:	6963      	ldr	r3, [r4, #20]
 8019306:	3001      	adds	r0, #1
 8019308:	4283      	cmp	r3, r0
 801930a:	d004      	beq.n	8019316 <__swbuf_r+0x62>
 801930c:	89a3      	ldrh	r3, [r4, #12]
 801930e:	07db      	lsls	r3, r3, #31
 8019310:	d506      	bpl.n	8019320 <__swbuf_r+0x6c>
 8019312:	2e0a      	cmp	r6, #10
 8019314:	d104      	bne.n	8019320 <__swbuf_r+0x6c>
 8019316:	4621      	mov	r1, r4
 8019318:	4628      	mov	r0, r5
 801931a:	f000 f911 	bl	8019540 <_fflush_r>
 801931e:	b988      	cbnz	r0, 8019344 <__swbuf_r+0x90>
 8019320:	4638      	mov	r0, r7
 8019322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019324:	4b0a      	ldr	r3, [pc, #40]	; (8019350 <__swbuf_r+0x9c>)
 8019326:	429c      	cmp	r4, r3
 8019328:	d101      	bne.n	801932e <__swbuf_r+0x7a>
 801932a:	68ac      	ldr	r4, [r5, #8]
 801932c:	e7cf      	b.n	80192ce <__swbuf_r+0x1a>
 801932e:	4b09      	ldr	r3, [pc, #36]	; (8019354 <__swbuf_r+0xa0>)
 8019330:	429c      	cmp	r4, r3
 8019332:	bf08      	it	eq
 8019334:	68ec      	ldreq	r4, [r5, #12]
 8019336:	e7ca      	b.n	80192ce <__swbuf_r+0x1a>
 8019338:	4621      	mov	r1, r4
 801933a:	4628      	mov	r0, r5
 801933c:	f000 f80c 	bl	8019358 <__swsetup_r>
 8019340:	2800      	cmp	r0, #0
 8019342:	d0cb      	beq.n	80192dc <__swbuf_r+0x28>
 8019344:	f04f 37ff 	mov.w	r7, #4294967295
 8019348:	e7ea      	b.n	8019320 <__swbuf_r+0x6c>
 801934a:	bf00      	nop
 801934c:	0801a460 	.word	0x0801a460
 8019350:	0801a480 	.word	0x0801a480
 8019354:	0801a440 	.word	0x0801a440

08019358 <__swsetup_r>:
 8019358:	4b32      	ldr	r3, [pc, #200]	; (8019424 <__swsetup_r+0xcc>)
 801935a:	b570      	push	{r4, r5, r6, lr}
 801935c:	681d      	ldr	r5, [r3, #0]
 801935e:	4606      	mov	r6, r0
 8019360:	460c      	mov	r4, r1
 8019362:	b125      	cbz	r5, 801936e <__swsetup_r+0x16>
 8019364:	69ab      	ldr	r3, [r5, #24]
 8019366:	b913      	cbnz	r3, 801936e <__swsetup_r+0x16>
 8019368:	4628      	mov	r0, r5
 801936a:	f000 f97d 	bl	8019668 <__sinit>
 801936e:	4b2e      	ldr	r3, [pc, #184]	; (8019428 <__swsetup_r+0xd0>)
 8019370:	429c      	cmp	r4, r3
 8019372:	d10f      	bne.n	8019394 <__swsetup_r+0x3c>
 8019374:	686c      	ldr	r4, [r5, #4]
 8019376:	89a3      	ldrh	r3, [r4, #12]
 8019378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801937c:	0719      	lsls	r1, r3, #28
 801937e:	d42c      	bmi.n	80193da <__swsetup_r+0x82>
 8019380:	06dd      	lsls	r5, r3, #27
 8019382:	d411      	bmi.n	80193a8 <__swsetup_r+0x50>
 8019384:	2309      	movs	r3, #9
 8019386:	6033      	str	r3, [r6, #0]
 8019388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801938c:	81a3      	strh	r3, [r4, #12]
 801938e:	f04f 30ff 	mov.w	r0, #4294967295
 8019392:	e03e      	b.n	8019412 <__swsetup_r+0xba>
 8019394:	4b25      	ldr	r3, [pc, #148]	; (801942c <__swsetup_r+0xd4>)
 8019396:	429c      	cmp	r4, r3
 8019398:	d101      	bne.n	801939e <__swsetup_r+0x46>
 801939a:	68ac      	ldr	r4, [r5, #8]
 801939c:	e7eb      	b.n	8019376 <__swsetup_r+0x1e>
 801939e:	4b24      	ldr	r3, [pc, #144]	; (8019430 <__swsetup_r+0xd8>)
 80193a0:	429c      	cmp	r4, r3
 80193a2:	bf08      	it	eq
 80193a4:	68ec      	ldreq	r4, [r5, #12]
 80193a6:	e7e6      	b.n	8019376 <__swsetup_r+0x1e>
 80193a8:	0758      	lsls	r0, r3, #29
 80193aa:	d512      	bpl.n	80193d2 <__swsetup_r+0x7a>
 80193ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80193ae:	b141      	cbz	r1, 80193c2 <__swsetup_r+0x6a>
 80193b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193b4:	4299      	cmp	r1, r3
 80193b6:	d002      	beq.n	80193be <__swsetup_r+0x66>
 80193b8:	4630      	mov	r0, r6
 80193ba:	f000 fa5b 	bl	8019874 <_free_r>
 80193be:	2300      	movs	r3, #0
 80193c0:	6363      	str	r3, [r4, #52]	; 0x34
 80193c2:	89a3      	ldrh	r3, [r4, #12]
 80193c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80193c8:	81a3      	strh	r3, [r4, #12]
 80193ca:	2300      	movs	r3, #0
 80193cc:	6063      	str	r3, [r4, #4]
 80193ce:	6923      	ldr	r3, [r4, #16]
 80193d0:	6023      	str	r3, [r4, #0]
 80193d2:	89a3      	ldrh	r3, [r4, #12]
 80193d4:	f043 0308 	orr.w	r3, r3, #8
 80193d8:	81a3      	strh	r3, [r4, #12]
 80193da:	6923      	ldr	r3, [r4, #16]
 80193dc:	b94b      	cbnz	r3, 80193f2 <__swsetup_r+0x9a>
 80193de:	89a3      	ldrh	r3, [r4, #12]
 80193e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80193e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80193e8:	d003      	beq.n	80193f2 <__swsetup_r+0x9a>
 80193ea:	4621      	mov	r1, r4
 80193ec:	4630      	mov	r0, r6
 80193ee:	f000 fa01 	bl	80197f4 <__smakebuf_r>
 80193f2:	89a0      	ldrh	r0, [r4, #12]
 80193f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80193f8:	f010 0301 	ands.w	r3, r0, #1
 80193fc:	d00a      	beq.n	8019414 <__swsetup_r+0xbc>
 80193fe:	2300      	movs	r3, #0
 8019400:	60a3      	str	r3, [r4, #8]
 8019402:	6963      	ldr	r3, [r4, #20]
 8019404:	425b      	negs	r3, r3
 8019406:	61a3      	str	r3, [r4, #24]
 8019408:	6923      	ldr	r3, [r4, #16]
 801940a:	b943      	cbnz	r3, 801941e <__swsetup_r+0xc6>
 801940c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019410:	d1ba      	bne.n	8019388 <__swsetup_r+0x30>
 8019412:	bd70      	pop	{r4, r5, r6, pc}
 8019414:	0781      	lsls	r1, r0, #30
 8019416:	bf58      	it	pl
 8019418:	6963      	ldrpl	r3, [r4, #20]
 801941a:	60a3      	str	r3, [r4, #8]
 801941c:	e7f4      	b.n	8019408 <__swsetup_r+0xb0>
 801941e:	2000      	movs	r0, #0
 8019420:	e7f7      	b.n	8019412 <__swsetup_r+0xba>
 8019422:	bf00      	nop
 8019424:	20000088 	.word	0x20000088
 8019428:	0801a460 	.word	0x0801a460
 801942c:	0801a480 	.word	0x0801a480
 8019430:	0801a440 	.word	0x0801a440

08019434 <__sflush_r>:
 8019434:	898a      	ldrh	r2, [r1, #12]
 8019436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801943a:	4605      	mov	r5, r0
 801943c:	0710      	lsls	r0, r2, #28
 801943e:	460c      	mov	r4, r1
 8019440:	d458      	bmi.n	80194f4 <__sflush_r+0xc0>
 8019442:	684b      	ldr	r3, [r1, #4]
 8019444:	2b00      	cmp	r3, #0
 8019446:	dc05      	bgt.n	8019454 <__sflush_r+0x20>
 8019448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801944a:	2b00      	cmp	r3, #0
 801944c:	dc02      	bgt.n	8019454 <__sflush_r+0x20>
 801944e:	2000      	movs	r0, #0
 8019450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019456:	2e00      	cmp	r6, #0
 8019458:	d0f9      	beq.n	801944e <__sflush_r+0x1a>
 801945a:	2300      	movs	r3, #0
 801945c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019460:	682f      	ldr	r7, [r5, #0]
 8019462:	602b      	str	r3, [r5, #0]
 8019464:	d032      	beq.n	80194cc <__sflush_r+0x98>
 8019466:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019468:	89a3      	ldrh	r3, [r4, #12]
 801946a:	075a      	lsls	r2, r3, #29
 801946c:	d505      	bpl.n	801947a <__sflush_r+0x46>
 801946e:	6863      	ldr	r3, [r4, #4]
 8019470:	1ac0      	subs	r0, r0, r3
 8019472:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019474:	b10b      	cbz	r3, 801947a <__sflush_r+0x46>
 8019476:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019478:	1ac0      	subs	r0, r0, r3
 801947a:	2300      	movs	r3, #0
 801947c:	4602      	mov	r2, r0
 801947e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019480:	6a21      	ldr	r1, [r4, #32]
 8019482:	4628      	mov	r0, r5
 8019484:	47b0      	blx	r6
 8019486:	1c43      	adds	r3, r0, #1
 8019488:	89a3      	ldrh	r3, [r4, #12]
 801948a:	d106      	bne.n	801949a <__sflush_r+0x66>
 801948c:	6829      	ldr	r1, [r5, #0]
 801948e:	291d      	cmp	r1, #29
 8019490:	d82c      	bhi.n	80194ec <__sflush_r+0xb8>
 8019492:	4a2a      	ldr	r2, [pc, #168]	; (801953c <__sflush_r+0x108>)
 8019494:	40ca      	lsrs	r2, r1
 8019496:	07d6      	lsls	r6, r2, #31
 8019498:	d528      	bpl.n	80194ec <__sflush_r+0xb8>
 801949a:	2200      	movs	r2, #0
 801949c:	6062      	str	r2, [r4, #4]
 801949e:	04d9      	lsls	r1, r3, #19
 80194a0:	6922      	ldr	r2, [r4, #16]
 80194a2:	6022      	str	r2, [r4, #0]
 80194a4:	d504      	bpl.n	80194b0 <__sflush_r+0x7c>
 80194a6:	1c42      	adds	r2, r0, #1
 80194a8:	d101      	bne.n	80194ae <__sflush_r+0x7a>
 80194aa:	682b      	ldr	r3, [r5, #0]
 80194ac:	b903      	cbnz	r3, 80194b0 <__sflush_r+0x7c>
 80194ae:	6560      	str	r0, [r4, #84]	; 0x54
 80194b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80194b2:	602f      	str	r7, [r5, #0]
 80194b4:	2900      	cmp	r1, #0
 80194b6:	d0ca      	beq.n	801944e <__sflush_r+0x1a>
 80194b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80194bc:	4299      	cmp	r1, r3
 80194be:	d002      	beq.n	80194c6 <__sflush_r+0x92>
 80194c0:	4628      	mov	r0, r5
 80194c2:	f000 f9d7 	bl	8019874 <_free_r>
 80194c6:	2000      	movs	r0, #0
 80194c8:	6360      	str	r0, [r4, #52]	; 0x34
 80194ca:	e7c1      	b.n	8019450 <__sflush_r+0x1c>
 80194cc:	6a21      	ldr	r1, [r4, #32]
 80194ce:	2301      	movs	r3, #1
 80194d0:	4628      	mov	r0, r5
 80194d2:	47b0      	blx	r6
 80194d4:	1c41      	adds	r1, r0, #1
 80194d6:	d1c7      	bne.n	8019468 <__sflush_r+0x34>
 80194d8:	682b      	ldr	r3, [r5, #0]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d0c4      	beq.n	8019468 <__sflush_r+0x34>
 80194de:	2b1d      	cmp	r3, #29
 80194e0:	d001      	beq.n	80194e6 <__sflush_r+0xb2>
 80194e2:	2b16      	cmp	r3, #22
 80194e4:	d101      	bne.n	80194ea <__sflush_r+0xb6>
 80194e6:	602f      	str	r7, [r5, #0]
 80194e8:	e7b1      	b.n	801944e <__sflush_r+0x1a>
 80194ea:	89a3      	ldrh	r3, [r4, #12]
 80194ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80194f0:	81a3      	strh	r3, [r4, #12]
 80194f2:	e7ad      	b.n	8019450 <__sflush_r+0x1c>
 80194f4:	690f      	ldr	r7, [r1, #16]
 80194f6:	2f00      	cmp	r7, #0
 80194f8:	d0a9      	beq.n	801944e <__sflush_r+0x1a>
 80194fa:	0793      	lsls	r3, r2, #30
 80194fc:	680e      	ldr	r6, [r1, #0]
 80194fe:	bf08      	it	eq
 8019500:	694b      	ldreq	r3, [r1, #20]
 8019502:	600f      	str	r7, [r1, #0]
 8019504:	bf18      	it	ne
 8019506:	2300      	movne	r3, #0
 8019508:	eba6 0807 	sub.w	r8, r6, r7
 801950c:	608b      	str	r3, [r1, #8]
 801950e:	f1b8 0f00 	cmp.w	r8, #0
 8019512:	dd9c      	ble.n	801944e <__sflush_r+0x1a>
 8019514:	6a21      	ldr	r1, [r4, #32]
 8019516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019518:	4643      	mov	r3, r8
 801951a:	463a      	mov	r2, r7
 801951c:	4628      	mov	r0, r5
 801951e:	47b0      	blx	r6
 8019520:	2800      	cmp	r0, #0
 8019522:	dc06      	bgt.n	8019532 <__sflush_r+0xfe>
 8019524:	89a3      	ldrh	r3, [r4, #12]
 8019526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801952a:	81a3      	strh	r3, [r4, #12]
 801952c:	f04f 30ff 	mov.w	r0, #4294967295
 8019530:	e78e      	b.n	8019450 <__sflush_r+0x1c>
 8019532:	4407      	add	r7, r0
 8019534:	eba8 0800 	sub.w	r8, r8, r0
 8019538:	e7e9      	b.n	801950e <__sflush_r+0xda>
 801953a:	bf00      	nop
 801953c:	20400001 	.word	0x20400001

08019540 <_fflush_r>:
 8019540:	b538      	push	{r3, r4, r5, lr}
 8019542:	690b      	ldr	r3, [r1, #16]
 8019544:	4605      	mov	r5, r0
 8019546:	460c      	mov	r4, r1
 8019548:	b913      	cbnz	r3, 8019550 <_fflush_r+0x10>
 801954a:	2500      	movs	r5, #0
 801954c:	4628      	mov	r0, r5
 801954e:	bd38      	pop	{r3, r4, r5, pc}
 8019550:	b118      	cbz	r0, 801955a <_fflush_r+0x1a>
 8019552:	6983      	ldr	r3, [r0, #24]
 8019554:	b90b      	cbnz	r3, 801955a <_fflush_r+0x1a>
 8019556:	f000 f887 	bl	8019668 <__sinit>
 801955a:	4b14      	ldr	r3, [pc, #80]	; (80195ac <_fflush_r+0x6c>)
 801955c:	429c      	cmp	r4, r3
 801955e:	d11b      	bne.n	8019598 <_fflush_r+0x58>
 8019560:	686c      	ldr	r4, [r5, #4]
 8019562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019566:	2b00      	cmp	r3, #0
 8019568:	d0ef      	beq.n	801954a <_fflush_r+0xa>
 801956a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801956c:	07d0      	lsls	r0, r2, #31
 801956e:	d404      	bmi.n	801957a <_fflush_r+0x3a>
 8019570:	0599      	lsls	r1, r3, #22
 8019572:	d402      	bmi.n	801957a <_fflush_r+0x3a>
 8019574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019576:	f000 f915 	bl	80197a4 <__retarget_lock_acquire_recursive>
 801957a:	4628      	mov	r0, r5
 801957c:	4621      	mov	r1, r4
 801957e:	f7ff ff59 	bl	8019434 <__sflush_r>
 8019582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019584:	07da      	lsls	r2, r3, #31
 8019586:	4605      	mov	r5, r0
 8019588:	d4e0      	bmi.n	801954c <_fflush_r+0xc>
 801958a:	89a3      	ldrh	r3, [r4, #12]
 801958c:	059b      	lsls	r3, r3, #22
 801958e:	d4dd      	bmi.n	801954c <_fflush_r+0xc>
 8019590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019592:	f000 f908 	bl	80197a6 <__retarget_lock_release_recursive>
 8019596:	e7d9      	b.n	801954c <_fflush_r+0xc>
 8019598:	4b05      	ldr	r3, [pc, #20]	; (80195b0 <_fflush_r+0x70>)
 801959a:	429c      	cmp	r4, r3
 801959c:	d101      	bne.n	80195a2 <_fflush_r+0x62>
 801959e:	68ac      	ldr	r4, [r5, #8]
 80195a0:	e7df      	b.n	8019562 <_fflush_r+0x22>
 80195a2:	4b04      	ldr	r3, [pc, #16]	; (80195b4 <_fflush_r+0x74>)
 80195a4:	429c      	cmp	r4, r3
 80195a6:	bf08      	it	eq
 80195a8:	68ec      	ldreq	r4, [r5, #12]
 80195aa:	e7da      	b.n	8019562 <_fflush_r+0x22>
 80195ac:	0801a460 	.word	0x0801a460
 80195b0:	0801a480 	.word	0x0801a480
 80195b4:	0801a440 	.word	0x0801a440

080195b8 <std>:
 80195b8:	2300      	movs	r3, #0
 80195ba:	b510      	push	{r4, lr}
 80195bc:	4604      	mov	r4, r0
 80195be:	e9c0 3300 	strd	r3, r3, [r0]
 80195c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80195c6:	6083      	str	r3, [r0, #8]
 80195c8:	8181      	strh	r1, [r0, #12]
 80195ca:	6643      	str	r3, [r0, #100]	; 0x64
 80195cc:	81c2      	strh	r2, [r0, #14]
 80195ce:	6183      	str	r3, [r0, #24]
 80195d0:	4619      	mov	r1, r3
 80195d2:	2208      	movs	r2, #8
 80195d4:	305c      	adds	r0, #92	; 0x5c
 80195d6:	f7ff fdad 	bl	8019134 <memset>
 80195da:	4b05      	ldr	r3, [pc, #20]	; (80195f0 <std+0x38>)
 80195dc:	6263      	str	r3, [r4, #36]	; 0x24
 80195de:	4b05      	ldr	r3, [pc, #20]	; (80195f4 <std+0x3c>)
 80195e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80195e2:	4b05      	ldr	r3, [pc, #20]	; (80195f8 <std+0x40>)
 80195e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80195e6:	4b05      	ldr	r3, [pc, #20]	; (80195fc <std+0x44>)
 80195e8:	6224      	str	r4, [r4, #32]
 80195ea:	6323      	str	r3, [r4, #48]	; 0x30
 80195ec:	bd10      	pop	{r4, pc}
 80195ee:	bf00      	nop
 80195f0:	0801a0c1 	.word	0x0801a0c1
 80195f4:	0801a0e3 	.word	0x0801a0e3
 80195f8:	0801a11b 	.word	0x0801a11b
 80195fc:	0801a13f 	.word	0x0801a13f

08019600 <_cleanup_r>:
 8019600:	4901      	ldr	r1, [pc, #4]	; (8019608 <_cleanup_r+0x8>)
 8019602:	f000 b8af 	b.w	8019764 <_fwalk_reent>
 8019606:	bf00      	nop
 8019608:	08019541 	.word	0x08019541

0801960c <__sfmoreglue>:
 801960c:	b570      	push	{r4, r5, r6, lr}
 801960e:	2268      	movs	r2, #104	; 0x68
 8019610:	1e4d      	subs	r5, r1, #1
 8019612:	4355      	muls	r5, r2
 8019614:	460e      	mov	r6, r1
 8019616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801961a:	f000 f997 	bl	801994c <_malloc_r>
 801961e:	4604      	mov	r4, r0
 8019620:	b140      	cbz	r0, 8019634 <__sfmoreglue+0x28>
 8019622:	2100      	movs	r1, #0
 8019624:	e9c0 1600 	strd	r1, r6, [r0]
 8019628:	300c      	adds	r0, #12
 801962a:	60a0      	str	r0, [r4, #8]
 801962c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019630:	f7ff fd80 	bl	8019134 <memset>
 8019634:	4620      	mov	r0, r4
 8019636:	bd70      	pop	{r4, r5, r6, pc}

08019638 <__sfp_lock_acquire>:
 8019638:	4801      	ldr	r0, [pc, #4]	; (8019640 <__sfp_lock_acquire+0x8>)
 801963a:	f000 b8b3 	b.w	80197a4 <__retarget_lock_acquire_recursive>
 801963e:	bf00      	nop
 8019640:	200086b5 	.word	0x200086b5

08019644 <__sfp_lock_release>:
 8019644:	4801      	ldr	r0, [pc, #4]	; (801964c <__sfp_lock_release+0x8>)
 8019646:	f000 b8ae 	b.w	80197a6 <__retarget_lock_release_recursive>
 801964a:	bf00      	nop
 801964c:	200086b5 	.word	0x200086b5

08019650 <__sinit_lock_acquire>:
 8019650:	4801      	ldr	r0, [pc, #4]	; (8019658 <__sinit_lock_acquire+0x8>)
 8019652:	f000 b8a7 	b.w	80197a4 <__retarget_lock_acquire_recursive>
 8019656:	bf00      	nop
 8019658:	200086b6 	.word	0x200086b6

0801965c <__sinit_lock_release>:
 801965c:	4801      	ldr	r0, [pc, #4]	; (8019664 <__sinit_lock_release+0x8>)
 801965e:	f000 b8a2 	b.w	80197a6 <__retarget_lock_release_recursive>
 8019662:	bf00      	nop
 8019664:	200086b6 	.word	0x200086b6

08019668 <__sinit>:
 8019668:	b510      	push	{r4, lr}
 801966a:	4604      	mov	r4, r0
 801966c:	f7ff fff0 	bl	8019650 <__sinit_lock_acquire>
 8019670:	69a3      	ldr	r3, [r4, #24]
 8019672:	b11b      	cbz	r3, 801967c <__sinit+0x14>
 8019674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019678:	f7ff bff0 	b.w	801965c <__sinit_lock_release>
 801967c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019680:	6523      	str	r3, [r4, #80]	; 0x50
 8019682:	4b13      	ldr	r3, [pc, #76]	; (80196d0 <__sinit+0x68>)
 8019684:	4a13      	ldr	r2, [pc, #76]	; (80196d4 <__sinit+0x6c>)
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	62a2      	str	r2, [r4, #40]	; 0x28
 801968a:	42a3      	cmp	r3, r4
 801968c:	bf04      	itt	eq
 801968e:	2301      	moveq	r3, #1
 8019690:	61a3      	streq	r3, [r4, #24]
 8019692:	4620      	mov	r0, r4
 8019694:	f000 f820 	bl	80196d8 <__sfp>
 8019698:	6060      	str	r0, [r4, #4]
 801969a:	4620      	mov	r0, r4
 801969c:	f000 f81c 	bl	80196d8 <__sfp>
 80196a0:	60a0      	str	r0, [r4, #8]
 80196a2:	4620      	mov	r0, r4
 80196a4:	f000 f818 	bl	80196d8 <__sfp>
 80196a8:	2200      	movs	r2, #0
 80196aa:	60e0      	str	r0, [r4, #12]
 80196ac:	2104      	movs	r1, #4
 80196ae:	6860      	ldr	r0, [r4, #4]
 80196b0:	f7ff ff82 	bl	80195b8 <std>
 80196b4:	68a0      	ldr	r0, [r4, #8]
 80196b6:	2201      	movs	r2, #1
 80196b8:	2109      	movs	r1, #9
 80196ba:	f7ff ff7d 	bl	80195b8 <std>
 80196be:	68e0      	ldr	r0, [r4, #12]
 80196c0:	2202      	movs	r2, #2
 80196c2:	2112      	movs	r1, #18
 80196c4:	f7ff ff78 	bl	80195b8 <std>
 80196c8:	2301      	movs	r3, #1
 80196ca:	61a3      	str	r3, [r4, #24]
 80196cc:	e7d2      	b.n	8019674 <__sinit+0xc>
 80196ce:	bf00      	nop
 80196d0:	0801a43c 	.word	0x0801a43c
 80196d4:	08019601 	.word	0x08019601

080196d8 <__sfp>:
 80196d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196da:	4607      	mov	r7, r0
 80196dc:	f7ff ffac 	bl	8019638 <__sfp_lock_acquire>
 80196e0:	4b1e      	ldr	r3, [pc, #120]	; (801975c <__sfp+0x84>)
 80196e2:	681e      	ldr	r6, [r3, #0]
 80196e4:	69b3      	ldr	r3, [r6, #24]
 80196e6:	b913      	cbnz	r3, 80196ee <__sfp+0x16>
 80196e8:	4630      	mov	r0, r6
 80196ea:	f7ff ffbd 	bl	8019668 <__sinit>
 80196ee:	3648      	adds	r6, #72	; 0x48
 80196f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80196f4:	3b01      	subs	r3, #1
 80196f6:	d503      	bpl.n	8019700 <__sfp+0x28>
 80196f8:	6833      	ldr	r3, [r6, #0]
 80196fa:	b30b      	cbz	r3, 8019740 <__sfp+0x68>
 80196fc:	6836      	ldr	r6, [r6, #0]
 80196fe:	e7f7      	b.n	80196f0 <__sfp+0x18>
 8019700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019704:	b9d5      	cbnz	r5, 801973c <__sfp+0x64>
 8019706:	4b16      	ldr	r3, [pc, #88]	; (8019760 <__sfp+0x88>)
 8019708:	60e3      	str	r3, [r4, #12]
 801970a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801970e:	6665      	str	r5, [r4, #100]	; 0x64
 8019710:	f000 f847 	bl	80197a2 <__retarget_lock_init_recursive>
 8019714:	f7ff ff96 	bl	8019644 <__sfp_lock_release>
 8019718:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801971c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019720:	6025      	str	r5, [r4, #0]
 8019722:	61a5      	str	r5, [r4, #24]
 8019724:	2208      	movs	r2, #8
 8019726:	4629      	mov	r1, r5
 8019728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801972c:	f7ff fd02 	bl	8019134 <memset>
 8019730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019738:	4620      	mov	r0, r4
 801973a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801973c:	3468      	adds	r4, #104	; 0x68
 801973e:	e7d9      	b.n	80196f4 <__sfp+0x1c>
 8019740:	2104      	movs	r1, #4
 8019742:	4638      	mov	r0, r7
 8019744:	f7ff ff62 	bl	801960c <__sfmoreglue>
 8019748:	4604      	mov	r4, r0
 801974a:	6030      	str	r0, [r6, #0]
 801974c:	2800      	cmp	r0, #0
 801974e:	d1d5      	bne.n	80196fc <__sfp+0x24>
 8019750:	f7ff ff78 	bl	8019644 <__sfp_lock_release>
 8019754:	230c      	movs	r3, #12
 8019756:	603b      	str	r3, [r7, #0]
 8019758:	e7ee      	b.n	8019738 <__sfp+0x60>
 801975a:	bf00      	nop
 801975c:	0801a43c 	.word	0x0801a43c
 8019760:	ffff0001 	.word	0xffff0001

08019764 <_fwalk_reent>:
 8019764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019768:	4606      	mov	r6, r0
 801976a:	4688      	mov	r8, r1
 801976c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019770:	2700      	movs	r7, #0
 8019772:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019776:	f1b9 0901 	subs.w	r9, r9, #1
 801977a:	d505      	bpl.n	8019788 <_fwalk_reent+0x24>
 801977c:	6824      	ldr	r4, [r4, #0]
 801977e:	2c00      	cmp	r4, #0
 8019780:	d1f7      	bne.n	8019772 <_fwalk_reent+0xe>
 8019782:	4638      	mov	r0, r7
 8019784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019788:	89ab      	ldrh	r3, [r5, #12]
 801978a:	2b01      	cmp	r3, #1
 801978c:	d907      	bls.n	801979e <_fwalk_reent+0x3a>
 801978e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019792:	3301      	adds	r3, #1
 8019794:	d003      	beq.n	801979e <_fwalk_reent+0x3a>
 8019796:	4629      	mov	r1, r5
 8019798:	4630      	mov	r0, r6
 801979a:	47c0      	blx	r8
 801979c:	4307      	orrs	r7, r0
 801979e:	3568      	adds	r5, #104	; 0x68
 80197a0:	e7e9      	b.n	8019776 <_fwalk_reent+0x12>

080197a2 <__retarget_lock_init_recursive>:
 80197a2:	4770      	bx	lr

080197a4 <__retarget_lock_acquire_recursive>:
 80197a4:	4770      	bx	lr

080197a6 <__retarget_lock_release_recursive>:
 80197a6:	4770      	bx	lr

080197a8 <__swhatbuf_r>:
 80197a8:	b570      	push	{r4, r5, r6, lr}
 80197aa:	460e      	mov	r6, r1
 80197ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197b0:	2900      	cmp	r1, #0
 80197b2:	b096      	sub	sp, #88	; 0x58
 80197b4:	4614      	mov	r4, r2
 80197b6:	461d      	mov	r5, r3
 80197b8:	da08      	bge.n	80197cc <__swhatbuf_r+0x24>
 80197ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80197be:	2200      	movs	r2, #0
 80197c0:	602a      	str	r2, [r5, #0]
 80197c2:	061a      	lsls	r2, r3, #24
 80197c4:	d410      	bmi.n	80197e8 <__swhatbuf_r+0x40>
 80197c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80197ca:	e00e      	b.n	80197ea <__swhatbuf_r+0x42>
 80197cc:	466a      	mov	r2, sp
 80197ce:	f000 fcdd 	bl	801a18c <_fstat_r>
 80197d2:	2800      	cmp	r0, #0
 80197d4:	dbf1      	blt.n	80197ba <__swhatbuf_r+0x12>
 80197d6:	9a01      	ldr	r2, [sp, #4]
 80197d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80197dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80197e0:	425a      	negs	r2, r3
 80197e2:	415a      	adcs	r2, r3
 80197e4:	602a      	str	r2, [r5, #0]
 80197e6:	e7ee      	b.n	80197c6 <__swhatbuf_r+0x1e>
 80197e8:	2340      	movs	r3, #64	; 0x40
 80197ea:	2000      	movs	r0, #0
 80197ec:	6023      	str	r3, [r4, #0]
 80197ee:	b016      	add	sp, #88	; 0x58
 80197f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080197f4 <__smakebuf_r>:
 80197f4:	898b      	ldrh	r3, [r1, #12]
 80197f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80197f8:	079d      	lsls	r5, r3, #30
 80197fa:	4606      	mov	r6, r0
 80197fc:	460c      	mov	r4, r1
 80197fe:	d507      	bpl.n	8019810 <__smakebuf_r+0x1c>
 8019800:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019804:	6023      	str	r3, [r4, #0]
 8019806:	6123      	str	r3, [r4, #16]
 8019808:	2301      	movs	r3, #1
 801980a:	6163      	str	r3, [r4, #20]
 801980c:	b002      	add	sp, #8
 801980e:	bd70      	pop	{r4, r5, r6, pc}
 8019810:	ab01      	add	r3, sp, #4
 8019812:	466a      	mov	r2, sp
 8019814:	f7ff ffc8 	bl	80197a8 <__swhatbuf_r>
 8019818:	9900      	ldr	r1, [sp, #0]
 801981a:	4605      	mov	r5, r0
 801981c:	4630      	mov	r0, r6
 801981e:	f000 f895 	bl	801994c <_malloc_r>
 8019822:	b948      	cbnz	r0, 8019838 <__smakebuf_r+0x44>
 8019824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019828:	059a      	lsls	r2, r3, #22
 801982a:	d4ef      	bmi.n	801980c <__smakebuf_r+0x18>
 801982c:	f023 0303 	bic.w	r3, r3, #3
 8019830:	f043 0302 	orr.w	r3, r3, #2
 8019834:	81a3      	strh	r3, [r4, #12]
 8019836:	e7e3      	b.n	8019800 <__smakebuf_r+0xc>
 8019838:	4b0d      	ldr	r3, [pc, #52]	; (8019870 <__smakebuf_r+0x7c>)
 801983a:	62b3      	str	r3, [r6, #40]	; 0x28
 801983c:	89a3      	ldrh	r3, [r4, #12]
 801983e:	6020      	str	r0, [r4, #0]
 8019840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019844:	81a3      	strh	r3, [r4, #12]
 8019846:	9b00      	ldr	r3, [sp, #0]
 8019848:	6163      	str	r3, [r4, #20]
 801984a:	9b01      	ldr	r3, [sp, #4]
 801984c:	6120      	str	r0, [r4, #16]
 801984e:	b15b      	cbz	r3, 8019868 <__smakebuf_r+0x74>
 8019850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019854:	4630      	mov	r0, r6
 8019856:	f000 fcab 	bl	801a1b0 <_isatty_r>
 801985a:	b128      	cbz	r0, 8019868 <__smakebuf_r+0x74>
 801985c:	89a3      	ldrh	r3, [r4, #12]
 801985e:	f023 0303 	bic.w	r3, r3, #3
 8019862:	f043 0301 	orr.w	r3, r3, #1
 8019866:	81a3      	strh	r3, [r4, #12]
 8019868:	89a0      	ldrh	r0, [r4, #12]
 801986a:	4305      	orrs	r5, r0
 801986c:	81a5      	strh	r5, [r4, #12]
 801986e:	e7cd      	b.n	801980c <__smakebuf_r+0x18>
 8019870:	08019601 	.word	0x08019601

08019874 <_free_r>:
 8019874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019876:	2900      	cmp	r1, #0
 8019878:	d044      	beq.n	8019904 <_free_r+0x90>
 801987a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801987e:	9001      	str	r0, [sp, #4]
 8019880:	2b00      	cmp	r3, #0
 8019882:	f1a1 0404 	sub.w	r4, r1, #4
 8019886:	bfb8      	it	lt
 8019888:	18e4      	addlt	r4, r4, r3
 801988a:	f000 fcb3 	bl	801a1f4 <__malloc_lock>
 801988e:	4a1e      	ldr	r2, [pc, #120]	; (8019908 <_free_r+0x94>)
 8019890:	9801      	ldr	r0, [sp, #4]
 8019892:	6813      	ldr	r3, [r2, #0]
 8019894:	b933      	cbnz	r3, 80198a4 <_free_r+0x30>
 8019896:	6063      	str	r3, [r4, #4]
 8019898:	6014      	str	r4, [r2, #0]
 801989a:	b003      	add	sp, #12
 801989c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198a0:	f000 bcae 	b.w	801a200 <__malloc_unlock>
 80198a4:	42a3      	cmp	r3, r4
 80198a6:	d908      	bls.n	80198ba <_free_r+0x46>
 80198a8:	6825      	ldr	r5, [r4, #0]
 80198aa:	1961      	adds	r1, r4, r5
 80198ac:	428b      	cmp	r3, r1
 80198ae:	bf01      	itttt	eq
 80198b0:	6819      	ldreq	r1, [r3, #0]
 80198b2:	685b      	ldreq	r3, [r3, #4]
 80198b4:	1949      	addeq	r1, r1, r5
 80198b6:	6021      	streq	r1, [r4, #0]
 80198b8:	e7ed      	b.n	8019896 <_free_r+0x22>
 80198ba:	461a      	mov	r2, r3
 80198bc:	685b      	ldr	r3, [r3, #4]
 80198be:	b10b      	cbz	r3, 80198c4 <_free_r+0x50>
 80198c0:	42a3      	cmp	r3, r4
 80198c2:	d9fa      	bls.n	80198ba <_free_r+0x46>
 80198c4:	6811      	ldr	r1, [r2, #0]
 80198c6:	1855      	adds	r5, r2, r1
 80198c8:	42a5      	cmp	r5, r4
 80198ca:	d10b      	bne.n	80198e4 <_free_r+0x70>
 80198cc:	6824      	ldr	r4, [r4, #0]
 80198ce:	4421      	add	r1, r4
 80198d0:	1854      	adds	r4, r2, r1
 80198d2:	42a3      	cmp	r3, r4
 80198d4:	6011      	str	r1, [r2, #0]
 80198d6:	d1e0      	bne.n	801989a <_free_r+0x26>
 80198d8:	681c      	ldr	r4, [r3, #0]
 80198da:	685b      	ldr	r3, [r3, #4]
 80198dc:	6053      	str	r3, [r2, #4]
 80198de:	4421      	add	r1, r4
 80198e0:	6011      	str	r1, [r2, #0]
 80198e2:	e7da      	b.n	801989a <_free_r+0x26>
 80198e4:	d902      	bls.n	80198ec <_free_r+0x78>
 80198e6:	230c      	movs	r3, #12
 80198e8:	6003      	str	r3, [r0, #0]
 80198ea:	e7d6      	b.n	801989a <_free_r+0x26>
 80198ec:	6825      	ldr	r5, [r4, #0]
 80198ee:	1961      	adds	r1, r4, r5
 80198f0:	428b      	cmp	r3, r1
 80198f2:	bf04      	itt	eq
 80198f4:	6819      	ldreq	r1, [r3, #0]
 80198f6:	685b      	ldreq	r3, [r3, #4]
 80198f8:	6063      	str	r3, [r4, #4]
 80198fa:	bf04      	itt	eq
 80198fc:	1949      	addeq	r1, r1, r5
 80198fe:	6021      	streq	r1, [r4, #0]
 8019900:	6054      	str	r4, [r2, #4]
 8019902:	e7ca      	b.n	801989a <_free_r+0x26>
 8019904:	b003      	add	sp, #12
 8019906:	bd30      	pop	{r4, r5, pc}
 8019908:	200086b8 	.word	0x200086b8

0801990c <sbrk_aligned>:
 801990c:	b570      	push	{r4, r5, r6, lr}
 801990e:	4e0e      	ldr	r6, [pc, #56]	; (8019948 <sbrk_aligned+0x3c>)
 8019910:	460c      	mov	r4, r1
 8019912:	6831      	ldr	r1, [r6, #0]
 8019914:	4605      	mov	r5, r0
 8019916:	b911      	cbnz	r1, 801991e <sbrk_aligned+0x12>
 8019918:	f000 fbc2 	bl	801a0a0 <_sbrk_r>
 801991c:	6030      	str	r0, [r6, #0]
 801991e:	4621      	mov	r1, r4
 8019920:	4628      	mov	r0, r5
 8019922:	f000 fbbd 	bl	801a0a0 <_sbrk_r>
 8019926:	1c43      	adds	r3, r0, #1
 8019928:	d00a      	beq.n	8019940 <sbrk_aligned+0x34>
 801992a:	1cc4      	adds	r4, r0, #3
 801992c:	f024 0403 	bic.w	r4, r4, #3
 8019930:	42a0      	cmp	r0, r4
 8019932:	d007      	beq.n	8019944 <sbrk_aligned+0x38>
 8019934:	1a21      	subs	r1, r4, r0
 8019936:	4628      	mov	r0, r5
 8019938:	f000 fbb2 	bl	801a0a0 <_sbrk_r>
 801993c:	3001      	adds	r0, #1
 801993e:	d101      	bne.n	8019944 <sbrk_aligned+0x38>
 8019940:	f04f 34ff 	mov.w	r4, #4294967295
 8019944:	4620      	mov	r0, r4
 8019946:	bd70      	pop	{r4, r5, r6, pc}
 8019948:	200086bc 	.word	0x200086bc

0801994c <_malloc_r>:
 801994c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019950:	1ccd      	adds	r5, r1, #3
 8019952:	f025 0503 	bic.w	r5, r5, #3
 8019956:	3508      	adds	r5, #8
 8019958:	2d0c      	cmp	r5, #12
 801995a:	bf38      	it	cc
 801995c:	250c      	movcc	r5, #12
 801995e:	2d00      	cmp	r5, #0
 8019960:	4607      	mov	r7, r0
 8019962:	db01      	blt.n	8019968 <_malloc_r+0x1c>
 8019964:	42a9      	cmp	r1, r5
 8019966:	d905      	bls.n	8019974 <_malloc_r+0x28>
 8019968:	230c      	movs	r3, #12
 801996a:	603b      	str	r3, [r7, #0]
 801996c:	2600      	movs	r6, #0
 801996e:	4630      	mov	r0, r6
 8019970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019974:	4e2e      	ldr	r6, [pc, #184]	; (8019a30 <_malloc_r+0xe4>)
 8019976:	f000 fc3d 	bl	801a1f4 <__malloc_lock>
 801997a:	6833      	ldr	r3, [r6, #0]
 801997c:	461c      	mov	r4, r3
 801997e:	bb34      	cbnz	r4, 80199ce <_malloc_r+0x82>
 8019980:	4629      	mov	r1, r5
 8019982:	4638      	mov	r0, r7
 8019984:	f7ff ffc2 	bl	801990c <sbrk_aligned>
 8019988:	1c43      	adds	r3, r0, #1
 801998a:	4604      	mov	r4, r0
 801998c:	d14d      	bne.n	8019a2a <_malloc_r+0xde>
 801998e:	6834      	ldr	r4, [r6, #0]
 8019990:	4626      	mov	r6, r4
 8019992:	2e00      	cmp	r6, #0
 8019994:	d140      	bne.n	8019a18 <_malloc_r+0xcc>
 8019996:	6823      	ldr	r3, [r4, #0]
 8019998:	4631      	mov	r1, r6
 801999a:	4638      	mov	r0, r7
 801999c:	eb04 0803 	add.w	r8, r4, r3
 80199a0:	f000 fb7e 	bl	801a0a0 <_sbrk_r>
 80199a4:	4580      	cmp	r8, r0
 80199a6:	d13a      	bne.n	8019a1e <_malloc_r+0xd2>
 80199a8:	6821      	ldr	r1, [r4, #0]
 80199aa:	3503      	adds	r5, #3
 80199ac:	1a6d      	subs	r5, r5, r1
 80199ae:	f025 0503 	bic.w	r5, r5, #3
 80199b2:	3508      	adds	r5, #8
 80199b4:	2d0c      	cmp	r5, #12
 80199b6:	bf38      	it	cc
 80199b8:	250c      	movcc	r5, #12
 80199ba:	4629      	mov	r1, r5
 80199bc:	4638      	mov	r0, r7
 80199be:	f7ff ffa5 	bl	801990c <sbrk_aligned>
 80199c2:	3001      	adds	r0, #1
 80199c4:	d02b      	beq.n	8019a1e <_malloc_r+0xd2>
 80199c6:	6823      	ldr	r3, [r4, #0]
 80199c8:	442b      	add	r3, r5
 80199ca:	6023      	str	r3, [r4, #0]
 80199cc:	e00e      	b.n	80199ec <_malloc_r+0xa0>
 80199ce:	6822      	ldr	r2, [r4, #0]
 80199d0:	1b52      	subs	r2, r2, r5
 80199d2:	d41e      	bmi.n	8019a12 <_malloc_r+0xc6>
 80199d4:	2a0b      	cmp	r2, #11
 80199d6:	d916      	bls.n	8019a06 <_malloc_r+0xba>
 80199d8:	1961      	adds	r1, r4, r5
 80199da:	42a3      	cmp	r3, r4
 80199dc:	6025      	str	r5, [r4, #0]
 80199de:	bf18      	it	ne
 80199e0:	6059      	strne	r1, [r3, #4]
 80199e2:	6863      	ldr	r3, [r4, #4]
 80199e4:	bf08      	it	eq
 80199e6:	6031      	streq	r1, [r6, #0]
 80199e8:	5162      	str	r2, [r4, r5]
 80199ea:	604b      	str	r3, [r1, #4]
 80199ec:	4638      	mov	r0, r7
 80199ee:	f104 060b 	add.w	r6, r4, #11
 80199f2:	f000 fc05 	bl	801a200 <__malloc_unlock>
 80199f6:	f026 0607 	bic.w	r6, r6, #7
 80199fa:	1d23      	adds	r3, r4, #4
 80199fc:	1af2      	subs	r2, r6, r3
 80199fe:	d0b6      	beq.n	801996e <_malloc_r+0x22>
 8019a00:	1b9b      	subs	r3, r3, r6
 8019a02:	50a3      	str	r3, [r4, r2]
 8019a04:	e7b3      	b.n	801996e <_malloc_r+0x22>
 8019a06:	6862      	ldr	r2, [r4, #4]
 8019a08:	42a3      	cmp	r3, r4
 8019a0a:	bf0c      	ite	eq
 8019a0c:	6032      	streq	r2, [r6, #0]
 8019a0e:	605a      	strne	r2, [r3, #4]
 8019a10:	e7ec      	b.n	80199ec <_malloc_r+0xa0>
 8019a12:	4623      	mov	r3, r4
 8019a14:	6864      	ldr	r4, [r4, #4]
 8019a16:	e7b2      	b.n	801997e <_malloc_r+0x32>
 8019a18:	4634      	mov	r4, r6
 8019a1a:	6876      	ldr	r6, [r6, #4]
 8019a1c:	e7b9      	b.n	8019992 <_malloc_r+0x46>
 8019a1e:	230c      	movs	r3, #12
 8019a20:	603b      	str	r3, [r7, #0]
 8019a22:	4638      	mov	r0, r7
 8019a24:	f000 fbec 	bl	801a200 <__malloc_unlock>
 8019a28:	e7a1      	b.n	801996e <_malloc_r+0x22>
 8019a2a:	6025      	str	r5, [r4, #0]
 8019a2c:	e7de      	b.n	80199ec <_malloc_r+0xa0>
 8019a2e:	bf00      	nop
 8019a30:	200086b8 	.word	0x200086b8

08019a34 <__sfputc_r>:
 8019a34:	6893      	ldr	r3, [r2, #8]
 8019a36:	3b01      	subs	r3, #1
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	b410      	push	{r4}
 8019a3c:	6093      	str	r3, [r2, #8]
 8019a3e:	da08      	bge.n	8019a52 <__sfputc_r+0x1e>
 8019a40:	6994      	ldr	r4, [r2, #24]
 8019a42:	42a3      	cmp	r3, r4
 8019a44:	db01      	blt.n	8019a4a <__sfputc_r+0x16>
 8019a46:	290a      	cmp	r1, #10
 8019a48:	d103      	bne.n	8019a52 <__sfputc_r+0x1e>
 8019a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a4e:	f7ff bc31 	b.w	80192b4 <__swbuf_r>
 8019a52:	6813      	ldr	r3, [r2, #0]
 8019a54:	1c58      	adds	r0, r3, #1
 8019a56:	6010      	str	r0, [r2, #0]
 8019a58:	7019      	strb	r1, [r3, #0]
 8019a5a:	4608      	mov	r0, r1
 8019a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a60:	4770      	bx	lr

08019a62 <__sfputs_r>:
 8019a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a64:	4606      	mov	r6, r0
 8019a66:	460f      	mov	r7, r1
 8019a68:	4614      	mov	r4, r2
 8019a6a:	18d5      	adds	r5, r2, r3
 8019a6c:	42ac      	cmp	r4, r5
 8019a6e:	d101      	bne.n	8019a74 <__sfputs_r+0x12>
 8019a70:	2000      	movs	r0, #0
 8019a72:	e007      	b.n	8019a84 <__sfputs_r+0x22>
 8019a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a78:	463a      	mov	r2, r7
 8019a7a:	4630      	mov	r0, r6
 8019a7c:	f7ff ffda 	bl	8019a34 <__sfputc_r>
 8019a80:	1c43      	adds	r3, r0, #1
 8019a82:	d1f3      	bne.n	8019a6c <__sfputs_r+0xa>
 8019a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019a88 <_vfiprintf_r>:
 8019a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a8c:	460d      	mov	r5, r1
 8019a8e:	b09d      	sub	sp, #116	; 0x74
 8019a90:	4614      	mov	r4, r2
 8019a92:	4698      	mov	r8, r3
 8019a94:	4606      	mov	r6, r0
 8019a96:	b118      	cbz	r0, 8019aa0 <_vfiprintf_r+0x18>
 8019a98:	6983      	ldr	r3, [r0, #24]
 8019a9a:	b90b      	cbnz	r3, 8019aa0 <_vfiprintf_r+0x18>
 8019a9c:	f7ff fde4 	bl	8019668 <__sinit>
 8019aa0:	4b89      	ldr	r3, [pc, #548]	; (8019cc8 <_vfiprintf_r+0x240>)
 8019aa2:	429d      	cmp	r5, r3
 8019aa4:	d11b      	bne.n	8019ade <_vfiprintf_r+0x56>
 8019aa6:	6875      	ldr	r5, [r6, #4]
 8019aa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019aaa:	07d9      	lsls	r1, r3, #31
 8019aac:	d405      	bmi.n	8019aba <_vfiprintf_r+0x32>
 8019aae:	89ab      	ldrh	r3, [r5, #12]
 8019ab0:	059a      	lsls	r2, r3, #22
 8019ab2:	d402      	bmi.n	8019aba <_vfiprintf_r+0x32>
 8019ab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ab6:	f7ff fe75 	bl	80197a4 <__retarget_lock_acquire_recursive>
 8019aba:	89ab      	ldrh	r3, [r5, #12]
 8019abc:	071b      	lsls	r3, r3, #28
 8019abe:	d501      	bpl.n	8019ac4 <_vfiprintf_r+0x3c>
 8019ac0:	692b      	ldr	r3, [r5, #16]
 8019ac2:	b9eb      	cbnz	r3, 8019b00 <_vfiprintf_r+0x78>
 8019ac4:	4629      	mov	r1, r5
 8019ac6:	4630      	mov	r0, r6
 8019ac8:	f7ff fc46 	bl	8019358 <__swsetup_r>
 8019acc:	b1c0      	cbz	r0, 8019b00 <_vfiprintf_r+0x78>
 8019ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ad0:	07dc      	lsls	r4, r3, #31
 8019ad2:	d50e      	bpl.n	8019af2 <_vfiprintf_r+0x6a>
 8019ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8019ad8:	b01d      	add	sp, #116	; 0x74
 8019ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ade:	4b7b      	ldr	r3, [pc, #492]	; (8019ccc <_vfiprintf_r+0x244>)
 8019ae0:	429d      	cmp	r5, r3
 8019ae2:	d101      	bne.n	8019ae8 <_vfiprintf_r+0x60>
 8019ae4:	68b5      	ldr	r5, [r6, #8]
 8019ae6:	e7df      	b.n	8019aa8 <_vfiprintf_r+0x20>
 8019ae8:	4b79      	ldr	r3, [pc, #484]	; (8019cd0 <_vfiprintf_r+0x248>)
 8019aea:	429d      	cmp	r5, r3
 8019aec:	bf08      	it	eq
 8019aee:	68f5      	ldreq	r5, [r6, #12]
 8019af0:	e7da      	b.n	8019aa8 <_vfiprintf_r+0x20>
 8019af2:	89ab      	ldrh	r3, [r5, #12]
 8019af4:	0598      	lsls	r0, r3, #22
 8019af6:	d4ed      	bmi.n	8019ad4 <_vfiprintf_r+0x4c>
 8019af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019afa:	f7ff fe54 	bl	80197a6 <__retarget_lock_release_recursive>
 8019afe:	e7e9      	b.n	8019ad4 <_vfiprintf_r+0x4c>
 8019b00:	2300      	movs	r3, #0
 8019b02:	9309      	str	r3, [sp, #36]	; 0x24
 8019b04:	2320      	movs	r3, #32
 8019b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b0e:	2330      	movs	r3, #48	; 0x30
 8019b10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019cd4 <_vfiprintf_r+0x24c>
 8019b14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b18:	f04f 0901 	mov.w	r9, #1
 8019b1c:	4623      	mov	r3, r4
 8019b1e:	469a      	mov	sl, r3
 8019b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b24:	b10a      	cbz	r2, 8019b2a <_vfiprintf_r+0xa2>
 8019b26:	2a25      	cmp	r2, #37	; 0x25
 8019b28:	d1f9      	bne.n	8019b1e <_vfiprintf_r+0x96>
 8019b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8019b2e:	d00b      	beq.n	8019b48 <_vfiprintf_r+0xc0>
 8019b30:	465b      	mov	r3, fp
 8019b32:	4622      	mov	r2, r4
 8019b34:	4629      	mov	r1, r5
 8019b36:	4630      	mov	r0, r6
 8019b38:	f7ff ff93 	bl	8019a62 <__sfputs_r>
 8019b3c:	3001      	adds	r0, #1
 8019b3e:	f000 80aa 	beq.w	8019c96 <_vfiprintf_r+0x20e>
 8019b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b44:	445a      	add	r2, fp
 8019b46:	9209      	str	r2, [sp, #36]	; 0x24
 8019b48:	f89a 3000 	ldrb.w	r3, [sl]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	f000 80a2 	beq.w	8019c96 <_vfiprintf_r+0x20e>
 8019b52:	2300      	movs	r3, #0
 8019b54:	f04f 32ff 	mov.w	r2, #4294967295
 8019b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b5c:	f10a 0a01 	add.w	sl, sl, #1
 8019b60:	9304      	str	r3, [sp, #16]
 8019b62:	9307      	str	r3, [sp, #28]
 8019b64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b68:	931a      	str	r3, [sp, #104]	; 0x68
 8019b6a:	4654      	mov	r4, sl
 8019b6c:	2205      	movs	r2, #5
 8019b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b72:	4858      	ldr	r0, [pc, #352]	; (8019cd4 <_vfiprintf_r+0x24c>)
 8019b74:	f7e6 fb04 	bl	8000180 <memchr>
 8019b78:	9a04      	ldr	r2, [sp, #16]
 8019b7a:	b9d8      	cbnz	r0, 8019bb4 <_vfiprintf_r+0x12c>
 8019b7c:	06d1      	lsls	r1, r2, #27
 8019b7e:	bf44      	itt	mi
 8019b80:	2320      	movmi	r3, #32
 8019b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b86:	0713      	lsls	r3, r2, #28
 8019b88:	bf44      	itt	mi
 8019b8a:	232b      	movmi	r3, #43	; 0x2b
 8019b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019b90:	f89a 3000 	ldrb.w	r3, [sl]
 8019b94:	2b2a      	cmp	r3, #42	; 0x2a
 8019b96:	d015      	beq.n	8019bc4 <_vfiprintf_r+0x13c>
 8019b98:	9a07      	ldr	r2, [sp, #28]
 8019b9a:	4654      	mov	r4, sl
 8019b9c:	2000      	movs	r0, #0
 8019b9e:	f04f 0c0a 	mov.w	ip, #10
 8019ba2:	4621      	mov	r1, r4
 8019ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ba8:	3b30      	subs	r3, #48	; 0x30
 8019baa:	2b09      	cmp	r3, #9
 8019bac:	d94e      	bls.n	8019c4c <_vfiprintf_r+0x1c4>
 8019bae:	b1b0      	cbz	r0, 8019bde <_vfiprintf_r+0x156>
 8019bb0:	9207      	str	r2, [sp, #28]
 8019bb2:	e014      	b.n	8019bde <_vfiprintf_r+0x156>
 8019bb4:	eba0 0308 	sub.w	r3, r0, r8
 8019bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8019bbc:	4313      	orrs	r3, r2
 8019bbe:	9304      	str	r3, [sp, #16]
 8019bc0:	46a2      	mov	sl, r4
 8019bc2:	e7d2      	b.n	8019b6a <_vfiprintf_r+0xe2>
 8019bc4:	9b03      	ldr	r3, [sp, #12]
 8019bc6:	1d19      	adds	r1, r3, #4
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	9103      	str	r1, [sp, #12]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	bfbb      	ittet	lt
 8019bd0:	425b      	neglt	r3, r3
 8019bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8019bd6:	9307      	strge	r3, [sp, #28]
 8019bd8:	9307      	strlt	r3, [sp, #28]
 8019bda:	bfb8      	it	lt
 8019bdc:	9204      	strlt	r2, [sp, #16]
 8019bde:	7823      	ldrb	r3, [r4, #0]
 8019be0:	2b2e      	cmp	r3, #46	; 0x2e
 8019be2:	d10c      	bne.n	8019bfe <_vfiprintf_r+0x176>
 8019be4:	7863      	ldrb	r3, [r4, #1]
 8019be6:	2b2a      	cmp	r3, #42	; 0x2a
 8019be8:	d135      	bne.n	8019c56 <_vfiprintf_r+0x1ce>
 8019bea:	9b03      	ldr	r3, [sp, #12]
 8019bec:	1d1a      	adds	r2, r3, #4
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	9203      	str	r2, [sp, #12]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	bfb8      	it	lt
 8019bf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8019bfa:	3402      	adds	r4, #2
 8019bfc:	9305      	str	r3, [sp, #20]
 8019bfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019ce4 <_vfiprintf_r+0x25c>
 8019c02:	7821      	ldrb	r1, [r4, #0]
 8019c04:	2203      	movs	r2, #3
 8019c06:	4650      	mov	r0, sl
 8019c08:	f7e6 faba 	bl	8000180 <memchr>
 8019c0c:	b140      	cbz	r0, 8019c20 <_vfiprintf_r+0x198>
 8019c0e:	2340      	movs	r3, #64	; 0x40
 8019c10:	eba0 000a 	sub.w	r0, r0, sl
 8019c14:	fa03 f000 	lsl.w	r0, r3, r0
 8019c18:	9b04      	ldr	r3, [sp, #16]
 8019c1a:	4303      	orrs	r3, r0
 8019c1c:	3401      	adds	r4, #1
 8019c1e:	9304      	str	r3, [sp, #16]
 8019c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c24:	482c      	ldr	r0, [pc, #176]	; (8019cd8 <_vfiprintf_r+0x250>)
 8019c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c2a:	2206      	movs	r2, #6
 8019c2c:	f7e6 faa8 	bl	8000180 <memchr>
 8019c30:	2800      	cmp	r0, #0
 8019c32:	d03f      	beq.n	8019cb4 <_vfiprintf_r+0x22c>
 8019c34:	4b29      	ldr	r3, [pc, #164]	; (8019cdc <_vfiprintf_r+0x254>)
 8019c36:	bb1b      	cbnz	r3, 8019c80 <_vfiprintf_r+0x1f8>
 8019c38:	9b03      	ldr	r3, [sp, #12]
 8019c3a:	3307      	adds	r3, #7
 8019c3c:	f023 0307 	bic.w	r3, r3, #7
 8019c40:	3308      	adds	r3, #8
 8019c42:	9303      	str	r3, [sp, #12]
 8019c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c46:	443b      	add	r3, r7
 8019c48:	9309      	str	r3, [sp, #36]	; 0x24
 8019c4a:	e767      	b.n	8019b1c <_vfiprintf_r+0x94>
 8019c4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c50:	460c      	mov	r4, r1
 8019c52:	2001      	movs	r0, #1
 8019c54:	e7a5      	b.n	8019ba2 <_vfiprintf_r+0x11a>
 8019c56:	2300      	movs	r3, #0
 8019c58:	3401      	adds	r4, #1
 8019c5a:	9305      	str	r3, [sp, #20]
 8019c5c:	4619      	mov	r1, r3
 8019c5e:	f04f 0c0a 	mov.w	ip, #10
 8019c62:	4620      	mov	r0, r4
 8019c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c68:	3a30      	subs	r2, #48	; 0x30
 8019c6a:	2a09      	cmp	r2, #9
 8019c6c:	d903      	bls.n	8019c76 <_vfiprintf_r+0x1ee>
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d0c5      	beq.n	8019bfe <_vfiprintf_r+0x176>
 8019c72:	9105      	str	r1, [sp, #20]
 8019c74:	e7c3      	b.n	8019bfe <_vfiprintf_r+0x176>
 8019c76:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c7a:	4604      	mov	r4, r0
 8019c7c:	2301      	movs	r3, #1
 8019c7e:	e7f0      	b.n	8019c62 <_vfiprintf_r+0x1da>
 8019c80:	ab03      	add	r3, sp, #12
 8019c82:	9300      	str	r3, [sp, #0]
 8019c84:	462a      	mov	r2, r5
 8019c86:	4b16      	ldr	r3, [pc, #88]	; (8019ce0 <_vfiprintf_r+0x258>)
 8019c88:	a904      	add	r1, sp, #16
 8019c8a:	4630      	mov	r0, r6
 8019c8c:	f3af 8000 	nop.w
 8019c90:	4607      	mov	r7, r0
 8019c92:	1c78      	adds	r0, r7, #1
 8019c94:	d1d6      	bne.n	8019c44 <_vfiprintf_r+0x1bc>
 8019c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019c98:	07d9      	lsls	r1, r3, #31
 8019c9a:	d405      	bmi.n	8019ca8 <_vfiprintf_r+0x220>
 8019c9c:	89ab      	ldrh	r3, [r5, #12]
 8019c9e:	059a      	lsls	r2, r3, #22
 8019ca0:	d402      	bmi.n	8019ca8 <_vfiprintf_r+0x220>
 8019ca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019ca4:	f7ff fd7f 	bl	80197a6 <__retarget_lock_release_recursive>
 8019ca8:	89ab      	ldrh	r3, [r5, #12]
 8019caa:	065b      	lsls	r3, r3, #25
 8019cac:	f53f af12 	bmi.w	8019ad4 <_vfiprintf_r+0x4c>
 8019cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019cb2:	e711      	b.n	8019ad8 <_vfiprintf_r+0x50>
 8019cb4:	ab03      	add	r3, sp, #12
 8019cb6:	9300      	str	r3, [sp, #0]
 8019cb8:	462a      	mov	r2, r5
 8019cba:	4b09      	ldr	r3, [pc, #36]	; (8019ce0 <_vfiprintf_r+0x258>)
 8019cbc:	a904      	add	r1, sp, #16
 8019cbe:	4630      	mov	r0, r6
 8019cc0:	f000 f880 	bl	8019dc4 <_printf_i>
 8019cc4:	e7e4      	b.n	8019c90 <_vfiprintf_r+0x208>
 8019cc6:	bf00      	nop
 8019cc8:	0801a460 	.word	0x0801a460
 8019ccc:	0801a480 	.word	0x0801a480
 8019cd0:	0801a440 	.word	0x0801a440
 8019cd4:	0801a4a0 	.word	0x0801a4a0
 8019cd8:	0801a4aa 	.word	0x0801a4aa
 8019cdc:	00000000 	.word	0x00000000
 8019ce0:	08019a63 	.word	0x08019a63
 8019ce4:	0801a4a6 	.word	0x0801a4a6

08019ce8 <_printf_common>:
 8019ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019cec:	4616      	mov	r6, r2
 8019cee:	4699      	mov	r9, r3
 8019cf0:	688a      	ldr	r2, [r1, #8]
 8019cf2:	690b      	ldr	r3, [r1, #16]
 8019cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019cf8:	4293      	cmp	r3, r2
 8019cfa:	bfb8      	it	lt
 8019cfc:	4613      	movlt	r3, r2
 8019cfe:	6033      	str	r3, [r6, #0]
 8019d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019d04:	4607      	mov	r7, r0
 8019d06:	460c      	mov	r4, r1
 8019d08:	b10a      	cbz	r2, 8019d0e <_printf_common+0x26>
 8019d0a:	3301      	adds	r3, #1
 8019d0c:	6033      	str	r3, [r6, #0]
 8019d0e:	6823      	ldr	r3, [r4, #0]
 8019d10:	0699      	lsls	r1, r3, #26
 8019d12:	bf42      	ittt	mi
 8019d14:	6833      	ldrmi	r3, [r6, #0]
 8019d16:	3302      	addmi	r3, #2
 8019d18:	6033      	strmi	r3, [r6, #0]
 8019d1a:	6825      	ldr	r5, [r4, #0]
 8019d1c:	f015 0506 	ands.w	r5, r5, #6
 8019d20:	d106      	bne.n	8019d30 <_printf_common+0x48>
 8019d22:	f104 0a19 	add.w	sl, r4, #25
 8019d26:	68e3      	ldr	r3, [r4, #12]
 8019d28:	6832      	ldr	r2, [r6, #0]
 8019d2a:	1a9b      	subs	r3, r3, r2
 8019d2c:	42ab      	cmp	r3, r5
 8019d2e:	dc26      	bgt.n	8019d7e <_printf_common+0x96>
 8019d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019d34:	1e13      	subs	r3, r2, #0
 8019d36:	6822      	ldr	r2, [r4, #0]
 8019d38:	bf18      	it	ne
 8019d3a:	2301      	movne	r3, #1
 8019d3c:	0692      	lsls	r2, r2, #26
 8019d3e:	d42b      	bmi.n	8019d98 <_printf_common+0xb0>
 8019d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019d44:	4649      	mov	r1, r9
 8019d46:	4638      	mov	r0, r7
 8019d48:	47c0      	blx	r8
 8019d4a:	3001      	adds	r0, #1
 8019d4c:	d01e      	beq.n	8019d8c <_printf_common+0xa4>
 8019d4e:	6823      	ldr	r3, [r4, #0]
 8019d50:	68e5      	ldr	r5, [r4, #12]
 8019d52:	6832      	ldr	r2, [r6, #0]
 8019d54:	f003 0306 	and.w	r3, r3, #6
 8019d58:	2b04      	cmp	r3, #4
 8019d5a:	bf08      	it	eq
 8019d5c:	1aad      	subeq	r5, r5, r2
 8019d5e:	68a3      	ldr	r3, [r4, #8]
 8019d60:	6922      	ldr	r2, [r4, #16]
 8019d62:	bf0c      	ite	eq
 8019d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019d68:	2500      	movne	r5, #0
 8019d6a:	4293      	cmp	r3, r2
 8019d6c:	bfc4      	itt	gt
 8019d6e:	1a9b      	subgt	r3, r3, r2
 8019d70:	18ed      	addgt	r5, r5, r3
 8019d72:	2600      	movs	r6, #0
 8019d74:	341a      	adds	r4, #26
 8019d76:	42b5      	cmp	r5, r6
 8019d78:	d11a      	bne.n	8019db0 <_printf_common+0xc8>
 8019d7a:	2000      	movs	r0, #0
 8019d7c:	e008      	b.n	8019d90 <_printf_common+0xa8>
 8019d7e:	2301      	movs	r3, #1
 8019d80:	4652      	mov	r2, sl
 8019d82:	4649      	mov	r1, r9
 8019d84:	4638      	mov	r0, r7
 8019d86:	47c0      	blx	r8
 8019d88:	3001      	adds	r0, #1
 8019d8a:	d103      	bne.n	8019d94 <_printf_common+0xac>
 8019d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8019d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d94:	3501      	adds	r5, #1
 8019d96:	e7c6      	b.n	8019d26 <_printf_common+0x3e>
 8019d98:	18e1      	adds	r1, r4, r3
 8019d9a:	1c5a      	adds	r2, r3, #1
 8019d9c:	2030      	movs	r0, #48	; 0x30
 8019d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019da2:	4422      	add	r2, r4
 8019da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019dac:	3302      	adds	r3, #2
 8019dae:	e7c7      	b.n	8019d40 <_printf_common+0x58>
 8019db0:	2301      	movs	r3, #1
 8019db2:	4622      	mov	r2, r4
 8019db4:	4649      	mov	r1, r9
 8019db6:	4638      	mov	r0, r7
 8019db8:	47c0      	blx	r8
 8019dba:	3001      	adds	r0, #1
 8019dbc:	d0e6      	beq.n	8019d8c <_printf_common+0xa4>
 8019dbe:	3601      	adds	r6, #1
 8019dc0:	e7d9      	b.n	8019d76 <_printf_common+0x8e>
	...

08019dc4 <_printf_i>:
 8019dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019dc8:	7e0f      	ldrb	r7, [r1, #24]
 8019dca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019dcc:	2f78      	cmp	r7, #120	; 0x78
 8019dce:	4691      	mov	r9, r2
 8019dd0:	4680      	mov	r8, r0
 8019dd2:	460c      	mov	r4, r1
 8019dd4:	469a      	mov	sl, r3
 8019dd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019dda:	d807      	bhi.n	8019dec <_printf_i+0x28>
 8019ddc:	2f62      	cmp	r7, #98	; 0x62
 8019dde:	d80a      	bhi.n	8019df6 <_printf_i+0x32>
 8019de0:	2f00      	cmp	r7, #0
 8019de2:	f000 80d8 	beq.w	8019f96 <_printf_i+0x1d2>
 8019de6:	2f58      	cmp	r7, #88	; 0x58
 8019de8:	f000 80a3 	beq.w	8019f32 <_printf_i+0x16e>
 8019dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019df4:	e03a      	b.n	8019e6c <_printf_i+0xa8>
 8019df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019dfa:	2b15      	cmp	r3, #21
 8019dfc:	d8f6      	bhi.n	8019dec <_printf_i+0x28>
 8019dfe:	a101      	add	r1, pc, #4	; (adr r1, 8019e04 <_printf_i+0x40>)
 8019e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019e04:	08019e5d 	.word	0x08019e5d
 8019e08:	08019e71 	.word	0x08019e71
 8019e0c:	08019ded 	.word	0x08019ded
 8019e10:	08019ded 	.word	0x08019ded
 8019e14:	08019ded 	.word	0x08019ded
 8019e18:	08019ded 	.word	0x08019ded
 8019e1c:	08019e71 	.word	0x08019e71
 8019e20:	08019ded 	.word	0x08019ded
 8019e24:	08019ded 	.word	0x08019ded
 8019e28:	08019ded 	.word	0x08019ded
 8019e2c:	08019ded 	.word	0x08019ded
 8019e30:	08019f7d 	.word	0x08019f7d
 8019e34:	08019ea1 	.word	0x08019ea1
 8019e38:	08019f5f 	.word	0x08019f5f
 8019e3c:	08019ded 	.word	0x08019ded
 8019e40:	08019ded 	.word	0x08019ded
 8019e44:	08019f9f 	.word	0x08019f9f
 8019e48:	08019ded 	.word	0x08019ded
 8019e4c:	08019ea1 	.word	0x08019ea1
 8019e50:	08019ded 	.word	0x08019ded
 8019e54:	08019ded 	.word	0x08019ded
 8019e58:	08019f67 	.word	0x08019f67
 8019e5c:	682b      	ldr	r3, [r5, #0]
 8019e5e:	1d1a      	adds	r2, r3, #4
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	602a      	str	r2, [r5, #0]
 8019e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019e6c:	2301      	movs	r3, #1
 8019e6e:	e0a3      	b.n	8019fb8 <_printf_i+0x1f4>
 8019e70:	6820      	ldr	r0, [r4, #0]
 8019e72:	6829      	ldr	r1, [r5, #0]
 8019e74:	0606      	lsls	r6, r0, #24
 8019e76:	f101 0304 	add.w	r3, r1, #4
 8019e7a:	d50a      	bpl.n	8019e92 <_printf_i+0xce>
 8019e7c:	680e      	ldr	r6, [r1, #0]
 8019e7e:	602b      	str	r3, [r5, #0]
 8019e80:	2e00      	cmp	r6, #0
 8019e82:	da03      	bge.n	8019e8c <_printf_i+0xc8>
 8019e84:	232d      	movs	r3, #45	; 0x2d
 8019e86:	4276      	negs	r6, r6
 8019e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e8c:	485e      	ldr	r0, [pc, #376]	; (801a008 <_printf_i+0x244>)
 8019e8e:	230a      	movs	r3, #10
 8019e90:	e019      	b.n	8019ec6 <_printf_i+0x102>
 8019e92:	680e      	ldr	r6, [r1, #0]
 8019e94:	602b      	str	r3, [r5, #0]
 8019e96:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019e9a:	bf18      	it	ne
 8019e9c:	b236      	sxthne	r6, r6
 8019e9e:	e7ef      	b.n	8019e80 <_printf_i+0xbc>
 8019ea0:	682b      	ldr	r3, [r5, #0]
 8019ea2:	6820      	ldr	r0, [r4, #0]
 8019ea4:	1d19      	adds	r1, r3, #4
 8019ea6:	6029      	str	r1, [r5, #0]
 8019ea8:	0601      	lsls	r1, r0, #24
 8019eaa:	d501      	bpl.n	8019eb0 <_printf_i+0xec>
 8019eac:	681e      	ldr	r6, [r3, #0]
 8019eae:	e002      	b.n	8019eb6 <_printf_i+0xf2>
 8019eb0:	0646      	lsls	r6, r0, #25
 8019eb2:	d5fb      	bpl.n	8019eac <_printf_i+0xe8>
 8019eb4:	881e      	ldrh	r6, [r3, #0]
 8019eb6:	4854      	ldr	r0, [pc, #336]	; (801a008 <_printf_i+0x244>)
 8019eb8:	2f6f      	cmp	r7, #111	; 0x6f
 8019eba:	bf0c      	ite	eq
 8019ebc:	2308      	moveq	r3, #8
 8019ebe:	230a      	movne	r3, #10
 8019ec0:	2100      	movs	r1, #0
 8019ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019ec6:	6865      	ldr	r5, [r4, #4]
 8019ec8:	60a5      	str	r5, [r4, #8]
 8019eca:	2d00      	cmp	r5, #0
 8019ecc:	bfa2      	ittt	ge
 8019ece:	6821      	ldrge	r1, [r4, #0]
 8019ed0:	f021 0104 	bicge.w	r1, r1, #4
 8019ed4:	6021      	strge	r1, [r4, #0]
 8019ed6:	b90e      	cbnz	r6, 8019edc <_printf_i+0x118>
 8019ed8:	2d00      	cmp	r5, #0
 8019eda:	d04d      	beq.n	8019f78 <_printf_i+0x1b4>
 8019edc:	4615      	mov	r5, r2
 8019ede:	fbb6 f1f3 	udiv	r1, r6, r3
 8019ee2:	fb03 6711 	mls	r7, r3, r1, r6
 8019ee6:	5dc7      	ldrb	r7, [r0, r7]
 8019ee8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019eec:	4637      	mov	r7, r6
 8019eee:	42bb      	cmp	r3, r7
 8019ef0:	460e      	mov	r6, r1
 8019ef2:	d9f4      	bls.n	8019ede <_printf_i+0x11a>
 8019ef4:	2b08      	cmp	r3, #8
 8019ef6:	d10b      	bne.n	8019f10 <_printf_i+0x14c>
 8019ef8:	6823      	ldr	r3, [r4, #0]
 8019efa:	07de      	lsls	r6, r3, #31
 8019efc:	d508      	bpl.n	8019f10 <_printf_i+0x14c>
 8019efe:	6923      	ldr	r3, [r4, #16]
 8019f00:	6861      	ldr	r1, [r4, #4]
 8019f02:	4299      	cmp	r1, r3
 8019f04:	bfde      	ittt	le
 8019f06:	2330      	movle	r3, #48	; 0x30
 8019f08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019f0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019f10:	1b52      	subs	r2, r2, r5
 8019f12:	6122      	str	r2, [r4, #16]
 8019f14:	f8cd a000 	str.w	sl, [sp]
 8019f18:	464b      	mov	r3, r9
 8019f1a:	aa03      	add	r2, sp, #12
 8019f1c:	4621      	mov	r1, r4
 8019f1e:	4640      	mov	r0, r8
 8019f20:	f7ff fee2 	bl	8019ce8 <_printf_common>
 8019f24:	3001      	adds	r0, #1
 8019f26:	d14c      	bne.n	8019fc2 <_printf_i+0x1fe>
 8019f28:	f04f 30ff 	mov.w	r0, #4294967295
 8019f2c:	b004      	add	sp, #16
 8019f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f32:	4835      	ldr	r0, [pc, #212]	; (801a008 <_printf_i+0x244>)
 8019f34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019f38:	6829      	ldr	r1, [r5, #0]
 8019f3a:	6823      	ldr	r3, [r4, #0]
 8019f3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8019f40:	6029      	str	r1, [r5, #0]
 8019f42:	061d      	lsls	r5, r3, #24
 8019f44:	d514      	bpl.n	8019f70 <_printf_i+0x1ac>
 8019f46:	07df      	lsls	r7, r3, #31
 8019f48:	bf44      	itt	mi
 8019f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8019f4e:	6023      	strmi	r3, [r4, #0]
 8019f50:	b91e      	cbnz	r6, 8019f5a <_printf_i+0x196>
 8019f52:	6823      	ldr	r3, [r4, #0]
 8019f54:	f023 0320 	bic.w	r3, r3, #32
 8019f58:	6023      	str	r3, [r4, #0]
 8019f5a:	2310      	movs	r3, #16
 8019f5c:	e7b0      	b.n	8019ec0 <_printf_i+0xfc>
 8019f5e:	6823      	ldr	r3, [r4, #0]
 8019f60:	f043 0320 	orr.w	r3, r3, #32
 8019f64:	6023      	str	r3, [r4, #0]
 8019f66:	2378      	movs	r3, #120	; 0x78
 8019f68:	4828      	ldr	r0, [pc, #160]	; (801a00c <_printf_i+0x248>)
 8019f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019f6e:	e7e3      	b.n	8019f38 <_printf_i+0x174>
 8019f70:	0659      	lsls	r1, r3, #25
 8019f72:	bf48      	it	mi
 8019f74:	b2b6      	uxthmi	r6, r6
 8019f76:	e7e6      	b.n	8019f46 <_printf_i+0x182>
 8019f78:	4615      	mov	r5, r2
 8019f7a:	e7bb      	b.n	8019ef4 <_printf_i+0x130>
 8019f7c:	682b      	ldr	r3, [r5, #0]
 8019f7e:	6826      	ldr	r6, [r4, #0]
 8019f80:	6961      	ldr	r1, [r4, #20]
 8019f82:	1d18      	adds	r0, r3, #4
 8019f84:	6028      	str	r0, [r5, #0]
 8019f86:	0635      	lsls	r5, r6, #24
 8019f88:	681b      	ldr	r3, [r3, #0]
 8019f8a:	d501      	bpl.n	8019f90 <_printf_i+0x1cc>
 8019f8c:	6019      	str	r1, [r3, #0]
 8019f8e:	e002      	b.n	8019f96 <_printf_i+0x1d2>
 8019f90:	0670      	lsls	r0, r6, #25
 8019f92:	d5fb      	bpl.n	8019f8c <_printf_i+0x1c8>
 8019f94:	8019      	strh	r1, [r3, #0]
 8019f96:	2300      	movs	r3, #0
 8019f98:	6123      	str	r3, [r4, #16]
 8019f9a:	4615      	mov	r5, r2
 8019f9c:	e7ba      	b.n	8019f14 <_printf_i+0x150>
 8019f9e:	682b      	ldr	r3, [r5, #0]
 8019fa0:	1d1a      	adds	r2, r3, #4
 8019fa2:	602a      	str	r2, [r5, #0]
 8019fa4:	681d      	ldr	r5, [r3, #0]
 8019fa6:	6862      	ldr	r2, [r4, #4]
 8019fa8:	2100      	movs	r1, #0
 8019faa:	4628      	mov	r0, r5
 8019fac:	f7e6 f8e8 	bl	8000180 <memchr>
 8019fb0:	b108      	cbz	r0, 8019fb6 <_printf_i+0x1f2>
 8019fb2:	1b40      	subs	r0, r0, r5
 8019fb4:	6060      	str	r0, [r4, #4]
 8019fb6:	6863      	ldr	r3, [r4, #4]
 8019fb8:	6123      	str	r3, [r4, #16]
 8019fba:	2300      	movs	r3, #0
 8019fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fc0:	e7a8      	b.n	8019f14 <_printf_i+0x150>
 8019fc2:	6923      	ldr	r3, [r4, #16]
 8019fc4:	462a      	mov	r2, r5
 8019fc6:	4649      	mov	r1, r9
 8019fc8:	4640      	mov	r0, r8
 8019fca:	47d0      	blx	sl
 8019fcc:	3001      	adds	r0, #1
 8019fce:	d0ab      	beq.n	8019f28 <_printf_i+0x164>
 8019fd0:	6823      	ldr	r3, [r4, #0]
 8019fd2:	079b      	lsls	r3, r3, #30
 8019fd4:	d413      	bmi.n	8019ffe <_printf_i+0x23a>
 8019fd6:	68e0      	ldr	r0, [r4, #12]
 8019fd8:	9b03      	ldr	r3, [sp, #12]
 8019fda:	4298      	cmp	r0, r3
 8019fdc:	bfb8      	it	lt
 8019fde:	4618      	movlt	r0, r3
 8019fe0:	e7a4      	b.n	8019f2c <_printf_i+0x168>
 8019fe2:	2301      	movs	r3, #1
 8019fe4:	4632      	mov	r2, r6
 8019fe6:	4649      	mov	r1, r9
 8019fe8:	4640      	mov	r0, r8
 8019fea:	47d0      	blx	sl
 8019fec:	3001      	adds	r0, #1
 8019fee:	d09b      	beq.n	8019f28 <_printf_i+0x164>
 8019ff0:	3501      	adds	r5, #1
 8019ff2:	68e3      	ldr	r3, [r4, #12]
 8019ff4:	9903      	ldr	r1, [sp, #12]
 8019ff6:	1a5b      	subs	r3, r3, r1
 8019ff8:	42ab      	cmp	r3, r5
 8019ffa:	dcf2      	bgt.n	8019fe2 <_printf_i+0x21e>
 8019ffc:	e7eb      	b.n	8019fd6 <_printf_i+0x212>
 8019ffe:	2500      	movs	r5, #0
 801a000:	f104 0619 	add.w	r6, r4, #25
 801a004:	e7f5      	b.n	8019ff2 <_printf_i+0x22e>
 801a006:	bf00      	nop
 801a008:	0801a4b1 	.word	0x0801a4b1
 801a00c:	0801a4c2 	.word	0x0801a4c2

0801a010 <_putc_r>:
 801a010:	b570      	push	{r4, r5, r6, lr}
 801a012:	460d      	mov	r5, r1
 801a014:	4614      	mov	r4, r2
 801a016:	4606      	mov	r6, r0
 801a018:	b118      	cbz	r0, 801a022 <_putc_r+0x12>
 801a01a:	6983      	ldr	r3, [r0, #24]
 801a01c:	b90b      	cbnz	r3, 801a022 <_putc_r+0x12>
 801a01e:	f7ff fb23 	bl	8019668 <__sinit>
 801a022:	4b1c      	ldr	r3, [pc, #112]	; (801a094 <_putc_r+0x84>)
 801a024:	429c      	cmp	r4, r3
 801a026:	d124      	bne.n	801a072 <_putc_r+0x62>
 801a028:	6874      	ldr	r4, [r6, #4]
 801a02a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a02c:	07d8      	lsls	r0, r3, #31
 801a02e:	d405      	bmi.n	801a03c <_putc_r+0x2c>
 801a030:	89a3      	ldrh	r3, [r4, #12]
 801a032:	0599      	lsls	r1, r3, #22
 801a034:	d402      	bmi.n	801a03c <_putc_r+0x2c>
 801a036:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a038:	f7ff fbb4 	bl	80197a4 <__retarget_lock_acquire_recursive>
 801a03c:	68a3      	ldr	r3, [r4, #8]
 801a03e:	3b01      	subs	r3, #1
 801a040:	2b00      	cmp	r3, #0
 801a042:	60a3      	str	r3, [r4, #8]
 801a044:	da05      	bge.n	801a052 <_putc_r+0x42>
 801a046:	69a2      	ldr	r2, [r4, #24]
 801a048:	4293      	cmp	r3, r2
 801a04a:	db1c      	blt.n	801a086 <_putc_r+0x76>
 801a04c:	b2eb      	uxtb	r3, r5
 801a04e:	2b0a      	cmp	r3, #10
 801a050:	d019      	beq.n	801a086 <_putc_r+0x76>
 801a052:	6823      	ldr	r3, [r4, #0]
 801a054:	1c5a      	adds	r2, r3, #1
 801a056:	6022      	str	r2, [r4, #0]
 801a058:	701d      	strb	r5, [r3, #0]
 801a05a:	b2ed      	uxtb	r5, r5
 801a05c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a05e:	07da      	lsls	r2, r3, #31
 801a060:	d405      	bmi.n	801a06e <_putc_r+0x5e>
 801a062:	89a3      	ldrh	r3, [r4, #12]
 801a064:	059b      	lsls	r3, r3, #22
 801a066:	d402      	bmi.n	801a06e <_putc_r+0x5e>
 801a068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a06a:	f7ff fb9c 	bl	80197a6 <__retarget_lock_release_recursive>
 801a06e:	4628      	mov	r0, r5
 801a070:	bd70      	pop	{r4, r5, r6, pc}
 801a072:	4b09      	ldr	r3, [pc, #36]	; (801a098 <_putc_r+0x88>)
 801a074:	429c      	cmp	r4, r3
 801a076:	d101      	bne.n	801a07c <_putc_r+0x6c>
 801a078:	68b4      	ldr	r4, [r6, #8]
 801a07a:	e7d6      	b.n	801a02a <_putc_r+0x1a>
 801a07c:	4b07      	ldr	r3, [pc, #28]	; (801a09c <_putc_r+0x8c>)
 801a07e:	429c      	cmp	r4, r3
 801a080:	bf08      	it	eq
 801a082:	68f4      	ldreq	r4, [r6, #12]
 801a084:	e7d1      	b.n	801a02a <_putc_r+0x1a>
 801a086:	4629      	mov	r1, r5
 801a088:	4622      	mov	r2, r4
 801a08a:	4630      	mov	r0, r6
 801a08c:	f7ff f912 	bl	80192b4 <__swbuf_r>
 801a090:	4605      	mov	r5, r0
 801a092:	e7e3      	b.n	801a05c <_putc_r+0x4c>
 801a094:	0801a460 	.word	0x0801a460
 801a098:	0801a480 	.word	0x0801a480
 801a09c:	0801a440 	.word	0x0801a440

0801a0a0 <_sbrk_r>:
 801a0a0:	b538      	push	{r3, r4, r5, lr}
 801a0a2:	4d06      	ldr	r5, [pc, #24]	; (801a0bc <_sbrk_r+0x1c>)
 801a0a4:	2300      	movs	r3, #0
 801a0a6:	4604      	mov	r4, r0
 801a0a8:	4608      	mov	r0, r1
 801a0aa:	602b      	str	r3, [r5, #0]
 801a0ac:	f7e6 feca 	bl	8000e44 <_sbrk>
 801a0b0:	1c43      	adds	r3, r0, #1
 801a0b2:	d102      	bne.n	801a0ba <_sbrk_r+0x1a>
 801a0b4:	682b      	ldr	r3, [r5, #0]
 801a0b6:	b103      	cbz	r3, 801a0ba <_sbrk_r+0x1a>
 801a0b8:	6023      	str	r3, [r4, #0]
 801a0ba:	bd38      	pop	{r3, r4, r5, pc}
 801a0bc:	200086c0 	.word	0x200086c0

0801a0c0 <__sread>:
 801a0c0:	b510      	push	{r4, lr}
 801a0c2:	460c      	mov	r4, r1
 801a0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0c8:	f000 f8a0 	bl	801a20c <_read_r>
 801a0cc:	2800      	cmp	r0, #0
 801a0ce:	bfab      	itete	ge
 801a0d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a0d2:	89a3      	ldrhlt	r3, [r4, #12]
 801a0d4:	181b      	addge	r3, r3, r0
 801a0d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a0da:	bfac      	ite	ge
 801a0dc:	6563      	strge	r3, [r4, #84]	; 0x54
 801a0de:	81a3      	strhlt	r3, [r4, #12]
 801a0e0:	bd10      	pop	{r4, pc}

0801a0e2 <__swrite>:
 801a0e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0e6:	461f      	mov	r7, r3
 801a0e8:	898b      	ldrh	r3, [r1, #12]
 801a0ea:	05db      	lsls	r3, r3, #23
 801a0ec:	4605      	mov	r5, r0
 801a0ee:	460c      	mov	r4, r1
 801a0f0:	4616      	mov	r6, r2
 801a0f2:	d505      	bpl.n	801a100 <__swrite+0x1e>
 801a0f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0f8:	2302      	movs	r3, #2
 801a0fa:	2200      	movs	r2, #0
 801a0fc:	f000 f868 	bl	801a1d0 <_lseek_r>
 801a100:	89a3      	ldrh	r3, [r4, #12]
 801a102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a106:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a10a:	81a3      	strh	r3, [r4, #12]
 801a10c:	4632      	mov	r2, r6
 801a10e:	463b      	mov	r3, r7
 801a110:	4628      	mov	r0, r5
 801a112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a116:	f000 b817 	b.w	801a148 <_write_r>

0801a11a <__sseek>:
 801a11a:	b510      	push	{r4, lr}
 801a11c:	460c      	mov	r4, r1
 801a11e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a122:	f000 f855 	bl	801a1d0 <_lseek_r>
 801a126:	1c43      	adds	r3, r0, #1
 801a128:	89a3      	ldrh	r3, [r4, #12]
 801a12a:	bf15      	itete	ne
 801a12c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a12e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a132:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a136:	81a3      	strheq	r3, [r4, #12]
 801a138:	bf18      	it	ne
 801a13a:	81a3      	strhne	r3, [r4, #12]
 801a13c:	bd10      	pop	{r4, pc}

0801a13e <__sclose>:
 801a13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a142:	f000 b813 	b.w	801a16c <_close_r>
	...

0801a148 <_write_r>:
 801a148:	b538      	push	{r3, r4, r5, lr}
 801a14a:	4d07      	ldr	r5, [pc, #28]	; (801a168 <_write_r+0x20>)
 801a14c:	4604      	mov	r4, r0
 801a14e:	4608      	mov	r0, r1
 801a150:	4611      	mov	r1, r2
 801a152:	2200      	movs	r2, #0
 801a154:	602a      	str	r2, [r5, #0]
 801a156:	461a      	mov	r2, r3
 801a158:	f7e6 fa8a 	bl	8000670 <_write>
 801a15c:	1c43      	adds	r3, r0, #1
 801a15e:	d102      	bne.n	801a166 <_write_r+0x1e>
 801a160:	682b      	ldr	r3, [r5, #0]
 801a162:	b103      	cbz	r3, 801a166 <_write_r+0x1e>
 801a164:	6023      	str	r3, [r4, #0]
 801a166:	bd38      	pop	{r3, r4, r5, pc}
 801a168:	200086c0 	.word	0x200086c0

0801a16c <_close_r>:
 801a16c:	b538      	push	{r3, r4, r5, lr}
 801a16e:	4d06      	ldr	r5, [pc, #24]	; (801a188 <_close_r+0x1c>)
 801a170:	2300      	movs	r3, #0
 801a172:	4604      	mov	r4, r0
 801a174:	4608      	mov	r0, r1
 801a176:	602b      	str	r3, [r5, #0]
 801a178:	f7e6 fe2f 	bl	8000dda <_close>
 801a17c:	1c43      	adds	r3, r0, #1
 801a17e:	d102      	bne.n	801a186 <_close_r+0x1a>
 801a180:	682b      	ldr	r3, [r5, #0]
 801a182:	b103      	cbz	r3, 801a186 <_close_r+0x1a>
 801a184:	6023      	str	r3, [r4, #0]
 801a186:	bd38      	pop	{r3, r4, r5, pc}
 801a188:	200086c0 	.word	0x200086c0

0801a18c <_fstat_r>:
 801a18c:	b538      	push	{r3, r4, r5, lr}
 801a18e:	4d07      	ldr	r5, [pc, #28]	; (801a1ac <_fstat_r+0x20>)
 801a190:	2300      	movs	r3, #0
 801a192:	4604      	mov	r4, r0
 801a194:	4608      	mov	r0, r1
 801a196:	4611      	mov	r1, r2
 801a198:	602b      	str	r3, [r5, #0]
 801a19a:	f7e6 fe2a 	bl	8000df2 <_fstat>
 801a19e:	1c43      	adds	r3, r0, #1
 801a1a0:	d102      	bne.n	801a1a8 <_fstat_r+0x1c>
 801a1a2:	682b      	ldr	r3, [r5, #0]
 801a1a4:	b103      	cbz	r3, 801a1a8 <_fstat_r+0x1c>
 801a1a6:	6023      	str	r3, [r4, #0]
 801a1a8:	bd38      	pop	{r3, r4, r5, pc}
 801a1aa:	bf00      	nop
 801a1ac:	200086c0 	.word	0x200086c0

0801a1b0 <_isatty_r>:
 801a1b0:	b538      	push	{r3, r4, r5, lr}
 801a1b2:	4d06      	ldr	r5, [pc, #24]	; (801a1cc <_isatty_r+0x1c>)
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	4604      	mov	r4, r0
 801a1b8:	4608      	mov	r0, r1
 801a1ba:	602b      	str	r3, [r5, #0]
 801a1bc:	f7e6 fe29 	bl	8000e12 <_isatty>
 801a1c0:	1c43      	adds	r3, r0, #1
 801a1c2:	d102      	bne.n	801a1ca <_isatty_r+0x1a>
 801a1c4:	682b      	ldr	r3, [r5, #0]
 801a1c6:	b103      	cbz	r3, 801a1ca <_isatty_r+0x1a>
 801a1c8:	6023      	str	r3, [r4, #0]
 801a1ca:	bd38      	pop	{r3, r4, r5, pc}
 801a1cc:	200086c0 	.word	0x200086c0

0801a1d0 <_lseek_r>:
 801a1d0:	b538      	push	{r3, r4, r5, lr}
 801a1d2:	4d07      	ldr	r5, [pc, #28]	; (801a1f0 <_lseek_r+0x20>)
 801a1d4:	4604      	mov	r4, r0
 801a1d6:	4608      	mov	r0, r1
 801a1d8:	4611      	mov	r1, r2
 801a1da:	2200      	movs	r2, #0
 801a1dc:	602a      	str	r2, [r5, #0]
 801a1de:	461a      	mov	r2, r3
 801a1e0:	f7e6 fe22 	bl	8000e28 <_lseek>
 801a1e4:	1c43      	adds	r3, r0, #1
 801a1e6:	d102      	bne.n	801a1ee <_lseek_r+0x1e>
 801a1e8:	682b      	ldr	r3, [r5, #0]
 801a1ea:	b103      	cbz	r3, 801a1ee <_lseek_r+0x1e>
 801a1ec:	6023      	str	r3, [r4, #0]
 801a1ee:	bd38      	pop	{r3, r4, r5, pc}
 801a1f0:	200086c0 	.word	0x200086c0

0801a1f4 <__malloc_lock>:
 801a1f4:	4801      	ldr	r0, [pc, #4]	; (801a1fc <__malloc_lock+0x8>)
 801a1f6:	f7ff bad5 	b.w	80197a4 <__retarget_lock_acquire_recursive>
 801a1fa:	bf00      	nop
 801a1fc:	200086b4 	.word	0x200086b4

0801a200 <__malloc_unlock>:
 801a200:	4801      	ldr	r0, [pc, #4]	; (801a208 <__malloc_unlock+0x8>)
 801a202:	f7ff bad0 	b.w	80197a6 <__retarget_lock_release_recursive>
 801a206:	bf00      	nop
 801a208:	200086b4 	.word	0x200086b4

0801a20c <_read_r>:
 801a20c:	b538      	push	{r3, r4, r5, lr}
 801a20e:	4d07      	ldr	r5, [pc, #28]	; (801a22c <_read_r+0x20>)
 801a210:	4604      	mov	r4, r0
 801a212:	4608      	mov	r0, r1
 801a214:	4611      	mov	r1, r2
 801a216:	2200      	movs	r2, #0
 801a218:	602a      	str	r2, [r5, #0]
 801a21a:	461a      	mov	r2, r3
 801a21c:	f7e6 fdc0 	bl	8000da0 <_read>
 801a220:	1c43      	adds	r3, r0, #1
 801a222:	d102      	bne.n	801a22a <_read_r+0x1e>
 801a224:	682b      	ldr	r3, [r5, #0]
 801a226:	b103      	cbz	r3, 801a22a <_read_r+0x1e>
 801a228:	6023      	str	r3, [r4, #0]
 801a22a:	bd38      	pop	{r3, r4, r5, pc}
 801a22c:	200086c0 	.word	0x200086c0

0801a230 <_init>:
 801a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a232:	bf00      	nop
 801a234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a236:	bc08      	pop	{r3}
 801a238:	469e      	mov	lr, r3
 801a23a:	4770      	bx	lr

0801a23c <_fini>:
 801a23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a23e:	bf00      	nop
 801a240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a242:	bc08      	pop	{r3}
 801a244:	469e      	mov	lr, r3
 801a246:	4770      	bx	lr
